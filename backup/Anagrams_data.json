{"task": "Anagrams", "blocks": [{"lang": "8th", "loc": 134, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\<br/>\\ anagrams.8th<br/>\\ Rosetta Code - Anagrams problem<br/>\\ Using the word list at:<br/>\\   http://www.puzzlers.org/pub/wordlists/unixdict.txt, <br/>\\ find the sets of words that share the same characters <br/>\\ that contain the most words in them.<br/>\\<br/>\u00a0<br/>ns: anagrams<br/>\u00a0<br/>m:new var, anamap<br/>a:new var, anaptr<br/>0 var, analen<br/>\u00a0<br/>\\ sort a string<br/>: s:sort \\ s -- s                             \\ <br/>  null s:/                                    \\ a<br/>  ' s:cmpi a:sort                             \\ a<br/>  \"\" a:join                                   \\ s<br/> \u00a0;<br/>\u00a0<br/>: process-words \\ word --                     \\ word<br/>  s:lc                                        \\ word<br/>  dup                                         \\ word word<br/>  &gt;r                                          \\ word | word<br/>  \\ 1. we create a sorted version of the curret word (sword)<br/>  s:sort                                      \\ sword | word<br/>  \\ We check if sword can be found in map anamap<br/>  anamap @                                    \\ sword anamap | word <br/>  over                                        \\ sword anamap sword | word<br/>  m:exists?                                   \\ sword anamap boolean | word<br/>  if                                          \\ sword anamap | word<br/>  \\ If sword already exists in anamap:<br/>  \\    - get mapvalue, which is an array<br/>  \\    - add the original word to that array<br/>  \\    - store the array in the map with key sword<br/>    over                                      \\ sword anamap sword | word<br/>    m:@                                       \\ sword anamap array | word<br/>    r&gt;                                        \\ sword anamap array word<br/>    a:push                                    \\ sword anamap array<br/>    rot                                       \\ anamap array sword<br/>    swap                                      \\ anamap sword array<br/>    m:!                                       \\ anamap<br/>  else                                        \\ sword anamap | word<br/>  \\ If sword does not yet exist in anamap: <br/>  \\    - create empty array<br/>  \\    - put the original word into that array<br/>  \\    - store the array in the map with key sword<br/>    swap                                      \\ anamap sword | word<br/>    a:new                                     \\ anamap sword array | word<br/>    r&gt;                                        \\ anamap sword array word<br/>    a:push                                    \\ anamap sword array<br/>    m:!                                       \\ anamap<br/>  then<br/>  drop                                        \\<br/> \u00a0;<br/>\u00a0<br/>\\ Read and check all words in array analist<br/>: read-and-check-words \\ --                   \\<br/>  \"analist.txt\"                               \\ fname <br/>  f:open-ro                                   \\ f<br/>  ' process-words f:eachline                  \\ f<br/>  f:close                                     \\ <br/> \u00a0;<br/>\u00a0<br/>: len&lt; \\ key array arraylen --                \\ key array arraylen<br/>  2drop                                       \\ key <br/>  drop                                        \\<br/> \u00a0;<br/>\u00a0<br/>: len= \\ key array arraylen --                \\ key array arraylen<br/>  2drop                                       \\ key<br/>  anaptr @                                    \\ key anaptr<br/>  swap                                        \\ anaptr key<br/>  a:push                                      \\ anaptr<br/>  drop                                        \\<br/> \u00a0;<br/>\u00a0<br/>: len&gt; \\ key array arraylen --                \\ key array arraylen<br/>  analen                                      \\ key array arraylen analen<br/> \u00a0!                                           \\ key array<br/>  drop                                        \\ key<br/>  anaptr @                                    \\ key anaptr<br/>  a:clear                                     \\ key anaptr<br/>  swap                                        \\ anaptr key<br/>  a:push                                      \\ anaptr<br/>  drop                                        \\<br/> \u00a0;<br/>\u00a0<br/>: fetch-longest-list \\ key array --           \\ key array<br/>  a:len                                       \\ key array arraylen<br/>  analen @                                    \\ key array arraylen analen<br/>  2dup                                        \\ key array arraylen analen arraylen analen<br/>  n:cmp                                       \\ key array arraylen analen value<br/>  1 n:+                                       \\ key array arraylen analen value<br/>  nip                                         \\ key array arraylen value <br/>  [ ' len&lt; , ' len= , ' len&gt; ]                \\ key array arraylen value swarr<br/>  swap                                        \\ key array arraylen swarr value<br/>  caseof                                      \\ <br/> \u00a0;<br/>\u00a0<br/>: list-words-1 \\ ix value --                  \\ ix value<br/>  nip                                         \\ value<br/>  \"\\t\" . .                                    \\<br/> \u00a0;<br/>\u00a0<br/>: list-words \\ ix value --                    \\ ix value<br/>  nip                                         \\ value<br/>  anamap @                                    \\ value anamap<br/>  swap                                        \\ anamap value<br/>  m:@                                         \\ anamap array<br/>  nip                                         \\ array<br/>  ' list-words-1 a:each                       \\ array<br/>  cr                                          \\ array<br/>  drop                                        \\<br/> \u00a0;<br/>\u00a0<br/>: app:main<br/>\u00a0<br/>  \\ Create a map, where the values are arrays, containing all words<br/>  \\ which are the same when sorted (sword); sword is used as key<br/>  read-and-check-words<br/>\u00a0<br/>  \\ Create an array that holds the keys for anamap, for which the value,<br/>  \\ which is the array of anagrams, has the biggest length found.<br/>  anamap @ ' fetch-longest-list m:each<br/>\u00a0<br/>  \\ Dump the resulting words to the console<br/>  anaptr @ ' list-words a:each drop<br/>  bye<br/> \u00a0;<br/>\u00a0</pre>"}, {"lang": "ABAP", "loc": 102, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPREPORT.htm\"><span class=\"kw3\">report</span></a> zz_anagrams <span class=\"kw9\"><span class=\"kw4\">no</span> standard <span class=\"kw4\">page</span> heading</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPDEFINE.htm\"><span class=\"kw3\">define</span></a> update_progress<span class=\"sy0\">.</span><br/>  <span class=\"kw8\">call function</span> <span class=\"st0\">'SAPGUI_PROGRESS_INDICATOR'</span><br/>    <span class=\"kw4\">exporting</span><br/>      text <span class=\"sy1\">=</span> <span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPEND-OF-DEFINITION.htm\"><span class=\"kw3\">end-of-definition</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">\" Selection screen segment allowing the person to choose which file will act as input.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPSELECTION-SCREEN.htm\"><span class=\"kw3\">selection-screen</span></a> <span class=\"kw9\">begin <span class=\"kw4\">of</span> block</span> file_choice<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPPARAMETERS.htm\"><span class=\"kw2\">parameters</span></a> p_file <span class=\"kw4\">type</span> <span class=\"kw4\">string</span> <span class=\"kw9\"><span class=\"kw4\">lower</span> case</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPSELECTION-SCREEN.htm\"><span class=\"kw3\">selection-screen</span></a> <span class=\"kw9\">end <span class=\"kw4\">of</span> block</span> file_choice<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">\" When the user requests help with input, run the routine to allow them to navigate the presentation server.</span><br/><span class=\"kw8\"><a href=\"http://help.sap.com/abapdocu/en/ABAPAT.htm\"><span class=\"kw3\">at</span></a> selection-screen</span> <span class=\"kw9\">on <span class=\"kw4\">value-request</span> for</span> p_file<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPPERFORM.htm\"><span class=\"kw3\">perform</span></a> getfile <span class=\"kw4\">using</span> p_file<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw8\"><a href=\"http://help.sap.com/abapdocu/en/ABAPAT.htm\"><span class=\"kw3\">at</span></a> selection-screen</span> <span class=\"kw4\">output</span><span class=\"sy0\">.</span><br/>  <span class=\"sy0\">%</span>_p_file_<span class=\"sy0\">%</span>_app_<span class=\"sy0\">%-</span>text <span class=\"sy1\">=</span> <span class=\"st0\">'Input File: '</span><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPSTART-OF-SELECTION.htm\"><span class=\"kw3\">start-of-selection</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> gt_data <span class=\"kw4\">type</span> <span class=\"kw9\"><span class=\"kw4\">table</span> of</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"co1\">\" Read the specified file from the presentation server into memory.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPPERFORM.htm\"><span class=\"kw3\">perform</span></a> readfile <span class=\"kw4\">using</span> p_file <span class=\"kw4\">changing</span> gt_data<span class=\"sy0\">.</span><br/>  <span class=\"co1\">\" After the file has been read into memory, loop through it line-by-line and make anagrams.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPPERFORM.htm\"><span class=\"kw3\">perform</span></a> anagrams <span class=\"kw4\">using</span> gt_data<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">\" Subroutine for generating a list of anagrams.</span><br/><span class=\"co1\">\" The supplied input is a table, with each entry corresponding to a word.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPFORM.htm\"><span class=\"kw3\">form</span></a> anagrams <span class=\"kw4\">using</span> it_data <span class=\"kw4\">like</span> gt_data<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">types</span></a> <span class=\"kw9\">begin of</span> ty_map<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">types</span></a> <span class=\"kw4\">key</span> <span class=\"kw4\">type</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">types</span></a> <span class=\"kw4\">value</span> <span class=\"kw4\">type</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">types</span></a> <span class=\"kw9\">end of</span> ty_map<span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> lv_char     <span class=\"kw4\">type</span> c<span class=\"sy0\">,</span><br/>        lv_len      <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_string   <span class=\"kw4\">type</span> <span class=\"kw4\">string</span><span class=\"sy0\">,</span><br/>        ls_entry    <span class=\"kw4\">type</span> ty_map<span class=\"sy0\">,</span><br/>        lt_anagrams <span class=\"kw4\">type</span> <span class=\"kw9\">standard <span class=\"kw4\">table</span> of</span> ty_map<span class=\"sy0\">,</span><br/>        lt_c_tab    <span class=\"kw4\">type</span> <span class=\"kw9\"><span class=\"kw4\">table</span> of</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPFIELD-SYMBOLS.htm\"><span class=\"kw2\">field-symbols</span></a><span class=\"sy0\">:</span> <span class=\"sy1\">&lt;</span>fs_raw<span class=\"sy1\">&gt;</span> <span class=\"kw4\">type</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><br/>  <span class=\"co1\">\" Loop through each word in the table, and make an associative array.</span><br/>  <span class=\"kw7\"><a href=\"http://help.sap.com/abapdocu/en/ABAPLOOP.htm\"><span class=\"kw1\">loop</span></a> at</span> gt_data <span class=\"kw4\">assigning</span> <span class=\"sy1\">&lt;</span>fs_raw<span class=\"sy1\">&gt;</span><span class=\"sy0\">.</span><br/>    <span class=\"co1\">\" First, we need to re-order the word alphabetically. This generated a key. All anagrams will use this same key.</span><br/>    <span class=\"co1\">\" Add each character to a table, which we will then sort alphabetically.</span><br/>    lv_len <span class=\"sy1\">=</span> <span class=\"kw4\">strlen</span><span class=\"br0\">(</span> <span class=\"sy1\">&lt;</span>fs_raw<span class=\"sy1\">&gt;</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPREFRESH.htm\"><span class=\"kw3\">refresh</span></a> lt_c_tab<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">do</span></a> lv_len <span class=\"kw4\">times</span><span class=\"sy0\">.</span><br/>      lv_len <span class=\"sy1\">=</span> sy<span class=\"sy0\">-</span><span class=\"kw4\">index</span>  <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">append</span></a> <span class=\"sy1\">&lt;</span>fs_raw<span class=\"sy1\">&gt;</span><span class=\"sy0\">+</span>lv_len<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">to</span> lt_c_tab<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPSORT.htm\"><span class=\"kw3\">sort</span></a> lt_c_tab <span class=\"kw9\"><span class=\"kw4\">as</span> text</span><span class=\"sy0\">.</span><br/>    <span class=\"co1\">\" Now append the characters to a string and add it as a key into the map.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPCLEAR.htm\"><span class=\"kw3\">clear</span></a> lv_string<span class=\"sy0\">.</span><br/>    <span class=\"kw7\"><a href=\"http://help.sap.com/abapdocu/en/ABAPLOOP.htm\"><span class=\"kw1\">loop</span></a> at</span> lt_c_tab <span class=\"kw4\">into</span> lv_char<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPCONCATENATE.htm\"><span class=\"kw3\">concatenate</span></a> lv_char lv_string <span class=\"kw4\">into</span> lv_string <span class=\"kw9\">respecting blanks</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDLOOP.htm\"><span class=\"kw1\">endloop</span></a><span class=\"sy0\">.</span><br/>    ls_entry<span class=\"sy0\">-</span><span class=\"kw4\">key</span> <span class=\"sy1\">=</span> lv_string<span class=\"sy0\">.</span><br/>    ls_entry<span class=\"sy0\">-</span><span class=\"kw4\">value</span> <span class=\"sy1\">=</span> <span class=\"sy1\">&lt;</span>fs_raw<span class=\"sy1\">&gt;</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">append</span></a> ls_entry <span class=\"kw4\">to</span> lt_anagrams<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDLOOP.htm\"><span class=\"kw1\">endloop</span></a><span class=\"sy0\">.</span><br/>  <span class=\"co1\">\" After we're done processing, output a list of the anagrams.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPCLEAR.htm\"><span class=\"kw3\">clear</span></a> lv_string<span class=\"sy0\">.</span><br/>  <span class=\"kw7\"><a href=\"http://help.sap.com/abapdocu/en/ABAPLOOP.htm\"><span class=\"kw1\">loop</span></a> at</span> lt_anagrams <span class=\"kw4\">into</span> ls_entry<span class=\"sy0\">.</span><br/>    <span class=\"co1\">\" Is it part of the same key --&gt; Output in the same line, else a new entry.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> lv_string <span class=\"sy1\">=</span> ls_entry<span class=\"sy0\">-</span><span class=\"kw4\">key</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a><span class=\"sy0\">:</span> <span class=\"st0\">', '</span><span class=\"sy0\">,</span> ls_entry<span class=\"sy0\">-</span><span class=\"kw4\">value</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">else</span></a><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> sy<span class=\"sy0\">-</span>tabix <span class=\"sy1\">&lt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a><span class=\"sy0\">:</span> <span class=\"st0\">']'</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a><span class=\"sy0\">:</span>  <span class=\"sy0\">/</span> <span class=\"st0\">'['</span><span class=\"sy0\">,</span> ls_entry<span class=\"sy0\">-</span><span class=\"kw4\">value</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>    lv_string <span class=\"sy1\">=</span> ls_entry<span class=\"sy0\">-</span><span class=\"kw4\">key</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDLOOP.htm\"><span class=\"kw1\">endloop</span></a><span class=\"sy0\">.</span><br/>  <span class=\"co1\">\" Close last entry.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a> <span class=\"st0\">']'</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDFORM.htm\"><span class=\"kw3\">endform</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">\" Read a specified file from the presentation server.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPFORM.htm\"><span class=\"kw3\">form</span></a> readfile <span class=\"kw4\">using</span> i_file <span class=\"kw4\">type</span> <span class=\"kw4\">string</span> <span class=\"kw4\">changing</span> it_raw <span class=\"kw4\">like</span> gt_data<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> l_datat <span class=\"kw4\">type</span> <span class=\"kw4\">string</span><span class=\"sy0\">,</span><br/>        l_msg<span class=\"br0\">(</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        l_lines<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"co1\">\" Read the file into memory.</span><br/>  update_progress <span class=\"st0\">'Reading file...'</span><span class=\"sy0\">.</span><br/>  <span class=\"kw8\">call method</span> cl_gui_frontend_services<span class=\"sy0\">=&gt;</span><span class=\"me2\">gui_upload</span><br/>    <span class=\"kw4\">exporting</span><br/>      filename <span class=\"sy1\">=</span> i_file<br/>    <span class=\"kw4\">changing</span><br/>      data_tab <span class=\"sy1\">=</span> it_raw<br/>    <span class=\"kw4\">exceptions</span><br/>      <span class=\"kw4\">others</span>   <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  <span class=\"co1\">\" Output error if the file could not be uploaded.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> sy<span class=\"sy0\">-</span>subrc <span class=\"sy1\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a> <span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">'Error reading the supplied file!'</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">return</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDFORM.htm\"><span class=\"kw3\">endform</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "Ada", "loc": 69, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Ordered_Maps</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Ordered_Sets</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Words_Of_Equal_Characters <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Set_Of_Words <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Ordered_Sets</span> <span class=\"br0\">(</span>String<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Containers</span>, Set_Of_Words;<br/>   <span class=\"kw3\">package</span> Anagrams <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Ordered_Maps</span> <span class=\"br0\">(</span>String, Set<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Anagrams;<br/>\u00a0<br/>   File  \u00a0: File_Type;<br/>   Result\u00a0: Map;<br/>   Max   \u00a0: Count_Type\u00a0:= <span class=\"nu0\">1</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Position\u00a0: Anagrams.<span class=\"me1\">Cursor</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      First\u00a0: Boolean\u00a0:= True;<br/>      List \u00a0: Set <span class=\"kw3\">renames</span> Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Position\u00a0: Set_Of_Words.<span class=\"me1\">Cursor</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> First <span class=\"kw1\">then</span><br/>            First\u00a0:= False;<br/>         <span class=\"kw1\">else</span><br/>            Put <span class=\"br0\">(</span>','<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Put <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Put;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> List.<span class=\"me1\">Length</span> = Max <span class=\"kw1\">then</span><br/>         Iterate <span class=\"br0\">(</span>List, Put'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Open <span class=\"br0\">(</span>File, In_File, <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">declare</span><br/>         Word\u00a0: <span class=\"kw3\">constant</span> String    \u00a0:= Get_Line <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/>         Key \u00a0: String <span class=\"br0\">(</span>Word'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; Character'Last<span class=\"br0\">)</span>;<br/>         List\u00a0: Set;<br/>         Position\u00a0: Anagrams.<span class=\"me1\">Cursor</span>;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Word'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Word'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> Key <span class=\"br0\">(</span>J<span class=\"br0\">)</span> &gt; Word <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  Key <span class=\"br0\">(</span>J + <span class=\"nu0\">1</span>..<span class=\"me1\">I</span><span class=\"br0\">)</span>\u00a0:= Key <span class=\"br0\">(</span>J..<span class=\"me1\">I</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>                  Key <span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= Word <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>                  <span class=\"kw3\">exit</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         Position\u00a0:= Find <span class=\"br0\">(</span>Result, Key<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Has_Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            List\u00a0:= Element <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>            Insert <span class=\"br0\">(</span>List, Word<span class=\"br0\">)</span>;<br/>            Replace_Element <span class=\"br0\">(</span>Result, Position, List<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Insert <span class=\"br0\">(</span>List, Word<span class=\"br0\">)</span>;<br/>            Include <span class=\"br0\">(</span>Result, Key, List<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Max\u00a0:= Count_Type'Max <span class=\"br0\">(</span>Max, Length <span class=\"br0\">(</span>List<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">exception</span><br/>   <span class=\"kw3\">when</span> End_Error =&gt;<br/>      Iterate <span class=\"br0\">(</span>Result, Put'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>      Close <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Words_Of_Equal_Characters;</pre>"}, {"lang": "ALGOL 68", "loc": 93, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># find longest list(s) of words that are anagrams in a list of words #</span><br/><span class=\"coMULTI\"># use the associative array in the Associate array/iteration task    #</span><br/><span class=\"co2\">PR read \"aArray.a68\" PR</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the number of occurances of ch in text #</span><br/><span class=\"kw4\">PROC</span> count <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">CHAR</span> ch <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> c <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> text <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> text <span class=\"kw2\">DO</span> <span class=\"kw2\">IF</span> text<span class=\"br0\">[</span> c <span class=\"br0\">]</span> <span class=\"sy1\">=</span> ch <span class=\"kw2\">THEN</span> result <span class=\"sy1\">+:=</span> 1 <span class=\"kw2\">FI</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         result<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># count #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns text with the characters sorted into ascending order #</span><br/><span class=\"kw4\">PROC</span> char sort <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">STRING</span> sorted <span class=\"sy1\">:=</span> text<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> end pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> sorted <span class=\"sy1\">-</span> 1 <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> sorted<br/>         <span class=\"kw2\">WHILE</span><br/>             <span class=\"kw3\">BOOL</span> swapped <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>             <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> sorted <span class=\"kw2\">TO</span> end pos <span class=\"kw2\">DO</span><br/>                 <span class=\"kw2\">IF</span> sorted<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> sorted<span class=\"br0\">[</span> pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><br/>                 <span class=\"kw2\">THEN</span>              <br/>                     <span class=\"kw3\">CHAR</span>  t           <span class=\"sy1\">:=</span> sorted<span class=\"br0\">[</span> pos     <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                     sorted<span class=\"br0\">[</span> pos     <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sorted<span class=\"br0\">[</span> pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                     sorted<span class=\"br0\">[</span> pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> t<span class=\"sy1\">;</span><br/>                     swapped           <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>                 <span class=\"kw2\">FI</span><br/>             <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>             swapped<br/>         <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         sorted<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># char sort #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># read the list of words and store in an associative array           #</span><br/>\u00a0<br/><span class=\"kw3\">CHAR</span> separator <span class=\"sy1\">=</span> <span class=\"st0\">\"|\"</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># character that will separate the anagrams #</span><br/>\u00a0<br/><span class=\"kw2\">IF</span>  <span class=\"kw6\">FILE</span> input file<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> file name <span class=\"sy1\">=</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">open</span><span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> file name<span class=\"sy1\">,</span> <span class=\"kw21\">stand in channel</span> <span class=\"br0\">)</span> <span class=\"sy1\">/=</span> 0<br/><span class=\"kw2\">THEN</span><br/>    <span class=\"coMULTI\"># failed to open the file #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>  <span class=\"st0\">\"Unable to open \"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> file name <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">ELSE</span><br/>    <span class=\"coMULTI\"># file opened OK #</span><br/>    <span class=\"kw3\">BOOL</span> at eof <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># set the EOF handler for the file #</span><br/>    <span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>                                     <span class=\"kw2\">BEGIN</span><br/>                                         <span class=\"coMULTI\"># note that we reached EOF on the #</span><br/>                                         <span class=\"coMULTI\"># latest read #</span><br/>                                         at eof <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>                                         <span class=\"coMULTI\"># return TRUE so processing can continue #</span><br/>                                         <span class=\"kw7\">TRUE</span><br/>                                     <span class=\"kw2\">END</span><br/>                       <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">REF</span> AARRAY words <span class=\"sy1\">:=</span> INIT <span class=\"kw4\">LOC</span> AARRAY<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> word<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> at eof<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw3\">STRING</span> word<span class=\"sy1\">;</span><br/>        get<span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span> word<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        words <span class=\"sy1\">//</span> char sort<span class=\"br0\">(</span> word <span class=\"br0\">)</span> <span class=\"sy1\">+:=</span> separator <span class=\"sy1\">+</span> word<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># close the file #</span><br/>    <span class=\"kw22\">close</span><span class=\"br0\">(</span> input file <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># find the maximum number of anagrams #</span><br/>\u00a0<br/>    <span class=\"kw3\">INT</span> max anagrams <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">REF</span> AAELEMENT e <span class=\"sy1\">:=</span> FIRST words<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> e <span class=\"kw7\">ISNT</span> nil element <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span>  <span class=\"kw3\">INT</span> anagrams <span class=\"sy1\">:=</span> count<span class=\"br0\">(</span> value <span class=\"kw6\">OF</span> e<span class=\"sy1\">,</span> separator <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            anagrams <span class=\"sy1\">&gt;</span> max anagrams<br/>        <span class=\"kw2\">THEN</span><br/>            max anagrams <span class=\"sy1\">:=</span> anagrams<br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        e <span class=\"sy1\">:=</span> NEXT words<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Maximum number of anagrams: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max anagrams<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>4 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># show the anagrams with the maximum number #</span><br/>    e <span class=\"sy1\">:=</span> FIRST words<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> e <span class=\"kw7\">ISNT</span> nil element <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span>  <span class=\"kw3\">INT</span> anagrams <span class=\"sy1\">:=</span> count<span class=\"br0\">(</span> value <span class=\"kw6\">OF</span> e<span class=\"sy1\">,</span> separator <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            anagrams <span class=\"sy1\">=</span> max anagrams<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> value <span class=\"kw6\">OF</span> e <span class=\"br0\">)</span><span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"kw8\">LWB</span> value <span class=\"kw6\">OF</span> e <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">:</span> <span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        e <span class=\"sy1\">:=</span> NEXT words<br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">FI</span></pre>"}, {"lang": "APL", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>anagrams\u2190{<br/>    tie\u2190\u2375 \u2395NTIE 0<br/>    dict\u2190\u2395NREAD tie 80(\u2395NSIZE tie)0<br/>    boxes\u2190((\u2395UCS 10)\u2260dict)\u2286dict<br/>    ana\u2190(({\u2375[\u234b\u2375]}\u00a8boxes)({\u2375}\u2338)boxes)<br/>    ({~' '\u220a\u00a8(\u2283/\u00af1\u2191[2]\u2375)}ana)\u233fana \u22c4 \u2395NUNTIE<br/>}<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 31, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"sy0\">,</span> Contents<span class=\"sy0\">,</span> unixdict<span class=\"sy0\">.</span>txt<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> Contents<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"`r\"</span><br/><span class=\"br0\">{</span> <span class=\"co1\">; parsing each line of the file we just read</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"co1\">; parsing each letter/character of the current word</span><br/>        Dummy <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> Dummy<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"D,\"</span> <span class=\"co1\">; sorting those letters before removing the delimiters (comma)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> Dummy<span class=\"sy0\">,</span> Dummy<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> All<br/>    List <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> Dummy <span class=\"st0\">\" \"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">,</span> Dummy <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span> <span class=\"co1\">; at this point, we have a list where each line looks like &lt;LETTERS&gt;&lt;SPACE&gt;&lt;WORD&gt;</span><br/>Count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> Contents <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> List <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>List<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> List<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> List<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"`r\"</span><br/><span class=\"br0\">{</span> <span class=\"co1\">; now the list is sorted, parse it counting the consecutive lines with the same set of &lt;LETTERS&gt;</span><br/>    Max <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>Count <span class=\"sy0\">&gt;</span> Max<span class=\"br0\">)</span>\u00a0? Count\u00a0: Max<br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> LinePart<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\" \"</span> <span class=\"co1\">; (LinePart1 are the letters, LinePart2 is the word)</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> PreviousLinePart1 <span class=\"sy0\">=</span> LinePart1 <span class=\"br0\">)</span><br/>        Count<span class=\"sy0\">++</span> <span class=\"sy0\">,</span> WordList <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> LinePart2<br/>    <span class=\"kw1\">Else</span><br/>        var_Result <span class=\"sy0\">.=</span> <span class=\"br0\">(</span> Count <span class=\"sy0\">&lt;&gt;</span> Max <span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"\"</span> <span class=\"co1\">; don't append if the number of common words is too low</span><br/>       \u00a0: <span class=\"st0\">\"`n\"</span> Count <span class=\"st0\">\"`t\"</span> PreviousLinePart1 <span class=\"st0\">\"`t\"</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>WordList<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">,</span> WordList <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">,</span> Count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    PreviousLinePart1 <span class=\"sy0\">:=</span> LinePart1<br/><span class=\"br0\">}</span><br/>List <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> var_Result <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>var_Result<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> var_Result<span class=\"sy0\">,</span> R N <span class=\"co1\">; make the higher scores appear first</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> var_Result<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"`r\"</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span>Max<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        var_Output <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>    <span class=\"kw1\">Else</span> <span class=\"co1\">; output only those sets of letters that scored the maximum amount of common words</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">ClipBoard</span></a> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>var_Output<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">; the result is also copied to the clipboard</span></pre>"}, {"lang": "AWK", "loc": 26, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># JUMBLEA.AWK - words with the most duplicate spellings</span><br/><span class=\"co1\"># syntax: GAWK -f JUMBLEA.AWK UNIXDICT.TXT</span><br/><span class=\"br0\">{</span>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">NF</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      w = sortstr<span class=\"br0\">(</span><span class=\"kw4\">toupper</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      arr<span class=\"br0\">[</span>w<span class=\"br0\">]</span> = arr<span class=\"br0\">[</span>w<span class=\"br0\">]</span> <span class=\"re0\">$i</span> <span class=\"st0\">\" \"</span><br/>      n = <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span> <span class=\"sy3\">/</span>,<span class=\"st0\">\"&amp;\"</span>,arr<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>max_n <span class=\"sy2\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span> max_n = n <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>w <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span> <span class=\"sy3\">/</span>,<span class=\"st0\">\"&amp;\"</span>,arr<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> max_n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\n</span>\"</span>,w,arr<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> sortstr<span class=\"br0\">(</span>str,  i,j,leng<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    leng = <span class=\"kw4\">length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i<span class=\"sy2\">&lt;=</span>leng; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=i; j<span class=\"sy2\">&gt;</span><span class=\"nu0\">1</span> <span class=\"sy1\">&amp;&amp;</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str,j<span class=\"sy3\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">&gt;</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; j<span class=\"sy3\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        str = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str,<span class=\"nu0\">1</span>,j<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str,j<span class=\"sy3\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str,j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 20, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">OPTION</span> COLLAPSE <span class=\"kw1\">TRUE</span><br/>\u00a0<br/><span class=\"kw1\">DECLARE</span> idx$ ASSOC <span class=\"kw1\">STRING</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> w$ IN LOAD$<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span> <span class=\"kw1\">STEP</span> NL$<br/>\u00a0<br/>    set$ = SORT$<span class=\"br0\">(</span>EXPLODE$<span class=\"br0\">(</span>w$, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    idx$<span class=\"br0\">(</span>set$<span class=\"br0\">)</span> = <span class=\"kw1\">APPEND</span>$<span class=\"br0\">(</span>idx$<span class=\"br0\">(</span>set$<span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, w$<span class=\"br0\">)</span><br/>    total = AMOUNT<span class=\"br0\">(</span>idx$<span class=\"br0\">(</span>set$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> MaxCount &lt; total <span class=\"kw1\">THEN</span> MaxCount = total<br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Analyzing took \"</span>, <span class=\"kw1\">TIMER</span>, <span class=\"st0\">\" msecs.\"</span>, NL$<br/>\u00a0<br/>LOOKUP idx$ <span class=\"kw1\">TO</span> n$ SIZE x<br/><span class=\"kw1\">FOR</span> y = <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> x-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">IF</span> MaxCount = AMOUNT<span class=\"br0\">(</span>idx$<span class=\"br0\">(</span>n$<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> n$<span class=\"br0\">[</span>y<span class=\"br0\">]</span>, <span class=\"st0\">\": \"</span>, idx$<span class=\"br0\">(</span>n$<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span></pre>"}, {"lang": "BBC BASIC", "loc": 64, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTLIB\"<br/>      sort% = FN_sortinit(0,0)<br/>\u00a0<br/>      REM Count number of words in dictionary:<br/>      nwords% = 0<br/>      dict% = OPENIN(\"unixdict.txt\")<br/>      WHILE NOT EOF#dict%<br/>        word$ = GET$#dict%<br/>        nwords% += 1<br/>      ENDWHILE<br/>      CLOSE #dict%<br/>\u00a0<br/>      REM Create arrays big enough to contain the dictionary:<br/>      DIM dict$(nwords%), sort$(nwords%)<br/>\u00a0<br/>      REM Load the dictionary and sort the characters in the words:<br/>      dict% = OPENIN(\"unixdict.txt\")<br/>      FOR word% = 1 TO nwords%<br/>        word$ = GET$#dict%<br/>        dict$(word%) = word$<br/>        sort$(word%) = FNsortchars(word$)<br/>      NEXT word%<br/>      CLOSE #dict%<br/>\u00a0<br/>      REM Sort arrays using the 'sorted character' words as a key:<br/>      C% = nwords%<br/>      CALL sort%, sort$(1), dict$(1)<br/>\u00a0<br/>      REM Count the longest sets of anagrams:<br/>      max% = 0<br/>      set% = 1<br/>      FOR word% = 1 TO nwords%-1<br/>        IF sort$(word%) = sort$(word%+1) THEN<br/>          set% += 1<br/>        ELSE<br/>          IF set% &gt; max% THEN max% = set%<br/>          set% = 1<br/>        ENDIF<br/>      NEXT word%<br/>\u00a0<br/>      REM Output the results:<br/>      set% = 1<br/>      FOR word% = 1 TO nwords%-1<br/>        IF sort$(word%) = sort$(word%+1) THEN<br/>          set% += 1<br/>        ELSE<br/>          IF set% = max% THEN<br/>            FOR anagram% = word%-max%+1 TO word%<br/>              PRINT dict$(anagram%),;<br/>            NEXT<br/>            PRINT<br/>          ENDIF<br/>          set% = 1<br/>        ENDIF<br/>      NEXT word%<br/>      END<br/>\u00a0<br/>      DEF FNsortchars(word$)<br/>      LOCAL C%, char&amp;()<br/>      DIM char&amp;(LEN(word$))<br/>      $$^char&amp;(0) = word$<br/>      C% = LEN(word$)<br/>      CALL sort%, char&amp;(0)<br/>      = $$^char&amp;(0)</pre>"}, {"lang": "Bracmat", "loc": 28, "block": "<pre class=\"text highlighted_source\">( get$(\"unixdict.txt\",STR):?list<br/>&amp; 1:?product<br/>&amp;   whl<br/>  ' ( @(!list:(%?word:?w) \\n\u00a0?list)<br/>    &amp;\u00a0:?sum<br/>    &amp;   whl<br/>      ' ( @(!w:%?let\u00a0?w)<br/>        &amp; (!let:~#|str$(N\u00a0!let))+!sum:?sum<br/>        )<br/>    &amp;\u00a0!sum^!word*!product:?product<br/>    )<br/>&amp; lst$(product,\"product.txt\",NEW)<br/>&amp; 0:?max<br/>&amp;\u00a0:?group<br/>&amp; (  \u00a0!product<br/>   \u00a0:  \u00a0?<br/>      *\u00a0?^(%+%:?exp)<br/>      * (\u00a0?<br/>        &amp;  \u00a0!exp<br/>         \u00a0:  \u00a0?<br/>            + ( [&gt;!max:[?max&amp;!exp:?group<br/>              | [~&lt;!max&amp;!group\u00a0!exp:?group<br/>              )<br/>        &amp; ~<br/>        )<br/>  | out$!group<br/>  )<br/>);</pre>"}, {"lang": "C", "loc": 160, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>sortedWord<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>word<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>wbuf<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p1<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>p2<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>endwrd<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> t<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> swaps<span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>wbuf<span class=\"sy0\">,</span> word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    endwrd <span class=\"sy0\">=</span> wbuf<span class=\"sy0\">+</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>wbuf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>       swaps <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>       p1 <span class=\"sy0\">=</span> wbuf<span class=\"sy0\">;</span> p2 <span class=\"sy0\">=</span> endwrd<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p1<span class=\"sy0\">&lt;</span>p2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p2 <span class=\"sy0\">&gt;</span> <span class=\"sy0\">*</span>p1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             t <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p2<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p2 <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p1<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>             swaps <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>          p1<span class=\"sy0\">++;</span> p2<span class=\"sy0\">--;</span><br/>       <span class=\"br0\">}</span><br/>       p1 <span class=\"sy0\">=</span> wbuf<span class=\"sy0\">;</span> p2 <span class=\"sy0\">=</span> p1<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">while</span><span class=\"br0\">(</span>p2 <span class=\"sy0\">&lt;</span> endwrd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p2 <span class=\"sy0\">&gt;</span> <span class=\"sy0\">*</span>p1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             t <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p2<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p2 <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p1<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>             swaps <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>           <span class=\"br0\">}</span><br/>           p1<span class=\"sy0\">++;</span> p2<span class=\"sy0\">++;</span><br/>       <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>swaps<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> wbuf<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span><br/><span class=\"kw4\">short</span> cxmap<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"nu12\">0x06</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x28</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x09</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x33</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x31</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x56</span><span class=\"sy0\">,</span><br/>    <span class=\"nu12\">0x52</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x19</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x29</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x53</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x32</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x48</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x35</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x55</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x14</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x27</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x24</span><span class=\"sy0\">,</span><br/>    <span class=\"nu12\">0x02</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x18</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x45</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x30</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x08</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x03</span><span class=\"sy0\">,</span><br/>    <span class=\"nu12\">0x0b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x07</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x20</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x51</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x11</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x58</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x00</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x49</span><span class=\"sy0\">,</span><br/>    <span class=\"nu12\">0x15</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x41</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x17</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x39</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x16</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x42</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x37</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x22</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0f</span><span class=\"sy0\">,</span><br/>    <span class=\"nu12\">0x43</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x46</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x26</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x40</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x12</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x21</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x36</span><span class=\"sy0\">,</span><br/>    <span class=\"nu12\">0x38</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x01</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x05</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x44</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x04</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x10</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2a</span><span class=\"sy0\">,</span><br/>    <span class=\"nu12\">0x23</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x34</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x25</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x50</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x54</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x47</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x59</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x13</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x57</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#define CXMAP_SIZE (sizeof(cxmap)/sizeof(short))</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> Str_Hash<span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>key<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> ix_max <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>cp<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">short</span> mash<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">int</span>  hash <span class=\"sy0\">=</span> <span class=\"nu0\">33501551</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span>cp <span class=\"sy0\">=</span> key<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>cp<span class=\"sy0\">;</span> cp<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      mash <span class=\"sy0\">=</span> cxmap<span class=\"br0\">[</span><span class=\"sy0\">*</span>cp <span class=\"sy0\">%</span> CXMAP_SIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      hash <span class=\"sy0\">=</span> <span class=\"br0\">(</span>hash <span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu12\">0x5C5CF5C</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>hash<span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>mash<span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      hash <span class=\"sy0\">&amp;=</span> <span class=\"nu12\">0x3FFFFFFF</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span>  hash <span class=\"sy0\">%</span> ix_max<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sDictWord  <span class=\"sy0\">*</span>DictWord<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> sDictWord <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>word<span class=\"sy0\">;</span><br/>    DictWord next<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sHashEntry <span class=\"sy0\">*</span>HashEntry<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> sHashEntry <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>key<span class=\"sy0\">;</span><br/>    HashEntry next<span class=\"sy0\">;</span><br/>    DictWord  words<span class=\"sy0\">;</span><br/>    HashEntry link<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">short</span> wordCount<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define HT_SIZE 8192</span><br/>\u00a0<br/>HashEntry hashTable<span class=\"br0\">[</span>HT_SIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>HashEntry mostPerms <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> buildAnagrams<span class=\"br0\">(</span> FILE <span class=\"sy0\">*</span>fin <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> buffer<span class=\"br0\">[</span><span class=\"nu0\">40</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> bufr2<span class=\"br0\">[</span><span class=\"nu0\">40</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>hkey<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> hix<span class=\"sy0\">;</span><br/>    HashEntry he<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>hep<span class=\"sy0\">;</span><br/>    DictWord  we<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span>  maxPC <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> numWords <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"sy0\">,</span> fin<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>hkey <span class=\"sy0\">=</span> buffer<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>hkey <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>hkey<span class=\"sy0\">!=</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> hkey<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">*</span>hkey <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        hkey <span class=\"sy0\">=</span> sortedWord<span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> bufr2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        hix <span class=\"sy0\">=</span> Str_Hash<span class=\"br0\">(</span>hkey<span class=\"sy0\">,</span> HT_SIZE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        he <span class=\"sy0\">=</span> hashTable<span class=\"br0\">[</span>hix<span class=\"br0\">]</span><span class=\"sy0\">;</span> hep <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>hashTable<span class=\"br0\">[</span>hix<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> he <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>he<span class=\"sy0\">-&gt;</span>key <span class=\"sy0\">,</span> hkey<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            hep <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>he<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>            he <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span> he <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            he <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sHashEntry<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            he<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>            he<span class=\"sy0\">-&gt;</span>key <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>hkey<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            he<span class=\"sy0\">-&gt;</span>wordCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            he<span class=\"sy0\">-&gt;</span>words <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>            he<span class=\"sy0\">-&gt;</span>link <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>            <span class=\"sy0\">*</span>hep <span class=\"sy0\">=</span> he<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        we <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sDictWord<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        we<span class=\"sy0\">-&gt;</span>word <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        we<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>words<span class=\"sy0\">;</span><br/>        he<span class=\"sy0\">-&gt;</span>words <span class=\"sy0\">=</span> we<span class=\"sy0\">;</span><br/>        he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> maxPC <span class=\"sy0\">&lt;</span> he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            maxPC <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"sy0\">;</span><br/>            mostPerms <span class=\"sy0\">=</span> he<span class=\"sy0\">;</span><br/>            he<span class=\"sy0\">-&gt;</span>link <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maxPC <span class=\"sy0\">==</span> he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            he<span class=\"sy0\">-&gt;</span>link <span class=\"sy0\">=</span> mostPerms<span class=\"sy0\">;</span><br/>            mostPerms <span class=\"sy0\">=</span> he<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        numWords<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d words in dictionary max ana=%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> numWords<span class=\"sy0\">,</span> maxPC<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> maxPC<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    HashEntry he<span class=\"sy0\">;</span><br/>    DictWord  we<span class=\"sy0\">;</span><br/>    FILE <span class=\"sy0\">*</span>f1<span class=\"sy0\">;</span><br/>\u00a0<br/>    f1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    buildAnagrams<span class=\"br0\">(</span>f1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>f1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    f1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"anaout.txt\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//    f1 = stdout;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>he <span class=\"sy0\">=</span> mostPerms<span class=\"sy0\">;</span> he<span class=\"sy0\">;</span> he <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>link<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>f1<span class=\"sy0\">,</span><span class=\"st0\">\"%d:\"</span><span class=\"sy0\">,</span> he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>we <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>words<span class=\"sy0\">;</span> we<span class=\"sy0\">;</span> we <span class=\"sy0\">=</span> we<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>f1<span class=\"sy0\">,</span><span class=\"st0\">\"%s, \"</span><span class=\"sy0\">,</span> we<span class=\"sy0\">-&gt;</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>f1<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>f1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 35, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;map&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> in<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">typedef</span>  std<span class=\"sy4\">::</span><span class=\"me2\">map</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span>, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> AnagramMap<span class=\"sy4\">;</span><br/>  AnagramMap anagrams<span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> word<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">size_t</span> count <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span>in, word<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> key <span class=\"sy1\">=</span> word<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>key.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, key.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"co1\">// note: the [] op. automatically inserts a new value if key does not exist</span><br/>    AnagramMap<span class=\"sy4\">::</span><span class=\"me2\">mapped_type</span> <span class=\"sy3\">&amp;</span> v <span class=\"sy1\">=</span> anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    count <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span>count, v.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  in.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>AnagramMap<span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> it <span class=\"sy1\">=</span> anagrams.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, e <span class=\"sy1\">=</span> anagrams.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> e<span class=\"sy4\">;</span> it<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;=</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 30, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Net</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text.RegularExpressions</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Anagram<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> DICO_URL <span class=\"sy0\">=</span> <span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            WebRequest request <span class=\"sy0\">=</span> WebRequest<span class=\"sy0\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>DICO_URL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> words<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">using</span> <span class=\"br0\">(</span>StreamReader sr <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StreamReader<span class=\"br0\">(</span>request<span class=\"sy0\">.</span><span class=\"me1\">GetResponse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">GetResponseStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                words <span class=\"sy0\">=</span> Regex<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span>sr<span class=\"sy0\">.</span><span class=\"me1\">ReadToEnd</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st_h\">@\"\\r?\\n\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">var</span> groups <span class=\"sy0\">=</span> <span class=\"kw1\">from</span> <span class=\"kw4\">string</span> w <span class=\"kw1\">in</span> words<br/>                         <span class=\"kw1\">group</span> w <span class=\"kw1\">by</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Concat</span><span class=\"br0\">(</span>w<span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">into</span> c<br/>                         <span class=\"kw1\">group</span> c <span class=\"kw1\">by</span> c<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">into</span> d<br/>                         orderby d<span class=\"sy0\">.</span><span class=\"me1\">Key</span> descending<br/>                         <span class=\"kw1\">select</span> d<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> c <span class=\"kw1\">in</span> groups<span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 10, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>require '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>io\u00a0:<span class=\"me1\">as</span> io<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> groups<br/>  <span class=\"br0\">(</span><span class=\"kw1\">with-open</span> <span class=\"br0\">[</span>r <span class=\"br0\">(</span>io<span class=\"sy0\">/</span>reader wordfile<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>group<span class=\"sy0\">-</span>by <span class=\"kw1\">sort</span> <span class=\"br0\">(</span><span class=\"kw1\">line-seq</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>wordlists <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> <span class=\"br0\">(</span>comp <span class=\"sy0\">-</span> <span class=\"kw1\">count</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vals</span> groups<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      maxlength <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> wordlists<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>wordlist <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> #<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> maxlength<span class=\"br0\">)</span> wordlists<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println wordlist<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 243, "block": "<pre class=\"cobol highlighted_source\">      *&gt; TECTONICS<br/>      *&gt;   wget http://www<span class=\"sy0\">.</span>puzzlers<span class=\"sy0\">.</span>org/pub/wordlists/unixdict<span class=\"sy0\">.</span>txt<br/>      *&gt;   <span class=\"kw3\">or</span> visit https://sourceforge<span class=\"sy0\">.</span>net/projects/souptonuts/files<br/>      *&gt;   <span class=\"kw3\">or</span> snag ftp://ftp<span class=\"sy0\">.</span>openwall<span class=\"sy0\">.</span>com/pub/wordlists/<span class=\"kw3\">all</span><span class=\"sy0\">.</span>gz<br/>      *&gt;      <span class=\"kw3\">for</span> a <span class=\"nu0\">5</span> million <span class=\"kw3\">all</span> language word <span class=\"kw3\">file</span> <span class=\"br0\">(</span>a few phrases<span class=\"br0\">)</span><br/>      *&gt;   cobc -xj anagrams<span class=\"sy0\">.</span>cob <span class=\"br0\">[</span>-DMOSTWORDS -DMOREWORDS -DALLWORDS<span class=\"br0\">]</span><br/>      *&gt; ***************************************************************<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> anagrams<span class=\"sy0\">.</span><br/>\u00a0<br/>       environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       repository<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">input-output</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">file-control</span><span class=\"sy0\">.</span><br/>           <span class=\"kw3\">select</span> words-<span class=\"kw3\">in</span><br/>           <span class=\"kw3\">assign</span> <span class=\"kw2\">to</span> wordfile<br/>           <span class=\"kw3\">organization</span> <span class=\"kw3\">is</span> <span class=\"kw3\">line</span> <span class=\"kw3\">sequential</span><br/>           <span class=\"kw3\">status</span> <span class=\"kw3\">is</span> words-<span class=\"kw3\">status</span><br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">REPLACE</span> <span class=\"sy0\">==</span>:LETTERS:<span class=\"sy0\">==</span> <span class=\"kw3\">BY</span> <span class=\"sy0\">==</span><span class=\"nu0\">42</span><span class=\"sy0\">==.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">file</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">fd</span> words-<span class=\"kw3\">in</span> <span class=\"kw3\">record</span> <span class=\"kw3\">is</span> <span class=\"kw2\">varying</span> <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span>\u00a0:LETTERS: <span class=\"kw3\">characters</span><br/>                             <span class=\"kw3\">depending</span> <span class=\"kw3\">on</span> word-<span class=\"kw4\">length</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> word-<span class=\"kw3\">record</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> word-<span class=\"kw3\">data</span>         <span class=\"kw3\">pic</span> x <span class=\"kw3\">occurs</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span>\u00a0:LETTERS: <span class=\"kw2\">times</span><br/>                                     <span class=\"kw3\">depending</span> <span class=\"kw3\">on</span> word-<span class=\"kw4\">length</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       &gt;&gt;<span class=\"kw1\">IF</span> ALLWORDS DEFINED<br/>       <span class=\"nu0\">01</span> wordfile     constant as <span class=\"st0\">\"/usr/local/share/dict/all.words\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> max-<span class=\"kw3\">words</span>    constant as <span class=\"nu0\">4802100</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       &gt;&gt;ELSE-<span class=\"kw1\">IF</span> MOSTWORDS DEFINED<br/>       <span class=\"nu0\">01</span> wordfile     constant as <span class=\"st0\">\"/usr/local/share/dict/linux.words\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> max-<span class=\"kw3\">words</span>    constant as <span class=\"nu0\">628000</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       &gt;&gt;ELSE-<span class=\"kw1\">IF</span> MOREWORDS DEFINED<br/>       <span class=\"nu0\">01</span> wordfile     constant as <span class=\"st0\">\"/usr/share/dict/words\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> max-<span class=\"kw3\">words</span>    constant as <span class=\"nu0\">100000</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       &gt;&gt;<span class=\"kw3\">ELSE</span><br/>       <span class=\"nu0\">01</span> wordfile     constant as <span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> max-<span class=\"kw3\">words</span>    constant as <span class=\"nu0\">26000</span><span class=\"sy0\">.</span><br/>       &gt;&gt;END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>      *&gt; The <span class=\"nu0\">5</span> million word <span class=\"kw3\">file</span> needs <span class=\"kw2\">to</span> restrict the word <span class=\"kw4\">length</span><br/>       &gt;&gt;<span class=\"kw1\">IF</span> ALLWORDS DEFINED<br/>       <span class=\"nu0\">01</span> max-letters          constant as <span class=\"nu0\">26</span><span class=\"sy0\">.</span><br/>       &gt;&gt;<span class=\"kw3\">ELSE</span><br/>       <span class=\"nu0\">01</span> max-letters          constant as\u00a0:LETTERS:<span class=\"sy0\">.</span><br/>       &gt;&gt;END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> word-<span class=\"kw4\">length</span>          <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> words-<span class=\"kw3\">status</span>         <span class=\"kw3\">pic</span> xx<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">88</span> ok-<span class=\"kw3\">status</span>         <span class=\"kw3\">values</span> <span class=\"st0\">'00'</span> <span class=\"kw3\">thru</span> <span class=\"st0\">'09'</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">88</span> eof-<span class=\"kw3\">status</span>        <span class=\"kw3\">value</span> <span class=\"st0\">'10'</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; sortable word <span class=\"kw3\">by</span> letter <span class=\"kw3\">table</span><br/>       <span class=\"nu0\">01</span> letter-<span class=\"kw3\">index</span>         <span class=\"kw3\">usage</span> <span class=\"kw3\">index</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> letter-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> letters           <span class=\"kw3\">occurs</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> max-letters <span class=\"kw2\">times</span><br/>                               <span class=\"kw3\">depending</span> <span class=\"kw3\">on</span> word-<span class=\"kw4\">length</span><br/>                               <span class=\"kw3\">ascending</span> <span class=\"kw3\">key</span> letter<br/>                               <span class=\"kw3\">indexed</span> <span class=\"kw3\">by</span> letter-<span class=\"kw3\">index</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> letter         <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; <span class=\"kw3\">table</span> <span class=\"kw3\">of</span> <span class=\"kw3\">words</span><br/>       <span class=\"nu0\">01</span> sorted-<span class=\"kw3\">index</span>         <span class=\"kw3\">usage</span> <span class=\"kw3\">index</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> word-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> word-<span class=\"kw1\">list</span>         <span class=\"kw3\">occurs</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> max-<span class=\"kw3\">words</span> <span class=\"kw2\">times</span><br/>                               <span class=\"kw3\">depending</span> <span class=\"kw3\">on</span> word-tally<br/>                               <span class=\"kw3\">ascending</span> <span class=\"kw3\">key</span> sorted-word<br/>                               <span class=\"kw3\">indexed</span> <span class=\"kw3\">by</span> sorted-<span class=\"kw3\">index</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> match-<span class=\"kw3\">count</span>    <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> this-word      <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span>max-letters<span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> sorted-word    <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span>max-letters<span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> sorted-<span class=\"kw2\">display</span>       <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> interest-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> interest-<span class=\"kw1\">list</span>     <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">comp-5</span><br/>                               <span class=\"kw3\">occurs</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> max-<span class=\"kw3\">words</span> <span class=\"kw2\">times</span><br/>                               <span class=\"kw3\">depending</span> <span class=\"kw3\">on</span> interest-tally<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> outer                <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> inner                <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> starter              <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> ender                <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> word-tally           <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> interest-tally       <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> tally-<span class=\"kw2\">display</span>        <span class=\"kw3\">pic</span> zz<span class=\"sy0\">,</span>zzz<span class=\"sy0\">,</span>zz9<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> most-matches         <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> matches              <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">comp-5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> match-<span class=\"kw2\">display</span>        <span class=\"kw3\">pic</span> z9<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; timing <span class=\"kw2\">display</span><br/>       <span class=\"nu0\">01</span> time-stamp<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> <span class=\"kw3\">filler</span>            <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> timer-hours       <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> <span class=\"kw3\">filler</span>            <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> timer-minutes     <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> <span class=\"kw3\">filler</span>            <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> timer-seconds     <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> <span class=\"kw3\">filler</span>            <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> timer-subsec      <span class=\"kw3\">pic</span> v9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> timer-elapsed        <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>v9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> timer-<span class=\"kw3\">value</span>          <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>v9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> timer-<span class=\"kw2\">display</span>        <span class=\"kw3\">pic</span> zzz<span class=\"sy0\">,</span>zz9<span class=\"sy0\">.</span>9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ***************************************************************<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       main-routine<span class=\"sy0\">.</span><br/>\u00a0<br/>       &gt;&gt;<span class=\"kw1\">IF</span> ALLWORDS DEFINED<br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"** Words limited to \"</span> max-letters <span class=\"st0\">\" letters **\"</span><br/>       &gt;&gt;END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>       <span class=\"kw2\">perform</span> show-<span class=\"kw3\">time</span><br/>\u00a0<br/>       <span class=\"kw2\">perform</span> load-<span class=\"kw3\">words</span><br/>       <span class=\"kw2\">perform</span> find-most<br/>       <span class=\"kw2\">perform</span> display-result<br/>\u00a0<br/>       <span class=\"kw2\">perform</span> show-<span class=\"kw3\">time</span><br/>       goback<br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ***************************************************************<br/>       load-<span class=\"kw3\">words</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">open</span> <span class=\"kw3\">input</span> words-<span class=\"kw3\">in</span><br/>       <span class=\"kw1\">if</span> <span class=\"kw3\">not</span> ok-<span class=\"kw3\">status</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"error opening \"</span> wordfile <span class=\"kw3\">upon</span> syserr<br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> return-<span class=\"kw1\">code</span><br/>           goback<br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       <span class=\"kw2\">perform</span> <span class=\"kw2\">until</span> <span class=\"kw2\">exit</span><br/>           read words-<span class=\"kw3\">in</span><br/>           <span class=\"kw1\">if</span> eof-<span class=\"kw3\">status</span> <span class=\"kw3\">then</span> <span class=\"kw2\">exit</span> <span class=\"kw2\">perform</span> end-<span class=\"kw1\">if</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw3\">not</span> ok-<span class=\"kw3\">status</span> <span class=\"kw3\">then</span><br/>               <span class=\"kw2\">display</span> wordfile <span class=\"st0\">\" read error: \"</span> words-<span class=\"kw3\">status</span> <span class=\"kw3\">upon</span> syserr<br/>           end-<span class=\"kw1\">if</span><br/>\u00a0<br/>           <span class=\"kw1\">if</span> word-<span class=\"kw4\">length</span> <span class=\"kw3\">equal</span> <span class=\"kw3\">zero</span> <span class=\"kw3\">then</span> <span class=\"kw2\">exit</span> <span class=\"kw2\">perform</span> cycle end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       &gt;&gt;<span class=\"kw1\">IF</span> ALLWORDS DEFINED<br/>           <span class=\"kw2\">move</span> <span class=\"kw4\">min</span><span class=\"br0\">(</span>word-<span class=\"kw4\">length</span><span class=\"sy0\">,</span> max-letters<span class=\"br0\">)</span> <span class=\"kw2\">to</span> word-<span class=\"kw4\">length</span><br/>       &gt;&gt;END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>           <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> word-tally<br/>           <span class=\"kw2\">move</span> word-<span class=\"kw3\">record</span> <span class=\"kw2\">to</span> this-word<span class=\"br0\">(</span>word-tally<span class=\"br0\">)</span> letter-<span class=\"kw3\">table</span><br/>           <span class=\"kw3\">sort</span> letters <span class=\"kw3\">ascending</span> <span class=\"kw3\">key</span> letter<br/>           <span class=\"kw2\">move</span> letter-<span class=\"kw3\">table</span> <span class=\"kw2\">to</span> sorted-word<span class=\"br0\">(</span>word-tally<span class=\"br0\">)</span><br/>       end-<span class=\"kw2\">perform</span><br/>\u00a0<br/>       <span class=\"kw2\">move</span> word-tally <span class=\"kw2\">to</span> tally-<span class=\"kw2\">display</span><br/>       <span class=\"kw2\">display</span> trim<span class=\"br0\">(</span>tally-<span class=\"kw2\">display</span><span class=\"br0\">)</span> <span class=\"st0\">\" words\"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>\u00a0<br/>       <span class=\"kw2\">close</span> words-<span class=\"kw3\">in</span><br/>       <span class=\"kw1\">if</span> <span class=\"kw3\">not</span> ok-<span class=\"kw3\">status</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"error closing \"</span> wordfile <span class=\"kw3\">upon</span> syserr<br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> return-<span class=\"kw1\">code</span><br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>      *&gt; <span class=\"kw3\">sort</span> word <span class=\"kw1\">list</span> <span class=\"kw3\">by</span> anagram <span class=\"kw1\">check</span> field<br/>       <span class=\"kw3\">sort</span> word-<span class=\"kw1\">list</span> <span class=\"kw3\">ascending</span> <span class=\"kw3\">key</span> sorted-word<br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; <span class=\"kw3\">first</span> entry <span class=\"kw3\">in</span> a <span class=\"kw1\">list</span> will <span class=\"kw3\">end</span> <span class=\"kw3\">up</span> <span class=\"kw3\">with</span> highest match <span class=\"kw3\">count</span><br/>       find-most<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> outer <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> outer &gt; word-tally<br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> matches<br/>           <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> outer <span class=\"kw2\">giving</span> starter<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> inner <span class=\"kw3\">from</span> starter <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">until</span> sorted-word<span class=\"br0\">(</span>inner<span class=\"br0\">)</span> <span class=\"kw3\">not</span> <span class=\"kw3\">equal</span> sorted-word<span class=\"br0\">(</span>outer<span class=\"br0\">)</span><br/>               <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> matches<br/>           end-<span class=\"kw2\">perform</span><br/>           <span class=\"kw1\">if</span> matches &gt; most-matches <span class=\"kw3\">then</span><br/>               <span class=\"kw2\">move</span> matches <span class=\"kw2\">to</span> most-matches<br/>               <span class=\"kw2\">initialize</span> interest-<span class=\"kw3\">table</span> <span class=\"kw3\">all</span> <span class=\"kw2\">to</span> <span class=\"kw3\">value</span><br/>               <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> interest-tally<br/>           end-<span class=\"kw1\">if</span><br/>           <span class=\"kw2\">move</span> matches <span class=\"kw2\">to</span> match-<span class=\"kw3\">count</span><span class=\"br0\">(</span>outer<span class=\"br0\">)</span><br/>           <span class=\"kw1\">if</span> matches <span class=\"sy0\">=</span> most-matches <span class=\"kw3\">then</span><br/>               <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> interest-tally<br/>               <span class=\"kw2\">move</span> outer <span class=\"kw2\">to</span> interest-<span class=\"kw1\">list</span><span class=\"br0\">(</span>interest-tally<span class=\"br0\">)</span><br/>           end-<span class=\"kw1\">if</span><br/>       end-<span class=\"kw2\">perform</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; only <span class=\"kw2\">display</span> the <span class=\"kw3\">words</span> <span class=\"kw3\">with</span> the most anagrams<br/>       display-result<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">move</span> interest-tally <span class=\"kw2\">to</span> tally-<span class=\"kw2\">display</span><br/>       <span class=\"kw2\">move</span> most-matches <span class=\"kw2\">to</span> match-<span class=\"kw2\">display</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\", most anagrams: \"</span> trim<span class=\"br0\">(</span>match-<span class=\"kw2\">display</span><span class=\"br0\">)</span><br/>               <span class=\"st0\">\", with \"</span> trim<span class=\"br0\">(</span>tally-<span class=\"kw2\">display</span><span class=\"br0\">)</span> <span class=\"st0\">\" set\"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>       <span class=\"kw1\">if</span> interest-tally <span class=\"kw3\">not</span> <span class=\"kw3\">equal</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"s\"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>       end-<span class=\"kw1\">if</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\" of interest\"</span><br/>\u00a0<br/>       <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> outer <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> outer &gt; interest-tally<br/>           <span class=\"kw2\">move</span> sorted-word<span class=\"br0\">(</span>interest-<span class=\"kw1\">list</span><span class=\"br0\">(</span>outer<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> sorted-<span class=\"kw2\">display</span><br/>           <span class=\"kw2\">display</span> sorted-<span class=\"kw2\">display</span><br/>                   <span class=\"st0\">\" [\"</span> trim<span class=\"br0\">(</span>this-word<span class=\"br0\">(</span>interest-<span class=\"kw1\">list</span><span class=\"br0\">(</span>outer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>           <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> interest-<span class=\"kw1\">list</span><span class=\"br0\">(</span>outer<span class=\"br0\">)</span> <span class=\"kw2\">giving</span> starter<br/>           <span class=\"kw2\">add</span> most-matches <span class=\"kw2\">to</span> interest-<span class=\"kw1\">list</span><span class=\"br0\">(</span>outer<span class=\"br0\">)</span> <span class=\"kw2\">giving</span> ender<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> inner <span class=\"kw3\">from</span> starter <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>               <span class=\"kw2\">until</span> inner <span class=\"sy0\">=</span> ender<br/>                   <span class=\"kw2\">display</span> <span class=\"st0\">\", \"</span> trim<span class=\"br0\">(</span>this-word<span class=\"br0\">(</span>inner<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>           end-<span class=\"kw2\">perform</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"]\"</span><br/>       end-<span class=\"kw2\">perform</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; elapsed <span class=\"kw3\">time</span><br/>       show-<span class=\"kw3\">time</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">move</span> formatted-current-<span class=\"kw3\">date</span><span class=\"br0\">(</span><span class=\"st0\">\"YYYY-MM-DDThh:mm:ss.ssssss\"</span><span class=\"br0\">)</span><br/>         <span class=\"kw2\">to</span> time-stamp<br/>       <span class=\"kw2\">compute</span> timer-<span class=\"kw3\">value</span> <span class=\"sy0\">=</span> timer-hours<span class=\"sy0\"> * </span><span class=\"nu0\">3600</span><span class=\"sy0\"> + </span>timer-minutes<span class=\"sy0\"> * </span><span class=\"nu0\">60</span><br/>                            <span class=\"sy0\"> + </span>timer-seconds<span class=\"sy0\"> + </span>timer-subsec<br/>       <span class=\"kw1\">if</span> timer-elapsed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> time-stamp<br/>           <span class=\"kw2\">move</span> timer-<span class=\"kw3\">value</span> <span class=\"kw2\">to</span> timer-elapsed<br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw1\">if</span> timer-<span class=\"kw3\">value</span> &lt; timer-elapsed <span class=\"kw3\">then</span><br/>               <span class=\"kw2\">add</span> <span class=\"nu0\">86400</span> <span class=\"kw2\">to</span> timer-<span class=\"kw3\">value</span><br/>           end-<span class=\"kw1\">if</span><br/>           <span class=\"kw3\">subtract</span> timer-elapsed <span class=\"kw3\">from</span> timer-<span class=\"kw3\">value</span><br/>           <span class=\"kw2\">move</span> timer-<span class=\"kw3\">value</span> <span class=\"kw2\">to</span> timer-<span class=\"kw2\">display</span><br/>           <span class=\"kw2\">display</span> time-stamp <span class=\"st0\">\", \"</span> trim<span class=\"br0\">(</span>timer-<span class=\"kw2\">display</span><span class=\"br0\">)</span> <span class=\"st0\">\" seconds\"</span><br/>       end-<span class=\"kw1\">if</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> anagrams<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 31, "block": "<pre class=\"coffeescript highlighted_source\">http = require <span class=\"st0\">'http'</span><br/>\u00a0<br/>show_large_anagram_sets = <span class=\"br0\">(</span>word_lst<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  anagrams = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  max_size = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> word_lst<br/>    key = word.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">?</span>= <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span>.<span class=\"me1\">push</span> word<br/>    size = anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span>.<span class=\"me1\">length</span><br/>    max_size = size <span class=\"kw1\">if</span> size <span class=\"sy0\">&gt;</span> max_size<br/>\u00a0<br/>  <span class=\"kw1\">for</span> key<span class=\"sy0\">,</span> variations <span class=\"kw1\">of</span> anagrams<br/>    <span class=\"kw1\">if</span> variations.<span class=\"me1\">length</span> == max_size<br/>      console.<span class=\"me1\">log</span> variations.<span class=\"me1\">join</span> <span class=\"st0\">' '</span><br/>\u00a0<br/>get_word_list = <span class=\"br0\">(</span>process<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  options =<br/>    host<span class=\"sy0\">:</span> <span class=\"st0\">\"www.puzzlers.org\"</span><br/>    path<span class=\"sy0\">:</span> <span class=\"st0\">\"/pub/wordlists/unixdict.txt\"</span><br/>\u00a0<br/>  req = http.<span class=\"me1\">request</span> options<span class=\"sy0\">,</span> <span class=\"br0\">(</span>res<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    s = <span class=\"st0\">''</span><br/>    res.<span class=\"kw4\">on</span> <span class=\"st0\">'data'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>chunk<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      s <span class=\"sy0\">+</span>= chunk<br/>    res.<span class=\"kw4\">on</span> <span class=\"st0\">'end'</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span><br/>      process s.<span class=\"me1\">split</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><br/>  req.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>get_word_list show_large_anagram_sets</pre>"}, {"lang": "Common Lisp", "loc": 23, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> anagrams <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>url <span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>words <span class=\"br0\">(</span>drakma<span class=\"sy0\">:</span><span class=\"me1\">http-request</span> url <span class=\"sy0\">:</span><span class=\"me1\">want-stream</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>wordsets <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> 'equalp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; populate the wordsets and close stream</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>word <span class=\"br0\">(</span>read-line words <span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>read-line words <span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> word<span class=\"br0\">)</span> <span class=\"br0\">(</span>close words<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>letters <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>copy-seq word<span class=\"br0\">)</span> 'char<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>pair presentp<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>gethash letters wordsets<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> presentp<br/>           <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> pair<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">car</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pair<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> word <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash letters wordsets<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; find and return the biggest wordsets</span><br/>    <span class=\"br0\">(</span>loop with maxcount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> with maxwordsets <span class=\"sy0\">=</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          for pair being each hash-<span class=\"kw1\">value</span> of wordsets<br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> pair<span class=\"br0\">)</span> maxcount<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> maxcount <span class=\"br0\">(</span><span class=\"kw1\">car</span> pair<span class=\"br0\">)</span><br/>                   maxwordsets <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          else <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> pair<span class=\"br0\">)</span> maxcount<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span>push <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pair<span class=\"br0\">)</span> maxwordsets<span class=\"br0\">)</span><br/>          finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>values maxwordsets maxcount<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 177, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> BbtAnagrams;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Files<span class=\"sy0\">,</span>Strings<span class=\"sy0\">,</span>Args;<br/><span class=\"kw1\">CONST</span><br/>\tMAXPOOLSZ <span class=\"sy0\">=</span> <span class=\"nu0\">1024</span>;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span>\t<br/>\tNode <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> LIMITED <span class=\"kw1\">RECORD</span>;<br/>\t\tcount<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tword<span class=\"sy0\">:</span> Args.<span class=\"me1\">String</span>;<br/>\t\tdesc<span class=\"sy0\">:</span> Node;<br/>\t\tnext<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\tPool <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> LIMITED <span class=\"kw1\">RECORD</span><br/>\t\tcapacity<span class=\"sy0\">,</span>max<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\twords<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> Node;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> NewNode<span class=\"br0\">(</span>word<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tn<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;n.<span class=\"me1\">count</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;n.<span class=\"me1\">word</span> <span class=\"sy0\">:=</span> word$;<br/>\t\tn.<span class=\"me1\">desc</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;n.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> n<br/>\t<span class=\"kw1\">END</span> NewNode;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> Index<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;cap<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">,</span>sum<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span>  <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> sum <span class=\"kw1\">MOD</span> cap<br/>\t<span class=\"kw1\">END</span> Index;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> ISort<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>; <br/>\t<span class=\"kw1\">VAR</span> <br/>        i<span class=\"sy0\">,</span> j<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; <br/>        t<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>; <br/>\t<span class=\"kw1\">BEGIN</span> <br/>        <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> <br/>\t\t\tj <span class=\"sy0\">:=</span> i; <br/>\t\t\tt <span class=\"sy0\">:=</span> s<span class=\"br0\">[</span>j<span class=\"br0\">]</span>; <br/>\t\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>j &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s<span class=\"br0\">[</span>j <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> &gt; t<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <br/>\t\t\t\t\ts<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> s<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>; <br/>\t\t\t\t\t<span class=\"kw3\">DEC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <br/>\t\t\t<span class=\"kw1\">END</span>; <br/>\t\t\ts<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> t <br/>        <span class=\"kw1\">END</span> <br/>\t<span class=\"kw1\">END</span> ISort; <br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> SameLetters<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>; <br/>\t<span class=\"kw1\">BEGIN</span> <br/>        ISort<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;ISort<span class=\"br0\">(</span>y<span class=\"br0\">)</span>; <br/>        <span class=\"kw1\">RETURN</span> x <span class=\"sy0\">=</span> y<br/>\t<span class=\"kw1\">END</span> SameLetters; <br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> NewPoolWith<span class=\"br0\">(</span>cap<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Pool;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tp<span class=\"sy0\">:</span> Pool;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t\tp.<span class=\"me1\">capacity</span> <span class=\"sy0\">:=</span> cap;<br/>\t\tp.<span class=\"me1\">max</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>p.<span class=\"me1\">words</span><span class=\"sy0\">,</span>cap<span class=\"br0\">)</span>;<br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> i &lt; p.<span class=\"me1\">capacity</span> <span class=\"kw1\">DO</span><br/>\t\t\tp.<span class=\"me1\">words</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> p<br/>\t<span class=\"kw1\">END</span> NewPoolWith;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> NewPool<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Pool;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> NewPoolWith<span class=\"br0\">(</span>MAXPOOLSZ<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> NewPool;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Pool<span class=\"br0\">)</span> Add<span class=\"br0\">(</span>w<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tidx<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\titer<span class=\"sy0\">,</span>n<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tidx <span class=\"sy0\">:=</span> Index<span class=\"br0\">(</span>w<span class=\"sy0\">,</span>p.<span class=\"me1\">capacity</span><span class=\"br0\">)</span>;<br/>\t\titer <span class=\"sy0\">:=</span> p.<span class=\"me1\">words</span><span class=\"br0\">[</span>idx<span class=\"br0\">]</span>;<br/>\t\tn <span class=\"sy0\">:=</span> NewNode<span class=\"br0\">(</span>w<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>iter <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">IF</span> SameLetters<span class=\"br0\">(</span>w<span class=\"sy0\">,</span>iter.<span class=\"me1\">word</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>iter.<span class=\"me1\">count</span><span class=\"br0\">)</span>;<br/>\t\t\t\t<span class=\"kw1\">IF</span> iter.<span class=\"me1\">count</span> &gt; p.<span class=\"me1\">max</span> <span class=\"kw1\">THEN</span> p.<span class=\"me1\">max</span> <span class=\"sy0\">:=</span> iter.<span class=\"me1\">count</span> <span class=\"kw1\">END</span>;<br/>\t\t\t\tn.<span class=\"me1\">desc</span> <span class=\"sy0\">:=</span> iter.<span class=\"me1\">desc</span>;<br/>\t\t\t\titer.<span class=\"me1\">desc</span> <span class=\"sy0\">:=</span> n;<br/>\t\t\t\t<span class=\"kw1\">RETURN</span><br/>\t\t\t<span class=\"kw1\">END</span>;<br/>\t\t\titer <span class=\"sy0\">:=</span> iter.<span class=\"me1\">next</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span>iter <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span>;<br/>\t\tn.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> p.<span class=\"me1\">words</span><span class=\"br0\">[</span>idx<span class=\"br0\">]</span>;p.<span class=\"me1\">words</span><span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> n<br/>\t<span class=\"kw1\">END</span> Add;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> ShowAnagrams<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> Node<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\titer<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\titer <span class=\"sy0\">:=</span> l;<br/>\t\t<span class=\"kw1\">WHILE</span> iter <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">DO</span><br/>\t\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>iter.<span class=\"me1\">word</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>\t\t\titer <span class=\"sy0\">:=</span> iter.<span class=\"me1\">desc</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span> ShowAnagrams;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Pool<span class=\"br0\">)</span> ShowMax<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\titer<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>p.<span class=\"me1\">words</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">IF</span> p.<span class=\"me1\">words</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\titer <span class=\"sy0\">:=</span> p.<span class=\"me1\">words</span>^<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t\t\t\t<span class=\"kw1\">WHILE</span> iter <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">DO</span><br/>\t\t\t\t\t<span class=\"kw1\">IF</span> iter.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> p.<span class=\"me1\">max</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\t\t\tShowAnagrams<span class=\"br0\">(</span>iter<span class=\"br0\">)</span>; <br/>\t\t\t\t\t<span class=\"kw1\">END</span>;<br/>\t\t\t\t\titer <span class=\"sy0\">:=</span> iter.<span class=\"me1\">next</span><br/>\t\t\t\t<span class=\"kw1\">END</span><br/>\t\t\t<span class=\"kw1\">END</span><br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span> ShowMax;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> GetLine<span class=\"br0\">(</span>rd<span class=\"sy0\">:</span> Files.<span class=\"me1\">Reader</span>; OUT str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tb<span class=\"sy0\">:</span> BYTE;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\trd.<span class=\"me1\">ReadByte</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>;i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span><span class=\"sy0\">~</span>rd.<span class=\"me1\">eof</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span>0DX<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span>0AX<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0X; <span class=\"kw1\">RETURN</span>  <span class=\"kw1\">END</span>; <br/>\t\t\tstr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">CHR</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>;<br/>\t\t\trd.<span class=\"me1\">ReadByte</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tstr<span class=\"br0\">[</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0X<br/>\t<span class=\"kw1\">END</span> GetLine;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> DoProcess<span class=\"sy0\">*</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tparams <span class=\"sy0\">:</span> Args.<span class=\"me1\">Params</span>;<br/>\t\tloc<span class=\"sy0\">:</span> Files.<span class=\"me1\">Locator</span>;<br/>\t\tfd<span class=\"sy0\">:</span> Files.<span class=\"me1\">File</span>;<br/>\t\trd<span class=\"sy0\">:</span> Files.<span class=\"me1\">Reader</span>;<br/>\t\tline<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">81</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\t\tp<span class=\"sy0\">:</span> Pool;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tArgs.<span class=\"me1\">Get</span><span class=\"br0\">(</span>params<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">IF</span> params.<span class=\"me1\">argc</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <br/>\t\t  loc <span class=\"sy0\">:=</span> Files.<span class=\"me1\">dir</span>.<span class=\"me1\">This</span><span class=\"br0\">(</span><span class=\"st0\">\"Bbt\"</span><span class=\"br0\">)</span>;<br/>\t\t\tfd <span class=\"sy0\">:=</span> Files.<span class=\"me1\">dir</span>.<span class=\"me1\">Old</span><span class=\"br0\">(</span>loc<span class=\"sy0\">,</span>params.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>$<span class=\"sy0\">,</span><span class=\"kw2\">FALSE</span><span class=\"br0\">)</span>;<br/>\t\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Processing: \"</span> <span class=\"sy0\">+</span> params.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\t\t\trd <span class=\"sy0\">:=</span> fd.<span class=\"me1\">NewReader</span><span class=\"br0\">(</span><span class=\"kw2\">NIL</span><span class=\"br0\">)</span>;<br/>\t\t\tp <span class=\"sy0\">:=</span> NewPool<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t\t\t<span class=\"kw1\">REPEAT</span><br/>\t\t\t\tGetLine<span class=\"br0\">(</span>rd<span class=\"sy0\">,</span>line<span class=\"br0\">)</span>;<br/>\t\t\t\tp.<span class=\"me1\">Add</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span>;<br/>\t\t\t<span class=\"kw1\">UNTIL</span> rd.<span class=\"me1\">eof</span>;<br/>\t\t\tp.<span class=\"me1\">ShowMax</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: Missing file to process\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">END</span> DoProcess;<br/>\u00a0<br/><span class=\"kw1\">END</span> BbtAnagrams.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">exception</span><span class=\"sy0\">,</span> std.<span class=\"me1\">file</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> an<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>w<span class=\"sy0\">;</span> <span class=\"st0\">\"unixdict.txt\"</span>.<span class=\"me1\">readText</span>.<span class=\"me1\">splitLines</span><span class=\"br0\">)</span><br/>        an<span class=\"br0\">[</span>w.<span class=\"me1\">dup</span>.<span class=\"me1\">representation</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">release</span>.<span class=\"me1\">assumeUnique</span><span class=\"br0\">]</span> <span class=\"sy0\">~=</span> w<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> m <span class=\"sy0\">=</span> an.<span class=\"me1\">byValue</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a.<span class=\"me1\">length</span> <span class=\"br0\">}</span>.<span class=\"me1\">reduce</span><span class=\"sy0\">!</span>max<span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> an.<span class=\"me1\">byValue</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ws <span class=\"sy0\">=&gt;</span> ws.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 22, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Downloading...\"</span><span class=\"br0\">)</span><br/>when <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> wordText <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>http<span class=\"sy0\">://</span>www.<span class=\"me1\">puzzlers</span>.<span class=\"me1\">org</span><span class=\"sy0\">/</span>pub<span class=\"sy0\">/</span>wordlists<span class=\"sy0\">/</span>unixdict.<span class=\"me1\">txt</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;-</span> getText<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> words <span class=\"sy0\">:=</span> wordText.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> storage <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> anagramTable <a href=\"http://wiki.erights.org/wiki/extends\"><span class=\"kw5\">extends</span></a> storage <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> get<span class=\"br0\">(</span>key<span class=\"br0\">)</span> <span class=\"br0\">{</span> return storage.<span class=\"me1\">fetch</span><span class=\"br0\">(</span>key<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span> storage<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Grouping...\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> largestGroupSeen <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> word <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> words <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> anagramGroup <span class=\"sy0\">:=</span> anagramTable<span class=\"br0\">[</span>word.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        anagramGroup.<span class=\"me1\">push</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>        largestGroupSeen max<span class=\"sy0\">=</span> anagramGroup.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Selecting...\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <span class=\"sy0\">=&gt;</span> anagramGroup <span class=\"sy0\">?</span> <span class=\"br0\">(</span>anagramGroup.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> mostSeen<span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> anagramTable <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span>anagramGroup.<span class=\"me1\">snapshot</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 37, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'struct<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>require 'hash<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>require 'sql<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>require 'words<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>require 'dico.fr.no<span class=\"sy0\">-</span>accent<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> mots<span class=\"sy0\">-</span>fran\u00e7ais <span class=\"br0\">(</span>words<span class=\"sy0\">-</span>select #:any null <span class=\"nu0\">999999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>delimiter <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>sort str<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort string<span class=\"sy0\">&lt;</span>?  <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ana<span class=\"sy0\">-</span>sort H words<span class=\"br0\">)</span> <span class=\"co1\">;; bump counter for each word</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>w words<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:continue <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> w<span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>key <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>sort w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>  <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>set H key <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>ref<span class=\"sy0\">!</span> H key <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; input w word</span><br/><span class=\"co1\">;; output\u00a0: list of matching words</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>anagrams w words<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> w <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>sort w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set<br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> ana words<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:when <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> w <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>sort ana<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tana<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task words<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> H <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>hash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>ana<span class=\"sy0\">-</span>sort H words<span class=\"br0\">)</span> <span class=\"co1\">;; build counters key= sorted-string, value = count</span><br/>\t<span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>get<span class=\"sy0\">-</span>keys H   <span class=\"co1\">;; extract max count values</span><br/>\t    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>hmax <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>h H<span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\t    #:when <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> h<span class=\"br0\">)</span> hmax<span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 89, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tANAGRAMS<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Set of Anagrams, containing most words.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tread_wordlist<br/>\t\t\tacross<br/>\t\t\t\twords <span class=\"kw2\">as</span> wo<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> wo.<span class=\"me1\">item</span>.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> count <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> wo.<span class=\"me1\">item</span>.<span class=\"me1\">count</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tacross<br/>\t\t\t\twords <span class=\"kw2\">as</span> wo<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> wo.<span class=\"me1\">item</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> count <span class=\"kw2\">then</span><br/>\t\t\t\t\tacross<br/>\t\t\t\t\t\two.<span class=\"me1\">item</span> <span class=\"kw2\">as</span> list<br/>\t\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>list.<span class=\"me1\">item</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\toriginal_list<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"unixdict.txt\"</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tread_wordlist<br/>\t\t\t<span class=\"co1\">-- Preprocessed wordlist for finding Anagrams.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tl_file<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+plain_text_file&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">PLAIN_TEXT_FILE</span></a><br/>\t\t\tsorted<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t\tempty_list<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> l_file.<span class=\"me1\">make_open_read_write</span> <span class=\"br0\">(</span>original_list<span class=\"br0\">)</span><br/>\t\t\tl_file.<span class=\"me1\">read_stream</span> <span class=\"br0\">(</span>l_file.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t\twordlist <span class=\"sy0\">:=</span> l_file.<span class=\"me1\">last_string</span>.<span class=\"me1\">split</span> <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">%N</span>'</span><span class=\"br0\">)</span><br/>\t\t\tl_file.<span class=\"me1\">close</span><br/>\t\t\t<span class=\"kw2\">create</span> words.<span class=\"me1\">make</span> <span class=\"br0\">(</span>wordlist.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t\tacross<br/>\t\t\t\twordlist <span class=\"kw2\">as</span> w<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">create</span> empty_list.<span class=\"me1\">make</span><br/>\t\t\t\tsorted <span class=\"sy0\">:=</span> sort_letters <span class=\"br0\">(</span>w.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\twords.<span class=\"me1\">put</span> <span class=\"br0\">(</span>empty_list, sorted<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">if</span> attached words.<span class=\"me1\">at</span> <span class=\"br0\">(</span>sorted<span class=\"br0\">)</span> <span class=\"kw2\">as</span> ana <span class=\"kw2\">then</span><br/>\t\t\t\t\tana.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>w.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\twordlist<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>\tsort_letters <span class=\"br0\">(</span>word<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t\t<span class=\"co1\">--Sorted in alphabetical order.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tletters<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+sorted_two_way_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">SORTED_TWO_WAY_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> letters.<span class=\"me1\">make</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_empty</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> word.<span class=\"me1\">count</span> <span class=\"kw2\">as</span> i<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tletters.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>word.<span class=\"me1\">at</span> <span class=\"br0\">(</span>i.<span class=\"me1\">item</span><span class=\"br0\">)</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tacross<br/>\t\t\t\tletters <span class=\"kw2\">as</span> s<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span>s.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\twords<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+hash_table&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">HASH_TABLE</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span>, <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 14, "block": "<pre class=\"text highlighted_source\">open monad io list string<br/>\u00a0<br/>groupon f x y = f x == f y<br/>\u00a0<br/>lines = split \"\\n\" &lt;&lt; replace \"\\n\\n\" \"\\n\" &lt;&lt; replace \"\\r\" \"\\n\"<br/>\u00a0<br/>main = do<br/>  fh &lt;- readFile \"c:\\\\test\\\\unixdict.txt\" OpenMode<br/>  f &lt;- readLines fh<br/>  closeFile fh<br/>  let words = lines f<br/>  let wix = groupBy (groupon fst) &lt;&lt; sort $ zip (map sort words) words<br/>  let mxl = maximum $ map length wix<br/>  mapM_ (putLn &lt;&lt; map snd) &lt;&lt; filter ((==mxl) &lt;&lt; length) $ wix</pre>"}, {"lang": "Elena", "loc": 36, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import system'io.<br/>import system'collections.<br/>import extensions.<br/>import extensions'routines.<br/>import extensions'text.<br/>\u00a0<br/>extension op<br/>{<br/>     T&lt;literal&gt; normalized<br/>         = self toArray; ascendant; summarize(StringWriter new).<br/>}<br/>\u00a0<br/>public program<br/>[<br/>    auto aDictionary\u00a0:= Map&lt;literal,object&gt;().<br/>    File new(\"unixdict.txt\"); forEachLine(:aWord)<br/>    [    <br/>        var s\u00a0:= aWord.<br/>        var aKey\u00a0:= aWord normalized.<br/>        var anItem\u00a0:= aDictionary[aKey].<br/>        if (nil == anItem)<br/>        [<br/>            anItem\u00a0:= ArrayList new.<br/>            aDictionary[aKey]\u00a0:= anItem.<br/>        ].<br/>\u00a0<br/>        anItem append:aWord.<br/>    ].<br/>\u00a0<br/>    aDictionary values;<br/>        sort(:aFormer:aLater)( aFormer item2; length &gt; aLater item2; length );<br/>        top:20; forEach(:aPair)[ console printLine(aPair item2) ].<br/>\u00a0<br/>    console readChar<br/>]</pre>"}, {"lang": "Elixir", "loc": 16, "block": "<pre class=\"text highlighted_source\">defmodule Anagrams do<br/>  def find(file) do<br/>    File.read!(file)<br/>    |&gt; String.split<br/>    |&gt; Enum.group_by(fn word -&gt; String.codepoints(word) |&gt; Enum.sort end)<br/>    |&gt; Enum.group_by(fn {_,v} -&gt; length(v) end) <br/>    |&gt; Enum.max <br/>    |&gt; print<br/>  end<br/>\u00a0<br/>  defp print({_,y}) do<br/>    Enum.each(y, fn {_,e} -&gt; Enum.sort(e) |&gt; Enum.join(\" \") |&gt; IO.puts end)<br/>  end<br/>end<br/>\u00a0<br/>Anagrams.find(\"unixdict.txt\")</pre>"}, {"lang": "Erlang", "loc": 30, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">P</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">read_file</span><span class=\"br0\">(</span><span class=\"st_h\">'unixdict.txt'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">D</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">E</span><span class=\"sy3\">=</span><span class=\"re3\">fetch</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">tokens</span><span class=\"br0\">(</span><span class=\"kw3\">binary_to_list</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span><span class=\"re5\">E</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">append</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"re5\">H</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">H</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">D</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Var</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Len</span> <span class=\"sy3\">=</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Var</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">if</span><br/>        <span class=\"re5\">Len</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">N</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">Len</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Var</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">Len</span> <span class=\"sy3\">==</span> <span class=\"re5\">N</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">Len</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Var</span> | <span class=\"re5\">L</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">Len</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">N</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">L</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 49, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> sort.e<br/>\u00a0<br/><span class=\"kw1\">function</span> compare_keys<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">compare</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> fn <span class=\"sy1\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">sequence</span> words<span class=\"sy2\">,</span> anagrams<br/><span class=\"kw2\">object</span> word<br/>words <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    word <span class=\"sy1\">=</span> <span class=\"kw2\">gets</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    word <span class=\"sy1\">=</span> word<span class=\"br0\">[</span><span class=\"nu0\">1</span>..$<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\">-- truncate new-line character</span><br/>    words <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>words<span class=\"sy2\">,</span> <span class=\"br0\">{</span>sort<span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy2\">,</span> word<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/><span class=\"kw2\">close</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> maxlen<br/>maxlen <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>words <span class=\"sy1\">=</span> custom_sort<span class=\"br0\">(</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"compare_keys\"</span><span class=\"br0\">)</span><span class=\"sy2\">,</span> words<span class=\"br0\">)</span><br/>anagrams <span class=\"sy1\">=</span> <span class=\"br0\">{</span>words<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">equal</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>$<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        anagrams<span class=\"br0\">[</span>$<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>$<span class=\"br0\">]</span><span class=\"sy2\">,</span> words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">elsif</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>$<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>        anagrams<span class=\"br0\">[</span>$<span class=\"br0\">]</span> <span class=\"sy1\">=</span> words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>$<span class=\"br0\">]</span><span class=\"br0\">)</span> &gt; maxlen <span class=\"kw1\">then</span><br/>            maxlen <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>$<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        anagrams <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>anagrams<span class=\"sy2\">,</span> words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>$<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>    anagrams <span class=\"sy1\">=</span> anagrams<span class=\"br0\">[</span><span class=\"nu0\">1</span>..$<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> maxlen <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>anagrams<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> xss <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">ofSeq</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>System.<span class=\"me1\">IO</span>.<span class=\"me1\">File</span>.<span class=\"me1\">ReadAllLines</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">snd</span> xss <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span> <span class=\"sy0\">=</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">length</span><span class=\"br0\">)</span> xss <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"kw3\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "FBSL", "loc": 160, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#APPTYPE CONSOLE</span><br/>\u00a0<br/>DIM gtc <span class=\"sy0\">=</span> GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Anagram<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>PRINT <span class=\"st0\">\"Done in \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> gtc<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"st0\">\" seconds\"</span><br/>\u00a0<br/>PAUSE<br/>\u00a0<br/>DYNC Anagram<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"co2\">#include &lt;windows.h&gt;</span><br/>\t<span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span><span class=\"sy0\">*</span> sortedWord<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> word<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> wbuf<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">char</span><span class=\"sy0\">*</span> p1<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>p2<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>endwrd<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">char</span> t<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> swaps<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>wbuf<span class=\"sy0\">,</span> word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tendwrd <span class=\"sy0\">=</span> wbuf <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>wbuf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\t\tswaps <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\tp1 <span class=\"sy0\">=</span> wbuf<span class=\"sy0\">;</span> p2 <span class=\"sy0\">=</span> endwrd <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">&lt;</span> p2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p2 <span class=\"sy0\">&gt;*</span> p1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\tt <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p2<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p2 <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p1<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t\t\t\t\tswaps <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\tp1<span class=\"sy0\">++;</span> p2<span class=\"sy0\">--;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tp1 <span class=\"sy0\">=</span> wbuf<span class=\"sy0\">;</span> p2 <span class=\"sy0\">=</span> p1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&lt;</span> endwrd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p2 <span class=\"sy0\">&gt;*</span> p1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\tt <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p2<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p2 <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>p1<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t\t\t\t\tswaps <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\tp1<span class=\"sy0\">++;</span> p2<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>swaps<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> wbuf<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">short</span> cxmap<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"nu12\">0x06</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x28</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x09</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x33</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x31</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x56</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu12\">0x52</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x19</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x29</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x53</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x32</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x48</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x35</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x55</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x14</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x27</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x24</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu12\">0x02</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x18</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x45</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x30</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x08</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x03</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu12\">0x0b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x07</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x20</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x51</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x11</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x58</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x00</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x49</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu12\">0x15</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x41</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x17</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x39</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x16</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x42</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x37</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x22</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0f</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu12\">0x43</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x46</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x26</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x40</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x12</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x21</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3c</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x36</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu12\">0x38</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x01</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x05</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x4e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x44</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3d</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x04</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x10</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x5a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2a</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu12\">0x23</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x34</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x25</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2f</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x2b</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x50</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x3a</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x54</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x47</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x59</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x13</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x57</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"co2\">#define CXMAP_SIZE (sizeof(cxmap) / sizeof(short))</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> Str_Hash<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> key<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> ix_max<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> cp<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">short</span> mash<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> hash <span class=\"sy0\">=</span> <span class=\"nu0\">33501551</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>cp <span class=\"sy0\">=</span> key<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>cp<span class=\"sy0\">;</span> cp<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tmash <span class=\"sy0\">=</span> cxmap<span class=\"br0\">[</span><span class=\"sy0\">*</span>cp <span class=\"sy0\">%</span> CXMAP_SIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\thash <span class=\"sy0\">=</span> <span class=\"br0\">(</span>hash <span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu12\">0x5C5CF5C</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>hash <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>mash <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\thash <span class=\"sy0\">&amp;=</span> <span class=\"nu12\">0x3FFFFFFF</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> hash <span class=\"sy0\">%</span> ix_max<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sDictWord<span class=\"sy0\">*</span> DictWord<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">struct</span> sDictWord <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> word<span class=\"sy0\">;</span><br/>\t\tDictWord next<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sHashEntry<span class=\"sy0\">*</span> HashEntry<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">struct</span> sHashEntry <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> key<span class=\"sy0\">;</span><br/>\t\tHashEntry next<span class=\"sy0\">;</span><br/>\t\tDictWord words<span class=\"sy0\">;</span><br/>\t\tHashEntry link<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">short</span> wordCount<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co2\">#define HT_SIZE 8192</span><br/>\u00a0<br/>\tHashEntry hashTable<span class=\"br0\">[</span>HT_SIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tHashEntry mostPerms <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> buildAnagrams<span class=\"br0\">(</span>FILE<span class=\"sy0\">*</span> fin<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">char</span> buffer<span class=\"br0\">[</span><span class=\"nu0\">40</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">char</span> bufr2<span class=\"br0\">[</span><span class=\"nu0\">40</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">char</span><span class=\"sy0\">*</span> hkey<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> hix<span class=\"sy0\">;</span><br/>\t\tHashEntry he<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>hep<span class=\"sy0\">;</span><br/>\t\tDictWord we<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> maxPC <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> numWords <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"sy0\">,</span> fin<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>hkey <span class=\"sy0\">=</span> buffer<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>hkey <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>hkey <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> hkey<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"sy0\">*</span>hkey <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\thkey <span class=\"sy0\">=</span> sortedWord<span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> bufr2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\thix <span class=\"sy0\">=</span> Str_Hash<span class=\"br0\">(</span>hkey<span class=\"sy0\">,</span> HT_SIZE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\the <span class=\"sy0\">=</span> hashTable<span class=\"br0\">[</span>hix<span class=\"br0\">]</span><span class=\"sy0\">;</span> hep <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>hashTable<span class=\"br0\">[</span>hix<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>he <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>he<span class=\"sy0\">-&gt;</span>key<span class=\"sy0\">,</span> hkey<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\thep <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>he<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>\t\t\t\the <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> he<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\the <span class=\"sy0\">=</span> <span class=\"br0\">(</span>HashEntry<span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sHashEntry<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\the<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t\t\t\the<span class=\"sy0\">-&gt;</span>key <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>hkey<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\the<span class=\"sy0\">-&gt;</span>wordCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\the<span class=\"sy0\">-&gt;</span>words <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t\t\t\the<span class=\"sy0\">-&gt;</span>link <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"sy0\">*</span>hep <span class=\"sy0\">=</span> he<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\twe <span class=\"sy0\">=</span> <span class=\"br0\">(</span>DictWord<span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sDictWord<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\twe<span class=\"sy0\">-&gt;</span>word <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\twe<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>words<span class=\"sy0\">;</span><br/>\t\t\the<span class=\"sy0\">-&gt;</span>words <span class=\"sy0\">=</span> we<span class=\"sy0\">;</span><br/>\t\t\the<span class=\"sy0\">-&gt;</span>wordCount<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>maxPC <span class=\"sy0\">&lt;</span> he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tmaxPC <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"sy0\">;</span><br/>\t\t\t\tmostPerms <span class=\"sy0\">=</span> he<span class=\"sy0\">;</span><br/>\t\t\t\the<span class=\"sy0\">-&gt;</span>link <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maxPC <span class=\"sy0\">==</span> he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\the<span class=\"sy0\">-&gt;</span>link <span class=\"sy0\">=</span> mostPerms<span class=\"sy0\">;</span><br/>\t\t\t\tmostPerms <span class=\"sy0\">=</span> he<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tnumWords<span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d words in dictionary max ana=%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> numWords<span class=\"sy0\">,</span> maxPC<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> maxPC<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tHashEntry he<span class=\"sy0\">;</span><br/>\t\tDictWord we<span class=\"sy0\">;</span><br/>\t\tFILE<span class=\"sy0\">*</span> f1<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tf1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tbuildAnagrams<span class=\"br0\">(</span>f1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>f1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tf1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"anaout.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>he <span class=\"sy0\">=</span> mostPerms<span class=\"sy0\">;</span> he<span class=\"sy0\">;</span> he <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>link<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>f1<span class=\"sy0\">,</span> <span class=\"st0\">\"%d: \"</span><span class=\"sy0\">,</span> he<span class=\"sy0\">-&gt;</span>wordCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>we <span class=\"sy0\">=</span> he<span class=\"sy0\">-&gt;</span>words<span class=\"sy0\">;</span> we<span class=\"sy0\">;</span> we <span class=\"sy0\">=</span> we<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>f1<span class=\"sy0\">,</span> <span class=\"st0\">\"%s, \"</span><span class=\"sy0\">,</span> we<span class=\"sy0\">-&gt;</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>f1<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>f1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>END DYNC</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\"> \"resource:unixdict.txt\" utf8 file-lines<br/> [ [ natural-sort &gt;string ] keep ] { } map&gt;assoc sort-keys<br/> [ [ first ] compare +eq+ = ] monotonic-split<br/> dup 0 [ length max ] reduce '[ length _ = ] filter [ values ] map .</pre>"}, {"lang": "Fantom", "loc": 43, "block": "<pre class=\"text highlighted_source\">class Main<br/>{<br/>  // take given word and return a string rearranging characters in order<br/>  static Str toOrderedChars (Str word)<br/>  {<br/>    Str[] chars\u00a0:= [,]<br/>    word.each |Int c| { chars.add (c.toChar) }<br/>    return chars.sort.join(\"\")<br/>  }<br/>\u00a0<br/>  // add given word to anagrams map<br/>  static Void addWord (Str:Str[] anagrams, Str word)<br/>  {<br/>    Str orderedWord\u00a0:= toOrderedChars (word)<br/>    if (anagrams.containsKey (orderedWord))<br/>      anagrams[orderedWord].add (word)<br/>    else<br/>      anagrams[orderedWord] = [word]<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    Str:Str[] anagrams\u00a0:= [:] // map Str -&gt; Str[]<br/>    // loop through input file, adding each word to map of anagrams<br/>    File (`unixdict.txt`).eachLine |Str word|<br/>    {<br/>      addWord (anagrams, word)<br/>    }<br/>    // loop through anagrams, keeping the keys with values of largest size<br/>    Str[] largestKeys\u00a0:= [,]<br/>    anagrams.keys.each |Str k|<br/>    {<br/>      if ((largestKeys.size &lt; 1) || (anagrams[k].size == anagrams[largestKeys[0]].size))<br/>        largestKeys.add (k)<br/>      else if (anagrams[k].size &gt; anagrams[largestKeys[0]].size)<br/>        largestKeys = [k]<br/>    }<br/>    largestKeys.each |Str k|<br/>    {<br/>      echo (\"Key: $k -&gt; \" + anagrams[k].join(\", \"))<br/>    }<br/>  }<br/>}</pre>"}, {"lang": "Fortran", "loc": 175, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">!***************************************************************************************</span><br/>\t<span class=\"kw1\">module</span> anagram_routines<br/><span class=\"co1\">!***************************************************************************************</span><br/>\t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>\t<span class=\"co1\">!the dictionary file:</span><br/>\t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">file_unit</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/>\t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">filename</span> <span class=\"sy0\">=</span> <span class=\"st0\">'unixdict.txt'</span><br/>\u00a0<br/>\t<span class=\"co1\">!maximum number of characters in a word:</span><br/>\t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">max_chars</span> <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><br/>\u00a0<br/>\t<span class=\"co1\">!maximum number of characters in the string displaying the anagram lists:</span><br/>\t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">str_len</span> <span class=\"sy0\">=</span> <span class=\"nu0\">256</span><br/>\u00a0<br/>\t<span class=\"kw3\">type</span> word <br/>\t  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span>max_chars<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span> <span class=\"sy0\">=</span> <span class=\"kw4\">repeat</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>,max_chars<span class=\"br0\">)</span>    <span class=\"co1\">!the word from the dictionary</span><br/>\t  <span class=\"kw3\">integer</span>                  <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                          <span class=\"co1\">!length of this word</span><br/>\t  <span class=\"kw3\">integer</span>                  <span class=\"sy0\">::</span> <span class=\"me2\">n_anagrams</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t             <span class=\"co1\">!number of anagrams found</span><br/>\t  <span class=\"kw3\">logical</span>                  <span class=\"sy0\">::</span> <span class=\"me2\">checked</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span>              <span class=\"co1\">!if this one has already been checked</span><br/>\t  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span>str_len<span class=\"br0\">)</span>   <span class=\"sy0\">::</span> <span class=\"me2\">anagrams</span> <span class=\"sy0\">=</span> <span class=\"kw4\">repeat</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>,str_len<span class=\"br0\">)</span> <span class=\"co1\">!the anagram list for this word</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw3\">type</span> word<br/>\u00a0<br/>\t<span class=\"co1\">!the dictionary structure:</span><br/>\t<span class=\"kw3\">type</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>,<span class=\"kw3\">allocatable</span>,<span class=\"kw3\">target</span> <span class=\"sy0\">::</span> <span class=\"me2\">dict</span><br/>\u00a0<br/>\t<span class=\"kw1\">contains</span><br/><span class=\"co1\">!***************************************************************************************</span><br/>\u00a0<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\t<span class=\"kw1\">function</span> count_lines_in_file<span class=\"br0\">(</span>fid<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>n_lines<span class=\"br0\">)</span><br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>\t\t<span class=\"kw3\">integer</span>             <span class=\"sy0\">::</span> <span class=\"me2\">n_lines</span><br/>\t\t<span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">fid</span>\t\t<br/>\t\t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"sy0\">::</span> <span class=\"me2\">tmp</span><br/>\t\t<span class=\"kw3\">integer</span>             <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\t\t<span class=\"kw3\">integer</span>             <span class=\"sy0\">::</span> <span class=\"me2\">ios</span><br/>\u00a0<br/>\t\t<span class=\"co1\">!the file is assumed to be open already.</span><br/>\u00a0<br/>\t\trewind<span class=\"br0\">(</span>fid<span class=\"br0\">)</span>\t  <span class=\"co1\">!rewind to beginning of the file</span><br/>\u00a0<br/>\t\tn_lines <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">do</span> <span class=\"co1\">!read each line until the end of the file.</span><br/>\t\t\tread<span class=\"br0\">(</span>fid,<span class=\"st0\">'(A1)'</span>,<span class=\"kw1\">iostat</span><span class=\"sy0\">=</span>ios<span class=\"br0\">)</span> tmp<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>ios &lt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span>      <span class=\"co1\">!End of file</span><br/>\t\t\tn_lines <span class=\"sy0\">=</span> n_lines <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>  <span class=\"co1\">!row counter</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>\t\trewind<span class=\"br0\">(</span>fid<span class=\"br0\">)</span>   <span class=\"co1\">!rewind to beginning of the file\t</span><br/>\u00a0<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">function</span> count_lines_in_file<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\u00a0<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\tpure elemental <span class=\"kw1\">function</span> is_anagram<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\t\t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>\t\t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">y</span><br/>\t\t<span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">is_anagram</span><br/>\u00a0<br/>\t\t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x_tmp</span>\t<span class=\"co1\">!a copy of x</span><br/>\t\t<span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>,j<br/>\u00a0<br/>\t\t<span class=\"co1\">!a character not found in any word:</span><br/>\t\t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">null</span> <span class=\"sy0\">=</span> <span class=\"kw4\">achar</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"co1\">!x and y are assumed to be the same size.</span><br/>\u00a0<br/>\t\tx_tmp <span class=\"sy0\">=</span> x<br/>\t\t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t\t\tj <span class=\"sy0\">=</span> <span class=\"kw4\">index</span><span class=\"br0\">(</span>x_tmp, y<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">!look for this character in x_tmp</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>j<span class=\"sy0\">/=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\tx_tmp<span class=\"br0\">(</span>j<span class=\"sy0\">:</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> null  <span class=\"co1\">!clear it so it won't be checked again</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tis_anagram <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span> <span class=\"co1\">!character not found: x,y are not anagrams</span><br/>\t\t\t\t<span class=\"kw1\">return</span><br/>\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>\t\t<span class=\"co1\">!if we got to this point, all the characters </span><br/>\t\t<span class=\"co1\">! were the same, so x,y are anagrams:</span><br/>\t\tis_anagram <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>\u00a0<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">function</span> is_anagram<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\u00a0<br/><span class=\"co1\">!***************************************************************************************</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">module</span> anagram_routines<br/><span class=\"co1\">!***************************************************************************************</span><br/>\u00a0<br/><span class=\"co1\">!***************************************************************************************</span><br/>\t<span class=\"kw1\">program</span> main<br/><span class=\"co1\">!***************************************************************************************</span><br/>\t<span class=\"kw3\">use</span> anagram_routines<br/>\t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>\t<span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>,i,j,n_max<br/>\t<span class=\"kw3\">type</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span>,<span class=\"kw3\">pointer</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>,y<br/>\t<span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">first_word</span><br/>\t<span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">start</span>, finish<br/>\u00a0<br/>\t<span class=\"kw1\">call</span> <span class=\"kw4\">cpu_time</span><span class=\"br0\">(</span>start<span class=\"br0\">)</span>\t<span class=\"co1\">!..start timer</span><br/>\u00a0<br/>\t<span class=\"co1\">!open the dictionary and read in all the words:</span><br/>\topen<span class=\"br0\">(</span><span class=\"kw1\">unit</span><span class=\"sy0\">=</span>file_unit,<span class=\"kw1\">file</span><span class=\"sy0\">=</span>filename<span class=\"br0\">)</span>      <span class=\"co1\">!open the file</span><br/>\tn <span class=\"sy0\">=</span> count_lines_in_file<span class=\"br0\">(</span>file_unit<span class=\"br0\">)</span>      <span class=\"co1\">!count lines in the file</span><br/>\t<span class=\"kw1\">allocate</span><span class=\"br0\">(</span>dict<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>                       <span class=\"co1\">!allocate dictionary structure</span><br/>\t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n                                <span class=\"co1\">!</span><br/>\t\tread<span class=\"br0\">(</span>file_unit,<span class=\"st0\">'(A)'</span><span class=\"br0\">)</span> dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>str   <span class=\"co1\">!each line is a word in the dictionary</span><br/>\t\tdict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> <span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>str<span class=\"br0\">)</span>   <span class=\"co1\">!saving length here to avoid trim's below</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span>\t\t<br/>\tclose<span class=\"br0\">(</span>file_unit<span class=\"br0\">)</span>                        <span class=\"co1\">!close the file</span><br/>\u00a0<br/>\t<span class=\"co1\">!search dictionary for anagrams:</span><br/>\t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<br/>\u00a0<br/>\t\tx <span class=\"sy0\">=</span>&gt; dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span>\t<span class=\"co1\">!pointer to simplify code</span><br/>\t\tfirst_word <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span>\t<span class=\"co1\">!initialize</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">do</span> j<span class=\"sy0\">=</span>i,n<br/>\u00a0<br/>\t\t\ty <span class=\"sy0\">=</span>&gt; dict<span class=\"br0\">(</span>j<span class=\"br0\">)</span>\t<span class=\"co1\">!pointer to simplify code</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">!checks to avoid checking words unnecessarily:</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span>checked <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> y<span class=\"sy0\">%</span>checked<span class=\"br0\">)</span> <span class=\"kw1\">cycle</span>     <span class=\"co1\">!both must not have been checked already</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span>n<span class=\"sy0\">/=</span>y<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"kw1\">cycle</span>                     <span class=\"co1\">!must be the same size</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span>str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>x<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><span class=\"sy0\">==</span>y<span class=\"sy0\">%</span>str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>y<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span>   <span class=\"co1\">!can't be the same word</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">! check to see if x,y are anagrams:</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_anagram<span class=\"br0\">(</span>x<span class=\"sy0\">%</span>str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>x<span class=\"sy0\">%</span>n<span class=\"br0\">)</span>, y<span class=\"sy0\">%</span>str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>y<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"co1\">!they are anagrams.</span><br/>\t\t\t\ty<span class=\"sy0\">%</span>checked <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span> \t<span class=\"co1\">!don't check this one again.</span><br/>\t\t\t\tx<span class=\"sy0\">%</span>n_anagrams <span class=\"sy0\">=</span> x<span class=\"sy0\">%</span>n_anagrams <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>first_word<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\t\t<span class=\"co1\">!this is the first anagram found for this word.</span><br/>\t\t\t\t\tfirst_word <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>\t\t\t\t\tx<span class=\"sy0\">%</span>n_anagrams <span class=\"sy0\">=</span> x<span class=\"sy0\">%</span>n_anagrams <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\tx<span class=\"sy0\">%</span>anagrams <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>anagrams<span class=\"br0\">)</span><span class=\"sy0\">//</span>x<span class=\"sy0\">%</span>str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>x<span class=\"sy0\">%</span>n<span class=\"br0\">)</span>  <span class=\"co1\">!add first word to list</span><br/>\t\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t\t\t\tx<span class=\"sy0\">%</span>anagrams <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>anagrams<span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">','</span><span class=\"sy0\">//</span>y<span class=\"sy0\">%</span>str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>y<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"co1\">!add next word to list</span><br/>\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\t\tx<span class=\"sy0\">%</span>checked <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span>  <span class=\"co1\">!don't check this one again</span><br/>\u00a0<br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>\t<span class=\"co1\">!anagram groups with the most words:</span><br/>\twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">''</span><br/>\tn_max <span class=\"sy0\">=</span> <span class=\"kw4\">maxval</span><span class=\"br0\">(</span>dict<span class=\"sy0\">%</span>n_anagrams<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>n_anagrams<span class=\"sy0\">==</span>n_max<span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A)'</span><span class=\"br0\">)</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>anagrams<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>\t<span class=\"co1\">!anagram group containing longest words:</span><br/>\twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">''</span><br/>\tn_max <span class=\"sy0\">=</span> <span class=\"kw4\">maxval</span><span class=\"br0\">(</span>dict<span class=\"sy0\">%</span>n, mask<span class=\"sy0\">=</span>dict<span class=\"sy0\">%</span>n_anagrams&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>n_anagrams&gt;<span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"sy0\">==</span>n_max<span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A)'</span><span class=\"br0\">)</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>anagrams<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">''</span><br/>\u00a0<br/>\t<span class=\"kw1\">call</span> <span class=\"kw4\">cpu_time</span><span class=\"br0\">(</span>finish<span class=\"br0\">)</span>\t<span class=\"co1\">!...stop timer</span><br/>\twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A,F6.3,A)'</span><span class=\"br0\">)</span> <span class=\"st0\">'[Runtime = '</span>,finish<span class=\"sy0\">-</span>start,<span class=\"st0\">' sec]'</span><br/>\twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">''</span><br/>\u00a0<br/><span class=\"co1\">!***************************************************************************************</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">program</span> main<br/><span class=\"co1\">!***************************************************************************************</span></pre>"}, {"lang": "FreeBASIC", "loc": 136, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> IndexedWord<br/>  <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> word<br/>  <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> index<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"co1\">' selection sort, quick enough for sorting small number of letters</span><br/><span class=\"kw1\">Sub</span> sortWord<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j, m, n = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n - <span class=\"nu0\">2</span><br/>    m = i<br/>    <span class=\"kw1\">For</span> j = i + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> s<span class=\"br0\">[</span>j<span class=\"br0\">]</span> &lt; s<span class=\"br0\">[</span>m<span class=\"br0\">]</span> <span class=\"kw1\">Then</span> m = j<br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">If</span> m &lt;&gt; i <span class=\"kw1\">Then</span> <span class=\"kw1\">Swap</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, s<span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' selection sort, quick enough for sorting small array of IndexedWord instances by index</span><br/><span class=\"kw1\">Sub</span> sortIndexedWord<span class=\"br0\">(</span>iw<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> IndexedWord<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j, m, n = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>iw<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n - <span class=\"nu0\">1</span><br/>    m = i<br/>    <span class=\"kw1\">For</span> j = i + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>      <span class=\"kw1\">If</span> iw<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">index</span> &lt; iw<span class=\"br0\">(</span>m<span class=\"br0\">)</span>.<span class=\"me1\">index</span> <span class=\"kw1\">Then</span> m = j<br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">If</span> m &lt;&gt; i <span class=\"kw1\">Then</span> <span class=\"kw1\">Swap</span> iw<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, iw<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' quicksort for sorting whole dictionary of IndexedWord instances by sorted word</span><br/><span class=\"kw1\">Sub</span> quicksort<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> IndexedWord, first <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, last <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> length = last - first + <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> length &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <br/>  <span class=\"kw1\">Dim</span> pivot <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = a<span class=\"br0\">(</span>first + length\\ <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">word</span><br/>  <span class=\"kw1\">Dim</span> lft <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = first <br/>  <span class=\"kw1\">Dim</span> rgt <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = last <br/>  <span class=\"kw1\">While</span> lft &lt;= rgt<br/>    <span class=\"kw1\">While</span> a<span class=\"br0\">(</span>lft<span class=\"br0\">)</span>.<span class=\"me1\">word</span> &lt; pivot<br/>      lft +=<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">While</span> a<span class=\"br0\">(</span>rgt<span class=\"br0\">)</span>.<span class=\"me1\">word</span> &gt; pivot<br/>      rgt -= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">If</span> lft &lt;= rgt <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Swap</span> a<span class=\"br0\">(</span>lft<span class=\"br0\">)</span>, a<span class=\"br0\">(</span>rgt<span class=\"br0\">)</span><br/>       lft += <span class=\"nu0\">1</span><br/>       rgt -= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span> <br/>  <span class=\"kw1\">Wend</span><br/>  quicksort<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, first, rgt<span class=\"br0\">)</span><br/>  quicksort<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, lft, last<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> t <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"kw1\">timer</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> w<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">'' array to hold actual words</span><br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"undict.txt\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw1\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  count +=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> w<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Line</span> <span class=\"kw1\">Input</span> <span class=\"co2\">#1, w(count)</span><br/><span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Close</span> <span class=\"co2\">#1</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> IndexedWord iw<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<span class=\"br0\">)</span> <span class=\"co1\">'' array to hold sorted words and their index into w() </span><br/><span class=\"kw1\">Dim</span> word <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>  word = w<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  sortWord<span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>  iw<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">word</span> = word<br/>  iw<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">index</span> = i <br/><span class=\"kw1\">Next</span><br/>quickSort iw<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span>, count  <span class=\"co1\">'' sort the IndexedWord array by sorted word</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> startIndex = <span class=\"nu0\">1</span>, length = <span class=\"nu0\">1</span>, maxLength = <span class=\"nu0\">1</span>, ub = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> maxIndex<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ub<span class=\"br0\">)</span><br/>maxIndex<span class=\"br0\">(</span>ub<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>word = iw<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">word</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> count<br/>  <span class=\"kw1\">If</span> word = iw<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">word</span> <span class=\"kw1\">Then</span><br/>    length += <span class=\"nu0\">1</span> <br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">If</span> length &gt; maxLength <span class=\"kw1\">Then</span><br/>      maxLength = length<br/>      <span class=\"kw1\">Erase</span> maxIndex<br/>      ub = <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Redim</span> maxIndex<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ub<span class=\"br0\">)</span><br/>      maxIndex<span class=\"br0\">(</span>ub<span class=\"br0\">)</span> = startIndex<br/>    <span class=\"kw1\">ElseIf</span> length = maxLength <span class=\"kw1\">Then</span><br/>      ub += <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> maxIndex<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ub<span class=\"br0\">)</span><br/>      maxIndex<span class=\"br0\">(</span>ub<span class=\"br0\">)</span> = startIndex<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    startIndex = i<br/>    length = <span class=\"nu0\">1</span><br/>    word = iw<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">word</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">If</span> length &gt; maxLength <span class=\"kw1\">Then</span><br/>  maxLength = length<br/>  <span class=\"kw1\">Erase</span> maxIndex<br/>  <span class=\"kw1\">Redim</span> maxIndex<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  maxIndex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = startIndex<br/><span class=\"kw1\">ElseIf</span> length = maxLength <span class=\"kw1\">Then</span><br/>  ub += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> maxIndex<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ub<span class=\"br0\">)</span><br/>  maxIndex<span class=\"br0\">(</span>ub<span class=\"br0\">)</span> = startIndex<br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span>; <span class=\"st0\">\" words in the dictionary\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The anagram set(s) with the greatest number of words (namely\"</span>; maxLength; <span class=\"st0\">\") is:\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Dim</span> iws<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> maxLength<span class=\"br0\">)</span> <span class=\"kw1\">As</span> IndexedWord  <span class=\"co1\">'' array to hold each anagram set</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>maxIndex<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = maxIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">To</span> maxIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span> + maxLength - <span class=\"nu0\">1</span><br/>    iws<span class=\"br0\">(</span>j - maxIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> = iw<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> j<br/>  sortIndexedWord iws<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">'' sort anagram set before displaying it</span><br/>  <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> maxLength  <br/>    <span class=\"kw1\">Print</span> w<span class=\"br0\">(</span>iws<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">index</span><span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/>  <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Took \"</span>; <br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"#.###\"</span>; <span class=\"kw1\">timer</span> - t; <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" seconds on i3 @ 2.13 GHz\"</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>d = new dict<br/>for w = lines[\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"]<br/>{<br/>   sorted = sort[charList[w]]<br/>   curr = <a class=\"__cf_email__\" data-cfemail=\"761236051904021312\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>   if curr<br/>      <a class=\"__cf_email__\" data-cfemail=\"8febcffce0fdfbeaeba1fffafce7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[w]<br/>   else<br/>      <a class=\"__cf_email__\" data-cfemail=\"93f7d3e0fce1e7f6f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = [w]<br/>}<br/>\u00a0<br/>most = sort[toArray[d], {|a,b| length[<a class=\"__cf_email__\" data-cfemail=\"dfbd9fee\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>] &lt;=&gt; length[<a class=\"__cf_email__\" data-cfemail=\"41200170\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]}]<br/>longest = length[<a class=\"__cf_email__\" data-cfemail=\"c6aba9b5b286f6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@1]<br/>\u00a0<br/>i = 0<br/>while length[<a class=\"__cf_email__\" data-cfemail=\"0c61637f784c65\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@1] == longest<br/>{<br/>   println[<a class=\"__cf_email__\" data-cfemail=\"1d70726e695d74\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@1]<br/>   i = i + 1<br/>}<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 99, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>def tab 9<br/>\u00a0<br/>begin globals<br/>dim dynamic gDictionary(_maxLong) as Str255<br/>end globals<br/>\u00a0<br/>local fn IsAnagram( word1 as Str31, word2 as Str31 ) as Boolean<br/>dim as long i, j, h, q<br/>dim as Boolean result<br/>\u00a0<br/>if word1[0]\u00a0!= word2[0] then result = _false\u00a0: exit fn<br/>\u00a0<br/>for i = 0 to word1[0]<br/>  h = 0\u00a0: q = 0<br/>  for j = 0 to word1[0]<br/>    if word1[i] == word1[j] then h++<br/>    if word1[i] == word2[j] then q++<br/>  next<br/>  if h\u00a0!= q then result = _false\u00a0: exit fn<br/>next<br/>result = _true<br/>end fn = result<br/>\u00a0<br/>local fn LoadDictionaryToArray<br/>'~'1<br/>dim as CFURLRef    url<br/>dim as CFArrayRef  arr<br/>dim as CFStringRef temp, cfStr<br/>dim as CFIndex     elements<br/>dim as Handle      h<br/>dim as Str255      s<br/>dim as long        fileLen, i<br/>\u00a0<br/>kill dynamic gDictionary<br/>url = fn CFURLCreateWithFileSystemPath( _kCFAllocatorDefault, @\"/usr/share/dict/words\", _kCFURLPOSIXPathStyle, _false )<br/>open \"i\", 2, url<br/>  fileLen = lof(2, 1)<br/>  h = fn NewHandleClear( fileLen )<br/>    if ( h )<br/>      read file 2, [h], fileLen<br/>      cfStr = fn CFStringCreateWithBytes( _kCFAllocatorDefault, #[h], fn GetHandleSize(h), _kCFStringEncodingMacRoman, _false )<br/>      if ( cfStr )<br/>        arr = fn CFStringCreateArrayBySeparatingStrings( _kCFAllocatorDefault, cfStr, @\"\\n\" ) <br/>        CFRelease( cfStr )<br/>        elements = fn CFArrayGetCount( arr )<br/>          for i = 0 to elements - 1<br/>            temp = fn CFArrayGetValueAtIndex( arr, i )<br/>            fn CFStringGetPascalString( temp, @s, 256, _kCFStringEncodingMacRoman )<br/>            gDictionary(i) = s<br/>          next<br/>      CFRelease( arr )<br/>      end if<br/>    fn DisposeH( h )<br/>   end if<br/>close #2<br/>CFRelease( url )<br/>end fn<br/>\u00a0<br/>local fn FindAnagrams( whichWord as Str31 )<br/>dim as long elements, i<br/>\u00a0<br/>print \"Anagrams for \"; UCase$(whichWord); \":\",<br/>elements = fn DynamicNextElement( dynamic( gDictionary ) )<br/>for i = 0 to elements - 1<br/>  if ( len( gDictionary(i) ) == whichWord[0] )<br/>    if ( fn IsAnagram( whichWord, gDictionary(i) ) == _true )<br/>      print gDictionary(i),<br/>    end if<br/>  end if<br/>next<br/>print<br/>end fn<br/>\u00a0<br/>fn LoadDictionaryToArray<br/>\u00a0<br/>fn FindAnagrams( \"bade\"    )<br/>fn FindAnagrams( \"abet\"    )<br/>fn FindAnagrams( \"beast\"   )<br/>fn FindAnagrams( \"tuba\"    )<br/>fn FindAnagrams( \"mace\"    )<br/>fn FindAnagrams( \"scare\"   )<br/>fn FindAnagrams( \"marine\"  )<br/>fn FindAnagrams( \"antler\"  )<br/>fn FindAnagrams( \"spare\"   )<br/>fn FindAnagrams( \"leading\" )<br/>fn FindAnagrams( \"alerted\" )<br/>fn FindAnagrams( \"allergy\" )<br/>fn FindAnagrams( \"research\")<br/>fn FindAnagrams( \"hustle\"  )<br/>fn FindAnagrams( \"oriental\")<br/>def tab 3<br/>print<br/>fn FindAnagrams( \"creationism\" )<br/>fn FindAnagrams( \"resistance\"  )<br/>fn FindAnagrams( \"mountaineer\" )<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 53, "block": "<pre class=\"text highlighted_source\">Anagrams\u00a0:= function(name)<br/>  local f, p, L, line, word, words, swords, res, cur, r;<br/>  words\u00a0:= [ ];<br/>  swords\u00a0:= [ ];<br/>  f\u00a0:= InputTextFile(name);<br/>  while true do<br/>    line\u00a0:= ReadLine(f);<br/>    if line = fail then<br/>      break;<br/>    else<br/>      word\u00a0:= Chomp(line);<br/>      Add(words, word);<br/>      Add(swords, SortedList(word));<br/>    fi;<br/>  od;<br/>  CloseStream(f);<br/>  p\u00a0:= SortingPerm(swords);<br/>  L\u00a0:= Permuted(words, p);<br/>  r\u00a0:= \"\";<br/>  cur\u00a0:= [ ];<br/>  res\u00a0:= [ ];<br/>  for word in L do<br/>    if SortedList(word) = r then<br/>      Add(cur, word);<br/>    else<br/>      if Length(cur) &gt; 0 then<br/>        Add(res, cur);<br/>      fi;<br/>      r\u00a0:= SortedList(word);<br/>      cur\u00a0:= [ word ];<br/>    fi;<br/>  od;<br/>  if Length(cur) &gt; 0 then<br/>    Add(res, cur);<br/>  fi;<br/>  return Filtered(res, v -&gt; Length(v) &gt; 1);<br/>end;<br/>\u00a0<br/>\u00a0<br/>ana\u00a0:= Anagrams(\"my/gap/unixdict.txt\");;<br/>\u00a0<br/># What is the longest anagram sequence\u00a0?<br/>Maximum(List(ana, Length));<br/># 5<br/>\u00a0<br/># Which are they\u00a0?<br/>Filtered(ana, v -&gt; Length(v) = 5);<br/># [ [ \"abel\", \"able\", \"bale\", \"bela\", \"elba\" ],<br/>#   [ \"caret\", \"carte\", \"cater\", \"crate\", \"trace\" ],<br/>#   [ \"angel\", \"angle\", \"galen\", \"glean\", \"lange\" ],<br/>#   [ \"alger\", \"glare\", \"lager\", \"large\", \"regal\" ],<br/>#   [ \"elan\", \"lane\", \"lean\", \"lena\", \"neal\" ],<br/>#   [ \"evil\", \"levi\", \"live\", \"veil\", \"vile\" ] ]</pre>"}, {"lang": "Go", "loc": 47, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bytes\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"io/ioutil\"</span><br/>    <span class=\"st0\">\"net/http\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    r<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> http<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    b<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span>ReadAll<span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>Body<span class=\"sy1\">)</span><br/>    r<span class=\"sy3\">.</span>Body<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> ma <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">var</span> bs byteSlice<br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">][][]</span><span class=\"kw4\">byte</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> word <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> bytes<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        bs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>bs<span class=\"sy1\">[:</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> byteSlice<span class=\"sy1\">(</span>word<span class=\"sy1\">)</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>        sort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>bs<span class=\"sy1\">)</span><br/>        k <span class=\"sy2\">:=</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>bs<span class=\"sy1\">)</span><br/>        a <span class=\"sy2\">:=</span> append<span class=\"sy1\">(</span>m<span class=\"sy1\">[</span>k<span class=\"sy1\">],</span> word<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> &gt; ma <span class=\"sy1\">{</span><br/>            ma <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        m<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> a <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> ma <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> a<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> byteSlice <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b byteSlice<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>           <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b byteSlice<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>      <span class=\"sy1\">{</span> b<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> b<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> b<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> b<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b byteSlice<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> b<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> &lt; b<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> words <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=URL&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">URL</span></a><span class=\"br0\">(</span><span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"br0\">)</span>.<span class=\"me1\">text</span>.<span class=\"me1\">readLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> groups <span class=\"sy0\">=</span> words.<span class=\"me1\">groupBy</span><span class=\"br0\">{</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20toList\"><span class=\"kw5\">toList</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> bigGroupSize <span class=\"sy0\">=</span> groups.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a><span class=\"br0\">{</span> it.<span class=\"me1\">value</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isBigAnagram <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it.<span class=\"me1\">value</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> bigGroupSize <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> groups.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a><span class=\"br0\">(</span>isBigAnagram<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a><span class=\"br0\">{</span> it.<span class=\"me1\">value</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a><span class=\"br0\">{</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>\u00a0<br/>groupon f x y <span class=\"sy0\">=</span> f x <span class=\"sy0\">==</span> f y<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  f <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> <span class=\"st0\">\"./../Puzzels/Rosetta/unixdict.txt\"</span><br/>  <span class=\"kw1\">let</span>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a> f<br/>       wix <span class=\"sy0\">=</span> groupBy <span class=\"br0\">(</span>groupon <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> sort <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> sort <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a><br/>       mxl <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> wix<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span>mxl<span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> wix</pre>"}, {"lang": "Icon and Unicon", "loc": 34, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> writeSet<span class=\"br0\">(</span><span class=\"sy1\">!</span>getLongestAnagramSets<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> getLongestAnagramSets<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    wordSets <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    longestWSet <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>    longSets <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">every</span> word <span class=\"sy1\">:=</span> <span class=\"sy1\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        wChars <span class=\"sy1\">:=</span> csort<span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>        <span class=\"sy1\">/</span>wordSets<span class=\"br0\">[</span>wChars<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">insert</span><span class=\"br0\">(</span>wordSets<span class=\"br0\">[</span>wChars<span class=\"br0\">]</span><span class=\"sy1\">,</span> word<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> <span class=\"sy1\">*</span>wordSets<span class=\"br0\">[</span>wChars<span class=\"br0\">}</span> <span class=\"sy1\">==</span> longestWSet <span class=\"kw1\">then</span><br/>            <span class=\"kw4\">insert</span><span class=\"br0\">(</span>longSets<span class=\"sy1\">,</span> wordSets<span class=\"br0\">[</span>wChars<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> <span class=\"sy1\">*</span>wordSets<span class=\"br0\">[</span>wChars<span class=\"br0\">}</span> <span class=\"sy1\">&gt;</span> longestWSet <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>            longestWSet <span class=\"sy1\">:=</span> <span class=\"sy1\">*</span>wordSets<span class=\"br0\">[</span>wChars<span class=\"br0\">}</span><br/>            longSets <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">[</span>wordSets<span class=\"br0\">[</span>wChars<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> longSets<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> writeSet<span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy1\">|!</span>words<span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> csort<span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>s <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> <span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>c <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw4\">cset</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"sy1\">,</span>w<span class=\"br0\">)</span><span class=\"sy1\">,</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 14, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">(</span>#~ a: ~: {:\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> <span class=\"sy0\">(</span>]/.~ /:~&amp;&gt;<span class=\"sy0\">)</span> &lt;;.<span class=\"nu0\">_2</span> ] <span class=\"nu0\">1</span>!:<span class=\"nu0\">1</span> &lt;<span class=\"st_h\">'unixdict.txt'</span><br/>+-----+-----+-----+-----+-----+<br/>|abel |able |bale |bela |elba |<br/>+-----+-----+-----+-----+-----+<br/>|alger|glare|lager|large|regal|<br/>+-----+-----+-----+-----+-----+<br/>|angel|angle|galen|glean|lange|<br/>+-----+-----+-----+-----+-----+<br/>|caret|carte|cater|crate|trace|<br/>+-----+-----+-----+-----+-----+<br/>|elan |lane |lean |lena |neal |<br/>+-----+-----+-----+-----+-----+<br/>|evil |levi |live |veil |vile |<br/>+-----+-----+-----+-----+-----+</pre>"}, {"lang": "Java", "loc": 30, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.net.*</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> WordsOfEqChars <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw2\">throws</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/IOException.html\"><span class=\"kw20\">IOException</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/net/URL.html\"><span class=\"kw28\">URL</span></a> url = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/net/URL.html\"><span class=\"kw28\">URL</span></a><span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/InputStreamReader.html\"><span class=\"kw20\">InputStreamReader</span></a> isr = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/InputStreamReader.html\"><span class=\"kw20\">InputStreamReader</span></a><span class=\"br0\">(</span>url.<span class=\"me1\">openStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/BufferedReader.html\"><span class=\"kw20\">BufferedReader</span></a> reader = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/BufferedReader.html\"><span class=\"kw20\">BufferedReader</span></a><span class=\"br0\">(</span>isr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collection.html\"><span class=\"kw46\">Collection</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;&gt;</span> anagrams = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collection.html\"><span class=\"kw46\">Collection</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> word<span class=\"sy0\">;</span><br/>        <span class=\"kw3\">int</span> count = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>word = reader.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>= <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> chars = word.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> key = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>anagrams.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                anagrams.<span class=\"me1\">put</span><span class=\"br0\">(</span>key, <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            anagrams.<span class=\"me1\">get</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            count = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>count, anagrams.<span class=\"me1\">get</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        reader.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collection.html\"><span class=\"kw46\">Collection</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> ana\u00a0: anagrams.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ana.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= count<span class=\"br0\">)</span><br/>                <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>ana<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span>   <br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 23, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> fs <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'fs'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> words <span class=\"sy0\">=</span> fs.<span class=\"me1\">readFileSync</span><span class=\"br0\">(</span><span class=\"st0\">'unixdict.txt'</span><span class=\"sy0\">,</span> <span class=\"st0\">'UTF-8'</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> i<span class=\"sy0\">,</span> item<span class=\"sy0\">,</span> max <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>    anagrams <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> words.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> key <span class=\"sy0\">=</span> words<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>anagrams.<span class=\"kw3\">hasOwnProperty</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">//check if property exists on current obj only</span><br/>      anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">var</span> count <span class=\"sy0\">=</span> anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//push returns new array length</span><br/>  max <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>count<span class=\"sy0\">,</span> max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//note, this returns all arrays that match the maximum length</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>item <span class=\"kw1\">in</span> anagrams<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>anagrams.<span class=\"kw3\">hasOwnProperty</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"co1\">//check if property exists on current obj only</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>item<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">===</span> max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span>anagrams<span class=\"br0\">[</span>item<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Alternative Using Reduce", "loc": 22, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> fs <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'fs'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> dictionary <span class=\"sy0\">=</span> fs.<span class=\"me1\">readFileSync</span><span class=\"br0\">(</span><span class=\"st0\">'unixdict.txt'</span><span class=\"sy0\">,</span> <span class=\"st0\">'UTF-8'</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//group anagrams</span><br/><span class=\"kw1\">var</span> sortedDict <span class=\"sy0\">=</span> dictionary.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> word<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> sortedLetters <span class=\"sy0\">=</span> word.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>acc<span class=\"br0\">[</span>sortedLetters<span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"kw2\">undefined</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> acc<span class=\"br0\">[</span>sortedLetters<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  acc<span class=\"br0\">[</span>sortedLetters<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> acc<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//sort list by frequency</span><br/><span class=\"kw1\">var</span> keysSortedByFrequency <span class=\"sy0\">=</span> <span class=\"kw4\">Object</span>.<span class=\"me1\">keys</span><span class=\"br0\">(</span>sortedDict<span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>keyA<span class=\"sy0\">,</span> keyB<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sortedDict<span class=\"br0\">[</span>keyA<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> sortedDict<span class=\"br0\">[</span>keyB<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sortedDict<span class=\"br0\">[</span>keyA<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> sortedDict<span class=\"br0\">[</span>keyB<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//print first 10 anagrams by frequency</span><br/>keysSortedByFrequency.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>key<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>sortedDict<span class=\"br0\">[</span>key<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 12, "block": "<pre class=\"text highlighted_source\">def anagrams:<br/>  (reduce .[] as $word (<br/>      {table: {}, max: 0};   # state<br/>      ($word | explode | sort | implode) as $hash<br/>      | .table[$hash] += [ $word ]<br/>      | .max   = ([ .max, ( .table[$hash] | length) ] | max ) ))<br/>  | .max as $max<br/>  | .table | .[] | select(length == $max)\u00a0;<br/>\u00a0<br/># The task:<br/>split(\"\\n\") | anagrams<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">url = \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"<br/>wordlist = open(readlines, download(url))<br/>\u00a0<br/>wsort(word::AbstractString) = join(sort(collect(word)))<br/>\u00a0<br/>function anagram(wordlist::Vector{&lt;:AbstractString})<br/>    dict = Dict{String, Set{String}}()<br/>    for word in wordlist<br/>        sorted = wsort(word)<br/>        push!(get!(dict, sorted, Set{String}()), word)<br/>    end<br/>    wcnt = maximum(length, values(dict))<br/>    return collect(Iterators.filter((y) -&gt; length(y) == wcnt, values(dict)))<br/>end<br/>\u00a0<br/>println.(anagram(wordlist))</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">{<a class=\"__cf_email__\" data-cfemail=\"abd3eb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;a=|/a:#:'x}{x <a class=\"__cf_email__\" data-cfemail=\"8fe8cf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;1&lt;#:'g:={<a class=\"__cf_email__\" data-cfemail=\"126a52\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;x}'x}0::`unixdict.txt</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">BufferedReader</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">InputStreamReader</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"me1\">URL</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> url <span class=\"sy0\">=</span> URL<span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> isr <span class=\"sy0\">=</span> InputStreamReader<span class=\"br0\">(</span>url.<span class=\"me1\">openStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reader <span class=\"sy0\">=</span> BufferedReader<span class=\"br0\">(</span>isr<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> anagrams <span class=\"sy0\">=</span> mutableMapOf<span class=\"sy0\">&lt;</span>String, MutableList<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> word <span class=\"sy0\">=</span> reader.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>word <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> chars <span class=\"sy0\">=</span> word.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        chars.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> key <span class=\"sy0\">=</span> chars.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>anagrams.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> anagrams.<span class=\"me1\">put</span><span class=\"br0\">(</span>key, mutableListOf<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"sy0\">!!</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>        count <span class=\"sy0\">=</span> Math.<span class=\"me1\">max</span><span class=\"br0\">(</span>count, anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"sy0\">!!</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>        word <span class=\"sy0\">=</span> reader.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    reader.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    anagrams.<span class=\"me1\">values</span><br/>        .<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> count <span class=\"br0\">}</span><br/>        .<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 28, "block": "<pre class=\"text highlighted_source\">local(<br/>\tanagrams\t= map,<br/>\twords\t\t= include_url('http://www.puzzlers.org/pub/wordlists/unixdict.txt')-&gt;split('\\n'),<br/>\tkey,<br/>\tmax\t\t= 0,<br/>\tfindings\t= array<br/>)<br/>\u00a0<br/>with word in #words do {<br/>\t#key = #word -&gt; split('') -&gt; sort&amp; -&gt; join('')<br/>\tif(not(#anagrams &gt;&gt; #key)) =&gt; {<br/>\t\t#anagrams -&gt; insert(#key = array)<br/>\t}<br/>\t#anagrams -&gt; find(#key) -&gt; insert(#word)<br/>}<br/>with ana in #anagrams<br/>let ana_size = #ana -&gt; size<br/>do {<br/>\tif(#ana_size &gt; #max) =&gt; {<br/>\t\t#findings = array(#ana -&gt; join(', '))<br/>\t\t#max = #ana_size<br/>\telse(#ana_size == #max)<br/>\t\t#findings -&gt; insert(#ana -&gt; join(', '))<br/>\t}<br/>}<br/>\u00a0<br/>#findings -&gt; join('&lt;br /&gt;\\n')<br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 71, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">' count the word list</span><br/><span class=\"kw1\">open</span> <span class=\"st0\">\"unixdict.txt\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">while</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span><span class=\"kw2\">eof</span><span class=\"br0\">(</span><span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">line</span> <span class=\"kw1\">input</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>null$<br/>    numWords<span class=\"sy0\">=</span>numWords<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">'import to an array appending sorted letter set</span><br/><span class=\"kw1\">open</span> <span class=\"st0\">\"unixdict.txt\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">dim</span> wordList$<span class=\"br0\">(</span>numWords<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">dim</span> chrSort$<span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span><br/>wordNum<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">while</span> wordNum<span class=\"sy0\">&lt;</span>numWords<br/>    <span class=\"kw1\">line</span> <span class=\"kw1\">input</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>actualWord$<br/>    wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>actualWord$<br/>    wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>sorted$<span class=\"br0\">(</span>actualWord$<span class=\"br0\">)</span><br/>    wordNum<span class=\"sy0\">=</span>wordNum<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">wend</span><br/>\u00a0<br/><span class=\"co1\">'sort on letter set</span><br/><span class=\"kw1\">sort</span> wordList$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>numWords<span class=\"sy0\">,</span><span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"co1\">'count and store number of anagrams found</span><br/>wordNum<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>startPosition<span class=\"sy0\">=</span>wordNum<br/>numAnagrams<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>currentChrSet$<span class=\"sy0\">=</span>wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> wordNum <span class=\"sy0\">&lt;</span> numWords<br/>    <span class=\"kw1\">while</span> currentChrSet$<span class=\"sy0\">=</span>wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        numAnagrams<span class=\"sy0\">=</span>numAnagrams<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        wordNum<span class=\"sy0\">=</span>wordNum<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">wend</span><br/>    <span class=\"kw1\">for</span> n<span class=\"sy0\">=</span> startPosition <span class=\"kw1\">to</span> startPosition<span class=\"sy0\">+</span>numAnagrams<br/>        wordList$<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">right$</span><span class=\"br0\">(</span><span class=\"st0\">\"0000\"</span><span class=\"sy0\">+</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span>numAnagrams<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>wordList$<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    startPosition<span class=\"sy0\">=</span>wordNum<br/>    numAnagrams<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    currentChrSet$<span class=\"sy0\">=</span>wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">wend</span><br/>\u00a0<br/><span class=\"co1\">'sort on number of anagrams+letter set</span><br/><span class=\"kw1\">sort</span> wordList$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>numWords<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"co1\">'display the top anagram sets found</span><br/>wordNum<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">while</span> wordNum<span class=\"sy0\">&lt;</span><span class=\"nu0\">150</span><br/>    currentChrSet$<span class=\"sy0\">=</span>wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Anagram set\"</span>;<br/>    <span class=\"kw1\">while</span> currentChrSet$<span class=\"sy0\">=</span>wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"\u00a0: \"</span>;wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>        wordNum<span class=\"sy0\">=</span>wordNum<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">wend</span><br/>    <span class=\"kw1\">print</span><br/>    currentChrSet$<span class=\"sy0\">=</span>wordList$<span class=\"br0\">(</span>wordNum<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">wend</span><br/>\u00a0<br/><span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> sorted$<span class=\"br0\">(</span>w$<span class=\"br0\">)</span><br/>    nchr<span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>w$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> chr <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nchr<br/>        chrSort$<span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>w$<span class=\"sy0\">,</span>chr<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">sort</span> chrSort$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>nchr<br/>    sorted$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> chr <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nchr<br/>        sorted$<span class=\"sy0\">=</span>sorted$<span class=\"sy0\">+</span>chrSort$<span class=\"br0\">(</span>chr<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "LiveCode", "loc": 39, "block": "<pre class=\"text highlighted_source\">on mouseUp<br/>   put mostCommonAnagrams(url \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>end mouseUp<br/>\u00a0<br/>function mostCommonAnagrams X<br/>   put 0 into maxCount<br/>   repeat for each word W in X<br/>      get sortChars(W)<br/>      put W &amp; comma after A[it]<br/>      add 1 to C[it]<br/>      if C[it] &gt;= maxCount then<br/>         if C[it] &gt; maxCount then<br/>            put C[it] into maxCount<br/>            put char 1 to -2 of A[it] into winnerList<br/>         else<br/>            put cr &amp; char 1 to -2 of A[it] after winnerList<br/>         end if<br/>      end if<br/>   end repeat<br/>   return winnerList<br/>end mostCommonAnagrams<br/>\u00a0<br/>function sortChars X<br/>   get charsToItems(X)<br/>   sort items of it<br/>   return itemsToChars(it)<br/>end sortChars<br/>\u00a0<br/>function charsToItems X<br/>   repeat for each char C in X<br/>      put C &amp; comma after R<br/>   end repeat<br/>   return char 1 to -2 of R<br/>end charsToItems<br/>\u00a0<br/>function itemsToChars X<br/>   replace comma with empty in X<br/>   return X<br/>end itemsToChars</pre>"}, {"lang": "Lua", "loc": 24, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> <span class=\"kw3\">sort</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> bytes <span class=\"sy0\">=</span> <span class=\"br0\">{</span>word<span class=\"sy0\">:</span>byte<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">string.char</span><span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Read in and organize the words.</span><br/><span class=\"co1\">-- word_sets[&lt;alphabetized_letter_list&gt;] = {&lt;words_with_those_letters&gt;}</span><br/><span class=\"kw1\">local</span> word_sets <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">local</span> max_size <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> word <span class=\"kw2\">in</span> <span class=\"kw3\">io.lines</span><span class=\"br0\">(</span><span class=\"st0\">'unixdict.txt'</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">local</span> key <span class=\"sy0\">=</span> <span class=\"kw3\">sort</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> word_sets<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span> word_sets<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>word_sets<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"sy0\">,</span> word<span class=\"br0\">)</span><br/>  max_size <span class=\"sy0\">=</span> <span class=\"kw3\">math.max</span><span class=\"br0\">(</span>max_size<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>word_sets<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Print out the answer sets.</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> word_set <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>word_sets<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span> <span class=\"sy0\">#</span>word_set <span class=\"sy0\">==</span> max_size <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> word <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>word_set<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>word <span class=\"sy0\">..</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>  <span class=\"co1\">-- Finish with a newline.</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M4", "loc": 46, "block": "<pre class=\"text highlighted_source\">divert(-1)<br/>changequote(`[',`]')<br/>define([for],<br/>   [ifelse($#,0,[[$0]],<br/>   [ifelse(eval($2&lt;=$3),1,<br/>   [pushdef([$1],$2)$4[]popdef([$1])$0([$1],incr($2),$3,[$4])])])])<br/>define([_bar],include(t.txt))<br/>define([eachlineA],<br/>   [ifelse(eval($2&gt;0),1,<br/>      [$3(substr([$1],0,$2))[]eachline(substr([$1],incr($2)),[$3])])])<br/>define([eachline],[eachlineA([$1],index($1,[<br/>]),[$2])])<br/>define([removefirst],<br/>   [substr([$1],0,$2)[]substr([$1],incr($2))])<br/>define([checkfirst],<br/>   [ifelse(eval(index([$2],substr([$1],0,1))&lt;0),1,<br/>      0,<br/>      [ispermutation(substr([$1],1),<br/>            removefirst([$2],index([$2],substr([$1],0,1))))])])<br/>define([ispermutation],<br/>   [ifelse([$1],[$2],1,<br/>      eval(len([$1])!=len([$2])),1,0,<br/>      len([$1]),0,0,<br/>      [checkfirst([$1],[$2])])])<br/>define([_set],[define($1&lt;$2&gt;,$3)])<br/>define([_get],[defn([$1&lt;$2&gt;])])<br/>define([_max],1)<br/>define([_n],0)<br/>define([matchj],<br/>   [_set([count],$2,incr(_get([count],$2)))[]ifelse(eval(_get([count],$2)&gt;_max),<br/>         1,[define([_max],incr(_max))])[]_set([list],$2,[_get([list],$2) $1])])<br/>define([checkwordj],<br/>   [ifelse(ispermutation([$1],_get([word],$2)),1,[matchj([$1],$2)],<br/>         [addwordj([$1],incr($2))])])<br/>define([_append],<br/>   [_set([word],_n,[$1])[]_set([count],_n,1)[]_set([list],_n,<br/>         [$1 ])[]define([_n],incr(_n))])<br/>define([addwordj],<br/>   [ifelse($2,_n,[_append([$1])],[checkwordj([$1],$2)])])<br/>define([addword],<br/>   [addwordj([$1],0)])<br/>divert<br/>eachline(_bar,[addword])<br/>_max<br/>for([x],1,_n,[ifelse(_get([count],x),_max,[_get([list],x)<br/>])])</pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>words\u00a0:= HTTP:-Get( \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\" )[2]: # ignore errors<br/>use StringTools, ListTools in<br/>  T\u00a0:= Classify( Sort, map( Trim, Split( words ) ) )<br/>end use:<br/>L\u00a0:= convert( T, 'list' ):<br/>m\u00a0:= max( map( nops, L ) ); # what is the largest set?<br/>A\u00a0:= select( s -&gt; evalb( nops( s ) = m ), L ); # get the maximal sets of anagrams<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">list=Import[\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\",\"Lines\"];<br/>text={#,<a class=\"__cf_email__\" data-cfemail=\"f5a681879c9b92bf9a9c9bb5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@Sort[Characters[#]]}&amp;/@list;<br/>text=SortBy[text,#[[2]]&amp;];<br/>splits=Split[text,#1[[2]]==#2[[2]]&amp;][[All,All,1]];<br/>maxlen=Max[Length/@splits];<br/>Select[splits,Length[#]==maxlen&amp;]</pre>"}, {"lang": "Maxima", "loc": 39, "block": "<pre class=\"text highlighted_source\">read_file(name)\u00a0:= block([file, s, L], file: openr(name), L: [],<br/>while stringp(s: readline(file)) do L: cons(s, L), close(file), L)$<br/>\u00a0<br/>u: read_file(\"C:/my/mxm/unixdict.txt\")$<br/>\u00a0<br/>v: map(lambda([s], [ssort(s), s]), u)$<br/>\u00a0<br/>w: sort(v, lambda([x, y], orderlessp(x[1], y[1])))$<br/>\u00a0<br/>ana(L)\u00a0:= block([m, n, p, r, u, v, w],<br/>L: endcons([\"\", \"\"], L),<br/>n: length(L),<br/>r: \"\",<br/>m: 0,<br/>v: [ ],<br/>w: [ ],<br/>for i from 1 thru n do (<br/>   u: L[i],<br/>   if r = u[1] then (<br/>      w: cons(u[2], w)<br/>   ) else (<br/>      p: length(w),<br/>      if p &gt;= m then (<br/>         if p &gt; m then (m: p, v: []),<br/>         v: cons(w, v)<br/>      ),<br/>      w: [u[2]],<br/>      r: u[1]<br/>   )<br/>),<br/>v)$<br/>\u00a0<br/>ana(w);<br/>/* [[\"evil\", \"levi\", \"live\", \"veil\", \"vile\"],<br/>    [\"elan\", \"lane\", \"lean\", \"lena\", \"neal\"],<br/>    [\"alger\", \"glare\", \"lager\", \"large\", \"regal\"],<br/>    [\"angel\", \"angle\", \"galen\", \"glean\", \"lange\"],<br/>    [\"caret\", \"carte\", \"cater\", \"crate\", \"trace\"],<br/>    [\"abel\", \"able\", \"bale\", \"bela\", \"elba\"]] */</pre>"}, {"lang": "MUMPS", "loc": 35, "block": "<pre class=\"text highlighted_source\">Anagrams\tNew ii,file,longest,most,sorted,word<br/>\tSet file=\"unixdict.txt\"<br/>\tOpen file:\"r\" Use file<br/>\tFor  Quit:$ZEOF  DO<br/>\t. New char,sort<br/>\t. Read word Quit:word=\"\"<br/>\t. For ii=1:1:$Length(word) Do<br/>\t. . Set char=$ASCII(word,ii)<br/>\t. . If char&gt;64,char&lt;91 Set char=char+32<br/>\t. . Set sort(char)=$Get(sort(char))+1<br/>\t. . Quit<br/>\t. Set (sorted,char)=\"\" For  Set char=$Order(sort(char)) Quit:char=\"\"  Do<br/>\t. . For ii=1:1:sort(char) Set sorted=sorted_$Char(char)<br/>\t. . Quit<br/>\t. Set table(sorted,word)=1<br/>\t. Quit<br/>\tClose file<br/>\tSet sorted=\"\" For  Set sorted=$Order(table(sorted)) Quit:sorted=\"\"  Do<br/>\t. Set ii=0,word=\"\" For  Set word=$Order(table(sorted,word)) Quit:word=\"\"  Set ii=ii+1<br/>\t. Quit:ii&lt;2<br/>\t. Set most(ii,sorted)=1<br/>\t. Quit<br/>\tWrite\u00a0!,\"The anagrams with the most variations:\"<br/>\tSet ii=$Order(most(\"\"),-1)<br/>\tSet sorted=\"\" For  Set sorted=$Order(most(ii,sorted)) Quit:sorted=\"\"  Do<br/>\t. Write\u00a0! Set word=\"\" For  Set word=$Order(table(sorted,word)) Quit:word=\"\"  Write \"  \",word<br/>\t. Quit<br/>\tWrite\u00a0!,\"The longest anagrams:\"<br/>\tSet ii=$Order(longest(\"\"),-1)<br/>\tSet sorted=\"\" For  Set sorted=$Order(longest(ii,sorted)) Quit:sorted=\"\"  Do<br/>\t. Write\u00a0! Set word=\"\" For  Set word=$Order(table(sorted,word)) Quit:word=\"\"  Write \"  \",word<br/>\t. Quit<br/>\tQuit<br/>\u00a0<br/>Do Anagrams</pre>"}, {"lang": "NetRexx", "loc": 61, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">class</span> RAnagramsV01 <span class=\"kw2\">public</span><br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">signals</span> MalformedURLException, IOException<br/>    <span class=\"kw1\">parse</span> arg localFile .<br/>    <span class=\"me0\">isr</span> = Reader<br/>    <span class=\"kw1\">if</span> localFile = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      durl = URL<span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span><br/>      dictFrom = durl.<span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      isr = InputStreamReader<span class=\"br0\">(</span>durl.<span class=\"me0\">openStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>      dictFrom = localFile<br/>      isr = FileReader<span class=\"br0\">(</span>localFile<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Searching'</span> dictFrom <span class=\"st0\">'for anagrams'</span><br/>    dictionaryReader = BufferedReader<span class=\"br0\">(</span>isr<span class=\"br0\">)</span><br/>\u00a0<br/>    anagrams = Map HashMap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    aWord = String<br/>    count = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> w_ forever<br/>      aWord = dictionaryReader.<span class=\"me0\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> aWord = null <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> w_<br/>      chars = aWord.<span class=\"me0\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      Arrays.<span class=\"me0\">sort</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><br/>      key = String<span class=\"br0\">(</span>chars<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">\\</span>anagrams.<span class=\"me0\">containsKey</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> <br/>        anagrams.<span class=\"me0\">put</span><span class=\"br0\">(</span>key, ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"br0\">(</span>ArrayList anagrams.<span class=\"me0\">get</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">add</span><span class=\"br0\">(</span>Object aWord<span class=\"br0\">)</span><br/>      count = Math.<span class=\"kw6\">max</span><span class=\"br0\">(</span>count, <span class=\"br0\">(</span>ArrayList anagrams.<span class=\"me0\">get</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> w_<br/>    dictionaryReader.<span class=\"me0\">close</span><br/>\u00a0<br/>    ani = anagrams.<span class=\"me0\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">iterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> a_ while ani.<span class=\"me0\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      ana = ani.<span class=\"me0\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ArrayList ana<span class=\"br0\">)</span>.<span class=\"me0\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= count <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">say</span> ana<br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">end</span> a_<br/>\u00a0<br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>    arg = Rexx<span class=\"br0\">(</span>args<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Do</span><br/>      ra = RAnagramsV01<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      ra.<span class=\"me0\">runSample</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>    <span class=\"kw3\">Catch</span> ex = Exception<br/>      ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">End</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import tables, strutils, algorithm<br/>\u00a0<br/>proc main() =<br/>    var <br/>        count    = 0<br/>        anagrams = initTable[string, seq[string]]()<br/>\u00a0<br/>    for word in \"unixdict.txt\".lines():<br/>        var key = word<br/>        key.sort(cmp[char])<br/>        anagrams.mgetOrPut(key, newSeq[string]()).add(word)<br/>        count = max(count, anagrams[key].len)<br/>\u00a0<br/>    for _, v in anagrams:<br/>        if v.len == count:<br/>            v.join(\" \").echo<br/>\u00a0<br/>main()<br/>\u00a0</pre>"}, {"lang": "Oberon-2", "loc": 158, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Anagrams;<br/><span class=\"kw1\">IMPORT</span> Files<span class=\"sy0\">,</span>Out<span class=\"sy0\">,</span>In<span class=\"sy0\">,</span>Strings;<br/><span class=\"kw1\">CONST</span><br/>\tMAXPOOLSZ <span class=\"sy0\">=</span> <span class=\"nu0\">1024</span>;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>\tString <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">80</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/>\tNode <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> NodeDesc;<br/>\tNodeDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span>;<br/>\t\tcount<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tword<span class=\"sy0\">:</span> String;<br/>\t\tdesc<span class=\"sy0\">:</span> Node;<br/>\t\tnext<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\tPool <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> PoolDesc;<br/>\tPoolDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\tcapacity<span class=\"sy0\">,</span>max<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\twords<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> Node;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> InitNode<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Node<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tn^.<span class=\"me1\">count</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\tn^.<span class=\"me1\">word</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span>;<br/>\t\tn^.<span class=\"me1\">desc</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\tn^.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t<span class=\"kw1\">END</span> InitNode;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> Index<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;cap<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">,</span>sum<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span>  Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> sum <span class=\"kw1\">MOD</span> cap<br/>\t<span class=\"kw1\">END</span> Index;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> ISort<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>; <br/>\t<span class=\"kw1\">VAR</span> <br/>        i<span class=\"sy0\">,</span> j<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; <br/>        t<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>; <br/>\t<span class=\"kw1\">BEGIN</span> <br/>        <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> <br/>\t\t\tj <span class=\"sy0\">:=</span> i; <br/>\t\t\tt <span class=\"sy0\">:=</span> s<span class=\"br0\">[</span>j<span class=\"br0\">]</span>; <br/>\t\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>j &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s<span class=\"br0\">[</span>j <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> &gt; t<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <br/>\t\t\t\t\ts<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> s<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>; <br/>\t\t\t\t\t<span class=\"kw3\">DEC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <br/>\t\t\t<span class=\"kw1\">END</span>; <br/>\t\t\ts<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> t <br/>        <span class=\"kw1\">END</span> <br/>\t<span class=\"kw1\">END</span> ISort; <br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> SameLetters<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>; <br/>\t<span class=\"kw1\">BEGIN</span> <br/>        ISort<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;ISort<span class=\"br0\">(</span>y<span class=\"br0\">)</span>; <br/>        <span class=\"kw1\">RETURN</span> <span class=\"br0\">(</span>Strings.<span class=\"me1\">Compare</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span> SameLetters; <br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> InitPool<span class=\"br0\">(</span>p<span class=\"sy0\">:</span>Pool<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tInitPoolWith<span class=\"br0\">(</span>p<span class=\"sy0\">,</span>MAXPOOLSZ<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> InitPool;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> InitPoolWith<span class=\"br0\">(</span>p<span class=\"sy0\">:</span>Pool;cap<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tp^.<span class=\"me1\">capacity</span> <span class=\"sy0\">:=</span> cap;<br/>\t\tp^.<span class=\"me1\">max</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>p^.<span class=\"me1\">words</span><span class=\"sy0\">,</span>cap<span class=\"br0\">)</span>;<br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> i &lt; p^.<span class=\"me1\">capacity</span> <span class=\"kw1\">DO</span><br/>\t\t\tp^.<span class=\"me1\">words</span>^<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">END</span> InitPoolWith;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Pool<span class=\"br0\">)</span> Add<span class=\"br0\">(</span>w<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tidx<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\titer<span class=\"sy0\">,</span>n<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tidx <span class=\"sy0\">:=</span> Index<span class=\"br0\">(</span>w<span class=\"sy0\">,</span>p^.<span class=\"me1\">capacity</span><span class=\"br0\">)</span>;<br/>\t\titer <span class=\"sy0\">:=</span> p^.<span class=\"me1\">words</span>^<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>;<br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;InitNode<span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<span class=\"kw3\">COPY</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span>n^.<span class=\"me1\">word</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>iter <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">IF</span> SameLetters<span class=\"br0\">(</span>w<span class=\"sy0\">,</span>iter^.<span class=\"me1\">word</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>iter^.<span class=\"me1\">count</span><span class=\"br0\">)</span>;<br/>\t\t\t\t<span class=\"kw1\">IF</span> iter^.<span class=\"me1\">count</span> &gt; p^.<span class=\"me1\">max</span> <span class=\"kw1\">THEN</span> p^.<span class=\"me1\">max</span> <span class=\"sy0\">:=</span> iter^.<span class=\"me1\">count</span> <span class=\"kw1\">END</span>;<br/>\t\t\t\tn^.<span class=\"me1\">desc</span> <span class=\"sy0\">:=</span> iter^.<span class=\"me1\">desc</span>;<br/>\t\t\t\titer^.<span class=\"me1\">desc</span> <span class=\"sy0\">:=</span> n;<br/>\t\t\t\t<span class=\"kw1\">RETURN</span><br/>\t\t\t<span class=\"kw1\">END</span>;<br/>\t\t\titer <span class=\"sy0\">:=</span> iter^.<span class=\"me1\">next</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span>iter <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span>;<br/>\t\tn^.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> p^.<span class=\"me1\">words</span>^<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>;p^.<span class=\"me1\">words</span>^<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> n<br/>\t<span class=\"kw1\">END</span> Add;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> ShowAnagrams<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> Node<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\titer<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\titer <span class=\"sy0\">:=</span> l;<br/>\t\t<span class=\"kw1\">WHILE</span> iter <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">DO</span><br/>\t\t\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span>iter^.<span class=\"me1\">word</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>\t\t\titer <span class=\"sy0\">:=</span> iter^.<span class=\"me1\">desc</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tOut.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span> ShowAnagrams;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Pool<span class=\"br0\">)</span> ShowMax<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\titer<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>p^.<span class=\"me1\">words</span>^<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">IF</span> p^.<span class=\"me1\">words</span>^<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\titer <span class=\"sy0\">:=</span> p^.<span class=\"me1\">words</span>^<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t\t\t\t<span class=\"kw1\">WHILE</span> iter <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">DO</span><br/>\t\t\t\t\t<span class=\"kw1\">IF</span> iter^.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> p^.<span class=\"me1\">max</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\t\t\tShowAnagrams<span class=\"br0\">(</span>iter<span class=\"br0\">)</span>; <br/>\t\t\t\t\t<span class=\"kw1\">END</span>;<br/>\t\t\t\t\titer <span class=\"sy0\">:=</span> iter^.<span class=\"me1\">next</span><br/>\t\t\t\t<span class=\"kw1\">END</span><br/>\t\t\t<span class=\"kw1\">END</span><br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span> ShowMax;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> DoProcess<span class=\"br0\">(</span>fnm<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tstdinBck<span class=\"sy0\">,</span>istream<span class=\"sy0\">:</span> Files.<span class=\"me1\">File</span>;<br/>\t\tline<span class=\"sy0\">:</span> String;<br/>\t\tp<span class=\"sy0\">:</span> Pool;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tistream <span class=\"sy0\">:=</span> Files.<span class=\"me1\">Open</span><span class=\"br0\">(</span>fnm<span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span>;<br/>\t\tstdinBck <span class=\"sy0\">:=</span> Files.<span class=\"me1\">stdin</span>;<br/>\t\tFiles.<span class=\"me1\">stdin</span> <span class=\"sy0\">:=</span> istream;<br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;InitPool<span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> In.<span class=\"me1\">Done</span> <span class=\"kw1\">DO</span><br/>\t\t\tIn.<span class=\"me1\">Line</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span>;<br/>\t\t\tp.<span class=\"me1\">Add</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tFiles.<span class=\"me1\">stdin</span> <span class=\"sy0\">:=</span> stdinBck;<br/>\t\tFiles.<span class=\"me1\">Close</span><span class=\"br0\">(</span>istream<span class=\"br0\">)</span>;<br/>\t\tp^.<span class=\"me1\">ShowMax</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; <br/>\t<span class=\"kw1\">END</span> DoProcess;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\tDoProcess<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Anagrams.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 41, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> HTTP<span class=\"sy0\">;</span><br/><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Anagrams <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    lines <span class=\"sy0\">:=</span> HttpClient<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    anagrams <span class=\"sy0\">:=</span> StringMap<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>lines<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      line <span class=\"sy0\">:=</span> lines<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">String</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      words <span class=\"sy0\">:=</span> line<span class=\"sy0\">-&gt;</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> words<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        word <span class=\"sy0\">:=</span> words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        key <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>word<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        list <span class=\"sy0\">:=</span> anagrams<span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>Vector<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>list <span class=\"sy0\">=</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          list <span class=\"sy0\">:=</span> Vector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          anagrams<span class=\"sy0\">-&gt;</span><span class=\"me1\">Insert</span><span class=\"br0\">(</span>key<span class=\"sy0\">,</span> list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        list<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        count <span class=\"sy0\">:=</span> count<span class=\"sy0\">-&gt;</span><span class=\"me1\">Max</span><span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      lists <span class=\"sy0\">:=</span> anagrams<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetValues</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> lists<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        list <span class=\"sy0\">:=</span> lists<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>Vector<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          '<span class=\"br0\">[</span>'<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>          <span class=\"kw1\">each</span><span class=\"br0\">(</span>j <span class=\"sy0\">:</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            list<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">String</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> list<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              '<span class=\"sy0\">,</span>'<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>          '<span class=\"br0\">]</span>'<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 33, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> explode str <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length str <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    l <span class=\"sy0\">:=</span> str<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">::</span> <span class=\"sy0\">!</span>l<br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">!</span>l<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> implode li <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length li <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>create n <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> i <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"sy0\">!</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> c<span class=\"sy0\">;</span> <span class=\"kw1\">incr</span> i<span class=\"br0\">)</span> li<span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> h <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">3571</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> <span class=\"st0\">\"unixdict.txt\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">try</span> <span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> w <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> ic <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> k <span class=\"sy0\">=</span> implode <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span>explode w<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find h k<br/>      <span class=\"kw1\">with</span> Not_found <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <br/>    <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace h k <span class=\"br0\">(</span>w<span class=\"sy0\">::</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span> <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>fold <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ lw n <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> n <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length lw<span class=\"br0\">)</span><span class=\"br0\">)</span> h <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ lw <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length lw <span class=\"sy0\">&gt;=</span> n <span class=\"kw1\">then</span><br/>    <span class=\"br0\">(</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%s\"</span><span class=\"br0\">)</span> lw<span class=\"sy0\">;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> h</pre>"}, {"lang": "Oforth", "loc": 11, "block": "<pre class=\"text highlighted_source\">import: mapping<br/>import: collect<br/>import: quicksort<br/>\u00a0<br/>: anagrams<br/>| m |<br/>   \"unixdict.txt\" File new groupBy( #sort )<br/>   dup sortBy( #[ second size] ) last second size -&gt;m<br/>   filter( #[ second size m == ] )<br/>   apply ( #[ second .cr ] )<br/>;</pre>"}, {"lang": "ooRexx", "loc": 37, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"co1\">-- This assumes you've already downloaded the following file and placed it</span><br/><span class=\"co1\">-- in the current directory: http://www.puzzlers.org/pub/wordlists/unixdict.txt</span><br/>\u00a0<br/><span class=\"co1\">-- There are several different ways of reading the file.  I chose the</span><br/><span class=\"co1\">-- supplier method just because I haven't used it yet in any other examples.</span><br/><span class=\"kw2\">source</span> = <span class=\"sy0\">.</span><span class=\"kw6\">stream</span>~new<span class=\"br0\">(</span><span class=\"st0\">'unixdict.txt'</span><span class=\"br0\">)</span>~supplier<br/><span class=\"co1\">-- this holds our mappings of the anagrams</span><br/>anagrams = <span class=\"sy0\">.</span><span class=\"kw6\">directory</span>~new<br/>count = <span class=\"nu0\">0</span>    <span class=\"co1\">-- this is used to keep track of the maximums</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> <span class=\"kw2\">while</span> <span class=\"kw2\">source</span>~available<br/>    <span class=\"kw6\">word</span> = <span class=\"kw2\">source</span>~item<br/>    <span class=\"co1\">-- this produces a string consisting of the characters in sorted order</span><br/>    <span class=\"co1\">-- Note: the ~~ used to invoke sort makes that message return value be</span><br/>    <span class=\"co1\">-- the target array.  The sort method does not normally have a return value.</span><br/>    key = <span class=\"kw6\">word</span>~makearray<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>~~sort~tostring<span class=\"br0\">(</span><span class=\"st0\">\"l\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- make sure we have an accumulator collection for this key</span><br/>    list = anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> list == <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>       list = <span class=\"sy0\">.</span>array~new<br/>       anagrams<span class=\"br0\">[</span>key<span class=\"br0\">]</span> = list<br/>    <span class=\"kw3\">end</span><br/>    <span class=\"co1\">-- this word is now associate with this key</span><br/>    list~append<span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">-- and see if this is a new highest count</span><br/>    count = <span class=\"kw6\">max</span><span class=\"br0\">(</span>count, list~items<span class=\"br0\">)</span><br/>    <span class=\"kw2\">source</span>~next<br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> letters <span class=\"kw2\">over</span> anagrams<br/>    list = anagrams<span class=\"br0\">[</span>letters<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> list~items <span class=\"sy0\">&gt;</span>= count <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">say</span> letters<span class=\"st0\">\":\"</span> list~makestring<span class=\"br0\">(</span><span class=\"st0\">\"l\"</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 29, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% Helper function</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ReadLines</span> Filename<span class=\"br0\">}</span><br/>     File = <span class=\"br0\">{</span>New <span class=\"kw1\">class</span> <span class=\"re2\">$</span> <span class=\"kw1\">from</span> Open<span class=\"sy0\">.</span>file Open<span class=\"sy0\">.</span>text <span class=\"kw1\">end</span> init<span class=\"br0\">(</span>name:Filename<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span> collect:C break:B <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">case</span> <span class=\"br0\">{</span>File getS<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">of</span> <span class=\"kw1\">false</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>File close<span class=\"br0\">}</span> <span class=\"br0\">{</span>B<span class=\"br0\">}</span><br/>\t<span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> Line <span class=\"kw1\">then</span> <span class=\"br0\">{</span>C Line<span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Groups anagrams by using a mutable dictionary</span><br/>  <span class=\"co1\">%% with sorted words as keys</span><br/>  WordDict = <span class=\"br0\">{</span>Dictionary<span class=\"sy0\">.</span>new<span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> Word <span class=\"kw1\">in</span> <span class=\"br0\">{</span>ReadLines <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">}</span>  <span class=\"kw1\">do</span><br/>     Keyword = <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toAtom <span class=\"br0\">{</span>Sort Word Value<span class=\"sy0\">.</span><span class=\"st0\">'&lt;'</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     WordDict<span class=\"sy0\">.</span>Keyword <span class=\"sy0\">:=</span> Word<span class=\"sy0\">|</span><span class=\"br0\">{</span>CondSelect WordDict Keyword nil<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>  Sets = <span class=\"br0\">{</span>Dictionary<span class=\"sy0\">.</span>items WordDict<span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% Filter such that only the largest sets remain</span><br/>  MaxSetSize = <span class=\"br0\">{</span>FoldL <span class=\"br0\">{</span>Map Sets Length<span class=\"br0\">}</span> Max 0<span class=\"br0\">}</span><br/>  LargestSets = <span class=\"br0\">{</span>Filter Sets <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> S<span class=\"br0\">}</span> <span class=\"br0\">{</span>Length S<span class=\"br0\">}</span> <span class=\"sy0\">==</span> MaxSetSize <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"co1\">%% Display result (make sure strings are shown as string, not as number lists)</span><br/>  <span class=\"br0\">{</span>Inspector<span class=\"sy0\">.</span>object configureEntry<span class=\"br0\">(</span>widgetShowStrings <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Inspect LargestSets<span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 88, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> Anagrams<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// assumes a local file</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  classes<span class=\"sy1\">,</span> math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> maxCount<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  sortedString<span class=\"sy1\">:</span>      <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  WordList<span class=\"sy1\">:</span>          TStringList<span class=\"sy1\">;</span><br/>  SortedWordList<span class=\"sy1\">:</span>    TStringList<span class=\"sy1\">;</span><br/>  AnagramList<span class=\"sy1\">:</span>       <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> TStringlist<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  WordList <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  WordList<span class=\"sy1\">.</span><span class=\"me1\">LoadFromFile</span><span class=\"br0\">(</span><span class=\"st0\">'unixdict.txt'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> WordList<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    setLength<span class=\"br0\">(</span>sortedString<span class=\"sy1\">,</span>Length<span class=\"br0\">(</span>WordList<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    sortedString<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> WordList<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// sorted assign</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> j &lt;<span class=\"sy3\">=</span>  Length<span class=\"br0\">(</span>WordList<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>WordList<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> &lt; sortedString<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>k &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        sortedString<span class=\"br0\">[</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sortedString<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> k <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      sortedString<span class=\"br0\">[</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  WordList<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// create the stringlists of the sorted letters and </span><br/>    <span class=\"co1\">// the list of the original words</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> assigned<span class=\"br0\">(</span>SortedWordList<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      SortedWordList <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>      SortedWordList<span class=\"sy1\">.</span><span class=\"me1\">append</span><span class=\"br0\">(</span>sortedString<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      setlength<span class=\"br0\">(</span>AnagramList<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      AnagramList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>      AnagramList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">append</span><span class=\"br0\">(</span>WordList<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">begin</span><br/>      j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">while</span> sortedString &lt;&gt; SortedWordList<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        inc<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> j <span class=\"sy3\">=</span> <span class=\"br0\">(</span>SortedWordList<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw1\">begin</span><br/>          SortedWordList<span class=\"sy1\">.</span><span class=\"me1\">append</span><span class=\"br0\">(</span>sortedString<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          setlength<span class=\"br0\">(</span>AnagramList<span class=\"sy1\">,</span>length<span class=\"br0\">(</span>AnagramList<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          AnagramList<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/> \t  <span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span>  <br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      AnagramList<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">append</span><span class=\"br0\">(</span>WordList<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  maxCount <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> length<span class=\"br0\">(</span>AnagramList<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    maxCount <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max<span class=\"br0\">(</span>maxCount<span class=\"sy1\">,</span> AnagramList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// create output</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'The largest sets of words have '</span><span class=\"sy1\">,</span> maxCount<span class=\"sy1\">,</span> <span class=\"st0\">' members:'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> length<span class=\"br0\">(</span>AnagramList<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> AnagramList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">=</span> maxCount <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'\"'</span><span class=\"sy1\">,</span> SortedWordList<span class=\"sy1\">.</span><span class=\"me1\">strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">'\": '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> AnagramList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>AnagramList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">strings</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>AnagramList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">strings</span><span class=\"br0\">[</span>AnagramList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Cleanup</span><br/>  WordList<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/>  SortedWordList<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> length<span class=\"br0\">(</span>AnagramList<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    AnagramList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 15, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> LWP<span class=\"sy0\">::</span><span class=\"me2\">Simple</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@words</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> get<span class=\"br0\">(</span><span class=\"st_h\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%anagram</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$word</span> <span class=\"br0\">(</span><span class=\"re0\">@words</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$anagram</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//,</span> <span class=\"re0\">$word</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$word</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> max<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%anagram</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$ana</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%anagram</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">@$ana</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$count</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@$ana<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@anagrams</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'unixdict.txt'</span><span class=\"sy0\">.</span><span class=\"me1\">IO</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">.</span><span class=\"kw3\">classify</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"re0\">@anagrams</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"me1\">put</span> <span class=\"kw1\">for</span> <span class=\"re0\">@anagrams</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">elems</span> <span class=\"sy0\">==</span> <span class=\"re0\">$max</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 42, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>integer fn = open(\"unixdict.txt\",\"r\")<br/>sequence words = {}, anagrams = {}, last=\"\", letters<br/>object word<br/>integer maxlen = 1<br/>\u00a0<br/>    while 1 do<br/>        word = trim(gets(fn))<br/>        if atom(word) then exit end if<br/>        if length(word) then<br/>            letters = sort(word)<br/>            words = append(words, {letters, word})<br/>        end if<br/>    end while<br/>    close(fn)<br/>\u00a0<br/>    words = sort(words)<br/>    for i=1 to length(words) do<br/>        {letters,word} = words[i]<br/>        if letters=last then<br/>            anagrams[$] = append(anagrams[$],word)<br/>            if length(anagrams[$])&gt;maxlen then<br/>                maxlen = length(anagrams[$])<br/>            end if<br/>        else<br/>            last = letters<br/>            anagrams = append(anagrams,{word})<br/>        end if<br/>    end for<br/>\u00a0<br/>    puts(1,\"\\nMost anagrams:\\n\")<br/>    for i=1 to length(anagrams) do<br/>        last = anagrams[i]<br/>        if length(last)=maxlen then<br/>            for j=1 to maxlen do<br/>                if j&gt;1 then puts(1,\", \") end if<br/>                puts(1,last[j])<br/>            end for<br/>            puts(1,\"\\n\")<br/>        end if<br/>    end for<br/>\u00a0</pre>"}, {"lang": "PHP", "loc": 13, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$words</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/file_get_contents\"><span class=\"kw3\">file_get_contents</span></a><span class=\"br0\">(</span><span class=\"st_h\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$words</span> <span class=\"kw1\">as</span> <span class=\"re0\">$word</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$chars</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/str_split\"><span class=\"kw3\">str_split</span></a><span class=\"br0\">(</span><span class=\"re0\">$word</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.php.net/sort\"><span class=\"kw3\">sort</span></a><span class=\"br0\">(</span><span class=\"re0\">$chars</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$anagram</span><span class=\"br0\">[</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"re0\">$chars</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$word</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$best</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/max\"><span class=\"kw3\">max</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_map\"><span class=\"kw3\">array_map</span></a><span class=\"br0\">(</span><span class=\"st_h\">'count'</span><span class=\"sy0\">,</span> <span class=\"re0\">$anagram</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$anagram</span> <span class=\"kw1\">as</span> <span class=\"re0\">$ana</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$ana</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"re0\">$best</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span><span class=\"re0\">$ana</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(flip<br/>   (by length sort<br/>      (by '((L) (sort (copy L))) group<br/>         (in \"unixdict.txt\" (make (while (line) (link @)))) ) ) )</pre>"}, {"lang": "PL/I", "loc": 67, "block": "<pre class=\"text highlighted_source\">/* Search a list of words, finding those having the same letters. */<br/>\u00a0<br/>word_test: proc options (main);<br/>   declare words (50000) character (20) varying,<br/>           frequency (50000) fixed binary;<br/>   declare word character (20) varying;<br/>   declare (i, k, wp, most) fixed binary (31);<br/>\u00a0<br/>   on endfile (sysin) go to done;<br/>\u00a0<br/>   words = ''; frequency = 0;<br/>   wp = 0;<br/>   do forever;<br/>      get edit (word) (L);<br/>      call search_word_list (word);<br/>   end;<br/>\u00a0<br/>done:<br/>   put skip list ('There are ' || wp || ' words');<br/>   most = 0;<br/>   /* Determine the word(s) having the greatest number of anagrams. */<br/>   do i = 1 to wp;<br/>      if most &lt; frequency(i) then most = frequency(i);<br/>   end;<br/>   put skip edit ('The following word(s) have ', trim(most), ' anagrams:') (a);<br/>   put skip;<br/>   do i = 1 to wp;<br/>      if most = frequency(i) then put edit (words(i)) (x(1), a);<br/>   end;<br/>\u00a0<br/>search_word_list: procedure (word) options (reorder);<br/>   declare word character (*) varying;<br/>   declare i fixed binary (31);<br/>\u00a0<br/>   do i = 1 to wp;<br/>      if length(words(i)) = length(word) then<br/>         if is_anagram(word, words(i)) then<br/>            do;<br/>               frequency(i) = frequency(i) + 1;<br/>               return;<br/>            end;<br/>   end;<br/>   /* The word does not exist in the list, so add it. */<br/>   if wp &gt;= hbound(words,1) then return;<br/>   wp = wp + 1;<br/>   words(wp) = word;<br/>   frequency(wp) = 1;<br/>   return;<br/>end search_word_list;<br/>\u00a0<br/>/* Returns true if the words are anagrams, otherwise returns false. */<br/>is_anagram: procedure (word1, word2) returns (bit(1)) options (reorder);<br/>   declare (word1, word2) character (*) varying;<br/>   declare tword character (20) varying, c character (1);<br/>   declare (i, j) fixed binary;<br/>\u00a0<br/>   tword = word2;<br/>   do i = 1 to length(word1);<br/>      c = substr(word1, i, 1);<br/>      j = index(tword, c);<br/>      if j = 0 then return ('0'b);<br/>      substr(tword, j, 1) = ' ';<br/>   end;<br/>   return ('1'b);<br/>end is_anagram;<br/>\u00a0<br/>end word_test;</pre>"}, {"lang": "PowerShell", "loc": 13, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> Net.WebClient<br/><span class=\"re0\">$words</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>split <span class=\"br0\">(</span><span class=\"re0\">$c</span>.DownloadString<span class=\"br0\">(</span><span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"re0\">$top_anagrams</span> <span class=\"sy0\">=</span> <span class=\"re0\">$words</span> `<br/>    <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>          <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-PassThru</span> NoteProperty Characters `<br/>                   <span class=\"br0\">(</span><span class=\"sy0\">-</span>join <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Sort-Object</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span> `<br/>    <span class=\"sy0\">|</span> <span class=\"kw1\">Group-Object</span> Characters `<br/>    <span class=\"sy0\">|</span> <span class=\"kw1\">Group-Object</span> Count `<br/>    <span class=\"sy0\">|</span> <span class=\"kw1\">Sort-Object</span> Count `<br/>    <span class=\"sy0\">|</span> <span class=\"kw1\">Select-Object</span> <span class=\"kw5\">-First</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"re0\">$top_anagrams</span>.<span class=\"kw2\">Group</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.<span class=\"kw2\">Group</span> <span class=\"sy0\">-</span>join <span class=\"st0\">', '</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 49, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span> http<span class=\"sy3\">/</span>http_open <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>anagrams<span class=\"sy1\">:-</span><br/>        <span class=\"co1\">% we read the URL of the words</span><br/>\thttp_open<span class=\"br0\">(</span><span class=\"st_h\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"sy4\">,</span>\tIn<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tread_file<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">close</span></a><span class=\"br0\">(</span>In<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% we get a list of pairs key-value where key = a-word value = &lt;list-of-its-codes&gt;</span><br/>        <span class=\"co1\">% this list must be sorted</span><br/>\tmsort<span class=\"br0\">(</span>Out<span class=\"sy4\">,</span> MOut<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% in order to gather values with the same keys</span><br/>\tgroup_pairs_by_key<span class=\"br0\">(</span>MOut<span class=\"sy4\">,</span> GPL<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% we sorted this list in decreasing order of the length of values</span><br/>\tpredsort<span class=\"br0\">(</span>my_compare<span class=\"sy4\">,</span> GPL<span class=\"sy4\">,</span> GPLSort<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% we extract the first 6 items </span><br/>        GPLSort <span class=\"sy6\">=</span> <span class=\"br0\">[</span>_H1<span class=\"sy3\">-</span>T1<span class=\"sy4\">,</span> _H2<span class=\"sy3\">-</span>T2<span class=\"sy4\">,</span> _H3<span class=\"sy3\">-</span>T3<span class=\"sy4\">,</span> _H4<span class=\"sy3\">-</span>T4<span class=\"sy4\">,</span> _H5<span class=\"sy3\">-</span>T5<span class=\"sy4\">,</span> _H6<span class=\"sy3\">-</span>T6 <span class=\"sy5\">|</span> _<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% Tnn are lists of codes (97 for 'a'), we create the strings </span><br/>\tmaplist<span class=\"br0\">(</span>maplist<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_codes</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> <span class=\"br0\">[</span>T1<span class=\"sy4\">,</span> T2<span class=\"sy4\">,</span> T3<span class=\"sy4\">,</span> T4<span class=\"sy4\">,</span> T5<span class=\"sy4\">,</span> T6<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tmaplist<span class=\"br0\">(</span>writeln<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>read_file<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tread_line_to_codes<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> W<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   W <span class=\"sy6\">==</span> end_of_file <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> <br/>               <span class=\"co1\">% the file is read</span><br/>\t       L1 <span class=\"sy6\">=</span> L<br/>\t       <span class=\"sy4\">;</span> <br/>               <span class=\"co1\">% we sort the list of codes of the line</span><br/>\t       msort<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> W1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>               <span class=\"co1\">% to create the key in alphabetic order</span><br/>\t       <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_codes</span></a><span class=\"br0\">(</span>A<span class=\"sy4\">,</span> W1<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\u00a0<br/>               <span class=\"co1\">% and we have the pair Key-Value in the result list</span><br/>\t       read_file<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy3\">-</span>W <span class=\"sy5\">|</span> L<span class=\"br0\">]</span><span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% predicate for sorting list of pairs Key-Values</span><br/><span class=\"co1\">% if the lentgh of values is the same</span><br/><span class=\"co1\">% we sort the keys in alhabetic order</span><br/>my_compare<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> K1<span class=\"sy3\">-</span>V1<span class=\"sy4\">,</span> K2<span class=\"sy3\">-</span>V2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>V1<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>V2<span class=\"sy4\">,</span> L2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   L1 <span class=\"sy6\">&lt;</span> L2 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R <span class=\"sy6\">=</span> <span class=\"sy6\">&gt;</span><span class=\"sy4\">;</span> L1 <span class=\"sy6\">&gt;</span> L2 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R <span class=\"sy6\">=</span> <span class=\"sy6\">&lt;</span><span class=\"sy4\">;</span> compare<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> K1<span class=\"sy4\">,</span> K2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 76, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">InitNetwork</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">;</span><br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s sortWord<span class=\"br0\">(</span>word$<span class=\"br0\">)</span><br/>  <span class=\"kw2\">len</span>.i <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>word$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> CharArray.s <span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">len</span>                                 <span class=\"co1\">; Transfering each single character </span><br/>     CharArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>word$, n, <span class=\"nu0\">1</span><span class=\"br0\">)</span>      <span class=\"co1\">; of the word into an array.</span><br/>  <span class=\"kw1\">Next</span>                               <br/>\u00a0<br/>  <span class=\"kw2\">SortArray</span><span class=\"br0\">(</span>CharArray<span class=\"br0\">(</span><span class=\"br0\">)</span>,#PB_Sort_NoCase <span class=\"br0\">)</span> <span class=\"co1\">; Sorting the array. </span><br/>\u00a0<br/>  word$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <br/>  <span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">len</span>                       <span class=\"co1\">; Writing back each single </span><br/>     word$ <span class=\"sy0\">+</span> CharArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span>             <span class=\"co1\">; character of the array.</span><br/>  <span class=\"kw1\">Next</span> <br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> word$<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;for a faster and more advanced alternative replace the previous procedure with this code</span><br/><span class=\"co1\">; Procedure.s sortWord(word$)\u00a0;returns a string with the letters of the word sorted</span><br/><span class=\"co1\">;   Protected wordLength = Len(word$)</span><br/><span class=\"co1\">;   Protected Dim letters.c(wordLength)</span><br/><span class=\"co1\">;   </span><br/><span class=\"co1\">;   PokeS(@letters(), word$)\u00a0;overwrite the array with the strings contents</span><br/><span class=\"co1\">;   SortArray(letters(), #PB_Sort_Ascending, 0, wordLength - 1)</span><br/><span class=\"co1\">;   ProcedureReturn PeekS(@letters(), wordLength)\u00a0;return the arrays contents</span><br/><span class=\"co1\">; EndProcedure</span><br/>\u00a0<br/>\u00a0<br/>tmpdir$   <span class=\"sy0\">=</span> <span class=\"kw2\">GetTemporaryDirectory</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>filename$ <span class=\"sy0\">=</span> tmpdir$ <span class=\"sy0\">+</span> <span class=\"st0\">\"unixdict.txt\"</span><br/><span class=\"kw1\">Structure</span> ana<br/>   isana.l<br/>   anas.s<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/>NewMap anaMap.ana<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> ReceiveHTTPFile<span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span>, filename$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, filename$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Repeat</span><br/>      word$ <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"co1\">; Reading a word from a file.</span><br/>      key$  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sortWord<span class=\"br0\">(</span>word$<span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"co1\">; Sorting the word and storing in key$.</span><br/>\u00a0<br/>      <span class=\"kw1\">If</span> FindMapElement<span class=\"br0\">(</span>anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span>, key$<span class=\"br0\">)</span>   <span class=\"co1\">; Looking up if a word already had the same key$.</span><br/>\u00a0<br/>                                          <span class=\"co1\">; if yes </span><br/>         anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>anas  <span class=\"sy0\">=</span> anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>anas<span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> word$   <span class=\"co1\">; adding the word</span><br/>         anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>isana <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>   <br/>      <span class=\"kw1\">Else</span><br/>                                          <span class=\"co1\">; if no       </span><br/>         anaMap<span class=\"br0\">(</span>key$<span class=\"br0\">)</span><span class=\"sy0\">\\</span>anas <span class=\"sy0\">=</span> word$        <span class=\"co1\">; applying  a new record</span><br/>         anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>isana <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <br/>       <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>      <span class=\"kw1\">If</span> anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>isana <span class=\"sy0\">&gt;</span> maxAnagrams <span class=\"co1\">;make note of maximum anagram count</span><br/>        maxAnagrams <span class=\"sy0\">=</span> anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>isana<br/>      <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>    <span class=\"kw1\">Until</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">DeleteFile</span><span class=\"br0\">(</span>filename$<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">;----- output -----</span><br/>    <span class=\"kw1\">ForEach</span> anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>isana <span class=\"sy0\">=</span> maxAnagrams      <span class=\"co1\">; only emit elements that have the most hits</span><br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>anaMap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>anas<span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key\"</span><span class=\"br0\">)</span>: <span class=\"kw1\">Repeat</span>: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span>       <br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 12, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">urllib</span>.<span class=\"me1\">request</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/><span class=\"sy0\">&gt;&gt;&gt;</span> words <span class=\"sy0\">=</span> <span class=\"kw3\">urllib</span>.<span class=\"me1\">request</span>.<span class=\"me1\">urlopen</span><span class=\"br0\">(</span><span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"br0\">)</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> anagram <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">)</span> <span class=\"co1\"># map sorted chars to anagrams</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> words:<br/>\tanagram<span class=\"br0\">[</span><span class=\"kw2\">tuple</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span> word <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> count <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>ana<span class=\"br0\">)</span> <span class=\"kw1\">for</span> ana <span class=\"kw1\">in</span> anagram.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> ana <span class=\"kw1\">in</span> anagram.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>ana<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> count:<br/>\t\t<span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>x.<span class=\"me1\">decode</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> ana<span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "QB64", "loc": 151, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$CHECKING:OFF<br/>' Warning: Keep the above line commented out until you know your newly edited code works.<br/>'          You can NOT stop a program in mid run (using top right x button) with checkng off.<br/>'<br/>_TITLE \"Rosetta Code Anagrams: mod #7 Best times yet w/o memory techniques by bplus 2017-12-12\"<br/>' This program now below .4 secs for average time to do 100 loops compared to 92 secs for 1<br/>' loop on my \"dinosaur\" when I first coded a successful run.<br/>'<br/>' Steve McNeil at QB64.net has +7000 loops per sec on his machine with help of using<br/>' memory techniques.  see page 3 @  http://www.qb64.net/forum/index.php?topic=14622.30<br/>'<br/>' Thanks Steve! I learned allot and am NOW very motivated to learn memory techniques.<br/>'<br/>' This program has timings for 1 loop broken into sections currently commented out and another<br/>' set of timings for multiple loop testing currently set, now at 100 tests for a sort of average.<br/>' But average is misleading, the first test is usually always the longest and really only one test<br/>' is necessary to get the results from a data file that does not change.<br/>'<br/>' Breaking code into logical sections and timing those can help spot trouble areas or the difference<br/>' in a small or great change.<br/>'<br/>' Here is review of speed tips commented as they occur in code:<br/>'<br/>DEFINT A-Z 'there are 25,105 words in the unixdict.txt file so main array index<br/>'           and pointers in sort can all be integers.<br/>\u00a0<br/>' The letters from a word read in from the dictionary file (really just a word list in alpha order)<br/>' are to be counted and coded into an alpha order sequence of letters:<br/>'       eg.  eilv is the same code for words: evil, levi, live, veil, vile<br/>' The longest word in the file had 22 letters, they are all lower case but there are other symbols<br/>' in file like ' and digits we want to filter out.<br/>TYPE wordData<br/>    code AS STRING * 22<br/>    theWord AS STRING * 22<br/>END TYPE<br/>' I originally was coding a word into the whole list (array) of letter counts as a string.<br/>' Then realized I could drop all the zeros if I converted the numbers back to letters.<br/>' I then attached THE word to the end of the coded word using\u00a0! to separate the 2 sections.<br/>' That was allot of manipulation with INSTR to find the\u00a0! separator and then MID$ to extract the<br/>' code or THE word when I needed the value. All this extra manipulation ended by using TYPE with<br/>' the code part and the word part sharing the same index. Learned from Steve's example!<br/>\u00a0<br/>' Pick the lowest number type needed to cover the problem<br/>DIM SHARED w(25105) AS wordData '  the main array<br/>DIM anagramSetsCount AS _BYTE ' the Rosetta Code Challenge was to find only the largest sets of Anagrams<br/>DIM codeCount AS _BYTE ' counting number of words with same code<br/>DIM wordIndex AS _BYTE<br/>DIM wordLength AS _BYTE<br/>DIM flag AS _BIT 'flag used as true or false<br/>DIM letterCounts(1 TO 26) AS _BYTE 'stores letter counts for coding word<br/>' b$  always stands for building a string.<br/>' For long and strings, I am using the designated suffix<br/>\u00a0<br/>t1# = TIMER: loops = 100<br/>FOR test = 1 TO loops<br/>    'reset these for multiple loop tests<br/>    indexTop = 0 'indexTop for main data array<br/>    anagramSetsCount = 0 'anagrams count if exceed 4 for any one code<br/>    anagramList$ = \"\" 'list of anagrams<br/>\u00a0<br/>    'get the file data loaded in one pop, disk access is slow!<br/>    OPEN \"unixdict.txt\" FOR BINARY AS #1<br/>    ' http://www.puzzlers.org/pub/wordlists/unixdict.txt<br/>    ' note: when I downloaded this file line breaks were by chr$(10) only.<br/>    ' Steve had coded for either chr$(13) + chr$(10) or just chr$(10)<br/>\u00a0<br/>    fileLength&amp; = LOF(1): buf$ = SPACE$(fileLength&amp;)<br/>    GET #1, , buf$<br/>    CLOSE #1<br/>    ' Getting the data into a big long string saved allot of time as compared to<br/>    ' reading from the file line by line.<br/>\u00a0<br/>    'Process the file data by extracting the word from the long file string and then<br/>    'coding each word of interest, loading up the w() array.<br/>    filePosition&amp; = 1<br/>    WHILE filePosition&amp; &lt; fileLength&amp;<br/>        nextPosition&amp; = INSTR(filePosition&amp;, buf$, CHR$(10))<br/>        wd$ = MID$(buf$, filePosition&amp;, nextPosition&amp; - filePosition&amp;)<br/>        wordLength = LEN(wd$)<br/>        IF wordLength &gt; 2 THEN<br/>            'From Steve's example, changing from REDIM to ERASE saved an amzing amount of time!<br/>            ERASE letterCounts: flag = 0: wordIndex = 1<br/>            WHILE wordIndex &lt;= wordLength<br/>                'From Steve's example, I was not aware of this version of ASC with MID$ built-in<br/>                ansciChar = ASC(wd$, wordIndex) - 96<br/>                IF 0 &lt; ansciChar AND ansciChar &lt; 27 THEN letterCounts(ansciChar) = letterCounts(ansciChar) + 1 ELSE flag = 1: EXIT WHILE<br/>                wordIndex = wordIndex + 1<br/>            WEND<br/>            'don't code and store a word unless all letters, no digits or apostrophes<br/>            IF flag = 0 THEN<br/>                b$ = \"\": wordIndex = 1<br/>                WHILE wordIndex &lt; 27<br/>                    IF letterCounts(wordIndex) THEN b$ = b$ + STRING$(letterCounts(wordIndex), CHR$(96 + wordIndex))<br/>                    wordIndex = wordIndex + 1<br/>                WEND<br/>                indexTop = indexTop + 1<br/>                w(indexTop).code = b$<br/>                w(indexTop).theWord = wd$<br/>            END IF<br/>        END IF<br/>        IF nextPosition&amp; THEN filePosition&amp; = nextPosition&amp; + 1 ELSE filePosition&amp; = fileLength&amp;<br/>    WEND<br/>    't2# = TIMER<br/>    'PRINT t2# - t1#; \" secs to load word array.\"<br/>\u00a0<br/>    'Sort using a recursive Quick Sort routine on the code key of wordData Type defined.<br/>    QSort 0, indexTop<br/>    't3# = TIMER<br/>    'PRINT t3# - t2#; \" secs to sort array.\"<br/>\u00a0<br/>    'Now find all the anagrams, word permutations, from the same word \"code\" that we sorted by.<br/>    flag = 0: j = 0<br/>    WHILE j &lt; indexTop<br/>        'Does the sorted code key match the next one on the list?<br/>        IF w(j).code &lt;&gt; w(j + 1).code THEN ' not matched so stop counting and add to report<br/>            IF codeCount &gt; 4 THEN ' only want the largest sets of anagrams 5 or more<br/>                anagramList$ = anagramList$ + b$ + CHR$(10)<br/>                anagramSetsCount = anagramSetsCount + 1<br/>            END IF<br/>            codeCount = 0: b$ = \"\": flag = 0<br/>        ELSEIF flag THEN ' match and match flag set so just add to count and build set<br/>            b$ = b$ + \", \" + RTRIM$(w(j + 1).theWord)<br/>            codeCount = codeCount + 1<br/>        ELSE ' no flag means first match, start counting and building a new set<br/>            b$ = RTRIM$(w(j).theWord) + \", \" + RTRIM$(w(j + 1).theWord)<br/>            codeCount = 2: flag = 1<br/>        END IF<br/>        j = j + 1<br/>    WEND<br/>    't4# = TIMER<br/>    'PRINT t4# - t3#; \" secs to count matches from array.\"<br/>NEXT<br/>PRINT \"Ave time per loop\"; (TIMER - t1#) / loops; \" secs, there were\"; anagramSetsCount; \" anagrams sets of 5 or more words.\"<br/>PRINT anagramList$<br/>\u00a0<br/>'This sub modified for wordData Type, to sort by the .code key, the w() array is SHARED<br/>SUB QSort (Start, Finish)<br/>    i = Start: j = Finish: x$ = w(INT((i + j) / 2)).code<br/>    WHILE i &lt;= j<br/>        WHILE w(i).code &lt; x$: i = i + 1: WEND<br/>        WHILE w(j).code &gt; x$: j = j - 1: WEND<br/>        IF i &lt;= j THEN<br/>            SWAP w(i), w(j)<br/>            i = i + 1: j = j - 1<br/>        END IF<br/>    WEND<br/>    IF j &gt; Start THEN QSort Start, j<br/>    IF i &lt; Finish THEN QSort i, Finish<br/>END SUB<br/>\u00a0</pre>"}, {"lang": "R", "loc": 22, "block": "<pre class=\"text highlighted_source\">words &lt;- readLines(\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>word_group &lt;- sapply(<br/>    strsplit(words, split=\"\"), # this will split all words to single letters...<br/>    function(x) paste(sort(x), collapse=\"\") # ...which we sort and paste again<br/>)<br/>\u00a0<br/>counts &lt;- tapply(words, word_group, length) # group words by class to get number of anagrams<br/>anagrams &lt;- tapply(words, word_group, paste, collapse=\", \") # group to get string with all anagrams<br/>\u00a0<br/># Results<br/>table(counts)<br/>counts<br/>    1     2     3     4     5 <br/>22263  1111   155    31     6 <br/>\u00a0<br/>anagrams[counts == max(counts)]<br/>                               abel                               acert <br/>     \"abel, able, bale, bela, elba\" \"caret, carte, cater, crate, trace\" <br/>                              aegln                               aeglr <br/>\"angel, angle, galen, glean, lange\" \"alger, glare, lager, large, regal\" <br/>                               aeln                                eilv <br/>     \"elan, lane, lean, lena, neal\"      \"evil, levi, live, veil, vile\" </pre>"}, {"lang": "Racket", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require net/url)         <br/>\u00a0<br/>(define (get-lines url-string)<br/>  (define port (get-pure-port (string-&gt;url url-string)))<br/>  (for/list ([l (in-lines port)]) l))<br/>\u00a0<br/>(define (hash-words words)<br/>  (for/fold ([ws-hash (hash)]) ([w words])<br/>    (hash-update ws-hash <br/>                 (list-&gt;string (sort (string-&gt;list w) &lt; #:key (\u03bb (c) (char-&gt;integer c))))<br/>                 (\u03bb (ws) (cons w ws))<br/>                 (\u03bb () '()))))<br/>\u00a0<br/>(define (get-maxes h)<br/>  (define max-ws (apply max (map length (hash-values h))))<br/>  (define max-keys (filter (\u03bb (k) (= (length (hash-ref h k)) max-ws)) (hash-keys h)))<br/>  (map (\u03bb (k) (hash-ref h k)) max-keys))<br/>\u00a0<br/>(get-maxes (hash-words (get-lines \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")))<br/>\u00a0</pre>"}, {"lang": "RapidQ", "loc": 66, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">dim</span> x <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span>, y <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw4\">dim</span> SortX <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw4\">dim</span> StrOutPut <span class=\"kw4\">as</span> <span class=\"kw1\">string</span><br/><span class=\"kw4\">dim</span> Count <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw4\">dim</span> MaxCount <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span><br/>\u00a0<br/><span class=\"kw4\">dim</span> AnaList <span class=\"kw4\">as</span> QStringlist<br/><span class=\"kw4\">dim</span> wordlist <span class=\"kw4\">as</span> QStringlist<br/><span class=\"kw4\">dim</span> Templist <span class=\"kw4\">as</span> QStringlist<br/><span class=\"kw4\">dim</span> Charlist <span class=\"kw4\">as</span> Qstringlist<br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">function</span> sortChars(expr <span class=\"kw4\">as</span> <span class=\"kw1\">string</span>) <span class=\"kw4\">as</span> <span class=\"kw1\">string</span><br/>    Charlist.clear<br/>    <span class=\"kw3\">for</span> SortX = 1 <span class=\"kw3\">to</span> len(expr)<br/>         Charlist.AddItems expr[SortX]<br/>    <span class=\"kw3\">next</span><br/>    charlist.sort<br/>    result = Charlist.text - chr$(10) - chr$(13)<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/><span class=\"co1\">'--- Start main code<br/></span>    wordlist.loadfromfile (<span class=\"st0\">\"unixdict.txt\"</span>)<br/>\u00a0<br/>    <span class=\"co1\">'create anagram list<br/></span>    <span class=\"kw3\">for</span> x = 0 <span class=\"kw3\">to</span> wordlist.itemcount-1<br/>        AnaList.AddItems sortChars(wordlist.item(x))<br/>    <span class=\"kw3\">next</span><br/>\u00a0<br/>    <span class=\"co1\">'Filter largest anagram lists<br/></span>    analist.sort<br/>    MaxCount = 0<br/>\u00a0<br/>    <span class=\"kw3\">for</span> x = 0 <span class=\"kw3\">to</span> AnaList.Itemcount-1<br/>        Count = 0<br/>        <span class=\"kw3\">for</span> y = x+1 <span class=\"kw3\">to</span> AnaList.Itemcount-1<br/>            <span class=\"kw3\">if</span> AnaList.item(y) = AnaList.item(x) <span class=\"kw3\">then</span><br/>                inc(count)<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">if</span> count &gt; MaxCount <span class=\"kw3\">then</span> <br/>                    Templist.clear<br/>                    MaxCount = Count<br/>                    Templist.AddItems AnaList.item(x)<br/>                <span class=\"kw3\">elseif</span> count = MaxCount <span class=\"kw3\">then</span><br/>                    Templist.AddItems AnaList.item(x)<br/>                <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>                <span class=\"kw2\">exit</span> <span class=\"kw3\">for</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">next</span><br/>    <span class=\"kw3\">next</span><br/>\u00a0<br/>    <span class=\"co1\">'Now get the words <br/></span>    <span class=\"kw3\">for</span> x = 0 <span class=\"kw3\">to</span> Templist.Itemcount-1<br/>        <span class=\"kw3\">for</span> y = 0 <span class=\"kw3\">to</span> wordlist.Itemcount-1 <br/>            <span class=\"kw3\">if</span> Templist.item(x) = sortChars(wordlist.item(y)) <span class=\"kw3\">then</span><br/>                StrOutPut = StrOutPut + wordlist.item(y) + <span class=\"st0\">\"  \"</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">next</span><br/>        StrOutPut = StrOutPut + chr$(13) + chr$(10)<br/>    <span class=\"kw3\">next</span><br/>\u00a0<br/>ShowMessage StrOutPut <br/><span class=\"kw3\">End</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 11, "block": "<pre class=\"text highlighted_source\">import Prelude;<br/>\u00a0<br/>list[str] OrderedRep(str word){\t<br/>\treturn sort([word[i] | i &lt;- [0..size(word)-1]]);<br/>}<br/>public list[set[str]] anagram(){<br/>\tallwords = readFileLines(|http://www.puzzlers.org/pub/wordlists/unixdict.txt|);<br/>\tAnagramMap = invert((word\u00a0: OrderedRep(word) | word &lt;- allwords));<br/>\tlongest = max([size(group) | group &lt;- range(AnagramMap)]);<br/>\treturn [AnagramMap[rep]| rep &lt;- AnagramMap, size(AnagramMap[rep]) == longest];<br/>}</pre>"}, {"lang": "Red", "loc": 17, "block": "<pre class=\"text highlighted_source\">Red []<br/>\u00a0<br/>m: make map! [] 25000<br/>\u00a0<br/>maxx: 0 <br/>foreach word  read/lines http://www.puzzlers.org/pub/wordlists/unixdict.txt [<br/>sword:  sort copy word\u00a0;; sorted characters of word<br/>\u00a0<br/>either find m sword [<br/>    append   m/:sword word  <br/>    maxx: max maxx length?  m/:sword<br/>   ] [ <br/>      put m sword append copy [] word<br/>    ]    <br/>]<br/>foreach v values-of m [ if maxx = length? v [print v] ]<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 30, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  finds words  with the  largest set of  anagrams  (of the same size).    */</span><br/>iFID= <span class=\"st0\">'unixdict.txt'</span>                             <span class=\"coMULTI\">/*the dictionary input File IDentifier.*/</span><br/>$=;    \u00a0!<span class=\"sy0\">.</span>=;      ww=<span class=\"nu0\">0</span>;       uw=<span class=\"nu0\">0</span>;      most=<span class=\"nu0\">0</span>  <span class=\"coMULTI\">/*initialize a bunch of REXX variables.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  read the entire file (by lines)*/</span><br/>    <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"nu0\">0</span>                  <span class=\"coMULTI\">/*Got any data?   Then read a record.  */</span><br/>    <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  <span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span>  <span class=\"kw2\">with</span>  @ <span class=\"sy0\">.</span>         <span class=\"coMULTI\">/*obtain a word from an input line.    */</span><br/>    len=<span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> len<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*onesies and twosies words can't win. */</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>@, <span class=\"st0\">'M'</span><span class=\"br0\">)</span>      <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*ignore any  non\u2500anagramable words.   */</span><br/>    uw=uw + <span class=\"nu0\">1</span>                                    <span class=\"coMULTI\">/*count of the (useable) words in file.*/</span><br/>    _=sortA<span class=\"br0\">(</span>@<span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*sort the letters in the word.        */</span><br/>   \u00a0!<span class=\"sy0\">.</span>_=!<span class=\"sy0\">.</span>_ @;       #=<span class=\"kw6\">words</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>_<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*append it to\u00a0!._;  bump the counter. */</span><br/>    <span class=\"kw1\">if</span> #==most  <span class=\"kw3\">then</span> $=$ _                       <span class=\"coMULTI\">/*append the sorted word\u2500\u2500\u25ba max anagram*/</span><br/>                <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> #<span class=\"sy0\">&gt;</span>most  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   $=_;   most=#;   <span class=\"kw1\">if</span> len<span class=\"sy0\">&gt;</span>ww  <span class=\"kw3\">then</span> ww=len;    <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>                              <span class=\"coMULTI\">/*$ \u25c4\u2500\u2500 list of high count anagrams.   */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500'</span>    uw     <span class=\"st0\">\"usable words in the dictionary file: \"</span>     iFID<br/><span class=\"kw1\">say</span><br/>     <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;   z=<span class=\"kw6\">subword</span><span class=\"br0\">(</span>$, m, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*the high count of the anagrams.      */</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'     '</span>     <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>z, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,  ww<span class=\"br0\">)</span>      <span class=\"st0\">'   [anagrams: '</span>      <span class=\"kw6\">subword</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>z, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span>                                 <span class=\"coMULTI\">/*W   is the maximum width of any word.*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500 Found'</span>   <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>    <span class=\"st0\">\"words  (each of which have\"</span>    <span class=\"kw6\">words</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>z<span class=\"br0\">)</span>-<span class=\"nu0\">1</span>  <span class=\"st0\">'anagrams).'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sortA: <span class=\"kw1\">arg</span> char <span class=\"nu0\">2</span> xx,@<span class=\"sy0\">.</span>                          <span class=\"coMULTI\">/*get the first letter of arg;  @.=null*/</span><br/>       @<span class=\"sy0\">.</span>char=char                               <span class=\"coMULTI\">/*no need to concatenate the first char*/</span><br/>                                                 <span class=\"coMULTI\">/*[\u2193]  sort/put letters alphabetically.*/</span><br/>                 <span class=\"kw1\">do</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>xx<span class=\"br0\">)</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> xx char <span class=\"nu0\">2</span> xx;    @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"57343f36256a17\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>char <span class=\"sy0\">||</span> char;    <span class=\"kw3\">end</span><br/>                                                 <span class=\"coMULTI\">/*reassemble word with sorted letters. */</span><br/>       <span class=\"kw1\">return</span> @<span class=\"sy0\">.</span>a <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>b <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>c <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>d <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>e <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>f<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>g<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>h<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>i<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>j<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>k<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>l<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>m<span class=\"sy0\">||</span>,<br/>              @<span class=\"sy0\">.</span>n <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>o <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>p <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>q <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>r <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>s<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>t<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>u<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>v<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>w<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>x<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>y<span class=\"sy0\">||</span>@<span class=\"sy0\">.</span>z</pre>"}, {"lang": "Ring", "loc": 82, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Anagrams<br/>\u00a0<br/>load \"stdlib.ring\"<br/>fn1 = \"unixdict.txt\"<br/>\u00a0<br/>fp = fopen(fn1,\"r\")<br/>str = fread(fp, getFileSize(fp))<br/>fclose(fp) <br/>strlist = str2list(str)<br/>anagram = newlist(len(strlist), 5)<br/>anag = list(len(strlist))<br/>result = list(len(strlist))<br/>for x = 1 to len(result)<br/>     result[x] = 0<br/>next<br/>for x = 1 to len(anag)<br/>     anag[x] = 0<br/>next<br/>for x = 1 to len(anagram)<br/>    for y = 1 to 5<br/>         anagram[x][y] = 0<br/>    next<br/>next<br/>\u00a0<br/>for n = 1 to len(strlist)<br/>     for m = 1 to len(strlist)<br/>          sum = 0<br/>          if len(strlist[n]) = 4 and len(strlist[m]) = 4 and n\u00a0!= m<br/>             for p = 1 to len(strlist[m])<br/>                  temp1 = count(strlist[n], strlist[m][p])<br/>                  temp2 = count(strlist[m], strlist[m][p])<br/>                  if temp1 = temp2<br/>                     sum = sum + 1<br/>                  ok<br/>             next<br/>             if sum = 4<br/>                anag[n] = anag[n] + 1<br/>                if anag[n] &lt; 6 and result[n] = 0 and result[m] = 0<br/>                   anagram[n][anag[n]] = strlist[m] <br/>                   result[m] = 1<br/>                ok<br/>             ok<br/>          ok<br/>    next<br/>    if anag[n] &gt; 0<br/>       result[n] = 1<br/>    ok<br/>next<br/>\u00a0<br/>for n = 1 to len(anagram)<br/>     flag = 0<br/>     for m = 1 to 5<br/>         if anagram[n][m]\u00a0!= 0<br/>            if m = 1<br/>               see strlist[n] +  \" \"<br/>               flag = 1<br/>            ok<br/>            see anagram[n][m] + \" \"<br/>         ok<br/>     next<br/>     if flag = 1<br/>        see nl<br/>     ok<br/>next<br/>\u00a0<br/>func getFileSize fp<br/>       c_filestart = 0<br/>       c_fileend = 2<br/>       fseek(fp,0,c_fileend)<br/>       nfilesize = ftell(fp)<br/>       fseek(fp,0,c_filestart)<br/>       return nfilesize<br/>\u00a0<br/>func count(astring,bstring)<br/>       cnt = 0<br/>       while substr(astring,bstring) &gt; 0<br/>               cnt = cnt + 1<br/>               astring = substr(astring,substr(astring,bstring)+len(string(sum)))<br/>       end<br/>       return cnt<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 17, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'open-uri'</span><br/>\u00a0<br/>anagram = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>hash, key<span class=\"sy0\">|</span> hash<span class=\"br0\">[</span>key<span class=\"br0\">]</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"co1\"># map sorted chars to anagrams</span><br/>\u00a0<br/><span class=\"kw3\">open</span><span class=\"br0\">(</span><span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>f<span class=\"sy0\">|</span><br/>  words = f.<span class=\"me1\">read</span>.<span class=\"kw3\">split</span><br/>  <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> words<br/>    anagram<span class=\"br0\">[</span>word.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> word<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>count = anagram.<span class=\"me1\">values</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>ana<span class=\"sy0\">|</span> ana.<span class=\"me1\">length</span><span class=\"br0\">}</span>.<span class=\"me1\">max</span><br/>anagram.<span class=\"me1\">each_value</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>ana<span class=\"sy0\">|</span><br/>  <span class=\"kw1\">if</span> ana.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span>= count<br/>    <span class=\"kw3\">p</span> ana<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 64, "block": "<pre class=\"text highlighted_source\">sqliteconnect #mem, \":memory:\"<br/>mem$ = \"CREATE TABLE anti(gram,ordr);<br/>CREATE INDEX ord ON anti(ordr)\"<br/>#mem execute(mem$)<br/>' read the file <br/>a$ = httpGet$(\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>\u00a0<br/>' break the file words apart<br/>i = 1<br/>while i &lt;&gt; 0<br/>\tj\t= instr(a$,chr$(10),i+1)<br/>\tif j = 0 then exit while<br/>\ta1$\t= mid$(a$,i,j-i)<br/>\tq\t= instr(a1$,\"'\")<br/>\tif q &gt; 0 then a1$ = left$(a1$,q) + mid$(a1$,q)<br/>\tln\t= len(a1$)<br/>\ts$\t= a1$<br/>\u00a0<br/>\t' Split the characters of the word and sort them<br/>\ts = 1<br/>\twhile\ts = 1<br/>\t\ts = 0<br/>\t\tfor k = 1 to ln -1<br/>\t\t\tif mid$(s$,k,1) &gt; mid$(s$,k+1,1) then<br/>\t\t\t\th$\t= mid$(s$,k,1)<br/>\t\t\t\th1$\t= mid$(s$,k+1,1)<br/>\t\t\t\ts$ \t= left$(s$,k-1) + h1$ + h$ + mid$(s$,k+2)<br/>\t\t\t\ts\t= 1<br/>\t\t\tend if<br/>\t\tnext k<br/>\twend<br/>\u00a0<br/>\tmem$\t= \"INSERT INTO anti VALUES('\";a1$;\"','\";ord$;\"')\"<br/>\t#mem execute(mem$)<br/>\ti\t= j +1<br/>wend<br/>' find all antigrams <br/>mem$\t= \"SELECT count(*) as cnt,anti.ordr FROM anti GROUP BY ordr ORDER BY cnt desc\"<br/>#mem execute(mem$)<br/>numDups = #mem ROWCOUNT()\t'Get the number of rows<br/>dim dups$(numDups)<br/>for i = 1 to numDups<br/>\t#row\t= #mem #nextrow()<br/>\tcnt\t= #row cnt()<br/>\tif i = 1 then maxCnt = cnt<br/>\tif cnt &lt; maxCnt then exit for<br/>\tdups$(i) = #row ordr$()<br/>next i<br/>\u00a0<br/>for i = 1 to i -1<br/>\tmem$\t= \"SELECT anti.gram FROM anti<br/>\t\t   WHERE  anti.ordr = '\";dups$(i);\"'<br/>\t\t   ORDER BY anti.gram\"<br/>\t#mem execute(mem$)<br/>\trows = #mem ROWCOUNT()\t'Get the number of rows<br/>\u00a0<br/>\tfor ii = 1 to rows<br/>\t\t#row\t= #mem #nextrow()<br/>\t\tgram$\t= #row gram$()<br/>\t\tprint gram$;chr$(9);<br/>\tnext ii<br/>\tprint<br/>next i<br/>end</pre>"}, {"lang": "Rust", "loc": 30, "block": "<pre class=\"text highlighted_source\">use std::collections::HashMap;<br/>use std::fs::File;<br/>use std::io::{BufRead,BufReader};<br/>use std::borrow::ToOwned;<br/>\u00a0<br/>extern crate unicode_segmentation;<br/>use unicode_segmentation::{UnicodeSegmentation};<br/>\u00a0<br/>fn main () {<br/>    let file = BufReader::new(File::open(\"unixdict.txt\").unwrap());<br/>    let mut map = HashMap::new();<br/>    for line in file.lines() {<br/>        let s = line.unwrap();<br/>        //Bytes:      let mut sorted = s.trim().bytes().collect::&lt;Vec&lt;_&gt;&gt;();<br/>        //Codepoints: let mut sorted = s.trim().chars().collect::&lt;Vec&lt;_&gt;&gt;();<br/>        let mut sorted = s.trim().graphemes(true).map(ToOwned::to_owned).collect::&lt;Vec&lt;_&gt;&gt;();<br/>        sorted.sort();<br/>\u00a0<br/>        map.entry(sorted).or_insert_with(Vec::new).push(s);<br/>    }<br/>\u00a0<br/>    if let Some(max_len) = map.values().map(|v| v.len()).max() {<br/>        for anagram in map.values().filter(|v| v.len() == max_len) {<br/>            for word in anagram {<br/>                print!(\"{} \", word);<br/>            }<br/>            println!();<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> src <span class=\"sy0\">=</span> io.<span class=\"me1\">Source</span> fromURL <span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> vls <span class=\"sy0\">=</span> src.<span class=\"me1\">getLines</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">sorted</span><span class=\"br0\">)</span>.<span class=\"me1\">values</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> vls.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">max</span><br/>vls filter <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> max<span class=\"br0\">)</span> map <span class=\"br0\">(</span><span class=\"sy0\">_</span> mkString <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span></pre>"}, {"lang": "Scheme", "loc": 43, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme char<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme file<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">125</span><span class=\"br0\">)</span>  <span class=\"co1\">; hash tables</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">132</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; sorting library</span><br/>\u00a0<br/><span class=\"co1\">;; read in the words</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>groups<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">with-input-from-file</span> <br/>    <span class=\"st0\">\"unixdict.txt\"</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>groups <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table <span class=\"kw1\">string=?</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span> <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eof-object?</span> line<span class=\"br0\">)</span> groups<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>key <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort char<span class=\"sy0\">&lt;</span>? <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>val <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span>ref<span class=\"sy0\">/</span>default groups key '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> groups key <span class=\"br0\">(</span><span class=\"kw1\">cons</span> line val<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; extract the longest values from given hash-table of groups</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>largest<span class=\"sy0\">-</span>groups groups<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>largest grps n sofar<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> grps<span class=\"br0\">)</span><br/>           sofar<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> grps<span class=\"br0\">)</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>largest <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> grps<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> grps<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> grps<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> grps<span class=\"br0\">)</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>largest <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> grps<span class=\"br0\">)</span> n <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> grps<span class=\"br0\">)</span> sofar<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <br/>            <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>largest <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> grps<span class=\"br0\">)</span> n sofar<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>largest <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span>values groups<span class=\"br0\">)</span> <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; print results</span><br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>group<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"[ \"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> word<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> group<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"]<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">&lt;</span>? <span class=\"br0\">(</span><span class=\"kw1\">car</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>grp<span class=\"br0\">)</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort string<span class=\"sy0\">&lt;</span>? grp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>largest<span class=\"sy0\">-</span>groups <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>groups<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 56, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"gethttp.s7i\";<br/>  include \"strifile.s7i\";<br/>\u00a0<br/>const type: anagramHash is hash [string] array string;<br/>\u00a0<br/>const func string: sort (in string: stri) is func<br/>  result<br/>    var string: sortedStri is \"\";<br/>  local<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>    var char: ch is ' ';<br/>  begin<br/>    sortedStri\u00a0:= stri;<br/>    for i range 1 to length(sortedStri) do<br/>      for j range succ(i) to length(sortedStri) do<br/>        if sortedStri[i] &gt; sortedStri[j] then<br/>          ch\u00a0:= sortedStri[i];<br/>          sortedStri @:= [i] sortedStri[j];<br/>          sortedStri @:= [j] ch;<br/>        end if;<br/>      end for;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var file: dictFile is STD_NULL;<br/>    var string: word is \"\";<br/>    var string: sortedLetters is \"\";<br/>    var anagramHash: anagrams is anagramHash.value;<br/>    var integer: length is 0;<br/>    var integer: maxLength is 0;<br/>  begin<br/>    dictFile\u00a0:= openStrifile(getHttp(\"www.puzzlers.org/pub/wordlists/unixdict.txt\"));<br/>    while hasNext(dictFile) do<br/>      readln(dictFile, word);<br/>      sortedLetters\u00a0:= sort(word);<br/>      if sortedLetters in anagrams then<br/>        anagrams[sortedLetters] &amp;:= word;<br/>      else<br/>        anagrams @:= [sortedLetters] [] (word);<br/>      end if;<br/>      length\u00a0:= length(anagrams[sortedLetters]);<br/>      if length &gt; maxLength then<br/>        maxLength\u00a0:= length;<br/>      end if;<br/>    end while;<br/>    close(dictFile);<br/>    for sortedLetters range sort(keys(anagrams)) do<br/>      if length(anagrams[sortedLetters]) = maxLength then<br/>        writeln(join(anagrams[sortedLetters], \", \"));<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SETL", "loc": 40, "block": "<pre class=\"text highlighted_source\">h\u00a0:= open('unixdict.txt', \"r\");<br/>anagrams\u00a0:= {};<br/>while not eof(h) loop<br/>  geta(h, word);<br/>  if word = om or word = \"\" then<br/>    continue;<br/>  end if;<br/>  sorted\u00a0:= insertion_sort(word);<br/>  anagrams{sorted} with:= word;<br/>end loop;<br/>\u00a0<br/>max_size\u00a0:= 0;<br/>max_words\u00a0:= {};<br/>for words = anagrams{sorted} loop<br/>  size\u00a0:= #words;<br/>  if size &gt; max_size then<br/>    max_size\u00a0:= size;<br/>    max_words\u00a0:= {words};<br/>  elseif size = max_size then<br/>    max_words with:= words;<br/>  end if;<br/>end loop;<br/>\u00a0<br/>for w in max_words loop<br/>  print(w);<br/>end loop;<br/>\u00a0<br/>-- GNU SETL has no built-in sort()<br/>procedure insertion_sort(A);<br/>  for i in [2..#A] loop<br/>    v\u00a0:= A(i);<br/>    j\u00a0:= i-1;<br/>    while j &gt;= 1 and A(j) &gt; v loop<br/>      A(j+1)\u00a0:= A(j);<br/>      j\u00a0:= j - 1;<br/>    end loop;<br/>    A(j+1)\u00a0:= v; <br/> end loop;<br/> return A;<br/>end procedure;</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func main<span class=\"br0\">(</span>file<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    file.<span class=\"me1\">open_r</span><span class=\"br0\">(</span>\\var fh, \\var err<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"sy0\">||</span> die <span class=\"st0\">\"Can't open file `#{file}' for reading: #{err}<span class=\"es0\">\\n</span>\"</span>;<br/>\u00a0<br/>    var vls = fh.<span class=\"me1\">words</span>.<span class=\"me1\">group_by</span><span class=\"br0\">{</span>.<span class=\"me1\">sort</span><span class=\"br0\">}</span>.<span class=\"me1\">values</span>;<br/>    var max = vls.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">len</span><span class=\"br0\">}</span>.<span class=\"me1\">max</span>;<br/>    vls.<span class=\"me1\">grep</span><span class=\"br0\">{</span>.<span class=\"me1\">len</span> == max<span class=\"br0\">}</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span>.<span class=\"me1\">say</span><span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"sy0\">%</span>f<span class=\"st0\">'/tmp/unixdict.txt'</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Simula", "loc": 270, "block": "<pre class=\"text highlighted_source\">COMMENT COMPILE WITH<br/>$ cim -m64 anagrams-hashmap.sim<br/>;<br/>BEGIN<br/>\u00a0<br/>    COMMENT ----- CLASSES FOR GENERAL USE\u00a0;<br/>\u00a0<br/>   \u00a0! ABSTRACT HASH KEY TYPE\u00a0;<br/>    CLASS HASHKEY;<br/>    VIRTUAL:<br/>        PROCEDURE HASH IS<br/>            INTEGER PROCEDURE HASH;;<br/>        PROCEDURE EQUALTO IS<br/>            BOOLEAN PROCEDURE EQUALTO(K); REF(HASHKEY) K;;<br/>    BEGIN<br/>    END HASHKEY;<br/>\u00a0<br/>   \u00a0! ABSTRACT HASH VALUE TYPE\u00a0;<br/>    CLASS HASHVAL;<br/>    BEGIN<br/>       \u00a0! THERE IS NOTHING REQUIRED FOR THE VALUE TYPE\u00a0;<br/>    END HASHVAL;<br/>\u00a0<br/>    CLASS HASHMAP;<br/>    BEGIN<br/>        CLASS INNERHASHMAP(N); INTEGER N;<br/>        BEGIN<br/>\u00a0<br/>            INTEGER PROCEDURE INDEX(K); REF(HASHKEY) K;<br/>            BEGIN<br/>                INTEGER I;<br/>                IF K == NONE THEN<br/>                    ERROR(\"HASHMAP.INDEX: NONE IS NOT A VALID KEY\");<br/>                I\u00a0:= MOD(K.HASH,N);<br/>            LOOP:<br/>                IF KEYTABLE(I) == NONE OR ELSE KEYTABLE(I).EQUALTO(K) THEN<br/>                    INDEX\u00a0:= I<br/>                ELSE BEGIN<br/>                    I\u00a0:= IF I+1 = N THEN 0 ELSE I+1;<br/>                    GO TO LOOP;<br/>                END;<br/>            END INDEX;<br/>\u00a0<br/>           \u00a0! PUT SOMETHING IN\u00a0;<br/>            PROCEDURE PUT(K,V); REF(HASHKEY) K; REF(HASHVAL) V;<br/>            BEGIN<br/>                INTEGER I;<br/>                IF V == NONE THEN<br/>                    ERROR(\"HASHMAP.PUT: NONE IS NOT A VALID VALUE\");<br/>                I\u00a0:= INDEX(K);<br/>                IF KEYTABLE(I) == NONE THEN BEGIN<br/>                    IF SIZE = N THEN<br/>                        ERROR(\"HASHMAP.PUT: TABLE FILLED COMPLETELY\");<br/>                    KEYTABLE(I)\u00a0:- K;<br/>                    VALTABLE(I)\u00a0:- V;<br/>                    SIZE\u00a0:= SIZE+1;<br/>                END ELSE<br/>                    VALTABLE(I)\u00a0:- V;<br/>            END PUT;<br/>\u00a0<br/>           \u00a0! GET SOMETHING OUT\u00a0;<br/>            REF(HASHVAL) PROCEDURE GET(K); REF(HASHKEY) K;<br/>            BEGIN<br/>                INTEGER I;<br/>                IF K == NONE THEN<br/>                    ERROR(\"HASHMAP.GET: NONE IS NOT A VALID KEY\");<br/>                I\u00a0:= INDEX(K);<br/>                IF KEYTABLE(I) == NONE THEN<br/>                    GET\u00a0:- NONE\u00a0! ERROR(\"HASHMAP.GET: KEY NOT FOUND\");<br/>                ELSE<br/>                    GET\u00a0:- VALTABLE(I);<br/>            END GET;<br/>\u00a0<br/>            PROCEDURE CLEAR;<br/>            BEGIN<br/>                INTEGER I;<br/>                FOR I\u00a0:= 0 STEP 1 UNTIL N-1 DO BEGIN<br/>                    KEYTABLE(I)\u00a0:- NONE;<br/>                    VALTABLE(I)\u00a0:- NONE;<br/>                END;<br/>                SIZE\u00a0:= 0;<br/>            END CLEAR;<br/>\u00a0<br/>           \u00a0! DATA MEMBERS OF CLASS HASHMAP\u00a0;<br/>            REF(HASHKEY) ARRAY KEYTABLE(0:N-1);<br/>            REF(HASHVAL) ARRAY VALTABLE(0:N-1);<br/>            INTEGER SIZE;<br/>\u00a0<br/>        END INNERHASHMAP;<br/>\u00a0<br/>        PROCEDURE PUT(K,V); REF(HASHKEY) K; REF(HASHVAL) V;<br/>        BEGIN<br/>            IF IMAP.SIZE &gt;= 0.75 * IMAP.N THEN<br/>            BEGIN<br/>                COMMENT RESIZE HASHMAP\u00a0;<br/>                REF(INNERHASHMAP) NEWIMAP;<br/>                REF(ITERATOR) IT;<br/>                NEWIMAP\u00a0:- NEW INNERHASHMAP(2 * IMAP.N);<br/>                IT\u00a0:- NEW ITERATOR(THIS HASHMAP);<br/>                WHILE IT.MORE DO<br/>                BEGIN<br/>                    REF(HASHKEY) KEY;<br/>                    KEY\u00a0:- IT.NEXT;<br/>                    NEWIMAP.PUT(KEY, IMAP.GET(KEY));<br/>                END;<br/>                IMAP.CLEAR;<br/>                IMAP\u00a0:- NEWIMAP;<br/>            END;<br/>            IMAP.PUT(K, V);<br/>        END;<br/>\u00a0<br/>        REF(HASHVAL) PROCEDURE GET(K); REF(HASHKEY) K;<br/>            GET\u00a0:- IMAP.GET(K);<br/>\u00a0<br/>        PROCEDURE CLEAR;<br/>            IMAP.CLEAR;<br/>\u00a0<br/>        INTEGER PROCEDURE SIZE;<br/>            SIZE\u00a0:= IMAP.SIZE;<br/>\u00a0<br/>        REF(INNERHASHMAP) IMAP;<br/>\u00a0<br/>        IMAP\u00a0:- NEW INNERHASHMAP(16);<br/>    END HASHMAP;<br/>\u00a0<br/>    CLASS ITERATOR(H); REF(HASHMAP) H;<br/>    BEGIN<br/>        INTEGER POS,KEYCOUNT;<br/>\u00a0<br/>        BOOLEAN PROCEDURE MORE;<br/>            MORE\u00a0:= KEYCOUNT &lt; H.SIZE;<br/>\u00a0<br/>        REF(HASHKEY) PROCEDURE NEXT;<br/>        BEGIN<br/>            INSPECT H.IMAP DO<br/>            BEGIN<br/>                WHILE KEYTABLE(POS) == NONE DO<br/>                    POS\u00a0:= POS+1;<br/>                NEXT\u00a0:- KEYTABLE(POS);<br/>                KEYCOUNT\u00a0:= KEYCOUNT+1;<br/>                POS\u00a0:= POS+1;<br/>            END;<br/>        END NEXT;<br/>\u00a0<br/>    END ITERATOR;<br/>\u00a0<br/>    COMMENT ----- PROBLEM SPECIFIC CLASSES\u00a0;<br/>\u00a0<br/>    HASHKEY CLASS TEXTHASHKEY(T); VALUE T; TEXT T;<br/>    BEGIN<br/>        INTEGER PROCEDURE HASH;<br/>        BEGIN<br/>            INTEGER I;<br/>            T.SETPOS(1);<br/>            WHILE T.MORE DO<br/>                I\u00a0:= 31*I+RANK(T.GETCHAR);<br/>            HASH\u00a0:= I;<br/>        END HASH;<br/>        BOOLEAN PROCEDURE EQUALTO(K); REF(HASHKEY) K;<br/>            EQUALTO\u00a0:= T = K QUA TEXTHASHKEY.T;<br/>    END TEXTHASHKEY;<br/>\u00a0<br/>    HASHVAL CLASS TEXTVECTOR;<br/>    BEGIN<br/>\u00a0<br/>        CLASS ARRAYHOLDER(N); INTEGER N;<br/>        BEGIN<br/>            TEXT ARRAY DATA(1:N);<br/>        END ARRAYHOLDER;<br/>\u00a0<br/>        REF(ARRAYHOLDER) HOLDER;<br/>        INTEGER SIZE;<br/>\u00a0<br/>        PROCEDURE DOUBLESIZE;<br/>        BEGIN<br/>            REF(ARRAYHOLDER) NEWHOLDER;<br/>            INTEGER I;<br/>            NEWHOLDER\u00a0:- NEW ARRAYHOLDER(2 * HOLDER.N);<br/>            FOR I\u00a0:= 1 STEP 1 UNTIL HOLDER.N DO<br/>                NEWHOLDER.DATA(I)\u00a0:- HOLDER.DATA(I);<br/>            HOLDER\u00a0:- NEWHOLDER;<br/>        END;<br/>\u00a0<br/>        PROCEDURE ADD(WORD); TEXT WORD;<br/>        BEGIN<br/>            SIZE\u00a0:= SIZE + 1;<br/>            IF SIZE &gt; HOLDER.N THEN<br/>                DOUBLESIZE;<br/>            HOLDER.DATA(SIZE)\u00a0:- WORD;<br/>        END;<br/>\u00a0<br/>        HOLDER\u00a0:- NEW ARRAYHOLDER(16);<br/>    END TEXTVECTOR;<br/>\u00a0<br/>    TEXT PROCEDURE MAKEKEY(WORD); TEXT WORD;<br/>    BEGIN<br/>        TEXT KEY;<br/>        INTEGER I;<br/>        KEY\u00a0:- BLANKS(WORD.LENGTH);<br/>        KEY.SETPOS(1);<br/>        FOR I\u00a0:= RANK('a') STEP 1 UNTIL RANK('z'),<br/>                 RANK('0') STEP 1 UNTIL RANK('9') DO<br/>        BEGIN<br/>            WORD.SETPOS(1);<br/>            WHILE WORD.MORE DO<br/>              IF WORD.GETCHAR = CHAR(I) THEN<br/>                  KEY.PUTCHAR(CHAR(I));<br/>        END;<br/>        MAKEKEY\u00a0:- KEY;<br/>    END MAKEKEY;<br/>\u00a0<br/>    REF(INFILE) INF;<br/>    REF(HASHMAP) MAP;<br/>    REF(HASHKEY) KEY;<br/>    REF(TEXTVECTOR) TVEC;<br/>    REF(ITERATOR) IT;<br/>    TEXT WORD;<br/>    INTEGER I, J, LONGEST;<br/>\u00a0<br/>    MAP\u00a0:- NEW HASHMAP;<br/>\u00a0<br/>    INF\u00a0:- NEW INFILE(\"unixdict.txt\");<br/>    INF.OPEN(BLANKS(132));<br/>    WHILE NOT INF.LASTITEM DO<br/>    BEGIN<br/>        WORD\u00a0:- COPY(INF.IMAGE).STRIP; INF.INIMAGE;<br/>        KEY\u00a0:- NEW TEXTHASHKEY(MAKEKEY(WORD));<br/>        TVEC\u00a0:- MAP.GET(KEY);<br/>        IF TVEC == NONE THEN<br/>        BEGIN<br/>            TVEC\u00a0:- NEW TEXTVECTOR;<br/>            MAP.PUT(KEY, TVEC);<br/>        END;<br/>        TVEC.ADD(WORD);<br/>    END;<br/>    INF.CLOSE;<br/>\u00a0<br/>    COMMENT FIND LONGEST ENTRIES\u00a0;<br/>\u00a0<br/>    IT\u00a0:- NEW ITERATOR(MAP);<br/>    WHILE IT.MORE DO<br/>    BEGIN<br/>        TVEC\u00a0:- MAP.GET(IT.NEXT);<br/>        IF TVEC.SIZE &gt; LONGEST THEN<br/>            LONGEST\u00a0:= TVEC.SIZE;<br/>    END;<br/>\u00a0<br/>    COMMENT OUTPUT LONGEST ENTRIES\u00a0;<br/>\u00a0<br/>    IT\u00a0:- NEW ITERATOR(MAP);<br/>    WHILE IT.MORE DO<br/>    BEGIN<br/>        KEY\u00a0:- IT.NEXT;<br/>        TVEC\u00a0:- MAP.GET(KEY);<br/>        IF TVEC.SIZE = LONGEST THEN<br/>        BEGIN<br/>            OUTTEXT(KEY QUA TEXTHASHKEY.T);<br/>            OUTTEXT(\":\");<br/>            FOR J\u00a0:= 1 STEP 1 UNTIL TVEC.SIZE DO<br/>                INSPECT TVEC.HOLDER DO<br/>                BEGIN<br/>                    OUTCHAR(' ');<br/>                    OUTTEXT(DATA(J));<br/>                END;<br/>            OUTIMAGE;<br/>        END;<br/>    END;<br/>\u00a0<br/>END<br/>\u00a0</pre>"}, {"lang": "Smalltalk", "loc": 7, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re6\">list</span><span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re0\">FillInTheBlank</span> request: <span class=\"st0\">'myMessageBoxTitle'</span><span class=\"br0\">)</span> subStrings: <span class=\"re0\">String</span> crlf.<br/><span class=\"re5\">dict</span><span class=\"sy0\">:=</span> <span class=\"re0\">Dictionary</span> new.<br/><span class=\"re5\">list</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">val</span>| <br/>\t<span class=\"br0\">(</span><span class=\"re5\">dict</span> at: <span class=\"re5\">val</span> copy sort ifAbsent: <span class=\"br0\">[</span><span class=\"re5\">dict</span> at: <span class=\"re5\">val</span> copy sort put: <span class=\"re0\">OrderedCollection</span> new<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\tadd: <span class=\"re5\">val</span>.<br/>\t<span class=\"br0\">]</span>.<br/><span class=\"re5\">sorted</span><span class=\"sy0\">:=</span><span class=\"re5\">dict</span> asSortedCollection: <span class=\"br0\">[</span>:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span>| a size &gt; b size<span class=\"br0\">]</span>.</pre>"}, {"lang": "SNOBOL4", "loc": 23, "block": "<pre class=\"text highlighted_source\">*       # Sort letters of word        <br/>        define('sortw(str)a,i,j')\u00a0:(sortw_end)<br/>sortw   a = array(size(str))<br/>sw1     i = i + 1; str len(1) . a&lt;i&gt; =\u00a0:s(sw1)<br/>        a = sort(a)<br/>sw2     j = j + 1; sortw = sortw a&lt;j&gt;\u00a0:s(sw2)f(return)<br/>sortw_end        <br/>\u00a0<br/>*       # Count words in string<br/>        define('countw(str)')\u00a0:(countw_end)<br/>countw  str break(' ') span(' ') =\u00a0:f(return)<br/>        countw = countw + 1\u00a0:(countw)<br/>countw_end        <br/>\u00a0<br/>        ana = table()<br/>L1      wrd = input\u00a0:f(L2)\u00a0;* unixdict.txt from stdin<br/>        sw = sortw(wrd); ana&lt;sw&gt; = ana&lt;sw&gt; wrd ' '<br/>        cw = countw(ana&lt;sw&gt;); max = gt(cw,max) cw<br/>        i = i + 1; terminal = eq(remdr(i,1000),0) wrd\u00a0:(L1)<br/>L2      kv = convert(ana,'array')<br/>L3      j = j + 1; key = kv&lt;j,1&gt;; val = kv&lt;j,2&gt;\u00a0:f(end)<br/>        output = eq(countw(val),max) key ': ' val\u00a0:(L3)<br/>end</pre>"}, {"lang": "Stata", "loc": 16, "block": "<pre class=\"text highlighted_source\">import delimited http://www.puzzlers.org/pub/wordlists/unixdict.txt, clear<br/>mata<br/>a=st_sdata(.,.)<br/>n=rows(a)<br/>for (i=1; i&lt;=n; i++) a[i]=char(sort(ascii(a[i])',1)')<br/>st_addvar(st_vartype(1),\"group\")<br/>st_sstore(.,2,a)<br/>end<br/>\u00a0<br/>bysort group (v1): gen k=_N<br/>qui sum k<br/>keep if k==r(max)<br/>by group: replace k=_n<br/>reshape wide v1, i(k) j(group) string<br/>drop k<br/>list, noobs noheader</pre>"}, {"lang": "SuperCollider", "loc": 20, "block": "<pre class=\"text highlighted_source\">(<br/>var text, words, sorted, dict = IdentityDictionary.new, findMax;<br/>File.use(\"unixdict.txt\".resolveRelative, \"r\", { |f| text = f.readAllString });<br/>words = text.split(Char.nl);<br/>sorted = words.collect { |each|<br/>\tvar key = each.copy.sort.asSymbol;<br/>\tdict[key]\u00a0?? { dict[key] = [] };<br/>\tdict[key] = dict[key].add(each)<br/>};<br/>findMax = { |dict|<br/>\tvar size = 0, max = [];<br/>\tdict.keysValuesDo { |key, val|<br/>\t\tif(val.size == size) { max = max.add(val) } {<br/>\t\t\tif(val.size &gt; size) { max = []; size = val.size }<br/>\t\t}<br/>\t};<br/>\tmax<br/>};<br/>findMax.(dict)<br/>)</pre>"}, {"lang": "Swift", "loc": 42, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let wordsURL = NSURL(string: \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")!<br/>\u00a0<br/>let wordsstring = try NSString(contentsOfURL:wordsURL , encoding: NSUTF8StringEncoding)<br/>let allwords = wordsstring.componentsSeparatedByString(\"\\n\")<br/>\u00a0<br/>let words = allwords//[0..&lt;100] // used to limit the size while testing<br/>\u00a0<br/>extension String {<br/>    var charactersAscending\u00a0: String {<br/>        return String(Array(characters).sort())<br/>    }<br/>}<br/>\u00a0<br/>var charsToWords = [String:Set&lt;String&gt;]()<br/>\u00a0<br/>var biggest = 0<br/>var biggestlists = [Set&lt;String&gt;]()<br/>\u00a0<br/>for thisword in words {<br/>    let chars = thisword.charactersAscending<br/>\u00a0<br/>    var knownwords = charsToWords[chars]\u00a0?? Set&lt;String&gt;()<br/>    knownwords.insert(thisword)<br/>    charsToWords[chars] = knownwords<br/>\u00a0<br/>    if knownwords.count &gt; biggest {<br/>        biggest = knownwords.count<br/>\u00a0<br/>        biggestlists = [knownwords]<br/>    }<br/>    else if knownwords.count == biggest {<br/>        biggestlists.append(knownwords)<br/>    }<br/>}<br/>\u00a0<br/>print(\"Found \\(biggestlists.count) sets of anagrams with \\(biggest) members each\")<br/>for (i, thislist) in biggestlists.enumerate() {<br/>    print(\"set \\(i): \\(thislist.sort())\")<br/>}<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require <span class=\"kw2\">http</span><br/>\u00a0<br/><span class=\"kw1\">set</span> url <span class=\"kw2\">http</span>://www.puzzlers.org/pub/wordlists/unixdict.txt<br/><span class=\"kw1\">set</span> response <span class=\"br0\">[</span><span class=\"kw2\">http</span>::<span class=\"me1\">geturl</span> <span class=\"re0\">$url</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> data <span class=\"br0\">[</span><span class=\"kw2\">http</span>::<span class=\"me1\">data</span> <span class=\"re0\">$response</span><span class=\"br0\">]</span><br/><span class=\"kw2\">http</span>::<span class=\"me1\">cleanup</span> <span class=\"re0\">$response</span><br/>\u00a0<br/><span class=\"kw1\">set</span> max <span class=\"nu0\">0</span><br/>array <span class=\"kw1\">set</span> anagrams <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> line <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$data</span> \\n<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> word <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$line</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> anagram <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$word</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">lappend</span> anagrams<span class=\"br0\">(</span><span class=\"re0\">$anagram</span><span class=\"br0\">)</span> <span class=\"re0\">$word</span><br/>        <span class=\"kw1\">set</span> max <span class=\"br0\">[</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">max</span> <span class=\"re0\">$max</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$anagrams</span><span class=\"br0\">(</span><span class=\"re0\">$anagram</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> key <span class=\"br0\">[</span>array names anagrams<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$anagrams</span><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">]</span> == <span class=\"re0\">$max</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"re0\">$anagrams</span><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 28, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT,{}<br/>requestdata = REQUEST (\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>\u00a0<br/>DICT anagramm CREATE 99999<br/>\u00a0<br/>COMPILE<br/> LOOP word=requestdata<br/>  -&gt;\u00a0?\u00a0: any character<br/>  charsInWord=STRINGS (word,\"\u00a0? \")<br/>  charString =ALPHA_SORT (charsInWord)<br/>  DICT anagramm APPEND/QUIET/COUNT charString,num,freq,word;\" \"<br/> ENDLOOP<br/>\u00a0<br/>DICT anagramm UNLOAD charString,all,freq,anagrams<br/>\u00a0<br/>index        =DIGIT_INDEX (freq)<br/>reverseIndex =REVERSE (index)<br/>freq         =INDEX_SORT (freq,reverseIndex)<br/>anagrams     =INDEX_SORT (anagrams,reverseIndex)<br/>charString   =INDEX_SORT (charString,reverseIndex)<br/>\u00a0<br/>mostWords=SELECT (freq,1), adjust=MAX_LENGTH (charString)<br/> LOOP cs=charString, f=freq, a=anagrams<br/>  IF (f&lt;mostWords) EXIT<br/>   cs=CENTER (cs,-adjust)<br/>   PRINT cs,\" \",f,\": \",a<br/> ENDLOOP<br/>ENDCOMPILE</pre>"}, {"lang": "UNIX Shell", "loc": 36, "block": "<pre class=\"bash highlighted_source\">http_get_body<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">host</span>=<span class=\"re4\">$1</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">uri</span>=<span class=\"re4\">$2</span><br/>    <span class=\"kw3\">exec</span> <span class=\"nu0\">5</span><span class=\"sy0\">&lt;&gt;</span> <span class=\"sy0\">/</span>dev<span class=\"sy0\">/</span>tcp<span class=\"sy0\">/</span><span class=\"re1\">$host</span><span class=\"sy0\">/</span><span class=\"nu0\">80</span><br/>    <span class=\"kw3\">printf</span> <span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">5</span> <span class=\"st0\">\"%s<span class=\"es1\">\\r</span><span class=\"es1\">\\n</span>\"</span> <span class=\"st0\">\"GET <span class=\"es2\">$uri</span> HTTP/1.1\"</span> <span class=\"st0\">\"Host: <span class=\"es2\">$host</span>\"</span> <span class=\"st0\">\"Connection: close\"</span> <span class=\"st0\">\"\"</span><br/>    mapfile <span class=\"re5\">-t</span> <span class=\"re5\">-u5</span> <br/>    <span class=\"kw3\">local</span> <span class=\"re2\">lines</span>=<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es3\">${MAPFILE[@]//$'\\r'}</span>\"</span> <span class=\"br0\">)</span> <br/>    <span class=\"kw3\">local</span> <span class=\"re2\">i</span>=<span class=\"nu0\">0</span> <span class=\"re2\">found</span>=<span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>\u00a0; found == <span class=\"nu0\">0</span>; i++ <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-z</span> <span class=\"co1\">${lines[i]}</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> found++ <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span> <span class=\"st0\">\"<span class=\"es3\">${lines[@]:i}</span>\"</span><br/>    <span class=\"kw3\">exec</span> <span class=\"nu0\">5</span><span class=\"sy0\">&gt;&amp;</span>-<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">declare</span> <span class=\"re5\">-A</span> wordlist <br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> word; <span class=\"kw1\">do</span> <br/>    <span class=\"re2\">uniq_letters</span>=<span class=\"br0\">(</span> $<span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span><span class=\"co1\">${#word}</span>; i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span> <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es3\">${word:i:1}</span>\"</span>; <span class=\"kw1\">done</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    wordlist<span class=\"br0\">[</span><span class=\"st0\">\"<span class=\"es3\">${uniq_letters[*]}</span>\"</span><span class=\"br0\">]</span>+=<span class=\"st0\">\"<span class=\"es2\">$word</span> \"</span> <br/><span class=\"kw1\">done</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">(</span> http_get_body www.puzzlers.org  <span class=\"sy0\">/</span>pub<span class=\"sy0\">/</span>wordlists<span class=\"sy0\">/</span>unixdict.txt <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re2\">maxlen</span>=<span class=\"nu0\">0</span><br/><span class=\"re2\">maxwords</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> key <span class=\"kw1\">in</span> <span class=\"st0\">\"<span class=\"es3\">${!wordlist[@]}</span>\"</span>; <span class=\"kw1\">do</span> <br/>    <span class=\"re2\">words</span>=<span class=\"br0\">(</span> <span class=\"co1\">${wordlist[$key]}</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"co1\">${#words[@]}</span> <span class=\"sy0\">&gt;</span> maxlen <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>        <span class=\"re2\">maxlen</span>=<span class=\"co1\">${#words[@]}</span><br/>        <span class=\"re2\">maxwords</span>=<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es3\">${wordlist[\"$key\"]}</span>\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">elif</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"co1\">${#words[@]}</span> == maxlen <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>        maxwords+=<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es3\">${wordlist[$key]}</span>\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">fi</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span> <span class=\"st0\">\"<span class=\"es3\">${maxwords[@]}</span>\"</span></pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>#show+<br/>\u00a0<br/>anagrams = mat` * leql$^&amp;h eql|<a class=\"__cf_email__\" data-cfemail=\"b984f9cbf28bcdffd5eaea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ^(~&amp;,-&lt;&amp;)* unixdict_dot_txt</pre>"}, {"lang": "Vedit macro language", "loc": 66, "block": "<pre class=\"vedit highlighted_source\">File_Open<span class=\"br0\">(</span><span class=\"st0\">\"|(PATH_ONLY)\\unixdict.txt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Repeat</span><span class=\"br0\">(</span>ALL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">,</span> EOL_Pos<span class=\"br0\">)</span>     <span class=\"co1\">// original word</span><br/>    Call<span class=\"br0\">(</span><span class=\"st0\">\"SORT_LETTERS\"</span><span class=\"br0\">)</span>                <span class=\"co1\">// sort letters of the word</span><br/>    EOL<br/>    IC<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>                 <span class=\"co1\">// add the original word at eol</span><br/>    Line<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> ERRBREAK<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Sort<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> File_Size<span class=\"br0\">)</span>                      <span class=\"co1\">// sort list according to anagrams</span><br/>\u00a0<br/>BOF<br/>Search<span class=\"br0\">(</span><span class=\"st0\">\"|F\"</span><span class=\"br0\">)</span> Search<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>                <span class=\"co1\">// first word in the list</span><br/>Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> BOL_Pos<span class=\"sy0\">,</span> CP<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"co1\">// reg 10 = sorted anagram word</span><br/>Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">,</span> EOL_Pos<span class=\"br0\">)</span>         <span class=\"co1\">// reg 11 = list of words in current group</span><br/>Reg_Empty<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span>                           <span class=\"co1\">// reg 12 = list of words in largest groups</span><br/>Reg_Set<span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<br/>\"</span><span class=\"br0\">)</span><br/>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>                                  <span class=\"co1\">// words in this group</span><br/>#<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>                                  <span class=\"co1\">// words in largest group found</span><br/><span class=\"kw1\">Repeat</span><span class=\"br0\">(</span>ALL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Line<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> ERRBREAK<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Match<span class=\"br0\">(</span>@10<span class=\"sy0\">,</span> ADVANCE<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>     <span class=\"co1\">// same group as previous word?</span><br/>        Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> EOL_Pos<span class=\"sy0\">,</span> APPEND<span class=\"br0\">)</span>  <span class=\"co1\">// add word to this group</span><br/>        #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>                            <span class=\"co1\">// different anagram group</span><br/>        Search<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> ERRBREAK<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">==</span> #<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                 <span class=\"co1\">// same size as the largest?</span><br/>            Reg_Set<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> @13<span class=\"sy0\">,</span> APPEND<span class=\"br0\">)</span>    <span class=\"co1\">// append newline</span><br/>            Reg_Set<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> @11<span class=\"sy0\">,</span> APPEND<span class=\"br0\">)</span>    <span class=\"co1\">// append word list</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> #<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                  <span class=\"co1\">// new larger size of group</span><br/>            Reg_Set<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> @11<span class=\"br0\">)</span>            <span class=\"co1\">// replace word list</span><br/>            #<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>        Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> BOL_Pos<span class=\"sy0\">,</span> CP<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">,</span> EOL_Pos<span class=\"br0\">)</span> <span class=\"co1\">// first word of new group</span><br/>        #<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Buf_Quit<span class=\"br0\">(</span>OK<span class=\"br0\">)</span>                    <span class=\"co1\">// close word list file</span><br/>Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span>            <span class=\"co1\">// output results in a new edit buffer</span><br/>Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span>                     <span class=\"co1\">// display all groups of longest anagram words</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Sort characters in current line using Insertion sort</span><br/><span class=\"co1\">//</span><br/><span class=\"sy0\">:</span>SORT_LETTERS<span class=\"sy0\">:</span><br/>GP<span class=\"br0\">(</span>EOL_pos<span class=\"br0\">)</span> #<span class=\"nu0\">9</span> <span class=\"sy0\">=</span> Cur_Col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span> <span class=\"sy0\">&lt;=</span> #<span class=\"nu0\">9</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Goto_Col<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span> #<span class=\"nu0\">8</span> <span class=\"sy0\">=</span> Cur_Char<br/>    #<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>#<span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        #<span class=\"nu0\">7</span> <span class=\"sy0\">=</span> Cur_Char<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">7</span> <span class=\"sy0\">&lt;=</span> #<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">break</span> <span class=\"br0\">}</span><br/>        Ins_Char<span class=\"br0\">(</span>#<span class=\"nu0\">7</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span><br/>        #<span class=\"nu0\">2</span><span class=\"sy0\">--</span><br/>        Goto_Col<span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    Ins_Char<span class=\"br0\">(</span>#<span class=\"nu0\">8</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span></pre>"}, {"lang": "VBA", "loc": 163, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Main_Anagram()<br/><span class=\"kw4\">Dim</span> varReturn<br/><span class=\"kw4\">Dim</span> temp<br/><span class=\"kw4\">Dim</span> strContent <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> strFile <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> Num <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> countTime <span class=\"kw4\">As</span> <span class=\"kw1\">Single</span><br/>\u00a0<br/>    <span class=\"co1\">'Open &amp; read txt file<br/></span>    Num = FreeFile<br/>    strFile = <span class=\"st0\">\"C:\\Users\\\"</span> &amp; Environ(<span class=\"st0\">\"Username\"</span>) &amp; <span class=\"st0\">\"\\Desktop\\unixdict.txt\"</span><br/>    <span class=\"kw4\">Open</span> strFile <span class=\"kw3\">For</span> <span class=\"kw4\">Input</span> <span class=\"kw4\">As</span> #Num<br/>        strContent = <span class=\"kw4\">Input</span>(LOF(1), #Num)<br/>    <span class=\"kw3\">Close</span> #Num<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"kw4\">UBound</span>(Split(strContent, vbCrLf)) + 1 &amp; <span class=\"st0\">\" words, in the dictionary\"</span><br/>    countTime = Timer<br/>    <span class=\"co1\">'Compute<br/></span>    varReturn = Anagrams(strContent)<br/>    <span class=\"co1\">'Return<br/></span>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"The anagram set(s) with the greatest number of words (namely \"</span> &amp; <span class=\"kw4\">UBound</span>(varReturn, 2) &amp; <span class=\"st0\">\") is\u00a0: \"</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(varReturn, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(varReturn, 1)<br/>        <span class=\"kw4\">ReDim</span> temp(<span class=\"kw4\">LBound</span>(varReturn, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(varReturn, 2))<br/>        <span class=\"kw3\">For</span> Num = <span class=\"kw4\">LBound</span>(varReturn, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(varReturn, 2)<br/>            temp(Num) = varReturn(i, Num)<br/>        <span class=\"kw3\">Next</span><br/>        SortOneDimArray temp, <span class=\"kw4\">LBound</span>(temp), <span class=\"kw4\">UBound</span>(temp)<br/>        Debug.<span class=\"kw4\">Print</span> Mid(Join(temp, <span class=\"st0\">\", \"</span>), 3)<br/>    <span class=\"kw3\">Next</span> i<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"\"</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Time to go\u00a0: \"</span> &amp; Timer - countTime &amp; <span class=\"st0\">\" seconds.\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Anagrams(strContent <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/><span class=\"kw4\">Dim</span> arrList<br/><span class=\"kw4\">Dim</span> arrTemp() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> arrReturn() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> Num <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> lngCountTemp <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> lngCount <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    <span class=\"co1\">'Put the content of txt file in an One Dim Array<br/></span>    arrList = Split(strContent, vbCrLf)<br/>    <span class=\"kw4\">ReDim</span> arrTemp(0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrList, 1), 0 <span class=\"kw3\">To</span> 2)<br/>    <span class=\"co1\">'Transfer Datas in a 2nd Array Multi-Dim<br/></span>        <span class=\"co1\">'Col 0 = words with letters sorted<br/></span>        <span class=\"co1\">'Col 1 = words<br/></span>        <span class=\"co1\">'Col 2 = Number of same words with letters sorted in the list<br/></span>    <span class=\"kw3\">For</span> Num = <span class=\"kw4\">LBound</span>(arrList) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrList)<br/>        arrTemp(Num, 0) = SortLetters(CStr(arrList(Num)), Chr(0))<br/>        arrTemp(Num, 1) = CStr(arrList(Num))<br/>    <span class=\"kw3\">Next</span><br/>    SortTwoDimArray arrTemp, <span class=\"kw4\">LBound</span>(arrTemp, 1), <span class=\"kw4\">UBound</span>(arrTemp, 1), 0<br/>    <span class=\"kw3\">For</span> Num = <span class=\"kw4\">LBound</span>(arrTemp, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrTemp, 1)<br/>        arrTemp(Num, 2) = NbIf(arrTemp(Num, 0), arrTemp, Num, 0)<br/>        <span class=\"kw3\">If</span> arrTemp(Num, 2) &gt; lngCountTemp <span class=\"kw3\">Then</span> lngCountTemp = arrTemp(Num, 2)<br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"co1\">'return<br/></span>    <span class=\"kw4\">ReDim</span> arrReturn(0 <span class=\"kw3\">To</span> lngCountTemp, 0)<br/>    <span class=\"kw3\">For</span> Num = <span class=\"kw4\">LBound</span>(arrTemp, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrTemp, 1)<br/>        <span class=\"kw3\">If</span> lngCountTemp = arrTemp(Num, 2) <span class=\"kw3\">Then</span><br/>            <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> arrReturn(0 <span class=\"kw3\">To</span> lngCountTemp, 0 <span class=\"kw3\">To</span> lngCount)<br/>            <span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> lngCountTemp - 1<br/>                arrReturn(i, lngCount) = arrTemp(Num + i, 1)<br/>            <span class=\"kw3\">Next</span> i<br/>            lngCount = lngCount + 1<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> Num<br/>    Anagrams = Transposition(arrReturn)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> SortLetters(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, sep <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> temp<br/>\u00a0<br/>    temp = Split(StrConv(s, vbUnicode), sep)<br/>    SortOneDimArray temp, <span class=\"kw4\">LBound</span>(temp), <span class=\"kw4\">UBound</span>(temp)<br/>    SortLetters = Join(temp, sep)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> NbIf(strValue <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, arr <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, lngInd <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, <span class=\"kw4\">Optional</span> lngColumn <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> lngCount <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    <span class=\"kw3\">For</span> i = lngInd <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr, 1)<br/>        <span class=\"kw3\">If</span> arr(i, lngColumn) = strValue <span class=\"kw3\">Then</span><br/>            lngCount = lngCount + 1<br/>        <span class=\"kw3\">Else</span><br/>            <span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    NbIf = lngCount<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Transposition(<span class=\"kw4\">ByRef</span> myArr <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/><span class=\"kw4\">Dim</span> tabl<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    <span class=\"kw4\">ReDim</span> tabl(<span class=\"kw4\">LBound</span>(myArr, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(myArr, 2), <span class=\"kw4\">LBound</span>(myArr, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(myArr, 1))<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(myArr, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(myArr, 1)<br/>        <span class=\"kw3\">For</span> j = <span class=\"kw4\">LBound</span>(myArr, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(myArr, 2)<br/>            tabl(j, i) = myArr(i, j)<br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/>    Transposition = tabl<br/>    Erase tabl<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> SortOneDimArray(<span class=\"kw4\">ByRef</span> myArr <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, mini <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Maxi <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>)<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> Pivot <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/><span class=\"kw4\">Dim</span> temp <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>\u00a0<br/>    <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>    i = mini: j = Maxi<br/>    Pivot = myArr((mini + Maxi) \\ 2)<br/>    <span class=\"kw3\">While</span> i &lt;= j<br/>        <span class=\"kw3\">While</span> myArr(i) &lt; Pivot <span class=\"kw3\">And</span> i &lt; Maxi: i = i + 1: Wend<br/>        <span class=\"kw3\">While</span> Pivot &lt; myArr(j) <span class=\"kw3\">And</span> j &gt; mini: j = j - 1: Wend<br/>        <span class=\"kw3\">If</span> i &lt;= j <span class=\"kw3\">Then</span><br/>            temp = myArr(i)<br/>            myArr(i) = myArr(j)<br/>            myArr(j) = temp<br/>            i = i + 1: j = j - 1<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    Wend<br/>    <span class=\"kw3\">If</span> (mini &lt; j) <span class=\"kw3\">Then</span> <span class=\"kw2\">Call</span> SortOneDimArray(myArr, mini, j)<br/>    <span class=\"kw3\">If</span> (i &lt; Maxi) <span class=\"kw3\">Then</span> <span class=\"kw2\">Call</span> SortOneDimArray(myArr, i, Maxi)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> SortTwoDimArray(<span class=\"kw4\">ByRef</span> myArr <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, mini <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Maxi <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, <span class=\"kw4\">Optional</span> Colonne <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span> = 0)<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> Pivot <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/><span class=\"kw4\">Dim</span> myArrTemp <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/><span class=\"kw4\">Dim</span> ColTemp <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>    i = mini: j = Maxi<br/>    Pivot = myArr((mini + Maxi) \\ 2, Colonne)<br/>    <span class=\"kw3\">While</span> i &lt;= j<br/>        <span class=\"kw3\">While</span> myArr(i, Colonne) &lt; Pivot <span class=\"kw3\">And</span> i &lt; Maxi: i = i + 1: Wend<br/>        <span class=\"kw3\">While</span> Pivot &lt; myArr(j, Colonne) <span class=\"kw3\">And</span> j &gt; mini: j = j - 1: Wend<br/>        <span class=\"kw3\">If</span> i &lt;= j <span class=\"kw3\">Then</span><br/>            <span class=\"kw4\">ReDim</span> myArrTemp(<span class=\"kw4\">LBound</span>(myArr, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(myArr, 2))<br/>            <span class=\"kw3\">For</span> ColTemp = <span class=\"kw4\">LBound</span>(myArr, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(myArr, 2)<br/>                myArrTemp(ColTemp) = myArr(i, ColTemp)<br/>                myArr(i, ColTemp) = myArr(j, ColTemp)<br/>                myArr(j, ColTemp) = myArrTemp(ColTemp)<br/>            <span class=\"kw3\">Next</span> ColTemp<br/>            Erase myArrTemp<br/>            i = i + 1: j = j - 1<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    Wend<br/>    <span class=\"kw3\">If</span> (mini &lt; j) <span class=\"kw3\">Then</span> <span class=\"kw2\">Call</span> SortTwoDimArray(myArr, mini, j, Colonne)<br/>    <span class=\"kw3\">If</span> (i &lt; Maxi) <span class=\"kw3\">Then</span> <span class=\"kw2\">Call</span> SortTwoDimArray(myArr, i, Maxi, Colonne)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 64, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">IO</span><br/><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">Collections</span><span class=\"sy0\">.</span><span class=\"me1\">ObjectModel</span><br/>\u00a0<br/><span class=\"kw1\">Module</span> Module1<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> sWords <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Dictionary<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">String</span>, Collection<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> oStream <span class=\"kw1\">As</span> StreamReader <span class=\"sy0\">=</span> <span class=\"kw1\">Nothing</span><br/>    <span class=\"kw1\">Dim</span> sLines<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Nothing</span><br/>    <span class=\"kw1\">Dim</span> sSorted <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Nothing</span><br/>    <span class=\"kw1\">Dim</span> iHighCount <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Dim</span> iMaxKeyLength <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Dim</span> sOutput <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    oStream <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> StreamReader<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><br/>    sLines <span class=\"sy0\">=</span> oStream<span class=\"sy0\">.</span><span class=\"me1\">ReadToEnd</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=SPLIT+site:msdn.microsoft.com\"><span class=\"kw7\">Split</span></a><span class=\"br0\">(</span><span class=\"kw1\">New</span> <span class=\"kw2\">String</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>vbCrLf<span class=\"br0\">}</span>, StringSplitOptions<span class=\"sy0\">.</span><span class=\"me1\">RemoveEmptyEntries</span><span class=\"br0\">)</span><br/>    oStream<span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=CLOSE+site:msdn.microsoft.com\"><span class=\"kw7\">Close</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> sLines<span class=\"sy0\">.</span><span class=\"me1\">GetUpperBound</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      sSorted <span class=\"sy0\">=</span> SortCharacters<span class=\"br0\">(</span>sLines<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> sWords<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span>sSorted<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> sWords<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>sSorted, <span class=\"kw1\">New</span> Collection<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      sWords<span class=\"br0\">(</span>sSorted<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>sLines<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">If</span> sWords<span class=\"br0\">(</span>sSorted<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> iHighCount <span class=\"kw1\">Then</span><br/>        iHighCount <span class=\"sy0\">=</span> sWords<span class=\"br0\">(</span>sSorted<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> sSorted<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> iMaxKeyLength <span class=\"kw1\">Then</span> iMaxKeyLength <span class=\"sy0\">=</span> sSorted<span class=\"sy0\">.</span><span class=\"me1\">Length</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> sKey <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"kw1\">In</span> sWords<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><br/>      <span class=\"kw1\">If</span> sWords<span class=\"br0\">(</span>sKey<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">=</span> iHighCount <span class=\"kw1\">Then</span><br/>        sOutput <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"[\"</span> <span class=\"sy0\">&amp;</span> sKey<span class=\"sy0\">.</span><span class=\"me1\">ToUpper</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.google.com/search?q=SPACE+site:msdn.microsoft.com\"><span class=\"kw7\">Space</span></a><span class=\"br0\">(</span>iMaxKeyLength <span class=\"sy0\">-</span> sKey<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw2\">String</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=JOIN+site:msdn.microsoft.com\"><span class=\"kw7\">Join</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, sWords<span class=\"br0\">(</span>sKey<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> vbCrLf<br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sOutput<span class=\"br0\">)</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>  <span class=\"kw1\">Private</span> <span class=\"kw1\">Function</span> SortCharacters<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> s <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> sReturn<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Char</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> sTemp <span class=\"kw1\">As</span> <span class=\"kw1\">Char</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Nothing</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> sReturn<span class=\"sy0\">.</span><span class=\"me1\">GetUpperBound</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span>sReturn<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>sReturn<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        sTemp <span class=\"sy0\">=</span> sReturn<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        sReturn<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> sReturn<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        sReturn<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sTemp<br/>        i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> <span class=\"kw4\">CStr</span><span class=\"br0\">(</span>sReturn<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "Yabasic", "loc": 81, "block": "<pre class=\"text highlighted_source\">filename$ = \"unixdict.txt\"<br/>maxw = 0\u00a0: c = 0\u00a0: dimens(c)<br/>i = 0<br/>dim p(100)<br/>\u00a0<br/>if (not open(1,filename$)) error \"Could not open '\"+filename$+\"' for reading\"<br/>\u00a0<br/>print \"Be patient, please ...\\n\"<br/>\u00a0<br/>while(not eof(1)) <br/>  line input #1 a$<br/>  c = c + 1<br/>  p$(c) = a$<br/>  po$(c) = sort$(lower$(a$))<br/>  count = 0<br/>  head = 0<br/>  insert(1)<br/>  if not(mod(c, 10)) dimens(c)<br/>wend<br/>\u00a0<br/>for n = 1 to i<br/>\tnw = p(n)<br/>\trepeat<br/>\t\tprint p$(nw),\" \";<br/>\t\tnw = d(nw,2)<br/>\tuntil(not nw)<br/>\tprint<br/>next n<br/>\u00a0<br/>print \"\\n\", peek(\"secondsrunning\"), \" sec\"<br/>\u00a0<br/>sub sort$(a$)<br/>\tlocal n, i, t$, c1$, c2$<br/>\u00a0<br/>\tfor n = 1 to len(a$) - 1<br/>\t\tfor i = n + 1 to len(a$)<br/>\t\t\tc1$ = mid$(a$, n, 1)\u00a0: c2$ = mid$(a$, i, 1)<br/>\t\t\tif c1$ &gt; c2$ then<br/>\t\t\t\tt$ = c1$<br/>\t\t\t\tc1$ = c2$<br/>\t\t\t\tc2$ = t$<br/>\t\t\t\tmid$(a$, n, 1) = c1$\u00a0: mid$(a$, i, 1) = c2$<br/>\t\t\tend if<br/>\t\tnext i<br/>\tnext n<br/>\treturn a$<br/>end sub<br/>\u00a0<br/>sub dimens(c)<br/>\tredim p$(c + 10)<br/>\tredim po$(c + 10)<br/>\tredim d(c + 10, 3)<br/>end sub<br/>\u00a0<br/>sub insert(j)<br/>\tlocal p<br/>\u00a0<br/>\tif po$(c) &lt; po$(j) then<br/>\t\tp = 1<br/>\telseif po$(c) = po$(j) then<br/>\t\tp = 2<br/>\t\tif count = 0 head = j<br/>\t\tcount = count + 1<br/>\t\tif count &gt; maxw then<br/>  \t\t\ti = 1<br/>  \t\t\tp(i) = head<br/>  \t\t\tmaxw = count<br/>  \t\telseif count = maxw then<br/>  \t\t\ti = i + 1<br/>  \t\t\tp(i) = head<br/>  \t\tend if<br/>\telse<br/>\t\tp = 3<br/>\tend if<br/>\u00a0<br/>\tif d(j,p) then<br/>\t\tinsert(d(j,p))<br/>\telse<br/>\t\td(j,p) = c<br/>\tend if<br/>end sub</pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">File(\"unixdict.txt\").read(*)  // dictionary file to blob, copied from web<br/>   // blob to dictionary: key is word \"fuzzed\", values are anagram words<br/>   .pump(Void,T(fcn(w,d){ <br/>      key:=w.split(\"\").sort().concat();  // fuzz word to key<br/>      d.appendV(key,w);  // add or append w<br/>   },d:=Dictionary(0d60_000)));<br/>\u00a0<br/>d.filter(fcn([(k,v)]){ v.len()&gt;3 })  // prune to list of # words &gt; 3<br/>   .sort(fcn([(_,v1)],[(_,v2)]){ v1.len()&gt;v2.len() }) // sort by word count<br/>   [0,10].pump(Console.println,'wrap([(zz,v)]){    // and print 10 biggest<br/>\t\"%d:%s:\u00a0%s\".fmt(v.len(),zz.strip(),<br/>\t    v.apply(\"strip\").concat(\",\"))<br/>   });</pre>"}]}