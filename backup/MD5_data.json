{"task": "MD5", "blocks": [{"lang": "8th", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"md5\" cr:hash! \"Some text\" cr:hash cr:hash&gt;s <br/>. cr bye<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">MD5</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> MD5_Digest <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Put<span class=\"br0\">(</span>GNAT.<span class=\"me1\">MD5</span>.<span class=\"me1\">Digest</span><span class=\"br0\">(</span><span class=\"st0\">\"Foo bar baz\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> MD5_Digest;</pre>"}, {"lang": "ALGOL 68", "loc": 153, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># Based on wikipedia article pseudocode #</span><br/>\u00a0<br/><span class=\"coMULTI\"># s specifies the per-round shift amounts #</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> s <span class=\"sy1\">=</span> <span class=\"br0\">(</span>7<span class=\"sy1\">,</span>12<span class=\"sy1\">,</span>17<span class=\"sy1\">,</span>22<span class=\"sy1\">,</span> 7<span class=\"sy1\">,</span>12<span class=\"sy1\">,</span>17<span class=\"sy1\">,</span>22<span class=\"sy1\">,</span> 7<span class=\"sy1\">,</span>12<span class=\"sy1\">,</span>17<span class=\"sy1\">,</span>22<span class=\"sy1\">,</span> 7<span class=\"sy1\">,</span>12<span class=\"sy1\">,</span>17<span class=\"sy1\">,</span>22<span class=\"sy1\">,</span><br/>           5<span class=\"sy1\">,</span> 9<span class=\"sy1\">,</span>14<span class=\"sy1\">,</span>20<span class=\"sy1\">,</span> 5<span class=\"sy1\">,</span> 9<span class=\"sy1\">,</span>14<span class=\"sy1\">,</span>20<span class=\"sy1\">,</span> 5<span class=\"sy1\">,</span> 9<span class=\"sy1\">,</span>14<span class=\"sy1\">,</span>20<span class=\"sy1\">,</span> 5<span class=\"sy1\">,</span> 9<span class=\"sy1\">,</span>14<span class=\"sy1\">,</span>20<span class=\"sy1\">,</span><br/>           4<span class=\"sy1\">,</span>11<span class=\"sy1\">,</span>16<span class=\"sy1\">,</span>23<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span>11<span class=\"sy1\">,</span>16<span class=\"sy1\">,</span>23<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span>11<span class=\"sy1\">,</span>16<span class=\"sy1\">,</span>23<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span>11<span class=\"sy1\">,</span>16<span class=\"sy1\">,</span>23<span class=\"sy1\">,</span><br/>           6<span class=\"sy1\">,</span>10<span class=\"sy1\">,</span>15<span class=\"sy1\">,</span>21<span class=\"sy1\">,</span> 6<span class=\"sy1\">,</span>10<span class=\"sy1\">,</span>15<span class=\"sy1\">,</span>21<span class=\"sy1\">,</span> 6<span class=\"sy1\">,</span>10<span class=\"sy1\">,</span>15<span class=\"sy1\">,</span>21<span class=\"sy1\">,</span> 6<span class=\"sy1\">,</span>10<span class=\"sy1\">,</span>15<span class=\"sy1\">,</span>21<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">BITS</span> k <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"re0\">16rd76aa478</span><span class=\"sy1\">,</span> <span class=\"re0\">16re8c7b756</span><span class=\"sy1\">,</span> <span class=\"re0\">16r242070db</span><span class=\"sy1\">,</span> <span class=\"re0\">16rc1bdceee</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16rf57c0faf</span><span class=\"sy1\">,</span> <span class=\"re0\">16r4787c62a</span><span class=\"sy1\">,</span> <span class=\"re0\">16ra8304613</span><span class=\"sy1\">,</span> <span class=\"re0\">16rfd469501</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16r698098d8</span><span class=\"sy1\">,</span> <span class=\"re0\">16r8b44f7af</span><span class=\"sy1\">,</span> <span class=\"re0\">16rffff5bb1</span><span class=\"sy1\">,</span> <span class=\"re0\">16r895cd7be</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16r6b901122</span><span class=\"sy1\">,</span> <span class=\"re0\">16rfd987193</span><span class=\"sy1\">,</span> <span class=\"re0\">16ra679438e</span><span class=\"sy1\">,</span> <span class=\"re0\">16r49b40821</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16rf61e2562</span><span class=\"sy1\">,</span> <span class=\"re0\">16rc040b340</span><span class=\"sy1\">,</span> <span class=\"re0\">16r265e5a51</span><span class=\"sy1\">,</span> <span class=\"re0\">16re9b6c7aa</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16rd62f105d</span><span class=\"sy1\">,</span> <span class=\"re0\">16r02441453</span><span class=\"sy1\">,</span> <span class=\"re0\">16rd8a1e681</span><span class=\"sy1\">,</span> <span class=\"re0\">16re7d3fbc8</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16r21e1cde6</span><span class=\"sy1\">,</span> <span class=\"re0\">16rc33707d6</span><span class=\"sy1\">,</span> <span class=\"re0\">16rf4d50d87</span><span class=\"sy1\">,</span> <span class=\"re0\">16r455a14ed</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16ra9e3e905</span><span class=\"sy1\">,</span> <span class=\"re0\">16rfcefa3f8</span><span class=\"sy1\">,</span> <span class=\"re0\">16r676f02d9</span><span class=\"sy1\">,</span> <span class=\"re0\">16r8d2a4c8a</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16rfffa3942</span><span class=\"sy1\">,</span> <span class=\"re0\">16r8771f681</span><span class=\"sy1\">,</span> <span class=\"re0\">16r6d9d6122</span><span class=\"sy1\">,</span> <span class=\"re0\">16rfde5380c</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16ra4beea44</span><span class=\"sy1\">,</span> <span class=\"re0\">16r4bdecfa9</span><span class=\"sy1\">,</span> <span class=\"re0\">16rf6bb4b60</span><span class=\"sy1\">,</span> <span class=\"re0\">16rbebfbc70</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16r289b7ec6</span><span class=\"sy1\">,</span> <span class=\"re0\">16reaa127fa</span><span class=\"sy1\">,</span> <span class=\"re0\">16rd4ef3085</span><span class=\"sy1\">,</span> <span class=\"re0\">16r04881d05</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16rd9d4d039</span><span class=\"sy1\">,</span> <span class=\"re0\">16re6db99e5</span><span class=\"sy1\">,</span> <span class=\"re0\">16r1fa27cf8</span><span class=\"sy1\">,</span> <span class=\"re0\">16rc4ac5665</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16rf4292244</span><span class=\"sy1\">,</span> <span class=\"re0\">16r432aff97</span><span class=\"sy1\">,</span> <span class=\"re0\">16rab9423a7</span><span class=\"sy1\">,</span> <span class=\"re0\">16rfc93a039</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16r655b59c3</span><span class=\"sy1\">,</span> <span class=\"re0\">16r8f0ccc92</span><span class=\"sy1\">,</span> <span class=\"re0\">16rffeff47d</span><span class=\"sy1\">,</span> <span class=\"re0\">16r85845dd1</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16r6fa87e4f</span><span class=\"sy1\">,</span> <span class=\"re0\">16rfe2ce6e0</span><span class=\"sy1\">,</span> <span class=\"re0\">16ra3014314</span><span class=\"sy1\">,</span> <span class=\"re0\">16r4e0811a1</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re0\">16rf7537e82</span><span class=\"sy1\">,</span> <span class=\"re0\">16rbd3af235</span><span class=\"sy1\">,</span> <span class=\"re0\">16r2ad7d2bb</span><span class=\"sy1\">,</span> <span class=\"re0\">16reb86d391</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"kw3\">BITS</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">BITS</span> c <span class=\"sy1\">=</span> <span class=\"kw8\">BIN</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>a <span class=\"kw16\">AND</span> <span class=\"re0\">16rffff</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>b <span class=\"kw16\">AND</span> <span class=\"re0\">16rffff</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">BITS</span> d <span class=\"sy1\">=</span> <span class=\"kw8\">BIN</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>a <span class=\"kw11\">SHR</span> 16<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>b <span class=\"kw11\">SHR</span> 16<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>c <span class=\"kw11\">SHR</span> 16<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"br0\">(</span>c <span class=\"kw16\">AND</span> <span class=\"re0\">16rffff</span><span class=\"br0\">)</span> <span class=\"kw16\">OR</span> <span class=\"br0\">(</span>d <span class=\"kw11\">SHL</span> 16<span class=\"br0\">)</span><br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">#[0:63]LONG INT k;<br/>FOR i FROM 0 TO 63 DO <br/>   k[i]\u00a0:=  ENTIER (ABS (sin(i+1)) * LONG INT(2)**32)<br/>OD;#</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> md5 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> intext<span class=\"br0\">)</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span> <br/>      <span class=\"coMULTI\"># Initialize variables: #</span><br/>      <span class=\"kw3\">BITS</span> a0 <span class=\"sy1\">:=</span> <span class=\"re0\">16r67452301</span><span class=\"sy1\">,</span><br/>           a1 <span class=\"sy1\">:=</span> <span class=\"re0\">16refcdab89</span><span class=\"sy1\">,</span><br/>           a2 <span class=\"sy1\">:=</span> <span class=\"re0\">16r98badcfe</span><span class=\"sy1\">,</span><br/>           a3 <span class=\"sy1\">:=</span> <span class=\"re0\">16r10325476</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"kw3\">STRING</span> text <span class=\"sy1\">:=</span> intext<span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"coMULTI\"># Pre-processing: adding a single 1 bit #</span><br/>      text <span class=\"sy1\">+:=</span> <span class=\"kw8\">REPR</span> 128<span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"coMULTI\"># Pre-processing: padding with zeros<br/>        append \"0\" bit until message length in bits \u2261 448 (mod 512) #</span><br/>      <span class=\"kw2\">WHILE</span> ELEMS text <span class=\"kw12\">MOD</span> 64 <span class=\"sy1\">\u2260</span> 56 <span class=\"kw2\">DO</span> <br/>         text <span class=\"sy1\">+:=</span> <span class=\"kw8\">REPR</span> 0<br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"coMULTI\"># append original length in bits mod (2 pow 64) to message #</span><br/>      text <span class=\"sy1\">+:=</span> dec2asc <span class=\"br0\">(</span>ELEMS intext <span class=\"sy1\">*</span> 8<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"coMULTI\"># MD5 rounds #</span><br/>      <span class=\"coMULTI\"># Process the message in successive 512-bit chunks: #</span><br/>      <span class=\"kw2\">WHILE</span> text <span class=\"sy1\">\u2260</span> <span class=\"st0\">\"\"</span> <span class=\"kw2\">DO</span> <br/>\t <span class=\"coMULTI\"># for each 512-bit (64 byte) chunk of message #</span><br/>\t <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> chunk <span class=\"sy1\">=</span> text<span class=\"br0\">[</span>1<span class=\"sy1\">:</span>64<span class=\"br0\">]</span><span class=\"sy1\">;</span> text <span class=\"sy1\">:=</span> text<span class=\"br0\">[</span>65<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t <span class=\"coMULTI\"># break chunk into sixteen 32-bit words M[j], 0 &lt;= j &lt;= 15 #</span><br/>\t <span class=\"br0\">[</span>0<span class=\"sy1\">:</span>15<span class=\"br0\">]</span><span class=\"kw3\">BITS</span> m<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 15 <span class=\"kw2\">DO</span> <br/>             m<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw8\">BIN</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span> chunk<span class=\"br0\">[</span>j<span class=\"sy1\">*</span>4<span class=\"sy1\">+</span>1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw16\">OR</span> <br/>\t             <span class=\"kw8\">BIN</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span> chunk<span class=\"br0\">[</span>j<span class=\"sy1\">*</span>4<span class=\"sy1\">+</span>2<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw11\">SHL</span> 8 <span class=\"kw16\">OR</span> <br/>\t             <span class=\"kw8\">BIN</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span> chunk<span class=\"br0\">[</span>j<span class=\"sy1\">*</span>4<span class=\"sy1\">+</span>3<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw11\">SHL</span> 16 <span class=\"kw16\">OR</span> <br/>\t             <span class=\"kw8\">BIN</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span> chunk<span class=\"br0\">[</span>j<span class=\"sy1\">*</span>4<span class=\"sy1\">+</span>4<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw11\">SHL</span> 24<br/>          <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>          <span class=\"kw3\">INT</span> g<span class=\"sy1\">;</span><br/>\t  <span class=\"kw3\">BITS</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> f<span class=\"sy1\">,</span> dtemp<span class=\"sy1\">;</span><br/>\u00a0<br/>\t  <span class=\"coMULTI\"># Initialize hash value for this chunk #</span><br/>\t  a <span class=\"sy1\">:=</span> a0<span class=\"sy1\">;</span><br/>          b <span class=\"sy1\">:=</span> a1<span class=\"sy1\">;</span><br/>          c <span class=\"sy1\">:=</span> a2<span class=\"sy1\">;</span><br/>          d <span class=\"sy1\">:=</span> a3<span class=\"sy1\">;</span><br/>          <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 63 <span class=\"kw2\">DO</span> <br/>             <span class=\"kw2\">IF</span> 0 <span class=\"sy1\">&lt;=</span> i <span class=\"kw16\">AND</span> i <span class=\"sy1\">&lt;=</span> 15 <span class=\"kw2\">THEN</span><br/>\t\tf <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>b <span class=\"kw16\">AND</span> c<span class=\"br0\">)</span> <span class=\"kw16\">OR</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw8\">NOT</span> b<span class=\"br0\">)</span> <span class=\"kw16\">AND</span> d<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tg <span class=\"sy1\">:=</span> i<br/>\t     <span class=\"kw2\">ELIF</span> 16 <span class=\"sy1\">&lt;=</span> i <span class=\"kw16\">AND</span> i <span class=\"sy1\">&lt;=</span> 31 <span class=\"kw2\">THEN</span> <br/>\t\t f <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>d <span class=\"kw16\">AND</span> b<span class=\"br0\">)</span> <span class=\"kw16\">OR</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw8\">NOT</span> d<span class=\"br0\">)</span> <span class=\"kw16\">AND</span> c<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t g <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>5<span class=\"sy1\">\u00d7</span>i <span class=\"sy1\">+</span> 1<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> 16<br/>\t     <span class=\"kw2\">ELIF</span> 32 <span class=\"sy1\">&lt;=</span> i <span class=\"kw16\">AND</span> i <span class=\"sy1\">&lt;=</span> 47 <span class=\"kw2\">THEN</span> <br/>\t\t f <span class=\"sy1\">:=</span> b XOR c XOR d<span class=\"sy1\">;</span><br/>\t\t g <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>3<span class=\"sy1\">\u00d7</span>i <span class=\"sy1\">+</span> 5<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> 16<br/>\t     <span class=\"kw2\">ELIF</span> 48 <span class=\"sy1\">&lt;=</span> i <span class=\"kw16\">AND</span> i <span class=\"sy1\">&lt;=</span> 63 <span class=\"kw2\">THEN</span> <br/>\t\t f <span class=\"sy1\">:=</span> c XOR <span class=\"br0\">(</span>b <span class=\"kw16\">OR</span> <span class=\"br0\">(</span><span class=\"kw8\">NOT</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t g <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>7<span class=\"sy1\">\u00d7</span>i<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> 16<br/>\t     <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\t     dtemp <span class=\"sy1\">:=</span> d<span class=\"sy1\">;</span><br/>\t     d <span class=\"sy1\">:=</span> c<span class=\"sy1\">;</span><br/>\t     c <span class=\"sy1\">:=</span> b<span class=\"sy1\">;</span><br/>\t     b <span class=\"sy1\">:=</span> b <span class=\"sy1\">+</span> leftrotate <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy1\">+</span> f <span class=\"sy1\">+</span> k<span class=\"br0\">[</span>1<span class=\"sy1\">+</span>i<span class=\"br0\">]</span> <span class=\"sy1\">+</span> m<span class=\"br0\">[</span>g<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> s<span class=\"br0\">[</span>1<span class=\"sy1\">+</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t     a <span class=\"sy1\">:=</span> dtemp<br/>          <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\t  <span class=\"coMULTI\"># Add this chunk's hash to result so far #</span><br/>          a0 <span class=\"sy1\">:=</span> a0 <span class=\"sy1\">+</span> a<span class=\"sy1\">;</span><br/>          a1 <span class=\"sy1\">:=</span> a1 <span class=\"sy1\">+</span> b<span class=\"sy1\">;</span><br/>          a2 <span class=\"sy1\">:=</span> a2 <span class=\"sy1\">+</span> c<span class=\"sy1\">;</span><br/>          a3 <span class=\"sy1\">:=</span> a3 <span class=\"sy1\">+</span> d<br/>       <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>       revhex <span class=\"br0\">(</span>a0<span class=\"br0\">)</span> <span class=\"sy1\">+</span> revhex <span class=\"br0\">(</span>a1<span class=\"br0\">)</span> <span class=\"sy1\">+</span> revhex <span class=\"br0\">(</span>a2<span class=\"br0\">)</span> <span class=\"sy1\">+</span> revhex <span class=\"br0\">(</span>a3<span class=\"br0\">)</span><br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> leftrotate <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> x<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> c<span class=\"br0\">)</span> <span class=\"kw3\">BITS</span><span class=\"sy1\">:</span><br/>    <span class=\"br0\">(</span>x <span class=\"kw11\">SHL</span> c<span class=\"br0\">)</span> <span class=\"kw16\">OR</span> <span class=\"br0\">(</span>x <span class=\"kw11\">SHR</span> <span class=\"br0\">(</span>32<span class=\"sy1\">-</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># dec2asc: dec to 8 byte asc #</span><br/><span class=\"kw4\">PROC</span> dec2asc <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> nn<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">STRING</span> h <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span> <span class=\"kw3\">INT</span> n <span class=\"sy1\">:=</span> nn<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 8 <span class=\"kw2\">DO</span> <br/>         h <span class=\"sy1\">+:=</span> <span class=\"kw8\">REPR</span> <span class=\"br0\">(</span>n <span class=\"kw12\">MOD</span> 256<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         n <span class=\"sy1\">\u00f7:=</span> 256<br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      h<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw4\">PROC</span> revhex <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> x<span class=\"br0\">)</span> <span class=\"kw3\">STRING</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span> <span class=\"coMULTI\"># Convert to lowercase hexadecimal STRING #</span><br/>      <span class=\"kw4\">PROC</span> hexdig <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> x<span class=\"br0\">)</span> <span class=\"kw3\">CHAR</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"kw8\">REPR</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">&lt;=</span> 9 <span class=\"sy1\">|</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">-</span> 10 <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      hexdig <span class=\"br0\">(</span>x <span class=\"kw11\">SHR</span> 4 <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>      hexdig <span class=\"br0\">(</span>x <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>      hexdig <span class=\"br0\">(</span>x <span class=\"kw11\">SHR</span> 12 <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>      hexdig <span class=\"br0\">(</span>x <span class=\"kw11\">SHR</span> 8 <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>      hexdig <span class=\"br0\">(</span>x <span class=\"kw11\">SHR</span> 20 <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>      hexdig <span class=\"br0\">(</span>x <span class=\"kw11\">SHR</span> 16 <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>      hexdig <span class=\"br0\">(</span>x <span class=\"kw11\">SHR</span> 28 <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>      hexdig <span class=\"br0\">(</span>x <span class=\"kw11\">SHR</span> 24 <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">STRING</span> testmsg <span class=\"sy1\">=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">STRING</span> checksum <span class=\"sy1\">=</span> <span class=\"st0\">\"9e107d9d372bb6826bd81d3542a419d6\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>testmsg<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>checksum<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">STRING</span> test <span class=\"sy1\">=</span> md5 <span class=\"br0\">(</span>testmsg<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">IF</span> test <span class=\"sy1\">=</span> checksum <span class=\"kw2\">THEN</span><br/>   <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"passed\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>test<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">ELSE</span><br/>   <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"failed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">FI</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 12, "block": "<pre class=\"autohotkey highlighted_source\">data <span class=\"sy0\">:=</span> <span class=\"st0\">\"abc\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MD5<span class=\"br0\">(</span>data<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; 900150983cd24fb0d6963f7d28e17f72</span><br/>\u00a0<br/>MD5<span class=\"br0\">(</span> ByRef V<span class=\"sy0\">,</span> L<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span> MD5_CTX<span class=\"sy0\">,</span><span class=\"nu0\">104</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"advapi32\\MD5Init\"</span><span class=\"sy0\">,</span> Str<span class=\"sy0\">,</span>MD5_CTX <span class=\"br0\">)</span> <br/> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"advapi32\\MD5Update\"</span><span class=\"sy0\">,</span> Str<span class=\"sy0\">,</span>MD5_CTX<span class=\"sy0\">,</span> Str<span class=\"sy0\">,</span>V<span class=\"sy0\">,</span> UInt<span class=\"sy0\">,</span>L\u00a0? L\u00a0: <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>V<span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"advapi32\\MD5Final\"</span><span class=\"sy0\">,</span> Str<span class=\"sy0\">,</span>MD5_CTX <span class=\"br0\">)</span> <br/> <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span> Hex<span class=\"sy0\">:=</span><span class=\"st0\">\"123456789ABCDEF0\"</span> <span class=\"br0\">)</span> <br/>  N <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumGet</span></a><span class=\"br0\">(</span> MD5_CTX<span class=\"sy0\">,</span><span class=\"nu0\">87</span><span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span><span class=\"st0\">\"Char\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> MD5 <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Hex<span class=\"sy0\">,</span>N<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Hex<span class=\"sy0\">,</span>N<span class=\"sy0\">&amp;</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">Return</span> MD5 <br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 18, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/>PRAGMA INCLUDE &lt;stdio.<span class=\"me1\">h</span>&gt;<br/>PRAGMA INCLUDE &lt;stdlib.<span class=\"me1\">h</span>&gt;<br/>PRAGMA INCLUDE &lt;<span class=\"kw1\">string</span>.<span class=\"me1\">h</span>&gt;<br/>PRAGMA INCLUDE &lt;openssl/md5.<span class=\"me1\">h</span>&gt;<br/>PRAGMA LDFLAGS -lcrypto -lm -w <br/>\u00a0<br/><span class=\"kw1\">DECLARE</span> result <span class=\"kw1\">TYPE</span> <span class=\"kw1\">unsigned</span> char *<br/><span class=\"kw1\">DECLARE</span> <span class=\"kw1\">string</span> <span class=\"kw1\">TYPE</span> <span class=\"kw1\">const</span> char *<br/>\u00a0<br/><span class=\"kw1\">string</span> = <span class=\"st0\">\"Rosetta code\"</span><br/>strlenght = <span class=\"kw1\">LEN</span><span class=\"br0\">(</span><span class=\"kw1\">string</span><span class=\"br0\">)</span><br/>\u00a0<br/>result = MD5<span class=\"br0\">(</span> <span class=\"kw1\">string</span>, strlenght , <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span>  i = <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> MD5_DIGEST_LENGTH-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">PRINT</span>   result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> FORMAT <span class=\"st0\">\"%02x\"</span><br/><span class=\"kw1\">NEXT</span></pre>"}, {"lang": "BaCon", "loc": 18, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/>PRAGMA INCLUDE &lt;stdio.<span class=\"me1\">h</span>&gt;<br/>PRAGMA INCLUDE &lt;stdlib.<span class=\"me1\">h</span>&gt;<br/>PRAGMA INCLUDE &lt;<span class=\"kw1\">string</span>.<span class=\"me1\">h</span>&gt;<br/>PRAGMA INCLUDE &lt;openssl/md5.<span class=\"me1\">h</span>&gt;<br/>PRAGMA LDFLAGS -lcrypto -lm -w <br/>\u00a0<br/><span class=\"kw1\">DECLARE</span> result <span class=\"kw1\">TYPE</span> <span class=\"kw1\">unsigned</span> char *<br/><span class=\"kw1\">DECLARE</span> <span class=\"kw1\">string</span> <span class=\"kw1\">TYPE</span> <span class=\"kw1\">const</span> char *<br/>\u00a0<br/><span class=\"kw1\">string</span> = <span class=\"st0\">\"Rosetta code\"</span><br/>strlenght = <span class=\"kw1\">LEN</span><span class=\"br0\">(</span><span class=\"kw1\">string</span><span class=\"br0\">)</span><br/>\u00a0<br/>result = MD5<span class=\"br0\">(</span> <span class=\"kw1\">string</span>, strlenght , <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span>  i = <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> MD5_DIGEST_LENGTH-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">PRINT</span>   result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> FORMAT <span class=\"st0\">\"%02x\"</span><br/><span class=\"kw1\">NEXT</span></pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      PRINT FN_MD5(\"\")<br/>      PRINT FN_MD5(\"a\")<br/>      PRINT FN_MD5(\"abc\")<br/>      PRINT FN_MD5(\"message digest\")<br/>      PRINT FN_MD5(\"abcdefghijklmnopqrstuvwxyz\")<br/>      PRINT FN_MD5(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")<br/>      PRINT FN_MD5(STRING$(8,\"1234567890\"))<br/>      END<br/>\u00a0<br/>      DEF FN_MD5(message$)<br/>      LOCAL I%, MD5$, MD5_CTX{}<br/>      DIM MD5_CTX{i%(1), buf%(3), in&amp;(63), digest&amp;(15)}<br/>      SYS \"MD5Init\", MD5_CTX{}<br/>      SYS \"MD5Update\", MD5_CTX{}, message$, LEN(message$)<br/>      SYS \"MD5Final\", MD5_CTX{}<br/>      FOR I% = 0 TO 15<br/>        MD5$ += RIGHT$(\"0\"+STR$~(MD5_CTX.digest&amp;(I%)),2)<br/>      NEXT<br/>      = MD5$</pre>"}, {"lang": "C", "loc": 21, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;openssl/md5.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>string <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> result<span class=\"br0\">[</span>MD5_DIGEST_LENGTH<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  MD5<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">,</span> result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// output</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> MD5_DIGEST_LENGTH<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span><span class=\"sy0\">,</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 20, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include \"Poco/MD5Engine.h\"</span><br/><span class=\"co2\">#include \"Poco/DigestStream.h\"</span><br/>\u00a0<br/><span class=\"kw2\">using</span> Poco<span class=\"sy4\">::</span><span class=\"me2\">DigestEngine</span> <span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> Poco<span class=\"sy4\">::</span><span class=\"me2\">MD5Engine</span> <span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> Poco<span class=\"sy4\">::</span><span class=\"me2\">DigestOutputStream</span> <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> myphrase <span class=\"br0\">(</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   MD5Engine md5 <span class=\"sy4\">;</span><br/>   DigestOutputStream outstr<span class=\"br0\">(</span> md5 <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   outstr <span class=\"sy1\">&lt;&lt;</span> myphrase <span class=\"sy4\">;</span><br/>   outstr.<span class=\"me1\">flush</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <span class=\"co1\">//to pass everything to the digest engine</span><br/>   <span class=\"kw4\">const</span> DigestEngine<span class=\"sy4\">::</span><span class=\"me2\">Digest</span><span class=\"sy3\">&amp;</span> digest <span class=\"sy1\">=</span> md5.<span class=\"me1\">digest</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> myphrase <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" as a MD5 digest\u00a0:<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> DigestEngine<span class=\"sy4\">::</span><span class=\"me2\">digestToHex</span><span class=\"br0\">(</span> digest <span class=\"br0\">)</span> <br/>      <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 6, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Security.Cryptography</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data <span class=\"sy0\">=</span> Encoding<span class=\"sy0\">.</span><span class=\"me1\">ASCII</span><span class=\"sy0\">.</span><span class=\"me1\">GetBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> hash <span class=\"sy0\">=</span> MD5<span class=\"sy0\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ComputeHash</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>BitConverter<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>hash<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 1, "block": "<pre>USER&gt;set hash=$System.Encryption.MD5Hash(\"The quick brown fox jumped over the lazy dog's back\")\nUSER&gt;zzdump hash\n0000: E3 8C A1 D9 20 C4 B8 B8 D3 94 6B 2C 72 F0 16 80</pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">apply</span> str<br/>  <span class=\"br0\">(</span>map <span class=\"br0\">(</span>partial format <span class=\"st0\">\"%02x\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">.</span>digest <span class=\"br0\">(</span>doto <span class=\"br0\">(</span>java<span class=\"sy0\">.</span>security<span class=\"sy0\">.</span>MessageDigest/getInstance <span class=\"st0\">\"MD5\"</span><span class=\"br0\">)</span><br/>                   <span class=\"sy0\">.</span>reset<br/>                   <span class=\"br0\">(</span><span class=\"sy0\">.</span>update <span class=\"br0\">(</span><span class=\"sy0\">.</span>getBytes <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> 'ironclad<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> md5 <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">byte-array-to-hex-string</span><br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">digest-sequence</span> <span class=\"sy0\">:</span><span class=\"me1\">md5</span> <br/>                              <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">ascii-string-to-byte-</span><span class=\"kw1\">array</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defvar *tests* '<span class=\"br0\">(</span><span class=\"st0\">\"\"</span> <br/>                  <span class=\"st0\">\"a\"</span><br/>                  <span class=\"st0\">\"abc\"</span><br/>                  <span class=\"st0\">\"message digest\"</span><br/>                  <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>                  <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"</span><br/>                  <span class=\"st0\">\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>msg *tests*<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format T <span class=\"st0\">\"~s: ~a~%\"</span> msg <span class=\"br0\">(</span>md5 msg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">digest</span>.<span class=\"me1\">md</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> txt <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%02x%)\"</span><span class=\"sy0\">,</span> txt.<span class=\"me1\">md5Of</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 27, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> MD5Hash<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span><br/>  IdHashMessageDigest<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> MD5<span class=\"br0\">(</span>aValue<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">with</span> TIdHashMessageDigest5<span class=\"sy1\">.</span><span class=\"me1\">Create</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> HashStringAsHex<span class=\"br0\">(</span>aValue<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Free<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>MD5<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>MD5<span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>MD5<span class=\"br0\">(</span><span class=\"st0\">'abc'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>MD5<span class=\"br0\">(</span><span class=\"st0\">'message digest'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>MD5<span class=\"br0\">(</span><span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>MD5<span class=\"br0\">(</span><span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>MD5<span class=\"br0\">(</span><span class=\"st0\">'12345678901234567890123456789012345678901234567890123456789012345678901234567890'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 10, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeMessageDigest <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>import<span class=\"sy0\">:</span>java.<span class=\"me1\">security</span>.<span class=\"me1\">makeMessageDigest</span><span class=\"sy0\">&gt;</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> sprintf <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>import<span class=\"sy0\">:</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">makeString</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">format</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> digest <span class=\"sy0\">:=</span> makeMessageDigest.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"MD5\"</span><span class=\"br0\">)</span> \\<br/>  .<span class=\"me1\">digest</span><span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"iso-8859-1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> b <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> digest <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Emacs Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>md5 <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span><br/><span class=\"st0\">\"e38ca1d920c4b8b8d3946b2c72f01680\"</span></pre>"}, {"lang": "Erlang", "loc": 7, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>tests<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>md5<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">md5</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_upper</span><span class=\"br0\">(</span><br/>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~2.16.0b\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">N</span><span class=\"sy2\">&gt;&gt;</span> <span class=\"sy3\">&lt;=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">md5</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/> <span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 9, "block": "<pre class=\"text highlighted_source\">let md5ootb (msg: string) =<br/>  use md5 = System.Security.Cryptography.MD5.Create()<br/>  msg<br/>  |&gt; System.Text.Encoding.ASCII.GetBytes<br/>  |&gt; md5.ComputeHash<br/>  |&gt; Seq.map (fun c -&gt; c.ToString(\"X2\"))<br/>  |&gt; Seq.reduce ( + )<br/>\u00a0<br/>md5ootb @\"The quick brown fox jumped over the lazy dog's back\"</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>USING: kernel strings io checksums checksums.md5\u00a0;\n\"The quick brown fox jumps over the lazy dog\"\nmd5 checksum-bytes hex-string print\n</pre>"}, {"lang": "Forth", "loc": 18, "block": "<pre class=\"text highlighted_source\">include ffl/md5.fs<br/>\u00a0<br/>\\ Create a MD5 variable md1 in the dictionary<br/>\u00a0<br/>md5-create md1<br/>\u00a0<br/>\\ Update the variable with data<br/>\u00a0<br/>s\" The quick brown fox jumps over the lazy dog\" md1 md5-update<br/>\u00a0<br/>\\ Finish the MD5 calculation resulting in four unsigned 32 bit words<br/>\\ on the stack representing the hash value<br/>\u00a0<br/>md1 md5-finish<br/>\u00a0<br/>\\ Convert the hash value to a hex string and print it<br/>\u00a0<br/>md5+to-string type cr</pre>"}, {"lang": "Fortran", "loc": 94, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> md5_m<br/>    <span class=\"kw3\">use</span> kernel32<br/>    <span class=\"kw3\">use</span> advapi32<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">MD5LEN</span> <span class=\"sy0\">=</span> <span class=\"nu0\">16</span><br/><span class=\"co1\">contains</span><br/>    <span class=\"kw1\">subroutine</span> md5hash<span class=\"br0\">(</span><span class=\"kw1\">name</span>, hash, dwStatus, filesize<span class=\"br0\">)</span><br/>        <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><br/>        <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">BUFLEN</span> <span class=\"sy0\">=</span> <span class=\"nu0\">32768</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>HANDLE<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">hFile</span>, hProv, hHash<br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>DWORD<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">dwStatus</span>, nRead<br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>BOOL<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">status</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>BYTE<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">buffer</span><span class=\"br0\">(</span>BUFLEN<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>BYTE<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">hash</span><span class=\"br0\">(</span>MD5LEN<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>UINT64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">filesize</span><br/>\u00a0<br/>        dwStatus <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        filesize <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        hFile <span class=\"sy0\">=</span> CreateFile<span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, GENERIC_READ, FILE_SHARE_READ, NULL, <span class=\"sy0\">&amp;</span><br/>                           OPEN_EXISTING, FILE_FLAG_SEQUENTIAL_SCAN, NULL<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hFile <span class=\"sy0\">==</span> INVALID_HANDLE_VALUE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CreateFile failed.\"</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CryptAcquireContext<span class=\"br0\">(</span>hProv, NULL, NULL, PROV_RSA_FULL, <span class=\"sy0\">&amp;</span><br/>                                CRYPT_VERIFYCONTEXT<span class=\"br0\">)</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CryptAcquireContext failed.\"</span><br/>            <span class=\"kw1\">goto</span> <span class=\"nu0\">3</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CryptCreateHash<span class=\"br0\">(</span>hProv, CALG_MD5, <span class=\"nu0\">0</span>_ULONG_PTR, <span class=\"nu0\">0</span>_DWORD, hHash<span class=\"br0\">)</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CryptCreateHash failed.\"</span><br/>            <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">status</span> <span class=\"sy0\">=</span> ReadFile<span class=\"br0\">(</span>hFile, loc<span class=\"br0\">(</span>buffer<span class=\"br0\">)</span>, BUFLEN, loc<span class=\"br0\">(</span>nRead<span class=\"br0\">)</span>, NULL<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">status</span> <span class=\"sy0\">==</span> FALSE <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> nRead <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>            filesize <span class=\"sy0\">=</span> filesize <span class=\"sy0\">+</span> nRead<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CryptHashData<span class=\"br0\">(</span>hHash, buffer, nRead, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CryptHashData failed.\"</span><br/>                <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">status</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"ReadFile failed.\"</span><br/>            <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        nRead <span class=\"sy0\">=</span> MD5LEN<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CryptGetHashParam<span class=\"br0\">(</span>hHash, HP_HASHVAL, hash, nRead, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CryptGetHashParam failed.\"</span>, <span class=\"kw1\">status</span>, nRead, dwStatus<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>      <span class=\"nu0\">1</span> <span class=\"kw1\">status</span> <span class=\"sy0\">=</span> CryptDestroyHash<span class=\"br0\">(</span>hHash<span class=\"br0\">)</span><br/>      <span class=\"nu0\">2</span> <span class=\"kw1\">status</span> <span class=\"sy0\">=</span> CryptReleaseContext<span class=\"br0\">(</span>hProv, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"nu0\">3</span> <span class=\"kw1\">status</span> <span class=\"sy0\">=</span> CloseHandle<span class=\"br0\">(</span>hFile<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> md5<br/>    <span class=\"kw3\">use</span> md5_m<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, m, i, j<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>DWORD<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">dwStatus</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>BYTE<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">hash</span><span class=\"br0\">(</span>MD5LEN<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>UINT64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">filesize</span><br/>\u00a0<br/>    n <span class=\"sy0\">=</span> command_argument_count<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>        <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span>i, length<span class=\"sy0\">=</span>m<span class=\"br0\">)</span><br/>        <span class=\"kw1\">allocate</span><span class=\"br0\">(</span><span class=\"kw3\">character</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span>i, <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">call</span> md5hash<span class=\"br0\">(</span><span class=\"kw1\">name</span>, hash, dwStatus, filesize<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dwStatus <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, MD5LEN<br/>                write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(Z2.2)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> hash<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>            write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(' ',A,' (',G0,' bytes)')\"</span><span class=\"br0\">)</span> <span class=\"kw1\">name</span>, filesize<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">println[messageDigest[\"The quick brown fox\", \"MD5\"]]</pre>"}, {"lang": "Frink", "loc": 1, "block": "<pre class=\"text highlighted_source\">println[messageDigest[\"The quick brown fox\", \"MD5\"]]</pre>"}, {"lang": "Futhark", "loc": 77, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>type md5 = (u32, u32, u32, u32)<br/>\u00a0<br/>fun rs(): [64]u32 =<br/>  map u32<br/>  ([ 7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,<br/>     5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,<br/>     4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,<br/>     6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21 ])<br/>\u00a0<br/>fun ks(): [64]u32 =<br/>  map u32<br/>  ([ 0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee ,<br/>     0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 ,<br/>     0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be ,<br/>     0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 ,<br/>     0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa ,<br/>     0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 ,<br/>     0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed ,<br/>     0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a ,<br/>     0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c ,<br/>     0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 ,<br/>     0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 ,<br/>     0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 ,<br/>     0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 ,<br/>     0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 ,<br/>     0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 ,<br/>     0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 ])<br/>\u00a0<br/>fun md5(ms: [n][16]u32): md5 =<br/>  let a0 = u32(0x67452301)<br/>  let b0 = u32(0xefcdab89)<br/>  let c0 = u32(0x98badcfe)<br/>  let d0 = u32(0x10325476)<br/>  loop ((a0,b0,c0,d0)) = for i &lt; n do<br/>    let (a,b,c,d) = md5_chunk (a0,b0,c0,d0) ms[i]<br/>    in (a0+a, b0+b, c0+c, d0+d)<br/>  in (a0,b0,c0,d0)<br/>\u00a0<br/>fun rotate_left(x: u32, c: u32): u32 = (x &lt;&lt; c) | (x &gt;&gt; (32u32 - c))<br/>\u00a0<br/>fun bytes(x: u32): [4]u8 = [u8(x),<br/>                            u8(x/0x100u32),<br/>                            u8(x/0x10000u32),<br/>                            u8(x/0x1000000u32)]<br/>\u00a0<br/>fun unbytes(bs: [4]u8): u32 =<br/>  u32(bs[0]) +<br/>  u32(bs[1]) * 0x100u32 +<br/>  u32(bs[2]) * 0x10000u32 +<br/>  u32(bs[3]) * 0x1000000u32<br/>\u00a0<br/>fun unbytes_block(block: [64]u8): [16]u32 =<br/>  map unbytes (reshape (16,4) block)<br/>\u00a0<br/>fun main(ms: [n]u8): [16]u8 =<br/>  let padding = 64 - (n\u00a0% 64)<br/>  let n_padded = n + padding<br/>  let ms_padded = concat ms (bytes 0x80u32) (replicate (padding-12) 0x0u8) (bytes (u32(n*8))) ([0u8,0u8,0u8,0u8])<br/>  let (a,b,c,d) = md5 (map unbytes_block (reshape (n_padded / 64, 64) ms_padded))<br/>  in reshape 16 (map bytes ([a,b,c,d]))<br/>\u00a0<br/>-- Process 512 bits of the input.<br/>fun md5_chunk ((a0,b0,c0,d0): md5) (m: [16]u32): md5 =<br/>  loop ((a,b,c,d) = (a0,b0,c0,d0)) = for i &lt; 64 do<br/>    let (f,g) =<br/>      if      i &lt; 16 then ((b &amp; c) | ((~b) &amp; d),<br/>                           i)<br/>      else if i &lt; 32 then ((d &amp; b) | ((~d) &amp; c),<br/>                           i32((5u32*u32(i) + 1u32)\u00a0% 16u32))<br/>      else if i &lt; 48 then (b ^ c ^ d,<br/>                           i32((3u32*u32(i) + 5u32)\u00a0% 16u32))<br/>      else                (c ^ (b | (~d)),<br/>                           i32((7u32*u32(i))       \u00a0% 16u32))<br/>    in (d, b + rotate_left(a + f + (ks())[i] + m[g], (rs())[i]), b, c)<br/>  in (a,b,c,d)<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 40, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"crypto/md5\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"co1\">// RFC 1321 test cases</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"d41d8cd98f00b204e9800998ecf8427e\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"0cc175b9c0f1b6a831c399e269772661\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"a\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"900150983cd24fb0d6963f7d28e17f72\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"abc\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"f96b697d7cb7938d525a2f31aaf161d0\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"message digest\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"c3fcd3d76192e4007dfb496cca67e13b\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"d174ab98d277d9f5a5611c2c9f419d9f\"</span><span class=\"sy1\">,</span><br/>            <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"57edf4a22be3c955ac49da2e2107b67a\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"12345678901234567890\"</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\"123456789012345678901234567890123456789012345678901234567890\"</span><span class=\"sy1\">},</span><br/>        <span class=\"co1\">// test case popular with other RC solutions</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"e38ca1d920c4b8b8d3946b2c72f01680\"</span><span class=\"sy1\">,</span><br/>            <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        validate<span class=\"sy1\">(</span>p<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> h <span class=\"sy2\">=</span> md5<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>\u00a0<br/><span class=\"kw4\">func</span> validate<span class=\"sy1\">(</span>check<span class=\"sy1\">,</span> s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    h<span class=\"sy3\">.</span>Reset<span class=\"sy1\">()</span><br/>    h<span class=\"sy3\">.</span>Write<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>    sum <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%x\"</span><span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>Sum<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/>    <span class=\"kw1\">if</span> sum <span class=\"sy2\">!=</span> check <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"MD5 fail\"</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  for string,\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  expected:  \"</span><span class=\"sy1\">,</span> check<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  got:       \"</span><span class=\"sy1\">,</span> sum<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">java.security.MessageDigest</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">metaClass</span>.<span class=\"me1\">md5Checksum</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=MessageDigest&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">MessageDigest</span></a>.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">'md5'</span><span class=\"br0\">)</span>.<span class=\"me1\">digest</span><span class=\"br0\">(</span>delegate.<span class=\"me1\">bytes</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>, it<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Digest<span class=\"sy0\">.</span>OpenSSL<span class=\"sy0\">.</span>MD5 <span class=\"br0\">(</span>md5sum<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>ByteString <span class=\"br0\">(</span>pack<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>ord<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> message <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><br/>      digest  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>md5sum <span class=\"sy0\">.</span> pack <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> ord<span class=\"br0\">)</span><span class=\"br0\">)</span> message<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> digest</pre>"}, {"lang": "Io", "loc": 7, "block": "<pre class=\"io highlighted_source\">Io<span class=\"sy0\">&gt;</span> <span class=\"kw3\">MD5</span><br/>==<span class=\"sy0\">&gt;</span>  MD5_0x97663e0:<br/>  appendSeq        = MD5_appendSeq<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">md5</span>              = MD5_md5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  md5String        = MD5_md5String<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Io<span class=\"sy0\">&gt;</span> <span class=\"kw3\">MD5</span> <span class=\"kw2\">clone</span> appendSeq<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span> md5String<br/>==<span class=\"sy0\">&gt;</span> e38ca1d920c4b8b8d3946b2c72f01680</pre>"}, {"lang": "Icon and Unicon", "loc": 10, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\"># validate against the RFC test strings and more</span><br/>   testMD5<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy1\">,</span> 16r9e107d9d372bb6826bd81d3542a419d6<span class=\"br0\">)</span><br/>   testMD5<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"sy1\">,</span> 16re4d909c290d0fb1ca068ffaddf22cbd0<span class=\"br0\">)</span><br/>   testMD5<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> 16rd41d8cd98f00b204e9800998ecf8427e<span class=\"br0\">)</span>    <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> testMD5<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>rh<span class=\"br0\">)</span>  <span class=\"co1\"># compute the MD5 hash and compare it to reference value</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Message(length=\"</span><span class=\"sy1\">,*</span>s<span class=\"sy1\">,</span><span class=\"st0\">\") = \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Digest = \"</span><span class=\"sy1\">,</span>hexstring<span class=\"br0\">(</span>h <span class=\"sy1\">:=</span> MD5<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw1\">if</span> h <span class=\"sy1\">=</span> rh <span class=\"kw1\">then</span> <span class=\"st0\">\" matches reference hash\"</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"st0\">\" does not match reference hash = \"</span> <span class=\"sy1\">||</span> hexstring<span class=\"br0\">(</span>rh<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">   require <span class=\"st_h\">'convert/misc/md5'</span><br/>   md5 <span class=\"st_h\">'The quick brown fox jumped over the lazy dog'</span><span class=\"st_h\">'s back'</span><br/>e38ca1d920c4b8b8d3946b2c72f01680</pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.charset.StandardCharsets</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.security.MessageDigest</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.security.NoSuchAlgorithmException</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Digester <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>hexDigest<span class=\"br0\">(</span><span class=\"st0\">\"Rosetta code\"</span>, <span class=\"st0\">\"MD5\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> hexDigest<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> str, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> digestName<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amessagedigest+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MessageDigest</span></a> md <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amessagedigest+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MessageDigest</span></a>.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span>digestName<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> digest <span class=\"sy0\">=</span> md.<span class=\"me1\">digest</span><span class=\"br0\">(</span>str.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span>StandardCharsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> hex <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span>digest.<span class=\"me1\">length</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> digest.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                hex<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0123456789abcdef\"</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>digest<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> 0xf0<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                hex<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0123456789abcdef\"</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>digest<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> 0x0f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span>hex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anosuchalgorithmexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NoSuchAlgorithmException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalstateexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalStateException</span></a><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 32, "block": "<pre class=\"text highlighted_source\">using Nettle<br/>\u00a0<br/>function Base.trunc(s::AbstractString, n::Integer)<br/>    n &gt; 0 || throw(DomainError())<br/>    l = length(s)<br/>    l &gt; n || return s<br/>    n &gt; 3 || return s[1:n]<br/>    return s[1:n-3] * \"...\"<br/>end<br/>\u00a0<br/>tests = [\"\"    =&gt; \"d41d8cd98f00b204e9800998ecf8427e\",<br/>         \"a\"   =&gt; \"0cc175b9c0f1b6a831c399e269772661\",<br/>         \"abc\" =&gt; \"900150983cd24fb0d6963f7d28e17f72\",<br/>         \"message digest\" =&gt; \"f96b697d7cb7938d525a2f31aaf161d0\",<br/>         \"abcdefghijklmnopqrstuvwxyz\" =&gt; \"c3fcd3d76192e4007dfb496cca67e13b\",<br/>         \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" =&gt;<br/>         \"d174ab98d277d9f5a5611c2c9f419d9f\",<br/>         \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\" =&gt;<br/>         \"57edf4a22be3c955ac49da2e2107b67a\",<br/>         \"foobad\" =&gt; \"3858f62230ac3c915f300c664312c63f\"]<br/>\u00a0<br/>println(\"Testing Julia's MD5 hash against RFC 1321.\")<br/>for (k, h) in sort(tests, by = length \u2218 first)<br/>    md5sum = hexdigest(\"md5\", k)<br/>    @printf(\"%20s \u2192\u00a0%s \", trunc(k, 15), md5sum)<br/>    if md5sum == h<br/>        println(\"MD5 OK\")<br/>    else<br/>        println(\"MD5 Bad\")<br/>        println(\"* The sum should be  \", h)<br/>    end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">security</span>.<span class=\"me1\">MessageDigest</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text  <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bytes <span class=\"sy0\">=</span> text.<span class=\"me1\">toByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> md <span class=\"sy0\">=</span> MessageDigest.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"MD5\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> digest <span class=\"sy0\">=</span> md.<span class=\"me1\">digest</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"kw2\">byte</span> in digest<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 2, "block": "<pre class=\"text highlighted_source\">Encrypt_MD5('Welcome all Rhinos!')<br/>//80ba88ee2600e9e9b36e739458c39ebd</pre>"}, {"lang": "Liberty BASIC", "loc": 145, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'[RC]MD5</span><br/>    <span class=\"co1\">'from tsh73's January 2008 code</span><br/>\u00a0<br/>    <span class=\"kw1\">text</span>$<span class=\"sy0\">=</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/>    checkSum$<span class=\"sy0\">=</span><span class=\"st0\">\"9e107d9d372bb6826bd81d3542a419d6\"</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"kw1\">text</span>$<br/>    <span class=\"kw1\">print</span> checkSum$<br/>\u00a0<br/>    test$<span class=\"sy0\">=</span>md5$<span class=\"br0\">(</span><span class=\"kw1\">text</span>$<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> test$<span class=\"sy0\">=</span>checkSum$ <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"passed\"</span><br/>        <span class=\"kw1\">print</span> test$<br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"failed\"</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> md5$<span class=\"br0\">(</span><span class=\"kw1\">text</span>$<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">dim</span> r<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">dim</span> k<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">dim</span> w<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">global</span> two32<br/>        two32<span class=\"sy0\">=</span><span class=\"nu0\">2</span>^<span class=\"nu0\">32</span><br/>\u00a0<br/>        <span class=\"co1\">'prepare the MD5 checksum table</span><br/>        <span class=\"kw1\">restore</span> <span class=\"br0\">[</span>perRoundShiftAmounts<span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">63</span><br/>            <span class=\"kw1\">read</span> x<br/>            r<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<br/>        <span class=\"kw1\">next</span><br/>\u00a0<br/>        <span class=\"co1\">'prepare constants</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">63</span><br/>            k<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span>  <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span><span class=\"kw2\">sin</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> two32<span class=\"br0\">)</span><br/>        <span class=\"kw1\">next</span><br/>\u00a0<br/>        <span class=\"co1\">'initialise variables</span><br/>        h0 <span class=\"sy0\">=</span> <span class=\"kw2\">HEXDEC</span><span class=\"br0\">(</span><span class=\"st0\">\"67452301\"</span><span class=\"br0\">)</span><br/>        h1 <span class=\"sy0\">=</span> <span class=\"kw2\">HEXDEC</span><span class=\"br0\">(</span><span class=\"st0\">\"EFCDAB89\"</span><span class=\"br0\">)</span><br/>        h2 <span class=\"sy0\">=</span> <span class=\"kw2\">HEXDEC</span><span class=\"br0\">(</span><span class=\"st0\">\"98BADCFE\"</span><span class=\"br0\">)</span><br/>        h3 <span class=\"sy0\">=</span> <span class=\"kw2\">HEXDEC</span><span class=\"br0\">(</span><span class=\"st0\">\"10325476\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">'find num bits in message</span><br/>        numbits<span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw1\">text</span>$<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><br/>\u00a0<br/>        <span class=\"co1\">'add bits \"10000000\"</span><br/>        <span class=\"kw1\">text</span>$<span class=\"sy0\">=</span><span class=\"kw1\">text</span>$<span class=\"sy0\">+</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">'add bits \"00000000\"</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw1\">text</span>$<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">64</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">56</span><br/>            <span class=\"kw1\">text</span>$<span class=\"sy0\">=</span><span class=\"kw1\">text</span>$<span class=\"sy0\">+</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">wend</span><br/>\u00a0<br/>        <span class=\"co1\">'add original length in bits</span><br/>        <span class=\"kw1\">text</span>$<span class=\"sy0\">=</span><span class=\"kw1\">text</span>$<span class=\"sy0\">+</span>dec2asc$<span class=\"br0\">(</span>numbits<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">'MD5 rounds</span><br/>        <span class=\"co1\">'process in 64 byte chunks 512bits</span><br/>        <span class=\"kw1\">for</span> chunk <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw1\">text</span>$<span class=\"br0\">)</span> step <span class=\"nu0\">64</span><br/>            chunk$ <span class=\"sy0\">=</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span><span class=\"kw1\">text</span>$<span class=\"sy0\">,</span> chunk<span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"kw1\">word</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">15</span><br/>                <span class=\"co1\">'invert byte order</span><br/>                b0 <span class=\"sy0\">=</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>chunk$<span class=\"sy0\">,</span> <span class=\"kw1\">word</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                b1 <span class=\"sy0\">=</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>chunk$<span class=\"sy0\">,</span> <span class=\"kw1\">word</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                b2 <span class=\"sy0\">=</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>chunk$<span class=\"sy0\">,</span> <span class=\"kw1\">word</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                b3 <span class=\"sy0\">=</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>chunk$<span class=\"sy0\">,</span> <span class=\"kw1\">word</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                w<span class=\"br0\">(</span><span class=\"kw1\">word</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b3<span class=\"sy0\">*</span><span class=\"nu0\">256</span><span class=\"sy0\">+</span>b2<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">256</span><span class=\"sy0\">+</span>b1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">256</span><span class=\"sy0\">+</span>b0<br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">word</span><br/>            a <span class=\"sy0\">=</span> h0<br/>            b <span class=\"sy0\">=</span> h1<br/>            c <span class=\"sy0\">=</span> h2<br/>            d <span class=\"sy0\">=</span> h3<br/>            <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">63</span><br/>                <span class=\"kw1\">select</span> <span class=\"kw1\">case</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> i <span class=\"kw1\">and</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span><br/>                        f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"kw1\">and</span> c<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>bitNot<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">and</span> d<span class=\"br0\">)</span><br/>                        g <span class=\"sy0\">=</span> i<br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">16</span> <span class=\"sy0\">&lt;=</span> i <span class=\"kw1\">and</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">31</span><br/>                        f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>d <span class=\"kw1\">and</span> b<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>bitNot<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">and</span> c<span class=\"br0\">)</span><br/>                        g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">16</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">32</span> <span class=\"sy0\">&lt;=</span> i <span class=\"kw1\">and</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">47</span><br/>                        f <span class=\"sy0\">=</span> b <span class=\"kw1\">xor</span> c <span class=\"kw1\">xor</span> d<br/>                        g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">16</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">48</span> <span class=\"sy0\">&lt;=</span> i <span class=\"kw1\">and</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">63</span><br/>                        f <span class=\"sy0\">=</span> c <span class=\"kw1\">xor</span> <span class=\"br0\">(</span>b <span class=\"kw1\">or</span> bitNot<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">16</span><br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>                temp <span class=\"sy0\">=</span> d<br/>                d <span class=\"sy0\">=</span> c<br/>                c <span class=\"sy0\">=</span> b<br/>                b<span class=\"sy0\">=</span>b<span class=\"sy0\">+</span>leftrotate<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> f <span class=\"sy0\">+</span> k<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> w<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">,</span>r<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                b <span class=\"sy0\">=</span> b <span class=\"kw1\">mod</span> two32<br/>                a <span class=\"sy0\">=</span> temp<br/>            <span class=\"kw1\">next</span> i<br/>            h0 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h0 <span class=\"sy0\">+</span> a<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> two32<br/>            h1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h1 <span class=\"sy0\">+</span> b<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> two32<br/>            h2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h2 <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> two32<br/>            h3 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h3 <span class=\"sy0\">+</span> d<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> two32<br/>        <span class=\"kw1\">next</span> chunk<br/>\u00a0<br/>        md5$ <span class=\"sy0\">=</span>  revOrd$<span class=\"br0\">(</span><span class=\"kw2\">DECHEX$</span><span class=\"br0\">(</span>h0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>_<br/>                revOrd$<span class=\"br0\">(</span><span class=\"kw2\">DECHEX$</span><span class=\"br0\">(</span>h1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>_<br/>                revOrd$<span class=\"br0\">(</span><span class=\"kw2\">DECHEX$</span><span class=\"br0\">(</span>h2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>_<br/>                revOrd$<span class=\"br0\">(</span><span class=\"kw2\">DECHEX$</span><span class=\"br0\">(</span>h3<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>perRoundShiftAmounts<span class=\"br0\">]</span><br/>        <span class=\"kw1\">DATA</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">22</span><br/>        <span class=\"kw1\">DATA</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><br/>        <span class=\"kw1\">DATA</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><br/>        <span class=\"kw1\">DATA</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">21</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">' dec2asc: dec to 8 byte asc</span><br/>    <span class=\"kw1\">function</span> dec2asc$<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        h$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span><br/>            h$ <span class=\"sy0\">=</span> h$ <span class=\"sy0\">+</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>            n <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">next</span><br/>        dec2asc$<span class=\"sy0\">=</span> h$<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"co1\">' bitNot</span><br/>    <span class=\"kw1\">function</span> bitNot<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>        bitNot <span class=\"sy0\">=</span> two32 <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span>num<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"co1\">' leftrotate: spins bits left n times</span><br/>    <span class=\"kw1\">function</span> leftrotate<span class=\"br0\">(</span>num<span class=\"sy0\">,</span>times<span class=\"br0\">)</span><br/>        num<span class=\"sy0\">=</span>num <span class=\"kw1\">mod</span> two32<br/>        r <span class=\"sy0\">=</span> <span class=\"br0\">(</span>num<span class=\"sy0\">*</span><span class=\"nu0\">2</span>^times<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> two32<br/>        l <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>num<span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>^<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"sy0\">-</span>times<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        leftrotate <span class=\"sy0\">=</span> r<span class=\"sy0\">+</span>l<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"co1\">' reverse the HEXDEC$ order</span><br/>    <span class=\"kw1\">function</span> revOrd$<span class=\"br0\">(</span>a$<span class=\"br0\">)</span><br/>        a$<span class=\"sy0\">=</span><span class=\"kw2\">left$</span><span class=\"br0\">(</span><span class=\"st0\">\"00000000\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">-</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>a$<br/>        revOrd$ <span class=\"sy0\">=</span> <span class=\"kw2\">lower$</span><span class=\"br0\">(</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>a$<span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>a$<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>a$<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>a$<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lingo", "loc": 1, "block": "<pre class=\"text highlighted_source\">put cx_md5_string(str)</pre>"}, {"lang": "LiveCode", "loc": 6, "block": "<pre class=\"text highlighted_source\">function md5sum hashtext<br/>    local md5, mdhex<br/>    put md5Digest(hashtext) into md5<br/>    get binaryDecode(\"H*\",md5,mdhex)<br/>    return mdhex<br/>end md5sum</pre>"}, {"lang": "Lua", "loc": 16, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"md5\"</span><br/>\u00a0<br/><span class=\"co1\">--printing a sum:</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>md5<span class=\"sy0\">.</span>sumhexa<span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--running the test suite:</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> test<span class=\"br0\">(</span>msg<span class=\"sy0\">,</span>sum<span class=\"br0\">)</span> <span class=\"kw3\">assert</span><span class=\"br0\">(</span>md5<span class=\"sy0\">.</span>sumhexa<span class=\"br0\">(</span>msg<span class=\"br0\">)</span><span class=\"sy0\">==</span>sum<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>test<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"d41d8cd98f00b204e9800998ecf8427e\"</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"0cc175b9c0f1b6a831c399e269772661\"</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span><span class=\"st0\">\"abc\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"900150983cd24fb0d6963f7d28e17f72\"</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span><span class=\"st0\">\"message digest\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"f96b697d7cb7938d525a2f31aaf161d0\"</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"c3fcd3d76192e4007dfb496cca67e13b\"</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"d174ab98d277d9f5a5611c2c9f419d9f\"</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span><span class=\"st0\">\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"57edf4a22be3c955ac49da2e2107b67a\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; with( StringTools ):<br/>&gt; Hash( \"\" );<br/>         \"d41d8cd98f00b204e9800998ecf8427e\"<br/>\u00a0<br/>&gt; Hash( \"a\" );<br/>         \"0cc175b9c0f1b6a831c399e269772661\"<br/>\u00a0<br/>&gt; Hash( \"abc\" );<br/>         \"900150983cd24fb0d6963f7d28e17f72\"<br/>\u00a0<br/>&gt; Hash( \"message digest\" );<br/>         \"f96b697d7cb7938d525a2f31aaf161d0\"<br/>\u00a0<br/>&gt; Hash( \"abcdefghijklmnopqrstuvwxyz\" );<br/>         \"c3fcd3d76192e4007dfb496cca67e13b\"<br/>\u00a0<br/>&gt; Hash( \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" );<br/>         \"d174ab98d277d9f5a5611c2c9f419d9f\"<br/>\u00a0<br/>&gt; Hash( \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\" );<br/>         \"57edf4a22be3c955ac49da2e2107b67a\"<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\"> Hash[\"The quick brown fox jumped over the lazy dog's back\",\"MD5\",\"HexString\"]</pre>"}, {"lang": "MATLAB", "loc": 116, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> digest = md5<span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>    <span class=\"co1\">% digest = md5(message)</span><br/>    <span class=\"co1\">%  Compute the MD5 digest of the message, as a hexadecimal digest.</span><br/>\u00a0<br/>    <span class=\"co1\">% Follow the MD5 algorithm from RFC 1321 [1] and Wikipedia [2].</span><br/>    <span class=\"co1\">%  [1] http://tools.ietf.org/html/rfc1321</span><br/>    <span class=\"co1\">%  [2] http://en.wikipedia.org/wiki/MD5</span><br/>\u00a0<br/>    <span class=\"co1\">% m is the modulus for 32-bit unsigned arithmetic.</span><br/>    m = <span class=\"nu0\">2</span> ^ <span class=\"nu0\">32</span>;<br/>\u00a0<br/>    <span class=\"co1\">% s is the shift table for circshift(). Each shift is negative</span><br/>    <span class=\"co1\">% because it is a left shift.</span><br/>    s = <span class=\"br0\">[</span>-<span class=\"nu0\">7</span>, -<span class=\"nu0\">12</span>, -<span class=\"nu0\">17</span>, -<span class=\"nu0\">22</span><br/>         -<span class=\"nu0\">5</span>,  -<span class=\"nu0\">9</span>, -<span class=\"nu0\">14</span>, -<span class=\"nu0\">20</span><br/>         -<span class=\"nu0\">4</span>, -<span class=\"nu0\">11</span>, -<span class=\"nu0\">16</span>, -<span class=\"nu0\">23</span><br/>         -<span class=\"nu0\">6</span>, -<span class=\"nu0\">10</span>, -<span class=\"nu0\">15</span>, -<span class=\"nu0\">21</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co1\">% t is the sine table. Each sine is a 32-bit integer, unsigned.</span><br/>    t = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/floor.html\"><span class=\"kw2\">floor</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sin.html\"><span class=\"kw2\">sin</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"br0\">)</span> .* m<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">% Initialize the hash, as a row vector of 32-bit integers.</span><br/>    digest = <span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/hex2dec.html\"><span class=\"kw2\">hex2dec</span></a><span class=\"br0\">(</span><span class=\"co2\">'67452301'</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span><br/>              <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/hex2dec.html\"><span class=\"kw2\">hex2dec</span></a><span class=\"br0\">(</span><span class=\"co2\">'EFCDAB89'</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span><br/>              <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/hex2dec.html\"><span class=\"kw2\">hex2dec</span></a><span class=\"br0\">(</span><span class=\"co2\">'98BADCFE'</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span><br/>              <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/hex2dec.html\"><span class=\"kw2\">hex2dec</span></a><span class=\"br0\">(</span><span class=\"co2\">'10325476'</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co1\">% If message contains characters, convert them to ASCII values.</span><br/>    message = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/double.html\"><span class=\"kw2\">double</span></a><span class=\"br0\">(</span>message<span class=\"br0\">)</span>;<br/>    bytelen = numel<span class=\"br0\">(</span>message<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">% Pad the message by appending a 1, then appending enough 0s to make</span><br/>    <span class=\"co1\">% the bit length congruent to 448 mod 512. Because we have bytes, we</span><br/>    <span class=\"co1\">% append 128 '10000000', then append enough 0s '00000000's to make</span><br/>    <span class=\"co1\">% the byte length congruent to 56 mod 64.</span><br/>    message = <span class=\"br0\">[</span>message, <span class=\"nu0\">128</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><span class=\"nu0\">55</span> - bytelen, <span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co1\">% Convert the message to 32-bit integers, little endian.</span><br/>    <span class=\"co1\">% For little endian, first byte is least significant byte.</span><br/>    message = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/reshape.html\"><span class=\"kw2\">reshape</span></a><span class=\"br0\">(</span>message, <span class=\"nu0\">4</span>, numel<span class=\"br0\">(</span>message<span class=\"br0\">)</span> / <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>    message = message<span class=\"br0\">(</span><span class=\"nu0\">1</span>,:<span class=\"br0\">)</span> + <span class=\"sy0\">...</span>            <span class=\"co1\">% least significant byte</span><br/>              message<span class=\"br0\">(</span><span class=\"nu0\">2</span>,:<span class=\"br0\">)</span> * <span class=\"nu0\">256</span> + <span class=\"sy0\">...</span><br/>              <span class=\"me1\">message</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,:<span class=\"br0\">)</span> * <span class=\"nu0\">65536</span> + <span class=\"sy0\">...</span><br/>              <span class=\"me1\">message</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>,:<span class=\"br0\">)</span> * <span class=\"nu0\">16777216</span>;      <span class=\"co1\">% most significant byte</span><br/>\u00a0<br/>    <span class=\"co1\">% Append the bit length as a 64-bit integer, little endian.</span><br/>    bitlen = bytelen * <span class=\"nu0\">8</span>;<br/>    message = <span class=\"br0\">[</span>message, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>bitlen, m<span class=\"br0\">)</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>bitlen / m, m<span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co1\">% Process each 512-bit block. Because we have 32-bit integers, each</span><br/>    <span class=\"co1\">% block has 16 elements, message(k + (0:15)).</span><br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:<span class=\"nu0\">16</span>:numel<span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>        <span class=\"co1\">% Copy hash.</span><br/>        a = digest<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>; b = digest<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>; c = digest<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>; d = digest<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"co1\">% Do 64 operations.</span><br/>        <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>            <span class=\"co1\">% Convert b, c, d to row vectors of bits (0s and 1s).</span><br/>            bv = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dec2bin.html\"><span class=\"kw2\">dec2bin</span></a><span class=\"br0\">(</span>b, <span class=\"nu0\">32</span><span class=\"br0\">)</span> - <span class=\"co2\">'0'</span>;<br/>            cv = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dec2bin.html\"><span class=\"kw2\">dec2bin</span></a><span class=\"br0\">(</span>c, <span class=\"nu0\">32</span><span class=\"br0\">)</span> - <span class=\"co2\">'0'</span>;<br/>            dv = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dec2bin.html\"><span class=\"kw2\">dec2bin</span></a><span class=\"br0\">(</span>d, <span class=\"nu0\">32</span><span class=\"br0\">)</span> - <span class=\"co2\">'0'</span>;<br/>\u00a0<br/>            <span class=\"co1\">% Find f  = mix of b, c, d.</span><br/>            <span class=\"co1\">%      ki = index in 0:15, to message(k + ki).</span><br/>            <span class=\"co1\">%      sr = row in 1:4, to s(sr,\u00a0:).</span><br/>            <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> &lt;= <span class=\"nu0\">16</span>          <span class=\"co1\">% Round 1</span><br/>                f = <span class=\"br0\">(</span>bv &amp; cv<span class=\"br0\">)</span> | <span class=\"br0\">(</span>~bv &amp; dv<span class=\"br0\">)</span>;<br/>                ki = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> - <span class=\"nu0\">1</span>;<br/>                sr = <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> &lt;= <span class=\"nu0\">32</span>      <span class=\"co1\">% Round 2</span><br/>                f = <span class=\"br0\">(</span>bv &amp; dv<span class=\"br0\">)</span> | <span class=\"br0\">(</span>cv &amp; ~dv<span class=\"br0\">)</span>;<br/>                ki = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span> * <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> - <span class=\"nu0\">4</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>;<br/>                sr = <span class=\"nu0\">2</span>;<br/>            <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> &lt;= <span class=\"nu0\">48</span>      <span class=\"co1\">% Round 3</span><br/>                f = xor<span class=\"br0\">(</span>bv, xor<span class=\"br0\">(</span>cv, dv<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>                ki = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span> * <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> + <span class=\"nu0\">2</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>;<br/>                sr = <span class=\"nu0\">3</span>;<br/>            <span class=\"kw1\">else</span>                <span class=\"co1\">% Round 4</span><br/>                f = xor<span class=\"br0\">(</span>cv, bv | ~dv<span class=\"br0\">)</span>;<br/>                ki = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><span class=\"nu0\">7</span> * <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> - <span class=\"nu0\">7</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>;<br/>                sr = <span class=\"nu0\">4</span>;<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            <span class=\"co1\">% Convert f, from row vector of bits, to 32-bit integer.</span><br/>            f = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bin2dec.html\"><span class=\"kw2\">bin2dec</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span>f + <span class=\"co2\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>            <span class=\"co1\">% Do circular shift of sum.</span><br/>            sc = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> - <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>a + f + message<span class=\"br0\">(</span>k + ki<span class=\"br0\">)</span> + t<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>, m<span class=\"br0\">)</span>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dec2bin.html\"><span class=\"kw2\">dec2bin</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a>, <span class=\"nu0\">32</span><span class=\"br0\">)</span>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a> = circshift<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, s<span class=\"br0\">(</span>sr, sc<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bin2dec.html\"><span class=\"kw2\">bin2dec</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">)</span>;<br/>\u00a0<br/>            <span class=\"co1\">% Update a, b, c, d.</span><br/>            temp = d;<br/>            d = c;<br/>            c = b;<br/>            b = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>b + <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a>, m<span class=\"br0\">)</span>;<br/>            a = temp;<br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%for i</span><br/>\u00a0<br/>        <span class=\"co1\">% Add hash of this block to hash of previous blocks.</span><br/>        digest = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>digest + <span class=\"br0\">[</span>a, b, c, d<span class=\"br0\">]</span>, m<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%for k</span><br/>\u00a0<br/>    <span class=\"co1\">% Convert hash from 32-bit integers, little endian, to bytes.</span><br/>    digest = <span class=\"br0\">[</span>digest                <span class=\"co1\">% least significant byte</span><br/>              digest / <span class=\"nu0\">256</span><br/>              digest / <span class=\"nu0\">65536</span><br/>              digest / <span class=\"nu0\">16777216</span><span class=\"br0\">]</span>;   <span class=\"co1\">% most significant byte</span><br/>    digest = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/reshape.html\"><span class=\"kw2\">reshape</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/floor.html\"><span class=\"kw2\">floor</span></a><span class=\"br0\">(</span>digest<span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span>, numel<span class=\"br0\">(</span>digest<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">% Convert hash to hexadecimal.</span><br/>    digest = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dec2hex.html\"><span class=\"kw2\">dec2hex</span></a><span class=\"br0\">(</span>digest<span class=\"br0\">)</span>;<br/>    digest = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/reshape.html\"><span class=\"kw2\">reshape</span></a><span class=\"br0\">(</span>transpose<span class=\"br0\">(</span>digest<span class=\"br0\">)</span>, <span class=\"nu0\">1</span>, numel<span class=\"br0\">(</span>digest<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> <span class=\"co1\">%md5</span></pre>"}, {"lang": "MOO", "loc": 2, "block": "<pre class=\"text highlighted_source\">string = \"The quick brown fox jumped over the lazy dog's back\";<br/>player:tell(string_hash(string));</pre>"}, {"lang": "Nemerle", "loc": 34, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using System.Text;<br/>using System.Security.Cryptography;<br/>using Nemerle.Collections;<br/>using Nemerle.Collections.NCollectionsExtensions;<br/>\u00a0<br/>module Md5<br/>{<br/>    HashMD5(input\u00a0: string)\u00a0: string<br/>    {<br/>        BitConverter.ToString<br/>            (MD5.Create().ComputeHash(Encoding.Default.GetBytes(input))).Replace(\"-\", \"\").ToLower()<br/>    }<br/>\u00a0<br/>    IsValidMD5(text\u00a0: string, hash\u00a0: string)\u00a0: bool<br/>    {<br/>        HashMD5(text) == hash.ToLower()<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def examples = [\"The quick brown fox jumped over the lazy dog's back\", \"\", \"a\", \"abc\", \"message digest\",<br/>                        \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",<br/>                        \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"];<br/>        def hashes = [\"e38ca1d920c4b8b8d3946b2c72f01680\", \"d41d8cd98f00b204e9800998ecf8427e\",<br/>                      \"0cc175b9c0f1b6a831c399e269772661\", \"900150983cd24fb0d6963f7d28e17f72\",<br/>                      \"f96b697d7cb7938d525a2f31aaf161d0\", \"c3fcd3d76192e4007dfb496cca67e13b\",<br/>                      \"d174ab98d277d9f5a5611c2c9f419d9f\", \"57edf4a22be3c955ac49da2e2107b67a\"];<br/>        def tests = Hashtable(ZipLazy(examples, hashes));<br/>        foreach (test in tests)<br/>            Write($\"$(IsValidMD5(test.Key, test.Value))   \");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 60, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">security</span>.<span class=\"me0\">MessageDigest</span><br/>\u00a0<br/>MD5<span class=\"br0\">(</span><span class=\"st0\">'The quick brown fox jumps over the lazy dog'</span>, <span class=\"st0\">'9e107d9d372bb6826bd81d3542a419d6'</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- RFC 1321 MD5 test suite:</span><br/>MD5<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">'d41d8cd98f00b204e9800998ecf8427e'</span><span class=\"br0\">)</span><br/>MD5<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">'0cc175b9c0f1b6a831c399e269772661'</span><span class=\"br0\">)</span><br/>MD5<span class=\"br0\">(</span><span class=\"st0\">\"abc\"</span>, <span class=\"st0\">'900150983cd24fb0d6963f7d28e17f72'</span><span class=\"br0\">)</span><br/>MD5<span class=\"br0\">(</span><span class=\"st0\">\"message digest\"</span>, <span class=\"st0\">'f96b697d7cb7938d525a2f31aaf161d0'</span><span class=\"br0\">)</span><br/>MD5<span class=\"br0\">(</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>, <span class=\"st0\">'c3fcd3d76192e4007dfb496cca67e13b'</span><span class=\"br0\">)</span><br/>MD5<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"</span>, <span class=\"st0\">'d174ab98d277d9f5a5611c2c9f419d9f'</span><span class=\"br0\">)</span><br/>MD5<span class=\"br0\">(</span><span class=\"st0\">\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"</span>, <span class=\"st0\">'57edf4a22be3c955ac49da2e2107b67a'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method MD5<span class=\"br0\">(</span>messageText, verifyCheck<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  algorithm   = <span class=\"st0\">'MD5'</span><br/>  digestSum = getDigest<span class=\"br0\">(</span>messageText, algorithm<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'&lt;Message&gt;'</span>messageText<span class=\"st0\">'&lt;/Message&gt;'</span><br/>  <span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'&lt;'</span>algorithm<span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> digestSum<span class=\"st0\">'&lt;/'</span>algorithm<span class=\"st0\">'&gt;'</span><br/>  <span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'&lt;Verify&gt;'</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> verifyCheck<span class=\"st0\">'&lt;/Verify&gt;'</span><br/>  <span class=\"kw1\">if</span> digestSum == verifyCheck <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> algorithm <span class=\"st0\">'Confirmed'</span><br/>                              <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> algorithm <span class=\"st0\">'Failed'</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method getDigest<span class=\"br0\">(</span>messageText = Rexx, algorithm = Rexx <span class=\"st0\">'MD5'</span>, encoding = Rexx <span class=\"st0\">'UTF-8'</span>, lowercase = boolean <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  algorithm = algorithm.<span class=\"kw6\">upper</span><br/>  encoding  = encoding.<span class=\"kw6\">upper</span><br/>\u00a0<br/>  message      = String<span class=\"br0\">(</span>messageText<span class=\"br0\">)</span><br/>  messageBytes = byte<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  digestBytes  = byte<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  digestSum    = Rexx <span class=\"st0\">''</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    messageBytes = message.<span class=\"me0\">getBytes</span><span class=\"br0\">(</span>encoding<span class=\"br0\">)</span><br/>    md = MessageDigest.<span class=\"me0\">getInstance</span><span class=\"br0\">(</span>algorithm<span class=\"br0\">)</span><br/>    md.<span class=\"me0\">update</span><span class=\"br0\">(</span>messageBytes<span class=\"br0\">)</span><br/>    digestBytes = md.<span class=\"me0\">digest</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> b_ = <span class=\"nu0\">0</span> to digestBytes.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>      bb = Rexx<span class=\"br0\">(</span>digestBytes<span class=\"br0\">[</span>b_<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"kw6\">d2x</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> lowercase <span class=\"kw3\">then</span> digestSum = digestSum <span class=\"sy0\">||</span> bb.<span class=\"kw6\">lower</span><br/>                   <span class=\"kw3\">else</span> digestSum = digestSum <span class=\"sy0\">||</span> bb.<span class=\"kw6\">upper</span><br/>      <span class=\"kw3\">end</span> b_<br/>  <span class=\"kw3\">catch</span> ex = Exception<br/>    ex.<span class=\"me0\">printStackTrace</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> digestSum<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">;; using the crypto module from http://www.newlisp.org/code/modules/crypto.lsp.html</span><br/><span class=\"co1\">;; (import native functions from the crypto library, provided by OpenSSL)</span><br/><span class=\"br0\">(</span>module <span class=\"st0\">\"crypto.lsp\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>crypto<span class=\"sy1\">:</span><span class=\"me0\">md5</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import md5<br/>\u00a0<br/>echo toMD5(\"The quick brown fox jumped over the lazy dog's back\")</pre>"}, {"lang": "Oberon-2", "loc": 19, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> MD5;<br/><span class=\"kw1\">IMPORT</span><br/>  Crypto<span class=\"sy0\">:</span>MD5<span class=\"sy0\">,</span><br/>  Crypto<span class=\"sy0\">:</span>Utils<span class=\"sy0\">,</span><br/>  Strings<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">VAR</span><br/>  h<span class=\"sy0\">:</span> MD5.<span class=\"me1\">Hash</span>;<br/>  str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  h <span class=\"sy0\">:=</span> MD5.<span class=\"me1\">NewHash</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  h.<span class=\"me1\">Initialize</span>;<br/>  str <span class=\"sy0\">:=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span>;<br/>  h.<span class=\"me1\">Update</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  h.<span class=\"me1\">GetHash</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"MD5: \"</span><span class=\"br0\">)</span>;Utils.<span class=\"me1\">PrintHex</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>h.<span class=\"me1\">size</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>  <br/><span class=\"kw1\">END</span> MD5.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 9, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> MD5 <span class=\"br0\">{</span><br/>   <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      in <span class=\"sy0\">:=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      hash <span class=\"sy0\">:=</span> Encryption.Hash<span class=\"sy0\">-&gt;</span><span class=\"me1\">MD5</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      hash<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToHexString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 3, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>myString <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span>;<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/\"><span class=\"kw5\">NSData</span></a> <span class=\"sy0\">*</span>digest <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>myString dataUsingEncoding<span class=\"sy0\">:</span>NSUTF8StringEncoding<span class=\"br0\">]</span> md5Digest<span class=\"br0\">]</span>; <span class=\"co2\">// or another encoding of your choosing</span><br/>NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span>digest hexadecimalRepresentation<span class=\"br0\">]</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Digest.html\"><span class=\"kw2\">Digest</span></a><span class=\"sy0\">.</span>to_hex<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Digest.html\"><span class=\"kw2\">Digest</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span> <span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"e38ca1d920c4b8b8d3946b2c72f01680\"</span></pre>"}, {"lang": "Octave", "loc": 3, "block": "<pre class=\"octave highlighted_source\">s <span class=\"sy3\">=</span> <span class=\"co4\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"sy5\">;</span><br/>hash <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/md5sum.html\"><span class=\"kw6\">md5sum</span></a><span class=\"br0\">(</span>s<span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/true.html\"><span class=\"kw10\">true</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>hash<span class=\"br0\">)</span></pre>"}, {"lang": "OpenEdge/Progress", "loc": 9, "block": "<pre class=\"text highlighted_source\">MESSAGE <br/>   1 STRING( HEX-ENCODE( MD5-DIGEST( \"\" ) ) ) SKIP<br/>   2 STRING( HEX-ENCODE( MD5-DIGEST( \"a\" ) ) ) SKIP<br/>   3 STRING( HEX-ENCODE( MD5-DIGEST( \"abc\" ) ) ) SKIP<br/>   4 STRING( HEX-ENCODE( MD5-DIGEST( \"message digest\" ) ) ) SKIP<br/>   5 STRING( HEX-ENCODE( MD5-DIGEST( \"abcdefghijklmnopqrstuvwxyz\" ) ) ) SKIP<br/>   6 STRING( HEX-ENCODE( MD5-DIGEST( \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" ) ) ) SKIP<br/>   7 STRING( HEX-ENCODE( MD5-DIGEST( \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\" ) ) )<br/>VIEW-AS ALERT-BOX</pre>"}, {"lang": "PARI/GP", "loc": 27, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;pari/pari.h&gt;</span><br/><span class=\"co2\">#include &lt;openssl/md5.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define HEX(x)  (((x) &lt; 10)? (x)+'0': (x)-10+'a')</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * PARI/GP func: MD5 hash<br/> *<br/> * gp code: install(\"plug_md5\", \"s\", \"MD5\", \"&lt;library path&gt;\");<br/> */</span><br/>GEN plug_md5<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>text<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> md<span class=\"br0\">[</span>MD5_DIGEST_LENGTH<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span> hash<span class=\"br0\">[</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  MD5<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>text<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>md<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    hash<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>i<span class=\"br0\">]</span>   <span class=\"sy0\">=</span> HEX<span class=\"br0\">(</span><span class=\"br0\">(</span>md<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x0f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    hash<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> HEX<span class=\"br0\">(</span>md<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x0f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  hash<span class=\"br0\">[</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> strtoGENstr<span class=\"br0\">(</span>hash<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 1, "block": "<pre>program GetMd5;\n\nuses md5;\n\nvar\n  strEncrypted\u00a0: string;\n\nbegin\n  strEncrypted\u00a0:= md5Print(md5String('The quick brown fox jumped over the lazy dog''s back'));\n  writeln(strEncrypted);\n  readln;\nend.\n</pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">MD5</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>md5_hex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> md5_hex<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">MD5</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">MD5</span><span class=\"sy0\">.</span><span class=\"me1\">md5_hex</span><span class=\"sy0\">:</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/md5\"><span class=\"kw3\">md5</span></a><span class=\"br0\">(</span> <span class=\"re0\">$string</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/md5\"><span class=\"kw3\">md5</span></a><span class=\"br0\">(</span> <span class=\"re0\">$string</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(let Str \"The quick brown fox jumped over the lazy dog's back\"<br/>   (pack<br/>      (mapcar '((B) (pad 2 (hex B)))<br/>         (native \"libcrypto.so\" \"MD5\" '(B . 16) Str (length Str) '(NIL (16))) ) ) )</pre>"}, {"lang": "Pike", "loc": 6, "block": "<pre class=\"pike highlighted_source\"><span class=\"kw1\">import</span> String<span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> Crypto.<span class=\"me1\">MD5</span><span class=\"sy0\">;</span><br/>\u00a0<br/>int main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   write<span class=\"br0\">(</span> string2hex<span class=\"br0\">(</span> hash<span class=\"br0\">(</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><br/><span class=\"re0\">$data</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Text.Encoding<span class=\"br0\">]</span>::UTF8.GetBytes<span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><br/><span class=\"re0\">$hash</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Security.Cryptography.MD5<span class=\"br0\">]</span>::Create<span class=\"br0\">(</span><span class=\"br0\">)</span>.ComputeHash<span class=\"br0\">(</span><span class=\"re0\">$data</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">[</span>BitConverter<span class=\"br0\">]</span>::ToString<span class=\"br0\">(</span><span class=\"re0\">$hash</span><span class=\"br0\">)</span> <span class=\"kw4\">-replace</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span>.ToLower<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "PureBasic", "loc": 2, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw3\">test</span>$ <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><br/><span class=\"kw1\">Debug</span> <span class=\"kw2\">MD5Fingerprint</span><span class=\"br0\">(</span>@<span class=\"kw3\">test</span>$, <span class=\"kw2\">StringByteLength</span><span class=\"br0\">(</span><span class=\"kw3\">test</span>$<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 13, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> hashlib<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># RFC 1321    test suite:</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> tests <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>  <span class=\"br0\">(</span>b<span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'d41d8cd98f00b204e9800998ecf8427e'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span>b<span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'0cc175b9c0f1b6a831c399e269772661'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span>b<span class=\"st0\">\"abc\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'900150983cd24fb0d6963f7d28e17f72'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span>b<span class=\"st0\">\"message digest\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'f96b697d7cb7938d525a2f31aaf161d0'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span>b<span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'c3fcd3d76192e4007dfb496cca67e13b'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span>b<span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'d174ab98d277d9f5a5611c2c9f419d9f'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">(</span>b<span class=\"st0\">\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'57edf4a22be3c955ac49da2e2107b67a'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> text<span class=\"sy0\">,</span> golden <span class=\"kw1\">in</span> tests: <span class=\"kw1\">assert</span> hashlib.<span class=\"kw3\">md5</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span>.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> golden<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">library(digest)<br/>hexdigest &lt;- digest(\"The quick brown fox jumped over the lazy dog's back\", <br/>                    algo=\"md5\", serialize=FALSE)</pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require file/md5)<br/>\u00a0<br/>(md5 \"\")<br/>(md5 \"a\")<br/>(md5 \"abc\")<br/>(md5 \"message digest\")<br/>(md5 \"abcdefghijklmnopqrstuvwxyz\")<br/>(md5 \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")<br/>(md5 \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\")<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 2, "block": "<pre class=\"rebol highlighted_source\"><span class=\"sy0\">&gt;&gt;</span> <span class=\"kw3\">checksum</span><span class=\"sy0\">/</span>method <span class=\"st0\">\"The quick brown fox jumped over the lazy dog\"</span> 'md5<br/>== #<span class=\"br0\">{</span>08A008A01D498C404B0C30852B39D3B8<span class=\"br0\">}</span></pre>"}, {"lang": "REXX", "loc": 114, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program tests the MD5 procedure (below) as per a test suite the  IETF RFC (1321).*/</span><br/>msg<span class=\"sy0\">.</span>1 =                                          <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500MD5 test suite [from above doc].*/</span><br/>msg<span class=\"sy0\">.</span>2 = <span class=\"st0\">'a'</span><br/>msg<span class=\"sy0\">.</span>3 = <span class=\"st0\">'abc'</span><br/>msg<span class=\"sy0\">.</span>4 = <span class=\"st0\">'message digest'</span><br/>msg<span class=\"sy0\">.</span>5 = <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><br/>msg<span class=\"sy0\">.</span>6 = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span><br/>msg<span class=\"sy0\">.</span>7 =  <span class=\"nu0\">12345678901234567890123456789012345678901234567890123456789012345678901234567890</span><br/>msg<span class=\"sy0\">.</span>0 = <span class=\"nu0\">7</span>                                        <span class=\"coMULTI\">/* [\u2191]  last value doesn't need quotes.*/</span><br/>                <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  msg<span class=\"sy0\">.</span>0;       <span class=\"kw1\">say</span>    <span class=\"coMULTI\">/*process each of the seven messages.  */</span><br/>                <span class=\"kw1\">say</span> <span class=\"st0\">' in ='</span>  msg<span class=\"sy0\">.</span>m               <span class=\"coMULTI\">/*display the      in      message.    */</span><br/>                <span class=\"kw1\">say</span> <span class=\"st0\">'out ='</span>  MD5<span class=\"br0\">(</span>msg<span class=\"sy0\">.</span>m<span class=\"br0\">)</span>          <span class=\"coMULTI\">/*   \"     \"       out        \"        */</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>MD5: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0!;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>  <span class=\"coMULTI\">/*insure there's enough decimal digits.*/</span><br/>     a=<span class=\"st0\">'67452301'</span>x;  b=<span class=\"st0\">\"efcdab89\"</span>x;  c=<span class=\"st0\">'98badcfe'</span>x;  d=<span class=\"st0\">\"10325476\"</span>x;   x00=<span class=\"st0\">'0'</span>x;  x80=<span class=\"st0\">\"80\"</span>x<br/>     #=<span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*length in bytes of the input message.*/</span><br/>     L=#<span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"sy0\">//</span><span class=\"nu0\">512</span>;   <span class=\"kw1\">if</span> L<span class=\"sy0\">&lt;</span><span class=\"nu0\">448</span>  <span class=\"kw3\">then</span> plus=<span class=\"nu0\">448</span> - L   <span class=\"coMULTI\">/*is the length  less   than  448\u00a0?    */</span><br/>                   <span class=\"kw1\">if</span> L<span class=\"sy0\">&gt;</span><span class=\"nu0\">448</span>  <span class=\"kw3\">then</span> plus=<span class=\"nu0\">960</span> - L   <span class=\"coMULTI\">/* \"  \"     \"   greater   \"    \"       */</span><br/>                   <span class=\"kw1\">if</span> L=<span class=\"nu0\">448</span>  <span class=\"kw3\">then</span> plus=<span class=\"nu0\">512</span>       <span class=\"coMULTI\">/* \"  \"     \"    equal    to   \"       */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  a little of this, \u00b7\u00b7\u00b7          */</span><br/>     $=! <span class=\"sy0\">||</span> x80 <span class=\"sy0\">||</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span>x00, plus%8 -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"kw6\">reverse</span><span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">d2c</span><span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">*</span> #<span class=\"br0\">)</span>, <span class=\"nu0\">4</span>, x00<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'00000000'</span>x<br/>                                                 <span class=\"coMULTI\">/* [\u2191]       \u00b7\u00b7\u00b7  and a little of that.*/</span><br/>       <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">64</span> - <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*process the message  (lots of steps).*/</span><br/>       a_=a;       b_=b;       c_=c;       d_=d  <span class=\"coMULTI\">/*save the  original values  for later.*/</span><br/>       chunk=j<span class=\"sy0\">*</span><span class=\"nu0\">64</span>                                <span class=\"coMULTI\">/*calculate the  size  of the chunks.  */</span><br/>                       <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">16</span>            <span class=\"coMULTI\">/*process the message in chunks.       */</span><br/>                      \u00a0!<span class=\"sy0\">.</span>k=<span class=\"kw6\">reverse</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, chunk + <span class=\"nu0\">1</span> + <span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>k-<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"coMULTI\">/*magic stuff.*/</span><br/>                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                                        <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500step\u2500\u2500\u2500\u2500*/</span><br/>       a  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">0</span>,    <span class=\"nu0\">7</span>,   <span class=\"nu0\">3614090360</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  1 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">1</span>,   <span class=\"nu0\">12</span>,   <span class=\"nu0\">3905402710</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  2 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> c,   d,   a,   b,    <span class=\"nu0\">2</span>,   <span class=\"nu0\">17</span>,    <span class=\"nu0\">606105819</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  3 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">3</span>,   <span class=\"nu0\">22</span>,   <span class=\"nu0\">3250441966</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  4 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">4</span>,    <span class=\"nu0\">7</span>,   <span class=\"nu0\">4118548399</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  5 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">5</span>,   <span class=\"nu0\">12</span>,   <span class=\"nu0\">1200080426</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  6 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> c,   d,   a,   b,    <span class=\"nu0\">6</span>,   <span class=\"nu0\">17</span>,   <span class=\"nu0\">2821735955</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  7 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">7</span>,   <span class=\"nu0\">22</span>,   <span class=\"nu0\">4249261313</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  8 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">8</span>,    <span class=\"nu0\">7</span>,   <span class=\"nu0\">1770035416</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0  9 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">9</span>,   <span class=\"nu0\">12</span>,   <span class=\"nu0\">2336552879</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 10 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> c,   d,   a,   b,   <span class=\"nu0\">10</span>,   <span class=\"nu0\">17</span>,   <span class=\"nu0\">4294925233</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 11 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> b,   c,   d,   a,   <span class=\"nu0\">11</span>,   <span class=\"nu0\">22</span>,   <span class=\"nu0\">2304563134</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 12 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> a,   b,   c,   d,   <span class=\"nu0\">12</span>,    <span class=\"nu0\">7</span>,   <span class=\"nu0\">1804603682</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 13 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> d,   a,   b,   c,   <span class=\"nu0\">13</span>,   <span class=\"nu0\">12</span>,   <span class=\"nu0\">4254626195</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 14 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> c,   d,   a,   b,   <span class=\"nu0\">14</span>,   <span class=\"nu0\">17</span>,   <span class=\"nu0\">2792965006</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 15 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part1<span class=\"br0\">(</span> b,   c,   d,   a,   <span class=\"nu0\">15</span>,   <span class=\"nu0\">22</span>,   <span class=\"nu0\">1236535329</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 16 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">1</span>,    <span class=\"nu0\">5</span>,   <span class=\"nu0\">4129170786</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 17 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">6</span>,    <span class=\"nu0\">9</span>,   <span class=\"nu0\">3225465664</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 18 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> c,   d,   a,   b,   <span class=\"nu0\">11</span>,   <span class=\"nu0\">14</span>,    <span class=\"nu0\">643717713</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 19 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">0</span>,   <span class=\"nu0\">20</span>,   <span class=\"nu0\">3921069994</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 20 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">5</span>,    <span class=\"nu0\">5</span>,   <span class=\"nu0\">3593408605</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 21 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> d,   a,   b,   c,   <span class=\"nu0\">10</span>,    <span class=\"nu0\">9</span>,     <span class=\"nu0\">38016083</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 22 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> c,   d,   a,   b,   <span class=\"nu0\">15</span>,   <span class=\"nu0\">14</span>,   <span class=\"nu0\">3634488961</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 23 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">4</span>,   <span class=\"nu0\">20</span>,   <span class=\"nu0\">3889429448</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 24 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">9</span>,    <span class=\"nu0\">5</span>,    <span class=\"nu0\">568446438</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 25 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> d,   a,   b,   c,   <span class=\"nu0\">14</span>,    <span class=\"nu0\">9</span>,   <span class=\"nu0\">3275163606</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 26 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> c,   d,   a,   b,    <span class=\"nu0\">3</span>,   <span class=\"nu0\">14</span>,   <span class=\"nu0\">4107603335</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 27 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">8</span>,   <span class=\"nu0\">20</span>,   <span class=\"nu0\">1163531501</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 28 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> a,   b,   c,   d,   <span class=\"nu0\">13</span>,    <span class=\"nu0\">5</span>,   <span class=\"nu0\">2850285829</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 29 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">2</span>,    <span class=\"nu0\">9</span>,   <span class=\"nu0\">4243563512</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 30 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> c,   d,   a,   b,    <span class=\"nu0\">7</span>,   <span class=\"nu0\">14</span>,   <span class=\"nu0\">1735328473</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 31 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part2<span class=\"br0\">(</span> b,   c,   d,   a,   <span class=\"nu0\">12</span>,   <span class=\"nu0\">20</span>,   <span class=\"nu0\">2368359562</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 32 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">5</span>,    <span class=\"nu0\">4</span>,   <span class=\"nu0\">4294588738</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 33 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">8</span>,   <span class=\"nu0\">11</span>,   <span class=\"nu0\">2272392833</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 34 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> c,   d,   a,   b,   <span class=\"nu0\">11</span>,   <span class=\"nu0\">16</span>,   <span class=\"nu0\">1839030562</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 35 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> b,   c,   d,   a,   <span class=\"nu0\">14</span>,   <span class=\"nu0\">23</span>,   <span class=\"nu0\">4259657740</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 36 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">1</span>,    <span class=\"nu0\">4</span>,   <span class=\"nu0\">2763975236</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 37 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">4</span>,   <span class=\"nu0\">11</span>,   <span class=\"nu0\">1272893353</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 38 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> c,   d,   a,   b,    <span class=\"nu0\">7</span>,   <span class=\"nu0\">16</span>,   <span class=\"nu0\">4139469664</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 39 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> b,   c,   d,   a,   <span class=\"nu0\">10</span>,   <span class=\"nu0\">23</span>,   <span class=\"nu0\">3200236656</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 40 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> a,   b,   c,   d,   <span class=\"nu0\">13</span>,    <span class=\"nu0\">4</span>,    <span class=\"nu0\">681279174</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 41 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">0</span>,   <span class=\"nu0\">11</span>,   <span class=\"nu0\">3936430074</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 42 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> c,   d,   a,   b,    <span class=\"nu0\">3</span>,   <span class=\"nu0\">16</span>,   <span class=\"nu0\">3572445317</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 43 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">6</span>,   <span class=\"nu0\">23</span>,     <span class=\"nu0\">76029189</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 44 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">9</span>,    <span class=\"nu0\">4</span>,   <span class=\"nu0\">3654602809</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 45 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> d,   a,   b,   c,   <span class=\"nu0\">12</span>,   <span class=\"nu0\">11</span>,   <span class=\"nu0\">3873151461</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 46 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> c,   d,   a,   b,   <span class=\"nu0\">15</span>,   <span class=\"nu0\">16</span>,    <span class=\"nu0\">530742520</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 47 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part3<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">2</span>,   <span class=\"nu0\">23</span>,   <span class=\"nu0\">3299628645</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 48 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">0</span>,    <span class=\"nu0\">6</span>,   <span class=\"nu0\">4096336452</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 49 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">7</span>,   <span class=\"nu0\">10</span>,   <span class=\"nu0\">1126891415</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 50 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> c,   d,   a,   b,   <span class=\"nu0\">14</span>,   <span class=\"nu0\">15</span>,   <span class=\"nu0\">2878612391</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 51 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">5</span>,   <span class=\"nu0\">21</span>,   <span class=\"nu0\">4237533241</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 52 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> a,   b,   c,   d,   <span class=\"nu0\">12</span>,    <span class=\"nu0\">6</span>,   <span class=\"nu0\">1700485571</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 53 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> d,   a,   b,   c,    <span class=\"nu0\">3</span>,   <span class=\"nu0\">10</span>,   <span class=\"nu0\">2399980690</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 54 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> c,   d,   a,   b,   <span class=\"nu0\">10</span>,   <span class=\"nu0\">15</span>,   <span class=\"nu0\">4293915773</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 55 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">1</span>,   <span class=\"nu0\">21</span>,   <span class=\"nu0\">2240044497</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 56 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">8</span>,    <span class=\"nu0\">6</span>,   <span class=\"nu0\">1873313359</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 57 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> d,   a,   b,   c,   <span class=\"nu0\">15</span>,   <span class=\"nu0\">10</span>,   <span class=\"nu0\">4264355552</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 58 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> c,   d,   a,   b,    <span class=\"nu0\">6</span>,   <span class=\"nu0\">15</span>,   <span class=\"nu0\">2734768916</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 59 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> b,   c,   d,   a,   <span class=\"nu0\">13</span>,   <span class=\"nu0\">21</span>,   <span class=\"nu0\">1309151649</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 60 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> a,   b,   c,   d,    <span class=\"nu0\">4</span>,    <span class=\"nu0\">6</span>,   <span class=\"nu0\">4149444226</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 61 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       d  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> d,   a,   b,   c,   <span class=\"nu0\">11</span>,   <span class=\"nu0\">10</span>,   <span class=\"nu0\">3174756917</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 62 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       c  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> c,   d,   a,   b,    <span class=\"nu0\">2</span>,   <span class=\"nu0\">15</span>,    <span class=\"nu0\">718787259</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 63 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       b  =  <span class=\"sy0\">.</span>part4<span class=\"br0\">(</span> b,   c,   d,   a,    <span class=\"nu0\">9</span>,   <span class=\"nu0\">21</span>,   <span class=\"nu0\">3951481745</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0 64 \u25a0\u25a0\u25a0\u25a0*/</span><br/>       a  =  <span class=\"sy0\">.</span>a<span class=\"br0\">(</span>a_, a<span class=\"br0\">)</span>;     b=<span class=\"sy0\">.</span>a<span class=\"br0\">(</span>b_, b<span class=\"br0\">)</span>;      c=<span class=\"sy0\">.</span>a<span class=\"br0\">(</span>c_, c<span class=\"br0\">)</span>;    d=<span class=\"sy0\">.</span>a<span class=\"br0\">(</span>d_, d<span class=\"br0\">)</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>     <span class=\"kw1\">return</span> <span class=\"kw6\">c2x</span><span class=\"br0\">(</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"kw6\">c2x</span><span class=\"br0\">(</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"kw6\">c2x</span><span class=\"br0\">(</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"kw6\">c2x</span><span class=\"br0\">(</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>a:     <span class=\"kw1\">return</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">d2c</span><span class=\"br0\">(</span> <span class=\"kw6\">c2d</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>   +   <span class=\"kw6\">c2d</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>,  <span class=\"nu0\">4</span>, <span class=\"st0\">'0'</span>x<span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>h:     <span class=\"kw1\">return</span>  <span class=\"kw6\">bitxor</span><span class=\"br0\">(</span> <span class=\"kw6\">bitxor</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>i:     <span class=\"kw1\">return</span>  <span class=\"kw6\">bitxor</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"kw6\">bitor</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw6\">bitxor</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>,        <span class=\"st0\">'ffffffff'</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>f:     <span class=\"kw1\">return</span>  <span class=\"kw6\">bitor</span><span class=\"br0\">(</span> <span class=\"kw6\">bitand</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"kw6\">bitand</span><span class=\"br0\">(</span><span class=\"kw6\">bitxor</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">'ffffffff'</span>x<span class=\"br0\">)</span>, <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>g:     <span class=\"kw1\">return</span>  <span class=\"kw6\">bitor</span><span class=\"br0\">(</span> <span class=\"kw6\">bitand</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"kw6\">bitand</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"kw6\">bitxor</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, <span class=\"st0\">'ffffffff'</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>Lr:    <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> _,#;           <span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> _       <span class=\"coMULTI\">/*left rotate.*/</span><br/>                 \u00a0?=<span class=\"kw6\">x2b</span><span class=\"br0\">(</span><span class=\"kw6\">c2x</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span>;     <span class=\"kw1\">return</span> <span class=\"kw6\">x2c</span><span class=\"br0\">(</span> <span class=\"kw6\">b2x</span><span class=\"br0\">(</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>? <span class=\"sy0\">||</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>?, #<span class=\"br0\">)</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>?<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>part1: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> w,x,y,z,n,m,_;        n=n+<span class=\"nu0\">1</span><br/>                  <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>a<span class=\"br0\">(</span><span class=\"sy0\">.</span>Lr<span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">d2c</span><span class=\"br0\">(</span>_+<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> +<span class=\"kw6\">c2d</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>f<span class=\"br0\">(</span>x,y,z<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">4</span>,<span class=\"st0\">'0'</span>x<span class=\"br0\">)</span>,m<span class=\"br0\">)</span>,x<span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>part2: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> w,x,y,z,n,m,_;        n=n+<span class=\"nu0\">1</span><br/>                  <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>a<span class=\"br0\">(</span><span class=\"sy0\">.</span>Lr<span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">d2c</span><span class=\"br0\">(</span>_+<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> +<span class=\"kw6\">c2d</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>g<span class=\"br0\">(</span>x,y,z<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">4</span>,<span class=\"st0\">'0'</span>x<span class=\"br0\">)</span>,m<span class=\"br0\">)</span>,x<span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>part3: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> w,x,y,z,n,m,_;        n=n+<span class=\"nu0\">1</span><br/>                  <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>a<span class=\"br0\">(</span><span class=\"sy0\">.</span>Lr<span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">d2c</span><span class=\"br0\">(</span>_+<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> +<span class=\"kw6\">c2d</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>h<span class=\"br0\">(</span>x,y,z<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">4</span>,<span class=\"st0\">'0'</span>x<span class=\"br0\">)</span>,m<span class=\"br0\">)</span>,x<span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>part4: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> w,x,y,z,n,m,_;        n=n+<span class=\"nu0\">1</span><br/>                  <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>a<span class=\"br0\">(</span><span class=\"sy0\">.</span>Lr<span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">d2c</span><span class=\"br0\">(</span><span class=\"kw6\">c2d</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> +<span class=\"kw6\">c2d</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>i<span class=\"br0\">(</span>x,y,z<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>n<span class=\"br0\">)</span>+_<span class=\"br0\">)</span>,<span class=\"nu0\">4</span>,<span class=\"st0\">'0'</span>x<span class=\"br0\">)</span>,m<span class=\"br0\">)</span>,x<span class=\"br0\">)</span></pre>"}, {"lang": "RLaB", "loc": 5, "block": "<pre class=\"text highlighted_source\">&gt;&gt; x = \"The quick brown fox jumped over the lazy dog's back\"<br/>The quick brown fox jumped over the lazy dog's back<br/>\u00a0<br/>&gt;&gt; hash(\"md5\", x)<br/>e38ca1d920c4b8b8d3946b2c72f01680</pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>See MD5(\"my string!\") + nl<br/># output\u00a0: a83a049fbe50cf7334caa86bf16a3520<br/>\u00a0</pre>"}, {"lang": "RPG", "loc": 89, "block": "<pre class=\"text highlighted_source\">**FREE<br/>Ctl-opt MAIN(Main);<br/>Ctl-opt DFTACTGRP(*NO) ACTGRP(*NEW);<br/>\u00a0<br/>dcl-pr QDCXLATE EXTPGM('QDCXLATE');<br/>  dataLen         packed(5\u00a0: 0) CONST;<br/>  data            char(32767) options(*VARSIZE);<br/>  conversionTable char(10) CONST;<br/>end-pr;<br/>\u00a0<br/>dcl-pr Qc3CalculateHash EXTPROC('Qc3CalculateHash');<br/>  inputData             pointer value;<br/>  inputDataLen          int(10) const;<br/>  inputDataFormat       char(8) const;<br/>  algorithmDscr         char(16) const;<br/>  algorithmFormat       char(8) const;<br/>  cryptoServiceProvider char(1) const;<br/>  cryptoDeviceName      char(1) const options(*OMIT);<br/>  hash                  char(64) options(*VARSIZE\u00a0: *OMIT);<br/>  errorCode             char(32767) options(*VARSIZE);<br/>end-pr;<br/>\u00a0<br/>dcl-c HEX_CHARS CONST('0123456789ABCDEF');<br/>\u00a0<br/>dcl-proc Main;<br/>  dcl-s inputData char(45);<br/>  dcl-s inputDataLen int(10) INZ(0);<br/>  dcl-s outputHash char(16);<br/>  dcl-s outputHashHex char(32);<br/>  dcl-ds algorithmDscr QUALIFIED;<br/>    hashAlgorithm int(10) INZ(0);<br/>  end-ds;<br/>  dcl-ds ERRC0100_NULL QUALIFIED;<br/>    bytesProvided int(10) INZ(0);  // Leave at zero<br/>    bytesAvailable int(10);<br/>  end-ds;<br/>\u00a0<br/>  dow inputDataLen = 0;<br/>    DSPLY 'Input: ' '' inputData;<br/>    inputData =\u00a0%trim(inputData);<br/>    inputDataLen =\u00a0%len(%trim(inputData));<br/>    DSPLY ('Input=' + inputData);<br/>    DSPLY ('InputLen=' +\u00a0%char(inputDataLen));<br/>    if inputDataLen = 0;<br/>      DSPLY 'Input must not be blank';<br/>    endif;<br/>  enddo;<br/>\u00a0<br/>  // Convert from EBCDIC to ASCII<br/>  QDCXLATE(inputDataLen\u00a0: inputData\u00a0: 'QTCPASC');<br/>  algorithmDscr.hashAlgorithm = 1;   // MD5<br/>  // Calculate hash<br/>  Qc3CalculateHash(%addr(inputData)\u00a0: inputDataLen\u00a0: 'DATA0100'\u00a0: algorithmDscr<br/>                  \u00a0: 'ALGD0500'\u00a0: '0'\u00a0: *OMIT\u00a0: outputHash\u00a0: ERRC0100_NULL);<br/>  // Convert to hex<br/>  CVTHC(outputHashHex\u00a0: outputHash\u00a0: 32);<br/>  DSPLY ('MD5: ' + outputHashHex);<br/>  return;<br/>end-proc;<br/>\u00a0<br/>// This procedure is actually a MI, but I couldn't get it to bind so I wrote my own version<br/>dcl-proc CVTHC;<br/>  dcl-pi *N;<br/>    target char(65534) options(*VARSIZE);<br/>    srcBits char(32767) options(*VARSIZE) CONST;<br/>    targetLen int(10) value;<br/>  end-pi;<br/>  dcl-s i int(10);<br/>  dcl-s lowNibble ind INZ(*OFF);<br/>  dcl-s inputOffset int(10) INZ(1);<br/>  dcl-ds dataStruct QUALIFIED;<br/>    numField int(5) INZ(0);<br/>    // IBM i is big-endian<br/>    charField char(1) OVERLAY(numField\u00a0: 2);<br/>  end-ds;<br/>\u00a0<br/>  for i = 1 to targetLen;<br/>    if lowNibble;<br/>      dataStruct.charField =\u00a0%BitAnd(%subst(srcBits\u00a0: inputOffset\u00a0: 1)\u00a0: X'0F');<br/>      inputOffset += 1;<br/>    else;<br/>      dataStruct.charField =\u00a0%BitAnd(%subst(srcBits\u00a0: inputOffset\u00a0: 1)\u00a0: X'F0');<br/>      dataStruct.numField /= 16;<br/>    endif;<br/>   \u00a0%subst(target\u00a0: i\u00a0: 1) =\u00a0%subst(HEX_CHARS\u00a0: dataStruct.numField + 1\u00a0: 1);<br/>    lowNibble = NOT lowNibble;<br/>  endfor;<br/>  return;<br/>end-proc;</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'digest'</span><br/><span class=\"re2\">Digest::MD5</span>.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># =&gt; \"e38ca1d920c4b8b8d3946b2c72f01680\"</span></pre>"}, {"lang": "Rust", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[dependencies]<br/>rust-crypto = \"0.2\"<br/>\u00a0</pre>"}, {"lang": "S-lang", "loc": 2, "block": "<pre class=\"text highlighted_source\">require(\"chksum\");<br/>print(md5sum(\"The quick brown fox jumped over the lazy dog's back\"));</pre>"}, {"lang": "Scala", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RosettaMD5 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> MD5<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Besides \"MD5\", \"SHA-256\", and other hashes are available</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> java.<span class=\"me1\">security</span>.<span class=\"me1\">MessageDigest</span>.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"MD5\"</span><span class=\"br0\">)</span>.<span class=\"me1\">digest</span><span class=\"br0\">(</span>s.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    m.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span><span class=\"st0\">\"d41d8cd98f00b204e9800998ecf8427e\"</span> <span class=\"sy0\">==</span> MD5<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span><span class=\"st0\">\"0cc175b9c0f1b6a831c399e269772661\"</span> <span class=\"sy0\">==</span> MD5<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span><span class=\"st0\">\"900150983cd24fb0d6963f7d28e17f72\"</span> <span class=\"sy0\">==</span> MD5<span class=\"br0\">(</span><span class=\"st0\">\"abc\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span><span class=\"st0\">\"f96b697d7cb7938d525a2f31aaf161d0\"</span> <span class=\"sy0\">==</span> MD5<span class=\"br0\">(</span><span class=\"st0\">\"message digest\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span><span class=\"st0\">\"c3fcd3d76192e4007dfb496cca67e13b\"</span> <span class=\"sy0\">==</span> MD5<span class=\"br0\">(</span><span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span><span class=\"st0\">\"e38ca1d920c4b8b8d3946b2c72f01680\"</span> <span class=\"sy0\">==</span> MD5<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span><span class=\"st0\">\"d174ab98d277d9f5a5611c2c9f419d9f\"</span> <span class=\"sy0\">==</span><br/>    MD5<span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span><span class=\"st0\">\"57edf4a22be3c955ac49da2e2107b67a\"</span> <span class=\"sy0\">==</span><br/>    MD5<span class=\"br0\">(</span><span class=\"st0\">\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">compat</span>.<span class=\"me1\">Platform</span>.<span class=\"me1\">currentTime</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [total ${currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"msgdigest.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(hex(md5(\"The quick brown fox jumped over the lazy dog's back\")));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var digest = frequire<span class=\"br0\">(</span><span class=\"st0\">'Digest::MD5'</span><span class=\"br0\">)</span>;<br/>say digest.<span class=\"me1\">md5_hex</span><span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">'The quick brown fox jumped over the lazy dog\\'s back' md5String. \"==&gt; 'e38ca1d920c4b8b8d3946b2c72f01680'\"</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">PackageLoader</span> fileInPackage: <span class=\"st0\">'Digest'</span>\u00a0!<br/><span class=\"br0\">(</span><span class=\"re0\">MD5</span> hexDigestOf: <span class=\"st0\">'The quick brown fox jumped over the lazy dog'</span><span class=\"st0\">'s back'</span><span class=\"br0\">)</span> displayNl.</pre>"}, {"lang": "SQL", "loc": 1, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">SELECT</span> MD5<span class=\"br0\">(</span><span class=\"st0\">'The quick brown fox jumped over the lazy dog<span class=\"es0\">\\'</span>s back'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Suneido", "loc": 1, "block": "<pre class=\"text highlighted_source\">Md5('The quick brown fox jumped over the lazy dog\\'s back')</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require md5<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>md5::<span class=\"me1\">md5</span> -hex <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span><span class=\"br0\">]</span><br/><span class=\"co1\"># ==&gt; E38CA1D920C4B8B8D3946B2C72F01680</span></pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">echo</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dog's back\"</span> <span class=\"sy0\">|</span> md5sum</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">Utils.MD5.calc(\"message digest\"); //--&gt;\"f96b697d7cb7938d525a2f31aaf161d0\"<br/>Utils.MD5.calc(\"abcdefghijklmnopqrstuvwxyz\"); //--&gt;\"c3fcd3d76192e4007dfb496cca67e13b\"</pre>"}]}