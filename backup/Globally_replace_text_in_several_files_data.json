{"task": "Globally_replace_text_in_several_files", "blocks": [{"lang": "Ada", "loc": 60, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>, Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>, Ada.<span class=\"me1\">Directories</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Global_Replace <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> U_String <span class=\"kw1\">is</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">Unbounded_String</span>;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> U_String <span class=\"kw3\">renames</span><br/>     Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">To_Unbounded_String</span>;<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">(</span>U: U_String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw3\">renames</span><br/>     Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">To_String</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> String_Replace<span class=\"br0\">(</span>S: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> U_String; Pattern, Replacement: String<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- example: if S is \"Mary had a XX lamb\", then String_Replace(S, \"X\", \"little\");</span><br/>      <span class=\"co1\">--          will turn S into \"Mary had a littlelittle lamb\"</span><br/>      <span class=\"co1\">--          and String_Replace(S, \"Y\", \"small\"); will not change S</span><br/>\u00a0<br/>      Index\u00a0: Natural;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>         Index\u00a0:= Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">Index</span><span class=\"br0\">(</span>Source =&gt; S, Pattern =&gt; Pattern<span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Index = <span class=\"nu0\">0</span>;<br/>         Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">Replace_Slice</span><br/>           <span class=\"br0\">(</span>Source =&gt; S, Low =&gt; Index, High =&gt; Index+Pattern'Length-<span class=\"nu0\">1</span>,<br/>            By =&gt; Replacement<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> String_Replace;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> File_Replace<span class=\"br0\">(</span>Filename: String; Pattern, Replacement: String<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- applies String_Rplace to each line in the file with the given Filename</span><br/>      <span class=\"co1\">-- propagates any exceptions, when, e.g., the file does not exist </span><br/>\u00a0<br/>      I_File, O_File: Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">File_Type</span>;<br/>      Line: U_String;<br/>      Tmp_Name: String\u00a0:= Filename &amp; <span class=\"st0\">\".tmp\"</span>; <br/>         <span class=\"co1\">-- name of temporary file; if that file already exists, it will be overwritten</span><br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Open</span><span class=\"br0\">(</span>I_File, Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">In_File</span>, Filename<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Create</span><span class=\"br0\">(</span>O_File, Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Out_File</span>, Tmp_Name<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">End_Of_File</span><span class=\"br0\">(</span>I_File<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         Line\u00a0:= +Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span><span class=\"br0\">(</span>I_File<span class=\"br0\">)</span>;<br/>         String_Replace<span class=\"br0\">(</span>Line, Pattern, Replacement<span class=\"br0\">)</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>O_File, -Line<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Close</span><span class=\"br0\">(</span>I_File<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Close</span><span class=\"br0\">(</span>O_File<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Directories</span>.<span class=\"me1\">Delete_File</span><span class=\"br0\">(</span>Filename<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Directories</span>.<span class=\"me1\">Rename</span><span class=\"br0\">(</span>Old_Name =&gt; Tmp_Name, New_Name =&gt; Filename<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> File_Replace;<br/>\u00a0<br/>   Pattern:     String\u00a0:= Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Replacement: String\u00a0:=  Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Replacing \"</span><span class=\"st0\">\"\"</span> &amp; Pattern<br/>                          &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\" by \"</span><span class=\"st0\">\"\"</span> &amp; Replacement &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\" in\"</span><br/>                          &amp; Integer'Image<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> - <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                          &amp; <span class=\"st0\">\" files.\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">3</span> .. <span class=\"me1\">Ada</span>.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> <span class=\"kw1\">loop</span><br/>      File_Replace<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Pattern, Replacement<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Global_Replace;</pre>"}, {"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetWorkingDir.htm\"><span class=\"kw3\">SetWorkingDir</span></a> <span class=\"re0\">%A_ScriptDir%</span>      <span class=\"co1\">; Change the working directory to the script's location</span><br/>listFiles <span class=\"sy0\">:=</span> <span class=\"st0\">\"a.txt|b.txt|c.txt\"</span> <span class=\"co1\">; Define a list of files in the current working directory</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> listFiles<span class=\"sy0\">,</span> |<br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">; The above parses the list based on the | character</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">fileread</span></a><span class=\"sy0\">,</span> contents<span class=\"sy0\">,</span> <span class=\"re0\">%A_LoopField%</span> <span class=\"co1\">; Read the file</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">fileDelete</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_LoopField%</span>         <span class=\"co1\">; Delete the file</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">stringReplace</span></a><span class=\"sy0\">,</span> contents<span class=\"sy0\">,</span> contents<span class=\"sy0\">,</span> Goodbye London!<span class=\"sy0\">,</span> Hello New York!<span class=\"sy0\">,</span> All <span class=\"co1\">; replace all occurrences</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">fileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%contents%</span><span class=\"sy0\">,</span> <span class=\"re0\">%A_LoopField%</span> <span class=\"co1\">; Re-create the file with new contents</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 30, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f GLOBALLY_REPLACE_TEXT_IN_SEVERAL_FILES.AWK filename(s)</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    old_text = <span class=\"st0\">\"Goodbye London!\"</span><br/>    new_text = <span class=\"st0\">\"Hello New York!\"</span><br/><span class=\"br0\">}</span><br/>BEGINFILE <span class=\"br0\">{</span><br/>    nfiles_in<span class=\"sy3\">++</span><br/>    text_found = <span class=\"nu0\">0</span><br/>    delete arr<br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">gsub</span><span class=\"br0\">(</span>old_text,new_text,<span class=\"re0\">$0</span><span class=\"br0\">)</span> <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      text_found<span class=\"sy3\">++</span><br/>    <span class=\"br0\">}</span><br/>    arr<span class=\"br0\">[</span><span class=\"kw3\">FNR</span><span class=\"br0\">]</span> = <span class=\"re0\">$0</span><br/><span class=\"br0\">}</span><br/>ENDFILE <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>text_found <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      nfiles_out<span class=\"sy3\">++</span><br/>      <span class=\"kw5\">close</span><span class=\"br0\">(</span><span class=\"kw3\">FILENAME</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">FNR</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy2\">&gt;</span><span class=\"kw3\">FILENAME</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"files:\u00a0%d read,\u00a0%d updated<span class=\"es0\">\\n</span>\"</span>,nfiles_in,nfiles_out<span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 38, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckconst.shtml\"><span class=\"kw3\">CONST</span></a> matchtext <span class=\"sy0\">=</span> <span class=\"st0\">\"Goodbye London!\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckconst.shtml\"><span class=\"kw3\">CONST</span></a> repltext  <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello New York!\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckconst.shtml\"><span class=\"kw3\">CONST</span></a> matchlen  <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>matchtext<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> L0 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> filespec <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> linein <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>\u00a0<br/>L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">WHILE</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckcommand%24.shtml\"><span class=\"kw3\">COMMAND$</span></a><span class=\"br0\">(</span>L0<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    filespec <span class=\"sy0\">=</span> DIR$<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckcommand%24.shtml\"><span class=\"kw3\">COMMAND$</span></a><span class=\"br0\">(</span>L0<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">WHILE</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>filespec<span class=\"br0\">)</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckopen.shtml\"><span class=\"kw3\">OPEN</span></a> filespec <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckbinary.shtml\"><span class=\"kw3\">BINARY</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <span class=\"nu0\">1</span><br/>            linein <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckspace%24.shtml\"><span class=\"kw3\">SPACE$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qcklof.shtml\"><span class=\"kw3\">LOF</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckget.shtml\"><span class=\"kw3\">GET</span></a> <span class=\"re2\">#1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> linein<br/>            <span class=\"kw1\">DO</span><br/>                x <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><span class=\"br0\">(</span>linein<span class=\"sy0\">,</span> matchtext<span class=\"br0\">)</span><br/>                <span class=\"kw1\">IF</span> x <span class=\"kw1\">THEN</span><br/>                    linein <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckleft%24.shtml\"><span class=\"kw3\">LEFT$</span></a><span class=\"br0\">(</span>linein<span class=\"sy0\">,</span> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; repltext &amp; <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>linein<span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> matchlen<span class=\"br0\">)</span><br/>                    <span class=\"co1\">' If matchtext and repltext are of equal length (as in this example)</span><br/>                    <span class=\"co1\">' then you can replace the above line with this:</span><br/>                    <span class=\"co1\">' MID$(linein, x) = repltext</span><br/>                    <span class=\"co1\">' This is somewhat more efficient than having to rebuild the string.</span><br/>                <span class=\"kw1\">ELSE</span><br/>                    <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">DO</span><br/>                <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>            <span class=\"kw1\">LOOP</span><br/>        <span class=\"co1\">' If matchtext and repltext are of equal length (as in this example), or repltext</span><br/>        <span class=\"co1\">' is longer than matchtext, you could just write back to the file while it's open</span><br/>        <span class=\"co1\">' in BINARY mode, like so:</span><br/>        <span class=\"co1\">' PUT #1, 1, linein</span><br/>        <span class=\"co1\">' But since there's no way to reduce the file size via BINARY and PUT, we do this:</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckopen.shtml\"><span class=\"kw3\">OPEN</span></a> filespec <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckoutput.shtml\"><span class=\"kw3\">OUTPUT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <span class=\"nu0\">1</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"re2\">#1</span><span class=\"sy0\">,</span> linein;<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a><br/>        filespec <span class=\"sy0\">=</span> DIR$<br/>    <span class=\"kw1\">WEND</span><br/>    L0 <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">WEND</span></pre>"}, {"lang": "BBC BASIC", "loc": 30, "block": "<pre class=\"text highlighted_source\">      FindThis$ = \"Goodbye London!\"<br/>      ReplaceWith$ = \"Hello New York!\"<br/>\u00a0<br/>      DIM Files$(3)<br/>      Files$() = \"C:\\test1.txt\", \"C:\\test2.txt\", \"C:\\test3.txt\", \"C:\\test4.txt\"<br/>\u00a0<br/>      FOR f% = 0 TO DIM(Files$(),1)<br/>        infile$ = Files$(f%)<br/>        infile% = OPENIN(infile$)<br/>        IF infile%=0 ERROR 100, \"Failed to open file \" + infile$<br/>        tmpfile$ = @tmp$+\"replace.txt\"<br/>        tmpfile% = OPENOUT(tmpfile$)<br/>\u00a0<br/>        WHILE NOT EOF#infile%<br/>          INPUT #infile%, a$<br/>          IF ASCa$=10 a$ = MID$(a$,2)<br/>          l% = LEN(FindThis$)<br/>          REPEAT<br/>            here% = INSTR(a$, FindThis$)<br/>            IF here% a$ = LEFT$(a$,here%-1) + ReplaceWith$ + MID$(a$,here%+l%)<br/>          UNTIL here% = 0<br/>          PRINT #tmpfile%, a$\u00a0: BPUT #tmpfile%,10<br/>        ENDWHILE<br/>        CLOSE #infile%<br/>        CLOSE #tmpfile%<br/>\u00a0<br/>        OSCLI \"DEL \"\"\" + infile$ + \"\"\"\"<br/>        OSCLI \"REN \"\"\" + tmpfile$ + \"\"\" \"\"\" + infile$ + \"\"\"\"<br/>      NEXT<br/>      END</pre>"}, {"lang": "C", "loc": 75, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stddef.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/><span class=\"co2\">#include &lt;fcntl.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/stat.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;err.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> find_match<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> buf_end<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>pat<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tptrdiff_t i<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>start <span class=\"sy0\">=</span> buf<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>start <span class=\"sy0\">+</span> len <span class=\"sy0\">&lt;</span> buf_end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>start<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> pat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> len<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>start<span class=\"sy0\">;</span><br/>\t\tstart<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> replace<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>from<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>to<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>fname<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"co2\">#define bail(msg) { warn(msg\" '%s'\", fname); goto done; }</span><br/>\t<span class=\"kw4\">struct</span> stat st<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buf <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>start<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>end<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">size_t</span> len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>from<span class=\"br0\">)</span><span class=\"sy0\">,</span> nlen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> fd <span class=\"sy0\">=</span> open<span class=\"br0\">(</span>fname<span class=\"sy0\">,</span> O_RDWR<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fd <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Can't open\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fstat<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>st<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Can't stat\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>buf <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>st.<span class=\"me1\">st_size</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Can't alloc\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>read<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> st.<span class=\"me1\">st_size</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> st.<span class=\"me1\">st_size</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Bad read\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tstart <span class=\"sy0\">=</span> buf<span class=\"sy0\">;</span><br/>\tend <span class=\"sy0\">=</span> find_match<span class=\"br0\">(</span>start<span class=\"sy0\">,</span> buf <span class=\"sy0\">+</span> st.<span class=\"me1\">st_size</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>end<span class=\"br0\">)</span> <span class=\"kw1\">goto</span> done<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* no match found, don't change file */</span><br/>\u00a0<br/>\tftruncate<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tlseek<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\twrite<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> end <span class=\"sy0\">-</span> start<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* write content before match */</span><br/>\t\twrite<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> nlen<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* write replacement of match */</span><br/>\t\tstart <span class=\"sy0\">=</span> end <span class=\"sy0\">+</span> len<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* skip to end of match */</span><br/>\t\t\t\t\t\t<span class=\"coMULTI\">/* find match again */</span><br/>\t\tend <span class=\"sy0\">=</span> find_match<span class=\"br0\">(</span>start<span class=\"sy0\">,</span> buf <span class=\"sy0\">+</span> st.<span class=\"me1\">st_size</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>end<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* write leftover after last match */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy0\">&lt;</span> buf <span class=\"sy0\">+</span> st.<span class=\"me1\">st_size</span><span class=\"br0\">)</span><br/>\t\twrite<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> buf <span class=\"sy0\">+</span> st.<span class=\"me1\">st_size</span> <span class=\"sy0\">-</span> start<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>done<span class=\"sy0\">:</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fd <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> close<span class=\"br0\">(</span>fd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>buf<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>from <span class=\"sy0\">=</span> <span class=\"st0\">\"Goodbye, London!\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>to   <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, New York!\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> files<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"test1.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"test2.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"test3.txt\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>files<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\treplace<span class=\"br0\">(</span>from<span class=\"sy0\">,</span> to<span class=\"sy0\">,</span> files<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 27, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;boost/regex.hpp&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc , <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   boost<span class=\"sy4\">::</span><span class=\"me2\">regex</span> to_be_replaced<span class=\"br0\">(</span> <span class=\"st0\">\"Goodbye London<span class=\"es1\">\\\\</span>s*!\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> replacement<span class=\"br0\">(</span> <span class=\"st0\">\"Hello New York!\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> argc <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> infile <span class=\"br0\">(</span> argv<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> infile <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">string</span> filetext<span class=\"br0\">(</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">istreambuf_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> infile <span class=\"br0\">)</span><span class=\"br0\">)</span> ,<br/>\t       std<span class=\"sy4\">::</span><span class=\"me2\">istreambuf_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">string</span> changed <span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">regex_replace</span><span class=\"br0\">(</span> filetext , to_be_replaced , replacement <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t infile.<span class=\"me1\">close</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">ofstream</span> outfile<span class=\"br0\">(</span> argv<span class=\"br0\">[</span> i <span class=\"br0\">]</span> , std<span class=\"sy4\">::</span><span class=\"me2\">ios_base</span><span class=\"sy4\">::</span><span class=\"me2\">out</span> <span class=\"sy3\">|</span> std<span class=\"sy4\">::</span><span class=\"me2\">ios_base</span><span class=\"sy4\">::</span><span class=\"me2\">trunc</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t <span class=\"kw1\">if</span> <span class=\"br0\">(</span> outfile.<span class=\"me1\">is_open</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>\t    outfile <span class=\"sy1\">&lt;&lt;</span> changed <span class=\"sy4\">;</span><br/>\t    outfile.<span class=\"me1\">close</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Can't find file \"</span> <span class=\"sy1\">&lt;&lt;</span> argv<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 16, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> files <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"test1.txt\"</span>,<br/>            <span class=\"st0\">\"test2.txt\"</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> file <span class=\"kw1\">in</span> files<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            File<span class=\"sy0\">.</span><span class=\"me1\">WriteAllText</span><span class=\"br0\">(</span>file, File<span class=\"sy0\">.</span><span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span><span class=\"st0\">\"Goodbye London!\"</span>, <span class=\"st0\">\"Hello New York!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> hello<span class=\"sy0\">-</span>goodbye <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> more<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>file more<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>spit file <span class=\"br0\">(</span><span class=\"sy0\">.</span>replace <span class=\"br0\">(</span>slurp file<span class=\"br0\">)</span> <span class=\"st0\">\"Goodbye London!\"</span> <span class=\"st0\">\"Hello New York!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> hello-goodbye <span class=\"br0\">(</span>files<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>replace-from-file <span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>in file<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>loop for line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line in <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>                  while line <span class=\"kw1\">do</span><br/>                    <span class=\"br0\">(</span>loop for index <span class=\"sy0\">=</span> <span class=\"br0\">(</span>search <span class=\"st0\">\"Goodbye London!\"</span> line<span class=\"br0\">)</span><br/>                       while index <span class=\"kw1\">do</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>subseq line index<span class=\"br0\">)</span> <span class=\"st0\">\"Hello New York!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  collecting line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>write-lines-to-file <span class=\"br0\">(</span>lines file<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>out file <span class=\"sy0\">:</span><span class=\"me1\">direction</span> <span class=\"sy0\">:</span><span class=\"me1\">output</span> <span class=\"sy0\">:</span><span class=\"me1\">if-exists</span> <span class=\"sy0\">:</span><span class=\"me1\">overwrite</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>line lines<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>write-line line out<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>replace-in-file <span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>write-lines-to-file <span class=\"br0\">(</span>replace-from-file file<span class=\"br0\">)</span> file<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>map <span class=\"kw1\">nil</span> #'replace-in-file files<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 8, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> from <span class=\"sy0\">=</span> <span class=\"st0\">\"Goodbye London!\"</span><span class=\"sy0\">,</span> to <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, New York!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>fn<span class=\"sy0\">;</span> <span class=\"st0\">\"a.txt b.txt c.txt\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        write<span class=\"br0\">(</span>fn<span class=\"sy0\">,</span> replace<span class=\"br0\">(</span><span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">)</span>read<span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"sy0\">,</span> from<span class=\"sy0\">,</span> to<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 24, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> globally_replace_text <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>in_files<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> main<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">in_files</span><span class=\"br0\">(</span> <span class=\"re5\">Old</span><span class=\"sy1\">,</span> <span class=\"re5\">New</span><span class=\"sy1\">,</span> <span class=\"re5\">Files</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw4\">is_list</span><span class=\"br0\">(</span><span class=\"re5\">Old</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re3\">in_files</span><span class=\"br0\">(</span> <span class=\"kw4\">binary</span>:<span class=\"re3\">list_to_bin</span><span class=\"br0\">(</span><span class=\"re5\">Old</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">binary</span>:<span class=\"re3\">list_to_bin</span><span class=\"br0\">(</span><span class=\"re5\">New</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Files</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">in_files</span><span class=\"br0\">(</span> <span class=\"re5\">Old</span><span class=\"sy1\">,</span> <span class=\"re5\">New</span><span class=\"sy1\">,</span> <span class=\"re5\">Files</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">replace_in_file</span><span class=\"br0\">(</span><span class=\"re5\">Old</span><span class=\"sy1\">,</span> <span class=\"re5\">New</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">read_file</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Files</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">Old</span><span class=\"sy1\">,</span> <span class=\"re5\">New</span> | <span class=\"re5\">Files</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">in_files</span><span class=\"br0\">(</span> <span class=\"re5\">Old</span><span class=\"sy1\">,</span> <span class=\"re5\">New</span><span class=\"sy1\">,</span> <span class=\"re5\">Files</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">replace_in_file</span><span class=\"br0\">(</span> <span class=\"re5\">Old</span><span class=\"sy1\">,</span> <span class=\"re5\">New</span><span class=\"sy1\">,</span> <span class=\"re5\">File</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Binary</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">replace_in_file_return</span><span class=\"br0\">(</span> <span class=\"re5\">File</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">write_file</span><span class=\"br0\">(</span><span class=\"re5\">File</span><span class=\"sy1\">,</span> <span class=\"kw4\">binary</span>:<span class=\"re3\">replace</span><span class=\"br0\">(</span><span class=\"re5\">Binary</span><span class=\"sy1\">,</span> <span class=\"re5\">Old</span><span class=\"sy1\">,</span> <span class=\"re5\">New</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>global<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">replace_in_file</span><span class=\"br0\">(</span> <span class=\"re5\">_Old</span><span class=\"sy1\">,</span> <span class=\"re5\">_New</span><span class=\"sy1\">,</span> <span class=\"re5\">File</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>error<span class=\"sy1\">,</span> <span class=\"re5\">Error</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Error: Could not read ~p: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">File</span><span class=\"sy1\">,</span> <span class=\"re5\">Error</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        error<span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">replace_in_file_return</span><span class=\"br0\">(</span> <span class=\"re5\">_File</span><span class=\"sy1\">,</span> ok <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/><span class=\"re3\">replace_in_file_return</span><span class=\"br0\">(</span> <span class=\"re5\">File</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>error<span class=\"sy1\">,</span> <span class=\"re5\">Error</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Error: Could not write ~p: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">File</span><span class=\"sy1\">,</span> <span class=\"re5\">Error</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        error<span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 12, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> textFrom <span class=\"sy0\">=</span> <span class=\"st0\">\"Goodbye London!\"</span><br/>    <span class=\"kw1\">let</span> textTo <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello New York!\"</span><br/>    <span class=\"kw1\">for</span> name <span class=\"kw1\">in</span> args <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">let</span> content <span class=\"sy0\">=</span> File.<span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> newContent <span class=\"sy0\">=</span> content.<span class=\"me1\">Replace</span><span class=\"br0\">(</span>textFrom, textTo<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> content <span class=\"sy0\">&lt;&gt;</span> newContent <span class=\"kw1\">then</span><br/>            File.<span class=\"me1\">WriteAllText</span><span class=\"br0\">(</span>name, newContent<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Fortran", "loc": 65, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> FILEHACK<span class=\"br0\">(</span>FNAME,THIS,THAT<span class=\"br0\">)</span>\t<span class=\"co1\">!Attacks a file!</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> FNAME\t<span class=\"co1\">!The name of the file, presumed to contain text.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> THIS\t<span class=\"co1\">!The text sought in each record.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> THAT\t<span class=\"co1\">!Its replacement, should it be found.</span><br/>       <span class=\"kw3\">INTEGER</span> F,T\t\t<span class=\"co1\">!Mnemonics for file unit numbers.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>F<span class=\"sy0\">=</span><span class=\"nu0\">66</span>,T<span class=\"sy0\">=</span><span class=\"nu0\">67</span><span class=\"br0\">)</span>\t<span class=\"co1\">!These should do.</span><br/>       <span class=\"kw3\">INTEGER</span> L\t\t<span class=\"co1\">!A length</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">6666</span> ALINE\t<span class=\"co1\">!Surely sufficient?</span><br/>       <span class=\"kw3\">LOGICAL</span> AHIT\t\t<span class=\"co1\">!Could count them, but no report is called for.</span><br/>        INQUIRE<span class=\"br0\">(</span><span class=\"kw1\">FILE</span> <span class=\"sy0\">=</span> FNAME, <span class=\"kw1\">EXIST</span> <span class=\"sy0\">=</span> AHIT<span class=\"br0\">)</span>\t<span class=\"co1\">!This mishap is frequent, so attend to it.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>.<span class=\"kw4\">NOT</span>.<span class=\"me1\">AHIT</span><span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span>\t\t\t<span class=\"co1\">!Nothing can be done!</span><br/>        OPEN <span class=\"br0\">(</span>F,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span>FNAME,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"OLD\"</span>,<span class=\"kw1\">ACTION</span><span class=\"sy0\">=</span><span class=\"st0\">\"READWRITE\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Grab the source file.</span><br/>        OPEN <span class=\"br0\">(</span>T,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"SCRATCH\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Request a temporary file.</span><br/>        AHIT <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t\t<span class=\"co1\">!None found so far.</span><br/><span class=\"co1\">Chew through the input, replacing THIS by THAT while writing to the temporary file..</span><br/>   <span class=\"nu0\">10</span>   READ <span class=\"br0\">(</span>F,<span class=\"nu0\">11</span>,<span class=\"kw1\">END</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> L,ALINE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">MIN</span><span class=\"br0\">(</span>L,<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>ALINE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Grab a record.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>ALINE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Monster record!\"</span>\t\t<span class=\"co1\">!Perhaps unmanageable.</span><br/>   <span class=\"nu0\">11</span>   FORMAT <span class=\"br0\">(</span>Q,A<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Obviously, Q = length of characters unread in the record.</span><br/>        L1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Start at the start.</span><br/>   <span class=\"nu0\">12</span>   L2 <span class=\"sy0\">=</span> <span class=\"kw4\">INDEX</span><span class=\"br0\">(</span>ALINE<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>L<span class=\"br0\">)</span>,THIS<span class=\"br0\">)</span>\t<span class=\"co1\">!Look from L1 onwards.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L2.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!A hit?</span><br/>          WRITE <span class=\"br0\">(</span>T,<span class=\"nu0\">13</span><span class=\"br0\">)</span> ALINE<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>L<span class=\"br0\">)</span>\t<span class=\"co1\">!No. Finish with the remainder of the line.</span><br/>   <span class=\"nu0\">13</span>     FORMAT <span class=\"br0\">(</span>A<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Thus finishing the output line.</span><br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t\t\t<span class=\"co1\">!And try for the next record.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!So much for not finding THIS.</span><br/>   <span class=\"nu0\">14</span>   L2 <span class=\"sy0\">=</span> L1 <span class=\"sy0\">+</span> L2 <span class=\"sy0\">-</span> <span class=\"nu0\">2</span>\t<span class=\"co1\">!Otherwise, THIS is found, starting at L1.</span><br/>        WRITE <span class=\"br0\">(</span>T,<span class=\"nu0\">15</span><span class=\"br0\">)</span> ALINE<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>L2<span class=\"br0\">)</span>\t<span class=\"co1\">!So roll the text up to the match, possibly none.</span><br/>   <span class=\"nu0\">15</span>   FORMAT <span class=\"br0\">(</span>A,$<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!But not ending the record.</span><br/>        WRITE <span class=\"br0\">(</span>T,<span class=\"nu0\">15</span><span class=\"br0\">)</span> THAT\t\t<span class=\"co1\">!Because THIS is replaced by THAT.</span><br/>        AHIT <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t\t\t<span class=\"co1\">!And we've found at least one match.</span><br/>        L1 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>THIS<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Finger the first character beyond the matching THIS.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L <span class=\"sy0\">-</span> L1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">GE</span>.</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>THIS<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">12</span>\t<span class=\"co1\">!Might another search succeed?</span><br/>        WRITE <span class=\"br0\">(</span>T,<span class=\"nu0\">13</span><span class=\"br0\">)</span> ALINE<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>L<span class=\"br0\">)</span>\t<span class=\"co1\">!Nope. Finish the line with the tail end.</span><br/>        <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t\t<span class=\"co1\">!And try for another record.</span><br/><span class=\"co1\">Copy the temporary file back over the source file. Hope for no mishap and data loss!</span><br/>   <span class=\"nu0\">20</span>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>AHIT<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!If there were no hits, there is nothing to do.</span><br/>          CLOSE <span class=\"br0\">(</span>F<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Oh well.</span><br/>          REWIND T\t\t<span class=\"co1\">!Go back to the start.</span><br/>          OPEN <span class=\"br0\">(</span>F,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span><span class=\"st0\">\"new\"</span><span class=\"sy0\">//</span>FNAME,<span class=\"kw1\">STATUS</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"REPLACE\"</span>,<span class=\"kw1\">ACTION</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"WRITE\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Overwrite...</span><br/>   <span class=\"nu0\">21</span>     READ <span class=\"br0\">(</span>T,<span class=\"nu0\">11</span>,<span class=\"kw1\">END</span> <span class=\"sy0\">=</span> <span class=\"nu0\">22</span><span class=\"br0\">)</span> L,ALINE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">MIN</span><span class=\"br0\">(</span>L,<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>ALINE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Grab a line.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>ALINE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Monster changed record!\"</span>\t<span class=\"co1\">!Once you start checking...</span><br/>          WRITE <span class=\"br0\">(</span>F,<span class=\"nu0\">13</span><span class=\"br0\">)</span> ALINE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span> \t\t<span class=\"co1\">!In case LEN(THAT) &gt; LEN(THIS)</span><br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">21</span>\t\t\t<span class=\"co1\">!Go grab the next line.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!So much for the replacement of the file.</span><br/>   <span class=\"nu0\">22</span>   CLOSE<span class=\"br0\">(</span>T<span class=\"br0\">)</span>\t<span class=\"co1\">!Finished: it will vanish.</span><br/>        CLOSE<span class=\"br0\">(</span>F<span class=\"br0\">)</span>\t<span class=\"co1\">!Hopefully, the buffers will be written.</span><br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!So much for that.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> ATTACK<br/>      <span class=\"kw3\">INTEGER</span> N<br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>N <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!More than one, anyway.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">48</span> VICTIM<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Alternatively, the file names could be read from a file</span><br/>      <span class=\"kw3\">DATA</span> VICTIM<span class=\"sy0\">/</span>\t\t<span class=\"co1\">!Along with the target and replacement texts in each case.</span><br/>     <span class=\"nu0\">1</span> <span class=\"st0\">\"StaffStory.txt\"</span>,<br/>     <span class=\"nu0\">2</span> <span class=\"st0\">\"Accounts.dat\"</span>,<br/>     <span class=\"nu0\">3</span> <span class=\"st0\">\"TravelAgent.txt\"</span>,<br/>     <span class=\"nu0\">4</span> <span class=\"st0\">\"RemovalFirm.dat\"</span>,<br/>     <span class=\"nu0\">5</span> <span class=\"st0\">\"Addresses.txt\"</span>,<br/>     <span class=\"nu0\">6</span> <span class=\"st0\">\"SongLyrics.txt\"</span><span class=\"sy0\">/</span>\t<span class=\"co1\">!Invention flags.</span><br/>\u00a0<br/>      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N\t<span class=\"co1\">!So, step through the list.</span><br/>        <span class=\"kw1\">CALL</span> FILEHACK<span class=\"br0\">(</span>VICTIM<span class=\"br0\">(</span>I<span class=\"br0\">)</span>,<span class=\"st0\">\"Goodbye London!\"</span>,<span class=\"st0\">\"Hello New York!\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!One by one.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "Go", "loc": 51, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bytes\"</span><br/>    <span class=\"st0\">\"io/ioutil\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    gRepNFiles<span class=\"sy1\">(</span><span class=\"st0\">\"Goodbye London!\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Hello New York!\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"a.txt\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"b.txt\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"c.txt\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">})</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> gRepNFiles<span class=\"sy1\">(</span>olds<span class=\"sy1\">,</span> news <span class=\"kw4\">string</span><span class=\"sy1\">,</span> files <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    oldb <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>olds<span class=\"sy1\">)</span><br/>    newb <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>news<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> fn <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> files <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> gRepFile<span class=\"sy1\">(</span>oldb<span class=\"sy1\">,</span> newb<span class=\"sy1\">,</span> fn<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> gRepFile<span class=\"sy1\">(</span>oldb<span class=\"sy1\">,</span> newb <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> fn <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> f <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=os.File\"><span class=\"kw5\">os.<span class=\"me1\">File</span></span></a><br/>    <span class=\"kw1\">if</span> f<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>OpenFile<span class=\"sy1\">(</span>fn<span class=\"sy1\">,</span> os<span class=\"sy3\">.</span>O_RDWR<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> cErr <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            err <span class=\"sy2\">=</span> cErr<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}()</span><br/>    <span class=\"kw1\">var</span> b <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/>    <span class=\"kw1\">if</span> b<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> ioutil<span class=\"sy3\">.</span>ReadAll<span class=\"sy1\">(</span>f<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> bytes<span class=\"sy3\">.</span>Index<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> oldb<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    r <span class=\"sy2\">:=</span> bytes<span class=\"sy3\">.</span>Replace<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> oldb<span class=\"sy1\">,</span> newb<span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> f<span class=\"sy3\">.</span>Truncate<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    _<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> f<span class=\"sy3\">.</span>WriteAt<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 22, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>tails<span class=\"sy0\">,</span> elemIndices<span class=\"sy0\">,</span> isPrefixOf<span class=\"br0\">)</span><br/>\u00a0<br/>replace <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>replace <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">_</span> xs <span class=\"sy0\">=</span> xs<br/>replace <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> xs <span class=\"sy0\">=</span> xs<br/>replace <span class=\"sy0\">_</span> <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>replace a b xs  <span class=\"sy0\">=</span> replAll<br/>    <span class=\"kw1\">where</span><br/>        <span class=\"co1\">-- make substrings, dropping one element each time</span><br/>        xtails <span class=\"sy0\">=</span> tails xs<br/>        <span class=\"co1\">-- what substrings begin with the string to replace?</span><br/>        <span class=\"co1\">-- get their indices</span><br/>        matches <span class=\"sy0\">=</span> elemIndices True <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>isPrefixOf a<span class=\"br0\">)</span> xtails<br/>        <span class=\"co1\">-- replace one occurrence</span><br/>        repl ys n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n ys <span class=\"sy0\">++</span> b <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> b<span class=\"br0\">)</span> ys<br/>        <span class=\"co1\">-- replace all occurrences consecutively</span><br/>        replAll <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> repl xs matches<br/>\u00a0<br/>replaceInFiles a1 a2 files <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    f <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> files<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>replace a1 a2<span class=\"br0\">)</span> f<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>globalrepl<span class=\"br0\">(</span><span class=\"st0\">\"Goodbye London\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Hello New York\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"a.txt\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"b.txt\"</span><span class=\"br0\">)</span> <span class=\"co1\"># variable args for files</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> globalrepl<span class=\"br0\">(</span>old<span class=\"sy1\">,</span>new<span class=\"sy1\">,</span>files<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"kw1\">every</span> fn <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>files <span class=\"kw1\">do</span> <br/>   <span class=\"kw1\">if</span> s <span class=\"sy1\">:=</span> <span class=\"kw4\">reads</span><span class=\"br0\">(</span>f <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span>fn<span class=\"sy1\">,</span><span class=\"st0\">\"bu\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw4\">stat</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">seek</span><span class=\"br0\">(</span>f<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>replace<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>old<span class=\"sy1\">,</span>new<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw4\">close</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">errout</span><span class=\"sy1\">,</span><span class=\"st0\">\"Unable to open \"</span><span class=\"sy1\">,</span>fn<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> strings <span class=\"co1\"># for replace</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'strings'</span><br/><span class=\"sy0\">(</span><span class=\"nu0\">1</span>!:<span class=\"nu0\">2</span>~rplc&amp;<span class=\"sy0\">(</span><span class=\"st_h\">'Goodbye London!'</span>;<span class=\"st_h\">'Hello New York!'</span><span class=\"sy0\">)</span>@<span class=\"sy0\">(</span><span class=\"nu0\">1</span>!:<span class=\"nu0\">1</span><span class=\"sy0\">))</span>\"<span class=\"nu0\">0</span> files</pre>"}, {"lang": "Java", "loc": 16, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.file.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> GloballyReplaceText <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> fn <span class=\"sy0\">:</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"test1.txt\"</span>, <span class=\"st0\">\"test2.txt\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span>Files.<span class=\"me1\">readAllBytes</span><span class=\"br0\">(</span>Paths.<span class=\"me1\">get</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            s <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"Goodbye London!\"</span>, <span class=\"st0\">\"Hello New York!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">try</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilewriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileWriter</span></a> fw <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilewriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileWriter</span></a><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                fw.<span class=\"me1\">write</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">for</span> <span class=\"kw2\">file</span><br/><span class=\"kw1\">do</span><br/>  jq <span class=\"re5\">-Rr</span> <span class=\"st_h\">'gsub($from; $to)'</span> <span class=\"re5\">--arg</span> from <span class=\"st_h\">'Goodbye London!'</span> <span class=\"re5\">--arg</span> to <span class=\"st_h\">'Hello New York!'</span> <span class=\"st0\">\"<span class=\"es2\">$file</span>\"</span> <span class=\"sy0\">|</span> <br/>    sponge <span class=\"st0\">\"<span class=\"es2\">$file</span>\"</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">filenames = [\"f1.txt\", \"f2.txt\"]<br/>for filename in filenames<br/>   txt = readall(filename)<br/>   open(filename, \"w\") do f<br/>      write(f, replace(txt, \"Goodbye London!\", \"Hello New York!\"))<br/>   end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> files <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">\"file1.txt\"</span>, <span class=\"st0\">\"file2.txt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>file in files<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> File<span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> text <span class=\"sy0\">=</span> f.<span class=\"me1\">readText</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>        text <span class=\"sy0\">=</span> text.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"Goodbye London!\"</span>, <span class=\"st0\">\"Hello New York!\"</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">writeText</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>f.<span class=\"me1\">readText</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 14, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>local(files = array('f1.txt', 'f2.txt'))<br/>\u00a0<br/>with filename in #files<br/>let file = file(#filename)<br/>let content = #file -&gt; readbytes<br/>do {<br/>\t#file -&gt; dowithclose =&gt; {<br/>\t\t#content -&gt; replace('Goodbye London!', 'Hello New York!')<br/>\t\t#file -&gt; opentruncate<br/>\t\t#file -&gt; writebytes(#content)<br/>\t}<br/>}</pre>"}, {"lang": "Liberty BASIC", "loc": 38, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">nomainwin</span><br/>\u00a0<br/>file$<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"data1.txt\"</span><br/>file$<span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"data2.txt\"</span><br/>file$<span class=\"br0\">(</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"data3.txt\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">open</span> file$<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>i<br/>        orig$ <span class=\"sy0\">=</span><span class=\"kw1\">input</span>$<span class=\"br0\">(</span> <span class=\"sy0\">#</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">lof</span><span class=\"br0\">(</span> <span class=\"sy0\">#</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>i<br/>\u00a0<br/>    dummy$ <span class=\"sy0\">=</span>FindReplace$<span class=\"br0\">(</span> orig$<span class=\"sy0\">,</span> <span class=\"st0\">\"Goodbye London!\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hello New York!\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">open</span> <span class=\"st0\">\"RC\"</span> <span class=\"sy0\">+</span>file$<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"kw1\">output</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>o<br/>        <span class=\"sy0\">#</span>o dummy$;<br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>o<br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FindReplace$<span class=\"br0\">(</span> FindReplace$<span class=\"sy0\">,</span> find$<span class=\"sy0\">,</span> replace$<span class=\"sy0\">,</span> replaceAll<span class=\"br0\">)</span><br/><span class=\"co1\">'   Target string, string to find, string to replace it with, flag 0/1 for 'replace all occurrences'.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> FindReplace$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span> find$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        fLen <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> find$<span class=\"br0\">)</span><br/>        rLen <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> replace$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span><br/>            fPos <span class=\"sy0\">=</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span> FindReplace$<span class=\"sy0\">,</span> find$<span class=\"sy0\">,</span> fPos<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span> fPos<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>            pre$            <span class=\"sy0\">=</span><span class=\"kw2\">left$</span><span class=\"br0\">(</span> FindReplace$<span class=\"sy0\">,</span> fPos <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            post$           <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> FindReplace$<span class=\"sy0\">,</span> fPos <span class=\"sy0\">+</span>fLen<span class=\"br0\">)</span><br/>            FindReplace$    <span class=\"sy0\">=</span>pre$ <span class=\"sy0\">+</span>replace$ <span class=\"sy0\">+</span>post$<br/>            fPos            <span class=\"sy0\">=</span>fPos <span class=\"sy0\">+</span><span class=\"br0\">(</span> rLen <span class=\"sy0\">-</span>fLen<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">loop</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>replaceAll<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\">filenames <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"f1.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"f2.txt\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> fn <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span> filenames <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    fp <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span> fn<span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span> <span class=\"br0\">)</span><br/>    str <span class=\"sy0\">=</span> fp<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"br0\">(</span> <span class=\"st0\">\"*all\"</span> <span class=\"br0\">)</span><br/>    str <span class=\"sy0\">=</span> <span class=\"kw3\">string.gsub</span><span class=\"br0\">(</span> str<span class=\"sy0\">,</span> <span class=\"st0\">\"Goodbye London!\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hello New York!\"</span> <span class=\"br0\">)</span><br/>    fp<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fp <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span> fn<span class=\"sy0\">,</span> <span class=\"st0\">\"w+\"</span> <span class=\"br0\">)</span><br/>    fp<span class=\"sy0\">:</span><span class=\"kw3\">write</span><span class=\"br0\">(</span> str <span class=\"br0\">)</span><br/>    fp<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 7, "block": "<pre class=\"text highlighted_source\">listOfFiles = {\"a.txt\", \"b.txt\", \"c.txt\"};<br/>Do[<br/> filename = listOfFiles[[i]];<br/> filetext = Import[filename, \"Text\"];<br/> filetext = StringReplace[filetext, \"Goodbye London!\" -&gt; \"Hello New York!\"];<br/> Export[filename, filetext, \"Text\"]<br/> , {i, 1, Length[listOfFiles]}]</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>var fr = \"Goodbye London!\"<br/>var to = \"Hello, New York!\"<br/>\u00a0<br/>for fn in [\"a.txt\", \"b.txt\", \"c.txt\"]:<br/>  fn.writeFile fn.readFile.replace(fr, to)</pre>"}, {"lang": "OpenEdge/Progress", "loc": 22, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">FUNCTION</span> replaceText <span class=\"kw1\">RETURNS</span> <span class=\"kw3\">LOGICAL</span> <span class=\"br0\">(</span><br/>   i_cfile_list   <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span><span class=\"sy0\">,</span><br/>   i_cfrom        <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span><span class=\"sy0\">,</span><br/>   i_cto          <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> ii     <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> lcfile <span class=\"kw3\">AS</span> <span class=\"kw4\">LONGCHAR</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">NUM-ENTRIES</span><span class=\"br0\">(</span> i_cfile_list <span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>      <span class=\"kw1\">COPY-LOB</span> FROM FILE <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> ii<span class=\"sy0\">,</span> i_cfile_list <span class=\"br0\">)</span> <span class=\"kw1\">TO</span> lcfile<span class=\"sy0\">.</span><br/>      lcfile <span class=\"sy0\">=</span> <span class=\"kw2\">REPLACE</span><span class=\"br0\">(</span> lcfile<span class=\"sy0\">,</span> i_cfrom<span class=\"sy0\">,</span> i_cto <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">COPY-LOB</span> FROM lcfile <span class=\"kw1\">TO</span> FILE <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> ii<span class=\"sy0\">,</span> i_cfile_list <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span> <span class=\"coMULTI\">/* replaceText */</span><br/>\u00a0<br/>replaceText<span class=\"br0\">(</span> <br/>   <span class=\"st0\">\"a.txt,b.txt,c.txt\"</span><span class=\"sy0\">,</span><br/>   <span class=\"st0\">\"Goodbye London!\"</span><span class=\"sy0\">,</span><br/>   <span class=\"st0\">\"Hello New York!\"</span><br/><span class=\"br0\">)</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Pascal", "loc": 25, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> StringReplace<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Classes<span class=\"sy1\">,</span> StrUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  fileName<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'a.txt'</span><span class=\"sy1\">,</span> <span class=\"st0\">'b.txt'</span><span class=\"sy1\">,</span> <span class=\"st0\">'c.txt'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  matchText <span class=\"sy3\">=</span> <span class=\"st0\">'Goodbye London!'</span><span class=\"sy1\">;</span><br/>  replaceText <span class=\"sy3\">=</span> <span class=\"st0\">'Hello New York!'</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  AllText<span class=\"sy1\">:</span> TStringlist<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>fileName<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>fileName<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>   AllText <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringlist<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>   AllText<span class=\"sy1\">.</span><span class=\"me1\">LoadFromFile</span><span class=\"br0\">(</span>fileName<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> AllText<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>     AllText<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> AnsiReplaceStr<span class=\"br0\">(</span>AllText<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> matchText<span class=\"sy1\">,</span> replaceText<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   AllText<span class=\"sy1\">.</span><span class=\"me1\">SaveToFile</span><span class=\"br0\">(</span>fileName<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   AllText<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw2\">perl</span> <span class=\"re5\">-pi</span> <span class=\"re5\">-e</span> <span class=\"st0\">\"s/Goodbye London\\!/Hello New York\\!/g;\"</span> a.txt b.txt c.txt</pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\">slurp<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"st_h\">'Goodbye London!'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Hello New York!'</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span> <span class=\"sy0\">==&gt;</span> spurt<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span>a<span class=\"sy0\">.</span><span class=\"me1\">txt</span> b<span class=\"sy0\">.</span><span class=\"me1\">txt</span> c<span class=\"sy0\">.</span><span class=\"me1\">txt</span><span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">procedure global_replace(string s, string r, sequence file_list)<br/>    for i=1 to length(file_list) do<br/>        string filename = file_list[i]<br/>        integer fn = open(filename,\"rb\")<br/>        if fn=-1 then\u00a0?9/0 end if   -- message/retry?<br/>        string text = get_text(fn)<br/>        close(fn)<br/>        text = substitute(text,s,r)<br/>        fn = open(filename,\"wb\")<br/>        puts(fn,text)<br/>        close(fn)<br/>    end for<br/>end procedure<br/>\u00a0<br/>sequence file_list = {\"ctrace.out\"}<br/>global_replace(\"Goodbye London!\", \"Hello New York!\", file_list)</pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(for File '(a.txt b.txt c.txt)<br/>   (call 'mv File (tmp File))<br/>   (out File<br/>      (in (tmp File)<br/>         (while (echo \"Goodbye London!\")<br/>            (prin \"Hello New York!\") ) ) ) )</pre>"}, {"lang": "PowerBASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">$matchtext = \"Goodbye London!\"<br/>$repltext  = \"Hello New York!\"<br/>\u00a0<br/>FUNCTION PBMAIN () AS LONG<br/>    DIM L0 AS INTEGER, filespec AS STRING, linein AS STRING<br/>\u00a0<br/>    L0 = 1<br/>    WHILE LEN(COMMAND$(L0))<br/>        filespec = DIR$(COMMAND$(L0))<br/>        WHILE LEN(filespec)<br/>            OPEN filespec FOR BINARY AS 1<br/>                linein = SPACE$(LOF(1))<br/>                GET #1, 1, linein<br/>                ' No need to jump through FB's hoops here...<br/>                REPLACE $matchtext WITH $repltext IN linein<br/>                PUT #1, 1, linein<br/>                SETEOF #1<br/>            CLOSE<br/>            filespec = DIR$<br/>        WEND<br/>        INCR L0<br/>    WEND<br/>END FUNCTION</pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$listfiles</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"st0\">'file1.txt'</span><span class=\"sy0\">,</span><span class=\"st0\">'file2.txt'</span><span class=\"br0\">)</span><br/><span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"st0\">'Goodbye London!'</span><br/><span class=\"re0\">$new</span> <span class=\"sy0\">=</span> <span class=\"st0\">'Hello New York!'</span><br/><span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$file</span> <span class=\"kw3\">in</span> <span class=\"re0\">$listfiles</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">Get-Content</span> <span class=\"re0\">$file</span><span class=\"br0\">)</span>.Replace<span class=\"br0\">(</span><span class=\"re0\">$old</span><span class=\"sy0\">,</span><span class=\"re0\">$new</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Set-Content</span> <span class=\"re0\">$file</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 32, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> GRTISF<span class=\"br0\">(</span>List File$<span class=\"br0\">(</span><span class=\"br0\">)</span>, Find$, Replace$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"kw2\">Line</span>$, <span class=\"kw3\">Out</span>$, OutFile$, i<br/>  <span class=\"kw1\">ForEach</span> File$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    fsize<span class=\"sy0\">=</span><span class=\"kw2\">FileSize</span><span class=\"br0\">(</span>File$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> fsize<span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span>: <span class=\"kw1\">Continue</span>: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, File$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"co1\">;</span><br/>      <span class=\"co1\">; generate a temporary file in a safe way</span><br/>      <span class=\"kw1\">Repeat</span><br/>        file$<span class=\"sy0\">=</span><span class=\"kw2\">GetTemporaryDirectory</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>base$<span class=\"sy0\">+</span><span class=\"st0\">\"_\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\".tmp\"</span><br/>        i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Until</span> <span class=\"kw2\">FileSize</span><span class=\"br0\">(</span>file$<span class=\"br0\">)</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><br/>      i<span class=\"sy0\">=</span><span class=\"kw2\">CreateFile</span><span class=\"br0\">(</span><span class=\"kw2\">FileID</span>, file$<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> i<br/>        <span class=\"co1\">; Copy the infile to the outfile while replacing any needed text</span><br/>        <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"kw2\">Line</span>$<span class=\"sy0\">=</span><span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"kw3\">Out</span>$<span class=\"sy0\">=</span><span class=\"kw2\">ReplaceString</span><span class=\"br0\">(</span><span class=\"kw2\">Line</span>$,Find$,Replace$<span class=\"br0\">)</span><br/>          <span class=\"kw2\">WriteString</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"kw3\">Out</span>$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Wend</span><br/>        <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> i<br/>        <span class=\"co1\">; If we made a new file, copy it back.</span><br/>        <span class=\"kw2\">CopyFile</span><span class=\"br0\">(</span>file$, File$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">DeleteFile</span><span class=\"br0\">(</span>file$<span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">fileinput</span><br/>\u00a0<br/><span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> <span class=\"kw3\">fileinput</span>.<span class=\"kw2\">input</span><span class=\"br0\">(</span>inplace<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>line.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'Goodbye London!'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Hello New York!'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#!/usr/bin/env racket<br/>#lang racket<br/>\u00a0<br/>(define from-string #f)<br/>(define to-string #f)<br/>\u00a0<br/>(command-line<br/> #:once-each<br/> [(\"-f\") from \"Text to remove\" (set! from-string from)]<br/> [(\"-t\") to \"Text to put instead\" (set! to-string to)]<br/> #:args files<br/> (unless from-string (error \"No `from' string specified\"))<br/> (unless to-string   (error \"No `to' string specified\"))<br/> (when (null? files) (error \"No files given\"))<br/> (define from-rx (regexp (regexp-quote from-string)))<br/> (for ([file files])<br/>   (printf \"Editing ~a...\" file) (flush-output)<br/>   (define text1 (file-&gt;string file))<br/>   (define text2 (regexp-replace* from-rx text1 to-string))<br/>   (if (equal? text1 text2)<br/>     (printf \" no change\\n\")<br/>     (begin (display-to-file text2 file #:exists 'replace)<br/>            (printf \" modified copy saved in place\\n\")))))<br/>\u00a0</pre>"}, {"lang": "Red", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;&gt; f: request-file<br/>&gt;&gt; str: read f<br/>&gt;&gt; replace/all str \"Goodbye London!\" \"Hello New York!\"<br/>&gt;&gt; write f str</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  reads  the  files specified  and  globally replaces  a string.          */</span><br/>old= <span class=\"st0\">\"Goodbye London!\"</span>                           <span class=\"coMULTI\">/*the  old text     to be replaced.    */</span><br/>new= <span class=\"st0\">\"Hello New York!\"</span>                           <span class=\"coMULTI\">/* \"   new   \"   used for replacement. */</span><br/><span class=\"kw1\">parse</span>  <span class=\"kw1\">arg</span>  fileList                             <span class=\"coMULTI\">/*obtain required list of files from CL*/</span><br/>files=<span class=\"kw6\">words</span><span class=\"br0\">(</span>fileList<span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*the number of files in the file list.*/</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> files;    fn=<span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>fileList,f<span class=\"br0\">)</span>,,<span class=\"st0\">','</span><span class=\"br0\">)</span>;     <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span><br/>   <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file is being read: '</span>    fn    <span class=\"st0\">\" (\"</span>f   <span class=\"st0\">'out of'</span>   files   <span class=\"st0\">\"files).\"</span><br/>   <span class=\"kw1\">call</span> <span class=\"kw2\">linein</span> fn,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>                            <span class=\"coMULTI\">/*position the file for input.         */</span><br/>   changes=<span class=\"nu0\">0</span>                                     <span class=\"coMULTI\">/*the number of changes in file so far.*/</span><br/>             <span class=\"kw1\">do</span> rec=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>       <span class=\"coMULTI\">/*read a file   (if it exists).        */</span><br/>             @<span class=\"sy0\">.</span>rec=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*read a record (line)  from the file. */</span><br/>             <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>old, @<span class=\"sy0\">.</span>rec<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*Anything to change?   No, then skip. */</span><br/>             changes=changes + <span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*flag that file contents have changed.*/</span><br/>             @<span class=\"sy0\">.</span>rec=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>old, @<span class=\"sy0\">.</span>rec, new<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*change the @.rec record, old \u2500\u2500\u25ba new.*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*rec*/</span><br/>\u00a0<br/>   <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file has been read: '</span>         fn<span class=\"st0\">\", with \"</span>      rec      <span class=\"st0\">'records.'</span><br/>   <span class=\"kw1\">if</span> changes==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file  not  changed: '</span>   fn;   <span class=\"kw1\">iterate</span>;   <span class=\"kw3\">end</span><br/>   <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> fn,,<span class=\"nu0\">1</span>                            <span class=\"coMULTI\">/*position file for output at 1st line.*/</span><br/>   <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file being changed: '</span>   fn<br/>\u00a0<br/>       <span class=\"kw1\">do</span> r=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> rec;     <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> fn, @<span class=\"sy0\">.</span>r <span class=\"coMULTI\">/*re\u2500write the contents of the file.   */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>\u00a0<br/>   <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 file was   changed: '</span>   fn    <span class=\"st0\">\" with\"</span>   changes   <span class=\"st0\">'lines changed.'</span><br/>   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*f*/</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>filenames = [\"ReadMe.txt\", \"ReadMe2.txt\"]<br/>\u00a0<br/>for fn in filenames<br/>    fp = fopen(fn,\"r\")<br/>    str = fread(fp,getFileSize(fp))<br/>    str = substr(str, \"Greetings\", \"Hello\")<br/>    fclose(fp) <br/>\u00a0<br/>    fp = fopen(fn,\"w\")<br/>    fwrite(fp, str)<br/>    fclose(fp)<br/>next<br/>\u00a0<br/>func getFileSize fp<br/>     C_FILESTART = 0<br/>     C_FILEEND = 2<br/>     fseek(fp,0,C_FILEEND)<br/>     nFileSize = ftell(fp)<br/>     fseek(fp,0,C_FILESTART)<br/>     return nFileSize<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre>ruby -pi -e \"gsub('Goodbye London!', 'Hello New York!')\" a.txt b.txt c.txt\n</pre>"}, {"lang": "Run BASIC", "loc": 33, "block": "<pre class=\"text highlighted_source\">file$(1) =\"data1.txt\"<br/>file$(2) =\"data2.txt\"<br/>file$(3) =\"data3.txt\"<br/>\u00a0<br/>for i = 1 to 3<br/>    open file$(i) for input as #in<br/>        fileBefore$ = input$( #in, lof( #in))<br/>    close #in<br/>\u00a0<br/>    fileAfter$ = strRep$(fileBefore$, \"Goodbye London!\", \"Hello New York!\")<br/>    open \"new_\" +  file$(i) for output as #out<br/>        print #out,fileAfter$;<br/>    close #out<br/>next i<br/>end<br/>\u00a0<br/>' --------------------------------<br/>' string replace - rep str with<br/>' --------------------------------<br/>FUNCTION strRep$(str$,rep$,with$)<br/>ln  = len(rep$)<br/>ln1 = ln - 1<br/>i   = 1<br/>while i &lt;= len(str$)<br/>    if mid$(str$,i,ln) = rep$ then<br/>        strRep$ = strRep$ + with$<br/>        i = i + ln1<br/>    else<br/>        strRep$ = strRep$ + mid$(str$,i,1)<br/>    end if<br/>i = i + 1<br/>WEND<br/>END FUNCTION</pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"br0\">{</span>File, PrintWriter<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> GloballyReplaceText <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>charsetName, fileNames<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"UTF8\"</span>, Seq<span class=\"br0\">(</span><span class=\"st0\">\"file1.txt\"</span>, <span class=\"st0\">\"file2.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>fileHandle <span class=\"sy0\">&lt;</span>- fileNames.<span class=\"me1\">map</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> File<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> PrintWriter<span class=\"br0\">(</span>fileHandle, charsetName<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      print<span class=\"br0\">(</span>scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span>.<span class=\"me1\">fromFile</span><span class=\"br0\">(</span>fileHandle, charsetName<span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>        .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"Goodbye London!\"</span>, <span class=\"st0\">\"Hello New York!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sed", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw2\">sed</span> <span class=\"re5\">-i</span> <span class=\"st_h\">'s/Goodbye London!/Hello New York!/g'</span> a.txt b.txt c.txt</pre>"}, {"lang": "Seed7", "loc": 14, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"getf.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: fileName is \"\";<br/>    var string: content is \"\";<br/>  begin<br/>    for fileName range [] (\"a.txt\", \"b.txt\", \"c.txt\") do<br/>      content\u00a0:= getf(fileName);<br/>      content\u00a0:= replace(content, \"Goodbye London!\", \"Hello New York!\");<br/>      putf(fileName, content);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">var names = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span><br/>                a.<span class=\"me1\">txt</span><br/>                b.<span class=\"me1\">txt</span><br/>                c.<span class=\"me1\">txt</span><br/>              <span class=\"br0\">)</span><br/>\u00a0<br/>names.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"kw4\">File</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>file<span class=\"sy0\">|</span><br/>    say file.<span class=\"me1\">edit</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>        line.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">\"Goodbye London!\"</span>, <span class=\"st0\">\"Hello New York!\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require fileutil<br/>\u00a0<br/><span class=\"co1\"># Parameters to the replacement</span><br/><span class=\"kw1\">set</span> from <span class=\"st0\">\"Goodbye London!\"</span><br/><span class=\"kw1\">set</span> to <span class=\"st0\">\"Hello New York!\"</span><br/><span class=\"co1\"># Which files to replace</span><br/><span class=\"kw1\">set</span> fileList <span class=\"br0\">[</span><span class=\"kw2\">list</span> a.txt b.txt c.txt<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Make a command fragment that performs the replacement on a supplied string</span><br/><span class=\"kw1\">set</span> replacementCmd <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw2\">string</span> map <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$from</span> <span class=\"re0\">$to</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"co1\"># Apply the replacement to the contents of each file</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw3\">filename</span> <span class=\"re0\">$fileList</span> <span class=\"br0\">{</span><br/>    fileutil::<span class=\"me1\">updateInPlace</span> <span class=\"re0\">$filename</span> <span class=\"re0\">$replacementCmd</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>files=\"a.txt'b.txt'c.txt\"<br/>\u00a0<br/>BUILD S_TABLE search = \":Goodbye London!:\"<br/>\u00a0<br/>LOOP file=files<br/> ERROR/STOP OPEN (file,WRITE,-std-)<br/> ERROR/STOP CREATE (\"scratch\",FDF-o,-std-)<br/>  ACCESS q: READ/STREAM/RECORDS/UTF8 $file s,aken+text/search+eken<br/>  ACCESS s: WRITE/ERASE/STREAM/UTF8 \"scratch\" s,aken+text+eken<br/>   LOOP<br/>    READ/EXIT q<br/>    IF (text.ct.search) SET text=\"Hello New York!\"<br/>    WRITE/ADJUST s<br/>   ENDLOOP<br/>  ENDACCESS/PRINT q<br/>  ENDACCESS/PRINT s<br/> ERROR/STOP COPY (\"scratch\",file)<br/> ERROR/STOP CLOSE (file)<br/>ENDLOOP<br/>ERROR/STOP DELETE (\"scratch\")<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 11, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:args)<br/>@(repeat)<br/>@file<br/>@(next `@file`)<br/>@(freeform)<br/>@(coll\u00a0:gap 0)@<a class=\"__cf_email__\" data-cfemail=\"305e5f445d5144535870\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{match /Goodbye, London!/}@(end)@*<a class=\"__cf_email__\" data-cfemail=\"3642575f5a76\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/\\n/<br/>@(output `@file.tmp`)<br/>@(rep)@{notmatch}Hello, New <a class=\"__cf_email__\" data-cfemail=\"96cff9e4fdb7d6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(end)@tail<br/>@(end)<br/>@(do @(rename-path `@file.tmp` file))<br/>@(end)</pre>"}, {"lang": "UNIX Shell", "loc": 13, "block": "<pre class=\"bash highlighted_source\">replace<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">search</span>=<span class=\"re4\">$1</span> <span class=\"re2\">replace</span>=<span class=\"re4\">$2</span><br/>    <span class=\"kw3\">local</span> <span class=\"kw2\">file</span> lines line<br/>    <span class=\"kw3\">shift</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw2\">file</span> <span class=\"kw1\">in</span> <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"406400\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span>; <span class=\"kw1\">do</span><br/>        <span class=\"re2\">lines</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">while</span> <span class=\"re2\">IFS</span>= <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> line; <span class=\"kw1\">do</span><br/>            lines+=<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es3\">${line//$search/$replace}</span>\"</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">done</span> <span class=\"sy0\">&lt;</span> <span class=\"st0\">\"<span class=\"es2\">$file</span>\"</span><br/>        <span class=\"kw3\">printf</span> <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span> <span class=\"st0\">\"<span class=\"es3\">${lines[@]}</span>\"</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"<span class=\"es2\">$file</span>\"</span><br/>    <span class=\"kw1\">done</span><br/><span class=\"br0\">}</span><br/>replace <span class=\"st0\">\"Goodbye London!\"</span> <span class=\"st0\">\"Hello New York!\"</span> a.txt b.txt c.txt</pre>"}, {"lang": "VBScript", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Const ForReading = 1<br/>Const ForWriting = 2<br/>\u00a0<br/>strFiles = Array(\"test1.txt\", \"test2.txt\", \"test3.txt\")<br/>\u00a0<br/>With CreateObject(\"Scripting.FileSystemObject\")<br/>\tFor i = 0 To UBound(strFiles)<br/>\t\tstrText = .OpenTextFile(strFiles(i), ForReading).ReadAll()<br/>\t\tWith .OpenTextFile(strFiles(i), ForWriting)<br/>\t\t\t.Write Replace(strText, \"Goodbye London!\", \"Hello New York!\")<br/>\t\t\t.Close<br/>\t\tEnd With<br/>\tNext<br/>End With<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 13, "block": "<pre class=\"vedit highlighted_source\">File_Open<span class=\"br0\">(</span><span class=\"st0\">\"files.lst\"</span><span class=\"br0\">)</span>          <span class=\"co1\">// list of files to process</span><br/>#<span class=\"nu0\">20</span> <span class=\"sy0\">=</span> Reg_Free                  <span class=\"co1\">// text register for filename</span><br/>\u00a0<br/><span class=\"kw1\">While</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>At_EOF<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Reg_Copy_Block<span class=\"br0\">(</span>#<span class=\"nu0\">20</span><span class=\"sy0\">,</span> Cur_Pos<span class=\"sy0\">,</span> EOL_Pos<span class=\"br0\">)</span><br/>    File_Open<span class=\"br0\">(</span>@<span class=\"br0\">(</span>#<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Replace<span class=\"br0\">(</span><span class=\"st0\">\"Goodbye London!\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hello New York!\"</span><span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span><br/>    Buf_Close<span class=\"br0\">(</span>NOMSG<span class=\"br0\">)</span><br/>    Line<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> ERRBREAK<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Reg_Empty<span class=\"br0\">(</span>#<span class=\"nu0\">20</span><span class=\"br0\">)</span>                  <span class=\"co1\">// Cleanup</span><br/>Buf_Quit<span class=\"br0\">(</span>OK<span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 59, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>string 0;                       \\use zero-terminated strings<br/>\u00a0<br/>func StrLen(A);                 \\Return number of characters in an ASCIIZ string<br/>char A;<br/>int  I;<br/>for I:= 0 to -1&gt;&gt;1-1 do<br/>    if A(I) = 0 then return I;<br/>\u00a0<br/>func StrFind(A, B);             \\Search for ASCIIZ string A in string B<br/>\\Returns address of first occurrence of string A in B, or zero if A is not found<br/>char A, B;                      \\strings to be compared<br/>int  LA, LB, I, J;<br/>[LA:= StrLen(A);<br/>LB:= StrLen(B);<br/>for I:= 0 to LB-LA do<br/>    [for J:= 0 to LA-1 do<br/>        if A(J) # B(J+I) then J:= LA+1;<br/>    if J = LA then return B+I;  \\found<br/>    ];<br/>return 0;<br/>];<br/>\u00a0<br/>proc ReplaceText(FileName);     \\replace text in specified file<br/>char FileName;<br/>char Str(1_000_000), Hello, Bye, Pointer;<br/>int  Handle, I, C;<br/>[Handle:= FOpen(FileName, 0);   \\get handle for input file<br/>FSet(Handle, ^I);               \\set device 3 input to file handle<br/>OpenI(3);                       \\initialize buffer pointers<br/>I:= 0;<br/>repeat  C:= ChIn(3);            \\read file into memory<br/>        Str(I):= C;<br/>        I:= I+1;<br/>until   C = $1A; \\EOF<br/>FClose(Handle);                 \\release handle<br/>\u00a0<br/>Hello:= \"Hello New York!\";      \\replacement text<br/>Bye:=   \"Goodbye London!\";<br/>Pointer:= StrFind(Bye, Str);<br/>if Pointer \\#0\\ then            \\overwrite (both strings are same length)<br/>   for I:= 0 to 15-1 do Pointer(I):= Hello(I);<br/>\u00a0<br/>Handle:= FOpen(FileName, 1);    \\get handle for output file<br/>FSet(Handle, ^O);               \\set device 3 output to file handle<br/>OpenO(3);<br/>I:= 0;<br/>repeat  C:= Str(I);             \\write file from memory<br/>        I:= I+1;<br/>        ChOut(3, C);<br/>until   C = $1A; \\EOF<br/>Close(3);                       \\flush output buffer<br/>FClose(Handle);                 \\release handle<br/>];<br/>\u00a0<br/>int File, I;<br/>[File:= [\"Alpha.txt\", \"Beta.txt\", \"Gamma.txt\", \"Delta.txt\"];<br/>for I:= 0 to 4-1 do ReplaceText(File(I));<br/>]</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn sed(data,src,dst){<br/>   srcSz:=src.len(); dstSz:=dst.len(); md5:=Utils.MD5.calc(data);<br/>   n:=0; while(Void!=(n:=data.find(src,n)))<br/>           { data.del(n,srcSz); data.insert(n,dst); n+= dstSz; }<br/>   return(md5!=Utils.MD5.calc(data)); // changed?<br/>}<br/>fcn sedFile(fname,src,dst){<br/>   f:=File(fname,\"r\"); data:=f.read(); f.close();<br/>   if(sed(data,\"Goodbye London!\", \"Hello New York!\"))<br/>      { f:=File(fname,\"w\"); f.write(data); f.close(); }<br/>}</pre>"}]}