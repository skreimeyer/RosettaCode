{"task": "Identity_matrix", "blocks": [{"lang": "360 Assembly", "loc": 73, "block": "<pre class=\"text highlighted_source\">*        Identity matrix           31/03/2017<br/>INDENMAT CSECT<br/>         USING  INDENMAT,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         L      R1,N               n<br/>         MH     R1,N+2             n*n<br/>         SLA    R1,2               *4<br/>         ST     R1,LL              amount of storage required<br/>         GETMAIN RU,LV=(R1)        allocate storage for matrix<br/>         USING  DYNA,R11           make storage addressable<br/>         LR     R11,R1             set addressability<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,N)        do i=1 to n<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,N)          do j=1 to n<br/>       IF CR,R6,EQ,R7 THEN             if i=j then<br/>         LA     R2,1                     k=1<br/>       ELSE     ,                      else<br/>         LA     R2,0                     k=0<br/>       ENDIF    ,                      endif<br/>         LR     R1,R6                  i<br/>         BCTR   R1,0                   -1<br/>         MH     R1,N+2                 *n<br/>         AR     R1,R7                  (i-1)*n+j<br/>         BCTR   R1,0                   -1<br/>         SLA    R1,2                   *4<br/>         ST     R2,A(R1)               a(i,j)=k<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,N)        do i=1 to n<br/>         LA     R10,PG               pgi=0<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,N)          do j=1 to n<br/>         LR     R1,R6                  i<br/>         BCTR   R1,0                   -1<br/>         MH     R1,N+2                 *n<br/>         AR     R1,R7                  (i-1)*n+j<br/>         BCTR   R1,0                   -1<br/>         SLA    R1,2                   *4<br/>         L      R2,A(R1)               a(i,j)<br/>         XDECO  R2,XDEC                edit<br/>         MVC    0(1,R10),XDEC+11       output<br/>         LA     R10,1(R10)             pgi+=1<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         XPRNT  PG,L'PG              print<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         LA     R1,A               address to free<br/>         LA     R2,LL              amount of storage to free<br/>         FREEMAIN A=(R1),LV=(R2)   free allocated storage<br/>         DROP   R11                drop register<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>NN       EQU    10                 parameter n  (90=&gt;32K)<br/>N        DC     A(NN)              n<br/>LL       DS     F                  n*n*4<br/>PG       DC     CL(NN)' '          buffer<br/>XDEC     DS     CL12               temp<br/>DYNA     DSECT<br/>A        DS     F                  a(n,n)<br/>         YREGS<br/>         END    INDENMAT</pre>"}, {"lang": "Ada", "loc": 4, "block": "<pre class=\"ada highlighted_source\"><span class=\"co1\">--  As prototyped in the Generic_Real_Arrays specification:</span><br/><span class=\"co1\">--  function Unit_Matrix (Order\u00a0: Positive; First_1, First_2\u00a0: Integer\u00a0:= 1) return Real_Matrix;</span><br/><span class=\"co1\">-- For the task:</span><br/>mat\u00a0: Real_Matrix\u00a0:= Unit_Matrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "ALGOL 68", "loc": 33, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/bin/a68g --script #</span><br/><span class=\"coMULTI\"># -*- coding: utf-8 -*- #</span><br/>\u00a0<br/><span class=\"coMULTI\"># Define some generic vector initialisation and printing operations #</span><br/>\u00a0<br/>COMMENT REQUIRES<span class=\"sy1\">:</span><br/>  <span class=\"kw4\">MODE</span> SCAL <span class=\"sy1\">=</span> <span class=\"sy1\">~</span> <span class=\"coMULTI\"># a scalar, eg REAL #</span><span class=\"sy1\">;</span><br/>  <span class=\"kw6\">FORMAT</span> scal fmt <span class=\"sy1\">:=</span> <span class=\"sy1\">~;</span><br/><span class=\"kw2\">END</span> COMMENT<br/>\u00a0<br/><span class=\"kw3\">INT</span> vec lwb <span class=\"sy1\">:=</span> 1<span class=\"sy1\">,</span> vec upb <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> VECNEW <span class=\"sy1\">=</span> <span class=\"br0\">[</span>vec lwb<span class=\"sy1\">:</span>vec upb<span class=\"br0\">]</span>SCAL<span class=\"sy1\">;</span> <span class=\"kw4\">MODE</span> VEC <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> VECNEW<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> vec fmt <span class=\"sy1\">:=</span> $<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span>vec upb<span class=\"sy1\">-</span>vec lwb<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>scal fmt<span class=\"br0\">)</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>f<span class=\"br0\">(</span>scal fmt<span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PRIO</span> INIT <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> INIT <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC self<span class=\"sy1\">,</span> SCAL scal<span class=\"br0\">)</span>VEC<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> col <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> self <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> self <span class=\"kw2\">DO</span> self<span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"sy1\">:=</span> scal <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  self<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># ZEROINIT: defines the additive identity #</span><br/><span class=\"kw4\">OP</span> ZEROINIT <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC self<span class=\"br0\">)</span>VEC<span class=\"sy1\">:</span> <br/>  self INIT SCAL<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"kw8\">REPR</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC self<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw6\">FILE</span> f<span class=\"sy1\">;</span> <span class=\"kw3\">STRING</span> s<span class=\"sy1\">;</span> <span class=\"kw22\">associate</span><span class=\"br0\">(</span>f<span class=\"sy1\">,</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  vec lwb <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> self<span class=\"sy1\">;</span> vec upb <span class=\"sy1\">:=</span> <span class=\"kw8\">UPB</span> self<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">putf</span><span class=\"br0\">(</span>f<span class=\"sy1\">,</span> <span class=\"br0\">(</span>vec fmt<span class=\"sy1\">,</span> self<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw22\">close</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  s<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw7\">SKIP</span></pre>"}, {"lang": "ALGOL W", "loc": 22, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% set m to an identity matrix of size s                                 \u00a0%<br/>    procedure makeIdentity( real    array m ( *, * )<br/>                         \u00a0; integer value s<br/>                          )\u00a0;<br/>        for i\u00a0:= 1 until s do begin<br/>            for j\u00a0:= 1 until s do m( i, j )\u00a0:= 0.0;<br/>            m( i, i )\u00a0:= 1.0<br/>        end makeIdentity\u00a0;<br/>\u00a0<br/>   \u00a0% test the makeIdentity procedure                                       \u00a0%<br/>    begin<br/>        real array id5( 1\u00a0:: 5, 1\u00a0:: 5 );<br/>        makeIdentity( id5, 5 );<br/>        r_format\u00a0:= \"A\"; r_w\u00a0:= 6; r_d\u00a0:= 1;\u00a0% set output format for reals  \u00a0%<br/>        for i\u00a0:= 1 until 5 do begin<br/>            write();<br/>            for j\u00a0:= 1 until 5 do writeon( id5( i, j ) )<br/>        end for_i\u00a0;<br/>    end text<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    \u2218.=\u2368\u23733<br/>1 0 0<br/>0 1 0<br/>0 0 1<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 73, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- ID MATRIX -----------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- idMatrix\u00a0:: Int -&gt; [(0|1)]</span><br/><span class=\"kw3\">on</span> idMatrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> row<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                    <span class=\"kw3\">if</span> i <span class=\"sy0\">=</span> x <span class=\"kw3\">then</span><br/>                        <span class=\"nu0\">1</span><br/>                    <span class=\"kw3\">else</span><br/>                        <span class=\"nu0\">0</span><br/>                    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span><span class=\"kw1\">result</span>, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>row, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> idMatrix<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    idMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "Applesoft BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>100 INPUT \"MATRIX SIZE:\"; SIZE%<br/>110 GOSUB 200\"IDENTITYMATRIX<br/>120 FOR R = 0 TO SIZE%<br/>130     FOR C = 0 TO SIZE%<br/>140         LET S$ = CHR$(13)<br/>150         IF C &lt; SIZE% THEN S$ = \" \"<br/>160         PRINT IM(R, C) S$;\u00a0: NEXT C, R<br/>170 END<br/>\u00a0<br/>200 REMIDENTITYMATRIX SIZE%<br/>210 LET SIZE% = SIZE% - 1<br/>220 DIM IM(SIZE%, SIZE%)<br/>230 FOR I = 0 TO SIZE%<br/>240     LET IM(I, I) = 1\u00a0: NEXT I<br/>250 RETURN\u00a0:IM<br/>\u00a0</pre>"}, {"lang": "ATS", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>// How to compile:<br/>//<br/>// patscc -DATS_MEMALLOC_LIBC -o idmatrix idmatrix.dats<br/>//<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>extern<br/>fun<br/>idmatrix{n:nat}(n: size_t(n)): matrixref(int, n, n)<br/>implement<br/>idmatrix(n) =<br/>matrixref_tabulate_cloref&lt;int&gt; (n, n, lam(i, j) =&gt; bool2int0(i = j))<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () =<br/>{<br/>//<br/>val N = 5<br/>//<br/>val M = idmatrix(i2sz(N))<br/>val () = fprint_matrixref_sep (stdout_ref, M, i2sz(N), i2sz(N), \" \", \"\\n\")<br/>val () = fprint_newline (stdout_ref)<br/>//<br/>} (* end of [main0] *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 16, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">Clipboard</span></a> <span class=\"sy0\">:=</span> I<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>I<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    r <span class=\"sy0\">:=</span> <span class=\"st0\">\"--`n\"</span> <span class=\"sy0\">,</span> s <span class=\"sy0\">:=</span> <span class=\"st0\">\" \"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% n<br/>    <span class=\"br0\">{</span><br/>        k <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a> <span class=\"sy0\">,</span> r <span class=\"sy0\">.=</span> <span class=\"st0\">\"|  \"</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% n<br/>            r <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a><span class=\"sy0\">=</span>k\u00a0? <span class=\"st0\">\"1, \"</span>\u00a0: <span class=\"st0\">\"0, \"</span><br/>        r <span class=\"sy0\">:=</span> RTrim<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> <span class=\"st0\">\" ,\"</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span> r <span class=\"sy0\">.=</span> <span class=\"st0\">\"  |`n\"</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% <span class=\"nu0\">4</span><span class=\"sy0\">*</span>n<br/>        s <span class=\"sy0\">.=</span> <span class=\"st0\">\" \"</span><br/>    <span class=\"kw1\">return</span> Rtrim<span class=\"br0\">(</span>r<span class=\"sy0\">,</span><span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span> s <span class=\"st0\">\"--\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 19, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f IDENTITY_MATRIX.AWK size</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    size = <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>size <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"size invalid or missing from command line\"</span><span class=\"br0\">)</span><br/>      exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>size; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j<span class=\"sy2\">&lt;=</span>size; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        x = <span class=\"br0\">(</span>i <span class=\"sy2\">==</span> j<span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">1</span> <span class=\"sy5\">:</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d\"</span>,x<span class=\"br0\">)</span> <span class=\"co1\"># print</span><br/>        arr<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span> = x <span class=\"co1\"># build</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Bash", "loc": 3, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"sy0\">`</span><span class=\"kw2\">seq</span> <span class=\"re4\">$1</span><span class=\"sy0\">`</span>;<span class=\"kw1\">do</span> <span class=\"kw3\">printf</span> <span class=\"st_h\">'%*s\\n'</span> <span class=\"re4\">$1</span><span class=\"sy0\">|</span><span class=\"kw2\">tr</span> <span class=\"st_h\">' '</span> <span class=\"st_h\">'0'</span><span class=\"sy0\">|</span><span class=\"kw2\">sed</span> <span class=\"st0\">\"s/0/1/<span class=\"es2\">$i</span>\"</span>;<span class=\"kw1\">done</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      INPUT \"Enter size of matrix: \" size%<br/>      PROCidentitymatrix(size%, im())<br/>      FOR r% = 0 TO size%-1<br/>        FOR c% = 0 TO size%-1<br/>          PRINT im(r%, c%),;<br/>        NEXT<br/>        PRINT<br/>      NEXT r%<br/>      END<br/>\u00a0<br/>      DEF PROCidentitymatrix(s%, RETURN m())<br/>      LOCAL i%<br/>      DIM m(s%-1, s%-1)<br/>      FOR i% = 0 TO s%-1<br/>        m(i%,i%) = 1<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "Burlesque", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) 6 -.^^0\\/<a class=\"__cf_email__\" data-cfemail=\"4c3e0c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/'0\\/.*'1+]\\/{\\/{rt}\\/E!XX}x/+]m[sp<br/>1 0 0 0 0 0<br/>0 1 0 0 0 0<br/>0 0 1 0 0 0<br/>0 0 0 1 0 0<br/>0 0 0 0 1 0<br/>0 0 0 0 0 1<br/>\u00a0</pre>"}, {"lang": "C", "loc": 40, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">**</span> argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"usage: identitymatrix &lt;number of rows&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw4\">signed</span> <span class=\"kw4\">int</span> rowsize <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rowsize <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Dimensions of matrix cannot be negative<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw4\">volatile</span> <span class=\"kw4\">int</span> numElements <span class=\"sy0\">=</span> rowsize <span class=\"sy0\">*</span> rowsize<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numElements <span class=\"sy0\">&lt;</span> rowsize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Squaring\u00a0%d caused result to overflow to\u00a0%d.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> rowsize<span class=\"sy0\">,</span> numElements<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw4\">int</span><span class=\"sy0\">**</span> matrix <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>numElements<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate\u00a0%d elements of\u00a0%d bytes each<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> numElements<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>row <span class=\"sy0\">&lt;</span> rowsize<span class=\"sy0\">;</span>row<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>numElements<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate\u00a0%d elements of\u00a0%d bytes each<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> numElements<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>row<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Matrix is: <span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>row <span class=\"sy0\">&lt;</span> rowsize<span class=\"sy0\">;</span>row<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> column <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>column <span class=\"sy0\">&lt;</span> rowsize<span class=\"sy0\">;</span>column<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>column<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 48, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw2\">class</span> matrix<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    matrix<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nSize <span class=\"br0\">)</span> <span class=\"sy4\">:</span> <br/>      m_oData<span class=\"br0\">(</span>nSize <span class=\"sy2\">*</span> nSize, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, m_nSize<span class=\"br0\">(</span>nSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw2\">inline</span> T<span class=\"sy3\">&amp;</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>          <span class=\"kw1\">return</span> m_oData<span class=\"br0\">[</span>x<span class=\"sy2\">+</span>m_nSize<span class=\"sy2\">*</span>y<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw4\">void</span> identity<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>          <span class=\"kw4\">int</span> nCount <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>          <span class=\"kw4\">int</span> nStride <span class=\"sy1\">=</span> m_nSize <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>          std<span class=\"sy4\">::</span><span class=\"me2\">generate</span><span class=\"br0\">(</span> m_oData.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, m_oData.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <br/>              <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span>nCount<span class=\"sy2\">++%</span>nStride<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw2\">inline</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> size<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> m_nSize<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span>    m_oData<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span>      m_nSize<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> nSize<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter matrix size (N): \"</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> nSize<span class=\"sy4\">;</span><br/>\u00a0<br/>    matrix<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> oMatrix<span class=\"br0\">(</span> nSize <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    oMatrix.<span class=\"me1\">identity</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> oMatrix.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> oMatrix.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> oMatrix<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 37, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> IdentityMatrix<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Requires exactly one argument\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">TryParse</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"kw1\">out</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Requires integer parameter\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> identity <span class=\"sy0\">=</span><br/>                Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span><span class=\"br0\">(</span>z,j<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> j <span class=\"sy0\">==</span> i <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> row <span class=\"kw1\">in</span> identity<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> elem <span class=\"kw1\">in</span> row<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> elem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"> '<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-identity-matrix <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">array</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for i below n <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">array</span> i i<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Component Pascal", "loc": 37, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Algebras;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>\tMatrix <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> NewIdentityMatrix<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix;<br/><span class=\"kw1\">VAR</span><br/>\tm<span class=\"sy0\">:</span> Matrix;<br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\tm<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> m;<br/><span class=\"kw1\">END</span> NewIdentityMatrix;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Show<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">,</span>j<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Show;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tShow<span class=\"br0\">(</span>NewIdentityMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> Algebras.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 30, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matId<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isAssignable<span class=\"sy0\">!</span><span class=\"br0\">(</span>T<span class=\"sy0\">,</span> T<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> Id <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> row<span class=\"sy0\">;</span> Id<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">__traits</span><span class=\"br0\">(</span>compiles<span class=\"sy0\">,</span> <span class=\"br0\">{</span>row<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            row<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// vector op doesn't work with T = BigInt</span><br/>            row<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span><br/>                row<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> r<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> Id<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> form <span class=\"sy0\">=</span> <span class=\"st0\">\"[%([%(%s,\u00a0%)],<span class=\"es1\">\\n</span>\u00a0%)]]\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> id1 <span class=\"sy0\">=</span> matId<span class=\"sy0\">!</span><span class=\"kw4\">real</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span>form <span class=\"sy0\">~</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> id1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> id2 <span class=\"sy0\">=</span> matId<span class=\"sy0\">!</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span>form <span class=\"sy0\">~</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> id2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// auto id3 = matId!(const int)(2); // cant't compile</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 25, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> IdentityMatrix<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// Modified from the Pascal version</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  matrix<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  n<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Size of matrix: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>matrix<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    matrix<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">write</span> <span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    writeln<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Eiffel", "loc": 63, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run application.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t    dim <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a> <span class=\"co1\">-- Dimension of the identity matrix</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t    <span class=\"kw2\">from</span> dim <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> dim <span class=\"sy0\">&gt;</span> <span class=\"nu0\">10</span> <span class=\"kw2\">loop</span><br/>\t\t    \tprint_matrix<span class=\"br0\">(</span> identity_matrix<span class=\"br0\">(</span>dim<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\t\tdim <span class=\"sy0\">:=</span> dim <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>\tidentity_matrix<span class=\"br0\">(</span>dim <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array2&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY2</span></a><span class=\"br0\">[</span>REAL_64<span class=\"br0\">]</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tdim <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tmatrix <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array2&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY2</span></a><span class=\"br0\">[</span>REAL_64<span class=\"br0\">]</span><br/>\t\t\ti <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\u00a0<br/>\t\t\t<span class=\"kw2\">create</span> matrix.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, dim, dim<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">from</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> i <span class=\"sy0\">&gt;</span> dim <span class=\"kw2\">loop</span><br/>\t\t\t\tmatrix.<span class=\"me1\">put</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, i, i<span class=\"br0\">)</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> matrix<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tprint_matrix<span class=\"br0\">(</span>matrix <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array2&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY2</span></a><span class=\"br0\">[</span>REAL_64<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, j <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> i <span class=\"sy0\">&gt;</span> matrix.<span class=\"me1\">height</span> <span class=\"kw2\">loop</span><br/>\t\t\t\tprint<span class=\"br0\">(</span><span class=\"st0\">\"[ \"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">from</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> j <span class=\"sy0\">&gt;</span> matrix.<span class=\"me1\">width</span> <span class=\"kw2\">loop</span><br/>\t\t\t\t\tprint<span class=\"br0\">(</span>matrix.<span class=\"me1\">item</span> <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\tprint<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t\t\tj <span class=\"sy0\">:=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tprint<span class=\"br0\">(</span><span class=\"st0\">\"]<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 14, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>import system'collections.<br/>\u00a0<br/>program =<br/>[<br/>    var n\u00a0:= console write:\"Enter the matrix size:\"; readLine; toInt.<br/>\u00a0<br/>    var identity\u00a0:= 0 till:n repeat(:i)( 0 till:n repeat(:j)( (i == j)iif(1,0) ); summarize(ArrayList new) ); <br/>                         summarize(ArrayList new).<br/>\u00a0<br/>    identity forEach<br/>        (:row) [ console printLine:row ].<br/>].</pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">defmodule Matrix do<br/>  def identity(n) do<br/>    Enum.map(0..n-1, fn i -&gt;<br/>      for j &lt;- 0..n-1, do: (if i==j, do: 1, else: 0)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect Matrix.identity(5)</pre>"}, {"lang": "Erlang", "loc": 11, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">%% Identity Matrix in Erlang for the Rosetta Code Wiki.</span><br/><span class=\"co1\">%% Implemented by Arjun Sunel</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>identity_matrix<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>square_matrix<span class=\"sy3\">/</span><span class=\"nu0\">2</span> <span class=\"sy1\">,</span> identity<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">square_matrix</span><span class=\"br0\">(</span><span class=\"re5\">Size</span><span class=\"sy1\">,</span> <span class=\"re5\">Elements</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">E</span><span class=\"re3\">lements</span><span class=\"br0\">(</span><span class=\"re5\">Column</span><span class=\"sy1\">,</span> <span class=\"re5\">Row</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Column</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Size</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">||</span> <span class=\"re5\">Row</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Size</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">identity</span><span class=\"br0\">(</span><span class=\"re5\">Size</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">square_matrix</span><span class=\"br0\">(</span><span class=\"re5\">Size</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">Column</span><span class=\"sy1\">,</span> <span class=\"re5\">Row</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">case</span> <span class=\"re5\">Column</span> <span class=\"kw1\">of</span> <span class=\"re5\">Row</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM IDENTITY<br/>\u00a0<br/>!$DYNAMIC<br/>DIM A[0,0]<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);)\u00a0! CLS<br/>  INPUT(\"Matrix size\",N%)<br/> \u00a0!$DIM A[N%,N%]<br/>  FOR I%=1 TO N% DO<br/>    A[I%,I%]=1<br/>  END FOR<br/>! print matrix<br/>  FOR I%=1 TO N% DO<br/>    FOR J%=1 TO N% DO<br/>      WRITE(\"###\";A[I%,J%];)<br/>    END FOR<br/>    PRINT<br/>  END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function IdentityMatrix(n)<br/>  $  X:=zeros(n,n);<br/>  $  for i=1 to n <br/>  $    X[i,i]:=1;<br/>  $  end;<br/>  $  return X;<br/>  $endfunction<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> ident n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">init</span> n n <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i j <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> i <span class=\"sy0\">=</span> j <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 10, "block": "<pre class=\"text highlighted_source\">USE: math.matrices<br/>IN: scratchpad 6 identity-matrix .<br/>{<br/>    { 1 0 0 0 0 0 }<br/>    { 0 1 0 0 0 0 }<br/>    { 0 0 1 0 0 0 }<br/>    { 0 0 0 1 0 0 }<br/>    { 0 0 0 0 1 0 }<br/>    { 0 0 0 0 0 1 }<br/>}</pre>"}, {"lang": "FBSL", "loc": 16, "block": "<pre class=\"text highlighted_source\">S\" fsl-util.fs\" REQUIRED<br/>\u00a0<br/>: build-identity ( 'p n -- 'p )  \\ make an NxN identity matrix<br/>  0 DO<br/>    I 1+ 0 DO<br/>      I J = IF  1.0E0 DUP I J }} F!<br/>      ELSE<br/>        0.0E0 DUP J I }} F!<br/>        0.0E0 DUP I J }} F!<br/>      THEN<br/>    LOOP<br/>  LOOP\u00a0;<br/>\u00a0<br/>6 6 float matrix a{{<br/>a{{ 6 build-identity<br/>6 6 a{{ }}fprint</pre>"}, {"lang": "Forth", "loc": 16, "block": "<pre class=\"text highlighted_source\">S\" fsl-util.fs\" REQUIRED<br/>\u00a0<br/>: build-identity ( 'p n -- 'p )  \\ make an NxN identity matrix<br/>  0 DO<br/>    I 1+ 0 DO<br/>      I J = IF  1.0E0 DUP I J }} F!<br/>      ELSE<br/>        0.0E0 DUP J I }} F!<br/>        0.0E0 DUP I J }} F!<br/>      THEN<br/>    LOOP<br/>  LOOP\u00a0;<br/>\u00a0<br/>6 6 float matrix a{{<br/>a{{ 6 build-identity<br/>6 6 a{{ }}fprint</pre>"}, {"lang": "Fortran", "loc": 25, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> identitymatrix<br/>\u00a0<br/>  <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>, <span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">I</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">ms</span>, j<br/>\u00a0<br/>  ms <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>   <span class=\"co1\">! the desired size</span><br/>\u00a0<br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>I<span class=\"br0\">(</span>ms,ms<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                           <span class=\"co1\">! Initialize the array.</span><br/>  forall<span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>ms<span class=\"br0\">)</span> I<span class=\"br0\">(</span>j,j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>     <span class=\"co1\">! Set the diagonal.</span><br/>\u00a0<br/>  <span class=\"co1\">! I is the identity matrix, let's show it:</span><br/>\u00a0<br/>  write <span class=\"br0\">(</span><span class=\"kw1\">fmt</span>, <span class=\"st0\">'(A,I2,A)'</span><span class=\"br0\">)</span> <span class=\"st0\">'('</span>, ms, <span class=\"st0\">'F6.2)'</span><br/>  <span class=\"co1\">! if you consider to have used the (row, col) convention, </span><br/>  <span class=\"co1\">! the following will print the transposed matrix (col, row)</span><br/>  <span class=\"co1\">! but I' = I, so it's not important here  </span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"kw1\">fmt</span><span class=\"br0\">)</span> I<span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> identitymatrix<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 32, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n<br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Input</span> <span class=\"st0\">\"Enter size of matrix \"</span>; n<br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> n &gt; <span class=\"nu0\">0</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> identity<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"co1\">'' all zero by default</span><br/>\u00a0<br/><span class=\"co1\">' enter 1s in diagonal elements</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> =  <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>  identity<span class=\"br0\">(</span>i, i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' print identity matrix if n &lt; 40 </span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">40</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>      <span class=\"kw1\">Print</span> identity<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">Else</span> <br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Matrix is too big to display on 80 column console\"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">def identity( n ) = vector( n, n, \\r, c -&gt; if r == c then 1 else 0 )<br/>\u00a0<br/>println( identity(3) )</pre>"}, {"lang": "GAP", "loc": 5, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>IdentityMat(3);<br/>\u00a0<br/># One can also specify the base ring<br/>IdentityMat(3, Integers mod 10);</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/>    <span class=\"st0\">\"gonum.org/v1/gonum/mat\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> eye<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>mat<span class=\"sy3\">.</span>Dense <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> mat<span class=\"sy3\">.</span>NewDense<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>mat<span class=\"sy3\">.</span>Formatted<span class=\"sy1\">(</span>eye<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> makeIdentityMatrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> j <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">matI n <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a> <span class=\"sy0\">$</span> i <span class=\"sy0\">==</span> j <span class=\"sy0\">|</span> i <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> j <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 7, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> matrix<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>argv<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Argument must be a positive integer.\"</span><span class=\"br0\">)</span><br/>    matrix1 <span class=\"sy0\">:=</span> identity_matrix<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    write_matrix<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw3\">output</span><span class=\"sy0\">,</span>matrix1<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 12, "block": "<pre class=\"j highlighted_source\">   = i. <span class=\"nu0\">4</span>          <span class=\"co1\">NB. create an Identity matrix of size 4</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>   makeI=: <a class=\"__cf_email__\" data-cfemail=\"7a473a1354\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>    <span class=\"co1\">NB. define as a verb with a user-defined name</span><br/>   makeI <span class=\"nu0\">5</span>         <span class=\"co1\">NB. create an Identity matrix of size 5</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Java", "loc": 13, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PrintIdentityMatrix <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        IntStream.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span>.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span>i <span class=\"sy0\">-&gt;</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">::</span>println<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 8, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> idMatrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> i <span class=\"sy0\">===</span> k <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 3, "block": "<pre class=\"text highlighted_source\">def identity(n):<br/>  [range(0;n) | 0] as $row<br/>  | reduce range(0;n) as $i ([]; . + [ $row | .[$i] = 1 ] );</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>eye(3)<br/>\u00a0</pre>"}, {"lang": "K", "loc": 12, "block": "<pre class=\"text highlighted_source\">  =4<br/>(1 0 0 0<br/> 0 1 0 0<br/> 0 0 1 0<br/> 0 0 0 1)<br/>  =5<br/>(1 0 0 0 0<br/> 0 1 0 0 0<br/> 0 0 1 0 0<br/> 0 0 0 1 0<br/> 0 0 0 0 1)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 17, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Enter size of matrix\u00a0: \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> identity <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"co1\">// create n x n matrix of integers</span><br/>\u00a0<br/>    <span class=\"co1\">// enter 1s in diagonal elements</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> identity<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\">// print identity matrix if n &lt;= 40</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> println<span class=\"br0\">(</span>identity<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Matrix is too big to display on 80 column console\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LSL", "loc": 19, "block": "<pre class=\"text highlighted_source\">default {<br/>\tstate_entry() {<br/>\t\tllListen(PUBLIC_CHANNEL, \"\", llGetOwner(), \"\");<br/>\t\tllOwnerSay(\"Please Enter a Dimension for an Identity Matrix.\");<br/>\t}<br/>\tlisten(integer iChannel, string sName, key kId, string sMessage) {<br/>\t\tllOwnerSay(\"You entered \"+sMessage+\".\");<br/>\t\tlist lMatrix = [];<br/>\t\tinteger x = 0;<br/>\t\tinteger n = (integer)sMessage;<br/>\t\tfor(x=0\u00a0; x&lt;n*n\u00a0; x++) {<br/>\t\t\tlMatrix += [(integer)(((x+1)%(n+1))==1)];<br/>\t\t}<br/>\t\t//llOwnerSay(\"[\"+llList2CSV(lMatrix)+\"]\");<br/>\t\tfor(x=0\u00a0; x&lt;n\u00a0; x++) {<br/>\t\t\tllOwnerSay(\"[\"+llList2CSV(llList2ListStrided(lMatrix, x*n, (x+1)*n-1, 1))+\"]\");<br/>\t\t}<br/>\t}<br/>}</pre>"}, {"lang": "Lang5", "loc": 8, "block": "<pre class=\"text highlighted_source\">: identity-matrix<br/>    dup iota 'A set<br/>\u00a0<br/>   \u00a0: i.(*) A in\u00a0;<br/>    [1] swap append reverse A swap reshape 'i. apply<br/>   \u00a0;<br/>\u00a0<br/>5 identity-matrix .</pre>"}, {"lang": "LFE", "loc": 10, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"kw1\">identity</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>`<span class=\"br0\">(</span><span class=\"sy0\">,</span>m <span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">identity</span> m n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">identity</span> m m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"kw1\">identity</span> <span class=\"br0\">(</span>m n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">duplicate</span> m <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">duplicate</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> identity_matrix <span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>        <span class=\"kw1\">local</span> m <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> size <span class=\"kw1\">do</span><br/>                m<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>                <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> size <span class=\"kw1\">do</span><br/>                        m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">==</span> j <span class=\"kw2\">and</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><br/>                <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> m<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> print_matrix <span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>m <span class=\"kw1\">do</span><br/>                <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>print_matrix<span class=\"br0\">(</span>identity_matrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; LinearAlgebra:-IdentityMatrix( 4 );<br/>                           [1    0    0    0]<br/>                           [                ]<br/>                           [0    1    0    0]<br/>                           [                ]<br/>                           [0    0    1    0]<br/>                           [                ]<br/>                           [0    0    0    1]<br/>\u00a0</pre>"}, {"lang": "MathCortex", "loc": 1, "block": "<pre class=\"text highlighted_source\">I = eye(10)</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">IdentityMatrix[4]</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\"><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\">I</span></a> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eye.html\"><span class=\"kw2\">eye</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maxima", "loc": 5, "block": "<pre class=\"text highlighted_source\">ident(4);<br/>/* matrix([1, 0, 0, 0],<br/>          [0, 1, 0, 0],<br/>          [0, 0, 1, 0],<br/>          [0, 0, 0, 1]) */</pre>"}, {"lang": "NetRexx", "loc": 20, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx ************************************************************<br/>* show identity matrix of size n<br/>* I consider m[i,j] to represent the matrix<br/>* 09.07.2013 Walter Pachl (translated from REXX Version 2)<br/>**********************************************************************/</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">Parse</span> Arg n .<br/><span class=\"kw1\">If</span> n=<span class=\"st0\">''</span> <span class=\"kw3\">then</span> n=<span class=\"nu0\">5</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Identity Matrix of size'</span> n <span class=\"st0\">'(m[i,j] IS the Matrix)'</span><br/>m=int<span class=\"br0\">[</span>n,n<span class=\"br0\">]</span> <span class=\"co1\">-- Allocate 2D square array at run-time</span><br/><span class=\"kw1\">Loop</span> i=<span class=\"nu0\">0</span> To n-<span class=\"nu0\">1</span> <span class=\"co1\">-- Like Java, arrays in NetRexx start at 0</span><br/>  ol=<span class=\"st0\">''</span><br/>  <span class=\"kw1\">Loop</span> j=<span class=\"nu0\">0</span> To n-<span class=\"nu0\">1</span><br/>    m<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span>=<span class=\"br0\">(</span>i=j<span class=\"br0\">)</span><br/>    ol=ol m<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Say</span> ol<br/>  <span class=\"kw3\">End</span>     <br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">proc identityMatrix(n): auto =<br/>  result = newSeq[seq[int]](n)<br/>  for i in 0 .. &lt; result.len:<br/>    result[i] = newSeq[int](n)<br/>    result[i][i] = 1</pre>"}, {"lang": "Objeck", "loc": 33, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> IdentityMatrix <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Matrix<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    array <span class=\"sy0\">:=</span> Int<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>row<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> row<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> row<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>col<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> col<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> col<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>row <span class=\"sy0\">=</span> col<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          array<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>          array<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> array<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> PrintMatrix<span class=\"br0\">(</span>array <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    sizes <span class=\"sy0\">:=</span> array<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>row<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> row<span class=\"sy0\">&lt;</span>sizes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> row<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>col<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> col<span class=\"sy0\">&lt;</span>sizes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> col<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        value <span class=\"sy0\">:=</span> array<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"st0\">\"{$value} <span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      '\\n'<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    PrintMatrix<span class=\"br0\">(</span>Matrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 17, "block": "<pre class=\"ocaml highlighted_source\">$ ocaml<br/>\u00a0<br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> make_id_matrix n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix n n <span class=\"nu0\">0.0</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> n <span class=\"kw1\">do</span><br/>      m<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"nu0\">1.0</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> make_id_matrix <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">#</span> make_id_matrix <span class=\"nu0\">4</span> <span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <span class=\"sy0\">=</span><br/><span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">1</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">1</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">1</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.;</span> <span class=\"nu0\">1</span><span class=\"sy0\">.|</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span></pre>"}, {"lang": "Octave", "loc": 1, "block": "<pre class=\"octave highlighted_source\"><a href=\"http://octave.sourceforge.net/octave/function/I.html\"><span class=\"kw10\">I</span></a> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/eye.html\"><span class=\"kw5\">eye</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span></pre>"}, {"lang": "ooRexx", "loc": 31, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"a 3x3 identity matrix\"</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> printMatrix createIdentityMatrix<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"a 5x5 identity matrix\"</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> printMatrix createIdentityMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>::routine createIdentityMatrix<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> size<br/>  matrix = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>size, size<span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> size<br/>      <span class=\"kw1\">loop</span> j = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> size<br/>          <span class=\"kw1\">if</span> i == j <span class=\"kw3\">then</span> matrix<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>          <span class=\"kw3\">else</span> matrix<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>      <span class=\"kw3\">end</span> j<br/>  <span class=\"kw3\">end</span> i<br/>  <span class=\"kw1\">return</span> matrix<br/>\u00a0<br/>::routine printMatrix<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> matrix<br/>\u00a0<br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> matrix~dimension<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      line = <span class=\"st0\">\"\"</span><br/>      <span class=\"kw1\">loop</span> j = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> matrix~dimension<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>          line = line matrix<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span><br/>      <span class=\"kw3\">end</span> j<br/>      <span class=\"kw1\">say</span> line<br/>  <span class=\"kw3\">end</span> i<br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Class SquareMatrix<br/>'=================<br/>\u00a0<br/>  double *Cell<br/>  sys    size<br/>\u00a0<br/>  method SetIdentity()<br/>  indexbase 0<br/>  sys e,i,j<br/>  e=size*size<br/>  for i=0 to &lt;size<br/>    cell(i*size+j)=1\u00a0: j++<br/>  next<br/>  end method<br/>\u00a0<br/>  method constructor(sys n)<br/>  @cell=getmemory n*n*sizeof double<br/>  size=n<br/>  end method<br/>\u00a0<br/>  method destructor()<br/>  freememory @cell<br/>  end method<br/>\u00a0<br/>end class<br/>\u00a0<br/>new SquareMatrix M(8)<br/>M.SetIdentity<br/>'...<br/>del M<br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 21, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> IdentityMatrix<span class=\"br0\">(</span>input<span class=\"sy1\">,</span> output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  matrix<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  n<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Size of matrix: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>matrix<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    matrix<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">write</span> <span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">matid</span><span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> identity_matrix <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">==</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@id</span> <span class=\"sy0\">=</span> identity_matrix <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">@id</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$id</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> identity<span class=\"sy0\">-</span>matrix<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@id</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> flat <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@id</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">@id</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> identity<span class=\"sy0\">-</span>matrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 13, "block": "<pre class=\"text highlighted_source\">function identity(integer n)<br/>sequence res = repeat(repeat(0,n),n)<br/>    for i=1 to n do<br/>        res[i][i] = 1<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>ppOpt({pp_Nest,1})<br/>pp(identity(3))<br/>pp(identity(5))<br/>pp(identity(7))<br/>pp(identity(9))</pre>"}, {"lang": "PHP", "loc": 27, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">function</span> createMatrix<span class=\"br0\">(</span><span class=\"re0\">$size</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$row</span>      <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_fill\"><span class=\"kw3\">array_fill</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$row</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$result</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$row</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> printMatrix<span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a> <span class=\"re0\">$matrix</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$matrix</span> <span class=\"kw1\">as</span> <span class=\"re0\">$row</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$row</span> <span class=\"kw1\">as</span> <span class=\"re0\">$column</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <span class=\"re0\">$column</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">echo</span> PHP_EOL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">echo</span> PHP_EOL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>printMatrix<span class=\"br0\">(</span>createMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de identity (Size)<br/>   (let L (need Size (1) 0)<br/>      (make<br/>         (do Size<br/>            (link (copy (rot L))) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>identity: procedure (A, n);<br/>   declare A(n,n) fixed controlled;<br/>   declare (i,n) fixed binary;<br/>   allocate A; A = 0;<br/>   do i = 1 to n; A(i,i) = 1; end;<br/>end identity;<br/>\u00a0</pre>"}, {"lang": "PostScript", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>% n  ident  [identity-matrix]<br/>% create an identity matrix of dimension n*n.<br/>% Uses a local dictionary for its one parameter, perhaps overkill.<br/>% Constructs arrays of arrays of integers using [], for loops, and stack manipulation.<br/>/ident { 1 dict begin /n exch def<br/>    [<br/>    1 1 n {                             \u00a0% [ i<br/>        [ exch                          \u00a0% [ [ i<br/>        1 1 n {                         \u00a0% [ [ i j<br/>            1 index eq { 1 }{ 0 } ifelse\u00a0% [ [ i b<br/>            exch                        \u00a0% [ [ b i<br/>        } for                           \u00a0% [ [ b+ i<br/>        pop ]                           \u00a0% [ [ b+ ]<br/>    } for                               \u00a0% [ [b+]+ ]<br/>    ]<br/>end } def<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 19, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> identity<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$array</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><br/>            <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span>  <br/>        <span class=\"re0\">$array</span> <br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> show<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$a</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span> <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"st0\">\"$($a[$_])\"</span><span class=\"br0\">}</span><span class=\"kw3\">else</span><span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$array</span> <span class=\"sy0\">=</span> identity <span class=\"nu0\">4</span><br/>show <span class=\"re0\">$array</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 37, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"sy0\">&gt;</span><span class=\"kw1\">Procedure</span> identityMatrix<span class=\"br0\">(</span>Array i<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, size<span class=\"br0\">)</span> <span class=\"co1\">;valid only for size &gt;= 0</span><br/>  <span class=\"co1\">;formats array i() as an identity matrix of size x size</span><br/>  <span class=\"kw1\">Dim</span> i<span class=\"br0\">(</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> j<br/>  <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    i<span class=\"br0\">(</span>j, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Procedure</span> displayMatrix<span class=\"br0\">(</span>Array a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> rows <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, columns <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, j<br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> rows<br/>    <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> columns<br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> i3<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> i4<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>  identityMatrix<span class=\"br0\">(</span>i3<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  identityMatrix<span class=\"br0\">(</span>i4<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>  displayMatrix<span class=\"br0\">(</span>i3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  displayMatrix<span class=\"br0\">(</span>i4<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> identity<span class=\"br0\">(</span>size<span class=\"br0\">)</span>:<br/>    matrix <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>*size <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"co1\">#matrix = [[0] * size] * size    #Has a flaw. See http://stackoverflow.com/questions/240178/unexpected-feature-in-a-python-list-of-lists</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span>:<br/>        matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> rows <span class=\"kw1\">in</span> matrix:<br/>        <span class=\"kw1\">for</span> elements <span class=\"kw1\">in</span> rows:<br/>            <span class=\"kw1\">print</span> elements<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"rsplus highlighted_source\"><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(identity-matrix 5)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 33, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  creates  and  displays  any sized  identity matrix.     */</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">6</span>                 <span class=\"coMULTI\">/* [\u2193]  build &amp; display a matrix.*/</span><br/>          <span class=\"kw1\">call</span> identity_matrix  k      <span class=\"coMULTI\">/*build and display a kxk matrix.*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                  <span class=\"coMULTI\">/* [\u2191]  use general\u2500purpose disp.*/</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500IDENTITY_MATRIX subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>identity_matrix:  <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;  $=<br/>\u00a0<br/>          <span class=\"kw1\">do</span>       r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n          <span class=\"coMULTI\">/*build identity matrix,  by row,*/</span><br/>                <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n          <span class=\"coMULTI\">/*               \u00b7\u00b7\u00b7  and by col.*/</span><br/>                $=$  <span class=\"br0\">(</span>r==c<span class=\"br0\">)</span>            <span class=\"coMULTI\">/*append zero or one (if on diag)*/</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>          <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*r*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> showMatrix  <span class=\"st0\">'identity matrix of size'</span>  n,   $<br/><span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500SHOWMATRIX subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showMatrix: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> hdr,x;  #=<span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*#:  # of elements*/</span><br/>dp=<span class=\"nu0\">0</span>                                         <span class=\"coMULTI\">/*DP:   dec fraction width.*/</span><br/>w=<span class=\"nu0\">0</span>                                          <span class=\"coMULTI\">/*W:    integer part width.*/</span><br/>      <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> n<span class=\"sy0\">*</span>n<span class=\"sy0\">&gt;</span>=#;  _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>x,n<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*find matrix order (size).*/</span><br/>      <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> _ y <span class=\"st0\">'.'</span> f;   w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w, <span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span>;    dp=<span class=\"kw6\">max</span><span class=\"br0\">(</span>dp, <span class=\"kw6\">length</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span>      <span class=\"coMULTI\">/* [\u2191]  idiomatically find widths to align output*/</span><br/>w=w+<span class=\"nu0\">1</span>                 <br/><span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>hdr, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>hdr<span class=\"br0\">)</span>+<span class=\"nu0\">6</span>, <span class=\"br0\">(</span>w+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>#%n<span class=\"br0\">)</span>, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>;  <span class=\"kw1\">say</span><br/>#=<span class=\"nu0\">0</span>                                                       <span class=\"coMULTI\">/*#: element #*/</span><br/>          <span class=\"kw1\">do</span>       row=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;      _=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,n+w<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*indentation.*/</span><br/>                <span class=\"kw1\">do</span> col=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;      #=#+<span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*bump element*/</span><br/>                _=_  <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>x, #<span class=\"br0\">)</span>, , dp<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span>, w<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*col*/</span>         <span class=\"coMULTI\">/* [\u2191]  division by 1 normalizes #*/</span><br/>          <span class=\"kw1\">say</span> _                       <span class=\"coMULTI\">/*display one line of the matrix. */</span><br/>          <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*row*/</span><br/><span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>size = 5<br/>im = newlist(size, size)<br/>identityMatrix(size, im)<br/>for r = 1 to size<br/>    for c = 1 to size<br/>        see im[r][c]<br/>    next<br/>    see nl<br/>next <br/>\u00a0<br/>func identityMatrix s, m<br/>     m = newlist(s, s)<br/>     for i = 1 to s<br/>         m[i][i] = 1<br/>     next<br/>     return m<br/>\u00a0<br/>func newlist x, y<br/>     if isstring(x) x=0+x ok<br/>     if isstring(y) y=0+y ok<br/>     alist = list(x)<br/>     for t in alist<br/>         t = list(y)<br/>     next<br/>     return alist<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 7, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> identity<span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>  <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> i==j\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>size<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> size, identity<span class=\"br0\">(</span>size<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> r.<span class=\"me1\">to_s</span><span class=\"br0\">}</span>, <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">' formats array im() of size ims<br/>for ims = 4 to 6<br/>\u00a0<br/>print\u00a0:print \"--- Size: \";ims;\" ---\"<br/> Dim im(ims,ims)<br/>\u00a0<br/> For i = 1 To ims<br/>   im(i,i) = 1<br/> next <br/>\u00a0<br/> For row = 1 To ims<br/>   print \"[\";<br/>   cma$ = \"\"<br/>     For col = 1 To ims<br/>       print cma$;im(row, col);<br/>       cma$ = \", \"<br/>    next<br/>   print \"]\"<br/> next<br/>next ims</pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>extern crate num;<br/>struct Matrix&lt;T&gt; {<br/>    data: Vec&lt;T&gt;,<br/>    size: usize,<br/>}<br/>\u00a0<br/>impl&lt;T&gt; Matrix&lt;T&gt;<br/>where<br/>    T: num::Num + Clone + Copy,<br/>{<br/>    fn new(size: usize) -&gt; Self {<br/>        Self {<br/>            data: vec![T::zero(); size * size],<br/>            size: size,<br/>        }<br/>    }<br/>    fn get(&amp;mut self, x: usize, y: usize) -&gt; T {<br/>        self.data[x + self.size * y]<br/>    }<br/>    fn identity(&amp;mut self) {<br/>        for (i, item) in self.data.iter_mut().enumerate() {<br/>            *item = if i\u00a0% (self.size + 1) == 0 {<br/>                T::one()<br/>            } else {<br/>                T::zero()<br/>            }<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let size = std::env::args().nth(1).unwrap().parse().unwrap();<br/>    let mut matrix = Matrix::&lt;i32&gt;::new(size);<br/>    matrix.identity();<br/>    for y in 0..size {<br/>        for x in 0..size {<br/>            print!(\"{} \", matrix.get(x, y));<br/>        }<br/>        println!();<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> identityMatrix<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>n,n<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>x<span class=\"sy0\">==</span>y<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> printMatrix<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>m<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>m map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span>, <span class=\"st0\">\", \"</span>, <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/>\u00a0<br/>printMatrix<span class=\"br0\">(</span>identityMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 17, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>identity n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letrec</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>uvec <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>m i acc<span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i n<span class=\"br0\">)</span><br/>\t      acc<br/>\t      <span class=\"br0\">(</span>uvec m <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i m<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>idgen<br/>\t<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i acc<span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i n<span class=\"br0\">)</span><br/>\t      acc<br/>\t      <span class=\"br0\">(</span>idgen <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t     <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>uvec i <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>idgen <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 33, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: matrix is array array integer;<br/>\u00a0<br/>const func matrix: identity (in integer: size) is func<br/>  result<br/>    var matrix: identity is matrix.value;<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    identity\u00a0:= size times size times 0;<br/>    for index range 1 to size do<br/>      identity[index][index]\u00a0:= 1;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: writeMat (in matrix: a) is func<br/>  local<br/>    var integer: i is 0;<br/>    var integer: num is 0;<br/>  begin<br/>    for key i range a do<br/>      for num range a[i] do<br/>        write(num lpad 2);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeMat(identity(6));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func identity_matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        n.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>            i == j\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"br0\">(</span>ARGV\u00a0? ARGV.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span>\u00a0: <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  say <span class=\"st0\">\"<span class=\"es0\">\\n</span>#{n}:\"</span><br/>  <span class=\"kw1\">for</span> row <span class=\"br0\">(</span>identity_matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say row.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 12, "block": "<pre class=\"zxbasic highlighted_source\"> <span class=\"nu0\">10</span> INPUT S<br/> <span class=\"nu0\">20</span> <span class=\"kw1\">DIM</span> M<span class=\"br0\">(</span>S,S<span class=\"br0\">)</span><br/> <span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> I=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> S<br/> <span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> M<span class=\"br0\">(</span>I,I<span class=\"br0\">)</span>=<span class=\"nu0\">1</span><br/> <span class=\"nu0\">50</span> <span class=\"kw1\">NEXT</span> I<br/> <span class=\"nu0\">60</span> <span class=\"kw1\">FOR</span> I=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> S<br/> <span class=\"nu0\">70</span> SCROLL<br/> <span class=\"nu0\">80</span> <span class=\"kw1\">FOR</span> J=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> S<br/> <span class=\"nu0\">90</span> <span class=\"kw1\">PRINT</span> M<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span>;<br/><span class=\"nu0\">100</span> <span class=\"kw1\">NEXT</span> J<br/><span class=\"nu0\">110</span> <span class=\"kw1\">PRINT</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">NEXT</span> I</pre>"}, {"lang": "Sparkling", "loc": 7, "block": "<pre class=\"text highlighted_source\">function unitMatrix(n) {<br/>\treturn map(range(n), function(k1, v1) {<br/>\t\treturn map(range(n), function(k2, v2) {<br/>\t\t\treturn v2 == v1\u00a0? 1\u00a0: 0;<br/>\t\t});<br/>\t});<br/>}</pre>"}, {"lang": "Stata", "loc": 8, "block": "<pre class=\"text highlighted_source\">. mat a = I(3)<br/>. mat list a<br/>\u00a0<br/>symmetric a[3,3]<br/>    c1  c2  c3<br/>r1   1<br/>r2   0   1<br/>r3   0   0   1</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> I <span class=\"br0\">{</span>rank <span class=\"br0\">{</span>zero <span class=\"nu0\">0.0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>one <span class=\"nu0\">1.0</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$rank</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$rank</span> <span class=\"re0\">$zero</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$rank</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lset</span> m <span class=\"re0\">$i</span> <span class=\"re0\">$i</span> <span class=\"re0\">$one</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$m</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TypeScript", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function identity(n) {<br/>    if (n &lt; 1) return \"Not defined\";<br/>    else if (n == 1) return 1;<br/>    else {<br/>        var idMatrix:number[][];<br/>        for (var i: number = 0; i &lt; n; i++) {<br/>            for (var j: number = 0; j &lt; n; j++) {<br/>                if (i\u00a0!= j) idMatrix[i][j] = 0;<br/>                else idMatrix[i][j] = 1;<br/>            }            <br/>        }<br/>        return idMatrix;<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Vala", "loc": 25, "block": "<pre class=\"vala highlighted_source\"><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"Please, input an integer &gt; 0.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">int</span>.<span class=\"me1\">parse</span> <span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"Please, input an integer &gt; 0.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> array <span class=\"sy0\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n, n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> array<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> array<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>, array<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\b</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 31, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>build_matrix(7)<br/>\u00a0<br/><span class=\"kw2\">Sub</span> build_matrix(n)<br/>\t<span class=\"kw4\">Dim</span> matrix()<br/>\t<span class=\"kw4\">ReDim</span> matrix(n-1,n-1)<br/>\ti = 0<br/>\t<span class=\"co1\">'populate the matrix<br/></span>\t<span class=\"kw3\">For</span> row = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t<span class=\"kw3\">For</span> col = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t\t<span class=\"kw3\">If</span> col = i <span class=\"kw3\">Then</span><br/>\t\t\t\tmatrix(row,col) = 1<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tmatrix(row,col) = 0<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span>\t<br/>\t\t<span class=\"kw3\">Next</span><br/>\t\ti = i + 1<br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"co1\">'display the matrix<br/></span>\t<span class=\"kw3\">For</span> row = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t<span class=\"kw3\">For</span> col = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t\t<span class=\"kw3\">If</span> col &lt; n-1 <span class=\"kw3\">Then</span><br/>\t\t\t\tWScript.StdOut.Write matrix(row,col) &amp; <span class=\"st0\">\" \"</span><br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tWScript.StdOut.Write matrix(row,col)<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Wortel", "loc": 5, "block": "<pre class=\"text highlighted_source\">@let {<br/>  im ^(%^\\@table ^(@+ =) @to)<br/>\u00a0<br/> \u00a0!im 4<br/>}</pre>"}, {"lang": "XPL0", "loc": 17, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>def IntSize = 4;                        \\number of bytes in an integer<br/>int Matrix, Size, I, J;<br/>\u00a0<br/>[Text(0, \"Size: \");  Size:= IntIn(0);<br/>Matrix:= Reserve(Size*IntSize);         \\reserve memory for 2D integer array<br/>for I:= 0 to Size-1 do<br/>        Matrix(I):= Reserve(Size*IntSize);<br/>for J:= 0 to Size-1 do                  \\make array an identity matrix<br/>    for I:= 0 to Size-1 do<br/>        Matrix(I,J):= if I=J then 1 else 0;<br/>for J:= 0 to Size-1 do                  \\display the result<br/>    [for I:= 0 to Size-1 do<br/>        [IntOut(0, Matrix(I,J));  ChOut(0, ^ )];<br/>    CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">fcn idMatrix(n){<br/>   m:=(0).pump(n,List.createLong(n).write,0)*n;<br/>   m.apply2(fcn(row,rc){ row[rc.inc()]=1 },Ref(0));<br/>   m<br/>}<br/>idMatrix(5).println();<br/>idMatrix(5).pump(Console.println);</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 16, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> INPUT <span class=\"st0\">\"Matrix size: \"</span>;size<br/><span class=\"nu0\">20</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">200</span>: <span class=\"co3\">REM Identity matrix</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> r=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> size<br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> c=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> size<br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> s$=<span class=\"kw3\">CHR</span>$ <span class=\"nu0\">13</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">IF</span> c&lt;size <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> s$=<span class=\"st0\">\" \"</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">PRINT</span> i<span class=\"br0\">(</span>r,c<span class=\"br0\">)</span>;s$;<br/><span class=\"nu0\">80</span> <span class=\"kw1\">NEXT</span> c<br/><span class=\"nu0\">90</span> <span class=\"kw1\">NEXT</span> r<br/><span class=\"nu0\">100</span> STOP <br/><span class=\"nu0\">200</span> <span class=\"co3\">REM Identity matrix size</span><br/><span class=\"nu0\">220</span> <span class=\"kw1\">DIM</span> i<span class=\"br0\">(</span>size,size<span class=\"br0\">)</span><br/><span class=\"nu0\">230</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> size<br/><span class=\"nu0\">240</span> <span class=\"kw1\">LET</span> i<span class=\"br0\">(</span>i,i<span class=\"br0\">)</span>=<span class=\"nu0\">1</span><br/><span class=\"nu0\">250</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">260</span> <span class=\"kw1\">RETURN</span></pre>"}]}