{"task": "Sequence_of_primes_by_trial_division", "blocks": [{"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Prime_Numbers, Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Sequence_Of_Primes <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> Integer_Numbers <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> <br/>     Prime_Numbers <span class=\"br0\">(</span>Natural, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>; <br/>   <span class=\"kw3\">use</span> Integer_Numbers;<br/>\u00a0<br/>   Start: Natural\u00a0:= Natural'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Stop:  Natural\u00a0:= Natural'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Start .. <span class=\"me1\">Stop</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Is_Prime<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Natural'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Sequence_Of_Primes;</pre>"}, {"lang": "ALGOL 68", "loc": 34, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># is prime PROC from the primality by trial division task #</span><br/><span class=\"kw4\">MODE</span> ISPRIMEINT <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> is prime <span class=\"sy1\">=</span> <span class=\"br0\">(</span> ISPRIMEINT p <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>  <span class=\"kw2\">IF</span> p <span class=\"sy1\">&lt;=</span> 1 <span class=\"kw16\">OR</span> <span class=\"br0\">(</span> <span class=\"kw8\">NOT</span> <span class=\"kw8\">ODD</span> p <span class=\"kw16\">AND</span> p<span class=\"sy1\">/=</span> 2<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>    <span class=\"kw7\">FALSE</span><br/>  <span class=\"kw2\">ELSE</span><br/>    <span class=\"kw3\">BOOL</span> prime <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 3 <span class=\"kw2\">BY</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>      <span class=\"kw2\">WHILE</span> prime <span class=\"sy1\">:=</span> p <span class=\"kw12\">MOD</span> i <span class=\"sy1\">/=</span> 0 <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    prime<br/>  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># end of code from the primality by trial division task #</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns an array of n primes &gt;= start #</span><br/><span class=\"kw4\">PROC</span> prime sequence <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> start<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"br0\">[</span> n <span class=\"br0\">]</span><span class=\"kw3\">INT</span> seq<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>      prime count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> start <span class=\"kw2\">WHILE</span> prime count <span class=\"sy1\">&lt;</span> n <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> is prime<span class=\"br0\">(</span> p <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>                prime count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                seq<span class=\"br0\">[</span> prime count <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> p<br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        seq<br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># prime sequence #</span><br/>\u00a0<br/><span class=\"coMULTI\"># find 20 primes &gt;= 30 #</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> primes <span class=\"sy1\">=</span> prime sequence<span class=\"br0\">(</span> 30<span class=\"sy1\">,</span> 20 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"20 primes starting at 30: \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> primes <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> primes <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> primes<span class=\"br0\">[</span> p <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 32, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% use the isPrime procedure from the Primality by Trial Division task    \u00a0%<br/>    logical procedure isPrime ( integer value n )\u00a0; algol \"isPrime\"\u00a0;<br/>   \u00a0% sets the elements of p to the first n primes. p must have bounds 1\u00a0:: n\u00a0%<br/>    procedure getPrimes ( integer array p ( * )<br/>                       \u00a0; integer value n<br/>                        )\u00a0;<br/>    if n &gt; 0 then begin<br/>       \u00a0% have room for at least oe prime\u00a0%<br/>        integer pPos, possiblePrime;<br/>        p( 1 )       \u00a0:= 2;<br/>        pPos         \u00a0:= 2;<br/>        possiblePrime\u00a0:= 3;<br/>        while pPos &lt;= n do begin<br/>            if isPrime( possiblePrime ) then begin<br/>                p( pPos )    \u00a0:= possiblePrime;<br/>                pPos         \u00a0:= pPos + 1;<br/>            end;<br/>            possiblePrime\u00a0:= possiblePrime + 1<br/>        end<br/>    end getPrimes\u00a0;<br/>\u00a0<br/>    begin\u00a0% test getPrimes\u00a0%<br/>        integer array p( 1\u00a0:: 100 );<br/>        getPrimes( p, 100 );<br/>        for i\u00a0:= 1 until 100 do begin<br/>            if i rem 20 = 1 then write(   i_w\u00a0:= 4, s_w\u00a0:= 1, p( i ) )<br/>                            else writeon( i_w\u00a0:= 4, s_w\u00a0:= 1, p( i ) )<br/>        end for_i<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "ATS", "loc": 70, "block": "<pre class=\"text highlighted_source\">(*<br/>// Lazy-evaluation:<br/>//   sieve for primes<br/>*)<br/>(* ****** ****** *)<br/>//<br/>// How to compile:<br/>// with no GC:<br/>// patscc -D_GNU_SOURCE -DATS_MEMALLOC_LIBC -o sieve sieve.dats<br/>// with Boehm-GC:<br/>// patscc -D_GNU_SOURCE -DATS_MEMALLOC_GCBDW -o sieve sieve.dats -lgc<br/>//<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>#define\u00a0:: stream_cons<br/>#define cons stream_cons<br/>#define nil stream_nil<br/>\u00a0<br/>(* ****** ****** *)<br/>//<br/>fun<br/>from{n:int} (n: int n)<br/> \u00a0:&lt;!laz&gt; stream (intGte(n)) = $delay (cons{intGte(n)}(n, from (n+1)))<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>typedef N2 = intGte(2)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>fun sieve<br/>(<br/>  ns: stream N2<br/>)\u00a0:&lt;!laz&gt;<br/>  stream (N2) = $delay<br/>(<br/>let<br/>  val-cons(n, ns) =\u00a0!ns<br/>in<br/>  cons{N2}(n, sieve (stream_filter_cloref&lt;N2&gt; (ns, lam x =&gt; g1int_nmod(x, n) &gt; 0)))<br/>end\u00a0: stream_con (N2)<br/>) // end of [sieve]<br/>\u00a0<br/>//<br/>\u00a0<br/>val primes: stream (N2) = sieve (from(2))<br/>\u00a0<br/>//<br/>\u00a0<br/>macdef prime_get (n) = stream_nth_exn (primes, ,(n))<br/>\u00a0<br/>//<br/>\u00a0<br/>implement<br/>main0 () = begin<br/>//<br/>println! (\"prime 1000 = \", prime_get (1000))\u00a0; // = 7927<br/>(*<br/>println! (\"prime 5000 = \", prime_get (5000))\u00a0; // = 48619<br/>println! (\"prime 10000 = \", prime_get (10000))\u00a0; // = 104743<br/>*)<br/>//<br/>end // end of [main0]<br/>\u00a0<br/>(* ****** ****** *)</pre>"}, {"lang": "AWK", "loc": 26, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f SEQUENCE_OF_PRIMES_BY_TRIAL_DIVISION.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    low = <span class=\"nu0\">1</span><br/>    high = <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=low; i<span class=\"sy2\">&lt;=</span>high; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>,i<span class=\"br0\">)</span><br/>        count<span class=\"sy3\">++</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>%d prime numbers found in range\u00a0%d-%d<span class=\"es0\">\\n</span>\"</span>,count,low,high<span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> is_prime<span class=\"br0\">(</span>x,  i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy3\">%</span> i <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@echo off<br/>::Prime list using trial division <br/>:: Unbounded (well, up to 2^31-1, but you'll kill it before\u00a0:)<br/>:: skips factors of 2 and 3 in candidates and in divisors <br/>:: uses integer square root to find max divisor to test<br/>:: outputs numbers in rows of 10 right aligned primes<br/>setlocal enabledelayedexpansion<br/>\u00a0<br/>cls<br/>echo prime list<br/>set lin=    0:<br/>set /a num=1, inc1=4, cnt=0<br/>call\u00a0:line 2<br/>call\u00a0:line 3<br/>\u00a0<br/>\u00a0<br/>:nxtcand<br/>set /a num+=inc1, inc1=6-inc1,div=1, inc2=4<br/>call\u00a0:sqrt2\u00a0%num% &amp; set maxdiv=!errorlevel!<br/>\u00a0<br/>:nxtdiv<br/>set /a div+=inc2, inc2=6-inc2, res=(num%%div)<br/>if\u00a0%div% gtr\u00a0!maxdiv! call\u00a0:line\u00a0%num% &amp;  goto nxtcand<br/>if\u00a0%res%  equ 0 (goto\u00a0:nxtcand ) else ( goto nxtdiv)<br/>\u00a0<br/>:sqrt2   [num] calculates integer square root <br/>if\u00a0%1 leq 0 exit /b 0<br/>set /A \"x=%1/(11*1024)+40, x=(%1/x+x)&gt;&gt;1, x=(%1/x+x)&gt;&gt;1, x=(%1/x+x)&gt;&gt;1, x=(%1/x+x)&gt;&gt;1, x=(%1/x+x)&gt;&gt;1, x+=(%1-x*x)&gt;&gt;31,sq=x*x<br/>if sq gtr\u00a0%1 set x-=1<br/>exit /b\u00a0!x!<br/>goto:eof<br/>\u00a0<br/>:line    formats output in 10 right aligned columns<br/>set num1=     \u00a0%1<br/>set lin=!lin!%num1:~-7%<br/>set /a cnt+=1,res1=(cnt%%10)<br/>if\u00a0%res1% neq 0 goto:eof<br/>echo\u00a0%lin% <br/>set cnt1=   \u00a0!cnt!<br/>set lin=!cnt1:~-5!:<br/>goto:eof <br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">2&gt;:::\"}\"8*:*&gt;`#@_48*:**2v<br/>v_v#`\\*:%*:*84\\/*:*84::+&lt;<br/>v#&gt;::48*:*/\\48*:*%%!#v_1^<br/>&lt;^+1$_.#&lt;5#&lt;5#&lt;+#&lt;,#&lt;&lt;0:\\</pre>"}, {"lang": "C", "loc": 36, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> isPrime<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> num<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">||!</span><span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t<span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>num <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> num <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">/</span>num<span class=\"sy0\">;</span> num <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> num<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> l<span class=\"sy0\">,</span>u<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>sum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter lower and upper bounds: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%ld%ld\"</span><span class=\"sy0\">,&amp;</span>l<span class=\"sy0\">,&amp;</span>u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>l<span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span>u<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%ld\"</span><span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tsum<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Prime numbers found in [%ld,%ld]\u00a0:\u00a0%ld\"</span><span class=\"sy0\">,</span>l<span class=\"sy0\">,</span>u<span class=\"sy0\">,</span>sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 13, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, Primes<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Primes<span class=\"br0\">(</span><span class=\"kw4\">int</span> limit<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, limit<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>IsPrime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">All</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 32, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isPrime<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> u <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> u <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> u <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"coMULTI\">/*!( u\u00a0% 2 ) ||*/</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> u <span class=\"sy2\">%</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">unsigned</span> q <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span> <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> u <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>,<br/>             c <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> c <span class=\"sy1\">&lt;=</span> q <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> u <span class=\"sy2\">%</span> c <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> u <span class=\"sy2\">%</span> <span class=\"br0\">(</span> c <span class=\"sy2\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        c <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> mx <span class=\"sy1\">=</span> <span class=\"nu0\">100000000</span>,<br/>             wid <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">log10</span><span class=\"br0\">(</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span> <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> mx <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"[\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> wid <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> u <span class=\"sy1\">=</span> <span class=\"nu0\">3</span>, p <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"co1\">// &lt;- start computing from 3</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> u <span class=\"sy1\">&lt;</span> mx <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> isPrime<span class=\"br0\">(</span> u <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> wid <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> u <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span> p<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        u <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"]<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span> Found \"</span> <span class=\"sy1\">&lt;&lt;</span> p <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" primes.<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns test-p<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>numeric-tower <span class=\"sy0\">:</span><span class=\"me1\">as</span> math<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn prime? <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Uses trial division to determine if number is prime \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> a <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> a <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>mod a <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>some #<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>mod a <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>range <span class=\"nu0\">3</span> <span class=\"br0\">(</span>inc <span class=\"br0\">(</span>int <span class=\"br0\">(</span>Math/ceil <span class=\"br0\">(</span>math/<span class=\"kw1\">sqrt</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"co1\">; 3 to sqrt(a) stepping by 2</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn primes-below <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Finds primes below number n \"</span><br/>  <span class=\"br0\">(</span>for  <span class=\"br0\">[</span>a <span class=\"br0\">(</span>range <span class=\"nu0\">2</span> <span class=\"br0\">(</span>inc n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>prime? a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>primes-below <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> primes-up-to <span class=\"br0\">(</span>max-number<span class=\"br0\">)</span><br/>    <span class=\"st0\">\"Compute all primes up to MAX-NUMBER using trial division\"</span><br/>    <span class=\"br0\">(</span>loop for n from <span class=\"nu0\">2</span> upto max-number<br/>          <span class=\"kw1\">when</span> <span class=\"br0\">(</span>notany <span class=\"br0\">(</span>evenly-divides n<span class=\"br0\">)</span> primes<span class=\"br0\">)</span><br/>          collect n into primes<br/>          finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> primes<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> evenly-divides <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"st0\">\"Create a function that checks whether its input divides N evenly\"</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>integerp <span class=\"br0\">(</span>/ n x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>primes-up-to <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 23, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">numeric</span><span class=\"sy0\">,</span> std.<span class=\"me1\">concurrency</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Generator<span class=\"sy0\">!</span><span class=\"br0\">(</span>ForeachType<span class=\"sy0\">!</span>R<span class=\"br0\">)</span> nubBy<span class=\"br0\">(</span><span class=\"kw2\">alias</span> pred<span class=\"sy0\">,</span> R<span class=\"br0\">)</span><span class=\"br0\">(</span>R items<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>        ForeachType<span class=\"sy0\">!</span>R<span class=\"br0\">[</span><span class=\"br0\">]</span> seen<span class=\"sy0\">;</span><br/>\u00a0<br/>        OUTER<span class=\"sy0\">:</span> <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>x<span class=\"sy0\">;</span> items<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>y<span class=\"sy0\">;</span> seen<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pred<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">continue</span> OUTER<span class=\"sy0\">;</span><br/>            yield<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            seen <span class=\"sy0\">~=</span> x<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    sequence<span class=\"sy0\">!</span>q<span class=\"br0\">{</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>    .<span class=\"me1\">nubBy</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> gcd<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 9, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>lib 'sequences<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>prime? p<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span> #f<span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span><span class=\"kw1\">else</span> <br/>\t\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">5</span> .. <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>is<span class=\"sy0\">-</span>prime? <span class=\"nu0\">101</span><span class=\"br0\">)</span> \u2192 #t\t</pre>"}, {"lang": "Eiffel", "loc": 74, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tsequence <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">27</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tsequence <span class=\"br0\">(</span>lower, upper<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- Sequence of primes from 'lower' to 'upper'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tlower_positive<span class=\"sy0\">:</span> lower <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tupper_positive<span class=\"sy0\">:</span> upper <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tlower_smaller<span class=\"sy0\">:</span> lower <span class=\"sy0\">&lt;</span> upper<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"Sequence of primes from \"</span> <span class=\"sy0\">+</span> lower.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" up to \"</span> <span class=\"sy0\">+</span> upper.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\ti <span class=\"sy0\">:=</span> lower<br/>\t\t\t<span class=\"kw2\">if</span> i \\\\ <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> upper<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> is_prime <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tio.<span class=\"me1\">put_integer</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t\t\t\tio.<span class=\"me1\">put_new_line</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tis_prime <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is 'n' a prime number?</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tpositiv_input<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tmax<span class=\"sy0\">:</span> REAL_64<br/>\t\t\tmath<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double_math&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE_MATH</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> math<br/>\t\t\t<span class=\"kw2\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t<span class=\"kw2\">elseif</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> n \\\\ <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\tmax <span class=\"sy0\">:=</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\ti <span class=\"sy0\">&gt;</span> max<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> n \\\\ i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 14, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>import system'math.<br/>\u00a0<br/>isPrime = <br/>    (:n)(Range new(2,(n sqrt - 1) roundedInt); allMatchedBy(:i)(n mod:i\u00a0!= 0)).<br/>\u00a0<br/>Primes =<br/>    (:n)(Range new(2, n - 2); filterBy:isPrime; toArray).<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(Primes eval:100).<br/>].</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">defmodule Prime do<br/>  def sequence do<br/>    Stream.iterate(2, &amp;(&amp;1+1)) |&gt; Stream.filter(&amp;is_prime/1)<br/>  end<br/>\u00a0<br/>  def is_prime(2), do: true<br/>  def is_prime(n) when n&lt;2 or rem(n,2)==0, do: false<br/>  def is_prime(n), do: is_prime(n,3)<br/>\u00a0<br/>  defp is_prime(n,k) when n&lt;k*k, do: true<br/>  defp is_prime(n,k) when rem(n,k)==0, do: false<br/>  defp is_prime(n,k), do: is_prime(n,k+2)<br/>end<br/>\u00a0<br/>IO.inspect Prime.sequence |&gt; Enum.take(20)</pre>"}, {"lang": "ERRE", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM PRIME_GENERATOR<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>BEGIN<br/>   PRINT(CHR$(12);)\u00a0!CLS<br/>   N=1<br/>   LOOP<br/>     N+=1<br/>     FOR F=2 TO N DO<br/>       IF F=N THEN PRINT(N;) EXIT END IF<br/>       EXIT IF N=F*INT(N/F)<br/>     END FOR<br/>   END LOOP<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*<br/>  Nigel Galloway April 7th., 2017.<br/>*)</span><br/><span class=\"kw1\">let</span> SofE <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fg ng <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">item</span> <span class=\"nu0\">0</span> ng<br/>    <span class=\"kw1\">yield</span> n<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fg <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">cache</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span>g<span class=\"sy0\">%</span>n<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">skip</span> <span class=\"nu0\">1</span> ng<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  fg <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">initInfinite</span><span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">skip</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "FileMaker", "loc": 74, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(*<br/>  Menno van Beek May 10th., 2018.<br/>*)<br/>Set Error Capture [On]<br/>Allow User Abort [Off]<br/># Set default number of minutes<br/>Set Variable [$maxduration; Value:1]<br/># Ask user for a desired duration of the test<br/>Show Custom Dialog [\t\"Setup\"; <br/>\t\t\t\"Enter the number of minutes (0,1-15, 6s increments) you would like this test to run.\u00b6\" &amp; <br/>\t\t\t\"Hit any of the modifier-keys until the result-dialog appears, when you wish to break off the test.\"; <br/>\t\t\t$maxduration ]<br/>If [Get ( LastMessageChoice ) = 1]<br/>\t# Set all start-variables<br/>\tSet Variable \t[<br/>\t\t\t$result; <br/>\t\t\tValue:\tLet ( [ <br/>\t\t\t\t\t$start = Get ( CurrentTimeUTCMilliseconds )\u00a0; <br/>\t\t\t\t\tx = Ceiling ( Abs ( 10 * $maxduration ) ) / 10\u00a0; <br/>\t\t\t\t\ty = Case ( x &lt; ,1\u00a0; ,1\u00a0; x &gt; 15\u00a0; 15\u00a0; x )\u00a0; <br/>\t\t\t\t\t$time = y * 60000\u00a0; // 1 minute = 60000 milliseconds<br/>\t\t\t\t\t$number = 1\u00a0; <br/>\t\t\t\t\t$primenumbers = 2\u00a0; <br/>\t\t\t\t\t$duration = \"\" <br/>\t\t\t\t]\u00a0; <br/>\t\t\t\t\t\"\" <br/>\t\t\t\t)]<br/>\tLoop<br/>\t\t# Increase each iteration by 2 (besides 2 there are no even prime numbers)<br/>\t\t# exit after duration is exceeded or when a modifier-key is actuated<br/>\t\tExit Loop If [\tLet ( [ <br/>\t\t\t\t\t$number = $number + 2\u00a0; <br/>\t\t\t\t\t$i = 1<br/>\t\t\t\t]\u00a0; <br/>\t\t\t\t\t$duration &gt; $time or <br/>\t\t\t\t\tGet ( ActiveModifierKeys ) \u2265 1  <br/>\t\t\t\t)]<br/>\t\tLoop<br/>\t\t\t# Loop until it is determined that a number is or isn't a prime number or the duration is exceeded<br/>\t\t\t# supplement $primenumbers each time one is found, update $duration each iteration<br/>\t\t\tExit Loop If [\tLet ( [ <br/>\t\t\t\t\t\t$x = GetValue ( $primenumbers\u00a0; ValueCount ( $primenumbers ) - $i )\u00a0; <br/>\t\t\t\t\t\t$d = If ( $x &gt; 0\u00a0; $number / $x )\u00a0; <br/>\t\t\t\t\t\t$e = If ( Floor ( $d ) = $d\u00a0; $d )\u00a0; <br/>\t\t\t\t\t\t$i = $i + 1\u00a0; <br/>\t\t\t\t\t\ts = ( $x - 1 ) &gt; $number/2 and $e = \"\"\u00a0; <br/>\t\t\t\t\t\t$primenumbers = If ( \t$x = \"\" or s\u00a0; <br/>\t\t\t\t\t\t\t\t\tList ( $primenumbers\u00a0; $number )\u00a0; <br/>\t\t\t\t\t\t\t\t\t$primenumbers )\u00a0; <br/>\t\t\t\t\t\t$duration = Get ( CurrentTimeUTCMilliseconds ) - $start<br/>\t\t\t\t\t]\u00a0; <br/>\t\t\t\t\t\t$x = \"\" or $e &gt; 0 or s or $duration &gt; $time<br/>\t\t\t\t\t)]<br/>\t\tEnd Loop<br/>\tEnd Loop<br/>\t# Count the number of primes found<br/>\tSet Variable \t[<br/>\t\t\t$result; <br/>\t\t\tValue:\tLet ( [ <br/>\t\t\t\t\t$n = ValueCount ( $primenumbers )\u00a0; <br/>\t\t\t\t\t$$array = $primenumbers<br/>\t\t\t\t]\u00a0; <br/>\t\t\t\t\t\"\" <br/>\t\t\t\t)]<br/>\t# Show results to user<br/>\tShow Custom Dialog [\t\"Result\"; <br/>\t\t\t\tList ( <br/>\t\t\t\t\t\"Prime numbers found: \" &amp; $n\u00a0; <br/>\t\t\t\t\t\"Largest prime number: \" &amp; GetValue ( $primenumbers\u00a0; 1 )\u00a0; <br/>\t\t\t\t\t\"Duration of test (ms): \" &amp; $duration )]<br/>End If<br/>#<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 46, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">CONCOCTED BY R.N.MCLEAN, APPLIED MATHS COURSE, AUCKLAND UNIVERSITY, MCMLXXI.</span><br/>      <span class=\"kw3\">INTEGER</span> ENUFF,PRIME<span class=\"br0\">(</span><span class=\"nu0\">44</span><span class=\"br0\">)</span><br/><span class=\"co1\">CALCULATION SHOWS PRIME(43) = 181, AND PRIME(44) = 191.</span><br/>      <span class=\"kw3\">INTEGER</span> N,F,Q,XP2<br/>      <span class=\"kw3\">INTEGER</span> INC,IP,LP,PP<br/>      <span class=\"kw3\">INTEGER</span> ALINE<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>,LL,I<br/>      <span class=\"kw3\">DATA</span> ENUFF<span class=\"sy0\">/</span><span class=\"nu0\">44</span><span class=\"sy0\">/</span><br/>      <span class=\"kw3\">DATA</span> PP<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">/</span><br/>      <span class=\"kw3\">DATA</span> PRIME<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,PRIME<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,PRIME<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>,PRIME<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">5</span><span class=\"sy0\">/</span><br/><span class=\"co1\">COPY THE KNOWN PRIMES TO THE OUTPUT LINE.</span><br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">1</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,PP<br/>    <span class=\"nu0\">1</span>   ALINE<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">=</span> PRIME<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>      LL <span class=\"sy0\">=</span> PP<br/>      LP <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>      XP2 <span class=\"sy0\">=</span> PRIME<span class=\"br0\">(</span>LP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>      N <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>      INC <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/><span class=\"co1\">CONSIDER ANOTHER CANDIDATE. VIA INC, DODGE MULTIPLES OF 2 AND 3.</span><br/>   <span class=\"nu0\">10</span> INC <span class=\"sy0\">=</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-</span> INC<br/>      N <span class=\"sy0\">=</span> N <span class=\"sy0\">+</span> INC<br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N <span class=\"sy0\">-</span> XP2<span class=\"br0\">)</span> <span class=\"nu0\">20</span>,<span class=\"nu0\">11</span>,<span class=\"nu0\">20</span><br/>   <span class=\"nu0\">11</span> LP <span class=\"sy0\">=</span> LP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      XP2 <span class=\"sy0\">=</span> PRIME<span class=\"br0\">(</span>LP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>      <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">40</span><br/><span class=\"co1\">CHECK SUCCESSIVE PRIMES AS FACTORS, STARTING WITH PRIME(4) = 5.</span><br/>   <span class=\"nu0\">20</span> IP <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>   <span class=\"nu0\">21</span> F <span class=\"sy0\">=</span> PRIME<span class=\"br0\">(</span>IP<span class=\"br0\">)</span><br/>      Q <span class=\"sy0\">=</span> N<span class=\"sy0\">/</span>F<br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>Q<span class=\"sy0\">*</span>F <span class=\"sy0\">-</span> N<span class=\"br0\">)</span> <span class=\"nu0\">22</span>,<span class=\"nu0\">40</span>,<span class=\"nu0\">22</span><br/>   <span class=\"nu0\">22</span> IP <span class=\"sy0\">=</span> IP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IP <span class=\"sy0\">-</span> LP<span class=\"br0\">)</span> <span class=\"nu0\">21</span>,<span class=\"nu0\">21</span>,<span class=\"nu0\">30</span><br/><span class=\"co1\">CAUGHT ANOTHER PRIME.</span><br/>   <span class=\"nu0\">30</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PP <span class=\"sy0\">-</span> ENUFF<span class=\"br0\">)</span> <span class=\"nu0\">31</span>,<span class=\"nu0\">32</span>,<span class=\"nu0\">32</span><br/>   <span class=\"nu0\">31</span> PP <span class=\"sy0\">=</span> PP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      PRIME<span class=\"br0\">(</span>PP<span class=\"br0\">)</span> <span class=\"sy0\">=</span> N<br/>   <span class=\"nu0\">32</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LL <span class=\"sy0\">-</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"nu0\">35</span>,<span class=\"nu0\">33</span>,<span class=\"nu0\">33</span><br/>   <span class=\"nu0\">33</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ALINE<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,LL<span class=\"br0\">)</span><br/>   <span class=\"nu0\">34</span> FORMAT <span class=\"br0\">(</span>20I6<span class=\"br0\">)</span><br/>      LL <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"nu0\">35</span> LL <span class=\"sy0\">=</span> LL <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      ALINE<span class=\"br0\">(</span>LL<span class=\"br0\">)</span> <span class=\"sy0\">=</span> N<br/><span class=\"co1\">COMPLETED?</span><br/>   <span class=\"nu0\">40</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N <span class=\"sy0\">-</span> <span class=\"nu0\">32767</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span>,<span class=\"nu0\">41</span>,<span class=\"nu0\">41</span><br/>   <span class=\"nu0\">41</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ALINE<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,LL<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 23, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPrime<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span>  = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Dim</span> limit <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> limit <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' Print all primes from 101 to 999</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">101</span> <span class=\"kw1\">To</span> <span class=\"nu0\">999</span><br/>  <span class=\"kw1\">If</span> isPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>; <br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 55, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> NumsFromBy<span class=\"sy1\">(</span>from <span class=\"kw4\">int</span><span class=\"sy1\">,</span> by <span class=\"kw4\">int</span><span class=\"sy1\">,</span> ch chan&lt;<span class=\"sy3\">-</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> from<span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">+=</span>by <span class=\"sy1\">{</span><br/>    ch &lt;<span class=\"sy3\">-</span> <span class=\"nu2\">i</span><br/>  <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Filter<span class=\"sy1\">(</span>in &lt;<span class=\"sy3\">-</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">,</span> out chan&lt;<span class=\"sy3\">-</span> <span class=\"kw4\">int</span><span class=\"sy1\">,</span> prime <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>in<br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span>prime <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span>            <span class=\"co1\">// here is the trial division</span><br/>      out &lt;<span class=\"sy3\">-</span> <span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>  <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Sieve<span class=\"sy1\">(</span>out chan&lt;<span class=\"sy3\">-</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <br/>  out &lt;<span class=\"sy3\">-</span> <span class=\"nu0\">3</span><br/>  q <span class=\"sy2\">:=</span> <span class=\"nu0\">9</span><br/>  ps <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>  <span class=\"kw1\">go</span> Sieve<span class=\"sy1\">(</span>ps<span class=\"sy1\">)</span>                   <span class=\"co1\">// separate primes supply</span><br/>  p <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>ps         <br/>  nums <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>  <span class=\"kw1\">go</span> NumsFromBy<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>nums<span class=\"sy1\">)</span>        <span class=\"co1\">// end of setup</span><br/>  <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>    n <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>nums<br/>    <span class=\"kw1\">if</span> n &lt; q <span class=\"sy1\">{</span><br/>    \tout &lt;<span class=\"sy3\">-</span> n                 <span class=\"co1\">// n is prime</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        ch1 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span>    <span class=\"co1\">// n == q == p*p</span><br/>        <span class=\"kw1\">go</span> Filter<span class=\"sy1\">(</span>nums<span class=\"sy1\">,</span> ch1<span class=\"sy1\">,</span> p<span class=\"sy1\">)</span>  <span class=\"co1\">// creation of a filter by p, at p*p</span><br/>        nums <span class=\"sy2\">=</span> ch1<br/>    \tp <span class=\"sy2\">=</span> &lt;<span class=\"sy3\">-</span>ps                 <span class=\"co1\">// next prime</span><br/>    \tq <span class=\"sy2\">=</span> p<span class=\"sy3\">*</span>p                  <span class=\"co1\">//   and its square</span><br/>    <span class=\"sy1\">}</span><br/>  <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> primes <span class=\"sy1\">(</span>c chan&lt;<span class=\"sy3\">-</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>  c &lt;<span class=\"sy3\">-</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">go</span> Sieve<span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>  ch <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>  <span class=\"kw1\">go</span> primes<span class=\"sy1\">(</span>ch<span class=\"sy1\">)</span><br/>  fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"First twenty:\"</span><span class=\"sy1\">)</span><br/>  <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">20</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"sy3\">&lt;-</span>ch<span class=\"sy1\">)</span><br/>  <span class=\"sy1\">}</span><br/>  fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\"><span class=\"br0\">[</span>n <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"br0\">[</span>i <span class=\"sy0\">|</span> i <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a> n i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">primTrial=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  try=. i.&amp;.<span class=\"sy0\">(</span>p:inv<span class=\"sy0\">)</span>\u00a0%: &gt;./ <span class=\"kw2\">y</span><br/>  candidate=. <span class=\"sy0\">(</span><span class=\"kw2\">y</span>&gt;<span class=\"nu0\">1</span><span class=\"sy0\">)</span>*<span class=\"kw2\">y</span>=&lt;.<span class=\"kw2\">y</span><br/>  <span class=\"kw2\">y</span> #~ candidate*<span class=\"sy0\">(</span><span class=\"kw2\">y</span> e.try<span class=\"sy0\">)</span> = +/ <span class=\"nu0\">0</span>= try|/ <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.IntStream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> IntStream getPrimes<span class=\"br0\">(</span><span class=\"kw4\">int</span> start, <span class=\"kw4\">int</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> IntStream.<span class=\"me1\">rangeClosed</span><span class=\"br0\">(</span>start, end<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>n <span class=\"sy0\">-&gt;</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isPrime<span class=\"br0\">(</span><span class=\"kw4\">long</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">long</span> max <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> max<span class=\"sy0\">;</span> n <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        getPrimes<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span>p <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d, \"</span>, p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 18, "block": "<pre class=\"text highlighted_source\">struct TDPrimes{T&lt;:Integer}<br/>    uplim::T<br/>end<br/>\u00a0<br/>Base.start{T&lt;:Integer}(pl::TDPrimes{T}) = 2ones(T, 1)<br/>Base.done{T&lt;:Integer}(pl::TDPrimes{T}, p::Vector{T}) = p[end] &gt; pl.uplim<br/>function Base.next{T&lt;:Integer}(pl::TDPrimes{T}, p::Vector{T})<br/>    pr = npr = p[end]<br/>    ispr = false<br/>    while\u00a0!ispr<br/>        npr += 1<br/>        ispr = all(npr\u00a0% d\u00a0!= 0 for d in p)<br/>    end<br/>    push!(p, npr)<br/>    return pr, p<br/>end<br/>\u00a0<br/>println(\"Primes \u2264 100: \", join((p for p in TDPrimes(100)), \", \"))</pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\"># Produce a (possibly empty) stream of primes in the range [m,n], i.e. m &lt;= p &lt;= n<br/>def primes(m; n):<br/>  ([m,2] | max) as $m<br/>  | if $m &gt; n then empty<br/>    elif $m == 2 then 2, primes(3;n)<br/>    else (1 + (2 * range($m/2 | floor; (n + 1) /2 | floor))) | select( is_prime )<br/>    end;</pre>"}, {"lang": "Kotlin", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// print all primes below 2000 say</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"    2\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">3</span>..<span class=\"nu0\">1999</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            count++ <br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"%5d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">%</span> <span class=\"nu0\">15</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lambdatalk", "loc": 18, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">{</span>def prime<br/> <span class=\"br0\">{</span>def prime.rec<br/>  <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:m\u00a0:n<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:m\u00a0:m<span class=\"br0\">}</span>\u00a0:n<span class=\"br0\">}</span><br/>    then\u00a0:n<br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"sy0\">%</span>\u00a0:n\u00a0:m<span class=\"br0\">}</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>          then <br/>          <span class=\"kw1\">else</span> <span class=\"br0\">{</span>prime.rec <span class=\"br0\">{</span><span class=\"sy0\">+</span>\u00a0:m <span class=\"nu0\">1</span><span class=\"br0\">}</span>\u00a0:n<span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>prime.rec <span class=\"nu0\">2</span>\u00a0:n<span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"kw1\">map</span> prime <span class=\"br0\">{</span>serie <span class=\"nu0\">3</span> <span class=\"nu0\">100</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"sy0\">-&gt;</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span> <span class=\"nu0\">73</span> <span class=\"nu0\">79</span> <span class=\"nu0\">83</span> <span class=\"nu0\">89</span> <span class=\"nu0\">97</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"kw1\">map</span> prime <span class=\"br0\">{</span>serie <span class=\"nu0\">9901</span> <span class=\"nu0\">10000</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"sy0\">-&gt;</span> <span class=\"nu0\">9901</span> <span class=\"nu0\">9907</span> <span class=\"nu0\">9923</span> <span class=\"nu0\">9929</span> <span class=\"nu0\">9931</span> <span class=\"nu0\">9941</span> <span class=\"nu0\">9949</span> <span class=\"nu0\">9967</span> <span class=\"nu0\">9973</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 22, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Rosetta Code - Sequence of primes by trial division\"</span><br/><span class=\"kw1\">print</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"Prime numbers between 1 and 50\"</span><br/><span class=\"kw1\">for</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">50</span><br/>    <span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> x<br/><span class=\"kw1\">next</span> x<br/><span class=\"br0\">[</span>start<span class=\"br0\">]</span><br/><span class=\"kw1\">input</span> <span class=\"st0\">\"Enter an integer: \"</span>; x<br/><span class=\"kw1\">if</span> x<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"Program complete.\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> x; <span class=\"st0\">\" is prime\"</span> <span class=\"kw1\">else</span> <span class=\"kw1\">print</span> x; <span class=\"st0\">\" is not prime\"</span><br/><span class=\"kw1\">goto</span> <span class=\"br0\">[</span>start<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    p<span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> p<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"kw1\">then</span> isPrime<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span> <span class=\"co1\">'prime</span><br/>    <span class=\"kw1\">if</span> p<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">or</span> p<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>p <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span> <span class=\"co1\">'not prime</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"kw2\">sqr</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> step <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"kw1\">mod</span> i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span> <span class=\"co1\">'not prime</span><br/>    <span class=\"kw1\">next</span> i<br/>    isPrime<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 33, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Returns true if x is prime, and false otherwise</span><br/><span class=\"kw1\">function</span> isprime <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> x <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> x <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Returns table of prime numbers (from lo, if specified) up to hi</span><br/><span class=\"kw1\">function</span> primes <span class=\"br0\">(</span>lo<span class=\"sy0\">,</span> hi<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> hi <span class=\"kw1\">then</span><br/>        hi <span class=\"sy0\">=</span> lo<br/>        lo <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> lo<span class=\"sy0\">,</span> hi <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> isprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Show all the values of a table in one line</span><br/><span class=\"kw1\">function</span> show <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>v <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/>show<span class=\"br0\">(</span>primes<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>show<span class=\"br0\">(</span>primes<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "MATLAB", "loc": 15, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> primeList = sieveOfEratosthenes<span class=\"br0\">(</span>lastNumber<span class=\"br0\">)</span><br/>\u00a0<br/>    list = <span class=\"br0\">(</span><span class=\"nu0\">2</span>:lastNumber<span class=\"br0\">)</span>; <span class=\"co1\">%Construct list of numbers</span><br/>    primeList = <span class=\"br0\">[</span><span class=\"br0\">]</span>; <span class=\"co1\">%Preallocate prime list</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> list<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span> &lt;lastNumber <span class=\"br0\">)</span><br/>\u00a0<br/>        primeList = <span class=\"br0\">[</span>primeList list<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>; <span class=\"co1\">%add prime to the prime list</span><br/>        list<span class=\"br0\">(</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>list,list<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span> <span class=\"br0\">)</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span>; <span class=\"co1\">%filter out all multiples of the current prime</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    primeList = <span class=\"br0\">[</span>primeList list<span class=\"br0\">]</span>; <span class=\"co1\">%The rest of the numbers in the list are primes</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: primeSeq(n)  n seq filter(#isPrime)\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">trial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu1\">4</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Handle negatives */</span><br/>  <span class=\"kw1\">forprime</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>p <span class=\"sy0\">==</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">select</span><span class=\"br0\">(</span>trial<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">100</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 13, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> PrimeRng<span class=\"sy1\">;</span><br/><span class=\"kw1\">uses</span><br/>  primTrial<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  Range <span class=\"sy1\">:</span> ptPrimeList<span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  Range <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PrimeRange<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy1\">,</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">+</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Low<span class=\"br0\">(</span>Range<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>Range<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>Range<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> isprime <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$sqrtn</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$sqrtn</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> isprime<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> isprime<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">12345678</span> <span class=\"sy0\">..</span> <span class=\"nu0\">12345678</span><span class=\"sy0\">+</span><span class=\"nu0\">100</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"kw3\">first</span> <span class=\"sy0\">*</span> <span class=\"sy0\">%%</span> <span class=\"kw3\">none</span><span class=\"br0\">(</span><span class=\"re0\">@_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">@_</span><span class=\"br0\">[</span><span class=\"sy0\">*</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">@primes</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 5, "block": "<pre class=\"text highlighted_source\">sequence s= {}<br/>for i=0 to 100 do<br/>    if is_prime(i) then s&amp;=i end if<br/>end for<br/>?s</pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(de prime? (N)<br/>   (or<br/>      (= N 2)<br/>      (and<br/>         (&gt; N 1)<br/>         (bit? 1 N)<br/>         (let S (sqrt N)<br/>            (for (D 3  T  (+ D 2))<br/>               (T (&gt; D S) T)<br/>               (T (=0 (% N D)) NIL) ) ) ) ) )<br/>\u00a0<br/>(de primeseq (A B)<br/>   (filter prime? (range A B)) )<br/>\u00a0<br/>(println (primeseq 50 99))</pre>"}, {"lang": "PowerShell", "loc": 24, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> eratosthenes <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$prime</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"re0\">$true</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span>; <span class=\"re0\">$j</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$n</span>; <span class=\"re0\">$j</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$n</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span><span class=\"br0\">{</span><span class=\"re0\">$prime</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"$n must be equal or greater than 1\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> sieve<span class=\"sy0\">-</span>start<span class=\"sy0\">-</span>end <span class=\"br0\">(</span><span class=\"re0\">$start</span><span class=\"sy0\">,</span><span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>eratosthenes <span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-ge</span> <span class=\"re0\">$start</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/><span class=\"st0\">\"$(sieve-start-end 100 200)\"</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 49, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/>#SPC<span class=\"sy0\">=</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>#TB<span class=\"sy0\">=~</span><span class=\"st0\">\"\\t\"</span><br/>#TBLF<span class=\"sy0\">=~</span><span class=\"st0\">\"\\t\\n\"</span><br/><span class=\"kw1\">Define</span>.i a,b,l,n,count<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">Define</span> <span class=\"sy0\">*</span>count.Integer<span class=\"sy0\">=</span>@count<br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i AddCount<span class=\"br0\">(</span><span class=\"sy0\">*</span>c.Integer<span class=\"br0\">)</span> <span class=\"co1\">; *counter: by Ref</span><br/>  <span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>i  <br/><span class=\"kw1\">EndProcedure</span> <br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s FormatStr<span class=\"br0\">(</span>tx$,l.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Shared</span> <span class=\"sy0\">*</span>count<br/>  <span class=\"kw1\">If</span> AddCount<span class=\"br0\">(</span><span class=\"sy0\">*</span>count<span class=\"br0\">)</span><span class=\"sy0\">%</span>10<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">RSet</span><span class=\"br0\">(</span>tx$,l,#SPC<span class=\"br0\">)</span><span class=\"sy0\">+</span>#TBLF<br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">RSet</span><span class=\"br0\">(</span>tx$,l,#SPC<span class=\"br0\">)</span><span class=\"sy0\">+</span>#TB<br/>  <span class=\"kw1\">EndIf</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b Trial<span class=\"br0\">(</span>n.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.i i<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">3</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b isPrime<span class=\"br0\">(</span>n.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">And</span> n<span class=\"sy0\">%</span>2<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">And</span> Trial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> n<span class=\"sy0\">=</span><span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #True\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #False  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Sequence of primes by Trial Division\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Input (n1&lt;n2 &amp; n1&gt;0)\"</span><span class=\"br0\">)</span> <br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"n1\u00a0: \"</span><span class=\"br0\">)</span>\u00a0: a<span class=\"sy0\">=</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"n2\u00a0: \"</span><span class=\"br0\">)</span>\u00a0: b<span class=\"sy0\">=</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>l<span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> a<span class=\"sy0\">&lt;</span>b <span class=\"kw1\">And</span> a<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\nPrime numbers between \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" and \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> n<span class=\"sy0\">=</span>a <span class=\"kw1\">To</span> b<br/>    <span class=\"kw1\">If</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span>FormatStr<span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\nPrimes= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>count<span class=\"sy0\">\\</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> prime<span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span>a\u00a0% x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>a**<span class=\"nu0\">0.5</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> primes_below<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">if</span> prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">#lang lazy<br/>(define nats (cons 1 (map add1 nats)))<br/>(define (sift n l) (filter (\u03bb(x) (not (zero? (modulo x n)))) l))<br/>(define (sieve l) (cons (first l) (sieve (sift (first l) (rest l)))))<br/>(define primes (sieve (rest nats)))<br/>(!! (take 25 primes))</pre>"}, {"lang": "REXX", "loc": 18, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program lists a  sequence of primes  by  testing  primality  by  trial division. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*get optional number of primes to find*/</span><br/><span class=\"kw1\">if</span> n==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> n==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> n=<span class=\"nu0\">26</span>                     <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>tell= <span class=\"br0\">(</span>n<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;            n=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*Is  N  negative?  Then don't display.*/</span><br/>@<span class=\"sy0\">.</span>1=<span class=\"nu0\">2</span>;  <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>1, <span class=\"nu0\">9</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*display  2  as a special prime case. */</span><br/>#=<span class=\"nu0\">1</span>                                              <span class=\"coMULTI\">/*#  is number of primes found (so far)*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  N:  default lists up to 101 #s.*/</span><br/>   <span class=\"kw1\">do</span> j=<span class=\"nu0\">3</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">while</span>  #<span class=\"sy0\">&lt;</span>n                      <span class=\"coMULTI\">/*start with the first odd prime.      */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  divide by the primes.   ___    */</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> #  <span class=\"kw2\">while</span> \u00a0!<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>=j            <span class=\"coMULTI\">/*divide  J  with all primes \u2264 \u221a J     */</span><br/>          <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span>@<span class=\"sy0\">.</span>k==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j           <span class=\"coMULTI\">/*\u00f7 by prev. prime?  \u00acprime     ___    */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                            <span class=\"coMULTI\">/* [\u2191]   only divide up to     \u221a J     */</span><br/>   #=#+<span class=\"nu0\">1</span>                                         <span class=\"coMULTI\">/*bump the count of number of primes.  */</span><br/>   @<span class=\"sy0\">.</span>#=j;  \u00a0!<span class=\"sy0\">.</span>#=j<span class=\"sy0\">*</span>j                              <span class=\"coMULTI\">/*define this prime; define its square.*/</span><br/>   <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, <span class=\"nu0\">9</span><span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*maybe display this prime \u2500\u2500\u25ba terminal*/</span><br/>   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                   <span class=\"coMULTI\">/* [\u2191]  only display N number of primes*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  display number of primes found.*/</span><br/><span class=\"kw1\">say</span>  #       <span class=\"st0\">' primes found.'</span>                    <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i = 1 to 100<br/>    if isPrime(i) see \"\" + i + \" \" ok<br/>next<br/>see nl<br/>\u00a0<br/>func isPrime n<br/>     if n &lt; 2 return false ok<br/>     if n &lt; 4 return true ok<br/>     if n\u00a0% 2 = 0 return false ok<br/>     for d = 3 to sqrt(n) step 2 <br/>         if n\u00a0% d = 0 return false ok<br/>     next\t<br/>     return true<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"prime\"</span><br/>\u00a0<br/>pg = <span class=\"re2\">Prime::TrialDivisionGenerator</span>.<span class=\"me1\">new</span><br/><span class=\"kw3\">p</span> pg.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\"># =&gt; [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</span><br/><span class=\"kw3\">p</span> pg.<span class=\"kw1\">next</span> <span class=\"co1\"># =&gt; 31</span></pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sieve<span class=\"br0\">(</span>nums<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    Stream.<span class=\"me1\">cons</span><span class=\"br0\">(</span>nums.<span class=\"me1\">head</span>, sieve<span class=\"br0\">(</span><span class=\"br0\">(</span>nums.<span class=\"me1\">tail</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">%</span> nums.<span class=\"me1\">head</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primes <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">#::</span> sieve<span class=\"br0\">(</span>Stream.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>primes take <span class=\"nu0\">10</span> toList<span class=\"br0\">)</span> <span class=\"co1\">//         //List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)</span><br/>  println<span class=\"br0\">(</span>primes takeWhile <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> toList<span class=\"br0\">)</span> <span class=\"co1\">//List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)</span></pre>"}, {"lang": "Sidef", "loc": 12, "block": "<pre class=\"ruby highlighted_source\">func prime_seq<span class=\"br0\">(</span>amount, callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>counter, number<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>counter <span class=\"sy0\">&lt;</span> amount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            callback<span class=\"br0\">(</span>number<span class=\"br0\">)</span>;<br/>            <span class=\"sy0\">++</span>counter;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"sy0\">++</span>number;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>prime_seq<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> say <span class=\"kw3\">p</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;     <span class=\"co1\"># prints the first 100 primes</span></pre>"}, {"lang": "Swift", "loc": 23, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>extension SequenceType {<br/>  func takeWhile(include: Generator.Element -&gt; Bool) -&gt; AnyGenerator&lt;Generator.Element&gt; {<br/>    var g = self.generate()<br/>    return anyGenerator { g.next().flatMap{include($0)\u00a0? $0\u00a0: nil }}<br/>  }<br/>}<br/>\u00a0<br/>var pastPrimes = [2]<br/>\u00a0<br/>var primes = anyGenerator {<br/>  _ -&gt; Int? in<br/>  defer {<br/>    pastPrimes.append(pastPrimes.last!)<br/>    let c = pastPrimes.count - 1<br/>    for p in anyGenerator({++pastPrimes[c]}) {<br/>      let lim = Int(sqrt(Double(p)))<br/>      if (!pastPrimes.takeWhile{$0 &lt;= lim}.contains{p\u00a0% $0 == 0}) { break }<br/>    }<br/>  }<br/>  return pastPrimes.last<br/>}</pre>"}, {"lang": "Tcl", "loc": 16, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> primes <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> havePrime n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> primes<br/>    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$primes</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Do the test-by-trial-division</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span>/<span class=\"re0\">$p</span><span class=\"sy0\">*</span><span class=\"re0\">$p</span> == <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> false<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> true<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>havePrime <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> primes <span class=\"re0\">$n</span><br/>\t<span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"$n \"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn isPrime(p){<br/>   (p&gt;=2) and (not [2 .. p.toFloat().sqrt()].filter1('wrap(n){ p%n==0 }))<br/>}<br/>fcn primesBelow(n){ [0..n].filter(isPrime) }</pre>"}]}