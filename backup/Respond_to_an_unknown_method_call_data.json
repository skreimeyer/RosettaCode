{"task": "Respond_to_an_unknown_method_call", "blocks": [{"lang": "AutoHotkey", "loc": 27, "block": "<pre class=\"autohotkey highlighted_source\">class example<br/><span class=\"br0\">{</span><br/>  foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a> Called example<span class=\"sy0\">.</span>foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  __Call<span class=\"br0\">(</span>method<span class=\"sy0\">,</span> params<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    funcRef <span class=\"sy0\">:=</span> Func<span class=\"br0\">(</span>funcName <span class=\"sy0\">:=</span> this<span class=\"sy0\">.</span>__class <span class=\"st0\">\".\"</span> method<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span>\u00a0!IsObject<span class=\"br0\">(</span>funcRef<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      str <span class=\"sy0\">:=</span> <span class=\"st0\">\"Called undefined method \"</span> funcName <span class=\"st0\">\"() with these parameters:\"</span><br/>      for k<span class=\"sy0\">,</span>v in params<br/>        str <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> v<br/>      <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a> <span class=\"re0\">%str%</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> funcRef<span class=\"sy0\">.</span><span class=\"br0\">(</span>this<span class=\"sy0\">,</span> params<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ex <span class=\"sy0\">:=</span> new example<br/>ex<span class=\"sy0\">.</span>foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>ex<span class=\"sy0\">.</span>bar<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Brat", "loc": 7, "block": "<pre class=\"text highlighted_source\">example = object.new<br/>\u00a0<br/>example.no_method = { meth_name, *args |<br/>  p \"#{meth_name} was called with these arguments: #{args}\"<br/>} <br/>\u00a0<br/>example.this_does_not_exist \"at all\"  #Prints \"this_does_not_exist was called with these arguments: [at all]\"</pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Dynamic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Example <span class=\"sy0\">:</span> DynamicObject<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">bool</span> TryInvokeMember<span class=\"br0\">(</span>InvokeMemberBinder binder, <span class=\"kw4\">object</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args, <span class=\"kw1\">out</span> <span class=\"kw4\">object</span> result<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        result <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"This is {0}.\"</span>, binder<span class=\"sy0\">.</span><span class=\"me1\">Name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">dynamic</span> ex <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        ex<span class=\"sy0\">.</span><span class=\"me1\">Foo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ex<span class=\"sy0\">.</span><span class=\"me1\">Bar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 18, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">class</span> animal <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> bark<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// concrete virtual, not pure</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">throw</span> <span class=\"st0\">\"implement me: do not know how to bark\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> elephant <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> animal <span class=\"co1\">// does not implement bark()</span><br/><span class=\"br0\">{</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  elephant e<span class=\"sy4\">;</span><br/>  e.<span class=\"me1\">bark</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  <span class=\"co1\">// throws exception</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 33, "block": "<pre class=\"text highlighted_source\">Class DynamicDispatch.Example Extends\u00a0%RegisteredObject<br/>{<br/>\u00a0<br/>Method Foo()<br/>{<br/>\tWrite \"This is foo\",\u00a0!<br/>}<br/>\u00a0<br/>Method Bar()<br/>{<br/>\tWrite \"This is bar\",\u00a0!<br/>}<br/>\u00a0<br/>Method\u00a0%DispatchMethod(Method As\u00a0%String, Args...)<br/>{<br/>\tWrite \"Tried to handle unknown method '\"_Method_\"'\"<br/>\tFor i=1:1:$Get(Args) {<br/>\t\tWrite \", \" If i=1 Write \"with arguments: \"<br/>\t\tWrite \"'\"_Args(i)_\"'\"<br/>\t}<br/>\tWrite\u00a0!<br/>}<br/>\u00a0<br/>ClassMethod Test()<br/>{<br/>\tSet obj=##class(DynamicDispatch.Example).%New()<br/>\tDo obj.Foo()<br/>\tDo obj.Bar()<br/>\tDo obj.Grill()<br/>\tDo obj.Ding(\"Dong\", 11)<br/>}<br/>\u00a0<br/>}</pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defgeneric do-something <span class=\"br0\">(</span>thing<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">documentation</span> <span class=\"st0\">\"Do something to thing.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod no-applicable-method <span class=\"br0\">(</span><span class=\"br0\">(</span>method <span class=\"br0\">(</span><span class=\"kw1\">eql</span> #'do-something<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>rest args<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"No method for ~w on ~w.\"</span> method args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod do-something <span class=\"br0\">(</span><span class=\"br0\">(</span>thing <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"Do something to ~w.\"</span> thing<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 25, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Catcher <span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"This is foo\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> bar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"This is bar\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> opDispatch<span class=\"br0\">(</span><span class=\"kw4\">string</span> name<span class=\"sy0\">,</span> ArgsTypes<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">(</span>ArgsTypes args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writef<span class=\"br0\">(</span><span class=\"st0\">\"Tried to handle unknown method '%s'\"</span><span class=\"sy0\">,</span> name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ArgsTypes.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\", with arguments: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>arg<span class=\"sy0\">;</span> args<span class=\"br0\">)</span><br/>                write<span class=\"br0\">(</span>arg<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Catcher ca<span class=\"sy0\">;</span><br/>    ca.<span class=\"me1\">foo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ca.<span class=\"me1\">bar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ca.<span class=\"me1\">grill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ca.<span class=\"me1\">ding</span><span class=\"br0\">(</span><span class=\"st0\">\"dong\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 18, "block": "<pre class=\"text highlighted_source\">}<br/>labda:<br/>\tprint \"One!\"<br/>:one<br/>\u00a0<br/>labda:<br/>\tprint \"Two!\"<br/>:two<br/>local\u00a0:obj {<br/>\u00a0<br/>labda:<br/>\tprint \"Nope, doesn't exist.\"<br/>set-default obj<br/>\u00a0<br/>obj!one<br/>obj!two<br/>obj!three<br/>\u00a0</pre>"}, {"lang": "E", "loc": 10, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> example <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"this is foo\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> bar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"this is bar\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span>verb<span class=\"sy0\">,</span> args<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`got unrecognized message $verb`</span><span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`it had arguments: $args`</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 28, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>class Example<br/>{<br/>    generic<br/>    [<br/>        console printLine($subject,\" was invoked\").<br/>    ]<br/>\u00a0<br/>    generic\u00a0: x<br/>    [<br/>        console printLine($subject,\"(\",x,\") was invoked\").<br/>    ]<br/>\u00a0<br/>    generic\u00a0: x\u00a0: y<br/>    [<br/>        console printLine($subject,\"(\",x,\",\",y,\") was invoked\").<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var o\u00a0:= Example new.<br/>\u00a0<br/>    o foo.<br/>    o bar(1).<br/>    o someMethod(1,2).<br/>].</pre>"}, {"lang": "Fancy", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class CatchThemAll {<br/>  def foo {<br/>    \"foo received\" println<br/>  }<br/>\u00a0<br/>  def bar {<br/>    \"bar received\" println<br/>  }<br/>\u00a0<br/>  def unknown_message: msg with_params: params {<br/>    \"message: \" ++ msg print<br/>    \"arguments: \" ++ (params join: \", \") println<br/>  }<br/>}<br/>\u00a0<br/>a = CatchThemAll new<br/>a foo<br/>a bar<br/>a we_can_do_it<br/>a they_can_too: \"eat\" and: \"walk\"<br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class A<br/>{<br/>  public Void doit (Int n)<br/>  {<br/>    echo (\"known function called on $n\")<br/>  }<br/>\u00a0<br/>  // override the 'trap' method, which catches dynamic invocations of methods<br/>  override Obj? trap(Str name, Obj?[]? args\u00a0:= null)<br/>  {<br/>    try <br/>    {<br/>      return super.trap(name, args)<br/>    } <br/>    catch (UnknownSlotErr err)<br/>    {<br/>      echo (\"In trap, you called: \" + name + \" with args \" + args.join(\",\"))<br/>      return null<br/>    }<br/>  }<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    a\u00a0:= A()<br/>    // note the dynamic dispatch<br/>    a-&gt;doit (1)<br/>    a-&gt;methodName (1, 2, 3)<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">include FMS-SI.f<br/>include FMS-SILib.f<br/>\u00a0<br/>var x  \\ instantiate a class var object named x<br/>x add: \\ =&gt; \"aborted: message not understood\"<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 29, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"reflect\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> example <span class=\"kw4\">struct</span><span class=\"sy1\">{}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>example<span class=\"sy1\">)</span> Foo<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">42</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// a method to call another method by name</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>e example<span class=\"sy1\">)</span> CallMethod<span class=\"sy1\">(</span>n <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> m <span class=\"sy2\">:=</span> reflect<span class=\"sy3\">.</span>ValueOf<span class=\"sy1\">(</span>e<span class=\"sy1\">)</span><span class=\"sy3\">.</span>MethodByName<span class=\"sy1\">(</span>n<span class=\"sy1\">);</span> m<span class=\"sy3\">.</span>IsValid<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// it's known.  call it.</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>Call<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">)[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Int<span class=\"sy1\">())</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// otherwise it's unknown.  handle as needed.</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Unknown method:\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> e example<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>e<span class=\"sy3\">.</span>CallMethod<span class=\"sy1\">(</span><span class=\"st0\">\"Foo\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>e<span class=\"sy3\">.</span><span class=\"me1\">CallMethod</span><span class=\"sy1\">(</span><span class=\"st0\">\"Bar\"</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 8, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> MyObject <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'Invoked foo'</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> methodMissing<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> name, args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Invoked missing method $name$args\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> DynMethod<span class=\"br0\">(</span>obj<span class=\"sy0\">,</span>meth<span class=\"sy0\">,</span>arglist<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> m<br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw4\">type</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"__\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">=</span><span class=\"st0\">\"__state\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>      <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy0\">,</span>obj<span class=\"br0\">)</span>                       <span class=\"co1\"># invalid value - not an object</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> meth <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"st0\">\"initially\"</span><span class=\"sy0\">|</span><span class=\"st0\">\"UndefinedMethod\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span>  <span class=\"co1\"># avoid protected </span><br/>\u00a0<br/>   m <span class=\"sy0\">:=</span> obj<span class=\"sy0\">.</span>__m                                          <span class=\"co1\"># get methods list</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">fieldnames</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">==</span> meth <span class=\"kw1\">then</span>                         <span class=\"co1\"># method exists?</span><br/>      <span class=\"kw1\">return</span> m<span class=\"br0\">[</span>meth<span class=\"br0\">]</span><span class=\"sy0\">!</span><span class=\"kw4\">push</span><span class=\"br0\">(</span><span class=\"kw4\">copy</span><span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><span class=\"sy0\">,</span>obj<span class=\"br0\">)</span>             <span class=\"co1\"># ... call it</span><br/>   <span class=\"kw1\">else</span> <br/>      <span class=\"kw1\">if</span> <span class=\"kw4\">fieldnames</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"UndefinedMethod\"</span> <span class=\"kw1\">then</span>         <span class=\"co1\"># handler exists?</span><br/>         <span class=\"kw1\">return</span> obj<span class=\"sy0\">.</span><span class=\"me1\">UndefinedMethod</span><span class=\"sy0\">!</span>arglist              <span class=\"co1\"># ... call it</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">207</span><span class=\"sy0\">,</span>obj<span class=\"br0\">)</span>                  <span class=\"co1\"># error invalid method (i.e. field)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 18, "block": "<pre class=\"io highlighted_source\">Example\u00a0:= <span class=\"kw3\">Object</span> <span class=\"kw2\">clone</span> <span class=\"kw2\">do</span><span class=\"br0\">(</span><br/>    foo\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>writeln<span class=\"br0\">(</span><span class=\"st0\">\"this is foo\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    bar\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>writeln<span class=\"br0\">(</span><span class=\"st0\">\"this is bar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">forward</span>\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"tried to handle unknown method \"</span>,call <span class=\"kw2\">message</span> name<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> call hasArgs,<br/>            writeln<span class=\"br0\">(</span><span class=\"st0\">\"it had arguments: \"</span>,call evalArgs<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>example\u00a0:= Example <span class=\"kw2\">clone</span><br/>\u00a0<br/>example foo          <span class=\"co1\">// prints \"this is foo\"</span><br/>example bar          <span class=\"co1\">// prints \"this is bar\"</span><br/>example grill        <span class=\"co1\">// prints \"tried to handle unknown method grill\"</span><br/>example ding<span class=\"br0\">(</span><span class=\"st0\">\"dong\"</span><span class=\"br0\">)</span> <span class=\"co1\">// prints \"tried to handle unknown method ding\"</span><br/>                     <span class=\"co1\">// prints \"it had arguments: list(\"dong\")\"</span></pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">example=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>   doSomething_z_=: assert&amp;<span class=\"nu0\">0</span> bind <span class=\"st_h\">'doSomething was not implemented'</span><br/>   doSomething__y <span class=\"st_h\">''</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>doSomething_adhoc1_=: smoutput bind <span class=\"st_h\">'hello world'</span><br/>dSomethingElse_adhoc2_=: smoutput bind <span class=\"st_h\">'hello world'</span></pre>"}, {"lang": "JavaScript", "loc": 16, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/>obj  <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Proxy<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <br/>        <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"sy0\">:</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>target<span class=\"sy0\">,</span> prop<span class=\"br0\">)</span> <br/>            <span class=\"br0\">{</span> <br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>target<span class=\"br0\">[</span>prop<span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"kw2\">undefined</span><span class=\"br0\">)</span> <br/>                    <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>                        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'an otherwise undefined function!!'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span> <br/>                    <span class=\"kw1\">return</span> target<span class=\"br0\">[</span>prop<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>obj.<span class=\"me1\">f</span><span class=\"br0\">(</span><span class=\"br0\">)</span>        <span class=\"co1\">///'an otherwise undefined function!!'</span><br/>obj.<span class=\"me1\">l</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>obj.<span class=\"me1\">l</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>       <span class=\"co1\">///45</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function add(a, b)<br/>   try<br/>       a + b<br/>   catch<br/>       println(\"caught exception\")<br/>       a * b<br/>   end<br/>end<br/>\u00a0<br/>\u00a0<br/>println(add(2, 6))<br/>println(add(1//2, 1//2))<br/>println(add(\"Hello \", \"world\"))<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Kotlin JS version 1.2.0 (Firefox 43)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> C <span class=\"br0\">{</span><br/>    <span class=\"co1\">// this method prevents a TypeError being thrown if an unknown method is called</span><br/>    fun <span class=\"sy0\">__</span>noSuchMethod<span class=\"sy0\">__</span><span class=\"br0\">(</span>id<span class=\"sy0\">:</span> String, args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Class C does not have a method called $id\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"which takes arguments: ${args.asList()}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c<span class=\"sy0\">:</span> dynamic <span class=\"sy0\">=</span> C<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">// 'dynamic' turns off compile time checks</span><br/>    c.<span class=\"me1\">foo</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// the compiler now allows this call even though foo() is undefined</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 27, "block": "<pre class=\"text highlighted_source\">define exampletype =&gt; type {<br/>\tpublic foo() =&gt; {<br/>\t\treturn 'this is foo\\r'<br/>\t}<br/>\tpublic bar() =&gt; {<br/>\t\treturn 'this is bar\\r'<br/>\t}<br/>\tpublic _unknownTag(...) =&gt; {<br/>\t\tlocal(n = method_name-&gt;asString)<br/>\t\treturn 'tried to handle unknown method called \"'+#n+'\"'+<br/>\t\t\t(#rest-&gt;size\u00a0? ' with args: \"'+#rest-&gt;join(',')+'\"')+'\\r'<br/>\t}<br/>}<br/>\u00a0<br/>local(e = exampletype)<br/>\u00a0<br/>#e-&gt;foo()<br/>// outputs 'this is foo'<br/>\u00a0<br/>#e-&gt;bar()<br/>// outputs 'this is bar'<br/>\u00a0<br/>#e-&gt;stuff()<br/>// outputs 'tried to handle unknown method called \"stuff\"'<br/>\u00a0<br/>#e-&gt;dothis('here',12,'there','nowhere')<br/>// outputs 'tried to handle unknown method called \"dothis\" with args: \"here,12,there,nowhere\"'</pre>"}, {"lang": "Logtalk", "loc": 13, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(foo).<br/>\u00a0<br/>\t<span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(try<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>\ttry <span class=\"sy2\">:-</span><br/>\t\t<span class=\"kw4\">catch</span>(bar<span class=\"sy1\">::</span>message, <span class=\"re0\">Error</span>, handler(<span class=\"re0\">Error</span>)).<br/>\u00a0<br/>\thandler(error(existence_error(predicate_declaration,message<span class=\"sy1\">/</span><span class=\"nu0\">0</span>),<span class=\"re0\">_</span>)) <span class=\"sy2\">:-</span><br/>\t\t<span class=\"co1\">% handle the unknown message</span><br/>\t\t...<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 6, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> object<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"kw3\">print</span><span class=\"sy0\">=</span><span class=\"kw3\">print</span><span class=\"br0\">}</span><br/><span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>object<span class=\"sy0\">,</span><span class=\"br0\">{</span>__index<span class=\"sy0\">=</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"You called the method\"</span><span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"kw1\">end</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>object<span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Hi\"</span><span class=\"br0\">)</span> <span class=\"co1\">--&gt;Hi</span><br/>object<span class=\"sy0\">.</span>hello<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">--&gt;You called the method hello</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">obj[foo] = \"This is foo.\";<br/>obj[bar] = \"This is bar.\";<br/>obj[f_Symbol]\u00a0:= \"What is \" &lt;&gt; SymbolName[f] &lt;&gt; \"?\";<br/>Print[<a class=\"__cf_email__\" data-cfemail=\"701f121a30161f1f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>];<br/>Print[<a class=\"__cf_email__\" data-cfemail=\"d7b8b5bd97b5b6a5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>];<br/>Print[<a class=\"__cf_email__\" data-cfemail=\"7c131e163c1e1d06\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>];</pre>"}, {"lang": "Object Pascal", "loc": 20, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">type</span><br/>  Tanimal <span class=\"sy3\">=</span> class<br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">procedure</span> bark<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> virtual<span class=\"sy1\">;</span> abstract<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">implementation</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  animal<span class=\"sy1\">:</span> Tanimal<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">initialization</span><br/>\u00a0<br/>  animal <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Tanimal<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  animal<span class=\"sy1\">.</span><span class=\"me1\">bark</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// abstract method call exception at runtime here</span><br/>  animal<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 62, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#include &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">// The methods need to be declared somewhere</span><br/><span class=\"kw1\">@interface</span> Dummy <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>grill;<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>ding<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>s;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> Example <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>foo;<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>bar;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Example<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>foo <span class=\"br0\">{</span><br/>  NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"this is foo\"</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>bar <span class=\"br0\">{</span><br/>  NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"this is bar\"</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>forwardInvocation<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSInvocation_Class/\"><span class=\"kw5\">NSInvocation</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>inv <span class=\"br0\">{</span><br/>  NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"tried to handle unknown method\u00a0%@\"</span>, NSStringFromSelector<span class=\"br0\">(</span><span class=\"br0\">[</span>inv selector<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  NSUInteger n <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>inv methodSignature<span class=\"br0\">]</span> numberOfArguments<span class=\"br0\">]</span>;<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>NSUInteger i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; n<span class=\"sy0\">-</span><span class=\"nu0\">2</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co2\">// First two arguments are the object and selector.</span><br/>    <span class=\"kw4\">id</span> __unsafe_unretained arg;          <span class=\"co2\">// We assume that all arguments are objects.</span><br/>                                         <span class=\"co2\">// getArguments: is type-agnostic and does not perform memory management,</span><br/>                                         <span class=\"co2\">//   therefore we must pass it a pointer to an unretained type</span><br/>    <span class=\"br0\">[</span>inv getArgument<span class=\"sy0\">:&amp;</span>arg atIndex<span class=\"sy0\">:</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"argument #%lu:\u00a0%@\"</span>, i, arg<span class=\"br0\">)</span>;<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">// forwardInvocation: does not work without methodSignatureForSelector:</span><br/><span class=\"co2\">// The runtime uses the signature returned here to construct the invocation.</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMethodSignature_Class/\"><span class=\"kw5\">NSMethodSignature</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>methodSignatureForSelector<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">SEL</span><span class=\"br0\">)</span>aSelector <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> numArgs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>NSStringFromSelector<span class=\"br0\">(</span>aSelector<span class=\"br0\">)</span> componentsSeparatedByString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\":\"</span><span class=\"br0\">]</span> count<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"co2\">// we assume that all arguments are objects</span><br/>  <span class=\"co2\">// The type encoding is \"<a class=\"__cf_email__\" data-cfemail=\"eb9dab\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:@@@...\", where \"v\" is the return type, void</span><br/>  <span class=\"co2\">// \"@\" is the receiver, object type; \":\" is the selector of the current method;</span><br/>  <span class=\"co2\">// and each \"@\" after corresponds to an object argument</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMethodSignature_Class/\"><span class=\"kw5\">NSMethodSignature</span></a> signatureWithObjCTypes<span class=\"sy0\">:</span><br/>          <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"304670\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:\"</span> stringByPaddingToLength<span class=\"sy0\">:</span>numArgs<span class=\"sy0\">+</span><span class=\"nu0\">3</span> withString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"@\"</span> startingAtIndex<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> UTF8String<span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw4\">id</span> example <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>Example alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"br0\">[</span>example foo<span class=\"br0\">]</span>;          <span class=\"co2\">// prints \"this is foo\"</span><br/>    <span class=\"br0\">[</span>example bar<span class=\"br0\">]</span>;          <span class=\"co2\">// prints \"this is bar\"</span><br/>    <span class=\"br0\">[</span>example grill<span class=\"br0\">]</span>;        <span class=\"co2\">// prints \"tried to handle unknown method grill\"</span><br/>    <span class=\"br0\">[</span>example ding<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"dong\"</span><span class=\"br0\">]</span>; <span class=\"co2\">// prints \"tried to handle unknown method ding:\"</span><br/>                            <span class=\"co2\">// prints \"argument #0: dong\"</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">1 first<br/>[1:interpreter] ExRuntime\u00a0: 1 does not understand method &lt;#first&gt;</pre>"}, {"lang": "ooRexx", "loc": 7, "block": "<pre class=\"oorexx highlighted_source\">u = <span class=\"sy0\">.</span>unknown~new<br/>u~foo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>::class unknown<br/>::method unknown<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw2\">name</span>, args<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"Unknown method\"</span> <span class=\"kw2\">name</span> <span class=\"st0\">\"invoked with arguments:\"</span> args~tostring<span class=\"br0\">(</span><span class=\"st0\">'l'</span>,<span class=\"st0\">', '</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oz", "loc": 23, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span> <br/>  <span class=\"kw1\">class</span> <span class=\"re2\">Example</span><br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">init</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">foo</span> <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo foo<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">bar</span> <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo bar<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">otherwise</span><span class=\"br0\">(</span>Msg<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Unknown method \"</span><span class=\"sy0\">#</span><span class=\"br0\">{</span>Label Msg<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Width Msg<span class=\"br0\">}</span> <span class=\"sy0\">&gt;</span> 0 <span class=\"kw1\">then</span><br/>           <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo <span class=\"st0\">\"Arguments: \"</span><span class=\"br0\">}</span><br/>           <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>show <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>toListInd Msg<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Object = <span class=\"br0\">{</span>New Example init<span class=\"br0\">}</span><br/> <span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Object foo<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Object bar<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Object grill<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Object ding<span class=\"br0\">(</span>dong<span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 30, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Example<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> foo <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"this is foo<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> bar <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"this is bar<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> AUTOLOAD <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$name</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Example</span><span class=\"sy0\">::</span><span class=\"me2\">AUTOLOAD</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">,</span> <span class=\"re0\">@args</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"tried to handle unknown method $name<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">@args</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"it had arguments: @args<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> DESTROY <span class=\"br0\">{</span><span class=\"br0\">}</span>          <span class=\"co1\"># dummy method to prevent AUTOLOAD from</span><br/>                        <span class=\"co1\"># being triggered when an Example is</span><br/>                        <span class=\"co1\"># destroyed</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$example</span> <span class=\"sy0\">=</span> Example<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">foo</span><span class=\"sy0\">;</span>          <span class=\"co1\"># prints \"this is foo\"</span><br/><span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">bar</span><span class=\"sy0\">;</span>          <span class=\"co1\"># prints \"this is bar\"</span><br/><span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grill</span><span class=\"sy0\">;</span>        <span class=\"co1\"># prints \"tried to handle unknown method Example::grill\"</span><br/><span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ding</span><span class=\"br0\">(</span><span class=\"st0\">\"dong\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"tried to handle unknown method Example::ding\"</span><br/>                        <span class=\"co1\"># and \"it had arguments: dong\"</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Farragut <span class=\"br0\">{</span><br/>    <span class=\"kw2\">method</span> FALLBACK <span class=\"br0\">(</span><span class=\"re0\">$name</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"re0\">@rest</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"{self.WHAT.perl}: $name.tc() the @rest[], full speed ahead!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Sparrow <span class=\"kw1\">is</span> Farragut <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/>Farragut<span class=\"sy0\">.</span><span class=\"me1\">damn</span><span class=\"sy0\">:</span> <span class=\"st_h\">'torpedoes'</span><span class=\"sy0\">;</span><br/>Sparrow<span class=\"sy0\">.</span><span class=\"me1\">hoist</span><span class=\"sy0\">:</span> <span class=\"sy0\">&lt;</span>Jolly Roger mateys<span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 30, "block": "<pre class=\"text highlighted_source\">enum METHODS<br/>\u00a0<br/>function invoke(object o, string name, sequence args={})<br/>--(this works on any class, for any function, with any number or type of parameters)<br/>    integer mdict = o[METHODS]<br/>    integer node = getd_index(name,mdict)<br/>    if node!=0 then<br/>        return call_func(getd_by_index(node,mdict),args)<br/>    end if<br/>    return \"no such method\" -- or throw(), fatal(), etc<br/>end function<br/>\u00a0<br/>--class X: Xmethods emulates a vtable<br/>constant Xmethods = new_dict()<br/>\u00a0<br/>function exists()<br/>    return \"exists\"<br/>end function<br/>\u00a0<br/>setd(\"exists\",routine_id(\"exists\"),Xmethods)<br/>\u00a0<br/>--class X: create new instances<br/>function newX()<br/>    return {Xmethods}<br/>end function<br/>\u00a0<br/>object x = newX()<br/>\u00a0<br/>?invoke(x,\"exists\")<br/>?invoke(x,\"non_existent_method\")</pre>"}, {"lang": "PHP", "loc": 23, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">class</span> Example <span class=\"br0\">{</span><br/>  <span class=\"kw2\">function</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"this is foo<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">function</span> bar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"this is bar<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">function</span> __call<span class=\"br0\">(</span><span class=\"re0\">$name</span><span class=\"sy0\">,</span> <span class=\"re0\">$args</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"tried to handle unknown method <span class=\"es4\">$name</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$args</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">echo</span> <span class=\"st0\">\"it had arguments: \"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"re0\">$args</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$example</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">foo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <span class=\"co1\">// prints \"this is foo\"</span><br/><span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">bar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <span class=\"co1\">// prints \"this is bar\"</span><br/><span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>      <span class=\"co1\">// prints \"tried to handle unknown method grill\"</span><br/><span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ding</span><span class=\"br0\">(</span><span class=\"st0\">\"dong\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"tried to handle unknown method ding\"</span><br/>                        <span class=\"co1\">// prints \"it had arguments: dong</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(redef send (Msg Obj . @)<br/>   (or<br/>      (pass try Msg Obj)<br/>      (pass 'no-applicable-method&gt; Obj Msg) ) )<br/>\u00a0<br/>(de no-applicable-method&gt; (This Msg)<br/>   (pack \"No method for \" Msg \" on \" This) )<br/>\u00a0<br/>(class +A)<br/>\u00a0<br/>(dm do-something&gt; ()<br/>   (pack \"Do something to \" This) )</pre>"}, {"lang": "Pike", "loc": 12, "block": "<pre class=\"pike highlighted_source\">class CatchAll<br/><span class=\"br0\">{</span><br/>    mixed `<span class=\"sy0\">-</span>&gt;<span class=\"br0\">(</span>string name<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span><span class=\"br0\">(</span>int arg<span class=\"br0\">)</span><span class=\"br0\">{</span> write<span class=\"br0\">(</span><span class=\"st0\">\"you are calling\u00a0%s(%d);<span class=\"es0\">\\n</span>\"</span>, name, arg<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>&gt; CatchAll<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>&gt;hello<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>you are calling hello<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>&gt; CatchAll<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>&gt;something<span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>you are calling something<span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> Example<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> foo<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"this is foo\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">def</span> bar<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"this is bar\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__getattr__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> name<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">def</span> method<span class=\"br0\">(</span>*args<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"tried to handle unknown method \"</span> + name<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> args:<br/>                <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"it had arguments: \"</span> + <span class=\"kw2\">str</span><span class=\"br0\">(</span>args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> method<br/>\u00a0<br/>example <span class=\"sy0\">=</span> Example<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>example.<span class=\"me1\">foo</span><span class=\"br0\">(</span><span class=\"br0\">)</span>        <span class=\"co1\"># prints \u201cthis is foo\u201d</span><br/>example.<span class=\"me1\">bar</span><span class=\"br0\">(</span><span class=\"br0\">)</span>        <span class=\"co1\"># prints \u201cthis is bar\u201d</span><br/>example.<span class=\"me1\">grill</span><span class=\"br0\">(</span><span class=\"br0\">)</span>      <span class=\"co1\"># prints \u201ctried to handle unknown method grill\u201d</span><br/>example.<span class=\"me1\">ding</span><span class=\"br0\">(</span><span class=\"st0\">\"dong\"</span><span class=\"br0\">)</span> <span class=\"co1\"># prints \u201ctried to handle unknown method ding\u201d</span><br/>                     <span class=\"co1\"># prints \u201cit had arguments: ('dong',)\u201d</span></pre>"}, {"lang": "Racket", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require racket/class)<br/>\u00a0<br/>(define-syntax-rule (send~ obj method x ...)<br/> \u00a0;; note: this is a naive macro, a real one should avoid evaluating `obj' and<br/> \u00a0;; the `xs' more than once<br/>  (with-handlers ([(\u03bb(e) (and (exn:fail:object? e)<br/>                             \u00a0;; only do this if there *is* an `unknown-method'<br/>                              (memq 'unknown-method (interface-&gt;method-names<br/>                                                     (object-interface o)))))<br/>                   (\u03bb(e) (send obj unknown-method 'method x ...))])<br/>    (send obj method x ...)))<br/>\u00a0<br/>(define foo%<br/>  (class object%<br/>    (define/public (foo x)<br/>      (printf \"foo: ~s\\n\" x))<br/>    (define/public (unknown-method name . xs)<br/>      (printf \"Unknown method ~s: ~s\\n\" name xs))<br/>    (super-new)))<br/>\u00a0<br/>(define o (new foo%))<br/>(send~ o foo 1)\u00a0; =&gt; foo: 1<br/>(send~ o whatever 1)\u00a0; Unknown method whatever: (1)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Example<br/>    <span class=\"kw1\">def</span> foo<br/>        <span class=\"kw3\">puts</span> <span class=\"st0\">\"this is foo\"</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">def</span> bar<br/>        <span class=\"kw3\">puts</span> <span class=\"st0\">\"this is bar\"</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">def</span> method_missing<span class=\"br0\">(</span>name, <span class=\"sy0\">*</span>args, <span class=\"sy0\">&amp;</span>block<span class=\"br0\">)</span><br/>        <span class=\"kw3\">puts</span> <span class=\"st0\">\"tried to handle unknown method\u00a0%s\"</span> <span class=\"sy0\">%</span> name <span class=\"co1\"># name is a symbol</span><br/>        <span class=\"kw1\">unless</span> args.<span class=\"me1\">empty</span>?<br/>            <span class=\"kw3\">puts</span> <span class=\"st0\">\"it had arguments:\u00a0%p\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>args<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>example = Example.<span class=\"me1\">new</span><br/>\u00a0<br/>example.<span class=\"me1\">foo</span>          <span class=\"co1\"># prints \u201cthis is foo\u201d</span><br/>example.<span class=\"me1\">bar</span>          <span class=\"co1\"># prints \u201cthis is bar\u201d</span><br/>example.<span class=\"me1\">grill</span>        <span class=\"co1\"># prints \u201ctried to handle unknown method grill\u201d</span><br/>example.<span class=\"me1\">ding</span><span class=\"br0\">(</span><span class=\"st0\">\"dong\"</span><span class=\"br0\">)</span> <span class=\"co1\"># prints \u201ctried to handle unknown method ding\u201d</span><br/>                     <span class=\"co1\"># prints \u201cit had arguments: [\"dong\"]\u201d</span></pre>"}, {"lang": "Scala", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> DynamicTest <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Dynamic<br/><span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>println<span class=\"br0\">(</span><span class=\"st0\">\"this is foo\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> bar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>println<span class=\"br0\">(</span><span class=\"st0\">\"this is bar\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> applyDynamic<span class=\"br0\">(</span>name<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Any<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"tried to handle unknown method \"</span>+name<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span><span class=\"sy0\">!</span>args.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"  it had arguments: \"</span>+args.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> DynamicTest <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> DynamicTest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    d.<span class=\"me1\">foo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    d.<span class=\"me1\">bar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    d.<span class=\"me1\">grill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    d.<span class=\"me1\">ding</span><span class=\"br0\">(</span><span class=\"st0\">\"dong\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Example <span class=\"br0\">{</span><br/>    method foo <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"this is foo\"</span><br/>    <span class=\"br0\">}</span><br/>    method bar <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"this is bar\"</span><br/>    <span class=\"br0\">}</span><br/>    method <span class=\"kw3\">AUTOLOAD</span><span class=\"br0\">(</span>_, name, <span class=\"sy0\">*</span>args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        say <span class=\"br0\">(</span><span class=\"st0\">\"tried to handle unknown method\u00a0%s\"</span> <span class=\"sy0\">%</span> name<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            say <span class=\"br0\">(</span><span class=\"st0\">\"it had arguments:\u00a0%s\"</span> <span class=\"sy0\">%</span> args.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var example = Example.<span class=\"me1\">new</span>;<br/>\u00a0<br/>example.<span class=\"me1\">foo</span>;          <span class=\"co1\"># prints \u201cthis is foo\u201d</span><br/>example.<span class=\"me1\">bar</span>;          <span class=\"co1\"># prints \u201cthis is bar\u201d</span><br/>example.<span class=\"me1\">grill</span>;        <span class=\"co1\"># prints \u201ctried to handle unknown method grill\u201d</span><br/>example.<span class=\"me1\">ding</span><span class=\"br0\">(</span><span class=\"st0\">\"dong\"</span><span class=\"br0\">)</span>; <span class=\"co1\"># prints \u201ctried to handle unknown method ding\u201d</span><br/>                      <span class=\"co1\"># prints \u201cit had arguments: dong\u201d</span></pre>"}, {"lang": "Slate", "loc": 24, "block": "<pre class=\"text highlighted_source\">define: #shell &amp;builder: [lobby newSubSpace].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"4e110e3d262b2222\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> didNotUnderstand: message at: position<br/>\"Form a command string and execute it.\"<br/>[<br/>  position &gt; 0<br/>    ifTrue: [resend]<br/>    ifFalse:<br/>      [([|\u00a0:command |<br/>\tmessage selector isUnarySelector ifTrue:<br/>\t  [command\u00a0; message selector.<br/>\t   message optionals pairsDo:<br/>\t     [|\u00a0:key\u00a0:value |<br/>\t      command\u00a0; ' -'\u00a0; (key as: String) allButFirst allButLast\u00a0; ' '\u00a0; (value as: String)]].<br/>\tmessage selector isKeywordSelector ifTrue:<br/>\t  [| keywords args |<br/>\t   keywords: ((message selector as: String) splitWith: $:).<br/>\t   command\u00a0; keywords first.<br/>\t   keywords size = 1 ifTrue: \"Read a string or array of arguments.\"<br/>\t     [args: message arguments second.<br/>\t      (args is: String) ifTrue: [command\u00a0; ' '\u00a0; args]<br/>\t\t\t\tifFalse: [args do: [|\u00a0:arg | command\u00a0; ' '\u00a0; arg]]]]] writingAs: String)<br/>\t ifNil: [resend] ifNotNilDo: [|\u00a0:cmd | [Platform run: cmd]]]<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 18, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass: <span class=\"re0\">CatchThemAll</span> <span class=\"br0\">[</span><br/>    <span class=\"re5\">foo</span> <span class=\"br0\">[</span> <span class=\"st0\">'foo received'</span> displayNl <span class=\"br0\">]</span><br/>\u00a0<br/>    bar <span class=\"br0\">[</span> <span class=\"st0\">'bar received'</span> displayNl <span class=\"br0\">]</span><br/>\u00a0<br/>    doesNotUnderstand: <span class=\"re5\">aMessage</span> <span class=\"br0\">[</span><br/>      <span class=\"br0\">(</span><span class=\"st0\">'message \"'</span> , <span class=\"br0\">(</span><span class=\"re5\">aMessage</span> selector asString<span class=\"br0\">)</span> , <span class=\"st0\">'\"'</span><span class=\"br0\">)</span> displayNl.<br/>      <span class=\"br0\">(</span><span class=\"re5\">aMessage</span> arguments<span class=\"br0\">)</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">a</span> |<br/>        <span class=\"st0\">'argument: '</span> display. <span class=\"re5\">a</span> printNl.<br/>      <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>|<span class=\"re3\">a</span>| <span class=\"re6\">a</span> <span class=\"sy0\">:=</span> <span class=\"re0\">CatchThemAll</span> new.<br/><span class=\"re5\">a</span> foo.<br/><span class=\"re5\">a</span> bar.<br/><span class=\"re5\">a</span> weCanDoIt.<br/><span class=\"re5\">a</span> theyCanToo: <span class=\"st0\">'eat'</span> and: <span class=\"st0\">'walk'</span>.</pre>"}, {"lang": "SuperCollider", "loc": 20, "block": "<pre class=\"text highlighted_source\">Ingorabilis {<br/>\u00a0<br/>\ttell {<br/>\t\t\"I told you so\".postln;<br/>\t}<br/>\u00a0<br/>\tfind {<br/>\t\t\"I found nothing\".postln<br/>\t}<br/>\u00a0<br/>\tdoesNotUnderstand { |selector ... args|<br/>\t\t\"Method selector '%' not understood by\u00a0%\\n\".postf(selector, this.class);<br/>\t\t\"Giving you some good arguments in the following\".postln;<br/>\t\targs.do { |x| x.postln };<br/>\t\t\"And now I delegate the method to my respected superclass\".postln;<br/>\t\tsuper.doesNotUnderstand(selector, args)<br/>\t}<br/>\u00a0<br/>}<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 28, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require TclOO<br/><span class=\"co1\"># First create a simple, conventional class and object</span><br/>oo::<span class=\"me1\">class</span> create Example <span class=\"br0\">{</span><br/>    <span class=\"kw1\">method</span> foo <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"this is foo\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> bar <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"this is bar\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>Example create example<br/>\u00a0<br/><span class=\"co1\"># Modify the object to have a custom \u2018unknown method\u2019 interceptor</span><br/>oo::<span class=\"me1\">objdefine</span> example <span class=\"br0\">{</span><br/>    <span class=\"kw1\">method</span> <span class=\"kw2\">unknown</span> <span class=\"br0\">{</span>name args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"tried to handle unknown method <span class=\"es0\">\\\"</span>$name<span class=\"es0\">\\\"</span>\"</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"it had arguments: $args\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Show off what we can now do...</span><br/>example foo<span class=\"sy0\">;</span>       <span class=\"co1\"># prints \u201cthis is foo\u201d</span><br/>example bar<span class=\"sy0\">;</span>       <span class=\"co1\"># prints \u201cthis is bar\u201d</span><br/>example grill<span class=\"sy0\">;</span>     <span class=\"co1\"># prints \u201ctried to handle unknown method \"grill\"\u201d</span><br/>example ding dong<span class=\"sy0\">;</span> <span class=\"co1\"># prints \u201ctried to handle unknown method \"ding\"\u201d</span><br/>                   <span class=\"co1\"># prints \u201cit had arguments: dong\u201d</span></pre>"}, {"lang": "UNIX Shell", "loc": 17, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> handle_error <span class=\"br0\">{</span><br/>  <span class=\"re2\">status</span>=<span class=\"re4\">$?</span><br/>\u00a0<br/>  <span class=\"co0\"># 127 is: command not found</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$status</span> <span class=\"re5\">-ne</span> <span class=\"nu0\">127</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">return</span><br/>  <span class=\"kw1\">fi</span><br/>\u00a0<br/>  <span class=\"re2\">lastcmd</span>=$<span class=\"br0\">(</span><span class=\"kw3\">history</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tail</span> <span class=\"re5\">-1</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st_h\">'s/^ *[0-9]* *//'</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">read</span> cmd args <span class=\"sy0\">&lt;&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es2\">$lastcmd</span>\"</span><br/>\u00a0<br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"you tried to call <span class=\"es2\">$cmd</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co0\"># Trap errors.</span><br/><span class=\"kw3\">trap</span> <span class=\"st_h\">'handle_error'</span> ERR</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">class C{ fcn __notFound(name){println(name,\" not in \",self); bar}<br/>   fcn bar{vm.arglist.println(\"***\")}<br/>}</pre>"}]}