{"task": "Maze_generation", "blocks": [{"lang": "Ada", "loc": 27, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   Height\u00a0: Positive;<br/>   Width\u00a0: Positive;<br/><span class=\"kw3\">package</span> Mazes <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Maze_Grid <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Initialize <span class=\"br0\">(</span>Maze\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Maze_Grid<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Item\u00a0: Maze_Grid<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw3\">private</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Directions <span class=\"kw1\">is</span> <span class=\"br0\">(</span>North, South, West, East<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Cell_Walls <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Directions<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>   <span class=\"kw3\">type</span> Cells <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Walls  \u00a0: Cell_Walls\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; True<span class=\"br0\">)</span>;<br/>      Visited\u00a0: Boolean   \u00a0:= False;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Height_Type <span class=\"kw1\">is</span> Positive <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Height</span>;<br/>   <span class=\"kw3\">subtype</span> Width_Type <span class=\"kw1\">is</span> Positive <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Width</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Maze_Grid <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Height_Type, Width_Type<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Cells;<br/>\u00a0<br/><span class=\"kw1\">end</span> Mazes;</pre>"}, {"lang": "Aime", "loc": 85, "block": "<pre class=\"text highlighted_source\">void<br/>grid_maze(data b, integer N)<br/>{<br/>    data d;<br/>    integer i, j;<br/>\u00a0<br/>    call_n(N, b_suffix, d, \"+---\");<br/>    b_suffix(d, \"+\\n\");<br/>\u00a0<br/>    call_n(N, b_suffix, d, \"| * \");<br/>    b_suffix(d, \"|\\n\");<br/>\u00a0<br/>    call_n(N, b_extend, b, d);<br/>\u00a0<br/>    b_size(d, N * 4 + 2);<br/>\u00a0<br/>    b_extend(b, d);<br/>}<br/>\u00a0<br/>void<br/>walk_cell(data b, integer N, integer line_size, integer x, integer y,<br/>\t  list x_offsets, list y_offsets)<br/>{<br/>    integer i, r;<br/>\u00a0<br/>    b_replace(b, y + x, ' ');<br/>\u00a0<br/>    r = drand(3);<br/>\u00a0<br/>    i = 0;<br/>    while (i &lt; 4) {<br/>\tinteger p, q;<br/>\u00a0<br/>        p = x + (p = x_offsets[(r + i) &amp; 3]);<br/>        q = y_offsets[(r + i) &amp; 3];<br/>        q += y;<br/>\u00a0<br/>\tif (-1 &lt; p &amp;&amp; p &lt; line_size<br/>\t    &amp;&amp; -1 &lt; q &amp;&amp; q &lt; line_size * (N * 2 + 1)) {<br/>\t    if (b[q + p] == '*') {<br/>\t\twalk_cell(b, N, line_size, p, q, x_offsets, y_offsets);<br/>                b[(q + y) / 2 + (p + x) / 2] = ' ';<br/>                if (p == x) {<br/>                    b[(q + y) / 2 + p - 1] = ' ';<br/>                    b[(q + y) / 2 + p + 1] = ' ';<br/>\t\t}<br/>\t    }<br/>\t}<br/>\u00a0<br/>\ti += 1;<br/>    }<br/>}<br/>\u00a0<br/>void<br/>walk_maze(data b, integer N)<br/>{<br/>    integer line_size, x, y;<br/>    list x_offsets, y_offsets;<br/>\u00a0<br/>    line_size = N * 4 + 1 + 1;<br/>\u00a0<br/>    l_bill(x_offsets, 0, 4, 0, -4, 0);<br/>    l_bill(y_offsets, 0, 0, line_size * 2, 0, line_size * -2);<br/>\u00a0<br/>    x = drand(N - 1) * 4 + 2;<br/>    y = line_size * (drand(N - 1) * 2 + 1);<br/>\u00a0<br/>    walk_cell(b, N, line_size, x, y, x_offsets, y_offsets);<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    data b;<br/>    integer N;<br/>\u00a0<br/>    N = 10;<br/>\u00a0<br/>    grid_maze(b, N);<br/>    walk_maze(b, N);<br/>\u00a0<br/>    o_(b);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "AutoHotkey", "loc": 65, "block": "<pre class=\"ahk highlighted_source\"><span class=\"co1\">; Initially build the board</span><br/>Width\t<span class=\"sy0\">:=</span> <span class=\"nu0\">11</span><br/>Height\t<span class=\"sy0\">:=</span> <span class=\"nu0\">8</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% height<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"br0\">{</span><br/>\tOuter <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% Width<br/>\t\tmaze <span class=\"sy0\">.=</span> Outer <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"st0\">\"+-\"</span>\u00a0: <span class=\"st0\">\"|0\"</span><br/>\tmaze <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>Outer <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"st0\">\"+\"</span>\u00a0: <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringTrimRight.htm\"><span class=\"kw3\">StringTrimRight</span></a><span class=\"sy0\">,</span> maze<span class=\"sy0\">,</span> maze<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"co1\">; removes trailing newline</span><br/><a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">Clipboard</span></a> <span class=\"sy0\">:=</span> Walk<span class=\"br0\">(</span>maze<span class=\"br0\">)</span><br/>\u00a0<br/>Walk<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> x<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> y<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">If</span>\u00a0!x<span class=\"br0\">{</span>\t<span class=\"co1\">; --Start at a random cell...</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> junk<span class=\"sy0\">,</span> S<span class=\"sy0\">,</span> `n<span class=\"sy0\">,,</span>UseErrorLevel <span class=\"co1\">; Calculate rows</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><span class=\"sy0\">//</span><span class=\"nu0\">2</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>S<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>         <span class=\"co1\">; Calculate height</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">; --Obtain a list of its neighbors...</span><br/>\tneighbors <span class=\"sy0\">:=</span> x <span class=\"st0\">\",\"</span> y<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"st0\">\"`n\"</span> x <span class=\"st0\">\",\"</span> y<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\"`n\"</span> x<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span> y <span class=\"st0\">\"`n\"</span> x<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span> y<br/>\t<span class=\"co1\">; --Randomize the list...</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a> neighbors<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">random</span></a><br/>\u00a0<br/>\t<span class=\"co1\">; --Then for each neighbor...</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> neighbors<span class=\"sy0\">,</span> `n<br/>\t<span class=\"br0\">{</span><br/>\t\tpC <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> x2 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> pC<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> y2 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> pC<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">; If it has not been visited...</span><br/>\t\t<span class=\"kw1\">If</span> GetChar<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>x2<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>y2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">; Mark it as visited...</span><br/>\t\t\tS <span class=\"sy0\">:=</span> ChangeChar<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>x2<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>y2<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">; Remove the wall between this cell and the neighbor...</span><br/>\t\t\tS <span class=\"sy0\">:=</span> ChangeChar<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> x<span class=\"sy0\">+</span>x2<span class=\"sy0\">,</span> y<span class=\"sy0\">+</span>y2<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">; Then recurse with the neighbor as the current cell</span><br/>\t\t\tS <span class=\"sy0\">:=</span> Walk<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> S<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Change a character in a string using x and y coordinates</span><br/>ChangeChar<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> `n<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> Y<span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> x<span class=\"br0\">)</span><br/>\t\t\t\t\tout <span class=\"sy0\">.=</span> c<br/>\t\t\t\t<span class=\"kw1\">Else</span>\tout <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\t<span class=\"kw1\">Else</span> out <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\tout <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringTrimRight.htm\"><span class=\"kw3\">StringTrimRight</span></a><span class=\"sy0\">,</span> out<span class=\"sy0\">,</span> out<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> out<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; retrieve a character in a string using x and y coordinates</span><br/>GetChar<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tx<span class=\"sy0\">*=</span>n<span class=\"sy0\">,</span> y<span class=\"sy0\">*=</span>n<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> `n<br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> Y<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 188, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/>\u00a0<br/><span class=\"co1\"># Remember: AWK is 1-based, for better or worse.</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># The maze dimensions.</span><br/>    width = <span class=\"nu0\">20</span>;  <span class=\"co1\"># Global</span><br/>    height = <span class=\"nu0\">20</span>; <span class=\"co1\"># Global</span><br/>    resetMaze<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\"># Some constants.</span><br/>    top = <span class=\"nu0\">1</span>;<br/>    bottom = <span class=\"nu0\">2</span>;<br/>    left = <span class=\"nu0\">3</span>;<br/>    right = <span class=\"nu0\">4</span>;<br/>\u00a0<br/>    <span class=\"co1\"># Randomize the PRNG.</span><br/>    randomize<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\"># Visit all the cells starting at a random point.</span><br/>    visitCell<span class=\"br0\">(</span>getRandX<span class=\"br0\">(</span><span class=\"br0\">)</span>, getRandY<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\"># Show the result.</span><br/>    printMaze<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Wander through the maze removing walls as we go.</span><br/><span class=\"kw6\">function</span> visitCell<span class=\"br0\">(</span>x, y,    dirList, dir, nx, ny, ndir, pi<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    setVisited<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;   <span class=\"co1\"># This cell has been visited.</span><br/>\u00a0<br/>    <span class=\"co1\"># Visit neighbors in a random order.</span><br/>    dirList = getRandDirList<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>dir = <span class=\"nu0\">1</span>; dir <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">4</span>; dir<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># Get coordinates of a random neighbor (next in random direction list).</span><br/>        ndir = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>dirList, dir, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>        nx = getNextX<span class=\"br0\">(</span>x, ndir<span class=\"br0\">)</span>;<br/>        ny = getNextY<span class=\"br0\">(</span>y, ndir<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"co1\"># Visit an unvisited neighbor, removing the separating walls.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>wasVisited<span class=\"br0\">(</span>nx, ny<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            rmWall<span class=\"br0\">(</span>x, y, ndir<span class=\"br0\">)</span>;<br/>            rmWall<span class=\"br0\">(</span>nx, ny, getOppositeDir<span class=\"br0\">(</span>ndir<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            visitCell<span class=\"br0\">(</span>nx, ny<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Display the text-mode maze.</span><br/><span class=\"kw6\">function</span> printMaze<span class=\"br0\">(</span>    x, y, r, w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y = <span class=\"nu0\">1</span>; y <span class=\"sy2\">&lt;=</span> height; y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>pass = <span class=\"nu0\">1</span>; pass <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">2</span>; pass<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># Go over each row twice: top, middle</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x = <span class=\"nu0\">1</span>; x <span class=\"sy2\">&lt;=</span> width; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pass <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># top</span><br/>                    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>;<br/>                    <span class=\"kw5\">printf</span><span class=\"br0\">(</span>hasWall<span class=\"br0\">(</span>x, y, top<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"---\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span>;<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">==</span> width<span class=\"br0\">)</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>;<br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pass <span class=\"sy2\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># left, right</span><br/>                    <span class=\"kw5\">printf</span><span class=\"br0\">(</span>hasWall<span class=\"br0\">(</span>x, y, left<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"|\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>                    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"   \"</span><span class=\"br0\">)</span>;<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">==</span> width<span class=\"br0\">)</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span>hasWall<span class=\"br0\">(</span>x, y, right<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"|\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw5\">print</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x = <span class=\"nu0\">1</span>; x <span class=\"sy2\">&lt;=</span> width; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"+---\"</span><span class=\"br0\">)</span>; <span class=\"co1\"># bottom row</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>; <span class=\"co1\"># bottom right corner</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Given a direction, get its opposite.</span><br/><span class=\"kw6\">function</span> getOppositeDir<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy2\">==</span> top<span class=\"br0\">)</span> <span class=\"kw6\">return</span> bottom;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy2\">==</span> bottom<span class=\"br0\">)</span> <span class=\"kw6\">return</span> top;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy2\">==</span> left<span class=\"br0\">)</span> <span class=\"kw6\">return</span> right;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy2\">==</span> right<span class=\"br0\">)</span> <span class=\"kw6\">return</span> left;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Build a list (string) of the four directions in random order.</span><br/><span class=\"kw6\">function</span> getRandDirList<span class=\"br0\">(</span>    dirList, randDir, nx, ny, idx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    dirList = <span class=\"st0\">\"\"</span>;<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>dirList<span class=\"br0\">)</span> <span class=\"sy2\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        randDir = getRandDir<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"kw4\">index</span><span class=\"br0\">(</span>dirList, randDir<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dirList = dirList randDir;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span> dirList;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Get x coordinate of the neighbor in a given a direction.</span><br/><span class=\"kw6\">function</span> getNextX<span class=\"br0\">(</span>x, dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir <span class=\"sy2\">==</span> left<span class=\"br0\">)</span> x = x <span class=\"sy3\">-</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir <span class=\"sy2\">==</span> right<span class=\"br0\">)</span> x = x <span class=\"sy3\">+</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>isGoodXY<span class=\"br0\">(</span>x, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span>; <span class=\"co1\"># Off the edge.</span><br/>    <span class=\"kw6\">return</span> x;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Get y coordinate of the neighbor in a given a direction.</span><br/><span class=\"kw6\">function</span> getNextY<span class=\"br0\">(</span>y, dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir <span class=\"sy2\">==</span> top<span class=\"br0\">)</span> y = y <span class=\"sy3\">-</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir <span class=\"sy2\">==</span> bottom<span class=\"br0\">)</span> y = y <span class=\"sy3\">+</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>isGoodXY<span class=\"br0\">(</span><span class=\"nu0\">1</span>, y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span>; <span class=\"co1\"># Off the edge.</span><br/>    <span class=\"kw6\">return</span> y;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Mark a cell as visited.</span><br/><span class=\"kw6\">function</span> setVisited<span class=\"br0\">(</span>x, y,    cell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cell = getCell<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell <span class=\"sy2\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span>;<br/>    cell = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>cell, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"st0\">\"1\"</span>; <span class=\"co1\"># walls plus visited</span><br/>    setCell<span class=\"br0\">(</span>x, y, cell<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Get the visited state of a cell.</span><br/><span class=\"kw6\">function</span> wasVisited<span class=\"br0\">(</span>x, y,    cell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cell = getCell<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell <span class=\"sy2\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">1</span>; <span class=\"co1\"># Off edges already visited.</span><br/>    <span class=\"kw6\">return</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>getCell<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Remove a cell's wall in a given direction.</span><br/><span class=\"kw6\">function</span> rmWall<span class=\"br0\">(</span>x, y, d,    i, oldCell, newCell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    oldCell = getCell<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>oldCell <span class=\"sy2\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span>;<br/>    newCell = <span class=\"st0\">\"\"</span>;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">4</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># Ugly as concat of two substrings and a constant?.</span><br/>        newCell = newCell <span class=\"br0\">(</span>i <span class=\"sy2\">==</span> d <span class=\"sy5\">?</span> <span class=\"st0\">\"0\"</span> <span class=\"sy5\">:</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>oldCell, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>    newCell = newCell wasVisited<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;<br/>    setCell<span class=\"br0\">(</span>x, y, newCell<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Determine if a cell has a wall in a given direction.</span><br/><span class=\"kw6\">function</span> hasWall<span class=\"br0\">(</span>x, y, d,    cell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cell = getCell<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell <span class=\"sy2\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">1</span>; <span class=\"co1\"># Cells off edge always have all walls.</span><br/>    <span class=\"kw6\">return</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>getCell<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>, d, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Plunk a cell into the maze.</span><br/><span class=\"kw6\">function</span> setCell<span class=\"br0\">(</span>x, y, cell,    idx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>isGoodXY<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span>;<br/>    maze<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> = cell<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Get a cell from the maze.</span><br/><span class=\"kw6\">function</span> getCell<span class=\"br0\">(</span>x, y,    idx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>isGoodXY<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span>; <span class=\"co1\"># Bad cell marker.</span><br/>    <span class=\"kw6\">return</span> maze<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Are the given coordinates in the maze?</span><br/><span class=\"kw6\">function</span> isGoodXY<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy1\">||</span> x <span class=\"sy2\">&gt;</span> width<span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy2\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy1\">||</span> y <span class=\"sy2\">&gt;</span> height<span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw6\">return</span> <span class=\"nu0\">1</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Build the empty maze.</span><br/><span class=\"kw6\">function</span> resetMaze<span class=\"br0\">(</span>    x, y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    delete maze;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y = <span class=\"nu0\">1</span>; y <span class=\"sy2\">&lt;=</span> height; y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x = <span class=\"nu0\">1</span>; x <span class=\"sy2\">&lt;=</span> width; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            maze<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> = <span class=\"st0\">\"11110\"</span>; <span class=\"co1\"># walls (up, down, left, right) and visited state.</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Random things properly scaled.</span><br/>\u00a0<br/><span class=\"kw6\">function</span> getRandX<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw6\">return</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> width<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> getRandY<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw6\">return</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> height<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> getRandDir<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw6\">return</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> randomize<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"echo $RANDOM\"</span> | <span class=\"kw5\">getline</span> t;<br/>    <span class=\"kw4\">srand</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 95, "block": "<pre class=\"dos highlighted_source\">:<span class=\"re0\">amaze</span> Rows Cols [wall char]<br/><span class=\"co2\">:: A stack-less, iterative, depth-first maze generator in native WinNT batch.</span><br/><span class=\"co2\">:: Rows and Cols must each be &gt;1 and Rows*Cols cannot exceed 2096.</span><br/><span class=\"co2\">:: Default wall character is #, [wall char] is used if provided.</span><br/>\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">ECHO</span></a> OFF<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">SETLOCAL</span></a> EnableDelayedExpansion<br/><span class=\"co2\"><br/>:: check for valid input, else GOTO\u00a0:help</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> /I \"<span class=\"sy0\">%</span><span class=\"re3\">~2</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">GOTO</span></a>\u00a0:<span class=\"re0\">amaze_help</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> /F \"tokens=* delims=0123456789\" <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(</span>\"<span class=\"sy0\">%</span><span class=\"re3\">~1</span><span class=\"sy0\">%</span>~2\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">%</span><span class=\"sy0\">%</span>~A\" <a href=\"http://www.ss64.com/nt/neq.html\"><span class=\"kw2\">NEQ</span></a> \"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">GOTO</span></a>\u00a0:<span class=\"re0\">amaze_help</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A \"rows=<span class=\"sy0\">%</span><span class=\"re3\">~1</span>, cols=<span class=\"sy0\">%</span><span class=\"re3\">~2</span>, mTmp=rows*cols\"<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">!</span><span class=\"re2\">rows</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">LSS</span></a> 2    <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">GOTO</span></a>\u00a0:<span class=\"re0\">amaze_help</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">!</span><span class=\"re2\">cols</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">LSS</span></a> 2    <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">GOTO</span></a>\u00a0:<span class=\"re0\">amaze_help</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">!</span><span class=\"re2\">mTmp</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/gtr.html\"><span class=\"kw2\">GTR</span></a> 2096 <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">GOTO</span></a>\u00a0:<span class=\"re0\">amaze_help</span><br/><span class=\"co2\"><br/>:: set map characters and use 1st character of\u00a0%3 for wall, if defined</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"wall=#\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"hall= \"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"crumb=.\"<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">~3</span>\" <a href=\"http://www.ss64.com/nt/neq.html\"><span class=\"kw2\">NEQ</span></a> \"\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"wall=<span class=\"sy0\">%</span><span class=\"re3\">~3</span>\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"wall=<span class=\"sy0\">!</span><span class=\"re2\">wall:~0,1</span><span class=\"sy0\">!</span>\"<br/><span class=\"co2\"><br/>:: assign width, height, cursor position, loop count, and offsets for NSEW</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A \"cnt=0, wide=cols*2-1, high=rows*2-1, size=wide*high, N=wide*-2, S=wide*2, E=2, W=-2\"<br/><span class=\"co2\"><br/>:: different random entrance points</span><br/><span class=\"co2\">:: ...on top</span><br/><span class=\"co2\">:: SET /A \"start=(!RANDOM!\u00a0%% cols)*2\"</span><br/><span class=\"co2\">:: ...on bottom</span><br/><span class=\"co2\">:: SET /A \"start=size-(!RANDOM!\u00a0%% cols)*2-1\"</span><br/><span class=\"co2\">:: ...on top or bottom</span><br/><span class=\"co2\">:: SET /A ch=cols*2, ch=!RANDOM!\u00a0%% ch</span><br/><span class=\"co2\">:: IF\u00a0!ch! GEQ\u00a0!cols! ( SET /A \"start=size-(ch-cols)*2-1\"</span><br/><span class=\"co2\">:: ) ELSE SET /A start=ch*2</span><br/><span class=\"co2\">:: random entrance inside maze</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A \"start=<span class=\"sy0\">(!</span><span class=\"re2\">RANDOM</span><span class=\"sy0\">!</span><span class=\"re2\">\u00a0%% cols*2)+(</span><span class=\"sy0\">!</span><span class=\"re2\">RANDOM</span><span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> rows*2<span class=\"sy0\">)</span>*wide\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A \"curPos=start, cTmp=curPos+1, loops=cols*rows*2+1\"<br/><span class=\"co2\"><br/>:: fill the maze with 8186 wall characters, clip to size, and open 1st cell</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"mz=<span class=\"sy0\">!</span><span class=\"re2\">wall</span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(</span>1,1,6<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> mz=<span class=\"sy0\">!</span><span class=\"re2\">mz</span><span class=\"sy0\">!!</span><span class=\"re2\">mz</span><span class=\"sy0\">!!</span><span class=\"re2\">mz</span><span class=\"sy0\">!!</span><span class=\"re2\">mz</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> bdr=<span class=\"sy0\">!</span><span class=\"re2\">mz:~-%<span class=\"re3\">wide</span>%</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> mz=<span class=\"sy0\">!</span><span class=\"re2\">mz:~3</span><span class=\"sy0\">!!</span><span class=\"re2\">mz:~3</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> mz=<span class=\"sy0\">!</span><span class=\"re2\">mz:~-%<span class=\"re3\">size</span>%</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> mz=<span class=\"sy0\">!</span><span class=\"re2\">mz:~0,%<span class=\"re3\">curPos</span>%</span><span class=\"sy0\">!!</span><span class=\"re2\">hall</span><span class=\"sy0\">!!</span><span class=\"re2\">mz:~%<span class=\"re3\">cTmp</span>%</span><span class=\"sy0\">!</span><br/><span class=\"co2\"><br/>:: iterate #cells*2+1 steps of random depth-first search</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> /L <span class=\"sy0\">%</span><span class=\"sy0\">%@</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">loops</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"rand=\" <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"crmPos=\"<br/><span class=\"co1\">\tREM set values for NSEW cell and wall positions</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A \"rCnt=rTmp=0, cTmp=curPos+1, np=curPos+N, sp=curPos+S, ep=curPos+E, wp=curPos+W, wChk=curPos/wide*wide, eChk=wChk+wide, nw=curPos-wide, sw=curPos+wide, ew=curPos+1, ww=curPos-1\"<br/><span class=\"co1\">\tREM examine adjacent cells, build direction list, and find last crumb position</span><br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> /F \"tokens=1-8\" <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(</span>\"<span class=\"sy0\">!</span><span class=\"re2\">np</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">sp</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">ep</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">wp</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">nw</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">sw</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">ew</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">ww</span><span class=\"sy0\">!</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">!</span><span class=\"re2\">np</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/geq.html\"><span class=\"kw2\">GEQ</span></a> 0 <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">mz:~%%<span class=\"re3\">A</span>,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">wall</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A rCnt+=1 <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"rand=n <span class=\"sy0\">!</span><span class=\"re2\">rand</span><span class=\"sy0\">!</span>\"<br/>\t\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">ELSE</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">mz:~%%<span class=\"re3\">E</span>,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">crumb</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A crmPos=np, cw=nw<br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">!</span><span class=\"re2\">sp</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/leq.html\"><span class=\"kw2\">LEQ</span></a> <span class=\"sy0\">!</span><span class=\"re2\">size</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">mz:~%%<span class=\"re3\">B</span>,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">wall</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A rCnt+=1 <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"rand=s <span class=\"sy0\">!</span><span class=\"re2\">rand</span><span class=\"sy0\">!</span>\"<br/>\t\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">ELSE</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">mz:~%%<span class=\"re3\">F</span>,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">crumb</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A crmPos=sp, cw=sw<br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">!</span><span class=\"re2\">ep</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/leq.html\"><span class=\"kw2\">LEQ</span></a> <span class=\"sy0\">!</span><span class=\"re2\">eChk</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">mz:~%%<span class=\"re3\">C</span>,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">wall</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A rCnt+=1 <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"rand=e <span class=\"sy0\">!</span><span class=\"re2\">rand</span><span class=\"sy0\">!</span>\"<br/>\t\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">ELSE</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">mz:~%%<span class=\"re3\">G</span>,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">crumb</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A crmPos=ep, cw=ew<br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">!</span><span class=\"re2\">wp</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/geq.html\"><span class=\"kw2\">GEQ</span></a> <span class=\"sy0\">!</span><span class=\"re2\">wChk</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">mz:~%%<span class=\"re3\">D</span>,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">wall</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A rCnt+=1 <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"rand=w <span class=\"sy0\">!</span><span class=\"re2\">rand</span><span class=\"sy0\">!</span>\"<br/>\t\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">ELSE</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">mz:~%%<span class=\"re3\">H</span>,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">crumb</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A crmPos=wp, cw=ww<br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <a href=\"http://www.ss64.com/nt/defined.html\"><span class=\"kw2\">DEFINED</span></a> rand <span class=\"sy0\">(</span> REM adjacent unvisited cell is available<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A rCnt=<span class=\"sy0\">!</span><span class=\"re2\">RANDOM</span><span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> rCnt<br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">rand</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <span class=\"sy0\">(</span> REM pick random cell + wall<br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">!</span><span class=\"re2\">rTmp</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> <span class=\"sy0\">!</span><span class=\"re2\">rCnt</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A \"curPos=<span class=\"sy0\">!</span><span class=\"re2\">%%<span class=\"re3\">Ap</span><span class=\"sy0\">!</span><span class=\"re2\">, cTmp=curPos+1, mw=</span><span class=\"sy0\">!</span>%%Aw</span><span class=\"sy0\">!</span>, mTmp=mw+1\"<br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A rTmp+=1<br/>\t\t<span class=\"sy0\">)</span><br/><span class=\"co1\">\t\tREM write the 2 new characters into the maze</span><br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> /F \"tokens=1-4\" <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(</span>\"<span class=\"sy0\">!</span><span class=\"re2\">mw</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">mTmp</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">curPos</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">cTmp</span><span class=\"sy0\">!</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"mz=<span class=\"sy0\">!</span><span class=\"re2\">mz:~0,%%<span class=\"re3\">A</span></span><span class=\"sy0\">!!</span><span class=\"re2\">crumb</span><span class=\"sy0\">!!</span><span class=\"re2\">mz:~%%<span class=\"re3\">B</span></span><span class=\"sy0\">!</span>\"<br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"mz=<span class=\"sy0\">!</span><span class=\"re2\">mz:~0,%%<span class=\"re3\">C</span></span><span class=\"sy0\">!!</span><span class=\"re2\">hall</span><span class=\"sy0\">!!</span><span class=\"re2\">mz:~%%<span class=\"re3\">D</span></span><span class=\"sy0\">!</span>\"<br/>\t\t<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">ELSE</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <a href=\"http://www.ss64.com/nt/defined.html\"><span class=\"kw2\">DEFINED</span></a> crmPos <span class=\"sy0\">(</span> REM follow the crumbs backward<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A mTmp=cw+1<br/><span class=\"co1\">\t\tREM erase the crumb character and set new cursor position</span><br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> /F \"tokens=1-2\" <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(</span>\"<span class=\"sy0\">!</span><span class=\"re2\">cw</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">mTmp</span><span class=\"sy0\">!</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"mz=<span class=\"sy0\">!</span><span class=\"re2\">mz:~0,%%<span class=\"re3\">A</span></span><span class=\"sy0\">!!</span><span class=\"re2\">hall</span><span class=\"sy0\">!!</span><span class=\"re2\">mz:~%%<span class=\"re3\">B</span></span><span class=\"sy0\">!</span>\"<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> \"curPos=<span class=\"sy0\">!</span><span class=\"re2\">crmPos</span><span class=\"sy0\">!</span>\"<br/>\t<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /A open=cols/2*2, mTmp=open+1<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">ECHO</span></a> <span class=\"sy0\">!</span><span class=\"re2\">wall</span><span class=\"sy0\">!!</span><span class=\"re2\">bdr:~0,%<span class=\"re3\">open</span>%</span><span class=\"sy0\">!!</span><span class=\"re2\">hall</span><span class=\"sy0\">!!</span><span class=\"re2\">bdr:~%<span class=\"re3\">mTmp</span>%</span><span class=\"sy0\">!!</span><span class=\"re2\">wall</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(</span>0,<span class=\"sy0\">!</span><span class=\"re2\">wide</span><span class=\"sy0\">!</span><span class=\"re2\">,</span><span class=\"sy0\">!</span><span class=\"re2\">size</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">IF</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">LSS</span></a> <span class=\"sy0\">!</span><span class=\"re2\">size</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">ECHO</span></a> <span class=\"sy0\">!</span><span class=\"re2\">wall</span><span class=\"sy0\">!!</span><span class=\"re2\">mz:~%%<span class=\"re3\">A</span>,<span class=\"sy0\">%</span><span class=\"re3\">wide</span>%</span><span class=\"sy0\">!!</span><span class=\"re2\">wall</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">ECHO</span></a> <span class=\"sy0\">!</span><span class=\"re2\">wall</span><span class=\"sy0\">!!</span><span class=\"re2\">bdr:~0,%<span class=\"re3\">open</span>%</span><span class=\"sy0\">!!</span><span class=\"re2\">hall</span><span class=\"sy0\">!!</span><span class=\"re2\">bdr:~%<span class=\"re3\">mTmp</span>%</span><span class=\"sy0\">!!</span><span class=\"re2\">wall</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">ENDLOCAL</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">EXIT</span></a> /B 0<br/>\u00a0<br/>:<span class=\"re0\">amaze_help</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">ECHO</span></a> Usage:   <span class=\"sy0\">%</span><span class=\"re3\">~0</span> Rows Cols [wall char]<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">ECHO</span></a>          Rows<span class=\"co3\">^&gt;</span>1, Cols<span class=\"co3\">^&gt;</span>1, and Rows*Cols<span class=\"co3\">^&lt;</span>=2096<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">ECHO</span></a> Example: <span class=\"sy0\">%</span><span class=\"re3\">~0</span> 11 39 <span class=\"sy0\">@</span><br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">ENDLOCAL</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">EXIT</span></a> /B 0<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 68, "block": "<pre class=\"text highlighted_source\">OPTION BASE 0<br/>RANDOMIZE TIMER<br/>\u00a0<br/>REM must be even<br/>width% = 40<br/>height% = 20<br/>\u00a0<br/>REM make array and fill<br/>DIM maze$(width%, height%)<br/>FOR x% = 0 TO width%<br/>    FOR y% = 0 TO height%<br/>        maze$(x%, y%) = \"#\"<br/>    NEXT y%<br/>NEXT x%<br/>\u00a0<br/>REM initial start location<br/>currentx% = INT(RND * (width% - 1))<br/>currenty% = INT(RND * (height% - 1))<br/>REM value must be odd<br/>IF currentx% MOD 2 = 0 THEN currentx% = currentx% + 1<br/>IF currenty% MOD 2 = 0 THEN currenty% = currenty% + 1<br/>maze$(currentx%, currenty%) = \" \"<br/>\u00a0<br/>REM generate maze<br/>done% = 0<br/>DO WHILE done% = 0<br/>    FOR i% = 0 TO 99<br/>        oldx% = currentx%<br/>        oldy% = currenty%<br/>\u00a0<br/>        REM move in random direction<br/>        SELECT CASE INT(RND * 4)<br/>            CASE 0<br/>                IF currentx% + 2 &lt; width% THEN currentx% = currentx% + 2<br/>            CASE 1<br/>                IF currenty% + 2 &lt; height% THEN currenty% = currenty% + 2<br/>            CASE 2<br/>                IF currentx% - 2 &gt; 0 THEN currentx% = currentx% - 2<br/>            CASE 3<br/>                IF currenty% - 2 &gt; 0 THEN currenty% = currenty% - 2<br/>        END SELECT<br/>\u00a0<br/>        REM if cell is unvisited then connect it<br/>        IF maze$(currentx%, currenty%) = \"#\" THEN<br/>            maze$(currentx%, currenty%) = \" \"<br/>            maze$(INT((currentx% + oldx%) / 2), ((currenty% + oldy%) / 2)) = \" \"<br/>        END IF<br/>    NEXT i%<br/>\u00a0<br/>    REM check if all cells are visited<br/>    done% = 1<br/>    FOR x% = 1 TO width% - 1 STEP 2<br/>        FOR y% = 1 TO height% - 1 STEP 2<br/>            IF maze$(x%, y%) = \"#\" THEN done% = 0<br/>        NEXT y%<br/>    NEXT x%<br/>LOOP<br/>\u00a0<br/>REM draw maze<br/>FOR y% = 0 TO height%<br/>    FOR x% = 0 TO width%<br/>        PRINT maze$(x%, y%);<br/>    NEXT x%<br/>    PRINT<br/>NEXT y%<br/>\u00a0<br/>REM wait<br/>DO: LOOP WHILE INKEY$ = \"\"</pre>"}, {"lang": "BBC BASIC", "loc": 42, "block": "<pre class=\"text highlighted_source\">      MazeWidth% = 11<br/>      MazeHeight% = 9<br/>      MazeCell% = 50<br/>\u00a0<br/>      VDU 23,22,MazeWidth%*MazeCell%/2+3;MazeHeight%*MazeCell%/2+3;8,16,16,128<br/>      VDU 23,23,3;0;0;0;\u00a0: REM Line thickness<br/>      PROCgeneratemaze(Maze&amp;(), MazeWidth%, MazeHeight%, MazeCell%)<br/>      END<br/>\u00a0<br/>      DEF PROCgeneratemaze(RETURN m&amp;(), w%, h%, s%)<br/>      LOCAL x%, y%<br/>      DIM m&amp;(w%, h%)<br/>      FOR y% = 0 TO h%<br/>        LINE 0,y%*s%,w%*s%,y%*s%<br/>      NEXT<br/>      FOR x% = 0 TO w%<br/>        LINE x%*s%,0,x%*s%,h%*s%<br/>      NEXT<br/>      GCOL 15<br/>      PROCcell(m&amp;(), RND(w%)-1, y% = RND(h%)-1, w%, h%, s%)<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCcell(m&amp;(), x%, y%, w%, h%, s%)<br/>      LOCAL i%, p%, q%, r%<br/>      m&amp;(x%,y%) OR= &amp;40\u00a0: REM Mark visited<br/>      r% = RND(4)<br/>      FOR i% = r% TO r%+3<br/>        CASE i% MOD 4 OF<br/>          WHEN 0: p% = x%-1\u00a0: q% = y%<br/>          WHEN 1: p% = x%+1\u00a0: q% = y%<br/>          WHEN 2: p% = x%\u00a0: q% = y%-1<br/>          WHEN 3: p% = x%\u00a0: q% = y%+1<br/>        ENDCASE<br/>        IF p% &gt;= 0 IF p% &lt; w% IF q% &gt;= 0 IF q% &lt; h% IF m&amp;(p%,q%) &lt; &amp;40 THEN<br/>          IF p% &gt; x% m&amp;(p%,q%) OR= 1\u00a0: LINE p%*s%,y%*s%+4,p%*s%,(y%+1)*s%-4<br/>          IF q% &gt; y% m&amp;(p%,q%) OR= 2\u00a0: LINE x%*s%+4,q%*s%,(x%+1)*s%-4,q%*s%<br/>          IF x% &gt; p% m&amp;(x%,y%) OR= 1\u00a0: LINE x%*s%,y%*s%+4,x%*s%,(y%+1)*s%-4<br/>          IF y% &gt; q% m&amp;(x%,y%) OR= 2\u00a0: LINE x%*s%+4,y%*s%,(x%+1)*s%-4,y%*s%<br/>          PROCcell(m&amp;(), p%, q%, w%, h%, s%)<br/>        ENDIF<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "Befunge", "loc": 7, "block": "<pre class=\"text highlighted_source\">45*28*10p00p020p030p006p0&gt;20g30g00g*+::\"P\"%\\\"P\"/6+gv&gt;$\\<a class=\"__cf_email__\" data-cfemail=\"d4e5a294a2e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>::\\+g02+*g00+g03-\\&lt;<br/>0_ 1!%4+1\\-\\0!::\\-\\2%2:p&lt;pv0&lt;&lt; v0p+6/\"P\"\\%\"P\":\\+4%4&lt;^&lt;v-&lt;$&gt;+2%\\1-*20g+\\1+4%::v^<br/>#| +2%\\1-*30g+\\1\\40g1-:v0+v2?1#&lt;v&gt;+:00g%!55+*&gt;:#0&gt;#,_^&gt;:!|&gt;\\#%\"P\"v#:*+*g00g0&lt;&gt;1<br/>02!:++`\\0\\`-1g01:\\+`\\&lt;\u00a0!46v3&lt;^$$&lt;^1,g2+1%2/2,g1+1&lt;v%g00:\\&lt;*g01,&lt;&gt;:30p\\:20p:v^3g<br/>0#$g#&lt;1#&lt;-#&lt;`#&lt;\\#&lt;0#&lt;^#_^/&gt;#1+#4&lt;&gt;\"P\"%\\\"P\"/6+g:2%^!&gt;,1-:#v_$55+^|$$ \"JH\" $$&gt;#&lt;0<br/>::\"P\"%\\\"P\"/6+g40p\\40g+\\:#^\"P\"%#\\&lt;^\u00a0::$_,#!0#:&lt;*\"|\"&lt;^,\" _\"&lt;:g000 &lt;&gt; /6+g4/2%+#^_<br/>\u00a0</pre>"}, {"lang": "C", "loc": 146, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;locale.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define DOUBLE_SPACE 1</span><br/>\u00a0<br/><span class=\"co2\">#if DOUBLE_SPACE</span><br/><span class=\"co2\">#\tdefine SPC \"\u3000\"</span><br/><span class=\"co2\">#else</span><br/><span class=\"co2\">#\tdefine SPC \" \"</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"kw4\">wchar_t</span> glyph<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> L<span class=\"st0\">\"\"</span>SPC<span class=\"st0\">\"\u2502\u2502\u2502\u2500\u2518\u2510\u2524\u2500\u2514\u250c\u251c\u2500\u2534\u252c\u253c\"</span>SPC<span class=\"st0\">\"\u2506\u2506\u2506\u2504\u256f\u256e \u2504\u2570\u256d \u2504\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> byte<span class=\"sy0\">;</span><br/><span class=\"kw2\">enum</span> <span class=\"br0\">{</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> S <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> W <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> E <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> V <span class=\"sy0\">=</span> <span class=\"nu0\">16</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>byte <span class=\"sy0\">**</span>cell<span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> avail<span class=\"sy0\">;</span><br/><span class=\"co2\">#define each(i, x, y) for (i = x; i &lt;= y; i++)</span><br/>\u00a0<br/><span class=\"kw4\">int</span> irand<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> r<span class=\"sy0\">,</span> rmax <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> rmax<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r <span class=\"sy0\">/</span> <span class=\"br0\">(</span>RAND_MAX<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> c<span class=\"sy0\">;</span><br/>\teach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\teach<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tc <span class=\"sy0\">=</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> V<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[31m\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lc\"</span><span class=\"sy0\">,</span> glyph<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> V<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[m\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> max<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy0\">&gt;=</span> b <span class=\"sy0\">?</span> a <span class=\"sy0\">:</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> min<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> b <span class=\"sy0\">&gt;=</span> a <span class=\"sy0\">?</span> a <span class=\"sy0\">:</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> dirs<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> walk<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> d<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tcell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> V<span class=\"sy0\">;</span><br/>\tavail<span class=\"sy0\">--;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> x1<span class=\"sy0\">;</span> x1<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>y1 <span class=\"sy0\">=</span> irand<span class=\"br0\">(</span>x1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ti <span class=\"sy0\">=</span> d<span class=\"br0\">[</span>x1<span class=\"br0\">]</span><span class=\"sy0\">,</span> d<span class=\"br0\">[</span>x1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<span class=\"br0\">[</span>y1<span class=\"br0\">]</span><span class=\"sy0\">,</span> d<span class=\"br0\">[</span>y1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> avail <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tx1 <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> dirs<span class=\"br0\">[</span> d<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> y1 <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> dirs<span class=\"br0\">[</span> d<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell<span class=\"br0\">[</span>y1<span class=\"br0\">]</span><span class=\"br0\">[</span>x1<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> V<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* break walls */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">==</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> y1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\tcell<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~W<span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~<span class=\"br0\">(</span>E<span class=\"sy0\">|</span>W<span class=\"br0\">)</span><span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~E<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y1 <span class=\"sy0\">==</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> x1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\tcell<span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~S<span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~<span class=\"br0\">(</span>N<span class=\"sy0\">|</span>S<span class=\"br0\">)</span><span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~N<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\twalk<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> tox<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> toy<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">;</span><br/>\u00a0<br/>\tcell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> V<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> tox <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">==</span> toy<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\teach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tx1 <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> y1 <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell<span class=\"br0\">[</span>y1<span class=\"br0\">]</span><span class=\"br0\">[</span>x1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* mark path */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">==</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> y1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>solve<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> tox<span class=\"sy0\">,</span> toy<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tcell<span class=\"br0\">[</span>t<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> S<span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> V<span class=\"sy0\">|</span>N<span class=\"sy0\">|</span>S<span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> N<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y1 <span class=\"sy0\">==</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> x1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>solve<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> tox<span class=\"sy0\">,</span> toy<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tcell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">|=</span> E<span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> V<span class=\"sy0\">|</span>E<span class=\"sy0\">|</span>W<span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">|=</span> W<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* backtrack */</span><br/>\tcell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~V<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> make_maze<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> h2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> h <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> w2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> w <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\tbyte <span class=\"sy0\">**</span>p<span class=\"sy0\">;</span><br/>\u00a0<br/>\tp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>byte<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>h2 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> w2 <span class=\"sy0\">*</span> h2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>byte<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span>p <span class=\"sy0\">+</span> h2 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\teach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> h2<span class=\"br0\">)</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> w2<span class=\"sy0\">;</span><br/>\tp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>h2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tcell <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\teach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> h <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>w2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> V<span class=\"sy0\">;</span><br/>\teach<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> w<span class=\"br0\">)</span> cell<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cell<span class=\"br0\">[</span>h2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> V<span class=\"sy0\">;</span><br/>\teach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> h<span class=\"br0\">)</span> each<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> w<span class=\"br0\">)</span> cell<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> E<span class=\"sy0\">|</span>W<span class=\"sy0\">;</span><br/>\teach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> h<span class=\"br0\">)</span> each<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> w<span class=\"br0\">)</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>j<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> N<span class=\"sy0\">|</span>S<span class=\"sy0\">;</span><br/>\teach<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> w<span class=\"br0\">)</span> cell<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~N<span class=\"sy0\">,</span> cell<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>h<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~S<span class=\"sy0\">;</span><br/>\teach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> h<span class=\"br0\">)</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~W<span class=\"sy0\">,</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>w<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~E<span class=\"sy0\">;</span><br/>\u00a0<br/>\tavail <span class=\"sy0\">=</span> w <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span><br/>\twalk<span class=\"br0\">(</span>irand<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> irand<span class=\"br0\">(</span>h<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* reset visited marker (it's also used by path finder) */</span><br/>\teach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> h<span class=\"br0\">)</span> each<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> w<span class=\"br0\">)</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> ~V<span class=\"sy0\">;</span><br/>\tsolve<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> w <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> h <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tshow<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/setlocale.html\"><span class=\"kw3\">setlocale</span></a><span class=\"br0\">(</span>LC_ALL<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>w <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> w <span class=\"sy0\">=</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>h <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> h <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmake_maze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 271, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">512</span>, CELL_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">enum</span> directions <span class=\"br0\">{</span> NONE, NOR <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, EAS <span class=\"sy1\">=</span> <span class=\"nu0\">2</span>, SOU <span class=\"sy1\">=</span> <span class=\"nu0\">4</span>, WES <span class=\"sy1\">=</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> myBitmap<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tDeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPINFO\tbi<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>\t   <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>\t   <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>\t   <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>\tHDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\thdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\twidth <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tZeroMemory<span class=\"br0\">(</span> pBits, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD clr <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, <span class=\"nu0\">1</span>, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> string path <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>\tBITMAPINFO\t infoheader<span class=\"sy4\">;</span><br/>\tBITMAP\t\t bitmap<span class=\"sy4\">;</span><br/>\tDWORD\t\t wb<span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tDWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tHANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tCloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span><br/>    HDC\t    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>    <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>\t    width, height<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> mazeGenerator<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    mazeGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_world <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <br/>\t_bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\t_bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    ~mazeGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> killArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> side <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_s <span class=\"sy1\">=</span> side<span class=\"sy4\">;</span><br/>\tgenerate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tdisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> generate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tkillArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_world <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> BYTE<span class=\"br0\">[</span>_s <span class=\"sy2\">*</span> _s<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> _world, _s <span class=\"sy2\">*</span> _s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_ptX <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> _s<span class=\"sy4\">;</span> _ptY <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> _s<span class=\"sy4\">;</span><br/>\tcarve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> carve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&lt;</span> NOR <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t        <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span><br/>\t            _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> NOR<span class=\"sy4\">;</span> _ptY<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> SOU <span class=\"sy3\">|</span> SOU <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t        <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> EAS<span class=\"sy4\">;</span> _ptX<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> WES <span class=\"sy3\">|</span> WES <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> SOU<span class=\"sy4\">;</span> _ptY<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> NOR <span class=\"sy3\">|</span> NOR <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> WES<span class=\"sy4\">;</span> _ptX<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> EAS <span class=\"sy3\">|</span> EAS <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_bmp.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tHDC dc <span class=\"sy1\">=</span> _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> _s<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tBYTE b <span class=\"sy1\">=</span> _world<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> yy<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw4\">int</span> nx <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> CELL_SIZE, <br/>\t\t    ny <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> NOR <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, ny <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> EAS <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> SOU <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">+</span> CELL_SIZE, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> WES <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//_bmp.saveBitmap( \"f:\\\\rc\\\\maze.bmp\" );</span><br/>\tBitBlt<span class=\"br0\">(</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">60</span>, BMP_SIZE, BMP_SIZE, _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, SRCCOPY <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testDir<span class=\"br0\">(</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> d<span class=\"sy4\">;</span><br/>\t\td <span class=\"sy1\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    d <span class=\"sy1\">=</span> <span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>d <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> _ptY<span class=\"sy2\">--</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> _ptX<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> _ptY<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> _ptX<span class=\"sy2\">--</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>            d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> testDir<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptX <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptX <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> killArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> _world <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> _world<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    BYTE<span class=\"sy2\">*</span>    _world<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>      _s, _ptX, _ptY<span class=\"sy4\">;</span><br/>    myBitmap _bmp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ShowWindow<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, SW_MAXIMIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    mazeGenerator mg<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> s<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter the maze size, an odd number bigger than 2 ( 0 to QUIT ): \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> s<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>s <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> s <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> s<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> s <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> mg.<span class=\"me1\">create</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 126, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> MazeGeneration<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extensions<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> Shuffle<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> source, Random rng<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> e <span class=\"sy0\">=</span> source<span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> e<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> swapIndex <span class=\"sy0\">=</span> rng<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> e<span class=\"br0\">[</span>swapIndex<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                e<span class=\"br0\">[</span>swapIndex<span class=\"br0\">]</span> <span class=\"sy0\">=</span> e<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> CellState OppositeWall<span class=\"br0\">(</span><span class=\"kw1\">this</span> CellState orig<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>CellState<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> orig <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> orig <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Initial</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> HasFlag<span class=\"br0\">(</span><span class=\"kw1\">this</span> CellState cs,CellState flag<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>cs <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>flag<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">[</span>Flags<span class=\"br0\">]</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> CellState<br/>    <span class=\"br0\">{</span><br/>        Top <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<br/>        Right <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>,<br/>        Bottom <span class=\"sy0\">=</span> <span class=\"nu0\">4</span>,<br/>        Left <span class=\"sy0\">=</span> <span class=\"nu0\">8</span>,<br/>        Visited <span class=\"sy0\">=</span> <span class=\"nu0\">128</span>,<br/>        Initial <span class=\"sy0\">=</span> Top <span class=\"sy0\">|</span> Right <span class=\"sy0\">|</span> Bottom <span class=\"sy0\">|</span> Left,<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> RemoveWallAction<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> Point Neighbour<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> CellState Wall<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Maze<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> CellState<span class=\"br0\">[</span>,<span class=\"br0\">]</span> _cells<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">int</span> _width<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">int</span> _height<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> Random _rng<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Maze<span class=\"br0\">(</span><span class=\"kw4\">int</span> width, <span class=\"kw4\">int</span> height<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            _width <span class=\"sy0\">=</span> width<span class=\"sy0\">;</span><br/>            _height <span class=\"sy0\">=</span> height<span class=\"sy0\">;</span><br/>            _cells <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> CellState<span class=\"br0\">[</span>width, height<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> x<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> x<span class=\"sy0\">&lt;</span>width<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> y<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> y<span class=\"sy0\">&lt;</span>height<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    _cells<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Initial</span><span class=\"sy0\">;</span><br/>            _rng <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            VisitCell<span class=\"br0\">(</span>_rng<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span>, _rng<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span>height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> CellState <span class=\"kw1\">this</span><span class=\"br0\">[</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">]</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _cells<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">set</span> <span class=\"br0\">{</span> _cells<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> IEnumerable<span class=\"sy0\">&lt;</span>RemoveWallAction<span class=\"sy0\">&gt;</span> GetNeighbours<span class=\"br0\">(</span>Point p<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> RemoveWallAction <span class=\"br0\">{</span>Neighbour <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, p<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span>, Wall <span class=\"sy0\">=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Left</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> RemoveWallAction <span class=\"br0\">{</span>Neighbour <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span>, p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, Wall <span class=\"sy0\">=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Top</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">&lt;</span> _width<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> RemoveWallAction <span class=\"br0\">{</span>Neighbour <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, p<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span>, Wall <span class=\"sy0\">=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Right</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">&lt;</span> _height<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> RemoveWallAction <span class=\"br0\">{</span>Neighbour <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span>, p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, Wall <span class=\"sy0\">=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Bottom</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> VisitCell<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span><span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Visited</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> p <span class=\"kw1\">in</span> GetNeighbours<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Shuffle</span><span class=\"br0\">(</span>_rng<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>z <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">[</span>z<span class=\"sy0\">.</span><span class=\"me1\">Neighbour</span><span class=\"sy0\">.</span><span class=\"me1\">X</span>, z<span class=\"sy0\">.</span><span class=\"me1\">Neighbour</span><span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">HasFlag</span><span class=\"br0\">(</span>CellState<span class=\"sy0\">.</span><span class=\"me1\">Visited</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">this</span><span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> <span class=\"sy0\">-=</span> p<span class=\"sy0\">.</span><span class=\"me1\">Wall</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">this</span><span class=\"br0\">[</span>p<span class=\"sy0\">.</span><span class=\"me1\">Neighbour</span><span class=\"sy0\">.</span><span class=\"me1\">X</span>, p<span class=\"sy0\">.</span><span class=\"me1\">Neighbour</span><span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> p<span class=\"sy0\">.</span><span class=\"me1\">Wall</span><span class=\"sy0\">.</span><span class=\"me1\">OppositeWall</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                VisitCell<span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">Neighbour</span><span class=\"sy0\">.</span><span class=\"me1\">X</span>, p<span class=\"sy0\">.</span><span class=\"me1\">Neighbour</span><span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> firstLine <span class=\"sy0\">=</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> _height<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> sbTop <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">var</span> sbMid <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> _width<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    sbTop<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">[</span>x, y<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">HasFlag</span><span class=\"br0\">(</span>CellState<span class=\"sy0\">.</span><span class=\"me1\">Top</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"+--\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"+  \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    sbMid<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">[</span>x, y<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">HasFlag</span><span class=\"br0\">(</span>CellState<span class=\"sy0\">.</span><span class=\"me1\">Left</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"|  \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>firstLine <span class=\"sy0\">==</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"br0\">)</span><br/>                    firstLine <span class=\"sy0\">=</span> sbTop<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Debug<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sbTop <span class=\"sy0\">+</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Debug<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sbMid <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Debug<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sbMid <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Debug<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>firstLine<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> maze <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Maze<span class=\"br0\">(</span><span class=\"nu0\">20</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            maze<span class=\"sy0\">.</span><span class=\"me1\">Display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 94, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> maze<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span>\u00a0:<span class=\"kw1\">refer</span> <span class=\"br0\">[</span>intersection<br/>                                 select<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">as</span> <span class=\"kw1\">str</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Misc functions</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> neighborhood<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>neighborhood <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>coord<span class=\"br0\">]</span> <span class=\"br0\">(</span>neighborhood coord <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>y x<span class=\"br0\">]</span> r<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>y<span class=\"sy0\">--</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> y r<span class=\"br0\">)</span> y<span class=\"sy0\">++</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> y r<span class=\"br0\">)</span><br/>         x<span class=\"sy0\">--</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x r<span class=\"br0\">)</span> x<span class=\"sy0\">++</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x r<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     #<span class=\"br0\">{</span><span class=\"br0\">[</span>y<span class=\"sy0\">++</span> x<span class=\"br0\">]</span> <span class=\"br0\">[</span>y<span class=\"sy0\">--</span> x<span class=\"br0\">]</span> <span class=\"br0\">[</span>y x<span class=\"sy0\">--</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>y x<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cell<span class=\"sy0\">-</span><span class=\"kw1\">empty?</span> <span class=\"br0\">[</span>maze coords<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">empty</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in maze coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> wall? <span class=\"br0\">[</span>maze coords<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">wall</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in maze coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> filter<span class=\"sy0\">-</span>maze<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>pred maze coords<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span>select <span class=\"br0\">(</span>partial pred maze<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>pred maze<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span>filter<span class=\"sy0\">-</span>maze<br/>     pred<br/>     maze<br/>     <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>y <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> maze<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           x <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>nth maze y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>       <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> create<span class=\"sy0\">-</span>empty<span class=\"sy0\">-</span>maze <span class=\"br0\">[</span>width height<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>width <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> width<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        height <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> height<br/>               <span class=\"br0\">(</span><span class=\"kw1\">interleave</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> width <span class=\"br0\">(</span><span class=\"kw1\">repeat</span>\u00a0:<span class=\"me1\">wall</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> width <span class=\"br0\">(</span><span class=\"kw1\">cycle</span> <span class=\"br0\">[</span>:<span class=\"me1\">wall</span>\u00a0:<span class=\"me1\">empty</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> next<span class=\"sy0\">-</span>step <span class=\"br0\">[</span>possible<span class=\"sy0\">-</span>steps<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>nth <span class=\"br0\">(</span><span class=\"kw1\">vec</span> possible<span class=\"sy0\">-</span>steps<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;Algo</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> create<span class=\"sy0\">-</span>random<span class=\"sy0\">-</span>maze <span class=\"br0\">[</span>width height<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>maze <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>empty<span class=\"sy0\">-</span>maze width height<span class=\"br0\">)</span><br/>         stack <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>         nonvisited <span class=\"br0\">(</span>filter<span class=\"sy0\">-</span>maze cell<span class=\"sy0\">-</span><span class=\"kw1\">empty?</span> maze<span class=\"br0\">)</span><br/>         visited #<span class=\"br0\">{</span><span class=\"br0\">}</span><br/>         coords <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>step nonvisited<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> nonvisited<span class=\"br0\">)</span><br/>      maze<br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>nonvisited<span class=\"sy0\">-</span>neighbors <span class=\"br0\">(</span>intersection <span class=\"br0\">(</span>neighborhood coords <span class=\"nu0\">2</span><span class=\"br0\">)</span> nonvisited<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>          <span class=\"br0\">(</span>seq nonvisited<span class=\"sy0\">-</span>neighbors<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>coords <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>step nonvisited<span class=\"sy0\">-</span>neighbors<span class=\"br0\">)</span><br/>                wall<span class=\"sy0\">-</span>coords <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"sy0\">%</span>1 <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"sy0\">%</span>2 <span class=\"sy0\">%</span>1<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> coords next<span class=\"sy0\">-</span>coords<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>assoc<span class=\"sy0\">-</span>in maze wall<span class=\"sy0\">-</span>coords\u00a0:<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">conj</span> stack coords<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>disj nonvisited next<span class=\"sy0\">-</span>coords<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">conj</span> visited next<span class=\"sy0\">-</span>coords<span class=\"br0\">)</span><br/>                   next<span class=\"sy0\">-</span>coords<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <span class=\"br0\">(</span>seq stack<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">recur</span> maze <span class=\"br0\">(</span>pop stack<span class=\"br0\">)</span> nonvisited visited <span class=\"br0\">(</span>last stack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;Conversion to string</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> cell<span class=\"sy0\">-</span>code<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u00b7 \"</span> <span class=\"st0\">\"\u2575 \"</span> <span class=\"st0\">\"\u2574 \"</span> <span class=\"st0\">\"\u2518 \"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u2576\u2500\"</span> <span class=\"st0\">\"\u2514\u2500\"</span> <span class=\"st0\">\"\u2500\u2500\"</span> <span class=\"st0\">\"\u2534\u2500\"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u2577 \"</span> <span class=\"st0\">\"\u2502 \"</span> <span class=\"st0\">\"\u2510 \"</span> <span class=\"st0\">\"\u2524 \"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u250c\u2500\"</span> <span class=\"st0\">\"\u251c\u2500\"</span> <span class=\"st0\">\"\u252c\u2500\"</span> <span class=\"st0\">\"\u253c\u2500\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cell<span class=\"sy0\">-</span>code <span class=\"br0\">[</span>maze coord<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>transduce<br/>    <span class=\"br0\">(</span>comp<br/>      <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>partial wall? maze<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>keep<span class=\"sy0\">-</span>indexed <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>idx el<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> el idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>partial bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>left <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>completing bit<span class=\"sy0\">-</span><span class=\"kw1\">or</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> coord <span class=\"br0\">(</span>neighborhood coord<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cell<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">[</span>maze coord<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>get cell<span class=\"sy0\">-</span>code<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span>cell<span class=\"sy0\">-</span>code maze coord<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> maze<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">[</span>maze<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>y <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> maze<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>nth maze y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>           <span class=\"br0\">(</span>cell<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> maze <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">str</span><span class=\"sy0\">/</span>join<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span>join \\newline<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;Task</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>maze<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>random<span class=\"sy0\">-</span>maze <span class=\"nu0\">10</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 30, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> shuffle <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span>                        <span class=\"co1\">;; Z not uniform</span><br/>  <span class=\"br0\">(</span>sort <span class=\"kw1\">list</span> '<span class=\"sy0\">&gt;</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> neighbors <span class=\"br0\">(</span>x y maze<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>remove-if-<span class=\"kw1\">not</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x-y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> -<span class=\"nu0\">1</span> <span class=\"br0\">(</span>first x-y<span class=\"br0\">)</span> <span class=\"br0\">(</span>array-dimension maze <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> -<span class=\"nu0\">1</span> <span class=\"br0\">(</span>second x-y<span class=\"br0\">)</span> <span class=\"br0\">(</span>array-dimension maze <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   `<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span>x <span class=\"sy0\">,</span><span class=\"br0\">(</span>+ y <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>- x <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span>x <span class=\"sy0\">,</span><span class=\"br0\">(</span>- y <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>+ x <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> remove-wall <span class=\"br0\">(</span>maze x y <span class=\"sy0\">&amp;</span>optional visited<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>walk <span class=\"br0\">(</span>maze x y<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>push <span class=\"br0\">(</span><span class=\"kw1\">list</span> x y<span class=\"br0\">)</span> visited<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>u v<span class=\"br0\">)</span> in <span class=\"br0\">(</span>shuffle <span class=\"br0\">(</span>neighbors x y maze<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                unless <span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> u v<span class=\"br0\">)</span> visited <span class=\"sy0\">:</span><span class=\"me1\">test</span> '<span class=\"kw1\">equal</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> maze u v<span class=\"br0\">)</span> #\\space<br/>                         <span class=\"br0\">(</span><span class=\"kw1\">aref</span> maze <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ x u<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ y v<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #\\space<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>walk maze u v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> maze x y<span class=\"br0\">)</span> #\\space<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>walk maze x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> draw-maze <span class=\"br0\">(</span>width height <span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>block #\\BOX_DRAWINGS_LIGHT_DIAGONAL_CROSS<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>maze <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> height<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> width<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'character <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> block<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>remove-wall maze <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> width<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for i below <span class=\"br0\">(</span>array-dimension maze <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span>fresh-line<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop for j below <span class=\"br0\">(</span>array-dimension maze <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> maze i j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>draw-maze <span class=\"nu0\">20</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> <span class=\"kw4\">uint</span> w <span class=\"sy0\">=</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> vis <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>h<span class=\"sy0\">,</span> w<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         hor <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span>h <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>_ <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"+---\"</span><span class=\"br0\">]</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">,</span><br/>         ver <span class=\"sy0\">=</span> h.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>_ <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"|   \"</span><span class=\"br0\">]</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> walk<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> y<span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>        vis<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//foreach (immutable p; [[x-1,y], [x,y+1], [x+1,y], [x,y-1]].randomCover) {</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> p<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">randomCover</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> w <span class=\"sy0\">||</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> h <span class=\"sy0\">||</span> vis<span class=\"br0\">[</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> x<span class=\"br0\">)</span> hor<span class=\"br0\">[</span>max<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"+   \"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> y<span class=\"br0\">)</span> ver<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>max<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"    \"</span><span class=\"sy0\">;</span><br/>            walk<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    walk<span class=\"br0\">(</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> w<span class=\"br0\">)</span><span class=\"sy0\">,</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> b<span class=\"sy0\">;</span> hor.<span class=\"me1\">zip</span><span class=\"br0\">(</span>ver <span class=\"sy0\">~</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        join<span class=\"br0\">(</span>a <span class=\"sy0\">~</span> <span class=\"st0\">\"+<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span> b<span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EGL", "loc": 150, "block": "<pre class=\"text highlighted_source\">program MazeGen<br/>\u00a0<br/>    // First and last columns/rows are \"dead\" cells. Makes generating<br/>    // a maze with border walls much easier. Therefore, a visible<br/>    // 20x20 maze has a maze size of 22. \t<br/>    mazeSize int = 22;<br/>\u00a0<br/>    south boolean[][];<br/>    west boolean[][];<br/>    visited boolean[][];<br/>\u00a0<br/>    function main()<br/>        initMaze();<br/>        generateMaze();<br/>        drawMaze();<br/>    end<br/>\u00a0<br/>    private function initMaze()<br/>\u00a0<br/>        visited = createBooleanArray(mazeSize, mazeSize, false);<br/>\u00a0<br/>        // Initialize border cells as already visited<br/>        for(col int from 1 to mazeSize)<br/>            visited[col][1] = true;<br/>            visited[col][mazeSize] = true;<br/>        end<br/>        for(row int from 1 to mazeSize)<br/>            visited[1][row] = true;<br/>            visited[mazeSize][row] = true;<br/>        end<br/>\u00a0<br/>        // Initialize all walls as present<br/>        south = createBooleanArray(mazeSize, mazeSize, true);<br/>        west = createBooleanArray(mazeSize, mazeSize, true);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function createBooleanArray(col int in, row int in, initialState boolean in) returns(boolean[][])<br/>\u00a0<br/>        newArray boolean[][] = new boolean[0][0];<br/>\u00a0<br/>        for(i int from 1 to col)<br/>            innerArray boolean[] = new boolean[0];<br/>            for(j int from 1 to row)<br/>                innerArray.appendElement(initialState);<br/>            end<br/>            newArray.appendElement(innerArray);<br/>        end<br/>\u00a0<br/>        return(newArray);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function createIntegerArray(col int in, row int in, initialValue int in) returns(int[][])<br/>\u00a0<br/>        newArray int[][] = new int[0][0];<br/>\u00a0<br/>        for(i int from 1 to col)<br/>            innerArray int[] = new int[0];<br/>            for(j int from 1 to row)<br/>                innerArray.appendElement(initialValue);<br/>            end<br/>            newArray.appendElement(innerArray);<br/>        end<br/>\u00a0<br/>        return(newArray);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function generate(col int in, row int in)<br/>\u00a0<br/>        // Mark cell as visited<br/>        visited[col][row] = true;<br/>\u00a0<br/>        // Keep going as long as there is an unvisited neighbor<br/>        while(!visited[col][row + 1] ||\u00a0!visited[col + 1][row] ||<br/>               \u00a0!visited[col][row - 1] ||\u00a0!visited[col - 1][row])<br/>\u00a0<br/>            while(true)<br/>                r float = MathLib.random(); // Choose a random direction<br/>\u00a0<br/>                case<br/>                    when(r &lt; 0.25 &amp;&amp;\u00a0!visited[col][row + 1]) // Go south<br/>                        south[col][row] = false; // South wall down<br/>                        generate(col, row + 1);<br/>                        exit while;<br/>                    when(r &gt;= 0.25 &amp;&amp; r &lt; 0.50 &amp;&amp;\u00a0!visited[col + 1][row]) // Go east <br/>                        west[col + 1][row] = false; // West wall of neighbor to the east down<br/>                        generate(col + 1, row);<br/>                        exit while;<br/>                    when(r &gt;= 0.5 &amp;&amp; r &lt; 0.75 &amp;&amp;\u00a0!visited[col][row - 1]) // Go north<br/>                        south[col][row - 1] = false; // South wall of neighbor to the north down<br/>                        generate(col, row - 1);<br/>                        exit while;<br/>                    when(r &gt;= 0.75 &amp;&amp; r &lt; 1.00 &amp;&amp;\u00a0!visited[col - 1][row]) // Go west<br/>                        west[col][row] = false; // West wall down<br/>                        generate(col - 1, row);<br/>                        exit while;<br/>                end<br/>            end<br/>        end<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function generateMaze()<br/>\u00a0<br/>        // Pick random start position (within the visible maze space)<br/>        randomStartCol int = MathLib.floor((MathLib.random() *(mazeSize - 2)) + 2);<br/>        randomStartRow int = MathLib.floor((MathLib.random() *(mazeSize - 2)) + 2);<br/>\u00a0<br/>        generate(randomStartCol, randomStartRow);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function drawMaze()<br/>\u00a0<br/>        line string;<br/>\u00a0<br/>        // Iterate over wall arrays (skipping dead border cells as required). <br/>        // Construct a line at a time and output to console.<br/>        for(row int from 1 to mazeSize - 1)<br/>\u00a0<br/>            if(row &gt; 1)<br/>                line = \"\";<br/>                for(col int from 2 to mazeSize)<br/>                    if(west[col][row])<br/>                        line\u00a0::= \"|   \";<br/>                    else<br/>                        line\u00a0::= \"    \";<br/>                    end<br/>                end<br/>                Syslib.writeStdout(line);<br/>            end<br/>\u00a0<br/>            line = \"\";<br/>            for(col int from 2 to mazeSize - 1)<br/>                if(south[col][row])<br/>                    line\u00a0::= \"+---\";<br/>                else<br/>                    line\u00a0::= \"+   \";<br/>                end<br/>            end<br/>            line\u00a0::= \"+\";<br/>            SysLib.writeStdout(line);<br/>\u00a0<br/>        end<br/>\u00a0<br/>    end<br/>\u00a0<br/>end</pre>"}, {"lang": "Elixir", "loc": 31, "block": "<pre class=\"text highlighted_source\">defmodule Maze do<br/>  def generate(w, h) do<br/>    maze = (for i &lt;- 1..w, j &lt;- 1..h, into: Map.new, do: {{:vis, i, j}, true})<br/>           |&gt; walk(:rand.uniform(w),\u00a0:rand.uniform(h))<br/>    print(maze, w, h)<br/>    maze<br/>  end<br/>\u00a0<br/>  defp walk(map, x, y) do<br/>    Enum.shuffle( [[x-1,y], [x,y+1], [x+1,y], [x,y-1]] )<br/>    |&gt; Enum.reduce(Map.put(map, {:vis, x, y}, false), fn [i,j],acc -&gt;<br/>      if acc[{:vis, i, j}] do<br/>        {k, v} = if i == x, do: {{:hor, x, max(y, j)}, \"+   \"},<br/>                          else: {{:ver, max(x, i), y}, \"    \"}<br/>        walk(Map.put(acc, k, v), i, j)<br/>      else<br/>        acc<br/>      end<br/>    end)<br/>  end<br/>\u00a0<br/>  defp print(map, w, h) do<br/>    Enum.each(1..h, fn j -&gt;<br/>      IO.puts Enum.map_join(1..w, fn i -&gt; Map.get(map, {:hor, i, j}, \"+---\") end) &lt;&gt; \"+\"<br/>      IO.puts Enum.map_join(1..w, fn i -&gt; Map.get(map, {:ver, i, j}, \"|   \") end) &lt;&gt; \"|\"<br/>    end)<br/>    IO.puts String.duplicate(\"+---\", w) &lt;&gt; \"+\"<br/>  end<br/>end<br/>\u00a0<br/>Maze.generate(20, 10)</pre>"}, {"lang": "Elm", "loc": 249, "block": "<pre class=\"text highlighted_source\">import Maybe as M<br/>import Result as R<br/>import Matrix <br/>import Mouse<br/>import Random exposing (Seed)<br/>import Matrix.Random<br/>import Time exposing (Time, every, second)<br/>import Set exposing (Set, fromList)<br/>import List exposing (..)<br/>import String exposing (join)<br/>import Html exposing (Html, br, input, h1, h2, text, div, button)<br/>import Html.Events as HE <br/>import Html.Attributes as HA<br/>import Html.App exposing (program)<br/>import Json.Decode  as JD<br/>import Svg <br/>import Svg.Attributes exposing (version, viewBox, cx, cy, r, x, y, x1, y1, x2, y2, fill,points, style, width, height, preserveAspectRatio)<br/>\u00a0<br/>minSide = 10<br/>maxSide = 40<br/>w = 700<br/>h = 700<br/>dt = 0.001<br/>\u00a0<br/>type alias Direction = Int<br/>down = 0<br/>right = 1<br/>\u00a0<br/>type alias Door = (Matrix.Location, Direction)<br/>\u00a0<br/>type State = Initial | Generating | Generated | Solved<br/>\u00a0<br/>type alias Model =<br/>  { rows\u00a0: Int<br/>  , cols\u00a0: Int<br/>  , animate\u00a0: Bool<br/>  , boxes\u00a0: Matrix.Matrix Bool<br/>  , doors\u00a0: Set Door<br/>  , current\u00a0: List Matrix.Location<br/>  , state\u00a0: State<br/>  , seedStarter\u00a0: Int<br/>  , seed\u00a0: Seed<br/>  }<br/>\u00a0<br/>initdoors\u00a0: Int -&gt; Int -&gt; Set Door<br/>initdoors rows cols =<br/>  let <br/>    pairs la lb = List.concatMap (\\at -&gt; List.map ((,) at) lb) la<br/>    downs = pairs (pairs [0..rows-2] [0..cols-1]) [down] <br/>    rights = pairs (pairs [0..rows-1] [0..cols-2]) [right] <br/>  in downs ++ rights |&gt; fromList<br/>\u00a0<br/>initModel\u00a0: Int -&gt; Int -&gt; Bool -&gt; State -&gt; Int -&gt; Model<br/>initModel rows cols animate state starter = <br/>  let rowGenerator = Random.int 0 (rows-1)<br/>      colGenerator = Random.int 0 (cols-1)<br/>      locationGenerator = Random.pair rowGenerator colGenerator<br/>      (c, s)= Random.step locationGenerator (Random.initialSeed starter)<br/>  in { rows = rows<br/>     , cols = cols <br/>     , animate = animate<br/>     , boxes = Matrix.matrix rows cols (\\location -&gt; state == Generating &amp;&amp; location == c)<br/>     , doors = initdoors rows cols<br/>     , current = if state == Generating then [c] else []<br/>     , state = state<br/>     , seedStarter = starter -- updated every Tick until maze generated.<br/>     , seed = s<br/>     }<br/>\u00a0<br/>view model =<br/>  let<br/>    borderLineStyle = style \"stroke:green;stroke-width:0.3\"<br/>    wallLineStyle = style \"stroke:green;stroke-width:0.1\" <br/>\u00a0<br/>    x1Min = x1 &lt;| toString 0<br/>    y1Min = y1 &lt;| toString 0<br/>    x1Max = x1 &lt;| toString model.cols<br/>    y1Max = y1 &lt;| toString model.rows<br/>    x2Min = x2 &lt;| toString 0<br/>    y2Min = y2 &lt;| toString 0<br/>    x2Max = x2 &lt;| toString model.cols<br/>    y2Max = y2 &lt;| toString model.rows<br/>\u00a0<br/>    borders = [ Svg.line [ x1Min, y1Min, x2Max, y2Min, borderLineStyle ] []<br/>              , Svg.line [ x1Max, y1Min, x2Max, y2Max, borderLineStyle ] []<br/>              , Svg.line [ x1Max, y1Max, x2Min, y2Max, borderLineStyle ] []<br/>              , Svg.line [ x1Min, y1Max, x2Min, y2Min, borderLineStyle ] []<br/>              ]<br/>\u00a0<br/>    doorToLine door = <br/>      let (deltaX1, deltaY1) = if (snd door == right) then (1,0) else (0,1)<br/>          (row, column) = fst door<br/>      in Svg.line [ x1 &lt;| toString (column + deltaX1)<br/>                  , y1 &lt;| toString (row    + deltaY1)<br/>                  , x2 &lt;| toString (column + 1)<br/>                  , y2 &lt;| toString (row    + 1)<br/>                  , wallLineStyle ] []<br/>\u00a0<br/>    doors = (List.map doorToLine &lt;| Set.toList model.doors )<br/>\u00a0<br/>    circleInBox (row,col) color = <br/>      Svg.circle [ r \"0.25\"<br/>      , fill (color)<br/>      , cx (toString (toFloat col + 0.5))<br/>      , cy (toString (toFloat row + 0.5))<br/>      ] [] <br/>\u00a0<br/>    showUnvisited location box =<br/>       if box then [] else [ circleInBox location \"yellow\" ]<br/>\u00a0<br/>    unvisited = model.boxes <br/>                  |&gt; Matrix.mapWithLocation showUnvisited <br/>                  |&gt; Matrix.flatten <br/>                  |&gt; concat<br/>\u00a0<br/>    current = <br/>      case head model.current of<br/>          Nothing -&gt; []<br/>          Just c -&gt; [circleInBox c \"black\"]<br/>\u00a0<br/>    maze = <br/>      if model.animate || model.state /= Generating<br/>      then [ Svg.g [] &lt;| doors ++ borders ++ unvisited ++ current ] <br/>      else [ Svg.g [] &lt;| borders ]<br/>  in<br/>    div <br/>      []<br/>      [ h2 [centerTitle] [text \"Maze Generator\"]<br/>      , div <br/>          [floatLeft] <br/>          (  slider \"rows\" minSide maxSide model.rows SetRows<br/>          ++ [ br [] [] ] <br/>\u00a0<br/>          ++ slider \"cols\" minSide maxSide model.cols SetCols<br/>          ++ [ br [] [] ]<br/>\u00a0<br/>          ++ checkbox \"Animate\" model.animate SetAnimate <br/>          ++ [ br [] [] ]<br/>\u00a0<br/>          ++ [ button <br/>                 [ HE.onClick Generate ]<br/>                 [ text \"Generate\"] <br/>             ] )<br/>      , div <br/>          [floatLeft] <br/>          [ Svg.svg <br/>              [ version \"1.1\"<br/>              , width (toString w)<br/>              , height (toString h)<br/>              , viewBox (join \" \" <br/>                           [ 0          |&gt; toString<br/>                           , 0          |&gt; toString<br/>                           , model.cols |&gt; toString<br/>                           , model.rows |&gt; toString ])<br/>              ] <br/>              maze<br/>          ]<br/>      ] <br/>\u00a0<br/>checkbox label checked msg = <br/>  [ input<br/>      [ HA.type' \"checkbox\"<br/>      , HA.checked checked<br/>      , HE.on \"change\" (JD.map msg HE.targetChecked)<br/>      ]<br/>      []<br/>    , text label<br/>  ]<br/>\u00a0<br/>slider name min max current msg = <br/>  [ input<br/>    [ HA.value (if current &gt;= min then current |&gt; toString else \"\")<br/>    , HE.on \"input\" (JD.map msg HE.targetValue )<br/>    , HA.type' \"range\"<br/>    , HA.min &lt;| toString min<br/>    , HA.max &lt;| toString max<br/>    ]<br/>    []<br/>  , text &lt;| name ++ \"=\" ++ (current |&gt; toString)<br/>  ]<br/>\u00a0<br/>floatLeft = HA.style [ (\"float\", \"left\") ] <br/>centerTitle = HA.style [ ( \"text-align\", \"center\") ] <br/>\u00a0<br/>unvisitedNeighbors\u00a0: Model -&gt; Matrix.Location -&gt; List Matrix.Location<br/>unvisitedNeighbors model (row,col) = <br/>  [(row, col-1), (row-1, col), (row, col+1), (row+1, col)]<br/>    |&gt; List.filter (\\l -&gt; fst l &gt;= 0 &amp;&amp; snd l &gt;= 0 &amp;&amp; fst l &lt; model.rows &amp;&amp; snd l &lt; model.cols)<br/>    |&gt; List.filter (\\l -&gt; (Matrix.get l model.boxes) |&gt; M.withDefault False |&gt; not)<br/>\u00a0<br/>updateModel'\u00a0: Model -&gt; Int -&gt; Model<br/>updateModel' model t = <br/>  case head model.current of<br/>    Nothing -&gt; {model | state = Generated, seedStarter = t }<br/>    Just prev -&gt;<br/>      let neighbors = unvisitedNeighbors model prev<br/>      in if (length neighbors) &gt; 0 then<br/>           let (neighborIndex, seed) = Random.step (Random.int 0 (length neighbors-1)) model.seed<br/>               next = head (drop neighborIndex neighbors) |&gt; M.withDefault (0,0) <br/>               boxes = Matrix.set next True model.boxes <br/>               dir = if fst prev == fst next then right else down<br/>               doorCell = if (  (dir == down)   &amp;&amp; (fst prev &lt; fst next))  <br/>                             || (dir == right ) &amp;&amp; (snd prev &lt; snd next) then prev else next<br/>               doors = Set.remove (doorCell, dir) model.doors <br/>           in {model | boxes=boxes, doors=doors, current=next\u00a0:: model.current, seed=seed, seedStarter = t}<br/>         else<br/>           let tailCurrent = tail model.current |&gt; M.withDefault [] <br/>           in updateModel' {model | current = tailCurrent} t<br/>\u00a0<br/>updateModel\u00a0: Msg -&gt; Model -&gt; Model<br/>updateModel msg model = <br/>  let stringToCellCount s =<br/>    let v' = String.toInt s |&gt; R.withDefault minSide<br/>    in if v' &lt; minSide then minSide else v'<br/>  in case msg of <br/>       Tick tf -&gt; <br/>         let t = truncate tf<br/>         in <br/>           if (model.state == Generating) then updateModel' model t<br/>           else { model | seedStarter = t } <br/>\u00a0<br/>       Generate -&gt; <br/>         initModel model.rows model.cols model.animate Generating model.seedStarter<br/>\u00a0<br/>       SetRows countString -&gt; <br/>         initModel (stringToCellCount countString) model.cols model.animate Initial model.seedStarter<br/>\u00a0<br/>       SetCols countString -&gt; <br/>         initModel model.rows (stringToCellCount countString) model.animate Initial model.seedStarter<br/>\u00a0<br/>       SetAnimate b -&gt; <br/>         { model | animate = b } <br/>\u00a0<br/>       NoOp -&gt; model <br/>\u00a0<br/>type Msg = NoOp | Tick Time | Generate | SetRows String | SetCols String | SetAnimate Bool<br/>\u00a0<br/>subscriptions model = every (dt * second) Tick<br/>\u00a0<br/>main =<br/>  let <br/>    update msg model = (updateModel msg model, Cmd.none)<br/>    init = (initModel 21 36 False Initial 0, Cmd.none)<br/>  in program <br/>       { init = init<br/>       , view = view<br/>       , update = update<br/>       , subscriptions = subscriptions<br/>       }</pre>"}, {"lang": "Erlang", "loc": 145, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> maze <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>cell_accessible_neighbours<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> cell_content<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> cell_content_set<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> cell_pid<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> cell_position<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> display<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> generation<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> stop<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> maze<span class=\"sy1\">,</span> <span class=\"br0\">{</span>dict<span class=\"sy1\">,</span> max_x<span class=\"sy1\">,</span> max_y<span class=\"sy1\">,</span> start<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> state<span class=\"sy1\">,</span> <span class=\"br0\">{</span>content<span class=\"sy3\">=</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> controller<span class=\"sy1\">,</span> is_dug<span class=\"sy3\">=</span>false<span class=\"sy1\">,</span> max_x<span class=\"sy1\">,</span> max_y<span class=\"sy1\">,</span> neighbours<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> position<span class=\"sy1\">,</span> walls<span class=\"sy3\">=</span><span class=\"br0\">[</span>north<span class=\"sy1\">,</span> south<span class=\"sy1\">,</span> east<span class=\"sy1\">,</span> west<span class=\"br0\">]</span><span class=\"sy1\">,</span> walk_done<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cell_accessible_neighbours</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">read</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> accessible_neighbours <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cell_content</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">read</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> content <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cell_content_set</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Content</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>content<span class=\"sy1\">,</span> <span class=\"re5\">Content</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cell_pid</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Maze</span><span class=\"re8\">#</span><span class=\"re7\">maze</span><span class=\"sy1\">.</span>dict <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cell_position</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">read</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> position <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display</span><span class=\"br0\">(</span> #<span class=\"re7\">maze</span><span class=\"br0\">{</span>dict<span class=\"sy3\">=</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span> max_x<span class=\"sy3\">=</span><span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> max_y<span class=\"sy3\">=</span><span class=\"re5\">Max_y</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Position_pids</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">to_list</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"re3\">reads</span><span class=\"br0\">(</span><span class=\"re5\">Position_pids</span><span class=\"sy1\">,</span> content<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">reads</span><span class=\"br0\">(</span><span class=\"re5\">Position_pids</span><span class=\"sy1\">,</span> walls<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">generation</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"re5\">Controller</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Position_pids</span> <span class=\"sy3\">=</span> <span class=\"re3\">cells_create</span><span class=\"br0\">(</span> <span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Pids</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Y</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Position_pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>       <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>position_pids<span class=\"sy1\">,</span> <span class=\"re5\">Position_pids</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>       <span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">nth</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"re5\">Max_x</span> <span class=\"sy3\">*</span> <span class=\"re5\">Max_y</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_pids</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>dig<span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>       <span class=\"kw1\">receive</span><br/>       <span class=\"br0\">{</span>dig_done<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><br/>       <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>       #<span class=\"re7\">maze</span><span class=\"br0\">{</span>dict<span class=\"sy3\">=</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><span class=\"re5\">Position_pids</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> max_x<span class=\"sy3\">=</span><span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> max_y<span class=\"sy3\">=</span><span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> start<span class=\"sy3\">=</span><span class=\"re5\">Position</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">stop</span><span class=\"br0\">(</span> #<span class=\"re7\">maze</span><span class=\"br0\">{</span>dict<span class=\"sy3\">=</span><span class=\"re5\">Dict</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>      <span class=\"re5\">Controller</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"re5\">Pids</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Y</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">to_list</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>      ok<span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"re5\">Maze</span> <span class=\"sy3\">=</span> <span class=\"re3\">generation</span><span class=\"br0\">(</span> <span class=\"nu0\">16</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Starting at ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Maze</span><span class=\"re8\">#</span><span class=\"re7\">maze</span><span class=\"sy1\">.</span>start<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re3\">stop</span><span class=\"br0\">(</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">cells_create</span><span class=\"br0\">(</span> <span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re3\">cell_create</span><span class=\"br0\">(</span><span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cell_create</span><span class=\"br0\">(</span> <span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn_link</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">seed</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy3\">+</span><span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>controller<span class=\"sy3\">=</span><span class=\"re5\">Controller</span><span class=\"sy1\">,</span> max_x<span class=\"sy3\">=</span><span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> max_y<span class=\"sy3\">=</span><span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> position<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_contents</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_walls</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">All_rows</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">display_row</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_contents</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_walls</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~s+~n~s|~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">North</span><span class=\"sy1\">,</span> <span class=\"re5\">West</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">North</span><span class=\"sy1\">,</span> <span class=\"re5\">West</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">All_rows</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~s+~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">duplicate</span><span class=\"br0\">(</span><span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re3\">display_row_north</span><span class=\"br0\">(</span>true<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_row</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_contents</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_walls</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">North_wests</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">display_row_walls</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/proplists.html\"><span class=\"kw5\">proplists</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_contents</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/proplists.html\"><span class=\"kw5\">proplists</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_walls</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">North</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">append</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">North</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">North</span><span class=\"sy1\">,</span> <span class=\"re5\">_West</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">North_wests</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">West</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">append</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">West</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">West</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">North_wests</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">North</span><span class=\"sy1\">,</span> <span class=\"re5\">West</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_row_walls</span><span class=\"br0\">(</span> <span class=\"re5\">Content</span><span class=\"sy1\">,</span> <span class=\"re5\">Walls</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re3\">display_row_north</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span>north<span class=\"sy1\">,</span> <span class=\"re5\">Walls</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">display_row_west</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span>west<span class=\"sy1\">,</span> <span class=\"re5\">Walls</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Content</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_row_north</span><span class=\"br0\">(</span> true <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"+---\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">display_row_north</span><span class=\"br0\">(</span> false <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"+   \"</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_row_west</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">Content</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"| \"</span> <span class=\"sy3\">++</span> <span class=\"re5\">Content</span> <span class=\"sy3\">++</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">display_row_west</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">Content</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"  \"</span> <span class=\"sy3\">++</span> <span class=\"re5\">Content</span> <span class=\"sy3\">++</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">receive</span><br/>    <span class=\"br0\">{</span>accessible_neighbours<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>    \t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>accessible_neighbours<span class=\"sy1\">,</span> <span class=\"re3\">loop_accessible_neighbours</span><span class=\"br0\">(</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>neighbours<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>walls <span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>        <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>content<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>    \t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>content<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>content<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>        <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>content<span class=\"sy1\">,</span> <span class=\"re5\">Content</span><span class=\"sy1\">,</span> <span class=\"re5\">_Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"br0\">{</span>content<span class=\"sy3\">=</span><span class=\"re5\">Content</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>dig<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t    <span class=\"re5\">Not_dug_neighbours</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_not_dug</span><span class=\"br0\">(</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>neighbours <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re5\">New_walls</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_dig</span><span class=\"br0\">(</span> <span class=\"re5\">Not_dug_neighbours</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">delete</span><span class=\"br0\">(</span> <span class=\"re3\">loop_wall_from_pid</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>neighbours<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>walls<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"br0\">{</span>is_dug<span class=\"sy3\">=</span>true<span class=\"sy1\">,</span> walls<span class=\"sy3\">=</span><span class=\"re5\">New_walls</span><span class=\"sy1\">,</span> walk_done<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>dig_done<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t    <span class=\"re5\">Not_dug_neighbours</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_not_dug</span><span class=\"br0\">(</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>neighbours <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re5\">New_walls</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_dig</span><span class=\"br0\">(</span> <span class=\"re5\">Not_dug_neighbours</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>walls<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>walk_done <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"br0\">{</span>walls<span class=\"sy3\">=</span><span class=\"re5\">New_walls</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>is_dug<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>    \t    <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>is_dug<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>is_dug<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>position<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>    \t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>position<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>position<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>        <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>position_pids<span class=\"sy1\">,</span> <span class=\"re5\">Position_pids</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">_My_position</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbours</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> loop_neighbours<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>position<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Position_pids</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">garbage_collect</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"co1\">% Shrink process after using large Pid_positions. For memory starved systems.</span><br/>        <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"br0\">{</span>neighbours<span class=\"sy3\">=</span><span class=\"re5\">Neighbours</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span> <span class=\"kw1\">when</span> <span class=\"re5\">Controller</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>controller <span class=\"sy1\">-&gt;</span><br/>    \t   <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>walls<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>    \t    <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>walls<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>walls<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t    <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_accessible_neighbours</span><span class=\"br0\">(</span> <span class=\"re5\">Neighbours</span><span class=\"sy1\">,</span> <span class=\"re5\">Walls</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">Pid</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Neighbours</span><span class=\"sy1\">,</span> <span class=\"kw2\">not</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">Walls</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_dig</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Walls</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>dig_done<span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Walls</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_dig</span><span class=\"br0\">(</span> <span class=\"re5\">Not_dug_neighbours</span><span class=\"sy1\">,</span> <span class=\"re5\">Walls</span><span class=\"sy1\">,</span> <span class=\"re5\">_Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">Dig_pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Dig_direction</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">nth</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Not_dug_neighbours</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Not_dug_neighbours</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">Dig_pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>dig<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">delete</span><span class=\"br0\">(</span> <span class=\"re5\">Dig_direction</span><span class=\"sy1\">,</span> <span class=\"re5\">Walls</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_neighbours</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Y</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">My_y</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>north<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_neighbours</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Y</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">My_y</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>south<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_neighbours</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">My_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">My_x</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">My_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>east<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_neighbours</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">My_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">My_x</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">My_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>west<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_neighbours</span><span class=\"br0\">(</span> <span class=\"re5\">_Position_pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_not_dug</span><span class=\"br0\">(</span> <span class=\"re5\">Neighbours</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">My_pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>is_dug<span class=\"sy1\">,</span> <span class=\"re5\">My_pid</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">_Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Neighbours</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Direction</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Neighbours</span><span class=\"sy1\">,</span> <span class=\"kw2\">not</span> <span class=\"re3\">read_receive</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> is_dug<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_wall_from_pid</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbours</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop_wall_from_pid_result</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keyfind</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbours</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">loop_wall_from_pid_result</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">_Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Direction</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_wall_from_pid_result</span><span class=\"br0\">(</span> false <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">controller</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">read</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">read_receive</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">read_receive</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Value</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">reads</span><span class=\"br0\">(</span> <span class=\"re5\">Position_pids</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">My_pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">My_pid</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">_Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Position_pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re3\">read_receive</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Position_pids</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 57, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> rnd\u00a0: <span class=\"kw4\">int</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> gen <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">fun</span> <span class=\"kw3\">max</span> <span class=\"sy0\">-&gt;</span> gen.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"kw3\">max</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// randomly choose an element of a list</span><br/><span class=\"kw1\">let</span> choose <span class=\"br0\">(</span>xs:_ list<span class=\"br0\">)</span> <span class=\"sy0\">=</span> xs.<span class=\"br0\">[</span>rnd xs.<span class=\"me1\">Length</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Maze<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"co1\">// (x,y) -&gt; have we been here before?</span><br/>  <span class=\"kw1\">let</span> visited <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">create</span> width height <span class=\"kw1\">false</span><br/>  <span class=\"co1\">// (x,y) -&gt; is there a wall between (x,y) and (x+1,y)?</span><br/>  <span class=\"kw1\">let</span> horizWalls <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">create</span> width height <span class=\"kw1\">true</span><br/>  <span class=\"co1\">// (x,y) -&gt; is there a wall between (x,y) and (x,y+1)?</span><br/>  <span class=\"kw1\">let</span> vertWalls <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">create</span> width height  <span class=\"kw1\">true</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> isLegalPoint <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    x <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> &amp;&amp; x <span class=\"sy0\">&lt;</span> width &amp;&amp; y <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> &amp;&amp; y <span class=\"sy0\">&lt;</span> height<br/>\u00a0<br/>  <span class=\"kw1\">let</span> neighbours <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,y<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,y<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span>x,y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span>x,y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">filter</span> isLegalPoint<br/>\u00a0<br/>  <span class=\"kw1\">let</span> removeWallBetween <span class=\"br0\">(</span>x1,y1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x2,y2<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> x1 <span class=\"sy0\">&lt;&gt;</span> x2 <span class=\"kw1\">then</span><br/>      horizWalls.<span class=\"br0\">[</span><span class=\"kw3\">min</span> x1 x2, y1<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">false</span><br/>    <span class=\"kw1\">else</span><br/>      vertWalls.<span class=\"br0\">[</span>x1, <span class=\"kw3\">min</span> y1 y2<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">false</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> visit <span class=\"br0\">(</span>x,y <span class=\"kw1\">as</span> p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop ns <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> <span class=\"br0\">(</span>nx,ny<span class=\"br0\">)</span> <span class=\"kw1\">as</span> n <span class=\"sy0\">=</span> choose ns<br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> visited.<span class=\"br0\">[</span>nx,ny<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        removeWallBetween p n<br/>        visit n<br/>      <span class=\"kw1\">match</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span> ns <span class=\"kw1\">with</span><br/>      | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      | others <span class=\"sy0\">-&gt;</span> loop others<br/>\u00a0<br/>    visited.<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">true</span><br/>    loop <span class=\"br0\">(</span>neighbours p<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> visit <span class=\"br0\">(</span>rnd width, rnd height<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span><span class=\"st0\">\"+\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">replicate</span> width <span class=\"st0\">\"-+\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0::<br/>    <span class=\"br0\">[</span><span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span>height<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>       <span class=\"kw1\">yield</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>|\"</span><br/>       <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span>width<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>         <span class=\"kw1\">yield</span> <span class=\"kw1\">if</span> horizWalls.<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"st0\">\" |\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"  \"</span><br/>       <span class=\"kw1\">yield</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>+\"</span><br/>       <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span>width<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>         <span class=\"kw1\">yield</span> <span class=\"kw1\">if</span> vertWalls.<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"-+\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\" +\"</span><br/>    <span class=\"br0\">]</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%s\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Maze<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>m.<span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "FreeBASIC", "loc": 130, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 04-12-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/><span class=\"co1\">' when generating a big maze it's possible to run out of stack space</span><br/><span class=\"co1\">' increase stack with the -t xxxx (xxxx is the amount you want in Kbytes)</span><br/>\u00a0<br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> d<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">' directions</span><br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> ULong c<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">' cell's</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> cell<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> ULong, y <span class=\"kw1\">As</span> ULong, s <span class=\"kw1\">As</span> ULong<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong x1, y1, di_n<br/>    c<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"co1\">' mark as visited</span><br/>\u00a0<br/>    <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> di = d<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>di<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> l &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span> <span class=\"co1\">' no directions left then exit</span><br/>        di_n = di<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"co1\">' get direction</span><br/>        <span class=\"kw1\">If</span> l = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            d<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">Else</span><br/>            d<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = <span class=\"kw1\">Left</span><span class=\"br0\">(</span>di,l<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        Select <span class=\"kw1\">Case</span> di_n <span class=\"co1\">' 0,0 is upper left corner</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"N\"</span><span class=\"br0\">)</span><br/>                x1 = x   \u00a0: y1 = y -<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"E\"</span><span class=\"br0\">)</span><br/>                x1 = x +<span class=\"nu0\">1</span>\u00a0: y1 = y<br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"S\"</span><span class=\"br0\">)</span><br/>                x1 = x   \u00a0: y1 = y +<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"W\"</span><span class=\"br0\">)</span><br/>                x1 = x -<span class=\"nu0\">1</span>\u00a0: y1 = y<br/>        <span class=\"kw1\">End</span> Select<br/>\u00a0<br/>        <span class=\"kw1\">If</span> c<span class=\"br0\">(</span>x1,y1<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">Do</span><br/>\u00a0<br/>        Select <span class=\"kw1\">Case</span> di_n <span class=\"co1\">' 0,0 is upper left corner</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"N\"</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">Line</span> <span class=\"br0\">(</span>x * s +<span class=\"nu0\">1</span> , y * s<span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"br0\">(</span>x +<span class=\"nu0\">1</span><span class=\"br0\">)</span> * s -<span class=\"nu0\">1</span>, y * s<span class=\"br0\">)</span>,<span class=\"nu0\">0</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"E\"</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">Line</span> <span class=\"br0\">(</span>x1 * s, y * s +<span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span>x1 * s, <span class=\"br0\">(</span>y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> * s -<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">0</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"S\"</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">Line</span> <span class=\"br0\">(</span>x * s +<span class=\"nu0\">1</span>, y1 * s<span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"br0\">(</span>x +<span class=\"nu0\">1</span><span class=\"br0\">)</span> * s -<span class=\"nu0\">1</span>, y1 * s<span class=\"br0\">)</span>,<span class=\"nu0\">0</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"W\"</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">Line</span> <span class=\"br0\">(</span>x * s , y * s +<span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span>x * s, <span class=\"br0\">(</span>y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> * s -<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">0</span><br/>        <span class=\"kw1\">End</span> Select<br/>\u00a0<br/>        cell<span class=\"br0\">(</span>x1, y1, s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> gen_maze<span class=\"br0\">(</span>w <span class=\"kw1\">As</span> ULong, h <span class=\"kw1\">As</span> ULong, s <span class=\"kw1\">As</span> ULong<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">ReDim</span> d<span class=\"br0\">(</span>w, h<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ReDim</span> c<span class=\"br0\">(</span>w, h<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong x, y, r, i<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> di<br/>\u00a0<br/>    d<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"st0\">\"SE\"</span>       <span class=\"co1\">' cornes</span><br/>    d<span class=\"br0\">(</span><span class=\"nu0\">0</span>, h -<span class=\"nu0\">1</span><span class=\"br0\">)</span> =<span class=\"st0\">\"NE\"</span><br/>    d<span class=\"br0\">(</span>w -<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> =<span class=\"st0\">\"SW\"</span><br/>    d<span class=\"br0\">(</span>w -<span class=\"nu0\">1</span>, h -<span class=\"nu0\">1</span><span class=\"br0\">)</span> =<span class=\"st0\">\"NW\"</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> w -<span class=\"nu0\">2</span>  <span class=\"co1\">' sides</span><br/>        d<span class=\"br0\">(</span>x,<span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"st0\">\"EWS\"</span><br/>        d<span class=\"br0\">(</span>x,h -<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"st0\">\"NEW\"</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> h -<span class=\"nu0\">2</span><br/>        d<span class=\"br0\">(</span><span class=\"nu0\">0</span>, y<span class=\"br0\">)</span> = <span class=\"st0\">\"NSE\"</span><br/>        d<span class=\"br0\">(</span>w -<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span> =<span class=\"st0\">\"NSW\"</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> w -<span class=\"nu0\">1</span>     <span class=\"co1\">' shuffle directions</span><br/>        <span class=\"kw1\">For</span> y = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> h -<span class=\"nu0\">1</span><br/>            di = d<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> di = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> di = <span class=\"st0\">\"NEWS\"</span><br/>            i = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>di<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Do</span><br/>                r = <span class=\"kw1\">Fix</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * i<span class=\"br0\">)</span><br/>                i = i - <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">Swap</span> di<span class=\"br0\">[</span>r<span class=\"br0\">]</span>, di<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> i = <span class=\"nu0\">0</span><br/>            d<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = di<br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">ScreenRes</span> w * s +<span class=\"nu0\">1</span>, h * s +<span class=\"nu0\">1</span>, <span class=\"nu0\">8</span><br/>    <span class=\"co1\">' draw the grid</span><br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> w<br/>        <span class=\"kw1\">Line</span> <span class=\"br0\">(</span>x * s, <span class=\"nu0\">0</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span>x * s, h * s<span class=\"br0\">)</span>, <span class=\"nu0\">2</span> <span class=\"co1\">' green color</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> h<br/>        <span class=\"kw1\">Line</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, y * s<span class=\"br0\">)</span> - <span class=\"br0\">(</span>w* s, y * s<span class=\"br0\">)</span>,<span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"co1\">' choice the start cell</span><br/>    x = <span class=\"kw1\">Fix</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * w<span class=\"br0\">)</span><br/>    y = <span class=\"kw1\">Fix</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * h<span class=\"br0\">)</span><br/>\u00a0<br/>    cell<span class=\"br0\">(</span>x, y, s<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Randomize</span> <span class=\"kw1\">Timer</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong t<br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    <span class=\"co1\">' gen_maxe(width, height, cell size)</span><br/>    gen_maze<span class=\"br0\">(</span><span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">WindowTitle</span> <span class=\"st0\">\" S to save, N for next maze, other key to stop\"</span><br/>    <span class=\"kw1\">Do</span><br/>    Var key = <span class=\"kw1\">Inkey</span><br/>    key = <span class=\"kw1\">UCase</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> key = <span class=\"st0\">\"S\"</span> <span class=\"kw1\">Then</span><br/>        t = t +<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">BSave</span><span class=\"br0\">(</span><span class=\"st0\">\"maze\"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> + <span class=\"st0\">\".bmp\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><br/>        key = <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">If</span> key = <span class=\"st0\">\"N\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">Do</span>, <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> key &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span>, <span class=\"kw1\">Do</span> <br/>    <span class=\"kw1\">Loop</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 119, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bytes\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span>   <br/>\u00a0<br/><span class=\"kw1\">type</span> maze <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span> <br/>    c  <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span>   <span class=\"co1\">// cell contents</span><br/>    h  <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span>   <span class=\"co1\">// horizontal walls above cells</span><br/>    v  <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span>   <span class=\"co1\">// vertical walls to the left of cells</span><br/>    c2 <span class=\"sy1\">[][]</span><span class=\"kw4\">byte</span> <span class=\"co1\">// cells by row</span><br/>    h2 <span class=\"sy1\">[][]</span><span class=\"kw4\">byte</span> <span class=\"co1\">// horizontal walls by row (ignore first row)</span><br/>    v2 <span class=\"sy1\">[][]</span><span class=\"kw4\">byte</span> <span class=\"co1\">// vertical walls by row (ignore first of each column)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newMaze<span class=\"sy1\">(</span>rows<span class=\"sy1\">,</span> cols <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>maze <span class=\"sy1\">{</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rows<span class=\"sy3\">*</span>cols<span class=\"sy1\">)</span>              <span class=\"co1\">// all cells</span><br/>    h <span class=\"sy2\">:=</span> bytes<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><span class=\"st0\">'-'</span><span class=\"sy1\">},</span> rows<span class=\"sy3\">*</span>cols<span class=\"sy1\">)</span> <span class=\"co1\">// all horizontal walls</span><br/>    v <span class=\"sy2\">:=</span> bytes<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><span class=\"st0\">'|'</span><span class=\"sy1\">},</span> rows<span class=\"sy3\">*</span>cols<span class=\"sy1\">)</span> <span class=\"co1\">// all vertical walls</span><br/>    c2 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rows<span class=\"sy1\">)</span>                <span class=\"co1\">// cells by row</span><br/>    h2 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rows<span class=\"sy1\">)</span>                <span class=\"co1\">// horizontal walls by row</span><br/>    v2 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rows<span class=\"sy1\">)</span>                <span class=\"co1\">// vertical walls by row</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> h2 <span class=\"sy1\">{</span><br/>        c2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>cols <span class=\"sy1\">:</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>cols<span class=\"sy1\">]</span><br/>        h2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> h<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>cols <span class=\"sy1\">:</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>cols<span class=\"sy1\">]</span><br/>        v2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> v<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>cols <span class=\"sy1\">:</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>cols<span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> &amp;maze<span class=\"sy1\">{</span>c<span class=\"sy1\">,</span> h<span class=\"sy1\">,</span> v<span class=\"sy1\">,</span> c2<span class=\"sy1\">,</span> h2<span class=\"sy1\">,</span> v2<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>maze<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    hWall <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"+---\"</span><span class=\"sy1\">)</span><br/>    hOpen <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"+   \"</span><span class=\"sy1\">)</span><br/>    vWall <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"|   \"</span><span class=\"sy1\">)</span><br/>    vOpen <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"    \"</span><span class=\"sy1\">)</span><br/>    rightCorner <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"+<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span> <br/>    rightWall <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"|<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> b <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/>    <span class=\"co1\">// for all rows </span><br/>    <span class=\"kw1\">for</span> r<span class=\"sy1\">,</span> hw <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy3\">.</span>h2 <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// draw h walls</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> h <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> hw <span class=\"sy1\">{</span> <br/>            <span class=\"kw1\">if</span> h <span class=\"sy3\">==</span> <span class=\"st0\">'-'</span> <span class=\"sy3\">||</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> hWall<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> hOpen<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> rightCorner<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>        <span class=\"co1\">// draw v walls</span><br/>        <span class=\"kw1\">for</span> c<span class=\"sy1\">,</span> vw <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> vw <span class=\"sy3\">==</span> <span class=\"st0\">'|'</span> <span class=\"sy3\">||</span> c <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> vWall<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> vOpen<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"co1\">// draw cell contents</span><br/>            <span class=\"kw1\">if</span> m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                b<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> rightWall<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// draw bottom edge of maze</span><br/>    <span class=\"kw1\">for</span> _ <span class=\"sy2\">=</span> <span class=\"kw1\">range</span> m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> hWall<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> rightCorner<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>maze<span class=\"sy1\">)</span> gen<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>c2<span class=\"sy1\">)),</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    up <span class=\"sy2\">=</span> iota<br/>    dn<br/>    rt<br/>    lf<br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>maze<span class=\"sy1\">)</span> g2<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">' '</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> dir <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rand<span class=\"sy3\">.</span>Perm<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> dir <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> up<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> r &gt; <span class=\"nu0\">0</span> &amp;&amp; m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">case</span> lf<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> c &gt; <span class=\"nu0\">0</span> &amp;&amp; m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">case</span> dn<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> r &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>c2<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> &amp;&amp; m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">case</span> rt<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> c &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> &amp;&amp; m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    m <span class=\"sy2\">:=</span> newMaze<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">)</span><br/>    m<span class=\"sy3\">.</span>gen<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 70, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE FlexibleContexts #-}</span><br/><span class=\"coMULTI\">{-# LANGUAGE TypeFamilies #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>ST<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>ST<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>STRef<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/>\u00a0<br/>rand <span class=\"sy0\">::</span> Random a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> STRef s StdGen <span class=\"sy0\">-&gt;</span> ST s a<br/>rand range gen <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> liftM <span class=\"br0\">(</span>randomR range<span class=\"br0\">)</span> <span class=\"sy0\">$</span> readSTRef gen<br/>    gen `writeSTRef` g<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> a<br/>\u00a0<br/><span class=\"kw1\">data</span> Maze <span class=\"sy0\">=</span> Maze <span class=\"br0\">{</span>rightWalls<span class=\"sy0\">,</span> belowWalls <span class=\"sy0\">::</span> Array <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>maze <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> StdGen <span class=\"sy0\">-&gt;</span> ST s Maze<br/>maze width height gen <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    visited <span class=\"sy0\">&lt;-</span> mazeArray False<br/>    rWalls <span class=\"sy0\">&lt;-</span> mazeArray True<br/>    bWalls <span class=\"sy0\">&lt;-</span> mazeArray True<br/>    gen <span class=\"sy0\">&lt;-</span> newSTRef gen<br/>    liftM2 <span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rand <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> maxX<span class=\"br0\">)</span> gen<span class=\"br0\">)</span> <span class=\"br0\">(</span>rand <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> maxY<span class=\"br0\">)</span> gen<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;=</span><br/>        visit gen visited rWalls bWalls<br/>    liftM2 Maze <span class=\"br0\">(</span>freeze rWalls<span class=\"br0\">)</span> <span class=\"br0\">(</span>freeze bWalls<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span> visit gen visited rWalls bWalls here <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>            writeArray visited here True<br/>            <span class=\"kw1\">let</span> ns <span class=\"sy0\">=</span> neighbors here<br/>            i <span class=\"sy0\">&lt;-</span> rand <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> ns <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> gen<br/>            forM<span class=\"sy0\">_</span> <span class=\"br0\">(</span>ns <span class=\"sy0\">!!</span> i\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> i ns <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> ns<span class=\"br0\">)</span> <span class=\"sy0\">$</span> \\there <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>                seen <span class=\"sy0\">&lt;-</span> readArray visited there<br/>                unless seen <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>                    removeWall here there<br/>                    visit gen visited rWalls bWalls there<br/>          <span class=\"kw1\">where</span> removeWall <span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> writeArray <br/>                    <span class=\"br0\">(</span><span class=\"kw1\">if</span> x1 <span class=\"sy0\">==</span> x2 <span class=\"kw1\">then</span> bWalls <span class=\"kw1\">else</span> rWalls<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:min\"><span class=\"kw3\">min</span></a> x1 x2<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:min\"><span class=\"kw3\">min</span></a> y1 y2<span class=\"br0\">)</span><br/>                    False<br/>\u00a0<br/>        neighbors <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>    <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> x <span class=\"sy0\">==</span> maxX <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y    <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>    <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>     y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> y <span class=\"sy0\">==</span> maxY <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>     y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>        maxX <span class=\"sy0\">=</span> width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        maxY <span class=\"sy0\">=</span> height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>        mazeArray <span class=\"sy0\">=</span> newArray <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>maxX<span class=\"sy0\">,</span> maxY<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a> <span class=\"sy0\">-&gt;</span> ST s <span class=\"br0\">(</span>STArray s <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>printMaze <span class=\"sy0\">::</span> Maze <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printMaze <span class=\"br0\">(</span>Maze rWalls bWalls<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">'+'</span>\u00a0: <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">$</span> replicate <span class=\"br0\">(</span>maxX <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"---+\"</span><span class=\"br0\">)</span><br/>    forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> maxY<span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\y <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"|\"</span><br/>        forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> maxX<span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\x <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"   \"</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"sy0\">$</span> <span class=\"kw1\">if</span> rWalls <span class=\"sy0\">!</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"|\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\" \"</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span><br/>        forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> maxX<span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\x <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"+\"</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"sy0\">$</span> <span class=\"kw1\">if</span> bWalls <span class=\"sy0\">!</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"---\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"   \"</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"+\"</span><br/>  <span class=\"kw1\">where</span> maxX <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">$</span> bounds rWalls<span class=\"br0\">)</span><br/>        maxY <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">$</span> bounds rWalls<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> getStdGen <span class=\"sy0\">&gt;&gt;=</span> stToIO <span class=\"sy0\">.</span> maze <span class=\"nu0\">11</span> <span class=\"nu0\">8</span> <span class=\"sy0\">&gt;&gt;=</span> printMaze</pre>"}, {"lang": "Icon and Unicon", "loc": 93, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span>                               <span class=\"co1\"># generate rows x col maze</span><br/>   <span class=\"sy1\">/</span>mh <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"nu0\">12</span>                            <span class=\"co1\"># or take defaults 12 x 16</span><br/>   <span class=\"sy1\">/</span>mw <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"nu0\">16</span><br/>   mz <span class=\"sy1\">:=</span> DisplayMaze<span class=\"br0\">(</span>GenerateMaze<span class=\"br0\">(</span>mh<span class=\"sy1\">,</span>mw<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw5\">WriteImage</span><span class=\"br0\">(</span>mz<span class=\"sy1\">.</span><span class=\"me1\">filename</span><span class=\"br0\">)</span>                      <span class=\"co1\"># save file</span><br/>   <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span>mz<span class=\"sy1\">.</span><span class=\"me1\">window</span><span class=\"sy1\">,</span><span class=\"st0\">\"canvas=normal\"</span><span class=\"br0\">)</span>           <span class=\"co1\"># show maze in hidden window</span><br/>   <span class=\"kw1\">until</span> <span class=\"kw5\">Event</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lpress</span>                     <span class=\"co1\"># wait for left mouse press</span><br/>   <span class=\"kw4\">close</span><span class=\"br0\">(</span>mz<span class=\"sy1\">.</span><span class=\"me1\">window</span><span class=\"br0\">)</span>                            <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> FINISH <span class=\"nu0\">64</span> <span class=\"co1\"># exit</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> START  <span class=\"nu0\">32</span> <span class=\"co1\"># entrance</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> PATH  <span class=\"nu0\">128</span> <br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> SEEN   <span class=\"nu0\">16</span> <span class=\"co1\"># bread crumbs for generator</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> NORTH   <span class=\"nu0\">8</span> <span class=\"co1\"># sides ...</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> EAST    <span class=\"nu0\">4</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> SOUTH   <span class=\"nu0\">2</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> WEST    <span class=\"nu0\">1</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> EMPTY   <span class=\"nu0\">0</span> <span class=\"co1\"># like new</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> GenerateMaze<span class=\"br0\">(</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">)</span>                     <span class=\"co1\">#: Depth First Maze Generation</span><br/><span class=\"kw2\">static</span> maze<span class=\"sy1\">,</span>h<span class=\"sy1\">,</span>w<span class=\"sy1\">,</span>rd <br/>   <span class=\"kw1\">if</span> <span class=\"sy1\">/</span>maze <span class=\"kw1\">then</span> <span class=\"br0\">{</span>                              <span class=\"co1\"># BEGING - No maze yet</span><br/>      <span class=\"sy1\">/</span>h <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> r<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span>r<span class=\"sy1\">,</span><span class=\"nu0\">205</span><span class=\"br0\">)</span>      <span class=\"co1\"># valid size 2x2 or better</span><br/>      <span class=\"sy1\">/</span>w <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> c<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span>r<span class=\"sy1\">,</span><span class=\"nu0\">205</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">every</span> <span class=\"sy1\">!</span><span class=\"br0\">(</span>maze <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>w<span class=\"sy1\">,</span>EMPTY<span class=\"br0\">)</span> <span class=\"co1\"># shinny new empty maze</span><br/>      start  <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"sy1\">?</span>h<span class=\"sy1\">,?</span>w<span class=\"sy1\">,?</span><span class=\"nu0\">4</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>START<span class=\"br0\">]</span>              <span class=\"co1\"># random [r,c] start &amp; finish                 </span><br/>      finish <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"sy1\">?</span>h<span class=\"sy1\">,?</span>w<span class=\"sy1\">,</span><span class=\"br0\">(</span>start<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">%</span>4<span class=\"sy1\">,</span>FINISH<span class=\"br0\">]</span>   <span class=\"co1\"># w/ opposite side exponent</span><br/>      <span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> start <span class=\"sy1\">|</span> finish <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">case</span> x<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">^</span> x<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"br0\">{</span>             <span class=\"co1\"># get side from exponent and </span><br/>            NORTH <span class=\"sy1\">:</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span>                   <span class=\"co1\"># project r,c to selected edge</span><br/>            EAST  <span class=\"sy1\">:</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> w<br/>            SOUTH <span class=\"sy1\">:</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> h         <br/>            WEST  <span class=\"sy1\">:</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span>   <br/>         maze<span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> x<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>        <span class=\"co1\"># transcribe s/f to maze</span><br/>         <span class=\"br0\">}</span><br/>      rd <span class=\"sy1\">:=</span> <span class=\"br0\">[</span>NORTH<span class=\"sy1\">,</span> EAST<span class=\"sy1\">,</span> SOUTH<span class=\"sy1\">,</span> WEST<span class=\"br0\">]</span>          <span class=\"co1\"># initial list of directions     </span><br/>      GenerateMaze<span class=\"br0\">(</span>start<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>start<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>           <span class=\"co1\"># recurse through maze     </span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">(</span><span class=\"sy1\">.</span><span class=\"me1\">maze</span><span class=\"sy1\">,</span>maze <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span><span class=\"br0\">)</span>             <span class=\"co1\"># return maze, reset for next</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span>         <span class=\"co1\"># ----------------------- recursed to clear insize of maze</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span><span class=\"sy1\">,</span>SEEN<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>        <span class=\"co1\"># in bounds and not SEEN yet?</span><br/>         maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> SEEN                     <span class=\"co1\"># Mark current cell as visited   </span><br/>         <span class=\"kw1\">every</span> <span class=\"sy1\">!</span>rd <span class=\"sy1\">:=:</span> <span class=\"sy1\">?</span>rd                      <span class=\"co1\"># randomize list of directions</span><br/>         <span class=\"kw1\">every</span> d <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>rd <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">case</span> d <span class=\"kw1\">of</span> <span class=\"br0\">{</span>                         <span class=\"co1\"># try all, succeed &amp; clear wall</span><br/>               NORTH <span class=\"sy1\">:</span>  maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> GenerateMaze<span class=\"br0\">(</span>r<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>c<span class=\"br0\">)</span><span class=\"sy1\">,</span> NORTH<span class=\"br0\">)</span><br/>               EAST  <span class=\"sy1\">:</span>  maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> GenerateMaze<span class=\"br0\">(</span>r<span class=\"sy1\">,</span>c<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>  EAST<span class=\"br0\">)</span><br/>               SOUTH <span class=\"sy1\">:</span>  maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> GenerateMaze<span class=\"br0\">(</span>r<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>c<span class=\"br0\">)</span><span class=\"sy1\">,</span> SOUTH<span class=\"br0\">)</span><br/>               WEST  <span class=\"sy1\">:</span>  maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> GenerateMaze<span class=\"br0\">(</span>r<span class=\"sy1\">,</span>c<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>  WEST<span class=\"br0\">)</span>   <br/>               <span class=\"br0\">}</span><br/>         <span class=\"kw1\">return</span>                                 <span class=\"co1\"># signal success to caller</span><br/>         <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> CELL   <span class=\"nu0\">20</span>                                   <span class=\"co1\"># cell size in pixels</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> BORDER <span class=\"nu0\">30</span>                                   <span class=\"co1\"># border size in pixels</span><br/>\u00a0<br/><span class=\"kw1\">record</span> mazeinfo<span class=\"br0\">(</span>window<span class=\"sy1\">,</span>maze<span class=\"sy1\">,</span>filename<span class=\"br0\">)</span>               <span class=\"co1\"># keepers</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> DisplayMaze<span class=\"br0\">(</span>maze<span class=\"br0\">)</span>                         <span class=\"co1\">#: show it off</span><br/><span class=\"kw1\">if</span> CELL <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span> <span class=\"kw1\">then</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>CELL<span class=\"br0\">)</span>                   <span class=\"co1\"># too small</span><br/>\u00a0<br/>wh <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>ch <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>mh <span class=\"sy1\">:=</span> <span class=\"sy1\">*</span>maze  <span class=\"br0\">)</span> <span class=\"sy1\">*</span> CELL<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">2</span> <span class=\"sy1\">*</span> BORDER   <span class=\"co1\"># win, cell, maze height</span><br/>ww <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>cw <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>mw <span class=\"sy1\">:=</span> <span class=\"sy1\">*</span>maze<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> CELL<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">2</span> <span class=\"sy1\">*</span> BORDER  <span class=\"co1\"># win, cell, maze width</span><br/>\u00a0<br/>wparms <span class=\"sy1\">:=</span> <span class=\"br0\">[</span> sprintf<span class=\"br0\">(</span><span class=\"st0\">\"Maze\u00a0%dx%d\"</span><span class=\"sy1\">,*</span>maze<span class=\"sy1\">,*</span>maze<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>   <span class=\"co1\"># window parameters</span><br/>            <span class=\"st0\">\"g\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"bg=white\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"canvas=hidden\"</span><span class=\"sy1\">,</span>      <br/>            sprintf<span class=\"br0\">(</span><span class=\"st0\">\"size=%d,%d\"</span><span class=\"sy1\">,</span>ww<span class=\"sy1\">,</span>wh<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            sprintf<span class=\"br0\">(</span><span class=\"st0\">\"dx=%d\"</span><span class=\"sy1\">,</span>BORDER<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            sprintf<span class=\"br0\">(</span><span class=\"st0\">\"dy=%d\"</span><span class=\"sy1\">,</span>BORDER<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy1\">&amp;</span><span class=\"kw3\">window</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"sy1\">!</span>wparms <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Unable to open Window\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw5\">Fg</span><span class=\"br0\">(</span><span class=\"st0\">\"black\"</span><span class=\"br0\">)</span>                                         <span class=\"co1\"># Draw full grid</span><br/><span class=\"kw1\">every</span> <span class=\"kw5\">DrawLine</span><span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> cw by CELL<span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>ch<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"co1\"># . verticals</span><br/><span class=\"kw1\">every</span> <span class=\"kw5\">DrawLine</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>y <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> ch by CELL<span class=\"sy1\">,</span>cw<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>y<span class=\"br0\">)</span>       <span class=\"co1\"># . horizontals</span><br/>\u00a0<br/><span class=\"kw5\">Fg</span><span class=\"br0\">(</span><span class=\"st0\">\"white\"</span><span class=\"br0\">)</span>                                         <span class=\"co1\"># Set to erase lines</span><br/><span class=\"kw1\">every</span> y <span class=\"sy1\">:=</span> CELL<span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> mh<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> x <span class=\"sy1\">:=</span> CELL<span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> mw<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"dx=\"</span><span class=\"sy1\">||</span>x<span class=\"sy1\">+</span>BORDER<span class=\"sy1\">,</span><span class=\"st0\">\"dy=\"</span><span class=\"sy1\">||</span>y<span class=\"sy1\">+</span>BORDER<span class=\"br0\">)</span>         <span class=\"co1\"># position @ cell r,c</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span><span class=\"sy1\">,</span>NORTH<span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw5\">DrawLine</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>CELL<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>            <br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span><span class=\"sy1\">,</span>EAST<span class=\"br0\">)</span>  <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw5\">DrawLine</span><span class=\"br0\">(</span>CELL<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>CELL<span class=\"sy1\">,</span>CELL<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>        <br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span><span class=\"sy1\">,</span>SOUTH<span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw5\">DrawLine</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>CELL<span class=\"sy1\">,</span>CELL<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>CELL<span class=\"br0\">)</span>                <br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>maze<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span><span class=\"sy1\">,</span>WEST<span class=\"br0\">)</span>  <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw5\">DrawLine</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>CELL<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>            <br/>   <span class=\"br0\">}</span>   <br/>\u00a0<br/><span class=\"kw1\">return</span> mazeinfo<span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">window</span><span class=\"sy1\">,</span>maze<span class=\"sy1\">,</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"maze-%dx%d-%d.gif\"</span><span class=\"sy1\">,</span>r<span class=\"sy1\">,</span>c<span class=\"sy1\">,&amp;</span><span class=\"kw3\">now</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 31, "block": "<pre class=\"j highlighted_source\">maze=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  assert.<span class=\"nu0\">0</span>&lt;:<span class=\"kw2\">n</span>=.&lt;:<span class=\"kw2\">x</span>*<span class=\"kw2\">y</span><br/>  horiz=. <span class=\"nu0\">0</span>$~<span class=\"kw2\">x</span>,<span class=\"kw2\">y</span>-<span class=\"nu0\">1</span><br/>  verti=. <span class=\"nu0\">0</span>$~<span class=\"sy0\">(</span><span class=\"kw2\">x</span>-<span class=\"nu0\">1</span><span class=\"sy0\">)</span>,<span class=\"kw2\">y</span><br/>  path=.,:here=.\u00a0?<span class=\"kw2\">x</span>,<span class=\"kw2\">y</span><br/>  unvisited=.<span class=\"nu0\">0</span> <span class=\"sy0\">(</span>&lt;here+<span class=\"nu0\">1</span><span class=\"sy0\">)</span>} <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,~|:<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,~<span class=\"nu0\">1</span>$~<span class=\"kw2\">y</span>,<span class=\"kw2\">x</span><br/>  while.<span class=\"kw2\">n</span> <span class=\"kw1\">do.</span><br/>    neighbors=. here+\"<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>,-<span class=\"sy0\">)</span>=<span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>    neighbors=. neighbors #~ <span class=\"sy0\">(</span>&lt;\"<span class=\"nu0\">1</span> neighbors+<span class=\"nu0\">1</span><span class=\"sy0\">)</span> {unvisited<br/>    <span class=\"kw1\">if.</span>#neighbors <span class=\"kw1\">do.</span><br/>      <span class=\"kw2\">n</span>=.<span class=\"kw2\">n</span>-<span class=\"nu0\">1</span><br/>      next=. <span class=\"sy0\">(</span>{~\u00a0<a class=\"__cf_email__\" data-cfemail=\"4a750a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span> neighbors<br/>      unvisited=.<span class=\"nu0\">0</span> <span class=\"sy0\">(</span>&lt;next+<span class=\"nu0\">1</span><span class=\"sy0\">)</span>} unvisited<br/>      <span class=\"kw1\">if.</span>{.next=here<br/>      <span class=\"kw1\">do.</span> horiz=.<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>&lt;-:here+next-<span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">)</span>} horiz<br/>      <span class=\"kw1\">else.</span> verti=. <span class=\"nu0\">1</span> <span class=\"sy0\">(</span>&lt;-:here+next-<span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"sy0\">)</span>} verti <span class=\"kw1\">end.</span><br/>      path=.path,here=.next<br/>    <span class=\"kw1\">else.</span><br/>      here=.{:path<br/>      path=.}:path<br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/>  horiz;verti<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>display=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  size=. &gt;.&amp;$&amp;&gt;/<span class=\"kw2\">y</span><br/>  text=. <span class=\"sy0\">(</span>}:<span class=\"nu0\">1</span> <span class=\"nu0\">3</span>$~<span class=\"nu0\">2</span>*<span class=\"nu0\">1</span>+{:size<span class=\"sy0\">)</span>#\"<span class=\"nu0\">1</span>\":size$&lt;<span class=\"st_h\">' '</span><br/>  <span class=\"st_h\">'hdoor vdoor'</span>=. <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>&amp;*&amp;.&gt;&amp;.&gt; <span class=\"sy0\">(</span>#&amp;,{@;&amp;i./@$<span class=\"sy0\">)</span>&amp;.&gt; <span class=\"kw2\">y</span><br/>  <span class=\"st_h\">' '</span> <span class=\"sy0\">(</span>a:-.~<span class=\"nu0\">0</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">0</span> <span class=\"nu0\">2</span>; <span class=\"nu0\">0</span> <span class=\"nu0\">3</span>;<span class=\"sy0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span>-~$text<span class=\"sy0\">)</span>;<span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span>&amp;+&amp;.&gt; hdoor<span class=\"sy0\">)</span>,,vdoor+&amp;.&gt;\"<span class=\"nu0\">0</span>/<span class=\"nu0\">2</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">2</span> <span class=\"nu0\">2</span>;<span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"sy0\">)</span>} text<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 91, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">package</span> <span class=\"co2\">org.rosettacode</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * recursive backtracking algorithm<br/> * shamelessly borrowed from the ruby at<br/> * http://weblog.jamisbuck.org/2010/12/27/maze-generation-recursive-backtracking<br/> */</span><br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> MazeGenerator <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">final</span> <span class=\"kw3\">int</span> x<span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">final</span> <span class=\"kw3\">int</span> y<span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">final</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> maze<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> MazeGenerator<span class=\"br0\">(</span><span class=\"kw3\">int</span> x, <span class=\"kw3\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">this</span>.<span class=\"me1\">x</span> = x<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">this</span>.<span class=\"me1\">y</span> = y<span class=\"sy0\">;</span><br/>\t\tmaze = <span class=\"kw2\">new</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"kw2\">this</span>.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">this</span>.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tgenerateMaze<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw3\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> y<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">// draw the north edge</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> j = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">;</span> j++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>maze<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"+---\"</span>\u00a0: <span class=\"st0\">\"+   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"co1\">// draw the west edge</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> j = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">;</span> j++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>maze<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"|   \"</span>\u00a0: <span class=\"st0\">\"    \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"co1\">// draw the bottom line</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> j = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">;</span> j++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"+---\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw3\">void</span> generateMaze<span class=\"br0\">(</span><span class=\"kw3\">int</span> cx, <span class=\"kw3\">int</span> cy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tDIR<span class=\"br0\">[</span><span class=\"br0\">]</span> dirs = DIR.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>dirs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>DIR dir\u00a0: dirs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw3\">int</span> nx = cx + dir.<span class=\"me1\">dx</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw3\">int</span> ny = cy + dir.<span class=\"me1\">dy</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>between<span class=\"br0\">(</span>nx, x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> between<span class=\"br0\">(</span>ny, y<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>nx<span class=\"br0\">]</span><span class=\"br0\">[</span>ny<span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tmaze<span class=\"br0\">[</span>cx<span class=\"br0\">]</span><span class=\"br0\">[</span>cy<span class=\"br0\">]</span> |= dir.<span class=\"me1\">bit</span><span class=\"sy0\">;</span><br/>\t\t\t\tmaze<span class=\"br0\">[</span>nx<span class=\"br0\">]</span><span class=\"br0\">[</span>ny<span class=\"br0\">]</span> |= dir.<span class=\"me1\">opposite</span>.<span class=\"me1\">bit</span><span class=\"sy0\">;</span><br/>\t\t\t\tgenerateMaze<span class=\"br0\">(</span>nx, ny<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> between<span class=\"br0\">(</span><span class=\"kw3\">int</span> v, <span class=\"kw3\">int</span> upper<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">return</span> <span class=\"br0\">(</span>v <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>v <span class=\"sy0\">&lt;</span> upper<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">enum</span> DIR <span class=\"br0\">{</span><br/>\t\tN<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, S<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, E<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, W<span class=\"br0\">(</span><span class=\"nu0\">8</span>, -<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">private</span> <span class=\"kw2\">final</span> <span class=\"kw3\">int</span> bit<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">private</span> <span class=\"kw2\">final</span> <span class=\"kw3\">int</span> dx<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">private</span> <span class=\"kw2\">final</span> <span class=\"kw3\">int</span> dy<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">private</span> DIR opposite<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// use the static initializer to resolve forward references</span><br/>\t\t<span class=\"kw2\">static</span> <span class=\"br0\">{</span><br/>\t\t\tN.<span class=\"me1\">opposite</span> = S<span class=\"sy0\">;</span><br/>\t\t\tS.<span class=\"me1\">opposite</span> = N<span class=\"sy0\">;</span><br/>\t\t\tE.<span class=\"me1\">opposite</span> = W<span class=\"sy0\">;</span><br/>\t\t\tW.<span class=\"me1\">opposite</span> = E<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">private</span> DIR<span class=\"br0\">(</span><span class=\"kw3\">int</span> bit, <span class=\"kw3\">int</span> dx, <span class=\"kw3\">int</span> dy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">this</span>.<span class=\"me1\">bit</span> = bit<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">this</span>.<span class=\"me1\">dx</span> = dx<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">this</span>.<span class=\"me1\">dy</span> = dy<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">int</span> x = args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">int</span> y = args.<span class=\"me1\">length</span> == <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\t\tMazeGenerator maze = <span class=\"kw2\">new</span> MazeGenerator<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tmaze.<span class=\"me1\">display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 63, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> maze<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> n<span class=\"sy0\">=</span>x<span class=\"sy0\">*</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>alert<span class=\"br0\">(</span><span class=\"st0\">\"illegal maze dimensions\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">return</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">var</span> horiz <span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> horiz<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t    verti <span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> verti<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t    here <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t    path <span class=\"sy0\">=</span> <span class=\"br0\">[</span>here<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t    unvisited <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tunvisited<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tunvisited<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>j<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> j<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> k<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>j <span class=\"sy0\">!=</span> here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">||</span> k <span class=\"sy0\">!=</span> here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\twhile <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> potential <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t    <span class=\"br0\">[</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">var</span> neighbors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>unvisited<span class=\"br0\">[</span>potential<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>potential<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\tneighbors.<span class=\"me1\">push</span><span class=\"br0\">(</span>potential<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>neighbors.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tn <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\tnext<span class=\"sy0\">=</span> neighbors<span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>neighbors.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tunvisited<span class=\"br0\">[</span>next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\thoriz<span class=\"br0\">[</span>next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> <br/>\t\t\t\tverti<span class=\"br0\">[</span><span class=\"br0\">(</span>next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t\tpath.<span class=\"me1\">push</span><span class=\"br0\">(</span>here <span class=\"sy0\">=</span> next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <br/>\t\t\there <span class=\"sy0\">=</span> path.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span>x<span class=\"sy0\">:</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> y<span class=\"sy0\">,</span> horiz<span class=\"sy0\">:</span> horiz<span class=\"sy0\">,</span> verti<span class=\"sy0\">:</span> verti<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> display<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> text<span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>m.<span class=\"me1\">x</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> line<span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> j<span class=\"sy0\">%</span>2<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;</span>m.<span class=\"me1\">y</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> k<span class=\"sy0\">%</span>4<span class=\"br0\">)</span> <br/>\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">'+'</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>j<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> m.<span class=\"me1\">verti</span><span class=\"br0\">[</span>j<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>k<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">'-'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;</span>m.<span class=\"me1\">y</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> k<span class=\"sy0\">%</span>4<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> m.<span class=\"me1\">horiz</span><span class=\"br0\">[</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">'|'</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> line<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> line<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> line<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>m.<span class=\"me1\">x</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> line<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>m.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\ttext.<span class=\"me1\">push</span><span class=\"br0\">(</span>line.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">'<span class=\"es0\">\\r</span><span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> text.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Node.js", "loc": 101, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/><span class=\"coMULTI\">/*<br/> * Imported from http://rosettacode.org/wiki/Maze_generation#JavaScript<br/> * Added asynchronous behaviour to the maze generation.<br/> * <br/> * Port by sigmasoldier<br/> */</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Generates the maze asynchronously.<br/> * @param {Number} x Width of the maze.<br/> * @param {Number} y Height of the maze.<br/> * @returns {Promise} finished when resolved.<br/> */</span><br/><span class=\"kw1\">function</span> maze<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Promise<span class=\"br0\">(</span><span class=\"br0\">(</span>resolve<span class=\"sy0\">,</span> reject<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\t\tlet n<span class=\"sy0\">=</span>x<span class=\"sy0\">*</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\treject<span class=\"br0\">(</span><span class=\"kw1\">new</span> Error<span class=\"br0\">(</span>`illegal maze dimensions <span class=\"br0\">(</span>$<span class=\"br0\">{</span>x<span class=\"br0\">}</span> x $<span class=\"br0\">{</span>y<span class=\"br0\">}</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>`<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\tlet horiz <span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> horiz<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tlet verti <span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> verti<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tlet here <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tlet path <span class=\"sy0\">=</span> <span class=\"br0\">[</span>here<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tlet unvisited <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tunvisited<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>let k<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\tunvisited<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>j<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> j<span class=\"sy0\">&lt;</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> k<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>j <span class=\"sy0\">!=</span> here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">||</span> k <span class=\"sy0\">!=</span> here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\twhile <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tlet potential <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t\t\t\t\t<span class=\"br0\">[</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tlet neighbors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>unvisited<span class=\"br0\">[</span>potential<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>potential<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\tneighbors.<span class=\"me1\">push</span><span class=\"br0\">(</span>potential<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>neighbors.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\tn <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tlet next<span class=\"sy0\">=</span> neighbors<span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>neighbors.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tunvisited<span class=\"br0\">[</span>next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\thoriz<span class=\"br0\">[</span>next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>here<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span> <br/>\t\t\t\t\t\tverti<span class=\"br0\">[</span><span class=\"br0\">(</span>next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>here<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tpath.<span class=\"me1\">push</span><span class=\"br0\">(</span>here <span class=\"sy0\">=</span> next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <br/>\t\t\t\t\there <span class=\"sy0\">=</span> path.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tresolve<span class=\"br0\">(</span><span class=\"br0\">{</span>x<span class=\"sy0\">:</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> y<span class=\"sy0\">,</span> horiz<span class=\"sy0\">:</span> horiz<span class=\"sy0\">,</span> verti<span class=\"sy0\">:</span> verti<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * A mere way of generating text.<br/> * The text (Since it can be large) is generated in a non-blocking way.<br/> * @param {Object} m Maze object.<br/> * @param {Stream} writeTo Optinally, include here a function to write to.<br/> * @returns {Promise} finished when the text is generated.<br/> */</span><br/><span class=\"kw1\">function</span> display<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> writeTo<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Promise<span class=\"br0\">(</span><span class=\"br0\">(</span>resolve<span class=\"sy0\">,</span> reject<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\t\tlet text <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>m.<span class=\"me1\">x</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tlet line <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> j<span class=\"sy0\">%</span>2<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>let k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;</span>m.<span class=\"me1\">y</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> k<span class=\"sy0\">%</span>4<span class=\"br0\">)</span> <br/>\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'+'</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>j<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> m.<span class=\"me1\">verti</span><span class=\"br0\">[</span>j<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>k<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'-'</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>let k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;</span>m.<span class=\"me1\">y</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> k<span class=\"sy0\">%</span>4<span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> m.<span class=\"me1\">horiz</span><span class=\"br0\">[</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'|'</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\tline<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> line<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> line<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> line<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>m.<span class=\"me1\">x</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">==</span> j<span class=\"br0\">)</span> line<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>m.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t\ttext.<span class=\"me1\">push</span><span class=\"br0\">(</span>line.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">'<span class=\"es0\">\\r</span><span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">const</span> OUTPUT <span class=\"sy0\">=</span> text.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> writeTo <span class=\"sy0\">===</span> <span class=\"st0\">'function'</span><span class=\"br0\">)</span><br/>\t\t\twriteTo<span class=\"br0\">(</span>OUTPUT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tresolve<span class=\"br0\">(</span>OUTPUT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>module.<span class=\"me1\">exports</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  maze<span class=\"sy0\">:</span> maze<span class=\"sy0\">,</span><br/>  display<span class=\"sy0\">:</span> display<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 19, "block": "<pre class=\"text highlighted_source\">check(bound::Vector) = cell -&gt; all([1, 1] .\u2264 cell .\u2264 bound)<br/>neighbors(cell::Vector, bound::Vector, step::Int=2) =<br/>    filter(check(bound), map(dir -&gt; cell + step * dir, [[0, 1], [-1, 0], [0, -1], [1, 0]]))<br/>\u00a0<br/>function walk(maze::Matrix, nxtcell::Vector, visited::Vector=[])<br/>    push!(visited, nxtcell)<br/>    for neigh in shuffle(neighbors(nxtcell, size(maze)))<br/>        if neigh \u2209 visited<br/>            maze[round.(Int, (nxtcell + neigh) / 2)...] = 0<br/>            walk(maze, neigh, visited)<br/>        end<br/>    end<br/>    maze<br/>end<br/>function maze(w::Int, h::Int)<br/>    maze = collect(i\u00a0% 2 | j\u00a0% 2 for i in 1:2w+1, j in 1:2h+1)<br/>    firstcell = 2 * [rand(1:w), rand(1:h)]<br/>    return walk(maze, firstcell)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 67, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MazeGenerator<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maze <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    fun generate<span class=\"br0\">(</span>cx<span class=\"sy0\">:</span> Int, cy<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Direction.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nx <span class=\"sy0\">=</span> cx + it.<span class=\"me1\">dx</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ny <span class=\"sy0\">=</span> cy + it.<span class=\"me1\">dy</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>between<span class=\"br0\">(</span>nx, x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> between<span class=\"br0\">(</span>ny, y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>nx<span class=\"br0\">]</span><span class=\"br0\">[</span>ny<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                maze<span class=\"br0\">[</span>cx<span class=\"br0\">]</span><span class=\"br0\">[</span>cy<span class=\"br0\">]</span> <span class=\"sy0\">=</span> maze<span class=\"br0\">[</span>cx<span class=\"br0\">]</span><span class=\"br0\">[</span>cy<span class=\"br0\">]</span> or it.<span class=\"me1\">bit</span><br/>                maze<span class=\"br0\">[</span>nx<span class=\"br0\">]</span><span class=\"br0\">[</span>ny<span class=\"br0\">]</span> <span class=\"sy0\">=</span> maze<span class=\"br0\">[</span>nx<span class=\"br0\">]</span><span class=\"br0\">[</span>ny<span class=\"br0\">]</span> or it.<span class=\"me1\">opposite</span><span class=\"sy0\">!!</span>.<span class=\"me1\">bit</span><br/>                generate<span class=\"br0\">(</span>nx, ny<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun display<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">y</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// draw the north edge</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"me1\">x</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> and <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"+---\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"+   \"</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"co1\">// draw the west edge</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"me1\">x</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> and <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"|   \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"    \"</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// draw the bottom line</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"me1\">x</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"+---\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    inline <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun <span class=\"sy0\">&lt;</span>reified T<span class=\"sy0\">&gt;</span> Array<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> toMutableList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        Collections.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> list.<span class=\"me1\">toTypedArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Direction<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bit<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dx<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dy<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        N<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, S<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, E<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,W<span class=\"br0\">(</span><span class=\"nu0\">8</span>, -<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> opposite<span class=\"sy0\">:</span> Direction<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>\u00a0<br/>        companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>            init <span class=\"br0\">{</span><br/>                N.<span class=\"me1\">opposite</span> <span class=\"sy0\">=</span> S<br/>                S.<span class=\"me1\">opposite</span> <span class=\"sy0\">=</span> N<br/>                E.<span class=\"me1\">opposite</span> <span class=\"sy0\">=</span> W<br/>                W.<span class=\"me1\">opposite</span> <span class=\"sy0\">=</span> E<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun between<span class=\"br0\">(</span>v<span class=\"sy0\">:</span> Int, upper<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> v <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> v <span class=\"sy0\">&lt;</span> upper<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">8</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">8</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a><span class=\"br0\">(</span>MazeGenerator<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        generate<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 75, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span> <span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Fisher-Yates shuffle from http://santos.nfshost.com/shuffling.html</span><br/><span class=\"kw1\">function</span> shuffle<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>t <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> r <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>t<span class=\"br0\">)</span><br/>    t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- builds a width-by-height grid of trues</span><br/><span class=\"kw1\">function</span> initialize_grid<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> a <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> h <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> w <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> a<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- average of a and b</span><br/><span class=\"kw1\">function</span> avg<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/>dirs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"co1\">-- north</span><br/>  <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"co1\">-- east</span><br/>  <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"co1\">-- west</span><br/>  <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"co1\">-- south</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> make_maze<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"br0\">)</span><br/>  w <span class=\"sy0\">=</span> w <span class=\"kw2\">or</span> <span class=\"nu0\">16</span><br/>  h <span class=\"sy0\">=</span> h <span class=\"kw2\">or</span> <span class=\"nu0\">8</span><br/>\u00a0<br/>  <span class=\"kw1\">local</span> map <span class=\"sy0\">=</span> initialize_grid<span class=\"br0\">(</span>w<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> h<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> walk<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>    map<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> d <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><br/>    shuffle<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> dirnum <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">local</span> xx <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> dirs<span class=\"br0\">[</span>dirnum<span class=\"br0\">]</span><span class=\"sy0\">.</span>x<br/>      <span class=\"kw1\">local</span> yy <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> dirs<span class=\"br0\">[</span>dirnum<span class=\"br0\">]</span><span class=\"sy0\">.</span>y<br/>      <span class=\"kw1\">if</span> map<span class=\"br0\">[</span>yy<span class=\"br0\">]</span> <span class=\"kw2\">and</span> map<span class=\"br0\">[</span>yy<span class=\"br0\">]</span><span class=\"br0\">[</span>xx<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        map<span class=\"br0\">[</span>avg<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> yy<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>avg<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xx<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>        walk<span class=\"br0\">(</span>xx<span class=\"sy0\">,</span> yy<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  walk<span class=\"br0\">(</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> w<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">local</span> s <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> h<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> w<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> map<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>make_maze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 15, "block": "<pre class=\"text highlighted_source\">MazeGraphics[m_, n_]\u00a0:= <br/> Block[{$RecursionLimit = Infinity, <br/>   unvisited = Tuples[Range /@ {m, n}], maze}, <br/>  maze = Graphics[{Line[{{#, # - {0, 1}}, {#, # - {1, 0}}}] &amp; /@ <br/>      unvisited, <br/>     Line[{{0, n}, {0, 0}, {m, 0}}]}]; {unvisited = <br/>      DeleteCases[unvisited, #]; <br/>     Do[If[MemberQ[unvisited, neighbor], <br/>       maze = DeleteCases[<br/>         maze, {#, <br/>           neighbor - {1, 1}} | {neighbor, # - {1, 1}}, {5}]; #<a class=\"__cf_email__\" data-cfemail=\"477707\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>        neighbor], {neighbor, <br/>       <a class=\"__cf_email__\" data-cfemail=\"1547747b717a7846747865797055\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{# + {0, 1}, # - {0, 1}, # + {1, 0}, # - {1, <br/>           0}}}]} &amp;@<a class=\"__cf_email__\" data-cfemail=\"da88bbb4beb5b799b2b5b3b9bf9aafb4acb3a9b3aebfbe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>; maze];<br/>maze = MazeGraphics[21, 13]</pre>"}, {"lang": "MATLAB / Octave", "loc": 53, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> M = makeMaze<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    showProgress = false;<br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/colormap.html\"><span class=\"kw2\">colormap</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>;<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>;<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/set.html\"><span class=\"kw2\">set</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/gcf.html\"><span class=\"kw2\">gcf</span></a>,<span class=\"co2\">'color'</span>,<span class=\"co2\">'w'</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    NoWALL      = <span class=\"nu0\">0</span>;<br/>    WALL        = <span class=\"nu0\">2</span>;<br/>    NotVISITED  = -<span class=\"nu0\">1</span>;<br/>    VISITED     = -<span class=\"nu0\">2</span>;<br/>\u00a0<br/>    m = <span class=\"nu0\">2</span>*n+<span class=\"nu0\">3</span>;<br/>    M = NotVISITED<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ones.html\"><span class=\"kw2\">ones</span></a><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    offsets = <span class=\"br0\">[</span>-<span class=\"nu0\">1</span>, m, <span class=\"nu0\">1</span>, -m<span class=\"br0\">]</span>;<br/>\u00a0<br/>    M<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span>:<span class=\"nu0\">2</span>:<span class=\"kw1\">end</span> <span class=\"kw1\">end</span><span class=\"br0\">]</span>,:<span class=\"br0\">)</span> = WALL;<br/>    M<span class=\"br0\">(</span>:,<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span>:<span class=\"nu0\">2</span>:<span class=\"kw1\">end</span> <span class=\"kw1\">end</span><span class=\"br0\">]</span><span class=\"br0\">)</span> = WALL;<br/>\u00a0<br/>    currentCell = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sub2ind.html\"><span class=\"kw2\">sub2ind</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>M<span class=\"br0\">)</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>    M<span class=\"br0\">(</span>currentCell<span class=\"br0\">)</span> = VISITED;<br/>\u00a0<br/>    S = currentCell;<br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>~isempty<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        moves = currentCell + <span class=\"nu0\">2</span>*offsets;<br/>        unvistedNeigbors = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>M<span class=\"br0\">(</span>moves<span class=\"br0\">)</span>==NotVISITED<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>~isempty<span class=\"br0\">(</span>unvistedNeigbors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            next = unvistedNeigbors<span class=\"br0\">(</span>randi<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>unvistedNeigbors<span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            M<span class=\"br0\">(</span>currentCell + offsets<span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"br0\">)</span> = NoWALL;<br/>\u00a0<br/>            newCell = currentCell + <span class=\"nu0\">2</span>*offsets<span class=\"br0\">(</span>next<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span>M<span class=\"br0\">(</span>newCell+<span class=\"nu0\">2</span>*offsets<span class=\"br0\">)</span>==NotVISITED<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                S = <span class=\"br0\">[</span>S newCell<span class=\"br0\">]</span>;<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            currentCell = newCell;<br/>            M<span class=\"br0\">(</span>currentCell<span class=\"br0\">)</span> = VISITED;<br/>        <span class=\"kw1\">else</span><br/>            currentCell = S<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            S = S<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>showProgress<span class=\"br0\">)</span><br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/image.html\"><span class=\"kw2\">image</span></a><span class=\"br0\">(</span>M-VISITED<span class=\"br0\">)</span>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/axis.html\"><span class=\"kw2\">axis</span></a> equal off;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/drawnow.html\"><span class=\"kw2\">drawnow</span></a>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pause.html\"><span class=\"kw2\">pause</span></a><span class=\"br0\">(</span>.01<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/image.html\"><span class=\"kw2\">image</span></a><span class=\"br0\">(</span>M-VISITED<span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/axis.html\"><span class=\"kw2\">axis</span></a> equal off;</pre>"}, {"lang": "Nim", "loc": 37, "block": "<pre class=\"text highlighted_source\">import math, sequtils, strutils<br/>randomize()<br/>\u00a0<br/>template newSeqWith(len: int, init: expr): expr =<br/>  var result {.gensym.} = newSeq[type(init)](len)<br/>  for i in 0 .. &lt;len:<br/>    result[i] = init<br/>  result<br/>\u00a0<br/>iterator randomCover[T](xs: openarray[T]): T =<br/>  var js = toSeq 0..xs.high<br/>  for i in countdown(js.high, 0):<br/>    let j = random(i + 1)<br/>    swap(js[i], js[j])<br/>  for j in js:<br/>    yield xs[j]<br/>\u00a0<br/>const<br/>  w = 14<br/>  h = 10<br/>\u00a0<br/>var<br/>  vis = newSeqWith(h, newSeq[bool](w))<br/>  hor = newSeqWith(h+1, newSeqWith(w, \"+---\"))<br/>  ver = newSeqWith(h, newSeqWith(w, \"|   \") &amp; \"|\")<br/>\u00a0<br/>proc walk(x, y) =<br/>  vis[y][x] = true<br/>  for p in [[x-1,y], [x,y+1], [x+1,y], [x,y-1]].randomCover:<br/>    if p[0] notin 0 .. &lt;w or p[1] notin 0 .. &lt;h or vis[p[1]][p[0]]: continue<br/>    if p[0] == x: hor[max(y, p[1])][x] = \"+   \"<br/>    if p[1] == y: ver[y][max(x, p[0])] = \"    \"<br/>    walk p[0], p[1]<br/>\u00a0<br/>walk random(0..w), random(0..h)<br/>for a,b in zip(hor, ver &amp; @[\"\"]).items:<br/>  echo join(a &amp; \"+\\n\" &amp; b)</pre>"}, {"lang": "OCaml", "loc": 47, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> seen <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">7</span><br/><span class=\"kw1\">let</span> mark t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add seen t <span class=\"kw1\">true</span><br/><span class=\"kw1\">let</span> marked t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>mem seen t<br/>\u00a0<br/><span class=\"kw1\">let</span> walls <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">7</span><br/><span class=\"kw1\">let</span> ord a b <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;=</span> b <span class=\"kw1\">then</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>b,a<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> join a b <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add walls <span class=\"br0\">(</span>ord a b<span class=\"br0\">)</span> <span class=\"kw1\">true</span><br/><span class=\"kw1\">let</span> joined a b <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>mem walls <span class=\"br0\">(</span>ord a b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> nx <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> ny <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> shuffle lst <span class=\"sy0\">=</span><br/>     <span class=\"kw1\">let</span> nl <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>bits <span class=\"br0\">(</span><span class=\"br0\">)</span>, c<span class=\"br0\">)</span><span class=\"br0\">)</span> lst <span class=\"kw1\">in</span><br/>     <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsnd\"><span class=\"kw3\">snd</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> nl<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> get_neighbours <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> lim n k <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> k<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> bounds <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> lim nx x <span class=\"sy0\">&amp;&amp;</span> lim ny y <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter bounds <span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,y<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,y<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span>x,y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span>x,y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> visit cell <span class=\"sy0\">=</span><br/>    mark cell<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">let</span> check k <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>marked k<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>join cell k<span class=\"sy0\">;</span> visit k<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter check <span class=\"br0\">(</span>shuffle <span class=\"br0\">(</span>get_neighbours cell<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> print_maze <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nx <span class=\"kw1\">do</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"+---\"</span><span class=\"sy0\">;</span><span class=\"kw1\">done</span><span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"+\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">let</span> line n j k l s t u <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"br0\">(</span><span class=\"kw1\">if</span> joined <span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span>k,j<span class=\"sy0\">+</span>l<span class=\"br0\">)</span> <span class=\"kw1\">then</span> s <span class=\"kw1\">else</span> t<span class=\"br0\">)</span> <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> u <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> ny<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"|   \"</span><span class=\"sy0\">;</span><br/>      line <span class=\"br0\">(</span>nx<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> j <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"st0\">\"    \"</span> <span class=\"st0\">\"|   \"</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">;</span><br/>      line <span class=\"br0\">(</span>nx<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> j <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"st0\">\"+   \"</span> <span class=\"st0\">\"+---\"</span> <span class=\"st0\">\"+\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"|   \"</span><span class=\"sy0\">;</span><br/>    line <span class=\"br0\">(</span>nx<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ny<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"st0\">\"    \"</span> <span class=\"st0\">\"|   \"</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nx <span class=\"kw1\">do</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"+---\"</span><span class=\"sy0\">;</span><span class=\"kw1\">done</span><span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"+\"</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  visit <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> nx, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> ny<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print_maze <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 36, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"st_h\">'max'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$w</span> <span class=\"sy0\">||=</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$h</span> <span class=\"sy0\">||=</span> <span class=\"nu0\">127</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$avail</span> <span class=\"sy0\">=</span> <span class=\"re0\">$w</span> <span class=\"sy0\">*</span> <span class=\"re0\">$h</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># cell is padded by sentinel col and row, so I don't check array bounds</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@cell</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st_h\">'1'</span><span class=\"br0\">)</span> x <span class=\"re0\">$w</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"br0\">)</span> x <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@ver</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"|  \"</span><span class=\"br0\">)</span> x <span class=\"re0\">$w</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@hor</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"+--\"</span><span class=\"br0\">)</span> x <span class=\"re0\">$w</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> walk <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$cell</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$avail</span><span class=\"sy0\">--</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span>\t<span class=\"co1\"># no more bottles, er, cells</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@d</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">@d</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@d</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">@d</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$i</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$i</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"re0\">$cell</span><span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$x1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$hor</span><span class=\"br0\">[</span> max<span class=\"br0\">(</span><span class=\"re0\">$y1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'+  '</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"re0\">$y1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$ver</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span> max<span class=\"br0\">(</span><span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'   '</span> <span class=\"br0\">}</span><br/>\t\twalk<span class=\"br0\">(</span><span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>walk<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">$w</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># generate</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\t\t\t<span class=\"co1\"># display</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$hor</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"+<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$ver</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"|<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$h</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 87, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> mapping <span class=\"sy0\">=</span> <span class=\"sy0\">:</span>OPEN<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t      <span class=\"sy0\">:</span>N<span class=\"sy0\">&lt;</span> \u2575 <span class=\"sy0\">&gt;,</span><br/>\t\t      <span class=\"sy0\">:</span>E<span class=\"sy0\">&lt;</span> \u2576 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>NE<span class=\"sy0\">&lt;</span> \u2514 <span class=\"sy0\">&gt;,</span><br/>\t\t      <span class=\"sy0\">:</span>S<span class=\"sy0\">&lt;</span> \u2577 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>NS<span class=\"sy0\">&lt;</span> \u2502 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>ES<span class=\"sy0\">&lt;</span> \u250c <span class=\"sy0\">&gt;,</span><br/>\t\t    <span class=\"sy0\">:</span>NES<span class=\"sy0\">&lt;</span> \u251c <span class=\"sy0\">&gt;,</span><br/>\t\t      <span class=\"sy0\">:</span>W<span class=\"sy0\">&lt;</span> \u2574 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>NW<span class=\"sy0\">&lt;</span> \u2518 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>EW<span class=\"sy0\">&lt;</span> \u2500 <span class=\"sy0\">&gt;,</span><br/>\t\t    <span class=\"sy0\">:</span>NEW<span class=\"sy0\">&lt;</span> \u2534 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>SW<span class=\"sy0\">&lt;</span> \u2510 <span class=\"sy0\">&gt;,</span><br/>\t\t    <span class=\"sy0\">:</span>NSW<span class=\"sy0\">&lt;</span> \u2524 <span class=\"sy0\">&gt;,</span><br/>\t\t    <span class=\"sy0\">:</span>ESW<span class=\"sy0\">&lt;</span> \u252c <span class=\"sy0\">&gt;,</span><br/>\t\t   <span class=\"sy0\">:</span>NESW<span class=\"sy0\">&lt;</span> \u253c <span class=\"sy0\">&gt;,</span><br/>\t\t   <span class=\"sy0\">:</span>TODO<span class=\"sy0\">&lt;</span> <span class=\"kw1\">x</span> <span class=\"sy0\">&gt;,</span><br/>\t          <span class=\"sy0\">:</span>TRIED<span class=\"sy0\">&lt;</span> \u00b7 <span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">enum</span> Sym <span class=\"br0\">(</span>mapping<span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@ch</span> <span class=\"sy0\">=</span> mapping<span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">enum</span> Direction <span class=\"sy0\">&lt;</span>DeadEnd Up Right Down Left<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> gen_maze <span class=\"br0\">(</span> <span class=\"re0\">$X</span><span class=\"sy0\">,</span><br/>               <span class=\"re0\">$Y</span><span class=\"sy0\">,</span><br/>               <span class=\"re0\">$start_x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"re0\">$X</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>               <span class=\"re0\">$start_y</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"re0\">$Y</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@maze</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat ES<span class=\"sy0\">,</span> <span class=\"sy0\">-</span>N<span class=\"sy0\">,</span> <span class=\"br0\">(</span>ESW<span class=\"sy0\">,</span> EW<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> SW <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat <span class=\"br0\">(</span>NS<span class=\"sy0\">,</span> TODO<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span><span class=\"sy0\">,</span> NS <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$Y</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat NES<span class=\"sy0\">,</span> EW<span class=\"sy0\">,</span> <span class=\"br0\">(</span>NESW<span class=\"sy0\">,</span> EW<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> NSW <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat <span class=\"br0\">(</span>NS<span class=\"sy0\">,</span> TODO<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span><span class=\"sy0\">,</span> NS <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat NE<span class=\"sy0\">,</span> <span class=\"br0\">(</span>EW<span class=\"sy0\">,</span> NEW<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>NS<span class=\"sy0\">,</span> NW <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$start_y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$start_x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@stack</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$start_x</span><span class=\"sy0\">,</span> <span class=\"re0\">$start_y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> pick_direction<span class=\"br0\">(</span> <span class=\"re0\">$current</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"re0\">$current</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$current</span> <span class=\"sy0\">=</span> move<span class=\"br0\">(</span> <span class=\"re0\">$dir</span><span class=\"sy0\">,</span> <span class=\"re0\">$current</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">unless</span> <span class=\"re0\">@stack</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">pop</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@maze</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> pick_direction<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">=</span><br/>\t    <span class=\"br0\">(</span>Up    <span class=\"kw1\">if</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Down  <span class=\"kw1\">if</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Left  <span class=\"kw1\">if</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Right <span class=\"kw1\">if</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@neighbors</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"kw1\">or</span> DeadEnd<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> move <span class=\"br0\">(</span><span class=\"re0\">$dir</span><span class=\"sy0\">,</span> <span class=\"re0\">@cur</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@cur</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">given</span> <span class=\"re0\">$dir</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">when</span> Up    <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"sy0\">--</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> E<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">--</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> W<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Down  <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"sy0\">++</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> E<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> W<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Left  <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">--</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> S<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">--</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> N<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Right <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">++</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> S<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> N<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <br/>\t<span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> display <span class=\"br0\">(</span><span class=\"re0\">@maze</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@maze</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@y</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">@y</span><span class=\"sy0\">.</span><span class=\"me1\">rotor</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">print</span> <span class=\"re0\">@ch</span><span class=\"br0\">[</span><span class=\"kw3\">abs</span> <span class=\"re0\">$w</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"re0\">$c</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"re0\">@ch</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"kw1\">x</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span> <br/>\t    <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">@ch</span><span class=\"br0\">[</span><span class=\"kw3\">abs</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">' '</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">say</span> <span class=\"re0\">@ch</span><span class=\"br0\">[</span><span class=\"re0\">@y</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>display gen_maze<span class=\"br0\">(</span> <span class=\"nu0\">29</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 46, "block": "<pre class=\"text highlighted_source\">--<br/>-- grid is eg for w=3,h=2: {\"+---+---+---+\",    -- (\"wall\")<br/>--                          \"|\u00a0? |\u00a0? |\u00a0? |\",    -- (\"cell\")<br/>--                          \"+---+---+---+\",    -- (\"wall\")<br/>--                          \"|\u00a0? |\u00a0? |\u00a0? |\",    -- (\"cell\")<br/>--                          \"+---+---+---+\",    -- (\"wall\")<br/>--                          \"\"} -- (for a trailing \\n)<br/>--<br/>-- note those\u00a0?(x,y) are at [y*2][x*4-1], and we navigate<br/>-- using y=2..2*h (+/-2), x=3..w*4-1 (+/-4) directly.<br/>--<br/>constant w = 11, h = 8<br/>\u00a0<br/>sequence wall = join(repeat(\"+\",w+1),\"---\")&amp;\"\\n\",<br/>         cell = join(repeat(\"|\",w+1),\"\u00a0? \")&amp;\"\\n\",<br/>         grid = split(join(repeat(wall,h+1),cell),'\\n')<br/>\u00a0<br/>procedure amaze(integer x, integer y)<br/>    grid[y][x] = ' '                        -- mark cell visited<br/>    sequence p = shuffle({{x-4,y},{x,y+2},{x+4,y},{x,y-2}})<br/>    for i=1 to length(p) do<br/>        integer {nx,ny} = p[i]<br/>        if nx&gt;1 and nx&lt;w*4 and ny&gt;1 and ny&lt;=2*h and grid[ny][nx]='?' then<br/>            integer mx = (x+nx)/2<br/>            grid[(y+ny)/2][mx-1..mx+1] = ' ' -- knock down wall<br/>            amaze(nx,ny)<br/>        end if<br/>    end for<br/>end procedure<br/>\u00a0<br/>function heads()<br/>    return rand(2)=1 -- 50:50 true(1)/false(0)<br/>end function<br/>\u00a0<br/>integer {x,y} = {(rand(w)*4)-1,rand(h)*2}<br/>amaze(x,y)<br/>-- mark start pos<br/>grid[y][x] = '*'<br/>-- add a random door (heads=rhs/lhs, tails=top/btm)<br/>if heads() then<br/>    grid[rand(h)*2][heads()*w*4-1] = ' '<br/>else<br/>    x = rand(w)*4-1<br/>    grid[heads()*h*2+1][x-1..x+1] = ' '<br/>end if<br/>puts(1,join(grid,'\\n'))</pre>"}, {"lang": "PHP", "loc": 148, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">class</span> Maze <br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$width</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$heigth</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$grid</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$path</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$horWalls</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$vertWalls</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$dirs</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$isDebug</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$debug</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">height</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">path</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>        <br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">dirs</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// array of coordinates of N,S,W,E</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">horWalls</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// list of removed horizontal walls (---+)        </span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">vertWalls</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"co1\">// list of removed vertical walls (|)        </span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">isDebug</span> <span class=\"sy0\">=</span> <span class=\"re0\">$debug</span><span class=\"sy0\">;</span> <span class=\"co1\">// debug flag</span><br/>\u00a0<br/>        <span class=\"co1\">// generate the maze:</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">generate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> <span class=\"kw2\">function</span> generate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>        <br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">initMaze</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// init the stack and an unvisited grid</span><br/>        <span class=\"co1\">// start from a random cell and then proceed recursively</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">walk</span><span class=\"br0\">(</span><a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">height</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>    * Actually prints the Maze, on stdOut. Put in a separate method to allow extensibility<br/>    * For simplicity sake doors are positioned on the north wall and east wall<br/>    */</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> printOut<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Horizontal walls: <span class=\"es6\">%s</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/json_encode\"><span class=\"kw3\">json_encode</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">horWalls</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Vertical walls: <span class=\"es6\">%s</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/json_encode\"><span class=\"kw3\">json_encode</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">vertWalls</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <br/>\u00a0<br/>        <span class=\"re0\">$northDoor</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$eastDoor</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">height</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'+'</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"re0\">$northDoor</span> <span class=\"sy0\">==</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span>\u00a0? <span class=\"st_h\">'   +'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'---+'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> PHP_EOL<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">height</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">vertWalls</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">vertWalls</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'|   '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$eastDoor</span>\u00a0? <span class=\"st_h\">'  '</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'|'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>PHP_EOL<span class=\"sy0\">.</span><span class=\"st_h\">'+'</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">horWalls</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">horWalls</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'---+'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> PHP_EOL<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">echo</span> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>    * Logs to stdOut if debug flag is enabled<br/>    */</span><br/>    <span class=\"kw2\">protected</span> <span class=\"kw2\">function</span> <a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"re0\">$params</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">isDebug</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <a href=\"http://www.php.net/vsprintf\"><span class=\"kw3\">vsprintf</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_shift\"><span class=\"kw3\">array_shift</span></a><span class=\"br0\">(</span><span class=\"re0\">$params</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$params</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>PHP_EOL<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">function</span> walk<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Entering cell\u00a0%d,%d'</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// mark current cell as visited     </span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span> <br/>        <span class=\"co1\">// add cell to path</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">path</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// get list of all neighbors</span><br/>        <span class=\"re0\">$neighbors</span> <span class=\"sy0\">=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getNeighbors</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>       <br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Valid neighbors: <span class=\"es6\">%s</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/json_encode\"><span class=\"kw3\">json_encode</span></a><span class=\"br0\">(</span><span class=\"re0\">$neighbors</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$neighbors</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Dead end, we need now to backtrack, if there's still any cell left to be visited</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Start backtracking along path: <span class=\"es6\">%s</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/json_encode\"><span class=\"kw3\">json_encode</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">path</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.php.net/array_pop\"><span class=\"kw3\">array_pop</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">path</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">path</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$next</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_pop\"><span class=\"kw3\">array_pop</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">path</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">walk</span><span class=\"br0\">(</span><span class=\"re0\">$next</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$next</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>            <br/>            <span class=\"co1\">// randomize neighbors, as per request</span><br/>            <a href=\"http://www.php.net/shuffle\"><span class=\"kw3\">shuffle</span></a><span class=\"br0\">(</span><span class=\"re0\">$neighbors</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$neighbors</span> <span class=\"kw1\">as</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$nextX</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$nextY</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$nextX</span> <span class=\"sy0\">==</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$wallY</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/max\"><span class=\"kw3\">max</span></a><span class=\"br0\">(</span><span class=\"re0\">$nextY</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"st0\">\"New cell is on the same column (<span class=\"es6\">%d</span>,<span class=\"es6\">%d</span>), removing <span class=\"es6\">%d</span>, (<span class=\"es6\">%d</span>-1) horizontal wall\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$nextX</span><span class=\"sy0\">,</span> <span class=\"re0\">$nextY</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$wallY</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">horWalls</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><a href=\"http://www.php.net/min\"><span class=\"kw3\">min</span></a><span class=\"br0\">(</span><span class=\"re0\">$nextY</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"   +\"</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$nextY</span> <span class=\"sy0\">==</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$wallX</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/max\"><span class=\"kw3\">max</span></a><span class=\"br0\">(</span><span class=\"re0\">$nextX</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"st0\">\"New cell is on the same row (<span class=\"es6\">%d</span>,<span class=\"es6\">%d</span>), removing <span class=\"es6\">%d</span>,<span class=\"es6\">%d</span> vertical wall\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$nextX</span><span class=\"sy0\">,</span> <span class=\"re0\">$nextY</span><span class=\"sy0\">,</span> <span class=\"re0\">$wallX</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">vertWalls</span><span class=\"br0\">[</span><span class=\"re0\">$wallX</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"    \"</span><span class=\"sy0\">;</span>              <br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">walk</span><span class=\"br0\">(</span><span class=\"re0\">$nextX</span><span class=\"sy0\">,</span> <span class=\"re0\">$nextY</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>    * Initialzie an empty grid of $width * $height dimensions<br/>    */</span><br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">function</span> initMaze<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">height</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>    * @param int $x<br/>    * @param int $y<br/>    * @return array<br/>    */</span><br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">function</span> getNeighbors<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span>       <br/>        <span class=\"re0\">$neighbors</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">dirs</span> <span class=\"kw1\">as</span> <span class=\"re0\">$dir</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$nextX</span> <span class=\"sy0\">=</span> <span class=\"re0\">$dir</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$nextY</span> <span class=\"sy0\">=</span> <span class=\"re0\">$dir</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$nextX</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$nextX</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$nextY</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$nextY</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">height</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$nextX</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$nextY</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$neighbors</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$nextX</span><span class=\"sy0\">,</span> <span class=\"re0\">$nextY</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$neighbors</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$maze</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Maze<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$maze</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">printOut</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 30, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(de maze (DX DY)<br/>   (let Maze (grid DX DY)<br/>      (let Fld (get Maze (rand 1 DX) (rand 1 DY))<br/>         (recur (Fld)<br/>            (for Dir (shuffle '((west . east) (east . west) (south . north) (north . south)))<br/>               (with ((car Dir) Fld)<br/>                  (unless (or (: west) (: east) (: south) (: north))<br/>                     (put Fld (car Dir) This)<br/>                     (put This (cdr Dir) Fld)<br/>                     (recurse This) ) ) ) ) )<br/>      (for (X . Col) Maze<br/>         (for (Y . This) Col<br/>            (set This<br/>               (cons<br/>                  (cons<br/>                     (: west)<br/>                     (or<br/>                        (: east)<br/>                        (and (= Y 1) (= X DX)) ) )<br/>                  (cons<br/>                     (: south)<br/>                     (or<br/>                        (: north)<br/>                        (and (= X 1) (= Y DY)) ) ) ) ) ) )<br/>      Maze ) )<br/>\u00a0<br/>(de display (Maze)<br/>   (disp Maze 0 '((This) \"   \")) )</pre>"}, {"lang": "PL/I", "loc": 217, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> mgg<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/* REXX ***************************************************************<br/> * 04.09.2013 Walter Pachl translated from REXX version 3<br/> **********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span><span class=\"kw1\">MIN</span><span class=\"sy0\">,</span><span class=\"kw1\">MOD</span><span class=\"sy0\">,</span><span class=\"kw1\">RANDOM</span><span class=\"sy0\">,</span><span class=\"kw1\">REPEAT</span><span class=\"sy0\">,</span><span class=\"kw1\">SUBSTR</span><span class=\"br0\">)</span> <span class=\"kw1\">Builtin</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">SYSIN</span>    <span class=\"kw1\">STREAM</span> <span class=\"kw1\">INPUT</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">print</span> <span class=\"kw1\">Print</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> imax <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">init</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> jmax <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">init</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> seed <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">init</span><span class=\"br0\">(</span><span class=\"nu0\">4711</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Get</span> <span class=\"kw1\">File</span><span class=\"br0\">(</span><span class=\"kw1\">sysin</span><span class=\"br0\">)</span> <span class=\"kw1\">Data</span><span class=\"br0\">(</span>imax<span class=\"sy0\">,</span>jmax<span class=\"sy0\">,</span>seed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ii   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> jj   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> id   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> jd   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> id<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>imax<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* vertical dimension of a.i.j   */</span><br/> jd<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>jmax<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* horizontal dimension of a.i.j */</span><br/> <span class=\"kw1\">Dcl</span> c <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> c<span class=\"sy0\">=</span><span class=\"kw1\">repeat</span><span class=\"br0\">(</span><span class=\"st0\">'123456789'</span>!!<span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span>!!<br/>                       <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> x <span class=\"kw1\">Bin</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">53</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> x<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ps <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>         <span class=\"coMULTI\">/* first position             */</span><br/> <span class=\"kw1\">Dcl</span> na <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>         <span class=\"coMULTI\">/* number of points used      */</span><br/> <span class=\"kw1\">Dcl</span> si <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                 <span class=\"coMULTI\">/* loop to compute paths      */</span><br/> <span class=\"kw1\">Begin</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span>id<span class=\"sy0\">,</span>jd<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> p<span class=\"br0\">(</span>imax<span class=\"sy0\">,</span>jmax<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"nu0\">1</span> pl<span class=\"br0\">(</span>imax<span class=\"sy0\">*</span>jmax<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> ic <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> jc <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"nu0\">1</span> np<span class=\"br0\">(</span>imax<span class=\"sy0\">*</span>jmax<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> ic <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> jc <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"nu0\">1</span> <span class=\"kw1\">pos</span><span class=\"br0\">(</span>imax<span class=\"sy0\">*</span>jmax<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> ic <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> jc <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> npl <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> a<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                                   <span class=\"coMULTI\">/* mark all borders present   */</span><br/> p<span class=\"sy0\">=</span><span class=\"st0\">'.'</span><span class=\"sy0\">;</span>                                 <span class=\"coMULTI\">/* Initialize all grid points */</span><br/> ii<span class=\"sy0\">=</span>rnd<span class=\"br0\">(</span>imax<span class=\"br0\">)</span><span class=\"sy0\">;</span>                          <span class=\"coMULTI\">/* find a start position      */</span><br/> jj<span class=\"sy0\">=</span>rnd<span class=\"br0\">(</span>jmax<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> si<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span>                       <span class=\"coMULTI\">/* Do Forever - see Leave     */</span><br/>   <span class=\"kw1\">Call</span> path<span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span>              <span class=\"coMULTI\">/* compute a path starting at ii/jj */</span><br/>   <span class=\"kw1\">If</span> na<span class=\"sy0\">=</span>imax<span class=\"sy0\">*</span>jmax <span class=\"kw1\">Then</span>                 <span class=\"coMULTI\">/* all points used            */</span><br/>     <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span>                             <span class=\"coMULTI\">/* we are done                */</span><br/>   <span class=\"kw1\">Call</span> select_next<span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span>             <span class=\"coMULTI\">/* get a new start from a path*/</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> show<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"sy0\">;</span><br/>\u00a0<br/> path<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/**********************************************************************<br/> * compute a path starting from point (ii,jj)<br/> **********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> ii   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> jj   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> nb   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ch   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pp   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   p<span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'1'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">pos</span>.<span class=\"me1\">ic</span><span class=\"br0\">(</span>ps<span class=\"br0\">)</span><span class=\"sy0\">=</span>ii<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">pos</span>.<span class=\"me1\">jc</span><span class=\"br0\">(</span>ps<span class=\"br0\">)</span><span class=\"sy0\">=</span>jj<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> pp<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">50</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* compute a path of maximum length 50*/</span><br/>     nb<span class=\"sy0\">=</span>neighbors<span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* number of free neighbors   */</span><br/>     <span class=\"kw1\">Select</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">When</span><span class=\"br0\">(</span>nb<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>                       <span class=\"coMULTI\">/* just one                   */</span><br/>         <span class=\"kw1\">Call</span> advance<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span>       <span class=\"coMULTI\">/* go for it                  */</span><br/>       <span class=\"kw1\">When</span><span class=\"br0\">(</span>nb<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                   <span class=\"coMULTI\">/* more Than 1                */</span><br/>         ch<span class=\"sy0\">=</span>rnd<span class=\"br0\">(</span>nb<span class=\"br0\">)</span><span class=\"sy0\">;</span>                    <span class=\"coMULTI\">/* choose one possibility     */</span><br/>         <span class=\"kw1\">Call</span> advance<span class=\"br0\">(</span>ch<span class=\"sy0\">,</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span>        <span class=\"coMULTI\">/* and go for that            */</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Otherwise</span>                        <span class=\"coMULTI\">/* none available             */</span><br/>         <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> neighbors<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/**********************************************************************<br/> * count the number of free neighbors of point (i,j)<br/> **********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> i    <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> j    <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">in</span>   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> jn   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> nb   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">in</span><span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">If</span> in<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>     <span class=\"kw1\">Then</span> <span class=\"kw1\">Call</span> <span class=\"kw1\">check</span><span class=\"br0\">(</span><span class=\"kw1\">in</span><span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>nb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">in</span><span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">If</span> in<span class=\"sy0\">&lt;=</span>imax <span class=\"kw1\">Then</span> <span class=\"kw1\">Call</span> <span class=\"kw1\">check</span><span class=\"br0\">(</span><span class=\"kw1\">in</span><span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>nb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   jn<span class=\"sy0\">=</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">If</span> jn<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>     <span class=\"kw1\">Then</span> <span class=\"kw1\">Call</span> <span class=\"kw1\">check</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>jn<span class=\"sy0\">,</span>nb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   jn<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">If</span> jn<span class=\"sy0\">&lt;=</span>jmax <span class=\"kw1\">Then</span> <span class=\"kw1\">Call</span> <span class=\"kw1\">check</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>jn<span class=\"sy0\">,</span>nb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Return</span><span class=\"br0\">(</span>nb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">check</span><span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/**********************************************************************<br/> * check if point (i,j) is free and note it as possible successor<br/> **********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> i    <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> j    <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> n    <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> p<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'.'</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* point is free              */</span><br/>     n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                              <span class=\"coMULTI\">/* number of free neighbors   */</span><br/>     np.<span class=\"me1\">ic</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>i<span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* note it as possible choice */</span><br/>     np.<span class=\"me1\">jc</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>j<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> advance<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span>ch<span class=\"sy0\">,</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/**********************************************************************<br/> * move to the next point of the current path<br/> **********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> ch   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ii   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> jj   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ai   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> aj   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pii  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ii<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pjj  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span>jj<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> z    <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   ii<span class=\"sy0\">=</span>np.<span class=\"me1\">ic</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   jj<span class=\"sy0\">=</span>np.<span class=\"me1\">jc</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   ps<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                               <span class=\"coMULTI\">/* position number            */</span><br/>   <span class=\"kw1\">pos</span>.<span class=\"me1\">ic</span><span class=\"br0\">(</span>ps<span class=\"br0\">)</span><span class=\"sy0\">=</span>ii<span class=\"sy0\">;</span>                       <span class=\"coMULTI\">/* note its coordinates       */</span><br/>   <span class=\"kw1\">pos</span>.<span class=\"me1\">jc</span><span class=\"br0\">(</span>ps<span class=\"br0\">)</span><span class=\"sy0\">=</span>jj<span class=\"sy0\">;</span><br/>   p<span class=\"br0\">(</span>ii<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span>ps<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>             <span class=\"coMULTI\">/* mark the point as used     */</span><br/>   ai<span class=\"sy0\">=</span>pii<span class=\"sy0\">+</span>ii<span class=\"sy0\">;</span>                           <span class=\"coMULTI\">/* vertical border position   */</span><br/>   aj<span class=\"sy0\">=</span>pjj<span class=\"sy0\">+</span>jj<span class=\"sy0\">;</span>                           <span class=\"coMULTI\">/* horizontal border position */</span><br/>   a<span class=\"br0\">(</span>ai<span class=\"sy0\">,</span>aj<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>                          <span class=\"coMULTI\">/* tear the border down       */</span><br/>   na<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                               <span class=\"coMULTI\">/* number of used positions   */</span><br/>   z<span class=\"sy0\">=</span>npl<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                             <span class=\"coMULTI\">/* add the point to the list  */</span><br/>   pl.<span class=\"me1\">ic</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">=</span>ii<span class=\"sy0\">;</span>                         <span class=\"coMULTI\">/* of follow-up start pos.    */</span><br/>   pl.<span class=\"me1\">jc</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">=</span>jj<span class=\"sy0\">;</span><br/>   npl<span class=\"sy0\">=</span>z<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> show<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * Show the resulting maze<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> i <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> j <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ol <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">File</span><span class=\"br0\">(</span><span class=\"kw1\">print</span><span class=\"br0\">)</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'mgg'</span><span class=\"sy0\">,</span>imax<span class=\"sy0\">,</span>jmax<span class=\"sy0\">,</span>seed<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">File</span><span class=\"br0\">(</span><span class=\"kw1\">print</span><span class=\"br0\">)</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">Data</span><span class=\"br0\">(</span>na<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> id<span class=\"sy0\">;</span><br/>     ol<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> jd<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* odd lines                 */</span><br/>         <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* border to be drawn        */</span><br/>           <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>             ol<span class=\"sy0\">=</span>ol!!<span class=\"st0\">'---'</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* draw the border           */</span><br/>           <span class=\"kw1\">Else</span><br/>             ol<span class=\"sy0\">=</span>ol!!<span class=\"st0\">'+'</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* border was torn down      */</span><br/>           <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>             ol<span class=\"sy0\">=</span>ol!!<span class=\"st0\">'   '</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* blanks instead of border  */</span><br/>           <span class=\"kw1\">Else</span><br/>             ol<span class=\"sy0\">=</span>ol!!<span class=\"st0\">'+'</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                          <span class=\"coMULTI\">/* even line                 */</span><br/>         <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span>            <span class=\"coMULTI\">/* even column               */</span><br/>             ol<span class=\"sy0\">=</span>ol!!<span class=\"st0\">'   '</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* moving space              */</span><br/>           <span class=\"kw1\">Else</span>                          <span class=\"coMULTI\">/* odd column                */</span><br/>             ol<span class=\"sy0\">=</span>ol!!<span class=\"st0\">'!'</span><span class=\"sy0\">;</span>                 <span class=\"coMULTI\">/* draw the border           */</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">Else</span>                            <span class=\"coMULTI\">/* border was torn down      */</span><br/>           ol<span class=\"sy0\">=</span>ol!!<span class=\"st0\">' '</span><span class=\"sy0\">;</span>                   <span class=\"coMULTI\">/* blank instead of border   */</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Select</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">When</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>ol<span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'A'</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">When</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>ol<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'B'</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Otherwise</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Put</span> <span class=\"kw1\">File</span><span class=\"br0\">(</span><span class=\"kw1\">print</span><span class=\"br0\">)</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>ol<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> select_next<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span>is<span class=\"sy0\">,</span>js<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/**********************************************************************<br/> * look for a point to start the nnext path<br/> **********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> is <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> js <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> n  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> nb <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> <span class=\"kw1\">Until</span><span class=\"br0\">(</span>nb<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                       <span class=\"coMULTI\">/* loop until one is found   */</span><br/>     n<span class=\"sy0\">=</span>npl<span class=\"sy0\">;</span>                              <span class=\"coMULTI\">/* number of points recorded */</span><br/>     s<span class=\"sy0\">=</span>rnd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span>                           <span class=\"coMULTI\">/* pick a random index       */</span><br/>     is<span class=\"sy0\">=</span>pl.<span class=\"me1\">ic</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* its coordinates           */</span><br/>     js<span class=\"sy0\">=</span>pl.<span class=\"me1\">jc</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     nb<span class=\"sy0\">=</span>neighbors<span class=\"br0\">(</span>is<span class=\"sy0\">,</span>js<span class=\"br0\">)</span><span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* count free neighbors      */</span><br/>     <span class=\"kw1\">If</span> nb<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                    <span class=\"coMULTI\">/* if there is none          */</span><br/>       pl.<span class=\"me1\">ic</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span>pl.<span class=\"me1\">ic</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* remove this point         */</span><br/>       pl.<span class=\"me1\">jc</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span>pl.<span class=\"me1\">jc</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       npl<span class=\"sy0\">-=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> rnd<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * return a pseudo-random integer between 1 and n<br/> *********************************************************************/</span><br/> <span class=\"kw1\">dcl</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> r<span class=\"sy0\">=</span><span class=\"kw1\">min</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Prolog", "loc": 91, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> cell<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/>\u00a0<br/>maze<span class=\"br0\">(</span>Lig<span class=\"sy4\">,</span>Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tretractall<span class=\"br0\">(</span>cell<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tnew<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Maze'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% creation of the grid</span><br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>Lig<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span>XL <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  <span class=\"nu0\">50</span><span class=\"sy4\">,</span> YL <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\t\tXR <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\t\tnew<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>XL<span class=\"sy4\">,</span> YL<span class=\"sy4\">,</span> XR<span class=\"sy4\">,</span> YL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span>XT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  <span class=\"nu0\">50</span> <span class=\"sy3\">+</span> I <span class=\"sy3\">*</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span> YT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\t\tYB <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\t\tnew<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>XT<span class=\"sy4\">,</span> YT<span class=\"sy4\">,</span> XT<span class=\"sy4\">,</span> YB<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tSX <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span><span class=\"sy4\">,</span><br/>\tSY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> size<span class=\"br0\">(</span>SX<span class=\"sy4\">,</span> SY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% choosing a first cell</span><br/>\tL0 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span>Lig<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tC0 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span>Col<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>cell<span class=\"br0\">(</span>L0<span class=\"sy4\">,</span> C0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>search<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L0<span class=\"sy4\">,</span> C0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>search<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tDir <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnextcell<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>cell<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span>C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>cur<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span>C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\terase_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsearch<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>erase_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   C <span class=\"sy6\">&lt;</span> C1 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> C2 <span class=\"sy6\">=</span> C1<span class=\"sy4\">;</span> C2 <span class=\"sy6\">=</span> C<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tXT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C2  <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tYT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">51</span><span class=\"sy4\">,</span> YR <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>L<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>XT<span class=\"sy4\">,</span> YT<span class=\"sy4\">,</span> XT<span class=\"sy4\">,</span> YR<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> colour<span class=\"sy4\">,</span> white<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>erase_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tXT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  <span class=\"nu0\">51</span> <span class=\"sy3\">+</span> C <span class=\"sy3\">*</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span> XR <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">50</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>C <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   L <span class=\"sy6\">&lt;</span> L1 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> L2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L1<span class=\"sy4\">;</span> L2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L2 <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>XT<span class=\"sy4\">,</span> YT<span class=\"sy4\">,</span> XR<span class=\"sy4\">,</span> YT<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> colour<span class=\"sy4\">,</span> white<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>nextcell<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnext<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>   Dir1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>Dir<span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\t    next<span class=\"br0\">(</span>Dir1<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>   Dir2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>Dir<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\t    next<span class=\"br0\">(</span>Dir2<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>   Dir3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>Dir<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\t    next<span class=\"br0\">(</span>Dir3<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% 0 =&gt; northward</span><br/>next<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> _Lig<span class=\"sy4\">,</span> _Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\tL1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>cell<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% 1 =&gt; rightward</span><br/>next<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> _Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tC <span class=\"sy6\">&lt;</span> Col <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tC1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>cell<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% 2 =&gt; southward</span><br/>next<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> _Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">&lt;</span> Lig <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tL1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>cell<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% 3 =&gt; leftward</span><br/>next<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> _Lig<span class=\"sy4\">,</span> _Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tC <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\tC1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>cell<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 136, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Enumeration</span><br/>  <span class=\"co1\">;indexes for types of offsets from maze coordinates (x,y)</span><br/>  #visited <span class=\"co1\">;used to index visited(x,y) in a given direction from current maze cell</span><br/>  #maze    <span class=\"co1\">;used to index maze() in a given direction from current maze cell</span><br/>  #wall    <span class=\"co1\">;used to index walls in maze() in a given direction from current maze cell</span><br/>  #numOffsets <span class=\"sy0\">=</span> #wall <br/>  <span class=\"co1\">;direction indexes</span><br/>  #dir_ID <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">;identity value, produces no changes</span><br/>  #firstDir<br/>  #dir_N <span class=\"sy0\">=</span> #firstDir<br/>  #dir_E<br/>  #dir_S<br/>  #dir_W<br/>  #numDirs <span class=\"sy0\">=</span> #dir_W <br/><span class=\"kw1\">EndEnumeration</span><br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>  <span class=\"co1\">;maze(x,y) offsets for visited, maze, &amp; walls for each direction</span><br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span>,  <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"co1\">;ID</span><br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>,  <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"co1\">;N</span><br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>,  <span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"co1\">;E</span><br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>,  <span class=\"nu0\">0</span>,  <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"co1\">;S</span><br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"co1\">;W</span><br/>  <span class=\"kw1\">Data</span>.i <span class=\"sy0\">%</span>00, <span class=\"sy0\">%</span>01, <span class=\"sy0\">%</span>10, <span class=\"sy0\">%</span>01, <span class=\"sy0\">%</span>10 <span class=\"co1\">;wall values for ID, N, E, S, W</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/>#cellDWidth <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> mazeOutput<br/>  vWall.s<br/>  hWall.s<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;setup reference values indexed by type and direction from current map cell</span><br/><span class=\"kw1\">Global</span> <span class=\"kw1\">Dim</span> offset.<span class=\"kw2\">POINT</span><span class=\"br0\">(</span>#numOffsets, #numDirs<span class=\"br0\">)</span><br/><span class=\"kw1\">Define</span> i, j<br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #numDirs<br/>  <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #numOffsets<br/>    <span class=\"kw1\">Read</span>.i offset<span class=\"br0\">(</span>j, i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x: <span class=\"kw1\">Read</span>.i offset<span class=\"br0\">(</span>j, i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Global</span> <span class=\"kw1\">Dim</span> wallvalue<span class=\"br0\">(</span>#numDirs<span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #numDirs: <span class=\"kw1\">Read</span>.i wallvalue<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">Next</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Procedure</span> makeDisplayMazeRow<span class=\"br0\">(</span>Array mazeRow.mazeOutput<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Array maze<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, y<span class=\"br0\">)</span><br/>  <span class=\"co1\">;modify mazeRow() to produce output of 2 strings showing the vertical walls above and horizontal walls across a given maze row</span><br/>  <span class=\"kw1\">Protected</span> x, vWall.s, hWall.s<br/>  <span class=\"kw1\">Protected</span> mazeWidth <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, mazeHeight <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  vWall <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>: hWall <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> mazeWidth<br/>    <span class=\"kw1\">If</span> maze<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> wallvalue<span class=\"br0\">(</span>#dir_N<span class=\"br0\">)</span>: vWall <span class=\"sy0\">+</span> <span class=\"st0\">\"+   \"</span>: <span class=\"kw1\">Else</span>: vWall <span class=\"sy0\">+</span> <span class=\"st0\">\"+---\"</span>: <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">If</span> maze<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> wallvalue<span class=\"br0\">(</span>#dir_W<span class=\"br0\">)</span>: hWall <span class=\"sy0\">+</span> <span class=\"st0\">\"    \"</span>: <span class=\"kw1\">Else</span>: hWall <span class=\"sy0\">+</span> <span class=\"st0\">\"|   \"</span>: <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span><br/>  mazeRow<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>vWall <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>vWall, mazeWidth <span class=\"sy0\">*</span> #cellDWidth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> y <span class=\"sy0\">&lt;&gt;</span> mazeHeight: mazeRow<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>hWall <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>hWall, mazeWidth <span class=\"sy0\">*</span> #cellDWidth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>: <span class=\"kw1\">Else</span>: mazeRow<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>hWall <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>: <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> displayMaze<span class=\"br0\">(</span>Array maze<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> x, y, vWall.s, hWall.s, mazeHeight <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"kw1\">Dim</span> mazeRow.mazeOutput<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> mazeHeight<br/>    makeDisplayMazeRow<span class=\"br0\">(</span>mazeRow<span class=\"br0\">(</span><span class=\"br0\">)</span>, maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, y<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>mazeRow<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>vWall<span class=\"br0\">)</span>: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>mazeRow<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>hWall<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> generateMaze<span class=\"br0\">(</span>Array maze<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, mazeWidth, mazeHeight<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> maze<span class=\"br0\">(</span>mazeWidth, mazeHeight<span class=\"br0\">)</span> <span class=\"co1\">;Each cell specifies walls present above and to the left of it,</span><br/>                                  <span class=\"co1\">;array includes an extra row and column for the right and bottom walls</span><br/>  <span class=\"kw1\">Dim</span> visited<span class=\"br0\">(</span>mazeWidth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, mazeHeight <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">;Each cell represents a cell of the maze, an extra line of cells are included</span><br/>                                             <span class=\"co1\">;as padding around the representative cells for easy border detection</span><br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> i<br/>  <span class=\"co1\">;mark outside border as already visited (off limits)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> mazeWidth<br/>    visited<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_N<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_N<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>    visited<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_S<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, mazeHeight <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_S<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> mazeHeight<br/>    visited<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_W<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, i <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_W<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>    visited<span class=\"br0\">(</span>mazeWidth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_E<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, i <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_E<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"co1\">;generate maze</span><br/>  <span class=\"kw1\">Protected</span> x <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span>mazeWidth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, y <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span> <span class=\"br0\">(</span>mazeHeight <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, cellCount, nextCell<br/>  visited<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_ID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_ID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Maze of size \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>mazeWidth<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" x \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>mazeHeight<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", generation started at \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" x \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">NewList</span> stack.<span class=\"kw2\">POINT</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> unvisited<span class=\"br0\">(</span>#numDirs <span class=\"sy0\">-</span> #firstDir<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    cellCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> #firstDir <span class=\"kw1\">To</span> #numDirs<br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> visited<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span><br/>        unvisited<span class=\"br0\">(</span>cellCount<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i: cellCount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Next</span> <br/>\u00a0<br/>    <span class=\"kw1\">If</span> cellCount<br/>      nextCell <span class=\"sy0\">=</span> unvisited<span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span>cellCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      visited<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, nextCell<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, nextCell<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>      maze<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#wall, nextCell<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#wall, nextCell<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> wallvalue<span class=\"br0\">(</span>nextCell<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">If</span> cellCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>stack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        stack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x: stack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y<br/>      <span class=\"kw1\">EndIf</span> <br/>      x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#maze, nextCell<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x: y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#maze, nextCell<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<br/>    <span class=\"kw1\">ElseIf</span> ListSize<span class=\"br0\">(</span>stack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      x <span class=\"sy0\">=</span> stack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x: y <span class=\"sy0\">=</span> stack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<br/>      <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>stack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span> <br/>      <span class=\"kw1\">Break</span>  <span class=\"co1\">;end maze generation</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">ForEver</span><br/>\u00a0<br/>  <span class=\"co1\">;\u00a0;mark random entry and exit point</span><br/>  <span class=\"co1\">; x = Random(mazeWidth - 1): y = Random(mazeHeight - 1)</span><br/>  <span class=\"co1\">; maze(x, 0) | wallvalue(#dir_N): maze(mazeWidth, y) | wallvalue(#dir_E)</span><br/>  <span class=\"kw1\">ProcedureReturn</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> maze<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> mazeWidth <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">7</span>: mazeHeight <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><br/>  generateMaze<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, mazeWidth, mazeHeight<span class=\"br0\">)</span><br/>  displayMaze<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 27, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> shuffle<span class=\"sy0\">,</span> randrange<br/>\u00a0<br/><span class=\"kw1\">def</span> make_maze<span class=\"br0\">(</span>w <span class=\"sy0\">=</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>:<br/>    vis <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * w + <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> * <span class=\"br0\">(</span>w + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    ver <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"|  \"</span><span class=\"br0\">]</span> * w + <span class=\"br0\">[</span><span class=\"st0\">'|'</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    hor <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"+--\"</span><span class=\"br0\">]</span> * w + <span class=\"br0\">[</span><span class=\"st0\">'+'</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> walk<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:<br/>        vis<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>        d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        shuffle<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>xx<span class=\"sy0\">,</span> yy<span class=\"br0\">)</span> <span class=\"kw1\">in</span> d:<br/>            <span class=\"kw1\">if</span> vis<span class=\"br0\">[</span>yy<span class=\"br0\">]</span><span class=\"br0\">[</span>xx<span class=\"br0\">]</span>: <span class=\"kw1\">continue</span><br/>            <span class=\"kw1\">if</span> xx <span class=\"sy0\">==</span> x: hor<span class=\"br0\">[</span><span class=\"kw2\">max</span><span class=\"br0\">(</span>y<span class=\"sy0\">,</span> yy<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"+  \"</span><br/>            <span class=\"kw1\">if</span> yy <span class=\"sy0\">==</span> y: ver<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">max</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xx<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"   \"</span><br/>            walk<span class=\"br0\">(</span>xx<span class=\"sy0\">,</span> yy<span class=\"br0\">)</span><br/>\u00a0<br/>    walk<span class=\"br0\">(</span>randrange<span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"sy0\">,</span> randrange<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>hor<span class=\"sy0\">,</span> ver<span class=\"br0\">)</span>:<br/>        s +<span class=\"sy0\">=</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>a + <span class=\"br0\">[</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">]</span> + b + <span class=\"br0\">[</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> s<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>make_maze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; the structure representing a maze of size NxM<br/>(struct maze (N M tbl))<br/>\u00a0<br/>;; managing cell properties<br/>(define (connections tbl c) (dict-ref tbl c '()))<br/>\u00a0<br/>(define (connect! tbl c n) <br/>  (dict-set! tbl c (cons n (connections tbl c)))<br/>  (dict-set! tbl n (cons c (connections tbl n))))<br/>\u00a0<br/>(define (connected? tbl a b) (member a (connections tbl b)))<br/>\u00a0<br/>;; Returns a maze of a given size<br/>;; build-maze\u00a0:: Index Index -&gt; Maze<br/>(define (build-maze N M)<br/>  (define tbl (make-hash))<br/>  (define (visited? tbl c) (dict-has-key? tbl c))<br/>  (define (neigbours c)<br/>    (filter <br/>     (match-lambda [(list i j) (and (&lt;= 0 i (- N 1)) (&lt;= 0 j (- M 1)))])<br/>     (for/list ([d '((0 1) (0 -1) (-1 0) (1 0))]) (map + c d))))<br/> \u00a0; generate the maze<br/>  (let move-to-cell ([c (list (random N) (random M))])<br/>    (for ([n (shuffle (neigbours c))] #:unless (visited? tbl n))<br/>      (connect! tbl c n)<br/>      (move-to-cell n)))<br/> \u00a0; return the result<br/>  (maze N M tbl))<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 29, "block": "<pre class=\"text highlighted_source\">import IO;<br/>import util::Math;<br/>import List;<br/>\u00a0<br/>public void make_maze(int w, int h){<br/>\tvis = [[0 | _ &lt;- [1..w]] | _ &lt;- [1..h]];<br/>\tver = [[\"|  \"| _ &lt;- [1..w]] + [\"|\"] | _ &lt;- [1..h]] + [[]];<br/>\thor = [[\"+--\"| _ &lt;- [1..w]] + [\"+\"] | _ &lt;- [1..h + 1]];<br/>\u00a0<br/>\tvoid walk(int x, int y){<br/>\t\tvis[y][x] = 1;<br/>\u00a0<br/>\t\td = [&lt;x - 1, y&gt;, &lt;x, y + 1&gt;, &lt;x + 1, y&gt;, &lt;x, y - 1&gt;];<br/>\t\twhile (d\u00a0!= []){<br/>\t\t\t&lt;&lt;xx, yy&gt;, d&gt; = takeOneFrom(d);<br/>\t\t\tif (xx &lt; 0 || yy &lt; 0 || xx &gt;= w || yy &gt;= w) continue;<br/>\t\t\tif (vis[yy][xx] == 1) continue;<br/>\t\t\tif (xx == x) hor[max([y, yy])][x] = \"+  \";<br/>\t\t\tif (yy == y) ver[y][max([x, xx])] = \"   \";<br/>\t\t\twalk(xx, yy);<br/>\t\t\t}<br/> \t}<br/>\u00a0<br/>\twalk(arbInt(w), arbInt(h));<br/>\tfor (&lt;a, b&gt; &lt;- zip(hor, ver)){<br/>\t\tprintln((\"\" | it + \"&lt;z&gt;\" | z &lt;- a)); <br/>\t\tprintln((\"\" | it + \"&lt;z&gt;\" | z &lt;- b));<br/>\t}<br/>}</pre>"}, {"lang": "REXX", "loc": 103, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  generates  and  displays  a  rectangular  solvable maze   (of any size).*/</span><br/>height=<span class=\"nu0\">0</span>;    @<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                <span class=\"coMULTI\">/*default for all  cells  visited.     */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> rows cols seed <span class=\"sy0\">.</span>                       <span class=\"coMULTI\">/*allow user to specify the maze size. */</span><br/><span class=\"kw1\">if</span> rows=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> rows==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> rows=<span class=\"nu0\">19</span>             <span class=\"coMULTI\">/*No rows given?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> cols=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> cols==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> cols=<span class=\"nu0\">19</span>             <span class=\"coMULTI\">/* \" cols   \" \u00a0?    \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> seed<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed             <span class=\"coMULTI\">/*use a random  seed for repeatability.*/</span><br/><span class=\"kw1\">call</span> buildRow <span class=\"st0\">'\u250c'</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"~\u252c\"</span>,cols-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">'~\u2510'</span>         <span class=\"coMULTI\">/*construct the top edge of the maze.  */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  construct the maze's grid.     */</span><br/>  <span class=\"kw1\">do</span>    r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;  _=;     __=;          hp= <span class=\"st0\">\"|\"</span>;       hj=<span class=\"st0\">'\u251c'</span><br/>     <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols;  _= _<span class=\"sy0\">||</span>hp<span class=\"st0\">'1'</span>;     __=__<span class=\"sy0\">||</span>hj<span class=\"st0\">\"~\"</span>;       hj=<span class=\"st0\">'\u253c'</span>;          hp=<span class=\"st0\">\"\u2502\"</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                    <span class=\"kw1\">call</span> buildRow  _<span class=\"st0\">'\u2502'</span>          <span class=\"coMULTI\">/*construct the right edge of the cells*/</span><br/>  <span class=\"kw1\">if</span> r<span class=\"sy0\">\\</span>==rows  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> buildRow __<span class=\"st0\">'\u2524'</span>          <span class=\"coMULTI\">/*  \"        \"    \"     \"   \"  \"  maze.*/</span><br/>  <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*r*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> buildRow <span class=\"st0\">'\u2514'</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"~\u2534\"</span>, cols-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">'~\u2518'</span>        <span class=\"coMULTI\">/*construct the bottom edge of the maze*/</span><br/>r!=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,rows<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>;   c!=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,cols<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>;   @<span class=\"sy0\">.</span>r!<span class=\"sy0\">.</span>c!=<span class=\"nu0\">0</span>  <span class=\"coMULTI\">/*choose the first cell in maze*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  traipse through the maze.      */</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>;    n=hood<span class=\"br0\">(</span>r!,c!<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> n==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>fCell<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>  <span class=\"kw1\">call</span>\u00a0?;        @<span class=\"sy0\">.</span>_r<span class=\"sy0\">.</span>_c=<span class=\"nu0\">0</span>                       <span class=\"coMULTI\">/*get the (next) maze direction to go. */</span><br/>  ro=r!; co=c!;  r!=_r;   c!=_c                  <span class=\"coMULTI\">/*save original maze cell coordinates. */</span><br/> \u00a0?<span class=\"sy0\">.</span>zr=?<span class=\"sy0\">.</span>zr%2;  \u00a0?<span class=\"sy0\">.</span>zc=?<span class=\"sy0\">.</span>zc%2                     <span class=\"coMULTI\">/*get the maze row and cell directions.*/</span><br/>  rw=ro+?<span class=\"sy0\">.</span>zr;    cw=co+?<span class=\"sy0\">.</span>zc                      <span class=\"coMULTI\">/*calculate the next row and column.   */</span><br/>  @<span class=\"sy0\">.</span>rw<span class=\"sy0\">.</span>cw=<span class=\"sy0\">.</span>                                      <span class=\"coMULTI\">/*mark the maze cell as being visited. */</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span>     r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> height;       _=                           <span class=\"coMULTI\">/*display the maze. */</span><br/>             <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols<span class=\"sy0\">*</span><span class=\"nu0\">2</span> + <span class=\"nu0\">1</span>;   _=_ <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*c*/</span><br/>         <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"br0\">(</span>r<span class=\"sy0\">//</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>_, <span class=\"st0\">'\\'</span>, <span class=\"sy0\">.</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*trans to backslash*/</span><br/>         @<span class=\"sy0\">.</span>r=_                                                      <span class=\"coMULTI\">/*save the row in @.*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> height;   <a class=\"__cf_email__\" data-cfemail=\"8bd4b6cb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#                <span class=\"coMULTI\">/*display the maze to the terminal.    */</span><br/>      <span class=\"kw1\">call</span> makeNice                              <span class=\"coMULTI\">/*make some cell corners look prettier.*/</span><br/>\u00a0<br/>      _=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>   , _, <span class=\"nu0\">111</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500these four \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>      _=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>   , _, 000<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 statements are \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>      _=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>   , _, <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 used for preserving \u2500\u2500*/</span><br/>      _=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'~'</span> , _, <span class=\"st0\">\"\u2500\u2500\u2500\"</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 the aspect ratio. */</span><br/>      <span class=\"kw1\">say</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>_ , <span class=\"st0\">'\u2500\u2502'</span>, <span class=\"st0\">\"\u2550|\\10\"</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*make it presentable for the screen.  */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>@:    <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> _r,_c;    <span class=\"kw1\">return</span> @<span class=\"sy0\">.</span>_r<span class=\"sy0\">.</span>_c         <span class=\"coMULTI\">/*a fast way to reference a maze cell. */</span><br/>hood: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> rh,ch;    <span class=\"kw1\">return</span> @<span class=\"br0\">(</span>rh+<span class=\"nu0\">2</span>,ch<span class=\"br0\">)</span> + @<span class=\"br0\">(</span>rh-<span class=\"nu0\">2</span>,ch<span class=\"br0\">)</span> + @<span class=\"br0\">(</span>rh,ch-<span class=\"nu0\">2</span><span class=\"br0\">)</span> + @<span class=\"br0\">(</span>rh,ch+<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>?:          <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>; \u00a0?<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;  \u00a0?=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span>;      <span class=\"kw1\">if</span>\u00a0?==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span>\u00a0?<span class=\"sy0\">.</span>zc=-<span class=\"nu0\">2</span>       <span class=\"coMULTI\">/*north*/</span><br/>                                                     <span class=\"kw1\">if</span>\u00a0?==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span>\u00a0?<span class=\"sy0\">.</span>zr= <span class=\"nu0\">2</span>       <span class=\"coMULTI\">/* east*/</span><br/>                                                     <span class=\"kw1\">if</span>\u00a0?==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span>\u00a0?<span class=\"sy0\">.</span>zc= <span class=\"nu0\">2</span>       <span class=\"coMULTI\">/*south*/</span><br/>                                                     <span class=\"kw1\">if</span>\u00a0?==<span class=\"nu0\">4</span>  <span class=\"kw3\">then</span>\u00a0?<span class=\"sy0\">.</span>zr=-<span class=\"nu0\">2</span>       <span class=\"coMULTI\">/* west*/</span><br/>            _r=r!+?<span class=\"sy0\">.</span>zr;   _c=c!+?<span class=\"sy0\">.</span>zc;          <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>_r<span class=\"sy0\">.</span>_c==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>buildRow: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z;    height=height+<span class=\"nu0\">1</span>;       width=<span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>                             <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> width;  @<span class=\"sy0\">.</span>height<span class=\"sy0\">.</span>c=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>z,c,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>;    <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fCell:              <span class=\"kw1\">do</span>    r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;   rr=r+r<br/>                       <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols;   cc=c+c<br/>                       <span class=\"kw1\">if</span> hood<span class=\"br0\">(</span>rr, cc<span class=\"br0\">)</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; r!=rr; c!=cc; @<span class=\"sy0\">.</span>r!<span class=\"sy0\">.</span>c!=<span class=\"nu0\">0</span>; <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>; <span class=\"kw3\">end</span><br/>                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                    <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*r*/</span>               <span class=\"coMULTI\">/* [\u2191]  r! and c!  are used by invoker.*/</span><br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>makeNice:  width=<span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>;  old=#-<span class=\"nu0\">1</span>;  new=#+<span class=\"nu0\">1</span>;     <a class=\"__cf_email__\" data-cfemail=\"2a45464e75176a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>old;     <a class=\"__cf_email__\" data-cfemail=\"06686371593b46\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>new<br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>_,<span class=\"nu0\">2</span><span class=\"br0\">)</span> ==<span class=\"st0\">'\u251c.'</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>_, <span class=\"st0\">\"|\"</span>, <span class=\"st0\">'\u251c'</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>_,<span class=\"nu0\">2</span><span class=\"br0\">)</span>==<span class=\"st0\">'.\u2524'</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>_, <span class=\"st0\">\"|\"</span>, <span class=\"st0\">'\u2524'</span><span class=\"br0\">)</span><br/>                                                <span class=\"coMULTI\">/* [\u2193]   handle the top row of the grid.*/</span><br/>                   <span class=\"kw1\">do</span>  k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  width  <span class=\"kw2\">while</span> #==<span class=\"nu0\">1</span>;      z=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>_,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*maze top row.*/</span><br/>                   <span class=\"kw1\">if</span> z<span class=\"sy0\">\\</span>==<span class=\"st0\">'\u252c'</span>                <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                   <span class=\"kw1\">if</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>new_,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">'\\'</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2550\"</span>,_,k<span class=\"br0\">)</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>\u00a0<br/>                   <span class=\"kw1\">do</span>  k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  width  <span class=\"kw2\">while</span> #==height; z=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>_,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*maze bot row.*/</span><br/>                   <span class=\"kw1\">if</span> z<span class=\"sy0\">\\</span>==<span class=\"st0\">'\u2534'</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                   <span class=\"kw1\">if</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>old_, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">'\\'</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2550\"</span>, _, k<span class=\"br0\">)</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                                                <span class=\"coMULTI\">/* [\u2193]   handle the mid rows of the grid*/</span><br/>                   <span class=\"kw1\">do</span>  k=<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span>  width-<span class=\"nu0\">2</span> <span class=\"kw2\">by</span> <span class=\"nu0\">2</span> <span class=\"kw2\">while</span> #<span class=\"sy0\">//</span><span class=\"nu0\">2</span>; z=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>_,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*maze mid rows*/</span><br/>                   <span class=\"kw1\">if</span> z<span class=\"sy0\">\\</span>==<span class=\"st0\">'\u253c'</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                   le=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>_,k-<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   ri=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>_,k+<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   up=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>old_,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   dw=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>new_,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                       <span class=\"kw1\">select</span><br/>                       <span class=\"kw3\">when</span> le== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> ri== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\u2502'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\u2502\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le==<span class=\"st0\">'~'</span> <span class=\"sy0\">&amp;</span> ri==<span class=\"st0\">\"~\"</span> <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\\'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\\\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le==<span class=\"st0\">'~'</span> <span class=\"sy0\">&amp;</span> ri==<span class=\"st0\">\"~\"</span> <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\\'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\u2502\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u252c'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le==<span class=\"st0\">'~'</span> <span class=\"sy0\">&amp;</span> ri==<span class=\"st0\">\"~\"</span> <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\u2502'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\\\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u2534'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le==<span class=\"st0\">'~'</span> <span class=\"sy0\">&amp;</span> ri== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\\'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\\\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> ri==<span class=\"st0\">\"~\"</span> <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\\'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\\\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> ri== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\u2502'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\\\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> ri== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\\'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\u2502\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> ri==<span class=\"st0\">\"~\"</span> <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\\'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\u2502\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u250c'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> ri==<span class=\"st0\">\"~\"</span> <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\u2502'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\\\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u2514'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le==<span class=\"st0\">'~'</span> <span class=\"sy0\">&amp;</span> ri== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\\'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\u2502\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u2510'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le==<span class=\"st0\">'~'</span> <span class=\"sy0\">&amp;</span> ri== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\u2502'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\\\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u2518'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le==<span class=\"st0\">'~'</span> <span class=\"sy0\">&amp;</span> ri== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\u2502'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\u2502\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u2524'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">when</span> le== <span class=\"sy0\">.</span>  <span class=\"sy0\">&amp;</span> ri==<span class=\"st0\">\"~\"</span> <span class=\"sy0\">&amp;</span> up==<span class=\"st0\">'\u2502'</span> <span class=\"sy0\">&amp;</span> dw==<span class=\"st0\">\"\u2502\"</span>  <span class=\"kw3\">then</span> _=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"st0\">'\u251c'</span>,_,k<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">otherwise</span>  <span class=\"kw1\">nop</span><br/>                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>                   <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*k*/</span><br/>           <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 95, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Maze<br/>  DIRECTIONS = <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>    <span class=\"re1\">@width</span>   = width<br/>    <span class=\"re1\">@height</span>  = height<br/>    <span class=\"re1\">@start_x</span> = <span class=\"kw3\">rand</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span><br/>    <span class=\"re1\">@start_y</span> = <span class=\"nu0\">0</span><br/>    <span class=\"re1\">@end_x</span>   = <span class=\"kw3\">rand</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span><br/>    <span class=\"re1\">@end_y</span>   = height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\"># Which walls do exist? Default to \"true\". Both arrays are</span><br/>    <span class=\"co1\"># one element bigger than they need to be. For example, the</span><br/>    <span class=\"co1\"># @vertical_walls[x][y] is true if there is a wall between</span><br/>    <span class=\"co1\"># (x,y) and (x+1,y). The additional entry makes printing easier.</span><br/>    <span class=\"re1\">@vertical_walls</span>   = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>height, <span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"re1\">@horizontal_walls</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>height, <span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Path for the solved maze.</span><br/>    <span class=\"re1\">@path</span>             = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>height<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># \"Hack\" to print the exit.</span><br/>    <span class=\"re1\">@horizontal_walls</span><span class=\"br0\">[</span>@end_x<span class=\"br0\">]</span><span class=\"br0\">[</span>@end_y<span class=\"br0\">]</span> = <span class=\"kw2\">false</span><br/>\u00a0<br/>    <span class=\"co1\"># Generate the maze.</span><br/>    generate<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Print a nice ASCII maze.</span><br/>  <span class=\"kw1\">def</span> <span class=\"kw3\">print</span><br/>    <span class=\"co1\"># Special handling: print the top line.</span><br/>    <span class=\"kw3\">puts</span> <span class=\"re1\">@width</span>.<span class=\"me1\">times</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>str, x<span class=\"sy0\">|</span> str <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>x == <span class=\"re1\">@start_x</span>\u00a0? <span class=\"st0\">\"   +\"</span>\u00a0: <span class=\"st0\">\"---+\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># For each cell, print the right and bottom wall, if it exists.</span><br/>    <span class=\"re1\">@height</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>      line = <span class=\"re1\">@width</span>.<span class=\"me1\">times</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>str, x<span class=\"sy0\">|</span><br/>        str <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>@path<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>\u00a0? <span class=\"st0\">\" * \"</span>\u00a0: <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>@vertical_walls<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>\u00a0? <span class=\"st0\">\"|\"</span>\u00a0: <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw3\">puts</span> line<br/>\u00a0<br/>      <span class=\"kw3\">puts</span> <span class=\"re1\">@width</span>.<span class=\"me1\">times</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>str, x<span class=\"sy0\">|</span> str <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>@horizontal_walls<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>\u00a0? <span class=\"st0\">\"---+\"</span>\u00a0: <span class=\"st0\">\"   +\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  private<br/>\u00a0<br/>  <span class=\"co1\"># Reset the VISITED state of all cells.</span><br/>  <span class=\"kw1\">def</span> reset_visiting_state<br/>    <span class=\"re1\">@visited</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>@width<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>@height<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Is the given coordinate valid and the cell not yet visited?</span><br/>  <span class=\"kw1\">def</span> move_valid?<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span><a class=\"__cf_email__\" data-cfemail=\"2a0404046a5d434e5e42\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">)</span>.<span class=\"me1\">cover</span>?<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><a class=\"__cf_email__\" data-cfemail=\"b9979797f9d1dcd0ded1cd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">)</span>.<span class=\"me1\">cover</span>?<span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0<a class=\"__cf_email__\" data-cfemail=\"92b3d2e4fbe1fbe6f7f6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Generate the maze.</span><br/>  <span class=\"kw1\">def</span> generate<br/>    reset_visiting_state<br/>    generate_visit_cell<span class=\"br0\">(</span>@start_x, <span class=\"re1\">@start_y</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Depth-first maze generation.</span><br/>  <span class=\"kw1\">def</span> generate_visit_cell<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"co1\"># Mark cell as visited.</span><br/>    <span class=\"re1\">@visited</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>\u00a0<br/>    <span class=\"co1\"># Randomly get coordinates of surrounding cells (may be outside</span><br/>    <span class=\"co1\"># of the maze range, will be sorted out later).</span><br/>    coordinates = DIRECTIONS.<span class=\"me1\">shuffle</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>dx, dy<span class=\"sy0\">|</span> <span class=\"br0\">[</span>x <span class=\"sy0\">+</span> dx, y <span class=\"sy0\">+</span> dy<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> new_x, new_y <span class=\"kw1\">in</span> coordinates<br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> move_valid?<span class=\"br0\">(</span>new_x, new_y<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"co1\"># Recurse if it was possible to connect the current and</span><br/>      <span class=\"co1\"># the cell (this recursion is the \"depth-first\" part).</span><br/>      connect_cells<span class=\"br0\">(</span>x, y, new_x, new_y<span class=\"br0\">)</span><br/>      generate_visit_cell<span class=\"br0\">(</span>new_x, new_y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Try to connect two cells. Returns whether it was valid to do so.</span><br/>  <span class=\"kw1\">def</span> connect_cells<span class=\"br0\">(</span>x1, y1, x2, y2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> x1 == x2<br/>      <span class=\"co1\"># Cells must be above each other, remove a horizontal wall.</span><br/>      <span class=\"re1\">@horizontal_walls</span><span class=\"br0\">[</span>x1<span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"br0\">[</span>y1, y2<span class=\"br0\">]</span>.<span class=\"me1\">min</span> <span class=\"br0\">]</span> = <span class=\"kw2\">false</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"co1\"># Cells must be next to each other, remove a vertical wall.</span><br/>      <span class=\"re1\">@vertical_walls</span><span class=\"br0\">[</span> <span class=\"br0\">[</span>x1, x2<span class=\"br0\">]</span>.<span class=\"me1\">min</span> <span class=\"br0\">]</span><span class=\"br0\">[</span>y1<span class=\"br0\">]</span> = <span class=\"kw2\">false</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration:</span><br/>maze = Maze.<span class=\"me1\">new</span> <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span><br/>maze.<span class=\"kw3\">print</span></pre>"}, {"lang": "Scala", "loc": 86, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MazeTypes <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Direction<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dx<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dy<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Loc<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> +<span class=\"br0\">(</span>that<span class=\"sy0\">:</span> Direction<span class=\"br0\">)</span><span class=\"sy0\">:</span> Loc <span class=\"sy0\">=</span> Loc<span class=\"br0\">(</span>x + that.<span class=\"me1\">dx</span>, y + that.<span class=\"me1\">dy</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Door<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> from<span class=\"sy0\">:</span> Loc, to<span class=\"sy0\">:</span> Loc<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> North <span class=\"sy0\">=</span> Direction<span class=\"br0\">(</span><span class=\"nu0\">0</span>,-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> South <span class=\"sy0\">=</span> Direction<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> West <span class=\"sy0\">=</span> Direction<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> East <span class=\"sy0\">=</span> Direction<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> directions <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span>North, South, West, East<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MazeBuilder <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> MazeTypes.<span class=\"sy0\">_</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> shuffle<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>set<span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>T<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Random.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>set.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> buildImpl<span class=\"br0\">(</span>current<span class=\"sy0\">:</span> Loc, grid<span class=\"sy0\">:</span> Grid<span class=\"br0\">)</span><span class=\"sy0\">:</span> Grid <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> newgrid <span class=\"sy0\">=</span> grid.<span class=\"me1\">markVisited</span><span class=\"br0\">(</span>current<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nbors <span class=\"sy0\">=</span> shuffle<span class=\"br0\">(</span>grid.<span class=\"me1\">neighbors</span><span class=\"br0\">(</span>current<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    nbors.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span> n <span class=\"sy0\">=&gt;</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>newgrid.<span class=\"me1\">isVisited</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        newgrid <span class=\"sy0\">=</span> buildImpl<span class=\"br0\">(</span>n, newgrid.<span class=\"me1\">markVisited</span><span class=\"br0\">(</span>current<span class=\"br0\">)</span>.<span class=\"me1\">addDoor</span><span class=\"br0\">(</span>Door<span class=\"br0\">(</span>current, n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    newgrid<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> build<span class=\"br0\">(</span>width<span class=\"sy0\">:</span> Int, height<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Grid <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exit <span class=\"sy0\">=</span> Loc<span class=\"br0\">(</span>width-<span class=\"nu0\">1</span>, height-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    buildImpl<span class=\"br0\">(</span>exit, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Grid<span class=\"br0\">(</span>width, height, Set<span class=\"br0\">(</span><span class=\"br0\">)</span>, Set<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span>  <br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Grid<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> width<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> height<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> doors<span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>Door<span class=\"br0\">]</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> visited<span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>Loc<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> addDoor<span class=\"br0\">(</span>door<span class=\"sy0\">:</span> Door<span class=\"br0\">)</span><span class=\"sy0\">:</span> Grid <span class=\"sy0\">=</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Grid<span class=\"br0\">(</span>width, height, doors + door, visited<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> markVisited<span class=\"br0\">(</span>loc<span class=\"sy0\">:</span> Loc<span class=\"br0\">)</span><span class=\"sy0\">:</span> Grid <span class=\"sy0\">=</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Grid<span class=\"br0\">(</span>width, height, doors, visited + loc<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isVisited<span class=\"br0\">(</span>loc<span class=\"sy0\">:</span> Loc<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <br/>    visited.<span class=\"me1\">contains</span><span class=\"br0\">(</span>loc<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> neighbors<span class=\"br0\">(</span>current<span class=\"sy0\">:</span> Loc<span class=\"br0\">)</span><span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>Loc<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <br/>    directions.<span class=\"me1\">map</span><span class=\"br0\">(</span>current + <span class=\"sy0\">_</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>inBounds<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> -- visited<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> printGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> to height<span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>y <span class=\"sy0\">=&gt;</span> printRow<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> inBounds<span class=\"br0\">(</span>loc<span class=\"sy0\">:</span> Loc<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <br/>    loc.<span class=\"me1\">x</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> loc.<span class=\"me1\">x</span> <span class=\"sy0\">&lt;</span> width <span class=\"sy0\">&amp;&amp;</span> loc.<span class=\"me1\">y</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> loc.<span class=\"me1\">y</span> <span class=\"sy0\">&lt;</span> height<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> printRow<span class=\"br0\">(</span>y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> row <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> until width<span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> printCell<span class=\"br0\">(</span>Loc<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rightSide <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">==</span> height-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"|\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newRow <span class=\"sy0\">=</span> row <span class=\"sy0\">:</span>+ List<span class=\"br0\">(</span><span class=\"st0\">\"+\"</span>, rightSide<span class=\"br0\">)</span><br/>    List.<span class=\"me1\">transpose</span><span class=\"br0\">(</span>newRow<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> entrance <span class=\"sy0\">=</span> Loc<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> printCell<span class=\"br0\">(</span>loc<span class=\"sy0\">:</span> Loc<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>loc.<span class=\"me1\">y</span> <span class=\"sy0\">==</span> height<span class=\"br0\">)</span> <br/>      List<span class=\"br0\">(</span><span class=\"st0\">\"+--\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> List<span class=\"br0\">(</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>openNorth<span class=\"br0\">(</span>loc<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"+  \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"+--\"</span>, <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>openWest<span class=\"br0\">(</span>loc<span class=\"br0\">)</span> || loc <span class=\"sy0\">==</span> entrance<span class=\"br0\">)</span> <span class=\"st0\">\"   \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"|  \"</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> openNorth<span class=\"br0\">(</span>loc<span class=\"sy0\">:</span> Loc<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> openInDirection<span class=\"br0\">(</span>loc, North<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> openWest<span class=\"br0\">(</span>loc<span class=\"sy0\">:</span> Loc<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> openInDirection<span class=\"br0\">(</span>loc, West<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> openInDirection<span class=\"br0\">(</span>loc<span class=\"sy0\">:</span> Loc, dir<span class=\"sy0\">:</span> Direction<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <br/>    doors.<span class=\"me1\">contains</span><span class=\"br0\">(</span>Door<span class=\"br0\">(</span>loc, loc + dir<span class=\"br0\">)</span><span class=\"br0\">)</span> || doors.<span class=\"me1\">contains</span><span class=\"br0\">(</span>Door<span class=\"br0\">(</span>loc + dir, loc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 33, "block": "<pre class=\"ruby highlighted_source\">var<span class=\"br0\">(</span>w:<span class=\"nu0\">5</span>, h:<span class=\"nu0\">5</span><span class=\"br0\">)</span> = ARGV.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span>...<br/><span class=\"me1\">var</span> avail = <span class=\"br0\">(</span>w <span class=\"sy0\">*</span> h<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># cell is padded by sentinel col and row, so I don't check array bounds</span><br/>var cell = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">h</span> <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> w<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> w<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>var ver  = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">h</span> <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"st0\">\"|  \"</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> w <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>var hor  = <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">h</span> <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"st0\">\"+--\"</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> w <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>func walk<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cell<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> = <span class=\"kw2\">false</span>;<br/>    avail<span class=\"sy0\">--</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"kw2\">return</span>;  <span class=\"co1\"># no more bottles, er, cells</span><br/>\u00a0<br/>    var d = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>!d.<span class=\"me1\">is_empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var i = d.<span class=\"me1\">pop_rand</span><br/>        var <span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span> = <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> i<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, y <span class=\"sy0\">+</span> i<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>        cell<span class=\"br0\">[</span>y1<span class=\"br0\">]</span><span class=\"br0\">[</span>x1<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x == x1<span class=\"br0\">)</span> <span class=\"br0\">{</span> hor<span class=\"br0\">[</span><span class=\"br0\">[</span>y1, y<span class=\"br0\">]</span>.<span class=\"me1\">max</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> = <span class=\"st0\">'+  '</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y == y1<span class=\"br0\">)</span> <span class=\"br0\">{</span> ver<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">[</span>x1, x<span class=\"br0\">]</span>.<span class=\"me1\">max</span><span class=\"br0\">]</span> = <span class=\"st0\">'   '</span> <span class=\"br0\">}</span><br/>        walk<span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>walk<span class=\"br0\">(</span>w.<span class=\"kw3\">rand</span>.<span class=\"me1\">int</span>, h.<span class=\"kw3\">rand</span>.<span class=\"me1\">int</span><span class=\"br0\">)</span>   <span class=\"co1\"># generate</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">h</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"br0\">(</span>hor<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        say <span class=\"br0\">(</span>ver<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'|'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SuperCollider", "loc": 58, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// some useful functions<br/>(<br/>~grid = { 0\u00a0! 60 }\u00a0! 60;<br/>\u00a0<br/>~at = { |coord|<br/>\tvar col = ~grid.at(coord[0]);<br/>\tif(col.notNil) { col.at(coord[1]) }<br/>};<br/>~put = { |coord, value|<br/>\tvar col = ~grid.at(coord[0]);<br/>\tif(col.notNil) { col.put(coord[1], value) }<br/>};<br/>\u00a0<br/>~coord = ~grid.shape.rand;<br/>~next = { |p|<br/>\tvar possible = [p] + [[0, 1], [1, 0], [-1, 0], [0, -1]];<br/>\tpossible = possible.select { |x|<br/>\t\tvar c = ~at.(x);<br/>\t\tc.notNil and: { c == 0 }<br/>\t};<br/>\tpossible.choose<br/>};<br/>~walkN = { |p, scale|<br/>\tvar next = ~next.(p);<br/>\tif(next.notNil) {<br/>\t\t~put.(next, 1);<br/>\t\tPen.lineTo(~topoint.(next, scale));<br/>\t\t~walkN.(next, scale);<br/>\t\t~walkN.(next, scale);<br/>\t\tPen.moveTo(~topoint.(p, scale));<br/>\t};<br/>};<br/>\u00a0<br/>~topoint = { |c, scale| (c + [1, 1] * scale).asPoint };<br/>\u00a0<br/>)<br/>\u00a0<br/>// do the drawing<br/>(<br/>var b, w;<br/>\u00a0<br/>b = Rect(100, 100, 700, 700);<br/>w = Window(\"so-a-mazing\", b);<br/>w.view.background_(Color.black);<br/>\u00a0<br/>w.drawFunc = {<br/>\tvar p = ~grid.shape.rand;<br/>\tvar scale = b.width / ~grid.size * 0.98;<br/>\tPen.moveTo(~topoint.(p, scale));<br/>\t~walkN.(p, scale);<br/>\tPen.width = scale / 4;<br/>\tPen.color = Color.white;<br/>\tPen.stroke;<br/>};<br/>w.front.refresh;<br/>)<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 169, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>extension Array {<br/>    mutating func shuffle() {<br/>        guard count &gt; 1 else { return }<br/>\u00a0<br/>        for i in 0..&lt;self.count - 1 {<br/>            let j = Int(arc4random_uniform(UInt32(count - i))) + i<br/>            guard i\u00a0!= j else { continue }<br/>            swap(&amp;self[i], &amp;self[j])<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>enum Direction:Int {<br/>    case north = 1<br/>    case south = 2<br/>    case east = 4<br/>    case west = 8<br/>\u00a0<br/>    static var allDirections:[Direction] {<br/>        return [Direction.north, Direction.south, Direction.east, Direction.west]<br/>    }<br/>\u00a0<br/>    var opposite:Direction {<br/>        switch self {<br/>        case .north:<br/>            return .south<br/>        case .south:<br/>            return .north<br/>        case .east:<br/>            return .west<br/>        case .west:<br/>            return .east<br/>        }<br/>    }<br/>\u00a0<br/>    var diff:(Int, Int) {<br/>        switch self {<br/>        case .north:<br/>            return (0, -1)<br/>        case .south:<br/>            return (0, 1)<br/>        case .east:<br/>            return (1, 0)<br/>        case .west:<br/>            return (-1, 0)<br/>        }<br/>    }<br/>\u00a0<br/>    var char:String {<br/>        switch self {<br/>        case .north:<br/>            return \"N\"<br/>        case .south:<br/>            return \"S\"<br/>        case .east:<br/>            return \"E\"<br/>        case .west:<br/>            return \"W\"<br/>        }<br/>    }<br/>\u00a0<br/>}<br/>\u00a0<br/>class MazeGenerator {<br/>    let x:Int<br/>    let y:Int<br/>    var maze:[[Int]]<br/>\u00a0<br/>    init(_ x:Int, _ y:Int) {<br/>        self.x  = x<br/>        self.y = y<br/>        let column = [Int](repeating: 0, count: y)<br/>        self.maze = [[Int]](repeating: column, count: x)<br/>        generateMaze(0, 0)<br/>    }<br/>\u00a0<br/>    private func generateMaze(_ cx:Int, _ cy:Int) {<br/>        var directions = Direction.allDirections<br/>        directions.shuffle()<br/>        for direction in directions {<br/>            let (dx, dy) = direction.diff<br/>            let nx = cx + dx<br/>            let ny = cy + dy<br/>            if inBounds(nx, ny) &amp;&amp; maze[nx][ny] == 0 {<br/>                maze[cx][cy] |= direction.rawValue<br/>                maze[nx][ny] |= direction.opposite.rawValue<br/>                generateMaze(nx, ny)<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    private func inBounds(_ testX:Int, _ testY:Int) -&gt; Bool {<br/>        return inBounds(value:testX, upper:self.x) &amp;&amp; inBounds(value:testY, upper:self.y)<br/>    }<br/>\u00a0<br/>    private func inBounds(value:Int, upper:Int) -&gt; Bool {<br/>        return (value &gt;= 0) &amp;&amp; (value &lt; upper)<br/>    }<br/>\u00a0<br/>    func display() {<br/>        let cellWidth = 3<br/>        for j in 0..&lt;y {<br/>            // Draw top edge<br/>            var topEdge = \"\"<br/>            for i in 0..&lt;x {<br/>                topEdge += \"+\"<br/>                topEdge += String(repeating: (maze[i][j] &amp; Direction.north.rawValue) == 0\u00a0? \"-\"\u00a0: \" \", count: cellWidth)<br/>            }<br/>            topEdge += \"+\"<br/>            print(topEdge)<br/>\u00a0<br/>            // Draw left edge<br/>            var leftEdge = \"\"<br/>            for i in 0..&lt;x {<br/>                leftEdge += (maze[i][j] &amp; Direction.west.rawValue) == 0\u00a0? \"|\"\u00a0: \" \"<br/>                leftEdge += String(repeating: \" \", count: cellWidth)<br/>            }<br/>            leftEdge += \"|\"<br/>            print(leftEdge)<br/>        }<br/>\u00a0<br/>        // Draw bottom edge<br/>        var bottomEdge = \"\"<br/>        for _ in 0..&lt;x {<br/>            bottomEdge += \"+\"<br/>            bottomEdge += String(repeating: \"-\", count: cellWidth)<br/>        }<br/>        bottomEdge += \"+\"<br/>        print(bottomEdge)<br/>    }<br/>\u00a0<br/>    func displayInts() {<br/>        for j in 0..&lt;y {<br/>            var line = \"\"<br/>            for i in 0..&lt;x {<br/>                line += String(maze[i][j]) + \"\\t\"<br/>            }<br/>            print(line)<br/>        }<br/>    }<br/>\u00a0<br/>    func displayDirections() {<br/>        for j in 0..&lt;y {<br/>            var line = \"\"<br/>            for i in 0..&lt;x {<br/>                line += getDirectionsAsString(maze[i][j]) + \"\\t\"<br/>            }<br/>            print(line)<br/>        }<br/>    }<br/>\u00a0<br/>    private func getDirectionsAsString(_ value:Int) -&gt; String {<br/>        var line = \"\"<br/>        for direction in Direction.allDirections {<br/>            if (value &amp; direction.rawValue)\u00a0!= 0 {<br/>                line += direction.char<br/>            }<br/>        }<br/>        return line<br/>    }<br/>}<br/>\u00a0<br/>\u00a0<br/>let x = 20<br/>let y = 10<br/>let maze = MazeGenerator(x, y)<br/>maze.display()</pre>"}, {"lang": "Tcl", "loc": 97, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require TclOO<span class=\"sy0\">;</span> <span class=\"co1\"># Or Tcl 8.6</span><br/>\u00a0<br/><span class=\"co1\"># Helper to pick a random number</span><br/><span class=\"kw1\">proc</span> rand n <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"co1\"># Helper to pick a random element of a list</span><br/><span class=\"kw1\">proc</span> pick <span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"br0\">[</span>rand <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"co1\"># Helper _function_ to index into a list of lists</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">idx</span> <span class=\"br0\">{</span>v x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$v</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">}</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create maze <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> x y horiz verti content<br/>    constructor <span class=\"br0\">{</span>width height<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> y <span class=\"re0\">$width</span><br/>\t<span class=\"kw1\">set</span> x <span class=\"re0\">$height</span><br/>\u00a0<br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">error</span> <span class=\"st0\">\"illegal maze dimensions\"</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> horiz <span class=\"br0\">[</span><span class=\"kw1\">set</span> verti <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$x</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$y</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"co1\"># This matrix holds the output for the Maze Solving task; not used for generation</span><br/>\t<span class=\"kw1\">set</span> content <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$x</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$y</span> <span class=\"st0\">\" \"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> unvisited <span class=\"br0\">[</span>lrepeat <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>lrepeat <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"co1\"># Helper to write into a list of lists (with offsets)</span><br/>\t<span class=\"kw1\">proc</span> unvisited= <span class=\"br0\">{</span>x y value<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> unvisited u<br/>\t    <span class=\"kw2\">lset</span> u <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$value</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">lappend</span> stack <span class=\"br0\">[</span><span class=\"kw1\">set</span> here <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span>rand <span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>rand <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$x</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> k <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$y</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tunvisited= <span class=\"re0\">$j</span> <span class=\"re0\">$k</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$here</span> ne <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$j</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$here</span> hx hy<br/>\t    <span class=\"kw1\">set</span> neighbours <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dx dy<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>\t <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span>idx<span class=\"br0\">(</span><span class=\"re0\">$unvisited</span>, <span class=\"re0\">$hx</span>+<span class=\"re0\">$dx</span>+<span class=\"nu0\">1</span>, <span class=\"re0\">$hy</span>+<span class=\"re0\">$dy</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lappend</span> neighbours <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$hx</span>+<span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$hy</span>+<span class=\"re0\">$dy</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$neighbours</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tlassign <span class=\"br0\">[</span><span class=\"kw1\">set</span> here <span class=\"br0\">[</span>pick <span class=\"re0\">$neighbours</span><span class=\"br0\">]</span><span class=\"br0\">]</span> nx ny<br/>\t\tunvisited= <span class=\"re0\">$nx</span> <span class=\"re0\">$ny</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$nx</span> == <span class=\"re0\">$hx</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lset</span> horiz <span class=\"re0\">$nx</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>min<span class=\"br0\">(</span><span class=\"re0\">$ny</span>, <span class=\"re0\">$hy</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lset</span> verti <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>min<span class=\"br0\">(</span><span class=\"re0\">$nx</span>, <span class=\"re0\">$hx</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$ny</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">lappend</span> stack <span class=\"re0\">$here</span><br/>\t\t<span class=\"kw2\">incr</span> n -<span class=\"nu0\">1</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> here <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$stack</span> end<span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">set</span> stack <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$stack</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">rename</span> unvisited= <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Maze displayer; takes a maze dictionary, returns a string</span><br/>    <span class=\"kw1\">method</span> view <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> text <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> line <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> k <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span><span class=\"sy0\">%</span>2 <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$k</span><span class=\"sy0\">%</span>4==<span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"co1\"># At the centre of the cell, put the \"content\" of the cell</span><br/>\t\t    <span class=\"kw2\">append</span> line <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>idx<span class=\"br0\">(</span><span class=\"re0\">$content</span>, <span class=\"re0\">$j</span>/<span class=\"nu0\">2</span>, <span class=\"re0\">$k</span>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span><span class=\"sy0\">%</span>2 <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">%</span>4 || <span class=\"re0\">$k</span> <span class=\"sy0\">&amp;&amp;</span> idx<span class=\"br0\">(</span><span class=\"re0\">$horiz</span>, <span class=\"re0\">$j</span>/<span class=\"nu0\">2</span>, <span class=\"re0\">$k</span>/<span class=\"nu0\">4</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">append</span> line <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span><span class=\"sy0\">%</span>2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">append</span> line <span class=\"st0\">\"|\"</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> == <span class=\"re0\">$k</span><span class=\"sy0\">%</span>4<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">append</span> line <span class=\"st0\">\"+\"</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&amp;&amp;</span> idx<span class=\"br0\">(</span><span class=\"re0\">$verti</span>, <span class=\"re0\">$j</span>/<span class=\"nu0\">2</span>-<span class=\"nu0\">1</span>, <span class=\"re0\">$k</span>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">append</span> line <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">append</span> line <span class=\"st0\">\"-\"</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$j</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> text <span class=\"br0\">[</span><span class=\"kw2\">string</span> replace <span class=\"re0\">$line</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"st0\">\"   \"</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>-<span class=\"nu0\">1</span> == <span class=\"re0\">$j</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> text <span class=\"br0\">[</span><span class=\"kw2\">string</span> replace <span class=\"re0\">$line</span> end end <span class=\"st0\">\" \"</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> text <span class=\"re0\">$line</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$text</span> \\n<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration</span><br/>maze create m <span class=\"nu0\">11</span> <span class=\"nu0\">8</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>m view<span class=\"br0\">]</span></pre>"}, {"lang": "TXR", "loc": 62, "block": "<pre class=\"text highlighted_source\">@(bind (width height) (15 15))<br/>@(do<br/>   (defvar *r* (make-random-state nil))<br/>   (defvar vi)<br/>   (defvar pa)<br/>\u00a0<br/>   (defun scramble (list)<br/>     (let ((out ()))<br/>       (each ((item list))<br/>         (let ((r (random *r* (+ 1 (length out)))))<br/>           (set [out r..r] (list item))))<br/>       out))<br/>\u00a0<br/>   (defun neigh (loc)<br/>     (let ((x (from loc))<br/>           (y (to loc)))<br/>       (list (- x 1)..y (+ x 1)..y<br/>             x..(- y 1) x..(+ y 1))))<br/>\u00a0<br/>   (defun make-maze-rec (cu)<br/>     (set [vi cu] t)<br/>     (each ((ne (scramble (neigh cu))))<br/>       (cond ((not [vi ne])<br/>              (push ne [pa cu])<br/>              (push cu [pa ne])<br/>              (make-maze-rec ne)))))<br/>\u00a0<br/>   (defun make-maze (w h)<br/>     (let ((vi (hash\u00a0:equal-based))<br/>           (pa (hash\u00a0:equal-based)))<br/>       (each ((x (range -1 w)))<br/>         (set [vi x..-1] t)<br/>         (set [vi x..h] t))<br/>       (each ((y (range* 0 h)))<br/>         (set [vi -1..y] t)<br/>         (set [vi w..y] t))<br/>       (make-maze-rec 0..0)<br/>       pa))<br/>\u00a0<br/>   (defun print-tops (pa w j)<br/>     (each ((i (range* 0 w)))<br/>       (if (memqual i..(- j 1) [pa i..j])<br/>         (put-string \"+    \")<br/>         (put-string \"+----\")))<br/>     (put-line \"+\"))<br/>\u00a0<br/>   (defun print-sides (pa w j)<br/>     (let ((str \"\"))<br/>       (each ((i (range* 0 w)))<br/>         (if (memqual (- i 1)..j [pa i..j])<br/>           (set str `@str     `)<br/>           (set str `@str|    `)))<br/>       (put-line `@str|\\<a class=\"__cf_email__\" data-cfemail=\"224c62515650\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>|`)))<br/>\u00a0<br/>   (defun print-maze (pa w h)<br/>     (each ((j (range* 0 h)))<br/>       (print-tops pa w j)<br/>       (print-sides pa w j))<br/>     (print-tops pa w h)))<br/>@;;<br/>@(bind m @(make-maze width height))<br/>@(do (print-maze m width height))</pre>"}, {"lang": "XPL0", "loc": 44, "block": "<pre class=\"text highlighted_source\">code Ran=1, CrLf=9, Text=12;            \\intrinsic routines<br/>def  Cols=20, Rows=6;                   \\dimensions of maze (cells)<br/>int  Cell(Cols+1, Rows+1, 3);           \\cells (plus right and bottom borders)<br/>def  LeftWall, Ceiling, Connected;      \\attributes of each cell (= 0, 1 and 2)<br/>\u00a0<br/>proc ConnectFrom(X, Y);         \\Connect cells starting from cell X,Y<br/>int  X, Y;<br/>int  Dir, Dir0;<br/>[Cell(X, Y, Connected):= true;  \\mark current cell as connected<br/>Dir:= Ran(4);                   \\randomly choose a direction<br/>Dir0:= Dir;                     \\save this initial direction<br/>repeat  case Dir of             \\try to connect to cell at Dir<br/>          0: if X+1&lt;Cols &amp; not Cell(X+1, Y, Connected) then     \\go right<br/>                [Cell(X+1, Y, LeftWall):= false; ConnectFrom(X+1, Y)];<br/>          1: if Y+1&lt;Rows &amp; not Cell(X, Y+1, Connected) then     \\go down<br/>                [Cell(X, Y+1, Ceiling):= false;  ConnectFrom(X, Y+1)];<br/>          2: if X-1&gt;=0 &amp; not Cell(X-1, Y, Connected) then       \\go left<br/>                [Cell(X, Y, LeftWall):= false;   ConnectFrom(X-1, Y)];<br/>          3: if Y-1&gt;=0 &amp; not Cell(X, Y-1, Connected) then       \\go up<br/>                [Cell(X, Y, Ceiling):= false;    ConnectFrom(X, Y-1)]<br/>        other   [];             \\(never occurs)<br/>        Dir:= Dir+1 &amp; $03;      \\next direction<br/>until   Dir = Dir0;<br/>];<br/>\u00a0<br/>int  X, Y;<br/>[for Y:= 0 to Rows do<br/>    for X:= 0 to Cols do<br/>        [Cell(X, Y, LeftWall):= true;           \\start with all walls and<br/>         Cell(X, Y, Ceiling):= true;            \\ ceilings in place<br/>         Cell(X, Y, Connected):= false;         \\ and all cells disconnected<br/>        ];<br/>Cell(0, 0, LeftWall):= false;                   \\make left and right doorways<br/>Cell(Cols, Rows-1, LeftWall):= false;<br/>ConnectFrom(Ran(Cols), Ran(Rows));              \\randomly pick a starting cell<br/>for Y:= 0 to Rows do                            \\display the maze<br/>        [CrLf(0);<br/>        for X:= 0 to Cols do<br/>                Text(0, if X#Cols &amp; Cell(X, Y, Ceiling)  then \"+--\" else \"+  \");<br/>        CrLf(0);<br/>        for X:= 0 to Cols do<br/>                Text(0, if Y#Rows &amp; Cell(X, Y, LeftWall) then \"|  \" else \"   \");<br/>        ];<br/>]</pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fcn make_maze(w = 16, h = 8){<br/>   // make arrays with lists of lists (all mutable)<br/>   vis:=(w.pump(List().write,0)+1)*h + w.pump(List().write,1);<br/>   ver:=(w.pump(List().write,T(Void,\"|   \")) + \"|\")*h + T;<br/>   hor:=(w.pump(List().write,T(Void,\"+---\")) + \"+\")*(h + 1);<br/>\u00a0<br/>   fcn(x,y,vis,ver,hor){<br/>      vis[y][x] = 1;<br/>\u00a0<br/>      d:=L(T(x - 1, y), T(x, y + 1), T(x + 1, y), T(x, y - 1)).shuffle();<br/>      foreach xx,yy in (d){<br/>\t if(vis[yy][xx]) continue;<br/>\t if(xx==x) hor[y.max(yy)][x]=\"+   \";<br/>\t if(yy==y) ver[y][x.max(xx)]=\"    \";<br/>\t self.fcn(xx,yy,vis,ver,hor);<br/>      }<br/>   }((0).random(w),(0).random(h),vis,ver,hor);<br/>   foreach a,b in (hor.zip(ver)) { println(a.concat(),\"\\n\",b.concat()) }<br/>   return(ver,hor);<br/>}<br/>make_maze();</pre>"}]}