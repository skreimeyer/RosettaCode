{"task": "Carmichael_3_strong_pseudoprimes", "blocks": [{"lang": "Ada", "loc": 41, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Miller_Rabin;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Nemesis <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Number <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span>**<span class=\"nu0\">40</span>-<span class=\"nu0\">1</span>; <span class=\"co1\">-- sufficiently large for the task</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Prime<span class=\"br0\">(</span>N: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">package</span> MR <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Miller_Rabin<span class=\"br0\">(</span>Number<span class=\"br0\">)</span>; <span class=\"kw3\">use</span> MR;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> MR.<span class=\"me1\">Is_Prime</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> = Probably_Prime;<br/>   <span class=\"kw1\">end</span> Is_Prime;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> P1 <span class=\"kw3\">in</span> Number<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> .. <span class=\"nu0\">61</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Is_Prime<span class=\"br0\">(</span>P1<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">for</span> H3 <span class=\"kw3\">in</span> Number<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> .. <span class=\"me1\">P1</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">declare</span><br/>               G: Number\u00a0:= H3 + P1;<br/>               P2, P3: Number;<br/>            <span class=\"kw1\">begin</span><br/>               Inner:<br/>               <span class=\"kw1\">for</span> D <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">G</span>-<span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>                  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>H3+P1<span class=\"br0\">)</span> * <span class=\"br0\">(</span>P1-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> D = <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span><br/>                    <span class=\"br0\">(</span>-<span class=\"br0\">(</span>P1 * P1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> H3 = D <span class=\"kw2\">mod</span> H3<br/>                  <span class=\"kw1\">then</span><br/>                     P2\u00a0:= <span class=\"nu0\">1</span> + <span class=\"br0\">(</span><span class=\"br0\">(</span>P1-<span class=\"nu0\">1</span><span class=\"br0\">)</span> * G / D<span class=\"br0\">)</span>;<br/>                     P3\u00a0:= <span class=\"nu0\">1</span> +<span class=\"br0\">(</span>P1*P2/H3<span class=\"br0\">)</span>;<br/>                     <span class=\"kw1\">if</span> Is_Prime<span class=\"br0\">(</span>P2<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> Is_Prime<span class=\"br0\">(</span>P3<span class=\"br0\">)</span><br/>                       <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>P2*P3<span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"br0\">(</span>P1-<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>                     <span class=\"kw1\">then</span><br/>                       Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><br/>                        <span class=\"br0\">(</span> Number'Image<span class=\"br0\">(</span>P1<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" *\"</span>   &amp; Number'Image<span class=\"br0\">(</span>P2<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" *\"</span> &amp;<br/>                          Number'Image<span class=\"br0\">(</span>P3<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"  = \"</span> &amp; Number'Image<span class=\"br0\">(</span>P1*P2*P3<span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/>                     <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>                  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span> Inner;<br/>            <span class=\"kw1\">end</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Nemesis;</pre>"}, {"lang": "ALGOL 68", "loc": 41, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># sieve of Eratosthene: sets s[i] to TRUE if i is prime, FALSE otherwise #</span><br/><span class=\"kw4\">PROC</span> sieve <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> s <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"coMULTI\"># start with everything flagged as prime                             #</span> <br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> s<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># sieve out the non-primes                                           #</span><br/>        s<span class=\"br0\">[</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> s <span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> s<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> i <span class=\"sy1\">*</span> i <span class=\"kw2\">BY</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> s<span class=\"br0\">[</span> p <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">OD</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># sieve #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># construct a sieve of primes up to the maximum number required for the task #</span><br/><span class=\"coMULTI\"># For Prime1, we need to check numbers up to around 120 000                  #</span><br/><span class=\"kw3\">INT</span> max number <span class=\"sy1\">=</span> 200 000<span class=\"sy1\">;</span><br/><span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> max number <span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> is prime<span class=\"sy1\">;</span><br/>sieve<span class=\"br0\">(</span> is prime <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Find the Carmichael 3 Stromg Pseudoprimes for Prime1 up to 61              #</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> prime1 <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> 61 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> is prime<span class=\"br0\">[</span> prime 1 <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>        <span class=\"kw2\">FOR</span> h3 <span class=\"kw2\">TO</span> prime1 <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">FOR</span> d <span class=\"kw2\">TO</span> <span class=\"br0\">(</span> h3 <span class=\"sy1\">+</span> prime1 <span class=\"br0\">)</span> <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span>   <span class=\"br0\">(</span> h3 <span class=\"sy1\">+</span> prime1 <span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span> prime1 <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> d <span class=\"sy1\">=</span> 0<br/>                <span class=\"kw16\">AND</span> <span class=\"br0\">(</span> <span class=\"sy1\">-</span> <span class=\"br0\">(</span> prime1 <span class=\"sy1\">*</span> prime1 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> h3 <span class=\"sy1\">=</span> d <span class=\"kw12\">MOD</span> h3<br/>                <span class=\"kw2\">THEN</span><br/>                    <span class=\"kw3\">INT</span> prime2 <span class=\"sy1\">=</span> 1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> prime1 <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span> h3 <span class=\"sy1\">+</span> prime1 <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> d <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">IF</span> is prime<span class=\"br0\">[</span> prime2 <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                        <span class=\"kw3\">INT</span> prime3 <span class=\"sy1\">=</span> 1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> prime1 <span class=\"sy1\">*</span> prime2 <span class=\"kw12\">OVER</span> h3 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                        <span class=\"kw2\">IF</span> is prime<span class=\"br0\">[</span> prime3 <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <br/>                            <span class=\"kw2\">IF</span> <span class=\"br0\">(</span> prime2 <span class=\"sy1\">*</span> prime3 <span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> <span class=\"br0\">(</span> prime1 <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span><br/>                                <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> prime1<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> prime2<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> prime3<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                            <span class=\"kw2\">FI</span><br/>                        <span class=\"kw2\">FI</span><br/>                    <span class=\"kw2\">FI</span><br/>                <span class=\"kw2\">FI</span><br/>            <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "C", "loc": 50, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* C's\u00a0% operator actually calculates the remainder of a / b so we need a<br/> * small adjustment so it works as expected for negative values */</span><br/><span class=\"co2\">#define mod(n,m) ((((n)\u00a0% (m)) + (m))\u00a0% (m))</span><br/>\u00a0<br/><span class=\"kw4\">int</span> is_prime<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">*</span>i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> carmichael3<span class=\"br0\">(</span><span class=\"kw4\">int</span> p1<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>is_prime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> h3<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> p3<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>h3 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> h3 <span class=\"sy0\">&lt;</span> p1<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>h3<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;</span> h3 <span class=\"sy0\">+</span> p1<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>h3 <span class=\"sy0\">+</span> p1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> mod<span class=\"br0\">(</span><span class=\"sy0\">-</span>p1 <span class=\"sy0\">*</span> p1<span class=\"sy0\">,</span> h3<span class=\"br0\">)</span> <span class=\"sy0\">==</span> d <span class=\"sy0\">%</span> h3<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                p2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>h3 <span class=\"sy0\">+</span> p1<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>is_prime<span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                p3 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">*</span> p2 <span class=\"sy0\">/</span> h3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>is_prime<span class=\"br0\">(</span>p3<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">*</span> p3<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> p1<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> p3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> p1<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> p1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">62</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>p1<span class=\"br0\">)</span><br/>        carmichael3<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 29, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>ns example<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn prime? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Prime number test (using Java) \"</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">.</span>isProbablePrime <span class=\"br0\">(</span>biginteger n<span class=\"br0\">)</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn carmichael <span class=\"br0\">[</span>p1<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Triplets of Carmichael primes, with first element prime p1 \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>prime? p1<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>into <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>for <span class=\"br0\">[</span>h3 <span class=\"br0\">(</span>range <span class=\"nu0\">2</span> p1<span class=\"br0\">)</span><br/>          <span class=\"sy0\">:</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>g <span class=\"br0\">(</span>+ h3 p1<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>          d <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> g<span class=\"br0\">)</span><br/>          <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>* g <span class=\"br0\">(</span>dec p1<span class=\"br0\">)</span><span class=\"br0\">)</span> d<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>- <span class=\"br0\">(</span>* p1 p1<span class=\"br0\">)</span><span class=\"br0\">)</span> h3<span class=\"br0\">)</span> <span class=\"br0\">(</span>mod d h3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">:</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>p2 <span class=\"br0\">(</span>inc <span class=\"br0\">(</span>quot <span class=\"br0\">(</span>* <span class=\"br0\">(</span>dec p1<span class=\"br0\">)</span> g<span class=\"br0\">)</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>          <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>prime? p2<span class=\"br0\">)</span><br/>          <span class=\"sy0\">:</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>p3 <span class=\"br0\">(</span>inc <span class=\"br0\">(</span>quot <span class=\"br0\">(</span>* p1 p2<span class=\"br0\">)</span> h3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>          <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>prime? p3<span class=\"br0\">)</span><br/>          <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>* p2 p3<span class=\"br0\">)</span> <span class=\"br0\">(</span>dec p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">[</span>p1 p2 p3<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Generate Result</span><br/><span class=\"br0\">(</span>def numbers <span class=\"br0\">(</span>mapcat carmichael <span class=\"br0\">(</span>range <span class=\"nu0\">2</span> <span class=\"nu0\">62</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>count numbers<span class=\"br0\">)</span> <span class=\"st0\">\"Carmichael numbers found:\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>t numbers<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"%5d x\u00a0%5d x\u00a0%5d =\u00a0%10d\"</span> <span class=\"br0\">(</span>first t<span class=\"br0\">)</span> <span class=\"br0\">(</span>second t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"sy0\"> * </span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 33, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">enum</span> mod <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> m<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> m<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isPrime<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> div <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> inc <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> div <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span><br/>     div <span class=\"sy0\">+=</span> inc<span class=\"sy0\">,</span> inc <span class=\"sy0\">=</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-</span> inc<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> div <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> p<span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">62</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>p.<span class=\"me1\">isPrime</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> h3<span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"me1\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">immutable</span> g <span class=\"sy0\">=</span> h3 <span class=\"sy0\">+</span> p<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> d<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">g</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"sy0\">*</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> d <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> mod<span class=\"br0\">(</span><span class=\"sy0\">-</span>p <span class=\"sy0\">*</span> p<span class=\"sy0\">,</span> h3<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> d <span class=\"sy0\">%</span> h3<span class=\"br0\">)</span><br/>          <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> g <span class=\"sy0\">/</span> d<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>q.<span class=\"me1\">isPrime</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>p <span class=\"sy0\">*</span> q <span class=\"sy0\">/</span> h3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>r.<span class=\"me1\">isPrime</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>q <span class=\"sy0\">*</span> r<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">\" x \"</span><span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> <span class=\"st0\">\" x \"</span><span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; charmicha\u00ebl numbers up to N-th prime\u00a0; 61 is 18-th prime</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>charms <span class=\"br0\">(</span>N <span class=\"nu0\">18</span><span class=\"br0\">)</span> local: <span class=\"br0\">(</span>h31 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Prime2 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Prime3 <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Prime1 <span class=\"br0\">(</span>primes N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>h3 <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> Prime1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">d</span>  <span class=\"br0\">(</span><span class=\"sy0\">+</span> h3 Prime1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">set!</span> h31 <span class=\"br0\">(</span><span class=\"sy0\">+</span> h3 Prime1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      #:continue <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> h31 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> Prime1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      #:continue <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"kw1\">d</span> h3<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> Prime1 Prime1<span class=\"br0\">)</span><span class=\"br0\">)</span> h3<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">set!</span> Prime2 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> Prime1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> h31 <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      #:when <span class=\"br0\">(</span>prime? Prime2<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">set!</span> Prime3 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>  Prime1  Prime2<span class=\"br0\">)</span>  h3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      #:when <span class=\"br0\">(</span>prime? Prime3<span class=\"br0\">)</span><br/>      #:when <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> Prime2 Prime3<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> Prime1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>printf <span class=\"st0\">\" \ud83d\udca5\u00a0%12d =\u00a0%d x\u00a0%d x\u00a0%d\"</span>  <span class=\"br0\">(</span><span class=\"sy0\">*</span> Prime1 Prime2 Prime3<span class=\"br0\">)</span> Prime1 Prime2 Prime3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">// Carmichael Number . Nigel Galloway: November 19th., 2017</span><br/><span class=\"kw1\">let</span> fN n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>n,<span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span>g<span class=\"br0\">)</span><span class=\"sy0\">/</span>e,g,e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>..<span class=\"br0\">(</span>n<span class=\"sy0\">+</span>g<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu0\">2</span>..<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">let</span> fG <span class=\"br0\">(</span>P1,P2,h3,d<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">mod</span><span class=\"st0\">' n g = (n%g+g)%g<br/>  let fN P3 = if isPrime P3 &amp;&amp; (P2*P3)%(P1-1)=1 then Some (P1,P2,P3) else None<br/>  if isPrime P2 &amp;&amp; ((h3+P1)*(P1-1))%d=0 &amp;&amp; mod'</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span>P1<span class=\"sy0\">*</span>P1<span class=\"br0\">)</span> h3<span class=\"sy0\">=</span>d<span class=\"sy0\">%</span>h3 <span class=\"kw1\">then</span> fN <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>P1<span class=\"sy0\">*</span>P2<span class=\"sy0\">/</span>h3<span class=\"br0\">)</span> <span class=\"kw1\">else</span> None<br/><span class=\"kw1\">let</span> carms g <span class=\"sy0\">=</span> primes<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">&lt;=</span>g<span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span> fN<span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">choose</span> fG<br/>carms <span class=\"nu0\">61</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>P1,P2,P3<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>printfn <span class=\"st0\">\"%2d x\u00a0%4d x\u00a0%5d =\u00a0%10d\"</span> P1 P2 P3 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint64</span> P3<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">uint64</span> <span class=\"br0\">(</span>P1<span class=\"sy0\">*</span>P2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 40, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw3\">LOGICAL</span> <span class=\"kw1\">FUNCTION</span> ISPRIME<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Ad-hoc, since N is not going to be big...</span><br/>       <span class=\"kw3\">INTEGER</span> N\t\t\t<span class=\"co1\">!Despite this intimidating allowance of 32 bits...</span><br/>       <span class=\"kw3\">INTEGER</span> F\t\t\t<span class=\"co1\">!A possible factor.</span><br/>        ISPRIME <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t\t<span class=\"co1\">!Most numbers aren't prime.</span><br/>        <span class=\"kw1\">DO</span> F <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>,<span class=\"kw4\">SQRT</span><span class=\"br0\">(</span>DFLOAT<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Wince...</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>N,F<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span>\t<span class=\"co1\">!Not even avoiding even numbers beyond two.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t\t<span class=\"co1\">!Nice and brief, though.</span><br/>        ISPRIME <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t\t<span class=\"co1\">!No factor found.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> ISPRIME\t\t<span class=\"co1\">!So, done. Hopefully, not often.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> CHASE<br/>      <span class=\"kw3\">INTEGER</span> P1,P2,P3\t<span class=\"co1\">!The three primes to be tested.</span><br/>      <span class=\"kw3\">INTEGER</span> H3,D\t<span class=\"co1\">!Assistants.</span><br/>      <span class=\"kw3\">INTEGER</span> MSG\t<span class=\"co1\">!File unit number.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t<span class=\"co1\">!Standard output.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!A heading would be good.</span><br/>    <span class=\"nu0\">1</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Carmichael numbers that are the product of three primes:\"</span><br/>     <span class=\"sy0\">&amp;</span> <span class=\"sy0\">/</span><span class=\"st0\">\"    P1  x P2  x P3 =\"</span>,9X,<span class=\"st0\">\"C\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">DO</span> P1 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>,<span class=\"nu0\">61</span>\t<span class=\"co1\">!Step through the specified range.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ISPRIME<span class=\"br0\">(</span>P1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Selecting only the primes.</span><br/>          <span class=\"kw1\">DO</span> H3 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>,P1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!For 1 &lt; H3 &lt; P1.</span><br/>            <span class=\"kw1\">DO</span> D <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,H3 <span class=\"sy0\">+</span> P1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!For 0 &lt; D &lt; H3 + P1.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span><span class=\"br0\">(</span>H3 <span class=\"sy0\">+</span> P1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>P1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>,D<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0\t<span class=\"co1\">!Filter.</span><br/>     <span class=\"sy0\">&amp;</span>        <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>H3 <span class=\"sy0\">+</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>P1<span class=\"sy0\">**</span><span class=\"nu0\">2</span>,H3<span class=\"br0\">)</span>,H3<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">EQ</span>.</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>D,H3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Beware MOD for negative numbers! MOD(-P1**2, may surprise...</span><br/>                P2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>P1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>H3 <span class=\"sy0\">+</span> P1<span class=\"br0\">)</span><span class=\"sy0\">/</span>D\t<span class=\"co1\">!Candidate for the second prime.</span><br/>                <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ISPRIME<span class=\"br0\">(</span>P2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!Is it prime?</span><br/>                  P3 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> P1<span class=\"sy0\">*</span>P2<span class=\"sy0\">/</span>H3\t\t\t<span class=\"co1\">!Yes. Candidate for the third prime.</span><br/>                  <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ISPRIME<span class=\"br0\">(</span>P3<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t\t<span class=\"co1\">!Is it prime?</span><br/>                    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>P2<span class=\"sy0\">*</span>P3,P1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.1<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!Yes! Final test.</span><br/>                      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">2</span><span class=\"br0\">)</span> P1,P2,P3, INT8<span class=\"br0\">(</span>P1<span class=\"br0\">)</span><span class=\"sy0\">*</span>P2<span class=\"sy0\">*</span>P3\t\t<span class=\"co1\">!Result!</span><br/>    <span class=\"nu0\">2</span>                 FORMAT <span class=\"br0\">(</span>3I6,I12<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>                  <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>                <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>              <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 59, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 17-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' using a sieve for finding primes</span><br/>\u00a0<br/><span class=\"co2\">#Define max_sieve 10000000 ' 10^7</span><br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Byte</span> isprime<span class=\"br0\">(</span>max_sieve<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' translated the pseudo code to FreeBASIC </span><br/><span class=\"kw1\">Sub</span> carmichael3<span class=\"br0\">(</span>p1 <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <br/>\u00a0<br/>  <span class=\"kw1\">If</span> isprime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> h3, d, p2, p3, t1, t2<br/>\u00a0<br/>  <span class=\"kw1\">For</span> h3 = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> p1 -<span class=\"nu0\">1</span><br/>    t1 = <span class=\"br0\">(</span>h3 + p1<span class=\"br0\">)</span> * <span class=\"br0\">(</span>p1 -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    t2 = <span class=\"br0\">(</span>-p1 * p1<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> h3<br/>    <span class=\"kw1\">If</span> t2 &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> t2 = t2 + h3<br/>    <span class=\"kw1\">For</span> d = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> h3 + p1 -<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> t1 <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> And t2 = <span class=\"br0\">(</span>d <span class=\"kw1\">Mod</span> h3<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        p2 = <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>t1 \\ d<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> isprime<span class=\"br0\">(</span>p2<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>        p3 = <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>p1 * p2 \\ h3<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> isprime<span class=\"br0\">(</span>p3<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p2 * p3<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"br0\">(</span>p1 -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"### * #### * #####\"</span>; p1; p2; p3<br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> d<br/>  <span class=\"kw1\">Next</span> h3<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> i, j<br/>\u00a0<br/><span class=\"co1\">'set up sieve</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> max_sieve <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>  isprime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/>isprime<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>max_sieve<span class=\"br0\">)</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">If</span> isprime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">For</span> j = i * i <span class=\"kw1\">To</span> max_sieve <span class=\"kw1\">Step</span> i * <span class=\"nu0\">2</span><br/>      isprime<span class=\"br0\">(</span>j<span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">61</span><br/>  carmichael3<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 48, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// Use this rather than\u00a0% for negative integers</span><br/><span class=\"kw4\">func</span> mod<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> m <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy1\">((</span>n <span class=\"sy3\">%</span> m<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> m<span class=\"sy1\">)</span> <span class=\"sy3\">%</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> isPrime<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">2</span> <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">%</span> <span class=\"nu0\">3</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">3</span> <span class=\"sy1\">}</span><br/>    d <span class=\"sy2\">:=</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy3\">*</span> d &lt;<span class=\"sy2\">=</span> n <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy3\">%</span> d <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>        d <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy3\">%</span> d <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>        d <span class=\"sy2\">+=</span> <span class=\"nu0\">4</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> carmichael<span class=\"sy1\">(</span>p1 <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> h3 <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> h3 &lt; p1<span class=\"sy1\">;</span> h3<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> d &lt; h3 <span class=\"sy3\">+</span> p1<span class=\"sy1\">;</span> d<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>h3 <span class=\"sy3\">+</span> p1<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>p1 <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">%</span> d <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; mod<span class=\"sy1\">(</span><span class=\"sy3\">-</span>p1 <span class=\"sy3\">*</span> p1<span class=\"sy1\">,</span> h3<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> d <span class=\"sy3\">%</span> h3 <span class=\"sy1\">{</span><br/>                p2 <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <span class=\"sy1\">(</span>p1 <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>h3 <span class=\"sy3\">+</span> p1<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> d<br/>                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>isPrime<span class=\"sy1\">(</span>p2<span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <span class=\"kw1\">continue</span> <span class=\"sy1\">}</span><br/>                p3 <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> p1 <span class=\"sy3\">*</span> p2 <span class=\"sy3\">/</span> h3<br/>                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>isPrime<span class=\"sy1\">(</span>p3<span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <span class=\"kw1\">continue</span> <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">if</span> p2 <span class=\"sy3\">*</span> p3 <span class=\"sy3\">%</span> <span class=\"sy1\">(</span>p1 <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span> <span class=\"kw1\">continue</span> <span class=\"sy1\">}</span><br/>                c <span class=\"sy2\">:=</span> p1 <span class=\"sy3\">*</span> p2 <span class=\"sy3\">*</span> p3<br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%2d  \u00a0%4d  \u00a0%5d    \u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">,</span> p3<span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"The following are Carmichael munbers for p1 &lt;= 61:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"p1     p2      p3     product\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"==     ==      ==     =======\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> p1 <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> p1 &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">61</span><span class=\"sy1\">;</span> p1<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> isPrime<span class=\"sy1\">(</span>p1<span class=\"sy1\">)</span> <span class=\"sy1\">{</span> carmichael<span class=\"sy1\">(</span>p1<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 18, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>runhaskell<br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Numbers<span class=\"sy0\">.</span>Primes<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>guard<span class=\"br0\">)</span><br/>\u00a0<br/>carmichaels <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  p <span class=\"sy0\">&lt;-</span> takeWhile <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"nu0\">61</span><span class=\"br0\">)</span> primes<br/>  h3 <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">let</span> g <span class=\"sy0\">=</span> h3 <span class=\"sy0\">+</span> p<br/>  d <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">(</span>g<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  guard <span class=\"sy0\">$</span> <span class=\"br0\">(</span>g <span class=\"sy0\">*</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">*</span> p <span class=\"sy0\">*</span> p<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` h3 <span class=\"sy0\">==</span> d `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` h3<br/>  <span class=\"kw1\">let</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> g<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` d<span class=\"br0\">)</span><br/>  guard <span class=\"sy0\">$</span> isPrime q<br/>  <span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"sy0\">*</span> q<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` h3<span class=\"br0\">)</span><br/>  guard <span class=\"sy0\">$</span> isPrime r <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>q <span class=\"sy0\">*</span> r<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> carmichaels</pre>"}, {"lang": "Icon and Unicon", "loc": 24, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> <span class=\"st0\">\"factors\"</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>A<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">61</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>carmichael3<span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> carmichael3<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>h <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">+!</span><span class=\"br0\">(</span>p1<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>d <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>h<span class=\"sy0\">+</span>p1<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mod<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>h<span class=\"sy0\">+</span>p1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p1<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>d<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> mod<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>p1<span class=\"sy0\">*</span>p1<span class=\"br0\">)</span><span class=\"sy0\">,</span>h<span class=\"br0\">)</span> <span class=\"sy0\">=</span> mod<span class=\"br0\">(</span>d<span class=\"sy0\">,</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>            p2 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>p1<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>h<span class=\"sy0\">+</span>p1<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<br/>            p3 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> p1<span class=\"sy0\">*</span>p2<span class=\"sy0\">/</span>h<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"sy0\">,</span> isprime<span class=\"br0\">(</span>p3<span class=\"br0\">)</span><span class=\"sy0\">,</span> mod<span class=\"br0\">(</span><span class=\"br0\">(</span>p2<span class=\"sy0\">*</span>p3<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>p1<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">suspend</span> format<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2<span class=\"sy0\">,</span>p3<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mod<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>d<span class=\"sy0\">+</span>n<span class=\"sy0\">%</span>d<span class=\"br0\">)</span><span class=\"sy0\">%</span>d<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> format<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2<span class=\"sy0\">,</span>p3<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">left</span><span class=\"br0\">(</span>p1<span class=\"sy0\">||</span><span class=\"st0\">\" * \"</span><span class=\"sy0\">||</span>p2<span class=\"sy0\">||</span><span class=\"st0\">\" * \"</span><span class=\"sy0\">||</span>p3<span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"st0\">\" = \"</span><span class=\"sy0\">||</span><span class=\"br0\">(</span>p1<span class=\"sy0\">*</span>p2<span class=\"sy0\">*</span>p3<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>q =: <span class=\"sy0\">(</span>,\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span>~ &gt;:@<a class=\"__cf_email__\" data-cfemail=\"41286f01\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;:@+/\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>&amp;.&gt;@<span class=\"sy0\">(</span>,&amp;.&gt;\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span>~ &gt;:@i.<span class=\"sy0\">)</span>&amp;.&gt;@<a class=\"__cf_email__\" data-cfemail=\"29600769\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;p:@i.<span class=\"sy0\">)</span>@&gt;:<br/>f1 =: <span class=\"sy0\">(</span>0: = {. | &lt;:@{: * <span class=\"nu0\">1</span>&amp;{ + {:<span class=\"sy0\">)</span> *. <span class=\"sy0\">((</span><span class=\"nu0\">1</span>&amp;{ | <a class=\"__cf_email__\" data-cfemail=\"b09df0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*:@{:<span class=\"sy0\">)</span> = <span class=\"nu0\">1</span>&amp;{ | {.<span class=\"sy0\">)</span><br/>f2 =: 1: = &lt;:@{. | <span class=\"sy0\">(</span>{: * <span class=\"nu0\">1</span>&amp;{<span class=\"sy0\">)</span><br/>p2 =: 0:`<span class=\"sy0\">((</span>* <span class=\"nu0\">1</span>&amp;p:<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>&lt;<a class=\"__cf_email__\" data-cfemail=\"715f31\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>1: + &lt;:@{: * {.\u00a0%~ <span class=\"nu0\">1</span>&amp;{ + {:<span class=\"sy0\">)))</span>@.f1<br/>p3 =: 3:$0:`<span class=\"sy0\">((</span>* <span class=\"nu0\">1</span>&amp;p:<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>{: , {. , <span class=\"sy0\">(</span>&lt;<a class=\"__cf_email__\" data-cfemail=\"99b7d9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;:@<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;{\u00a0%~ {. * {:<span class=\"sy0\">))))</span>@.<span class=\"sy0\">(</span>*@{.<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>p2 , }.<span class=\"sy0\">)</span><br/><span class=\"sy0\">(</span>-. 3:$0:<span class=\"sy0\">)</span>@<span class=\"sy0\">(((</span>*\"<span class=\"nu0\">0</span> f2<span class=\"sy0\">)</span>@p3\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>@;@;@q<span class=\"sy0\">)</span> <span class=\"nu0\">61</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 39, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> mod<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> m<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> div <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>, inc <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>div, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span><br/>                div <span class=\"sy0\">+=</span> inc, inc <span class=\"sy0\">=</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-</span> inc<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> div <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">62</span><span class=\"sy0\">;</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> h3 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> h3 <span class=\"sy0\">&lt;</span> p<span class=\"sy0\">;</span> h3<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> g <span class=\"sy0\">=</span> h3 <span class=\"sy0\">+</span> p<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;</span> g<span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"sy0\">*</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> d <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> mod<span class=\"br0\">(</span><span class=\"sy0\">-</span>p <span class=\"sy0\">*</span> p, h3<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> d <span class=\"sy0\">%</span> h3<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> g <span class=\"sy0\">/</span> d<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>p <span class=\"sy0\">*</span> q <span class=\"sy0\">/</span> h3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>q <span class=\"sy0\">*</span> r<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d x\u00a0%d x\u00a0%d%n\"</span>, p, q, r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 21, "block": "<pre class=\"text highlighted_source\">using Primes<br/>\u00a0<br/>function carmichael(pmax::Integer)<br/>    if pmax \u2264 0 throw(DomainError(\"pmax must be strictly positive\")) end<br/>    car = Vector{typeof(pmax)}(0)<br/>    for p in primes(pmax)<br/>        for h\u2083 in 2:(p-1)<br/>            m = (p - 1) * (h\u2083 + p)<br/>            pmh = mod(-p ^ 2, h\u2083)<br/>            for \u0394 in 1:(h\u2083+p-1)<br/>                if m\u00a0% \u0394\u00a0!= 0 || \u0394\u00a0% h\u2083\u00a0!= pmh continue end<br/>                q = m \u00f7 \u0394 + 1<br/>                if\u00a0!isprime(q) continue end<br/>                r = (p * q - 1) \u00f7 h\u2083 + 1<br/>                if\u00a0!isprime(r) || mod(q * r, p - 1) == 1 continue end<br/>                append!(car, [p, q, r])<br/>            end<br/>        end<br/>    end<br/>    return reshape(car, 3, length(car) \u00f7 3)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 36, "block": "<pre class=\"scala highlighted_source\">fun Int.<span class=\"me1\">isPrime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> when <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> || <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>toDouble<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"nu0\">3</span>..<span class=\"me1\">max</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">filter</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">%</span> it <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>                .<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun mod<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, m<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> m<span class=\"br0\">)</span> + m<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p1 in <span class=\"nu0\">3</span>..<span class=\"nu0\">61</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p1.<span class=\"me1\">isPrime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>h3 in <span class=\"nu0\">2</span> until p1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> h3 + p1<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in <span class=\"nu0\">1</span> until g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"sy0\">*</span> <span class=\"br0\">(</span>p1 - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> mod<span class=\"br0\">(</span>-p1 <span class=\"sy0\">*</span> p1, h3<span class=\"br0\">)</span> <span class=\"sy0\">==</span> d <span class=\"sy0\">%</span> h3<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>p1 - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> g / d<br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>q.<span class=\"me1\">isPrime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>p1 <span class=\"sy0\">*</span> q / h3<span class=\"br0\">)</span><br/>                            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r.<span class=\"me1\">isPrime</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>q <span class=\"sy0\">*</span> r<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>p1 - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                println<span class=\"br0\">(</span><span class=\"st0\">\"$p1 x $q x $r\"</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 8, "block": "<pre class=\"text highlighted_source\">Cases[Cases[<br/>  Cases[Table[{p1, h3, d}, {p1, Array[Prime, <a class=\"__cf_email__\" data-cfemail=\"8dddffe4e0e8dde4cdbbbc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]}, {h3, 2, <br/>     p1 - 1}, {d, 1, h3 + p1 - 1}], {p1_Integer, h3_, d_} /; <br/>     PrimeQ[1 + (p1 - 1) (h3 + p1)/d] &amp;&amp; <br/>      Divisible[p1^2 + d, h3]\u00a0:&gt; {p1, 1 + (p1 - 1) (h3 + p1)/d, h3}, <br/>   Infinity], {p1_, p2_, h3_} /; PrimeQ[1 + Floor[p1 p2/h3]]\u00a0:&gt; {p1, <br/>    p2, 1 + Floor[p1 p2/h3]}], {p1_, p2_, p3_} /; <br/>   Mod[p2 p3, p1 - 1] == 1\u00a0:&gt; Print[p1, \"*\", p2, \"*\", p3]]</pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\">f<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>q<span class=\"sy0\">,</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>h<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>p<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>d<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>h<span class=\"sy0\">+</span>p<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>h<span class=\"sy0\">+</span>p<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>d<span class=\"sy0\">==</span><span class=\"nu1\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">Mod</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>h<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">==-</span>d <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">isprime</span><span class=\"br0\">(</span>q<span class=\"sy0\">=</span><span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>h<span class=\"sy0\">+</span>p<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">isprime</span><span class=\"br0\">(</span>r<span class=\"sy0\">=</span>p<span class=\"sy0\">*</span>q<span class=\"sy0\">\\</span>h<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span>q<span class=\"sy0\">*</span>r<span class=\"sy0\">%</span><span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>        <span class=\"kw1\">listput</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>p<span class=\"sy0\">*</span>q<span class=\"sy0\">*</span>r<span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Set</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">forprime</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">67</span><span class=\"sy0\">,</span>v<span class=\"sy0\">=</span>f<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/forprimes is_prime vecprod/</span><span class=\"sy0\">;</span><br/>\u00a0<br/>forprimes <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$h3</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"re0\">$p</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$ph3</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span> <span class=\"sy0\">+</span> <span class=\"re0\">$h3</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$ph3</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>               <span class=\"co1\"># Jameseon procedure page 6</span><br/>         <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$p</span><span class=\"re0\">*$p</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$h3</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">%</span> <span class=\"re0\">$h3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"re0\">*$ph3</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$q</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"re0\">*$ph3</span> <span class=\"sy0\">/</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span>        <span class=\"co1\"># Jameson eq 7</span><br/>         <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"re0\">*$q</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$h3</span><span class=\"sy0\">;</span>         <span class=\"co1\"># Jameson eq 6</span><br/>         <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"re0\">*$r</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>         <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%2d x\u00a0%5d x\u00a0%5d =\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span>vecprod<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span><span class=\"re0\">$r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">61</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">67</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime <span class=\"sy0\">-&gt;</span> \\Prime1 <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">^..^</span> Prime1 <span class=\"sy0\">-&gt;</span> \\h3 <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> \\g <span class=\"sy0\">=</span> h3 <span class=\"sy0\">+</span> Prime1<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">^..^</span> h3 <span class=\"sy0\">+</span> Prime1 <span class=\"sy0\">-&gt;</span> \\d <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>h3 <span class=\"sy0\">+</span> Prime1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Prime1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%%</span> d <span class=\"kw1\">and</span> <span class=\"sy0\">-</span>Prime1<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">%</span> h3 <span class=\"sy0\">==</span> d <span class=\"sy0\">%</span> h3  <span class=\"br0\">{</span><br/>                <span class=\"kw1\">my</span> \\Prime2 <span class=\"sy0\">=</span> <span class=\"kw3\">floor</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>Prime1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> g <span class=\"sy0\">/</span> d<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> Prime2<span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">my</span> \\Prime3 <span class=\"sy0\">=</span> <span class=\"kw3\">floor</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> Prime1 <span class=\"sy0\">*</span> Prime2 <span class=\"sy0\">/</span> h3<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> Prime3<span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"br0\">(</span>Prime2 <span class=\"sy0\">*</span> Prime3<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>Prime1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw3\">say</span> <span class=\"st0\">\"{Prime1} \u00d7 {Prime2} \u00d7 {Prime3} == {Prime1 * Prime2 * Prime3}\"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 40, "block": "<pre class=\"text highlighted_source\">(de modulo (X Y)<br/>   (% (+ Y (% X Y)) Y) )<br/>\u00a0<br/>(de prime? (N)<br/>   (let D 0<br/>      (or<br/>         (= N 2)<br/>         (and<br/>            (&gt; N 1)<br/>            (bit? 1 N)<br/>            (for (D 3  T  (+ D 2))<br/>               (T (&gt; D (sqrt N)) T)<br/>               (T (=0 (% N D)) NIL) ) ) ) ) )<br/>\u00a0<br/>(for P1 61<br/>   (when (prime? P1)<br/>      (for (H3 2 (&gt; P1 H3) (inc H3))<br/>         (let G (+ H3 P1)<br/>            (for (D 1 (&gt; G D) (inc D))<br/>               (when<br/>                  (and<br/>                     (=0<br/>                        (% (* G (dec P1)) D) )<br/>                     (=<br/>                        (modulo (* (- P1) P1) H3)<br/>                        (% D H3)) )<br/>                  (let<br/>                     (P2<br/>                        (inc<br/>                           (/ (* (dec P1) G) D) )<br/>                        P3 (inc (/ (* P1 P2) H3)) )<br/>                     (when<br/>                        (and<br/>                           (prime? P2)<br/>                           (prime? P3)<br/>                           (= 1 (modulo (* P2 P3) (dec P1))) )<br/>                        (print (list P1 P2 P3)) ) ) ) ) ) ) ) )<br/>(prinl)<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PL/I", "loc": 27, "block": "<pre class=\"text highlighted_source\">Carmichael: procedure options (main, reorder);  /* 24 January 2014 */<br/>   declare (Prime1, Prime2, Prime3, h3, d) fixed binary (31);<br/>\u00a0<br/>   put ('Carmichael numbers are:');<br/>\u00a0<br/>   do Prime1 = 1 to 61;<br/>\u00a0<br/>      do h3 = 2 to Prime1;<br/>\u00a0<br/>d_loop:  do d = 1 to h3+Prime1-1;<br/>            if (mod((h3+Prime1)*(Prime1-1), d) = 0) &amp;<br/>               (mod(-Prime1*Prime1, h3) = mod(d, h3)) then<br/>               do;<br/>                  Prime2 = (Prime1-1) * (h3+Prime1)/d; Prime2 = Prime2 + 1;<br/>                  if ^is_prime(Prime2) then iterate d_loop;<br/>                  Prime3 = Prime1*Prime2/h3; Prime3 = Prime3 + 1;<br/>                  if ^is_prime(Prime3) then iterate d_loop;<br/>                  if mod(Prime2*Prime3, Prime1-1) ^= 1 then iterate d_loop;<br/>                  put skip edit (trim(Prime1), ' x ', trim(Prime2), ' x ', trim(Prime3)) (A);<br/>               end;<br/>         end;<br/>      end;<br/>   end;<br/>\u00a0<br/>   /* Uses is_prime from Rosetta Code PL/I. */<br/>\u00a0<br/>end Carmichael;</pre>"}, {"lang": "Python", "loc": 71, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> Isprime<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<br/>    Extensible sieve of Eratosthenes<br/>\u00a0<br/>    &gt;&gt;&gt; isprime.check(11)<br/>    True<br/>    &gt;&gt;&gt; isprime.multiples<br/>    {2, 4, 6, 8, 9, 10}<br/>    &gt;&gt;&gt; isprime.primes<br/>    [2, 3, 5, 7, 11]<br/>    &gt;&gt;&gt; isprime(13)<br/>    True<br/>    &gt;&gt;&gt; isprime.multiples<br/>    {2, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22}<br/>    &gt;&gt;&gt; isprime.primes<br/>    [2, 3, 5, 7, 11, 13, 17, 19]<br/>    &gt;&gt;&gt; isprime.nmax<br/>    22<br/>    &gt;&gt;&gt; <br/>    '''</span><br/>    multiples <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>    primes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    nmax <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> nmax<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> nmax <span class=\"sy0\">&gt;</span> <span class=\"kw2\">self</span>.<span class=\"me1\">nmax</span>:<br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">check</span><span class=\"br0\">(</span>nmax<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> check<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">float</span>:<br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> n.<span class=\"me1\">is_integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>            n <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        multiples <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">multiples</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">nmax</span>:<br/>            <span class=\"kw1\">return</span> n <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> multiples<br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"co1\"># Extend the sieve</span><br/>            primes<span class=\"sy0\">,</span> nmax <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">primes</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">nmax</span><br/>            newmax <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span>nmax*<span class=\"nu0\">2</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> primes:<br/>                multiples.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>p*<span class=\"br0\">(</span><span class=\"br0\">(</span>nmax + p + <span class=\"nu0\">1</span><span class=\"br0\">)</span> // p<span class=\"br0\">)</span><span class=\"sy0\">,</span> newmax+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>nmax+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> newmax+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">if</span> i <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> multiples:<br/>                    primes.<span class=\"me1\">append</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                    multiples.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>i*<span class=\"nu0\">2</span><span class=\"sy0\">,</span> newmax+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">nmax</span> <span class=\"sy0\">=</span> newmax<br/>            <span class=\"kw1\">return</span> n <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> multiples<br/>\u00a0<br/>    <span class=\"kw4\">__call__</span> <span class=\"sy0\">=</span> check<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> carmichael<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>:<br/>    ans <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> isprime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> h3 <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> p1<span class=\"br0\">)</span>:<br/>            g <span class=\"sy0\">=</span> h3 + p1<br/>            <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> g<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>g * <span class=\"br0\">(</span>p1 - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0% d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>-p1 * p1<span class=\"br0\">)</span>\u00a0% h3 <span class=\"sy0\">==</span> d\u00a0% h3:<br/>                    p2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + <span class=\"br0\">(</span><span class=\"br0\">(</span>p1 - <span class=\"nu0\">1</span><span class=\"br0\">)</span>* g // d<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> isprime<span class=\"br0\">(</span>p2<span class=\"br0\">)</span>:<br/>                        p3 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>p1 * p2 // h3<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> isprime<span class=\"br0\">(</span>p3<span class=\"br0\">)</span>:<br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p2 * p3<span class=\"br0\">)</span>\u00a0% <span class=\"br0\">(</span>p1 - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>                                <span class=\"co1\">#print('%i X\u00a0%i X\u00a0%i'\u00a0% (p1, p2, p3))</span><br/>                                ans +<span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">tuple</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> p3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> ans<br/>\u00a0<br/>isprime <span class=\"sy0\">=</span> Isprime<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>ans <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>carmichael<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">62</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> isprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">',<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw3\">repr</span><span class=\"br0\">(</span>ans<span class=\"br0\">[</span>i:i+<span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>\u00a0<br/>(for ([p1 (in-range 3 62)] #:when (prime? p1))<br/>  (for ([h3 (in-range 2 p1)])<br/>    (define g (+ p1 h3))<br/>    (let next ([d 1])<br/>      (when (&lt; d g)<br/>        (when (and (zero? (modulo (* g (- p1 1)) d))<br/>                   (= (modulo (- (sqr p1)) h3) (modulo d h3)))<br/>          (define p2 (+ 1 (quotient (* g (- p1 1)) d)))<br/>          (when (prime? p2)<br/>            (define p3 (+ 1 (quotient (* p1 p2) h3)))<br/>            (when (and (prime? p3) (= 1 (modulo (* p2 p3) (- p1 1))))<br/>              (displayln (list p1 p2 p3 '=&gt; (* p1 p2 p3))))))<br/>        (next (+ d 1))))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 39, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates  Carmichael  3\u2500strong  pseudoprimes  (up to and including N). */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">18</span>                                <span class=\"coMULTI\">/*handle big dig #s (9 is the default).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>;    <span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">61</span>            <span class=\"coMULTI\">/*allow user to specify for the search.*/</span><br/>tell= N<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>;           N=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*N&gt;0?  Then display Carmichael numbers*/</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*number of Carmichael numbers so far. */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   @<span class=\"sy0\">.</span>2=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>3=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>5=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>7=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>11=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>13=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>17=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>19=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>23=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>29=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>31=<span class=\"nu0\">1</span><br/>                                                 <span class=\"coMULTI\">/*[\u2191]  prime number memoization array. */</span><br/>    <span class=\"kw1\">do</span> p=<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> N  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;  pm=p-<span class=\"nu0\">1</span>;   bot=<span class=\"nu0\">0</span>;  top=<span class=\"nu0\">0</span> <span class=\"coMULTI\">/*step through some (odd) prime numbers*/</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;  nps=-p<span class=\"sy0\">*</span>p      <span class=\"coMULTI\">/*is   P   a prime?   No, then skip it.*/</span><br/>   \u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                         <span class=\"coMULTI\">/*the list of Carmichael #'s  (so far).*/</span><br/>             <span class=\"kw1\">do</span> h3=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span>  pm;  g=h3+p            <span class=\"coMULTI\">/*find Carmichael #s  for this prime.  */</span><br/>             gPM=g<span class=\"sy0\">*</span>pm;  npsH3=<span class=\"br0\">(</span><span class=\"br0\">(</span>nps<span class=\"sy0\">//</span>h3<span class=\"br0\">)</span>+h3<span class=\"br0\">)</span><span class=\"sy0\">//</span>h3 <span class=\"coMULTI\">/*define a couple of shortcuts for pgm.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193] perform some weeding of D values*/</span><br/>                 <span class=\"kw1\">do</span> d=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> g-<span class=\"nu0\">1</span>;                   <span class=\"kw1\">if</span> gPM<span class=\"sy0\">//</span>d <span class=\"sy0\">\\</span>== <span class=\"nu0\">0</span>      <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                                                    <span class=\"kw1\">if</span> npsH3  <span class=\"sy0\">\\</span>== d<span class=\"sy0\">//</span>h3  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                                       q=<span class=\"nu0\">1</span>+gPM%d;   <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                                       r=<span class=\"nu0\">1</span>+p<span class=\"sy0\">*</span>q%h3;  <span class=\"kw1\">if</span> q<span class=\"sy0\">*</span>r<span class=\"sy0\">//</span>pm<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                                                    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>isPrime<span class=\"br0\">(</span>r<span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                 #=#+<span class=\"nu0\">1</span>;               \u00a0!<span class=\"sy0\">.</span>q=r     <span class=\"coMULTI\">/*bump Carmichael counter; add to array*/</span><br/>                 <span class=\"kw1\">if</span> bot==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> bot=q;   bot=<span class=\"kw6\">min</span><span class=\"br0\">(</span>bot,q<span class=\"br0\">)</span>;    top=<span class=\"kw6\">max</span><span class=\"br0\">(</span>top,q<span class=\"br0\">)</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*d*/</span><br/>             <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*h3*/</span><br/>    $=                                           <span class=\"coMULTI\">/*display a list of some Carmichael #s.*/</span><br/>             <span class=\"kw1\">do</span> j=bot  <span class=\"kw2\">to</span> top  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">while</span> tell;   <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> $=$  p<span class=\"st0\">\"\u2219\"</span>j<span class=\"st0\">'\u2219'</span>!<span class=\"sy0\">.</span>j<br/>             <span class=\"kw3\">end</span>           <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> $<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'Carmichael number: '</span>      <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span>                <span class=\"coMULTI\">/*p*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 '</span>     #     <span class=\"st0\">\" Carmichael numbers found.\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isPrime: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;             <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>x      <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>           <span class=\"coMULTI\">/*X a known prime?*/</span><br/>         <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">37</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;  <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>; <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span> <span class=\"nu0\">3</span>==<span class=\"nu0\">0</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>         <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> x <span class=\"st0\">''</span> -<span class=\"nu0\">1</span> _;     <span class=\"kw1\">if</span> _==<span class=\"nu0\">5</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>; <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span> <span class=\"nu0\">7</span>==<span class=\"nu0\">0</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                                <span class=\"kw1\">do</span> k=<span class=\"nu0\">11</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">6</span>  <span class=\"kw2\">until</span> k<span class=\"sy0\">*</span>k<span class=\"sy0\">&gt;</span>x;  <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span> k   ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                                                             <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span><span class=\"br0\">(</span>k+<span class=\"nu0\">2</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                                <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*i*/</span><br/>         @<span class=\"sy0\">.</span>x=<span class=\"nu0\">1</span>;   <span class=\"kw1\">return</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Ring", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Carmichael 3 strong pseudoprimes<br/>\u00a0<br/>see \"The following are Carmichael munbers for p1 &lt;= 61:\" + nl<br/>see \"p1     p2      p3     product\" + nl<br/>\u00a0<br/>for p = 2 to 61<br/>    carmichael3(p)<br/>next<br/>\u00a0<br/>func carmichael3(p1) <br/>       if isprime(p1) = 0  return ok<br/>       for h3 = 1 to p1 -1<br/>            t1 = (h3 + p1) * (p1 -1)<br/>            t2 = (-p1 * p1)\u00a0% h3<br/>            if t2 &lt; 0<br/>               t2 = t2 + h3<br/>            ok<br/>            for d = 1 to h3 + p1 -1<br/>                 if t1\u00a0% d = 0 and t2 = (d\u00a0% h3) <br/>                   p2 = 1 + (t1 / d)<br/>                   if isprime(p2) = 0<br/>                      loop<br/>                   ok<br/>                   p3 = 1 + floor((p1 * p2 / h3))<br/>                   if isprime(p3) = 0 or ((p2 * p3)\u00a0% (p1 -1))\u00a0!= 1 <br/>                      loop<br/>                   ok<br/>                   see \"\" + p1 + \"       \" + p2 + \"      \" + p3 + \"    \" + p1*p2*p3 + nl<br/>                ok<br/>            next <br/>     next <br/>\u00a0<br/>func isprime(num)<br/>       if (num &lt;= 1) return 0 ok<br/>       if (num\u00a0% 2 = 0) and num\u00a0!= 2<br/>          return 0<br/>       ok<br/>       for i = 3 to floor(num / 2) -1 step 2<br/>           if (num\u00a0% i = 0) <br/>              return 0<br/>           ok<br/>       next<br/>       return 1<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Generate Charmichael Numbers</span><br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/>\u00a0<br/>Prime.<span class=\"me1\">each</span><span class=\"br0\">(</span><span class=\"nu0\">61</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">2</span>...<span class=\"kw3\">p</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>h3<span class=\"sy0\">|</span><br/>    g = h3 <span class=\"sy0\">+</span> <span class=\"kw3\">p</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>...<span class=\"me1\">g</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>d<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>g<span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> d\u00a0!= <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"kw3\">p</span><span class=\"sy0\">*</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> h3\u00a0!= d <span class=\"sy0\">%</span> h3<br/>      q = <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">p</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> g <span class=\"sy0\">/</span> d<span class=\"br0\">)</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> q.<span class=\"me1\">prime</span>?<br/>      r = <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw3\">p</span> <span class=\"sy0\">*</span> q <span class=\"sy0\">/</span> h3<span class=\"br0\">)</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> r.<span class=\"me1\">prime</span>? <span class=\"kw1\">and</span> <span class=\"br0\">(</span>q <span class=\"sy0\">*</span> r<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"kw3\">p</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{p} x #{q} x #{r}\"</span> <br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn is_prime(n: i64) -&gt; bool {<br/>    if n &gt; 1 {<br/>        (2..((n / 2) + 1)).all(|x| n\u00a0% x\u00a0!= 0)<br/>    } else {<br/>        false<br/>    }<br/>}<br/>\u00a0<br/>// The modulo operator actually calculates the remainder.<br/>fn modulo(n: i64, m: i64) -&gt; i64 {<br/>    ((n\u00a0% m) + m)\u00a0% m<br/>}<br/>\u00a0<br/>fn carmichael(p1: i64) -&gt; Vec&lt;(i64, i64, i64)&gt; {<br/>    let mut results = Vec::new();<br/>    if\u00a0!is_prime(p1) {<br/>        return results;<br/>    }<br/>\u00a0<br/>    for h3 in 2..p1 {<br/>        for d in 1..(h3 + p1) {<br/>            if (h3 + p1) * (p1 - 1)\u00a0% d\u00a0!= 0 || modulo(-p1 * p1, h3)\u00a0!= d\u00a0% h3 {<br/>                continue;<br/>            }<br/>\u00a0<br/>            let p2 = 1 + ((p1 - 1) * (h3 + p1) / d);<br/>            if\u00a0!is_prime(p2) {<br/>                continue;<br/>            }<br/>\u00a0<br/>            let p3 = 1 + (p1 * p2 / h3);<br/>            if\u00a0!is_prime(p3) || ((p2 * p3)\u00a0% (p1 - 1)\u00a0!= 1) {<br/>                continue;<br/>            }<br/>\u00a0<br/>            results.push((p1, p2, p3));<br/>        }<br/>    }<br/>\u00a0<br/>    results<br/>}<br/>\u00a0<br/>fn main() {<br/>    (1..62)<br/>        .filter(|&amp;x| is_prime(x))<br/>        .map(carmichael)<br/>        .filter(|x|\u00a0!x.is_empty())<br/>        .flat_map(|x| x)<br/>        .inspect(|x| println!(\"{:?}\", x))<br/>        .count(); // Evaluate entire iterator<br/>}<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 48, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: isPrime (in integer: number) is func<br/>  result<br/>    var boolean: prime is FALSE;<br/>  local<br/>    var integer: upTo is 0;<br/>    var integer: testNum is 3;<br/>  begin<br/>    if number = 2 then<br/>      prime\u00a0:= TRUE;<br/>    elsif odd(number) and number &gt; 2 then<br/>      upTo\u00a0:= sqrt(number);<br/>      while number rem testNum &lt;&gt; 0 and testNum &lt;= upTo do<br/>        testNum +:= 2;<br/>      end while;<br/>      prime\u00a0:= testNum &gt; upTo;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: p1 is 0;<br/>    var integer: h3 is 0;<br/>    var integer: g is 0;<br/>    var integer: d is 0;<br/>    var integer: p2 is 0;<br/>    var integer: p3 is 0;<br/>  begin<br/>    for p1 range 2 to 61 do<br/>      if isPrime(p1) then<br/>        for h3 range 2 to p1 do<br/>          g\u00a0:= h3 + p1;<br/>          for d range 1 to pred(g) do<br/>            if (g * pred(p1)) mod d = 0 and -p1 ** 2 mod h3 = d mod h3 then<br/>              p2\u00a0:= 1 + pred(p1) * g div d;<br/>              if isPrime(p2) then<br/>                p3\u00a0:= 1 + p1 * p2 div h3;<br/>                if isPrime(p3) and (p2 * p3) mod pred(p1) = 1 then<br/>                  writeln(p1 &lt;&amp; \" * \" &lt;&amp; p2 &lt;&amp; \" * \" &lt;&amp; p3 &lt;&amp; \" = \" &lt;&amp; p1*p2*p3);<br/>                end if;<br/>              end if;<br/>            end if;<br/>          end for;<br/>        end for;<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 21, "block": "<pre class=\"ruby highlighted_source\">func forprimes<span class=\"br0\">(</span>a, b, callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>a = <span class=\"br0\">(</span>a<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> next_prime<span class=\"br0\">)</span>; a <span class=\"sy0\">&lt;</span>= b; a.<span class=\"me1\">next_prime</span>!<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        callback<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>forprimes<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">61</span>, func<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">for</span> h3 <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> ..^ <span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      var ph3 = <span class=\"br0\">(</span><span class=\"kw3\">p</span> <span class=\"sy0\">+</span> h3<span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> ..^ ph3<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"kw3\">p</span> <span class=\"sy0\">*</span> <span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> h3<span class=\"br0\">)</span>\u00a0!= <span class=\"br0\">(</span>d <span class=\"sy0\">%</span> h3<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> ph3<span class=\"br0\">)</span> <span class=\"sy0\">%</span> d <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>         var q = <span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> ph3 <span class=\"sy0\">/</span> d<span class=\"br0\">)</span><br/>         q.<span class=\"me1\">is_prime</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>         var r = <span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"sy0\">*</span>q <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>h3<span class=\"br0\">)</span><br/>         r.<span class=\"me1\">is_prime</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>         <span class=\"br0\">(</span>q<span class=\"sy0\">*</span>r<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> == <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>         <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d x\u00a0%5d x\u00a0%5d =\u00a0%s<span class=\"es0\">\\n</span>\"</span>,<span class=\"kw3\">p</span>,q,r, <span class=\"kw3\">p</span><span class=\"sy0\">*</span>q<span class=\"sy0\">*</span>r<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 23, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> carmichael <span class=\"br0\">{</span>limit <span class=\"br0\">{</span>rounds <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> carmichaels <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> p1 <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$p1</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> p1<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>miller_rabin <span class=\"re0\">$p1</span> <span class=\"re0\">$rounds</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> h3 <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$h3</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$p1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> h3<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> g <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$h3</span> + <span class=\"re0\">$p1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> d <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$d</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$h3</span>+<span class=\"re0\">$p1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> d<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$h3</span>+<span class=\"re0\">$p1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$p1</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"re0\">$d</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">(</span>-<span class=\"br0\">(</span><span class=\"re0\">$p1</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"re0\">$h3</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$d</span><span class=\"sy0\">%</span><span class=\"re0\">$h3</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">set</span> p2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> + <span class=\"br0\">(</span><span class=\"re0\">$p1</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$g</span>/<span class=\"re0\">$d</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>miller_rabin <span class=\"re0\">$p2</span> <span class=\"re0\">$rounds</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">set</span> p3 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> + <span class=\"re0\">$p1</span><span class=\"sy0\">*</span><span class=\"re0\">$p2</span>/<span class=\"re0\">$h3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>miller_rabin <span class=\"re0\">$p3</span> <span class=\"re0\">$rounds</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$p2</span><span class=\"sy0\">*</span><span class=\"re0\">$p3</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"br0\">(</span><span class=\"re0\">$p1</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t\t<span class=\"kw2\">lappend</span> carmichaels <span class=\"re0\">$p1</span> <span class=\"re0\">$p2</span> <span class=\"re0\">$p3</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$p1</span><span class=\"sy0\">*</span><span class=\"re0\">$p2</span><span class=\"sy0\">*</span><span class=\"re0\">$p3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$carmichaels</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">var BN=Import(\"zklBigNum\"), bi=BN(0); // gonna recycle bi<br/>primes:=T(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61);<br/>var p2,p3;<br/>cs:=[[(p1,h3,d); primes; { [2..p1 - 1] }; // list comprehension<br/>      { [1..h3 + p1 - 1] },<br/>\t{ ((h3 + p1)*(p1 - 1)%d == 0 and ((-p1*p1):mod(_,h3) == d%h3)) },//guard<br/>\t{ (p2=1 + (p1 - 1)*(h3 + p1)/d):bi.set(_).probablyPrime() },//guard<br/>\t{ (p3=1 + (p1*p2/h3)):bi.set(_).probablyPrime() },\t //guard<br/>\t{ 1==(p2*p3)%(p1 - 1) };\t\t\t\t //guard<br/>   { T(p1,p2,p3) }  // return list of three primes in Carmichael number<br/>]];<br/>fcn mod(a,b) { m:=a%b; if(m&lt;0) m+b else m }</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 27, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">FOR</span> p=<span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">61</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> n=p: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">IF</span> <span class=\"kw4\">NOT</span> n <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">200</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> h=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> p-<span class=\"nu0\">1</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">FOR</span> d=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> h-<span class=\"nu0\">1</span>+p<br/><span class=\"nu0\">60</span> <span class=\"kw1\">IF</span> <span class=\"kw4\">NOT</span> <span class=\"br0\">(</span>FN m<span class=\"br0\">(</span><span class=\"br0\">(</span>h+p<span class=\"br0\">)</span>*<span class=\"br0\">(</span>p-<span class=\"nu0\">1</span><span class=\"br0\">)</span>,d<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw4\">AND</span> FN w<span class=\"br0\">(</span>-p*p,h<span class=\"br0\">)</span>=FN m<span class=\"br0\">(</span>d,h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">180</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> q=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"br0\">(</span><span class=\"br0\">(</span>p-<span class=\"nu0\">1</span><span class=\"br0\">)</span>*<span class=\"br0\">(</span>h+p<span class=\"br0\">)</span>/d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> n=q: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">IF</span> <span class=\"kw4\">NOT</span> n <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">180</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">LET</span> r=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"br0\">(</span>p*q/h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">LET</span> n=r: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">NOT</span> n<span class=\"br0\">)</span> <span class=\"kw4\">OR</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>FN m<span class=\"br0\">(</span><span class=\"br0\">(</span>q*r<span class=\"br0\">)</span>,<span class=\"br0\">(</span>p-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>&lt;&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">180</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">PRINT</span> p;<span class=\"st0\">\" \"</span>;q;<span class=\"st0\">\" \"</span>;r<br/><span class=\"nu0\">180</span> <span class=\"kw1\">NEXT</span> d<br/><span class=\"nu0\">190</span> <span class=\"kw1\">NEXT</span> h<br/><span class=\"nu0\">200</span> <span class=\"kw1\">NEXT</span> p<br/><span class=\"nu0\">210</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"kw1\">IF</span> n&lt;<span class=\"nu0\">4</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> n=<span class=\"br0\">(</span>n&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1010</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">NOT</span> FN m<span class=\"br0\">(</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">OR</span> <span class=\"br0\">(</span><span class=\"kw4\">NOT</span> FN m<span class=\"br0\">(</span>n,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">0</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1020</span> <span class=\"kw1\">LET</span> i=<span class=\"nu0\">5</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">IF</span> <span class=\"kw4\">NOT</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i*i<span class=\"br0\">)</span>&lt;=n<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">1</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1040</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">NOT</span> FN m<span class=\"br0\">(</span>n,i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">OR</span> <span class=\"kw4\">NOT</span> FN m<span class=\"br0\">(</span>n,<span class=\"br0\">(</span>i+<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">0</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1050</span> <span class=\"kw1\">LET</span> i=i+<span class=\"nu0\">6</span><br/><span class=\"nu0\">1060</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1030</span><br/><span class=\"nu0\">2000</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"br0\">(</span><span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b<span class=\"br0\">)</span>: <span class=\"co3\">REM Mod function</span><br/><span class=\"nu0\">2010</span> DEF FN w<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=FN m<span class=\"br0\">(</span>FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>+b,b<span class=\"br0\">)</span>: <span class=\"co3\">REM Mod function modified</span><br/>\u00a0</pre>"}]}