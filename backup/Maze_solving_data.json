{"task": "Maze_solving", "blocks": [{"lang": "Ada", "loc": 73, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Maze_Solver <span class=\"kw1\">is</span><br/>\u00a0<br/>   X_Size: <span class=\"kw3\">constant</span> Natural\u00a0:= <span class=\"nu0\">45</span>;<br/>   Y_Size: <span class=\"kw3\">constant</span> Natural\u00a0:= <span class=\"nu0\">17</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> X_Range <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">X_Size</span>;<br/>   <span class=\"kw3\">subtype</span> Y_Range <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Y_Size</span>;<br/>\u00a0<br/>   East:  <span class=\"kw3\">constant</span> X_Range\u00a0:= <span class=\"nu0\">2</span>;<br/>   South: <span class=\"kw3\">constant</span> Y_Range\u00a0:= <span class=\"nu0\">1</span>;<br/>\u00a0<br/>   X_Start: <span class=\"kw3\">constant</span> X_Range \u00a0:= <span class=\"nu0\">3</span>; <span class=\"co1\">-- start at the upper left</span><br/>   Y_Start: <span class=\"kw3\">constant</span> Y_Range \u00a0:= <span class=\"nu0\">1</span>;<br/>   X_Finish: <span class=\"kw3\">constant</span> X_Range\u00a0:= X_Size-East; <span class=\"co1\">-- go to the lower right</span><br/>   Y_Finish: <span class=\"kw3\">constant</span> Y_Range\u00a0:= Y_Size; <br/>\u00a0<br/>   <span class=\"kw3\">type</span> Maze_Type <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Y_Range<span class=\"br0\">)</span> <span class=\"kw3\">of</span> String<span class=\"br0\">(</span>X_Range<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Solved<span class=\"br0\">(</span>X: X_Range; Y: Y_Range<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>X = X_Finish<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>Y = Y_Finish<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Solved;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Output_Maze<span class=\"br0\">(</span>M: Maze_Type; Message: String\u00a0:= <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Message /= <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Message<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> M'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>M<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Output_Maze;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Search<span class=\"br0\">(</span>M: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Maze_Type; X: X_Range; Y:Y_Range<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      M<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span>\u00a0:= '*';<br/>      <span class=\"kw1\">if</span> Solved<span class=\"br0\">(</span>X, Y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Output_Maze<span class=\"br0\">(</span>M, <span class=\"st0\">\"Solution found!\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">if</span> Integer<span class=\"br0\">(</span>Y<span class=\"br0\">)</span>-South &gt;= <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> M<span class=\"br0\">(</span>Y-South<span class=\"br0\">)</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> = ' ' <span class=\"kw1\">then</span><br/>            Search<span class=\"br0\">(</span>M, X, Y-South<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">if</span> Integer<span class=\"br0\">(</span>Y<span class=\"br0\">)</span>+South &lt;= Y_Size <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> M<span class=\"br0\">(</span>Y+South<span class=\"br0\">)</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> = ' ' <span class=\"kw1\">then</span><br/>            Search<span class=\"br0\">(</span>M, X, Y+South<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">if</span> Integer<span class=\"br0\">(</span>X<span class=\"br0\">)</span>-East &gt;= <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> M<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">(</span>X-East<span class=\"br0\">)</span> = ' ' <span class=\"kw1\">then</span><br/>            Search<span class=\"br0\">(</span>M, X-East, Y<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">if</span> Integer<span class=\"br0\">(</span>Y<span class=\"br0\">)</span>+East &lt;= Y_Size <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> M<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">(</span>X+East<span class=\"br0\">)</span> = ' ' <span class=\"kw1\">then</span><br/>            Search<span class=\"br0\">(</span>M, X+East, Y<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      M<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span>\u00a0:= ' ';<br/>   <span class=\"kw1\">end</span> Search;<br/>\u00a0<br/>   Maze: Maze_Type;<br/>   X: X_Range\u00a0:= X_Start;<br/>   Y: Y_Range\u00a0:= Y_Start;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Y_Size</span> <span class=\"kw1\">loop</span><br/>      Maze<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Maze<span class=\"br0\">(</span>Y_Start<span class=\"br0\">)</span><span class=\"br0\">(</span>X_Start<span class=\"br0\">)</span>  \u00a0:= ' '; <span class=\"co1\">-- Start from</span><br/>   Maze<span class=\"br0\">(</span>Y_Finish<span class=\"br0\">)</span><span class=\"br0\">(</span>X_Finish<span class=\"br0\">)</span>\u00a0:= ' '; <span class=\"co1\">-- Go_To</span><br/>   Output_Maze<span class=\"br0\">(</span>Maze, <span class=\"st0\">\"The Maze:\"</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>\u00a0<br/>   Search<span class=\"br0\">(</span>Maze, X, Y<span class=\"br0\">)</span>\u00a0; <span class=\"co1\">-- Will output *all* Solutions.</span><br/>                        <span class=\"co1\">-- If there is no output, there is no solution.</span><br/><span class=\"kw1\">end</span> Maze_Solver;</pre>"}, {"lang": "AutoHotkey", "loc": 185, "block": "<pre class=\"autohotkey highlighted_source\">Width <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> Height\t<span class=\"sy0\">:=</span> <span class=\"nu0\">10</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; set grid size</span><br/>SleepTime <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a><span class=\"sy0\">,</span> Startup<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>AlwaysOnTop<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Font\"><span class=\"kw7\">font</span></a><span class=\"sy0\">,</span> s12<span class=\"sy0\">,</span> consolas<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">edit</span></a><span class=\"sy0\">,</span> vEditGrid x10<span class=\"sy0\">,</span>\u00a0% maze<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">button</span></a><span class=\"sy0\">,</span> xs gStartup <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Default\"><span class=\"kw7\">Default</span></a><span class=\"sy0\">,</span> Generate maze<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">10</span> gSolve<span class=\"sy0\">,</span> Solve <br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">show</span></a><span class=\"sy0\">,,</span> maze<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> EditGrid<span class=\"sy0\">,</span>\u00a0% maze\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; show maze</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/><span class=\"sy0\">^</span>Esc::<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiEscape\"><span class=\"kw7\">GuiEscape</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/><span class=\"re2\">Startup:<br/></span>oMaze <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; initialize </span><br/>Solved <span class=\"sy0\">:=</span> false<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% Height<br/><span class=\"br0\">{</span><br/>\trow <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% Width\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; create oMaze[row,column] borders </span><br/>\t\tcol <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span>  <span class=\"st0\">\"LRTB\"</span>\t\t\t\t\t\t<span class=\"co1\">; i.e. oMaze[2,5]\u00a0:= LRTB (add all borders)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>\u00a0% Height\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; random row</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>\u00a0% Width\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; random col</span><br/>grid <span class=\"sy0\">:=</span> maze2text<span class=\"br0\">(</span>oMaze<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; object to text</span><br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> EditGrid<span class=\"sy0\">,</span>\u00a0% Grid\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; show Grid</span><br/>row <span class=\"sy0\">:=</span> col <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; reset to 1,1</span><br/>oMaze <span class=\"sy0\">:=</span> Generate_maze<span class=\"br0\">(</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> oMaze<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t<span class=\"co1\">; generate maze starting from random row/column</span><br/>oMaze<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"X\"</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; start from 1,1</span><br/>maze <span class=\"sy0\">:=</span> maze2text<span class=\"br0\">(</span>oMaze<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; object to text</span><br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> EditGrid<span class=\"sy0\">,</span>\u00a0% maze\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; show maze</span><br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> EditRoute\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; clear route</span><br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Enable<span class=\"sy0\">,</span> Solve<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/><span class=\"re2\">Solve:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Disable<span class=\"sy0\">,</span> Generate maze<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Disable<span class=\"sy0\">,</span> Solve<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% oRoute<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\toRoute<span class=\"sy0\">.</span>pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>oSolution\t<span class=\"sy0\">:=</span> Solve<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> oMaze<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; solve starting from 1,1</span><br/>oMaze \t\t<span class=\"sy0\">:=</span> oSolution<span class=\"sy0\">.</span>1<br/>oRoute \t\t<span class=\"sy0\">:=</span> oSolution<span class=\"sy0\">.</span>2<br/>Update<span class=\"br0\">(</span>oMaze<span class=\"sy0\">,</span> oRoute<span class=\"br0\">)</span><br/>Solved <span class=\"sy0\">:=</span> true<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Enable<span class=\"sy0\">,</span> Generate maze<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/>Update<span class=\"br0\">(</span>oMaze<span class=\"sy0\">,</span> oRoute<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tglobal SleepTime<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> EditGrid<span class=\"sy0\">,</span>\u00a0% maze2text<span class=\"br0\">(</span>oMaze<span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sleep.htm\"><span class=\"kw3\">Sleep</span></a><span class=\"sy0\">,</span>\u00a0% SleepTime<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/>maze2text<span class=\"br0\">(</span>oMaze<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\twidth <span class=\"sy0\">:=</span> oMaze<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tBLK <span class=\"sy0\">:=</span> <span class=\"st0\">\"\u2588\"</span><br/>\tfor row<span class=\"sy0\">,</span> objRow in oMaze<br/>\t<span class=\"br0\">{</span><br/>\t\tfor col<span class=\"sy0\">,</span> val in objRow\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; add ceiling</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tceiling <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">,</span> <span class=\"st0\">\"x\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">,</span> <span class=\"st0\">\"x\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"+ \"</span> BLK <span class=\"st0\">\" \"</span>\u00a0: <span class=\"st0\">\"+   \"</span><br/>\t\t\tgrid <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>val<span class=\"sy0\">,</span> <span class=\"st0\">\"T\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"+---\"</span>\u00a0: ceiling<span class=\"br0\">)</span> <span class=\"br0\">(</span>col <span class=\"sy0\">=</span> Width\u00a0? <span class=\"st0\">\"+`n\"</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tfor col<span class=\"sy0\">,</span> val in objRow\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; add left wall</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\twall <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>val<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"X\"</span>\u00a0? BLK\u00a0: <span class=\"st0\">\" \"</span><br/>\t\t\tgrid <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>val<span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"| \"</span>\u00a0: <span class=\"st0\">\"  \"</span><span class=\"br0\">)</span> wall <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span>col <span class=\"sy0\">=</span> Width\u00a0? <span class=\"st0\">\"|`n\"</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"co1\">; add left wall if needed then outer right border</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% Width<br/>\t\tGrid <span class=\"sy0\">.=</span> <span class=\"st0\">\"+---\"</span>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; add bottom floor</span><br/>\tGrid <span class=\"sy0\">.=</span> <span class=\"st0\">\"+\"</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; add right bottom corner</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>grid <span class=\"sy0\">,</span> BLK <span class=\"st0\">\"   (?=\"</span> BLK <span class=\"st0\">\")\"</span> <span class=\"sy0\">,</span>  BLK BLK BLK BLK<span class=\"br0\">)</span>\t<span class=\"co1\">; fill gaps</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/>Generate_maze<span class=\"br0\">(</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> oMaze<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tneighbors <span class=\"sy0\">:=</span> row<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span> col <span class=\"st0\">\"`n\"</span> row<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span> col  <span class=\"st0\">\"`n\"</span> row <span class=\"st0\">\",\"</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span>  <span class=\"st0\">\"`n\"</span> row <span class=\"st0\">\",\"</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> neighbors<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">random</span></a>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; randomize neighbors list</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> neighbors<span class=\"sy0\">,</span> `n\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; for each neighbor</span><br/>\t<span class=\"br0\">{</span><br/>\t\trowX <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1\t\t\t\t\t\t\t<span class=\"co1\">; this neighbor row</span><br/>\t\tcolX <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2\t\t\t\t\t\t\t<span class=\"co1\">; this neighbor column</span><br/>\t\t<span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">instr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"LRTB\"</span><span class=\"br0\">)</span> ||\u00a0!oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span> colX<span class=\"br0\">]</span>\t\t<span class=\"co1\">; if visited (has a missing border) or out of bounds</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; skip</span><br/>\u00a0<br/>\t\t<span class=\"co1\">; remove borders</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>row <span class=\"sy0\">&gt;</span> rowX<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; Cell is below this neighbor</span><br/>\t\t\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"T\"</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span> oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row <span class=\"sy0\">&lt;</span> rowX<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; Cell is above this neighbor</span><br/>\t\t\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span> oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"T\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>col <span class=\"sy0\">&gt;</span> colX<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; Cell is right of this neighbor</span><br/>\t\t\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span> oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>col <span class=\"sy0\">&lt;</span> colX<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; Cell is left of this neighbor</span><br/>\t\t\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span> oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>rowX<span class=\"sy0\">,</span>colX<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\tGenerate_maze<span class=\"br0\">(</span>rowX<span class=\"sy0\">,</span> colX<span class=\"sy0\">,</span> oMaze<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; recurse for this neighbor</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> oMaze<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/>Solve<span class=\"br0\">(</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> oMaze<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstatic oRoute <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\toNeighbor <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> targetrow <span class=\"sy0\">:=</span> oMaze<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> targetCol <span class=\"sy0\">:=</span> oMaze<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">;~ Update(oMaze, oRoute)</span><br/>\toRoute<span class=\"sy0\">.</span>push<span class=\"br0\">(</span>row <span class=\"st0\">\":\"</span> col<span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; push current cell address to oRoute</span><br/>\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"X\"</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; mark it visited \"X\"</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>row <span class=\"sy0\">=</span> targetrow<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Col <span class=\"sy0\">=</span> targetCol<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; if solved</span><br/>\t\t<span class=\"kw1\">return</span> true\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; return ture</span><br/>\u00a0<br/>\t<span class=\"co1\">; create list of Neighbors</span><br/>\toNeighbor<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; if no Right border</span><br/>\t\toNeighbor<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">.</span>push<span class=\"br0\">(</span>row <span class=\"st0\">\",\"</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; add neighbor</span><br/>\t<span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; if no Bottom border</span><br/>\t\toNeighbor<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">.</span>push<span class=\"br0\">(</span>row<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span> col<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; add neighbor</span><br/>\t<span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"T\"</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; if no Top border</span><br/>\t\toNeighbor<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">.</span>push<span class=\"br0\">(</span>row<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span> col<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; add neighbor</span><br/>\t<span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; if no Left border</span><br/>\t\toNeighbor<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">.</span>push<span class=\"br0\">(</span>row <span class=\"st0\">\",\"</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; add neighbor</span><br/>\u00a0<br/>\t<span class=\"co1\">; recurese for each oNeighbor</span><br/>\tfor each<span class=\"sy0\">,</span> neighbor in oNeighbor<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span>\t\t\t\t\t\t\t<span class=\"co1\">; for each neighbor </span><br/>\t<span class=\"br0\">{</span><br/>\t\tUpdate<span class=\"br0\">(</span>oMaze<span class=\"sy0\">,</span> oRoute<span class=\"br0\">)</span><br/>\t\tstartrow <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>neighbor<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1\t\t\t\t\t\t\t<span class=\"co1\">; this neighbor</span><br/>\t\tstartCol <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>neighbor<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2\t\t\t\t\t\t\t<span class=\"co1\">; becomes starting point\t\t</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>startrow<span class=\"sy0\">,</span> startCol<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span>\t\t\t\t\t\t<span class=\"co1\">; if it was not visited</span><br/>\t\t\t<span class=\"kw1\">if</span> Solve<span class=\"br0\">(</span>startrow<span class=\"sy0\">,</span> startCol<span class=\"sy0\">,</span> oMaze<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; recurse for current neighbor</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span>oMaze<span class=\"sy0\">,</span> oRoute<span class=\"br0\">]</span>\t\t\t\t\t\t\t\t\t<span class=\"co1\">; return solution if solved</span><br/>\t<span class=\"br0\">}</span><br/>\toRoute<span class=\"sy0\">.</span>pop<span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; no solution found, back track</span><br/>\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> Col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> Col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span>\t\t\t\t\t<span class=\"co1\">; no solution found, back track</span><br/>\t<span class=\"co1\">;~ Update(oMaze, oRoute)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;-----------------------------------------------------------------------</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_IfWinActive.htm\"><span class=\"kw5\">#IfWinActive</span></a><span class=\"sy0\">,</span> maze<br/><span class=\"kw6\">Right</span>::<br/><span class=\"kw6\">Left</span>::<br/><span class=\"kw6\">Up</span>::<br/><span class=\"kw6\">Down</span>::<br/><span class=\"kw1\">if</span> Solved<br/>\t<span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ThisHotkey\"><span class=\"kw2\">A_ThisHotkey</span></a><span class=\"sy0\">=</span><span class=\"st0\">\"Right\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span>\t\t<span class=\"sy0\">,</span> col<span class=\"sy0\">++</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ThisHotkey\"><span class=\"kw2\">A_ThisHotkey</span></a><span class=\"sy0\">=</span><span class=\"st0\">\"Left\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span>\t\t<span class=\"sy0\">,</span> col<span class=\"sy0\">--</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ThisHotkey\"><span class=\"kw2\">A_ThisHotkey</span></a><span class=\"sy0\">=</span><span class=\"st0\">\"Up\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"T\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span>\t\t<span class=\"sy0\">,</span> row<span class=\"sy0\">--</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ThisHotkey\"><span class=\"kw2\">A_ThisHotkey</span></a><span class=\"sy0\">=</span><span class=\"st0\">\"Down\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\toMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span>\t\t<span class=\"sy0\">,</span> row<span class=\"sy0\">++</span><br/>\u00a0<br/>oMaze<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"X\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> EditGrid<span class=\"sy0\">,</span>\u00a0% maze2text<span class=\"br0\">(</span>oMaze<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>col <span class=\"sy0\">=</span> Width<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>row <span class=\"sy0\">=</span> Height<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tSolved <span class=\"sy0\">:=</span> true<br/>\toMaze<span class=\"br0\">[</span>height<span class=\"sy0\">,</span> width<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> StrReplace<span class=\"br0\">(</span>oMaze<span class=\"br0\">[</span>height<span class=\"sy0\">,</span> width<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span><br/>\tSleepTime <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a><span class=\"sy0\">,</span> solve<br/>\t<span class=\"kw1\">return</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_IfWinActive.htm\"><span class=\"kw5\">#IfWinActive</span></a></pre>"}, {"lang": "BBC BASIC", "loc": 86, "block": "<pre class=\"text highlighted_source\">      MazeWidth% = 11<br/>      MazeHeight% = 9<br/>      MazeCell% = 50<br/>\u00a0<br/>      VDU 23,22,MazeWidth%*MazeCell%/2+3;MazeHeight%*MazeCell%/2+3;8,16,16,128<br/>      VDU 23,23,3;0;0;0;\u00a0: REM Line thickness<br/>      OFF<br/>      PROCgeneratemaze(Maze&amp;(), MazeWidth%, MazeHeight%, MazeCell%)<br/>      PROCsolvemaze(Path{()}, Maze&amp;(), 0, MazeHeight%-1, MazeWidth%-1, 0, MazeCell%)<br/>      END<br/>\u00a0<br/>      DEF PROCsolvemaze(RETURN s{()}, m&amp;(), x%, y%, dstx%, dsty%, s%)<br/>      LOCAL h%, i%, n%, p%, q%, w%<br/>      w% = DIM(m&amp;(),1)<br/>      h% = DIM(m&amp;(),2)<br/>      DIM s{(w%*h%) x%,y%}<br/>      GCOL 3,14<br/>      m&amp;(x%,y%) OR= &amp;80<br/>      REPEAT<br/>        FOR i% = 0 TO 3<br/>          CASE i% OF<br/>            WHEN 0: p% = x%-1\u00a0: q% = y%<br/>            WHEN 1: p% = x%+1\u00a0: q% = y%<br/>            WHEN 2: p% = x%\u00a0: q% = y%-1<br/>            WHEN 3: p% = x%\u00a0: q% = y%+1<br/>          ENDCASE<br/>          IF p% &gt;= 0 IF p% &lt; w% IF q% &gt;= 0 IF q% &lt; h% IF m&amp;(p%,q%) &lt; &amp;80 THEN<br/>            IF p% &gt; x% IF m&amp;(p%,q%) AND 1 EXIT FOR<br/>            IF q% &gt; y% IF m&amp;(p%,q%) AND 2 EXIT FOR<br/>            IF x% &gt; p% IF m&amp;(x%,y%) AND 1 EXIT FOR<br/>            IF y% &gt; q% IF m&amp;(x%,y%) AND 2 EXIT FOR<br/>          ENDIF<br/>        NEXT<br/>        IF i% &lt; 4 THEN<br/>          m&amp;(p%,q%) OR= &amp;80<br/>          s{(n%)}.x% = x%<br/>          s{(n%)}.y% = y%<br/>          n% += 1<br/>        ELSE<br/>          IF n% &gt; 0 THEN<br/>            n% -= 1<br/>            p% = s{(n%)}.x%<br/>            q% = s{(n%)}.y%<br/>          ENDIF<br/>        ENDIF<br/>        LINE (x%+0.5)*s%,(y%+0.5)*s%,(p%+0.5)*s%,(q%+0.5)*s%<br/>        x% = p%<br/>        y% = q%<br/>      UNTIL x%=dstx% AND y%=dsty%<br/>      s{(n%)}.x% = x%<br/>      s{(n%)}.y% = y%<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCgeneratemaze(RETURN m&amp;(), w%, h%, s%)<br/>      LOCAL x%, y%<br/>      DIM m&amp;(w%, h%)<br/>      FOR y% = 0 TO h%<br/>        LINE 0,y%*s%,w%*s%,y%*s%<br/>      NEXT<br/>      FOR x% = 0 TO w%<br/>        LINE x%*s%,0,x%*s%,h%*s%<br/>      NEXT<br/>      GCOL 15<br/>      PROCcell(m&amp;(), RND(w%)-1, y% = RND(h%)-1, w%, h%, s%)<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCcell(m&amp;(), x%, y%, w%, h%, s%)<br/>      LOCAL i%, p%, q%, r%<br/>      m&amp;(x%,y%) OR= &amp;40\u00a0: REM Mark visited<br/>      r% = RND(4)<br/>      FOR i% = r% TO r%+3<br/>        CASE i% MOD 4 OF<br/>          WHEN 0: p% = x%-1\u00a0: q% = y%<br/>          WHEN 1: p% = x%+1\u00a0: q% = y%<br/>          WHEN 2: p% = x%\u00a0: q% = y%-1<br/>          WHEN 3: p% = x%\u00a0: q% = y%+1<br/>        ENDCASE<br/>        IF p% &gt;= 0 IF p% &lt; w% IF q% &gt;= 0 IF q% &lt; h% IF m&amp;(p%,q%) &lt; &amp;40 THEN<br/>          IF p% &gt; x% m&amp;(p%,q%) OR= 1\u00a0: LINE p%*s%,y%*s%+4,p%*s%,(y%+1)*s%-4<br/>          IF q% &gt; y% m&amp;(p%,q%) OR= 2\u00a0: LINE x%*s%+4,q%*s%,(x%+1)*s%-4,q%*s%<br/>          IF x% &gt; p% m&amp;(x%,y%) OR= 1\u00a0: LINE x%*s%,y%*s%+4,x%*s%,(y%+1)*s%-4<br/>          IF y% &gt; q% m&amp;(x%,y%) OR= 2\u00a0: LINE x%*s%+4,y%*s%,(x%+1)*s%-4,y%*s%<br/>          PROCcell(m&amp;(), p%, q%, w%, h%, s%)<br/>        ENDIF<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 438, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">512</span>, CELL_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">enum</span> directions <span class=\"br0\">{</span> NONE, NOR <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, EAS <span class=\"sy1\">=</span> <span class=\"nu0\">2</span>, SOU <span class=\"sy1\">=</span> <span class=\"nu0\">4</span>, WES <span class=\"sy1\">=</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> myBitmap<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tDeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPINFO\tbi<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>\t   <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>\t   <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>\t   <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>\tHDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\thdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\twidth <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tZeroMemory<span class=\"br0\">(</span> pBits, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD clr <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, <span class=\"nu0\">1</span>, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> string path <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>\tBITMAPINFO\t infoheader<span class=\"sy4\">;</span><br/>\tBITMAP\t\t bitmap<span class=\"sy4\">;</span><br/>\tDWORD\t\t wb<span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tDWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tHANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tCloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span><br/>    HDC\t    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>    <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>\t    width, height<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> mazeGenerator<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    mazeGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_world <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <br/>\t_bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\t_bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    ~mazeGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> killArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    BYTE<span class=\"sy2\">*</span> getMaze<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _world<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> side <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_s <span class=\"sy1\">=</span> side<span class=\"sy4\">;</span><br/>\tgenerate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> generate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tkillArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_world <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> BYTE<span class=\"br0\">[</span>_s <span class=\"sy2\">*</span> _s<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> _world, _s <span class=\"sy2\">*</span> _s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_ptX <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> _s<span class=\"sy4\">;</span> _ptY <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> _s<span class=\"sy4\">;</span><br/>\tcarve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> carve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&lt;</span> NOR <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> NOR<span class=\"sy4\">;</span> _ptY<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> SOU <span class=\"sy3\">|</span> SOU <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> EAS<span class=\"sy4\">;</span> _ptX<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> WES <span class=\"sy3\">|</span> WES <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> SOU<span class=\"sy4\">;</span> _ptY<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> NOR <span class=\"sy3\">|</span> NOR <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> WES<span class=\"sy4\">;</span> _ptX<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> EAS <span class=\"sy3\">|</span> EAS <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testDir<span class=\"br0\">(</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> d<span class=\"sy4\">;</span><br/>\t\td <span class=\"sy1\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    d <span class=\"sy1\">=</span> <span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>d <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> _ptY<span class=\"sy2\">--</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> _ptX<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> _ptY<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> _ptX<span class=\"sy2\">--</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> testDir<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptX <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptX <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> killArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> _world <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> _world<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    BYTE<span class=\"sy2\">*</span>    _world<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>      _s, _ptX, _ptY<span class=\"sy4\">;</span><br/>    myBitmap _bmp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> mazeSolver<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    mazeSolver<span class=\"br0\">(</span><span class=\"br0\">)</span>      <br/>    <span class=\"br0\">{</span><br/>\t_bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_pts <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    ~mazeSolver<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> killPoints<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solveIt<span class=\"br0\">(</span> BYTE<span class=\"sy2\">*</span> maze, <span class=\"kw4\">int</span> size, <span class=\"kw4\">int</span> sX, <span class=\"kw4\">int</span> sY, <span class=\"kw4\">int</span> eX, <span class=\"kw4\">int</span> eY <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_lastDir <span class=\"sy1\">=</span> NONE<span class=\"sy4\">;</span><br/>\t_world <span class=\"sy1\">=</span> maze<span class=\"sy4\">;</span> _s <span class=\"sy1\">=</span> size<span class=\"sy4\">;</span> _sx <span class=\"sy1\">=</span> sX<span class=\"sy4\">;</span> _sy <span class=\"sy1\">=</span> sY<span class=\"sy4\">;</span> _ex <span class=\"sy1\">=</span> eX<span class=\"sy4\">;</span> _ey <span class=\"sy1\">=</span> eY<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t_world<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> y<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> <span class=\"nu12\">0x0f</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> NOR <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tkillPoints<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_pts <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> BYTE<span class=\"br0\">[</span>_s <span class=\"sy2\">*</span> _s<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> _pts, _s <span class=\"sy2\">*</span> _s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfindTheWay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t_sx <span class=\"sy1\">=</span> sX<span class=\"sy4\">;</span> _sy <span class=\"sy1\">=</span> sY<span class=\"sy4\">;</span><br/>\tdisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> invert<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> SOU<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> NOR<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> EAS<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> WES<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> NONE<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> updatePosition<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> _sy<span class=\"sy2\">--</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> _sx<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> _sy<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> _sx<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> findTheWay<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&lt;</span> NOR <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t    _lastDir <span class=\"sy1\">=</span> invert<span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>\t    _pts<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>\t    updatePosition<span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> _sx <span class=\"sy1\">==</span> _ex <span class=\"sy3\">&amp;&amp;</span> _sy <span class=\"sy1\">==</span> _ey <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t    _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> _lastDir <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testDirection<span class=\"br0\">(</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> d<span class=\"sy4\">;</span><br/>\t\td <span class=\"sy1\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    d <span class=\"sy1\">=</span> <span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>d <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    _pts<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    updatePosition<span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    _lastDir <span class=\"sy1\">=</span> invert<span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> testDirection<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">==</span> _lastDir <span class=\"sy3\">||</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">return</span> _sy <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _sy <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">return</span> _sx <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">return</span> _sy <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _sy <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">return</span> _sx <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_bmp.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tHDC dc <span class=\"sy1\">=</span> _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> _s<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tBYTE b <span class=\"sy1\">=</span> _world<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> yy<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw4\">int</span> nx <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> CELL_SIZE, <br/>\t\t    ny <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> NOR <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, ny <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> EAS <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> SOU <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">+</span> CELL_SIZE, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> WES <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tdrawEndPoints<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> _s<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tBYTE d <span class=\"sy1\">=</span> _pts<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> yy<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>d <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw4\">int</span> nx <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">4</span>, <br/>\t\t    ny <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\tMoveToEx<span class=\"br0\">(</span> dc, nx, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> LineTo<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">-</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, ny <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> LineTo<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">-</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, ny <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t_bmp.<span class=\"me1\">saveBitmap</span><span class=\"br0\">(</span> <span class=\"st0\">\"f:<span class=\"es1\">\\\\</span>rc<span class=\"es1\">\\\\</span>maze_s.bmp\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tBitBlt<span class=\"br0\">(</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">60</span>, BMP_SIZE, BMP_SIZE, _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, SRCCOPY <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawEndPoints<span class=\"br0\">(</span> HDC dc <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tRECT rc<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _sx <span class=\"sy2\">*</span> CELL_SIZE, y <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _sy <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span><br/>\tSetRect<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>rc, x, y, x <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, y <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tFillRect<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>rc, <span class=\"br0\">(</span> HBRUSH <span class=\"br0\">)</span>GetStockObject<span class=\"br0\">(</span> WHITE_BRUSH <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tx <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _ex <span class=\"sy2\">*</span> CELL_SIZE, y <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _ey <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span><br/>\tSetRect<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>rc, x, y, x <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, y <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tFillRect<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>rc, <span class=\"br0\">(</span> HBRUSH <span class=\"br0\">)</span>GetStockObject<span class=\"br0\">(</span> WHITE_BRUSH <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> killPoints<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> _pts <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> _pts<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    BYTE<span class=\"sy2\">*</span>    _world, <span class=\"sy2\">*</span>_pts<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>      _s, _sx, _sy, _ex, _ey, _lastDir<span class=\"sy4\">;</span><br/>    myBitmap _bmp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ShowWindow<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, SW_MAXIMIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    mazeGenerator mg<span class=\"sy4\">;</span><br/>    mazeSolver ms<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> s<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter the maze size, an odd number bigger than 2 ( 0 to QUIT ): \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> s<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>s <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> s <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> s<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> s <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <br/>\t<span class=\"br0\">{</span><br/>\t    mg.<span class=\"me1\">create</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw4\">int</span> sx, sy, ex, ey<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tsx <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> s<span class=\"sy4\">;</span> sy <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> s<span class=\"sy4\">;</span><br/>\t\tex <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> s<span class=\"sy4\">;</span> ey <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> s<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> ex <span class=\"sy3\">!</span><span class=\"sy1\">=</span> sx <span class=\"sy3\">||</span> ey <span class=\"sy3\">!</span><span class=\"sy1\">=</span> sy <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    ms.<span class=\"me1\">solveIt</span><span class=\"br0\">(</span> mg.<span class=\"me1\">getMaze</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s, sx, sy, ex, ey <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 438, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">512</span>, CELL_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">enum</span> directions <span class=\"br0\">{</span> NONE, NOR <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, EAS <span class=\"sy1\">=</span> <span class=\"nu0\">2</span>, SOU <span class=\"sy1\">=</span> <span class=\"nu0\">4</span>, WES <span class=\"sy1\">=</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> myBitmap<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tDeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPINFO\tbi<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>\t   <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>\t   <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>\t   <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>\tHDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\thdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\twidth <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tZeroMemory<span class=\"br0\">(</span> pBits, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD clr <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, <span class=\"nu0\">1</span>, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> string path <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>\tBITMAPINFO\t infoheader<span class=\"sy4\">;</span><br/>\tBITMAP\t\t bitmap<span class=\"sy4\">;</span><br/>\tDWORD\t\t wb<span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tDWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tHANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tCloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span><br/>    HDC\t    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>    <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>\t    width, height<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> mazeGenerator<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    mazeGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_world <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <br/>\t_bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\t_bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    ~mazeGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> killArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    BYTE<span class=\"sy2\">*</span> getMaze<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _world<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> side <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_s <span class=\"sy1\">=</span> side<span class=\"sy4\">;</span><br/>\tgenerate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> generate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tkillArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_world <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> BYTE<span class=\"br0\">[</span>_s <span class=\"sy2\">*</span> _s<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> _world, _s <span class=\"sy2\">*</span> _s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_ptX <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> _s<span class=\"sy4\">;</span> _ptY <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> _s<span class=\"sy4\">;</span><br/>\tcarve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> carve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&lt;</span> NOR <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> NOR<span class=\"sy4\">;</span> _ptY<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> SOU <span class=\"sy3\">|</span> SOU <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> EAS<span class=\"sy4\">;</span> _ptX<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> WES <span class=\"sy3\">|</span> WES <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> SOU<span class=\"sy4\">;</span> _ptY<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> NOR <span class=\"sy3\">|</span> NOR <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> WES<span class=\"sy4\">;</span> _ptX<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>\t\t    _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy1\">=</span> EAS <span class=\"sy3\">|</span> EAS <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testDir<span class=\"br0\">(</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> d<span class=\"sy4\">;</span><br/>\t\td <span class=\"sy1\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    d <span class=\"sy1\">=</span> <span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>d <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> _ptY<span class=\"sy2\">--</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> _ptX<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> _ptY<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> _ptX<span class=\"sy2\">--</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> testDir<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptX <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _ptY <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> _ptX <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>_world<span class=\"br0\">[</span>_ptX <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _ptY<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> killArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> _world <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> _world<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    BYTE<span class=\"sy2\">*</span>    _world<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>      _s, _ptX, _ptY<span class=\"sy4\">;</span><br/>    myBitmap _bmp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> mazeSolver<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    mazeSolver<span class=\"br0\">(</span><span class=\"br0\">)</span>      <br/>    <span class=\"br0\">{</span><br/>\t_bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_pts <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    ~mazeSolver<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> killPoints<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solveIt<span class=\"br0\">(</span> BYTE<span class=\"sy2\">*</span> maze, <span class=\"kw4\">int</span> size, <span class=\"kw4\">int</span> sX, <span class=\"kw4\">int</span> sY, <span class=\"kw4\">int</span> eX, <span class=\"kw4\">int</span> eY <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_lastDir <span class=\"sy1\">=</span> NONE<span class=\"sy4\">;</span><br/>\t_world <span class=\"sy1\">=</span> maze<span class=\"sy4\">;</span> _s <span class=\"sy1\">=</span> size<span class=\"sy4\">;</span> _sx <span class=\"sy1\">=</span> sX<span class=\"sy4\">;</span> _sy <span class=\"sy1\">=</span> sY<span class=\"sy4\">;</span> _ex <span class=\"sy1\">=</span> eX<span class=\"sy4\">;</span> _ey <span class=\"sy1\">=</span> eY<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t_world<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> y<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> <span class=\"nu12\">0x0f</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> NOR <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tkillPoints<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_pts <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> BYTE<span class=\"br0\">[</span>_s <span class=\"sy2\">*</span> _s<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> _pts, _s <span class=\"sy2\">*</span> _s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfindTheWay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t_sx <span class=\"sy1\">=</span> sX<span class=\"sy4\">;</span> _sy <span class=\"sy1\">=</span> sY<span class=\"sy4\">;</span><br/>\tdisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> invert<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> SOU<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> NOR<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> EAS<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> <span class=\"kw1\">return</span> WES<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> NONE<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> updatePosition<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> _sy<span class=\"sy2\">--</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> _sx<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> _sy<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> _sx<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> findTheWay<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&lt;</span> NOR <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t    _lastDir <span class=\"sy1\">=</span> invert<span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>\t    _pts<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>\t    updatePosition<span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> _sx <span class=\"sy1\">==</span> _ex <span class=\"sy3\">&amp;&amp;</span> _sy <span class=\"sy1\">==</span> _ey <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t    _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">|</span><span class=\"sy1\">=</span> _lastDir <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> getDirection<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testDirection<span class=\"br0\">(</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> d<span class=\"sy4\">;</span><br/>\t\td <span class=\"sy1\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    d <span class=\"sy1\">=</span> <span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>d <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    _pts<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    updatePosition<span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    _lastDir <span class=\"sy1\">=</span> invert<span class=\"br0\">(</span> d <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    d <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> testDirection<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">==</span> _lastDir <span class=\"sy3\">||</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">return</span> _sy <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _sy <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">return</span> _sx <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">return</span> _sy <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;</span> _s <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _sy <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">return</span> _sx <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> _world<span class=\"br0\">[</span>_sx <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _s <span class=\"sy2\">*</span> _sy<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_bmp.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tHDC dc <span class=\"sy1\">=</span> _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> _s<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tBYTE b <span class=\"sy1\">=</span> _world<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> yy<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw4\">int</span> nx <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> CELL_SIZE, <br/>\t\t    ny <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> NOR <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, ny <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> EAS <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> SOU <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">+</span> CELL_SIZE, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> b <span class=\"sy3\">&amp;</span> WES <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    MoveToEx<span class=\"br0\">(</span> dc, nx, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    LineTo<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tdrawEndPoints<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> _s<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> _s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tBYTE d <span class=\"sy1\">=</span> _pts<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> yy<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>d <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw4\">int</span> nx <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">4</span>, <br/>\t\t    ny <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\tMoveToEx<span class=\"br0\">(</span> dc, nx, ny, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> LineTo<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">-</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span> LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, ny <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span> LineTo<span class=\"br0\">(</span> dc, nx, ny <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span> LineTo<span class=\"br0\">(</span> dc, nx <span class=\"sy2\">-</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, ny <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t_bmp.<span class=\"me1\">saveBitmap</span><span class=\"br0\">(</span> <span class=\"st0\">\"f:<span class=\"es1\">\\\\</span>rc<span class=\"es1\">\\\\</span>maze_s.bmp\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tBitBlt<span class=\"br0\">(</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">60</span>, BMP_SIZE, BMP_SIZE, _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, SRCCOPY <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawEndPoints<span class=\"br0\">(</span> HDC dc <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tRECT rc<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _sx <span class=\"sy2\">*</span> CELL_SIZE, y <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _sy <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span><br/>\tSetRect<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>rc, x, y, x <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, y <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tFillRect<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>rc, <span class=\"br0\">(</span> HBRUSH <span class=\"br0\">)</span>GetStockObject<span class=\"br0\">(</span> WHITE_BRUSH <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tx <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _ex <span class=\"sy2\">*</span> CELL_SIZE, y <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> _ey <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span><br/>\tSetRect<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>rc, x, y, x <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, y <span class=\"sy2\">+</span> CELL_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tFillRect<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>rc, <span class=\"br0\">(</span> HBRUSH <span class=\"br0\">)</span>GetStockObject<span class=\"br0\">(</span> WHITE_BRUSH <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> killPoints<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> _pts <span class=\"br0\">)</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> _pts<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    BYTE<span class=\"sy2\">*</span>    _world, <span class=\"sy2\">*</span>_pts<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>      _s, _sx, _sy, _ex, _ey, _lastDir<span class=\"sy4\">;</span><br/>    myBitmap _bmp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ShowWindow<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, SW_MAXIMIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    mazeGenerator mg<span class=\"sy4\">;</span><br/>    mazeSolver ms<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> s<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter the maze size, an odd number bigger than 2 ( 0 to QUIT ): \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> s<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>s <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> s <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> s<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> s <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <br/>\t<span class=\"br0\">{</span><br/>\t    mg.<span class=\"me1\">create</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw4\">int</span> sx, sy, ex, ey<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tsx <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> s<span class=\"sy4\">;</span> sy <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> s<span class=\"sy4\">;</span><br/>\t\tex <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> s<span class=\"sy4\">;</span> ey <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> s<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> ex <span class=\"sy3\">!</span><span class=\"sy1\">=</span> sx <span class=\"sy3\">||</span> ey <span class=\"sy3\">!</span><span class=\"sy1\">=</span> sy <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    ms.<span class=\"me1\">solveIt</span><span class=\"br0\">(</span> mg.<span class=\"me1\">getMaze</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s, sx, sy, ex, ey <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 106, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> small<span class=\"sy0\">-</span>projects<span class=\"sy0\">.</span>find<span class=\"sy0\">-</span>shortest<span class=\"sy0\">-</span>way<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">as</span> <span class=\"kw1\">str</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;Misk functions</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cell<span class=\"sy0\">-</span><span class=\"kw1\">empty?</span> <span class=\"br0\">[</span>maze coords<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">empty</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in maze coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> wall? <span class=\"br0\">[</span>maze coords<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">wall</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in maze coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> track? <span class=\"br0\">[</span>maze coords<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">track</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in maze coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> get<span class=\"sy0\">-</span>neighbours <span class=\"br0\">[</span>maze <span class=\"br0\">[</span>y x cell<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span>y <span class=\"br0\">(</span><span class=\"kw1\">dec</span> x<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">inc</span> y<span class=\"br0\">)</span> x<span class=\"br0\">]</span> <span class=\"br0\">[</span>y <span class=\"br0\">(</span><span class=\"kw1\">inc</span> x<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">dec</span> y<span class=\"br0\">)</span> x<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> get<span class=\"sy0\">-</span>difference <span class=\"br0\">[</span>coll1 filter<span class=\"sy0\">-</span>coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>contains? filter<span class=\"sy0\">-</span>coll <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> coll1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> get<span class=\"sy0\">-</span>empties <span class=\"br0\">[</span>maze cell<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>neighbours maze cell<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">filter</span> <span class=\"br0\">(</span>partial cell<span class=\"sy0\">-</span><span class=\"kw1\">empty?</span> maze<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> possible<span class=\"sy0\">-</span>ways <span class=\"br0\">[</span>maze cell filter<span class=\"sy0\">-</span>coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>empties maze cell<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>difference filter<span class=\"sy0\">-</span>coll<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> replace<span class=\"sy0\">-</span>cells <span class=\"br0\">[</span>maze coords v<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> coords<span class=\"br0\">)</span><br/>    maze<br/>    <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>assoc<span class=\"sy0\">-</span>in maze <span class=\"br0\">(</span><span class=\"kw1\">first</span> coords<span class=\"br0\">)</span> v<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">rest</span> coords<span class=\"br0\">)</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;Print and parse functions</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> cell<span class=\"sy0\">-</span>code<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u00b7 \"</span> <span class=\"st0\">\"\u2575 \"</span> <span class=\"st0\">\"\u2574 \"</span> <span class=\"st0\">\"\u2518 \"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u2576\u2500\"</span> <span class=\"st0\">\"\u2514\u2500\"</span> <span class=\"st0\">\"\u2500\u2500\"</span> <span class=\"st0\">\"\u2534\u2500\"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u2577 \"</span> <span class=\"st0\">\"\u2502 \"</span> <span class=\"st0\">\"\u2510 \"</span> <span class=\"st0\">\"\u2524 \"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u250c\u2500\"</span> <span class=\"st0\">\"\u251c\u2500\"</span> <span class=\"st0\">\"\u252c\u2500\"</span> <span class=\"st0\">\"\u253c\u2500\"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u25a0 \"</span> <span class=\"st0\">\"\u2579 \"</span> <span class=\"st0\">\"\u2578 \"</span> <span class=\"st0\">\"\u251b \"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u257a\u2501\"</span> <span class=\"st0\">\"\u2517\u2501\"</span> <span class=\"st0\">\"\u2501\u2501\"</span> <span class=\"st0\">\"\u253b\u2501\"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u257b \"</span> <span class=\"st0\">\"\u2503 \"</span> <span class=\"st0\">\"\u2513 \"</span> <span class=\"st0\">\"\u252b \"</span><br/>   <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"  \"</span> <span class=\"st0\">\"\u250f\u2501\"</span> <span class=\"st0\">\"\u2523\u2501\"</span> <span class=\"st0\">\"\u2533\u2501\"</span> <span class=\"st0\">\"\u254b\u2501\"</span><br/>   <span class=\"st0\">\"  \"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> get<span class=\"sy0\">-</span>cell<span class=\"sy0\">-</span>code <span class=\"br0\">[</span>maze coords<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>mode <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>track? maze coords<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        check <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> mode<span class=\"br0\">)</span> wall? track?<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>transduce<br/>      <span class=\"br0\">(</span>comp<br/>        <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>partial check maze<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>keep<span class=\"sy0\">-</span>indexed <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>idx test<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> test idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>partial bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>left <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>completing bit<span class=\"sy0\">-</span><span class=\"kw1\">or</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>left mode <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>neighbours maze coords<span class=\"br0\">)</span> coords<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> code<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">[</span>cell<span class=\"sy0\">-</span>code<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>nth cell<span class=\"sy0\">-</span>code<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> cell<span class=\"sy0\">-</span>code<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> maze<span class=\"sy0\">-&gt;</span>str<span class=\"sy0\">-</span>symbols <span class=\"br0\">[</span>maze<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>y <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> maze<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>nth maze y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>code<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>cell<span class=\"sy0\">-</span>code maze <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> maze<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">[</span>maze<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span>maze<span class=\"sy0\">-&gt;</span>str<span class=\"sy0\">-</span>symbols maze<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">str</span><span class=\"sy0\">/</span>join<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span>join <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> parse<span class=\"sy0\">-</span>pretty<span class=\"sy0\">-</span>maze <span class=\"br0\">[</span>maze<span class=\"sy0\">-</span><span class=\"kw1\">str</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span>split<span class=\"sy0\">-</span>lines maze<span class=\"sy0\">-</span><span class=\"kw1\">str</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>partial <span class=\"kw1\">take-nth</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>partial <span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> \\space <span class=\"sy0\">%</span><span class=\"br0\">)</span>\u00a0:<span class=\"me1\">empty</span>\u00a0:<span class=\"me1\">wall</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vec</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">vec</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;Core</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> find<span class=\"sy0\">-</span>new<span class=\"sy0\">-</span>border <span class=\"br0\">[</span>maze border old<span class=\"sy0\">-</span>border<span class=\"br0\">]</span><br/> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">conj</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>cell<span class=\"br0\">]</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">zipmap</span> <span class=\"br0\">(</span>possible<span class=\"sy0\">-</span>ways maze cell <span class=\"br0\">(</span><span class=\"kw1\">conj</span> border old<span class=\"sy0\">-</span>border<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> cell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">keys</span> border<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> backtrack <span class=\"br0\">[</span>visited route<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>cur<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>get visited <span class=\"br0\">(</span><span class=\"kw1\">first</span> route<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> cur<span class=\"sy0\">-</span>cell\u00a0:<span class=\"me1\">start</span><span class=\"br0\">)</span><br/>        route<br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> visited <span class=\"br0\">(</span><span class=\"kw1\">conj</span> route cur<span class=\"sy0\">-</span>cell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> breadth<span class=\"sy0\">-</span>first<span class=\"sy0\">-</span>search <span class=\"br0\">[</span>maze start<span class=\"sy0\">-</span>cell end<span class=\"sy0\">-</span>cell<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>visited <span class=\"br0\">{</span>start<span class=\"sy0\">-</span>cell\u00a0:<span class=\"me1\">start</span><span class=\"br0\">}</span><br/>           border <span class=\"br0\">{</span>start<span class=\"sy0\">-</span>cell\u00a0:<span class=\"me1\">start</span><span class=\"br0\">}</span><br/>           old<span class=\"sy0\">-</span>border <span class=\"br0\">{</span>start<span class=\"sy0\">-</span>cell\u00a0:<span class=\"me1\">start</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>contains? old<span class=\"sy0\">-</span>border end<span class=\"sy0\">-</span>cell<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>backtrack visited <span class=\"br0\">(</span>list end<span class=\"sy0\">-</span>cell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">recur</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">conj</span> visited border<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>new<span class=\"sy0\">-</span>border maze border old<span class=\"sy0\">-</span>border<span class=\"br0\">)</span><br/>           border<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> maze <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>pretty<span class=\"sy0\">-</span>maze maze<span class=\"sy0\">-</span><span class=\"kw1\">str</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> solved<span class=\"sy0\">-</span>maze<br/>  <span class=\"br0\">(</span>replace<span class=\"sy0\">-</span>cells maze <span class=\"br0\">(</span>breadth<span class=\"sy0\">-</span>first<span class=\"sy0\">-</span>search maze <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">19</span> <span class=\"nu0\">19</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0:<span class=\"me1\">track</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>maze<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> solved<span class=\"sy0\">-</span>maze<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 42, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> <span class=\"kw4\">int</span> cx <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> cy <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"co1\">// Cell size x and y.</span><br/><span class=\"kw4\">enum</span> <span class=\"kw4\">int</span> cx2 <span class=\"sy0\">=</span> cx <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cy2 <span class=\"sy0\">=</span> cy <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">enum</span> pathSymbol <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> V2 <span class=\"br0\">{</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> solveMaze<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> maze<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> V2 s<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> V2 end<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> end<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> d<span class=\"sy0\">;</span> <span class=\"br0\">[</span>V2<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>cy<span class=\"br0\">)</span><span class=\"sy0\">,</span> V2<span class=\"br0\">(</span><span class=\"sy0\">+</span>cx<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V2<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>cy<span class=\"br0\">)</span><span class=\"sy0\">,</span> V2<span class=\"br0\">(</span><span class=\"sy0\">-</span>cx<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>s.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>d.<span class=\"me1\">y</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>s.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>d.<span class=\"me1\">x</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span> <span class=\"sy0\">&amp;&amp;</span><br/>            maze<span class=\"br0\">[</span>s.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>s.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\">//Would this help?</span><br/><span class=\"co1\">//          maze[s.y + (d.y / 2)][s.x + (d.x / 2)] = pathSymbol;</span><br/>            maze<span class=\"br0\">[</span>s.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>s.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> pathSymbol<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solveMaze<span class=\"br0\">(</span>maze<span class=\"sy0\">,</span> V2<span class=\"br0\">(</span>s.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">x</span><span class=\"sy0\">,</span> s.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> end<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            maze<span class=\"br0\">[</span>s.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>s.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> maze <span class=\"sy0\">=</span> <span class=\"st0\">\"maze.txt\"</span>.<span class=\"me1\">File</span>.<span class=\"me1\">byLine</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> r.<span class=\"me1\">chomp</span>.<span class=\"me1\">dup</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>maze.<span class=\"me1\">length</span>.<span class=\"me1\">signed</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> cy<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span> <span class=\"br0\">(</span>h <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> w <span class=\"sy0\">=</span> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span>.<span class=\"me1\">signed</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> cx<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> start <span class=\"sy0\">=</span> V2<span class=\"br0\">(</span>cx2 <span class=\"sy0\">+</span> cx <span class=\"sy0\">*</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> w<span class=\"br0\">)</span><span class=\"sy0\">,</span> cy2 <span class=\"sy0\">+</span> cy <span class=\"sy0\">*</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> end <span class=\"sy0\">=</span> V2<span class=\"br0\">(</span>cx2 <span class=\"sy0\">+</span> cx <span class=\"sy0\">*</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> w<span class=\"br0\">)</span><span class=\"sy0\">,</span> cy2 <span class=\"sy0\">+</span> cy <span class=\"sy0\">*</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    maze<span class=\"br0\">[</span>start.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>start.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> pathSymbol<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>solveMaze<span class=\"br0\">(</span>maze<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> end<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"No solution path found.\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    maze<span class=\"br0\">[</span>start.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>start.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'S'</span><span class=\"sy0\">;</span><br/>    maze<span class=\"br0\">[</span>end.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>end.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'E'</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> maze<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EGL", "loc": 262, "block": "<pre class=\"text highlighted_source\">program MazeGenAndSolve<br/>\u00a0<br/>    // First and last columns/rows are \"dead\" cells. Makes generating<br/>    // a maze with border walls much easier. Therefore, a visible<br/>    // 20x20 maze has a maze size of 22. \t<br/>    mazeSize int = 22;<br/>\u00a0<br/>    south boolean[][];<br/>    west boolean[][];<br/>    visited boolean[][];<br/>\u00a0<br/>    // Solution variables<br/>    solution Dictionary;<br/>    done boolean;<br/>    startingRow, startingCol, endingRow, endingCol int;<br/>\u00a0<br/>    function main()<br/>        initMaze();<br/>        generateMaze();<br/>        drawMaze(false); // Draw maze without solution<br/>\u00a0<br/>        solveMaze();<br/>        drawMaze(true); // Draw maze with solution<br/>    end<br/>\u00a0<br/>    private function initMaze()<br/>\u00a0<br/>        visited = createBooleanArray(mazeSize, mazeSize, false);<br/>\u00a0<br/>        // Initialize border cells as already visited<br/>        for(col int from 1 to mazeSize)<br/>            visited[col][1] = true;<br/>            visited[col][mazeSize] = true;<br/>        end<br/>        for(row int from 1 to mazeSize)<br/>            visited[1][row] = true;<br/>            visited[mazeSize][row] = true;<br/>        end<br/>\u00a0<br/>        // Initialize all walls as present<br/>        south = createBooleanArray(mazeSize, mazeSize, true);<br/>        west = createBooleanArray(mazeSize, mazeSize, true);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function createBooleanArray(col int in, row int in, initialState boolean in) returns(boolean[][])<br/>\u00a0<br/>        newArray boolean[][] = new boolean[0][0];<br/>\u00a0<br/>        for(i int from 1 to col)<br/>            innerArray boolean[] = new boolean[0];<br/>            for(j int from 1 to row)<br/>                innerArray.appendElement(initialState);<br/>            end<br/>            newArray.appendElement(innerArray);<br/>        end<br/>\u00a0<br/>        return(newArray);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function createIntegerArray(col int in, row int in, initialValue int in) returns(int[][])<br/>\u00a0<br/>        newArray int[][] = new int[0][0];<br/>\u00a0<br/>        for(i int from 1 to col)<br/>            innerArray int[] = new int[0];<br/>            for(j int from 1 to row)<br/>                innerArray.appendElement(initialValue);<br/>            end<br/>            newArray.appendElement(innerArray);<br/>        end<br/>\u00a0<br/>        return(newArray);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function generate(col int in, row int in)<br/>\u00a0<br/>\t    // Mark cell as visited<br/>        visited[col][row] = true;<br/>\u00a0<br/>        // Keep going as long as there is an unvisited neighbor<br/>        while(!visited[col][row + 1] ||\u00a0!visited[col + 1][row] ||<br/>               \u00a0!visited[col][row - 1] ||\u00a0!visited[col - 1][row])<br/>\u00a0<br/>            while(true)<br/>                r float = MathLib.random(); // Choose a random direction<br/>\u00a0<br/>                case<br/>                    when(r &lt; 0.25 &amp;&amp;\u00a0!visited[col][row + 1]) // Go south<br/>                        south[col][row] = false; // South wall down<br/>                        generate(col, row + 1);<br/>                        exit while;<br/>                    when(r &gt;= 0.25 &amp;&amp; r &lt; 0.50 &amp;&amp;\u00a0!visited[col + 1][row]) // Go east <br/>                        west[col + 1][row] = false; // West wall of neighbor to the east down<br/>                        generate(col + 1, row);<br/>                        exit while;<br/>                    when(r &gt;= 0.5 &amp;&amp; r &lt; 0.75 &amp;&amp;\u00a0!visited[col][row - 1]) // Go north<br/>                        south[col][row - 1] = false; // South wall of neighbor to the north down<br/>                        generate(col, row - 1);<br/>                        exit while;<br/>                    when(r &gt;= 0.75 &amp;&amp; r &lt; 1.00 &amp;&amp;\u00a0!visited[col - 1][row]) // Go west<br/>                        west[col][row] = false; // West wall down<br/>                        generate(col - 1, row);<br/>                        exit while;<br/>                end<br/>            end<br/>        end<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function generateMaze()<br/>\u00a0<br/>    \t// Pick random start position (within the visible maze space)<br/>        randomStartCol int = MathLib.floor((MathLib.random() *(mazeSize - 2)) + 2);<br/>        randomStartRow int = MathLib.floor((MathLib.random() *(mazeSize - 2)) + 2);<br/>\u00a0<br/>        generate(randomStartCol, randomStartRow);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function drawMaze(solve boolean in)<br/>\u00a0<br/>        line string;<br/>\u00a0<br/>        // Iterate over wall arrays (skipping dead border cells as required). <br/>        // Construct a row at a time and output to console.<br/>        for(row int from 1 to mazeSize - 1)<br/>\u00a0<br/>            if(row &gt; 1)<br/>                line = \"\";<br/>                for(col int from 2 to mazeSize)<br/>                    if(west[col][row])<br/>                        line\u00a0::= cellTest(col, row, solve);<br/>                    else<br/>                        line\u00a0::= cellTest(col, row, solve);<br/>                    end<br/>                end<br/>                Syslib.writeStdout(line);<br/>            end<br/>\u00a0<br/>            line = \"\";<br/>            for(col int from 2 to mazeSize - 1)<br/>                if(south[col][row])<br/>                    line\u00a0::= \"+---\";<br/>                else<br/>                    line\u00a0::= \"+   \";<br/>                end<br/>            end<br/>            line\u00a0::= \"+\";<br/>            SysLib.writeStdout(line);<br/>\u00a0<br/>        end<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function cellTest(col int in, row int in, solve boolean in) returns(string)<br/>\u00a0<br/>        wall string;<br/>\u00a0<br/>        // Determine cell wall structure. If in solve mode, show start, end and<br/>        // solution markers.<br/>        if(!solve)<br/>            if(west[col][row])<br/>                wall = \"|   \";<br/>            else<br/>                wall = \"    \";<br/>            end<br/>        else<br/>            if(west[col][row])<br/>\u00a0<br/>                case<br/>                    when(col == startingCol and row == startingRow)<br/>                        wall = \"| S \";<br/>                    when(col == endingCol and row == endingRow)<br/>                        wall = \"| E \";<br/>                    when(solution.containsKey(\"x=\" + col + \"y=\" + row))<br/>                        wall = \"| * \";<br/>                    otherwise<br/>                        wall = \"|   \";<br/>                end<br/>\u00a0<br/>            else<br/>                case<br/>                    when(col == startingCol and row == startingRow)<br/>                        wall = \"  S \";<br/>                    when(col == endingCol and row == endingRow)<br/>                        wall = \"  E \";<br/>                    when(solution.containsKey(\"x=\" + col + \"y=\" + row))<br/>                        wall = \"  * \";<br/>                    otherwise<br/>                        wall = \"    \";<br/>                end<br/>            end<br/>        end<br/>\u00a0<br/>        return(wall);<br/>    end<br/>\u00a0<br/>    private function solve(col int in, row int in)<br/>\u00a0<br/>        if(col == 1 || row == 1 || col == mazeSize || row == mazeSize)<br/>            return;<br/>        end<br/>\u00a0<br/>        if(done || visited[col][row])<br/>            return;<br/>        end<br/>\u00a0<br/>        visited[col][row] = true;<br/>\u00a0<br/>        solution[\"x=\" + col + \"y=\" + row] = true;<br/>\u00a0<br/>        // Reached the end point<br/>        if(col == endingCol &amp;&amp; row == endingRow)<br/>            done = true;<br/>        end<br/>\u00a0<br/>        if(!south[col][row]) // Go South<br/>            solve(col, row + 1);<br/>        end<br/>        if(!west[col + 1][row]) // Go East<br/>            solve(col + 1, row);<br/>        end<br/>        if(!south[col][row - 1]) // Go North<br/>            solve(col, row - 1);<br/>        end<br/>        if(!west[col][row]) // Go West<br/>            solve(col - 1, row);<br/>        end<br/>\u00a0<br/>        if(done)<br/>            return;<br/>        end<br/>\u00a0<br/>        solution.removeElement(\"x=\" + col + \"y=\" + row);<br/>\u00a0<br/>    end<br/>\u00a0<br/>    private function solveMaze()<br/>        for(col int from 1 to mazeSize)<br/>            for(row int from 1 to mazeSize)<br/>                visited[col][row] = false;<br/>            end<br/>        end<br/>\u00a0<br/>        solution = new Dictionary(false, OrderingKind.byInsertion);<br/>        done = false;<br/>\u00a0<br/>        // Pick random start position on first visible row<br/>        startingCol = MathLib.floor((MathLib.random() *(mazeSize - 2)) + 2);<br/>        startingRow = 2;<br/>\u00a0<br/>        // Pick random end position on last visible row<br/>        endingCol = MathLib.floor((MathLib.random() *(mazeSize - 2)) + 2);<br/>        endingRow = mazeSize - 1;<br/>\u00a0<br/>        solve(startingCol, startingRow);<br/>    end<br/>\u00a0<br/>end</pre>"}, {"lang": "Erlang", "loc": 41, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> maze_solving <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cells</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Start_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Start_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Stop_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Start_pid</span> <span class=\"sy3\">=</span> maze:<span class=\"re3\">cell_pid</span><span class=\"br0\">(</span> <span class=\"re5\">Start_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Start_y</span><span class=\"sy1\">,</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Stop_pid</span> <span class=\"sy3\">=</span>  maze:<span class=\"re3\">cell_pid</span><span class=\"br0\">(</span> <span class=\"re5\">Stop_x</span><span class=\"sy1\">,</span>  <span class=\"re5\">Stop_y</span><span class=\"sy1\">,</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Cells</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Start_pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop_pid</span><span class=\"sy1\">,</span> maze:<span class=\"re3\">cell_accessible_neighbours</span><span class=\"br0\">(</span><span class=\"re5\">Start_pid</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Start_pid</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Cells</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Max_x</span> <span class=\"sy3\">=</span> <span class=\"nu0\">16</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Max_y</span> <span class=\"sy3\">=</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Maze</span> <span class=\"sy3\">=</span> maze:<span class=\"re3\">generation</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Start_x</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Start_y</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span> <span class=\"re5\">Max_y</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Stop_x</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Stop_y</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span> <span class=\"re5\">Max_y</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Cells</span> <span class=\"sy3\">=</span> <span class=\"re3\">cells</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Start_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Start_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Stop_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span>maze:<span class=\"re3\">cell_content_set</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Cells</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    maze:<span class=\"re3\">cell_content_set</span><span class=\"br0\">(</span> maze:<span class=\"re3\">cell_pid</span><span class=\"br0\">(</span><span class=\"re5\">Start_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Start_y</span><span class=\"sy1\">,</span> <span class=\"re5\">Maze</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\"S\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    maze:<span class=\"re3\">cell_content_set</span><span class=\"br0\">(</span> maze:<span class=\"re3\">cell_pid</span><span class=\"br0\">(</span><span class=\"re5\">Stop_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop_y</span><span class=\"sy1\">,</span> <span class=\"re5\">Maze</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\"G\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    maze:<span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    maze:<span class=\"re3\">stop</span><span class=\"br0\">(</span> <span class=\"re5\">Maze</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">_Start</span><span class=\"sy1\">,</span> <span class=\"re5\">_Stop</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">_Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>error<span class=\"sy1\">,</span> dead_end<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">_Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Stop</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">Stop</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Next</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Previous</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">delete</span><span class=\"br0\">(</span><span class=\"re5\">Previous</span><span class=\"sy1\">,</span> maze:<span class=\"re3\">cell_accessible_neighbours</span><span class=\"br0\">(</span><span class=\"re5\">Next</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Next</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"re5\">Nexts</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop_stop</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"re5\">Nexts</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"re5\">Nexts</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_stop</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">_Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"re5\">_Nexts</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">Stop</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_stop</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"re5\">Nexts</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">My_pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">My_pid</span> <span class=\"sy3\">!</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Stop</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Nexts</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>        <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Cells</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Cells</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Frege", "loc": 73, "block": "<pre class=\"text highlighted_source\">module MazeSolver where<br/>\u00a0<br/>import frege.IO<br/>import Data.Maybe<br/>\u00a0<br/>-- given two points, returns the average of them<br/>average\u00a0:: (Int, Int) -&gt; (Int, Int) -&gt; (Int, Int)<br/>average (x, y) (x', y') = ((x + x') `div` 2, (y + y') `div` 2)<br/>\u00a0<br/>-- given a maze and a tuple of position and wall position, returns<br/>-- true if the wall position is not blocked (first position is unused)<br/>notBlocked\u00a0:: [String] -&gt; ((Int, Int), (Int, Int)) -&gt; Bool<br/>notBlocked maze (_, (x, y)) = (' ' == String.charAt (maze\u00a0!! y) x)<br/>\u00a0<br/>-- given a list, a position, and an element, returns a new list<br/>-- with the new element substituted at the position<br/>substitute\u00a0:: [a] -&gt; Int -&gt; a -&gt; [a]<br/>substitute orig pos el =<br/>  let (before, after) = splitAt pos orig<br/>  in before ++ [el] ++ tail after<br/>\u00a0<br/>-- like above, but for strings, since Frege strings are not<br/>-- lists of characters<br/>substituteString\u00a0:: String -&gt; Int -&gt; String -&gt; String<br/>substituteString orig pos el =<br/>  let before = substr orig 0 pos<br/>      after = strtail orig (pos + 1)<br/>  in before ++ el ++ after<br/>\u00a0<br/>-- given a maze and a position, draw a '*' at that position in the maze<br/>draw\u00a0:: [String] -&gt; (Int, Int) -&gt; [String]<br/>draw maze (x,y) = substitute maze y $ substituteString row x \"*\"<br/>  where row = maze\u00a0!! y<br/>\u00a0<br/>-- given a maze, a previous position, and a list of tuples of potential<br/>-- new positions and their wall positions, returns the solved maze, or<br/>-- None if it cannot be solved<br/>tryMoves\u00a0:: [String] -&gt; (Int, Int) -&gt; [((Int, Int), (Int, Int))] -&gt; Maybe [String]<br/>tryMoves _ _ [] = Nothing<br/>tryMoves maze prevPos ((newPos,wallPos):more) =<br/>  case solve' maze newPos prevPos<br/>       of Nothing -&gt; tryMoves maze prevPos more<br/>          Just maze' -&gt; Just $ foldl draw maze' [newPos, wallPos]<br/>\u00a0<br/>-- given a maze, a new position, and a previous position, returns<br/>-- the solved maze, or None if it cannot be solved<br/>-- (assumes goal is upper-left corner of maze)<br/>solve'\u00a0:: [String] -&gt; (Int, Int) -&gt; (Int, Int) -&gt; Maybe [String]<br/>solve' maze (2, 1) _ = Just maze<br/>solve' maze (x, y) prevPos =<br/>  let newPositions = [(x, y - 2), (x + 4, y), (x, y + 2), (x - 4, y)]<br/>      notPrev pos' = pos' /= prevPos<br/>      newPositions' = filter notPrev newPositions<br/>      wallPositions = map (average (x,y)) newPositions'<br/>      zipped = zip newPositions' wallPositions<br/>      legalMoves = filter (notBlocked maze) zipped<br/>  in tryMoves maze (x,y) legalMoves<br/>\u00a0<br/>-- given a maze, returns a solved maze, or None if it cannot be solved<br/>-- (starts at lower right corner and goes to upper left corner)<br/>solve\u00a0:: [String] -&gt; Maybe [String]<br/>solve maze = solve' (draw maze start) start (-1, -1)<br/>  where startx = (length $ head maze) - 3<br/>        starty = (length maze) - 2<br/>        start = (startx, starty)<br/>\u00a0<br/>-- takes unsolved maze on standard input, prints solved maze on standard output<br/>main _ = do<br/>  isin  &lt;- stdin<br/>  isrin &lt;- InputStreamReader.new isin<br/>  brin  &lt;- BufferedReader.fromISR isrin<br/>  lns &lt;- BufferedReader.getlines brin<br/>  printStr $ unlines $ fromMaybe [\"can't solve\"] $ solve lns</pre>"}, {"lang": "Go", "loc": 163, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bytes\"</span><br/>    <span class=\"st0\">\"fmt\"</span> <br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> maze <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span> <br/>    c2 <span class=\"sy1\">[][]</span><span class=\"kw4\">byte</span> <span class=\"co1\">// cells by row</span><br/>    h2 <span class=\"sy1\">[][]</span><span class=\"kw4\">byte</span> <span class=\"co1\">// horizontal walls by row (ignore first row)</span><br/>    v2 <span class=\"sy1\">[][]</span><span class=\"kw4\">byte</span> <span class=\"co1\">// vertical walls by row (ignore first of each column)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newMaze<span class=\"sy1\">(</span>rows<span class=\"sy1\">,</span> cols <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>maze <span class=\"sy1\">{</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rows<span class=\"sy3\">*</span>cols<span class=\"sy1\">)</span>              <span class=\"co1\">// all cells</span><br/>    h <span class=\"sy2\">:=</span> bytes<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><span class=\"st0\">'-'</span><span class=\"sy1\">},</span> rows<span class=\"sy3\">*</span>cols<span class=\"sy1\">)</span> <span class=\"co1\">// all horizontal walls</span><br/>    v <span class=\"sy2\">:=</span> bytes<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><span class=\"st0\">'|'</span><span class=\"sy1\">},</span> rows<span class=\"sy3\">*</span>cols<span class=\"sy1\">)</span> <span class=\"co1\">// all vertical walls</span><br/>    c2 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rows<span class=\"sy1\">)</span>                <span class=\"co1\">// cells by row</span><br/>    h2 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rows<span class=\"sy1\">)</span>                <span class=\"co1\">// horizontal walls by row</span><br/>    v2 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rows<span class=\"sy1\">)</span>                <span class=\"co1\">// vertical walls by row</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> h2 <span class=\"sy1\">{</span><br/>        c2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>cols <span class=\"sy1\">:</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>cols<span class=\"sy1\">]</span><br/>        h2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> h<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>cols <span class=\"sy1\">:</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>cols<span class=\"sy1\">]</span><br/>        v2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> v<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">*</span>cols <span class=\"sy1\">:</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>cols<span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> &amp;maze<span class=\"sy1\">{</span>c2<span class=\"sy1\">,</span> h2<span class=\"sy1\">,</span> v2<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>maze<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    hWall <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"+---\"</span><span class=\"sy1\">)</span><br/>    hOpen <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"+   \"</span><span class=\"sy1\">)</span><br/>    vWall <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"|   \"</span><span class=\"sy1\">)</span><br/>    vOpen <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"    \"</span><span class=\"sy1\">)</span><br/>    rightCorner <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"+<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    rightWall <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"|<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> b <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/>    <span class=\"kw1\">for</span> r<span class=\"sy1\">,</span> hw <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy3\">.</span>h2 <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> h <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> hw <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> h <span class=\"sy3\">==</span> <span class=\"st0\">'-'</span> <span class=\"sy3\">||</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> hWall<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> hOpen<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> h <span class=\"sy2\">!=</span> <span class=\"st0\">'-'</span> &amp;&amp; h <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    b<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> h<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> rightCorner<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> c<span class=\"sy1\">,</span> vw <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> vw <span class=\"sy3\">==</span> <span class=\"st0\">'|'</span> <span class=\"sy3\">||</span> c <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> vWall<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> vOpen<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> vw <span class=\"sy2\">!=</span> <span class=\"st0\">'|'</span> &amp;&amp; vw <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    b<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">4</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> vw<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                b<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> rightWall<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _ <span class=\"sy2\">=</span> <span class=\"kw1\">range</span> m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> hWall<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    b <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> rightCorner<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>maze<span class=\"sy1\">)</span> gen<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>c2<span class=\"sy1\">)),</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    up <span class=\"sy2\">=</span> iota<br/>    dn<br/>    rt<br/>    lf<br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>maze<span class=\"sy1\">)</span> g2<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">' '</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> dir <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rand<span class=\"sy3\">.</span>Perm<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> dir <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> up<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> r &gt; <span class=\"nu0\">0</span> &amp;&amp; m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">case</span> lf<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> c &gt; <span class=\"nu0\">0</span> &amp;&amp; m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">case</span> dn<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> r &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>c2<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> &amp;&amp; m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">case</span> rt<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> c &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> &amp;&amp; m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                m<span class=\"sy3\">.</span>g2<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">const</span> height <span class=\"sy2\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">const</span> width <span class=\"sy2\">=</span> <span class=\"nu0\">7</span><br/>    m <span class=\"sy2\">:=</span> newMaze<span class=\"sy1\">(</span>height<span class=\"sy1\">,</span> width<span class=\"sy1\">)</span><br/>    m<span class=\"sy3\">.</span>gen<span class=\"sy1\">()</span> <br/>    m<span class=\"sy3\">.</span>solve<span class=\"sy1\">(</span><br/>        rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>height<span class=\"sy1\">),</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>width<span class=\"sy1\">),</span><br/>        rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>height<span class=\"sy1\">),</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>width<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>maze<span class=\"sy1\">)</span> solve<span class=\"sy1\">(</span>ra<span class=\"sy1\">,</span> ca<span class=\"sy1\">,</span> rz<span class=\"sy1\">,</span> cz <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> rSolve <span class=\"kw4\">func</span><span class=\"sy1\">(</span>ra<span class=\"sy1\">,</span> ca<span class=\"sy1\">,</span> dir <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><br/>    rSolve <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> dir <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> r <span class=\"sy3\">==</span> rz &amp;&amp; c <span class=\"sy3\">==</span> cz <span class=\"sy1\">{</span><br/>            m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'F'</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> dir <span class=\"sy2\">!=</span> dn &amp;&amp; m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> rSolve<span class=\"sy1\">(</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> up<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'^'</span><br/>                m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'^'</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> dir <span class=\"sy2\">!=</span> up &amp;&amp; r<span class=\"sy3\">+</span><span class=\"nu0\">1</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>h2<span class=\"sy1\">)</span> &amp;&amp; m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> rSolve<span class=\"sy1\">(</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> dn<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'v'</span><br/>                m<span class=\"sy3\">.</span>h2<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'v'</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> dir <span class=\"sy2\">!=</span> lf &amp;&amp; c<span class=\"sy3\">+</span><span class=\"nu0\">1</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span> &amp;&amp; m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> rSolve<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> rt<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'&gt;'</span><br/>                m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'&gt;'</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> dir <span class=\"sy2\">!=</span> rt &amp;&amp; m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> rSolve<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> lf<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'&lt;'</span><br/>                m<span class=\"sy3\">.</span>v2<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'&lt;'</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    rSolve<span class=\"sy1\">(</span>ra<span class=\"sy1\">,</span> ca<span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    m<span class=\"sy3\">.</span>c2<span class=\"sy1\">[</span>ra<span class=\"sy1\">][</span>ca<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'S'</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 69, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>runhaskell<br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>fromMaybe<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- given two points, returns the average of them</span><br/>average <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>average <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">_,</span> y<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> x<span class=\"sy0\">_</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> y<span class=\"sy0\">_</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- given a maze and a tuple of position and wall position, returns</span><br/><span class=\"co1\">-- true if the wall position is not blocked (first position is unused)</span><br/>notBlocked <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>notBlocked maze <span class=\"br0\">(</span><span class=\"sy0\">_,</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>maze <span class=\"sy0\">!!</span> y<span class=\"br0\">)</span> <span class=\"sy0\">!!</span> x<br/>\u00a0<br/><span class=\"co1\">-- given a list, a position, and an element, returns a new list</span><br/><span class=\"co1\">-- with the new element substituted at the position</span><br/><span class=\"co1\">-- (it seems such a function should exist in the standard library;</span><br/><span class=\"co1\">-- I must be missing it)</span><br/>substitute <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>substitute orig pos el <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span>before<span class=\"sy0\">,</span> after<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> pos orig<br/>  <span class=\"kw1\">in</span> before <span class=\"sy0\">++</span> <span class=\"br0\">[</span>el<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> after<br/>\u00a0<br/><span class=\"co1\">-- given a maze and a position, draw a '*' at that position in the maze</span><br/>draw <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>draw maze <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> row <span class=\"sy0\">=</span> maze <span class=\"sy0\">!!</span> y<br/>  <span class=\"kw1\">in</span> substitute maze y <span class=\"sy0\">$</span> substitute row x <span class=\"st0\">'*'</span><br/>\u00a0<br/><span class=\"co1\">-- given a maze, a previous position, and a list of tuples of potential</span><br/><span class=\"co1\">-- new positions and their wall positions, returns the solved maze, or</span><br/><span class=\"co1\">-- None if it cannot be solved</span><br/>tryMoves <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>         <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>         <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>tryMoves <span class=\"sy0\">_</span> <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Nothing<br/>tryMoves maze prevPos <span class=\"br0\">(</span><span class=\"br0\">(</span>newPos<span class=\"sy0\">,</span> wallPos<span class=\"br0\">)</span>:more<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">case</span> solve<span class=\"sy0\">_</span> maze newPos prevPos <span class=\"kw1\">of</span><br/>    Nothing <span class=\"sy0\">-&gt;</span> tryMoves maze prevPos more<br/>    Just maze<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> Just <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> draw maze<span class=\"sy0\">_</span> <span class=\"br0\">[</span>newPos<span class=\"sy0\">,</span> wallPos<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- given a maze, a new position, and a previous position, returns</span><br/><span class=\"co1\">-- the solved maze, or None if it cannot be solved</span><br/><span class=\"co1\">-- (assumes goal is upper-left corner of maze)</span><br/>solve<span class=\"sy0\">_</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>solve<span class=\"sy0\">_</span> maze <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> Just maze<br/>solve<span class=\"sy0\">_</span> maze pos<span class=\"sy0\">@</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> prevPos <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> newPositions <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      notPrev pos<span class=\"sy0\">_</span> <span class=\"sy0\">=</span> pos<span class=\"sy0\">_</span> <span class=\"sy0\">/=</span> prevPos<br/>      newPositions<span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> notPrev newPositions<br/>      wallPositions <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>average pos<span class=\"br0\">)</span> newPositions<span class=\"sy0\">_</span><br/>      zipped <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> newPositions<span class=\"sy0\">_</span> wallPositions<br/>      legalMoves <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>notBlocked maze<span class=\"br0\">)</span> zipped<br/>  <span class=\"kw1\">in</span> tryMoves maze pos legalMoves<br/>\u00a0<br/><span class=\"co1\">-- given a maze, returns a solved maze, or None if it cannot be solved</span><br/><span class=\"co1\">-- (starts at lower right corner and goes to upper left corner)</span><br/>solve <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>solve maze <span class=\"sy0\">=</span> solve<span class=\"sy0\">_</span> <span class=\"br0\">(</span>draw maze start<span class=\"br0\">)</span> start <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    startx <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> maze<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><br/>    starty <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> maze <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>    start <span class=\"sy0\">=</span> <span class=\"br0\">(</span>startx<span class=\"sy0\">,</span> starty<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- takes unsolved maze on standard input, prints solved maze on standard output</span><br/>main <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> main<span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">.</span> fromMaybe <span class=\"br0\">[</span><span class=\"st0\">\"can_t solve\"</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> solve <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a><br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:interact\"><span class=\"kw3\">interact</span></a> main<span class=\"sy0\">_</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 13, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   <span class=\"sy1\">/</span>mh <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"nu0\">12</span><br/>   <span class=\"sy1\">/</span>mw <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"nu0\">16</span><br/>   mz <span class=\"sy1\">:=</span> DisplayMaze<span class=\"br0\">(</span>GenerateMaze<span class=\"br0\">(</span>mh<span class=\"sy1\">,</span>mw<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw5\">WriteImage</span><span class=\"br0\">(</span>mz<span class=\"sy1\">.</span><span class=\"me1\">filename</span><span class=\"br0\">)</span>              <span class=\"co1\"># save file</span><br/>   <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span>mz<span class=\"sy1\">.</span><span class=\"me1\">window</span><span class=\"sy1\">,</span><span class=\"st0\">\"canvas=normal\"</span><span class=\"br0\">)</span>   <span class=\"co1\"># show it</span><br/>   <span class=\"kw1\">until</span> <span class=\"kw5\">Event</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lpress</span> <span class=\"co1\"># wait for left mouse press</span><br/>   Solver<span class=\"br0\">(</span>mz<span class=\"sy1\">.</span><span class=\"me1\">maze</span><span class=\"br0\">)</span><br/>   DisplayMazeSolution<span class=\"br0\">(</span>mz<span class=\"br0\">)</span><br/>   <span class=\"kw5\">WriteImage</span><span class=\"br0\">(</span>mz<span class=\"sy1\">.</span><span class=\"me1\">filename</span> <span class=\"sy1\">?:=</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"maze-\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"maze-solved-\"</span> <span class=\"sy1\">||</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">until</span> <span class=\"kw5\">Event</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lpress</span> <span class=\"co1\"># wait</span><br/>   <span class=\"kw4\">close</span><span class=\"br0\">(</span>mz<span class=\"sy1\">.</span><span class=\"me1\">window</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 97, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>maze=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  assert.<span class=\"nu0\">0</span>&lt;:<span class=\"kw2\">n</span>=.&lt;:<span class=\"kw2\">x</span>*<span class=\"kw2\">y</span><br/>  horiz=. <span class=\"nu0\">0</span>$~<span class=\"kw2\">x</span>,<span class=\"kw2\">y</span>-<span class=\"nu0\">1</span><br/>  verti=. <span class=\"nu0\">0</span>$~<span class=\"sy0\">(</span><span class=\"kw2\">x</span>-<span class=\"nu0\">1</span><span class=\"sy0\">)</span>,<span class=\"kw2\">y</span><br/>  path=.,:here=.\u00a0?<span class=\"kw2\">x</span>,<span class=\"kw2\">y</span><br/>  unvisited=.<span class=\"nu0\">0</span> <span class=\"sy0\">(</span>&lt;here+<span class=\"nu0\">1</span><span class=\"sy0\">)</span>} <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,~|:<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,~<span class=\"nu0\">1</span>$~<span class=\"kw2\">y</span>,<span class=\"kw2\">x</span><br/>  while.<span class=\"kw2\">n</span> <span class=\"kw1\">do.</span><br/>    neighbors=. here+\"<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>,-<span class=\"sy0\">)</span>=<span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>    neighbors=. neighbors #~ <span class=\"sy0\">(</span>&lt;\"<span class=\"nu0\">1</span> neighbors+<span class=\"nu0\">1</span><span class=\"sy0\">)</span> {unvisited<br/>    <span class=\"kw1\">if.</span>#neighbors <span class=\"kw1\">do.</span><br/>      <span class=\"kw2\">n</span>=.<span class=\"kw2\">n</span>-<span class=\"nu0\">1</span><br/>      next=. <span class=\"sy0\">(</span>{~\u00a0<a class=\"__cf_email__\" data-cfemail=\"6f502f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span> neighbors<br/>      unvisited=.<span class=\"nu0\">0</span> <span class=\"sy0\">(</span>&lt;next+<span class=\"nu0\">1</span><span class=\"sy0\">)</span>} unvisited<br/>      <span class=\"kw1\">if.</span>{.next=here<br/>      <span class=\"kw1\">do.</span> horiz=.<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>&lt;-:here+next-<span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">)</span>} horiz<br/>      <span class=\"kw1\">else.</span> verti=. <span class=\"nu0\">1</span> <span class=\"sy0\">(</span>&lt;-:here+next-<span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"sy0\">)</span>} verti <span class=\"kw1\">end.</span><br/>      path=.path,here=.next<br/>    <span class=\"kw1\">else.</span><br/>      here=.{:path<br/>      path=.}:path<br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/>  horiz;verti<br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB. source Dijkstra_equal_weights graph</span><br/><span class=\"co1\">NB. </span><br/><span class=\"co1\">NB.        +   +---+---+</span><br/><span class=\"co1\">NB.        | 0   1   2 |  (sample cell numbers)</span><br/><span class=\"co1\">NB.        +---+   +   +</span><br/><span class=\"co1\">NB.        | 3   4 | 5  </span><br/><span class=\"co1\">NB.        +---+---+---+</span><br/><span class=\"co1\">NB.</span><br/><span class=\"co1\">NB. graph =: 1;0 2 4;1 5;4;1 3;2</span><br/><span class=\"co1\">NB. The graph is a vector of boxed vectors of neighbors.</span><br/>\u00a0<br/>Dijkstra_equal_weights =: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><br/> dist =. previous =. #&amp;<span class=\"nu0\">_</span> <span class=\"kw2\">n</span> =. # graph =. <span class=\"kw2\">y</span> [ source =. <span class=\"kw2\">x</span><br/> dist =. <span class=\"nu0\">0</span> source } dist<br/> Q =. <span class=\"nu0\">0</span><br/> <span class=\"kw1\">while.</span> #Q <span class=\"kw1\">do.</span><br/>   <span class=\"kw2\">u</span> =. {.Q<br/>   Q =. }.Q<br/>   <span class=\"kw1\">if.</span> <span class=\"nu0\">_</span> = <span class=\"kw2\">u</span>{dist <span class=\"kw1\">do.</span> <span class=\"kw1\">break.</span> <span class=\"kw1\">end.</span><br/>   <span class=\"re0\">for_v.</span> &gt;<span class=\"kw2\">u</span>{graph <span class=\"kw1\">do.</span><br/>     <span class=\"kw1\">if.</span> -. <span class=\"kw2\">v</span> e. previous <span class=\"kw1\">do.</span><br/>       alt =. &gt;: <span class=\"kw2\">u</span> { dist<br/>       <span class=\"kw1\">if.</span> alt &lt; <span class=\"kw2\">v</span> { dist <span class=\"kw1\">do.</span><br/>         dist =. alt <span class=\"kw2\">v</span> } dist<br/>         previous =. <span class=\"kw2\">u</span> <span class=\"kw2\">v</span> } previous<br/>         <span class=\"kw1\">if.</span> <span class=\"kw2\">v</span> e. Q <span class=\"kw1\">do.</span><br/>           echo <span class=\"st_h\">'belch'</span><br/>         <span class=\"kw1\">else.</span><br/>           Q =. Q,<span class=\"kw2\">v</span><br/>         <span class=\"kw1\">end.</span><br/>       <span class=\"kw1\">end.</span><br/>     <span class=\"kw1\">end.</span><br/>   <span class=\"kw1\">end.</span><br/> <span class=\"kw1\">end.</span><br/> dist;previous<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>path =: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/>  p =. &lt;:#<span class=\"kw2\">y</span><br/>  <span class=\"kw1\">while.</span> <span class=\"nu0\">_</span> &gt; {:p <span class=\"kw1\">do.</span><br/>    p =. p,<span class=\"kw2\">y</span>{~{:p<br/>  <span class=\"kw1\">end.</span><br/>  |.}:p<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>solve=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"co1\">NB. convert walls to graph</span><br/>  shape =. }<a class=\"__cf_email__\" data-cfemail=\"d7f997\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"9cb8dc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:&gt;<br/>  ew =. <span class=\"sy0\">(</span>,.&amp;<span class=\"nu0\">0</span> ,: <span class=\"nu0\">0</span>&amp;,.<span class=\"sy0\">)</span>@&gt;@{.  <span class=\"co1\">NB. east west doors</span><br/>  ns =. <span class=\"sy0\">(</span>, &amp;<span class=\"nu0\">0</span> ,: <span class=\"nu0\">0</span>&amp;, <span class=\"sy0\">)</span>@&gt;@{:<br/>  cell_offsets =. <span class=\"nu0\">1</span> <span class=\"nu0\">_1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">_1</span> * <span class=\"nu0\">2</span> # <span class=\"nu0\">1</span> , {:@shape<br/>  cell_numbers =. <a class=\"__cf_email__\" data-cfemail=\"d6bff896a5beb7a6b3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  neighbors =. <span class=\"sy0\">(</span>cell_numbers +\"<span class=\"nu0\">_</span> <span class=\"nu0\">_1</span> cell_offsets *\"<span class=\"nu0\">_1</span> <span class=\"sy0\">(</span>ew , ns<span class=\"sy0\">))</span><span class=\"kw2\">y</span><br/>  graph =. <span class=\"sy0\">(</span>|:@<span class=\"sy0\">(</span>,/\"<span class=\"nu0\">_1</span><span class=\"sy0\">)</span> &lt;@-.\"<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> ,@<a class=\"__cf_email__\" data-cfemail=\"ee87c0ae9d868f9e8b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">)</span>neighbors <span class=\"co1\">NB. list of boxed neighbors</span><br/>  <span class=\"co1\">NB. solve it</span><br/>  path , &gt; {: <span class=\"nu0\">0</span> Dijkstra_equal_weights graph<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>display=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  size=. &gt;.&amp;$&amp;&gt;/<span class=\"kw2\">y</span><br/>  text=. <span class=\"sy0\">(</span>}:<span class=\"nu0\">1</span> <span class=\"nu0\">3</span>$~<span class=\"nu0\">2</span>*<span class=\"nu0\">1</span>+{:size<span class=\"sy0\">)</span>#\"<span class=\"nu0\">1</span>\":size$&lt;<span class=\"st_h\">' '</span><br/>  <span class=\"st_h\">'hdoor vdoor'</span>=. <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>&amp;*&amp;.&gt;&amp;.&gt; <span class=\"sy0\">(</span>#&amp;,{@;&amp;i./@$<span class=\"sy0\">)</span>&amp;.&gt; <span class=\"kw2\">y</span><br/>  <span class=\"st_h\">' '</span> <span class=\"sy0\">(</span>a:-.~<span class=\"nu0\">0</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">0</span> <span class=\"nu0\">2</span>; <span class=\"nu0\">0</span> <span class=\"nu0\">3</span>;<span class=\"sy0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span>-~$text<span class=\"sy0\">)</span>;<span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span>&amp;+&amp;.&gt; hdoor<span class=\"sy0\">)</span>,,vdoor+&amp;.&gt;\"<span class=\"nu0\">0</span>/<span class=\"nu0\">2</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">2</span> <span class=\"nu0\">2</span>;<span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"sy0\">)</span>} text<br/>:<br/>  a=. display <span class=\"kw2\">y</span><br/>  size=. &gt;.&amp;$&amp;&gt;/<span class=\"kw2\">y</span><br/>  columns=. {: size<br/>  cells =. &lt;\"<span class=\"nu0\">1</span><span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span>&amp;<a class=\"__cf_email__\" data-cfemail=\"8efea0ce\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;<a class=\"__cf_email__\" data-cfemail=\"f7d9b7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>%&amp;columns<span class=\"sy0\">)</span> ,.  <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>&amp;<a class=\"__cf_email__\" data-cfemail=\"7e0e503e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>columns&amp;|<span class=\"sy0\">))</span><span class=\"kw2\">x</span><br/>  <span class=\"st_h\">'o'</span> cells } a  <span class=\"co1\">NB. exercise, replace cells with a gerund to draw arrows on the path.</span><br/><span class=\"sy0\">)</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 149, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MazeSolver<br/><span class=\"br0\">{</span><br/>    <span class=\"co3\">/**<br/>     * Reads a file into an array of strings, one per line.<br/>     */</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> readLines <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStream</span></a> f<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> r <span class=\"sy0\">=</span><br/>            <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> <span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstreamreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStreamReader</span></a> <span class=\"br0\">(</span>f, <span class=\"st0\">\"US-ASCII\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ArrayList<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> lines <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> r.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>            lines.<span class=\"me1\">add</span> <span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> lines.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Makes the maze half as wide (i. e. \"+---+\" becomes \"+-+\"), so that<br/>     * each cell in the maze is the same size horizontally as vertically.<br/>     * (Versus the expanded version, which looks better visually.)<br/>     * Also, converts each line of the maze from a String to a<br/>     * char[], because we'll want mutability when drawing the solution later.<br/>     */</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> decimateHorizontally <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> lines<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> width <span class=\"sy0\">=</span> <span class=\"br0\">(</span>lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span>lines.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span>width<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"sy0\">;</span>  i <span class=\"sy0\">&lt;</span> lines.<span class=\"me1\">length</span>  <span class=\"sy0\">;</span>  i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"sy0\">;</span>  j <span class=\"sy0\">&lt;</span> width  <span class=\"sy0\">;</span>  j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">charAt</span> <span class=\"br0\">(</span>j <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Given the maze, the x and y coordinates (which must be odd),<br/>     * and the direction we came from, return true if the maze is<br/>     * solvable, and draw the solution if so.<br/>     */</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> solveMazeRecursively <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> maze,<br/>                                                 <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> d<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span> ok <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"sy0\">;</span>  i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span>  <span class=\"sy0\">&amp;&amp;</span>  <span class=\"sy0\">!</span>ok  <span class=\"sy0\">;</span>  i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> d<span class=\"br0\">)</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"co1\">// 0 = up, 1 = right, 2 = down, 3 = left</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>                            ok <span class=\"sy0\">=</span> solveMazeRecursively <span class=\"br0\">(</span>maze, x, y <span class=\"sy0\">-</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>                            ok <span class=\"sy0\">=</span> solveMazeRecursively <span class=\"br0\">(</span>maze, x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>, y, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>                            ok <span class=\"sy0\">=</span> solveMazeRecursively <span class=\"br0\">(</span>maze, x, y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>                            ok <span class=\"sy0\">=</span> solveMazeRecursively <span class=\"br0\">(</span>maze, x <span class=\"sy0\">-</span> <span class=\"nu0\">2</span>, y, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>        <span class=\"co1\">// check for end condition</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>  <span class=\"sy0\">&amp;&amp;</span>  y <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            ok <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// once we have found a solution, draw it as we unwind the recursion</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ok<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>                        maze<span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                        maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>                        maze<span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>                        maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> ok<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Solve the maze and draw the solution.  For simplicity,<br/>     * assumes the starting point is the lower right, and the<br/>     * ending point is the upper left.<br/>     */</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> solveMaze <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> maze<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        solveMazeRecursively <span class=\"br0\">(</span>maze, maze<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span>, maze.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Opposite of decimateHorizontally().  Adds extra characters to make<br/>     * the maze \"look right\", and converts each line from char[] to<br/>     * String at the same time.<br/>     */</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> expandHorizontally <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> maze<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> tmp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> lines <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span>maze.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"sy0\">;</span>  i <span class=\"sy0\">&lt;</span> maze.<span class=\"me1\">length</span>  <span class=\"sy0\">;</span>  i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span>maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"sy0\">;</span>  j <span class=\"sy0\">&lt;</span> maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span>  <span class=\"sy0\">;</span>  j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        sb.<span class=\"me1\">append</span> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">else</span><br/>                        <span class=\"br0\">{</span><br/>                            tmp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>                                tmp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>                            sb.<span class=\"me1\">append</span> <span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> lines<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Accepts a maze as generated by:<br/>     * http://rosettacode.org/wiki/Maze_generation#Java<br/>     * in a file whose name is specified as a command-line argument,<br/>     * or on standard input if no argument is specified.<br/>     */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStream</span></a> f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>                         <span class=\"sy0\">?</span>  <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afileinputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileInputStream</span></a> <span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                         <span class=\"sy0\">:</span>  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> lines <span class=\"sy0\">=</span> readLines <span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> maze <span class=\"sy0\">=</span> decimateHorizontally <span class=\"br0\">(</span>lines<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        solveMaze <span class=\"br0\">(</span>maze<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> solvedLines <span class=\"sy0\">=</span> expandHorizontally <span class=\"br0\">(</span>maze<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"sy0\">;</span>  i <span class=\"sy0\">&lt;</span> solvedLines.<span class=\"me1\">length</span>  <span class=\"sy0\">;</span>  i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span> <span class=\"br0\">(</span>solvedLines<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 137, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> ctx<span class=\"sy0\">,</span> wid<span class=\"sy0\">,</span> hei<span class=\"sy0\">,</span> cols<span class=\"sy0\">,</span> rows<span class=\"sy0\">,</span> maze<span class=\"sy0\">,</span> stack <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> start <span class=\"sy0\">=</span> <span class=\"br0\">{</span>x<span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> end <span class=\"sy0\">=</span> <span class=\"br0\">{</span>x<span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> grid <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">function</span> drawMaze<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cols<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> rows<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span><span class=\"br0\">(</span> maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span> ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"black\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"green\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"red\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"yellow\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span> ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#500000\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span> grid <span class=\"sy0\">*</span> i<span class=\"sy0\">,</span> grid <span class=\"sy0\">*</span> j<span class=\"sy0\">,</span> grid<span class=\"sy0\">,</span> grid  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> getFNeighbours<span class=\"br0\">(</span> sx<span class=\"sy0\">,</span> sy<span class=\"sy0\">,</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> sx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>sy<span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> sx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> cols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>sy<span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> sy <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx<span class=\"br0\">]</span><span class=\"br0\">[</span>sy <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> sy <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> rows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx<span class=\"br0\">]</span><span class=\"br0\">[</span>sy <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> solveMaze<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> start.<span class=\"me1\">x</span> <span class=\"sy0\">==</span> end.<span class=\"me1\">x</span> <span class=\"sy0\">&amp;&amp;</span> start.<span class=\"me1\">y</span> <span class=\"sy0\">==</span> end.<span class=\"me1\">y</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cols<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> rows<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">switch</span><span class=\"br0\">(</span> maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span> maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        drawMaze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">var</span> neighbours <span class=\"sy0\">=</span> getFNeighbours<span class=\"br0\">(</span> start.<span class=\"me1\">x</span><span class=\"sy0\">,</span> start.<span class=\"me1\">y</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> neighbours.<span class=\"me1\">length</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span> start <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        start <span class=\"sy0\">=</span> neighbours<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        maze<span class=\"br0\">[</span>start.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>start.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        maze<span class=\"br0\">[</span>start.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>start.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>        start <span class=\"sy0\">=</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    drawMaze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    requestAnimationFrame<span class=\"br0\">(</span> solveMaze <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> getCursorPos<span class=\"br0\">(</span> event <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> rect <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">getBoundingClientRect</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> event.<span class=\"me1\">clientX</span> <span class=\"sy0\">-</span> rect.<span class=\"me1\">left</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> grid <span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>        y <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> event.<span class=\"me1\">clientY</span> <span class=\"sy0\">-</span> rect.<span class=\"me1\">top</span>  <span class=\"br0\">)</span> <span class=\"sy0\">/</span> grid <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> maze<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> start.<span class=\"me1\">x</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        start <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> y <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        end <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> y <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        maze<span class=\"br0\">[</span>start.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>start.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        solveMaze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> getNeighbours<span class=\"br0\">(</span> sx<span class=\"sy0\">,</span> sy<span class=\"sy0\">,</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> sx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>sy<span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"sy0\">&amp;&amp;</span> sx <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>sy<span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> sx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> cols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>sy<span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"sy0\">&amp;&amp;</span> sx <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> cols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>sy<span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> sy <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx<span class=\"br0\">]</span><span class=\"br0\">[</span>sy <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"sy0\">&amp;&amp;</span> sy <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx<span class=\"br0\">]</span><span class=\"br0\">[</span>sy <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> sy <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> rows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx<span class=\"br0\">]</span><span class=\"br0\">[</span>sy <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"sy0\">&amp;&amp;</span> sy <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> rows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> maze<span class=\"br0\">[</span>sx<span class=\"br0\">]</span><span class=\"br0\">[</span>sy <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> a <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> n.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span>sx<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span>sy <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> createArray<span class=\"br0\">(</span> c<span class=\"sy0\">,</span> r <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> m <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> c<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        m<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span> r <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> r<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> createMaze<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> neighbours <span class=\"sy0\">=</span> getNeighbours<span class=\"br0\">(</span> start.<span class=\"me1\">x</span><span class=\"sy0\">,</span> start.<span class=\"me1\">y</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> l<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> neighbours.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> stack.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            drawMaze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> stack <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            start.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> start.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span> <span class=\"st0\">\"canvas\"</span> <span class=\"br0\">)</span>.<span class=\"me1\">addEventListener</span><span class=\"br0\">(</span> <span class=\"st0\">\"mousedown\"</span><span class=\"sy0\">,</span> getCursorPos<span class=\"sy0\">,</span> <span class=\"kw2\">false</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        start <span class=\"sy0\">=</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> neighbours.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        l <span class=\"sy0\">=</span> neighbours<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> maze<span class=\"br0\">[</span>l.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>l.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        l <span class=\"sy0\">=</span> neighbours<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> maze<span class=\"br0\">[</span>l.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>l.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        start <span class=\"sy0\">=</span> l<br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span> start <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    drawMaze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    requestAnimationFrame<span class=\"br0\">(</span> createMaze <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> createCanvas<span class=\"br0\">(</span> w<span class=\"sy0\">,</span> h <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> canvas <span class=\"sy0\">=</span> document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span> <span class=\"st0\">\"canvas\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    wid <span class=\"sy0\">=</span> w<span class=\"sy0\">;</span> hei <span class=\"sy0\">=</span> h<span class=\"sy0\">;</span><br/>    canvas.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> wid<span class=\"sy0\">;</span> canvas.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> hei<span class=\"sy0\">;</span><br/>    canvas.<span class=\"me1\">id</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"canvas\"</span><span class=\"sy0\">;</span><br/>    ctx <span class=\"sy0\">=</span> canvas.<span class=\"me1\">getContext</span><span class=\"br0\">(</span> <span class=\"st0\">\"2d\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"black\"</span><span class=\"sy0\">;</span> ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> wid<span class=\"sy0\">,</span> hei <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    document.<span class=\"me1\">body</span>.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> init<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cols <span class=\"sy0\">=</span> <span class=\"nu0\">73</span><span class=\"sy0\">;</span> rows <span class=\"sy0\">=</span> <span class=\"nu0\">53</span><span class=\"sy0\">;</span><br/>    createCanvas<span class=\"br0\">(</span> grid <span class=\"sy0\">*</span> cols<span class=\"sy0\">,</span> grid <span class=\"sy0\">*</span> rows <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    maze <span class=\"sy0\">=</span> createArray<span class=\"br0\">(</span> cols<span class=\"sy0\">,</span> rows <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    start.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> cols <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    start.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> rows <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span> start.<span class=\"me1\">x</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> start.<span class=\"me1\">x</span><span class=\"sy0\">++;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span> start.<span class=\"me1\">y</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> start.<span class=\"me1\">y</span><span class=\"sy0\">++;</span><br/>    maze<span class=\"br0\">[</span>start.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>start.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    createMaze<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 80, "block": "<pre class=\"text highlighted_source\">\"\"\"<br/>    +   +---+---+<br/>    | 1   2   3 |<br/>    +---+   +   +<br/>    | 4   5 | 6<br/>    +---+---+---+<br/>\u00a0<br/>    julia&gt; const graph = [<br/>            0 1 0 0 0 0;<br/>            1 0 1 0 1 0;<br/>            0 1 0 0 0 1;<br/>            0 0 0 0 1 0;<br/>            0 1 0 1 0 0;<br/>            0 0 1 0 0 0]<br/>\u00a0<br/>    julia&gt; dist, path = dijkstra(graph, 1)<br/>    (Dict(4=&gt;3,2=&gt;1,3=&gt;2,5=&gt;2,6=&gt;3,1=&gt;0), Dict(4=&gt;5,2=&gt;1,3=&gt;2,5=&gt;2,6=&gt;3,1=&gt;0))<br/>\u00a0<br/>    julia&gt; printpath(path, 6) # Display solution of the maze<br/>    1 -&gt; 2 -&gt; 3 -&gt; 6<br/>\u00a0<br/>\"\"\"<br/>function dijkstra(graph, source::Int=1)<br/>    # ensure that the adjacency matrix is squared<br/>    @assert size(graph, 1) == size(graph, 2)<br/>    inf = typemax(Int64)<br/>    n   = size(graph, 1)<br/>\u00a0<br/>    Q    = IntSet(1:n)                  # Set of unvisited nodes<br/>    dist = Dict(n =&gt; inf for n in Q)    # Unknown distance function from source to v<br/>    prev = Dict(n =&gt; 0   for n in Q)    # Previous node in optimal path from source<br/>    dist[source] = 0                    # Distance from source to source<br/>\u00a0<br/>    function _minimumdist(nodes) # Find the less distant node among nodes<br/>        kmin, vmin = nothing, inf<br/>        for (k, v) in dist<br/>            if k \u2208 nodes &amp;&amp; v \u2264 vmin<br/>                kmin, vmin = k, v<br/>            end<br/>        end<br/>        return kmin<br/>    end<br/>    # Until all nodes are visited...<br/>    while\u00a0!isempty(Q)<br/>        u = _minimumdist(Q)         # Vertex in Q with smallest dist[]<br/>        pop!(Q, u)<br/>        if dist[u] == inf break end # All remaining vertices are inaccessible from source<br/>        for v in 1:n                # Each neighbor v of u<br/>            if graph[u, v]\u00a0!= 0 &amp;&amp; v \u2208 Q # where v has not yet been visited<br/>                alt = dist[u] + graph[u, v]<br/>                if alt &lt; dist[v]    # Relax (u, v, a)<br/>                    dist[v] = alt<br/>                    prev[v] = u<br/>                end<br/>            end<br/>        end<br/>    end<br/>\u00a0<br/>    return dist, prev<br/>end<br/>\u00a0<br/>function printpath(prev::Dict, target::Int)<br/>    path = \"$target\"<br/>    while prev[target]\u00a0!= 0<br/>        target = prev[target]<br/>        path = \"$target -&gt; \" * path<br/>    end<br/>    println(path)<br/>end<br/>\u00a0<br/>const graph = [<br/>    0 1 0 0 0 0;<br/>    1 0 1 0 1 0;<br/>    0 1 0 0 0 1;<br/>    0 0 0 0 1 0;<br/>    0 1 0 1 0 0;<br/>    0 0 1 0 0 0]<br/>\u00a0<br/>dist, path = dijkstra(graph)<br/>printpath(path, 6)</pre>"}, {"lang": "Kotlin", "loc": 117, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.31</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>typealias Maze <span class=\"sy0\">=</span> List<span class=\"sy0\">&lt;</span>CharArray<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/>    * Makes the maze half as wide (i. e. \"+---+\" becomes \"+-+\"), so that<br/>    * each cell in the maze is the same size horizontally as vertically.<br/>    * (Versus the expanded version, which looks better visually.)<br/>    * Also, converts each line of the maze from a String to a<br/>    * char[], because we'll want mutability when drawing the solution later.<br/>    */</span><br/>fun decimateHorizontally<span class=\"br0\">(</span>lines<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Maze <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> width <span class=\"sy0\">=</span> <span class=\"br0\">(</span>lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>lines.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> CharArray<span class=\"br0\">(</span>width<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until lines.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> c<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/>    * Given the maze, the x and y coordinates (which must be odd),<br/>    * and the direction we came from, return true if the maze is<br/>    * solvable, and draw the solution if so.<br/>    */</span><br/>fun solveMazeRecursively<span class=\"br0\">(</span>maze<span class=\"sy0\">:</span> Maze, x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ok <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>ok<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// 0 = up, 1 = right, 2 = down, 3 = left</span><br/>            when<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>y - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> ok <span class=\"sy0\">=</span> solveMazeRecursively <span class=\"br0\">(</span>maze, x, y - <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                <span class=\"nu0\">1</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> ok <span class=\"sy0\">=</span> solveMazeRecursively <span class=\"br0\">(</span>maze, x + <span class=\"nu0\">2</span>, y, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>y + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> ok <span class=\"sy0\">=</span> solveMazeRecursively <span class=\"br0\">(</span>maze, x, y + <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"nu0\">3</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> ok <span class=\"sy0\">=</span> solveMazeRecursively <span class=\"br0\">(</span>maze, x - <span class=\"nu0\">2</span>, y, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>             <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        i++<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// check for end condition</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> ok <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>\u00a0<br/>    <span class=\"co1\">// once we have found a solution, draw it as we unwind the recursion</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ok<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><br/>        when <span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> maze<span class=\"br0\">[</span>y - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><br/>            <span class=\"nu0\">1</span> -<span class=\"sy0\">&gt;</span> maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><br/>            <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> maze<span class=\"br0\">[</span>y + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><br/>            <span class=\"nu0\">3</span> -<span class=\"sy0\">&gt;</span> maze<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> ok<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/>    * Solve the maze and draw the solution. For simplicity,<br/>    * assumes the starting point is the lower right, and the<br/>    * ending point is the upper left.<br/>    */</span><br/>fun solveMaze<span class=\"br0\">(</span>maze<span class=\"sy0\">:</span> Maze<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    solveMazeRecursively<span class=\"br0\">(</span>maze, maze<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span> - <span class=\"nu0\">2</span>, maze.<span class=\"me1\">size</span> - <span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/>    * Opposite of decimateHorizontally(). Adds extra characters to make<br/>    * the maze \"look right\", and converts each line from char[] to<br/>    * String at the same time.<br/>    */</span><br/>fun expandHorizontally<span class=\"br0\">(</span>maze<span class=\"sy0\">:</span> Maze<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> CharArray<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lines <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>maze.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until maze.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span>maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">size</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> tmp<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> maze<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>tmp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    tmp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>                    tmp<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>                <span class=\"br0\">}</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> lines<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/>    * Accepts a maze as generated by:<br/>    * http://rosettacode.org/wiki/Maze_generation#Kotlin<br/>    * in a file whose name is specified as a command-line argument.<br/>    */</span><br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">size</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"The maze file to be read should be passed as a single command line argument.\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> File<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>f.<span class=\"me1\">exists</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Sorry ${args[0]} does not exist.\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lines <span class=\"sy0\">=</span> f.<span class=\"me1\">readLines</span><span class=\"br0\">(</span>Charsets.<span class=\"me1\">US_ASCII</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maze <span class=\"sy0\">=</span> decimateHorizontally<span class=\"br0\">(</span>lines<span class=\"br0\">)</span><br/>    solveMaze<span class=\"br0\">(</span>maze<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> solvedLines <span class=\"sy0\">=</span> expandHorizontally<span class=\"br0\">(</span>maze<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>solvedLines.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">HighlightGraph[maze, <a class=\"__cf_email__\" data-cfemail=\"b0e0d1c4d8f7c2d1c0d8f0f6d9ded4e3d8dfc2c4d5c3c4e0d1c4d8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[maze, 1, 273]]</pre>"}, {"lang": "Perl", "loc": 79, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"co1\">#!perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span><br/><span class=\"co5\">$_</span> <span class=\"sy0\">||=</span> <span class=\"nu0\">10</span> <span class=\"kw1\">for</span> <span class=\"re0\">$width</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%visited</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$h_barrier</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"+\"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"st0\">\"--+\"</span> x <span class=\"re0\">$width</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$v_barrier</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"|\"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"st0\">\"  |\"</span> x <span class=\"re0\">$width</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@output</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$h_barrier</span><span class=\"sy0\">,</span> <span class=\"re0\">$v_barrier</span><span class=\"br0\">)</span> x <span class=\"re0\">$height</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@output</span><span class=\"sy0\">,</span> <span class=\"re0\">$h_barrier</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@dx</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@dy</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> visit <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$visited</span><span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$rand</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span> <span class=\"re0\">$rand</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$rand</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$xx</span><span class=\"sy0\">,</span> <span class=\"re0\">$yy</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dx</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dy</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$visited</span><span class=\"br0\">{</span> <span class=\"re0\">$xx</span><span class=\"sy0\">,</span> <span class=\"re0\">$yy</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$xx</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> <span class=\"re0\">$xx</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$width</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$yy</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> <span class=\"re0\">$yy</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$height</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$row</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dy</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$col</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dx</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$output</span><span class=\"br0\">[</span><span class=\"re0\">$row</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$col</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st_h\">'  '</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a> warnings <span class=\"st_h\">'recursion'</span><span class=\"sy0\">;</span><br/>      visit<span class=\"br0\">(</span> <span class=\"re0\">$xx</span><span class=\"sy0\">,</span> <span class=\"re0\">$yy</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>visit<span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">$width</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">$height</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Here is the maze:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">@output</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">%visited</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@d</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st_h\">'&gt;&gt;'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&lt;&lt;'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'vv'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'^^'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> solve <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$visited</span><span class=\"br0\">{</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$rand</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span> <span class=\"re0\">$rand</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$rand</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$xx</span><span class=\"sy0\">,</span> <span class=\"re0\">$yy</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dx</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dy</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$visited</span><span class=\"br0\">{</span> <span class=\"re0\">$xx</span><span class=\"sy0\">,</span> <span class=\"re0\">$yy</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$xx</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> <span class=\"re0\">$xx</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$width</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$yy</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> <span class=\"re0\">$yy</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$height</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$row</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dy</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$col</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dx</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$output</span><span class=\"br0\">[</span><span class=\"re0\">$row</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$col</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"st0\">\"  \"</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a> warnings <span class=\"st_h\">'recursion'</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> solve<span class=\"br0\">(</span> <span class=\"re0\">$xx</span><span class=\"sy0\">,</span> <span class=\"re0\">$yy</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$output</span><span class=\"br0\">[</span><span class=\"re0\">$row</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$col</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$output</span><span class=\"br0\">[</span><span class=\"re0\">$row</span><span class=\"sy0\">-</span><span class=\"re0\">$dy</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$col</span><span class=\"sy0\">-</span><span class=\"re0\">$dx</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> solve<span class=\"br0\">(</span> <span class=\"re0\">$width</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Here is the solution:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$output</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st_h\">'**'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">@output</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Could not solve!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 130, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> mapping <span class=\"sy0\">=</span> <span class=\"sy0\">:</span>OPEN<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t      <span class=\"sy0\">:</span>N<span class=\"sy0\">&lt;</span> \u2575 <span class=\"sy0\">&gt;,</span><br/>\t\t      <span class=\"sy0\">:</span>E<span class=\"sy0\">&lt;</span> \u2576 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>NE<span class=\"sy0\">&lt;</span> \u2514 <span class=\"sy0\">&gt;,</span><br/>\t\t      <span class=\"sy0\">:</span>S<span class=\"sy0\">&lt;</span> \u2577 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>NS<span class=\"sy0\">&lt;</span> \u2502 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>ES<span class=\"sy0\">&lt;</span> \u250c <span class=\"sy0\">&gt;,</span><br/>\t\t    <span class=\"sy0\">:</span>NES<span class=\"sy0\">&lt;</span> \u251c <span class=\"sy0\">&gt;,</span><br/>\t\t      <span class=\"sy0\">:</span>W<span class=\"sy0\">&lt;</span> \u2574 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>NW<span class=\"sy0\">&lt;</span> \u2518 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>EW<span class=\"sy0\">&lt;</span> \u2500 <span class=\"sy0\">&gt;,</span><br/>\t\t    <span class=\"sy0\">:</span>NEW<span class=\"sy0\">&lt;</span> \u2534 <span class=\"sy0\">&gt;,</span><br/>\t\t     <span class=\"sy0\">:</span>SW<span class=\"sy0\">&lt;</span> \u2510 <span class=\"sy0\">&gt;,</span><br/>\t\t    <span class=\"sy0\">:</span>NSW<span class=\"sy0\">&lt;</span> \u2524 <span class=\"sy0\">&gt;,</span><br/>\t\t    <span class=\"sy0\">:</span>ESW<span class=\"sy0\">&lt;</span> \u252c <span class=\"sy0\">&gt;,</span><br/>\t\t   <span class=\"sy0\">:</span>NESW<span class=\"sy0\">&lt;</span> \u253c <span class=\"sy0\">&gt;,</span><br/>\t\t   <span class=\"sy0\">:</span>TODO<span class=\"sy0\">&lt;</span> <span class=\"kw1\">x</span> <span class=\"sy0\">&gt;,</span><br/>\t          <span class=\"sy0\">:</span>TRIED<span class=\"sy0\">&lt;</span> \u00b7 <span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">enum</span> Sym <span class=\"br0\">(</span>mapping<span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@ch</span> <span class=\"sy0\">=</span> mapping<span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">enum</span> Direction <span class=\"sy0\">&lt;</span>DeadEnd Up Right Down Left<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> gen_maze <span class=\"br0\">(</span> <span class=\"re0\">$X</span><span class=\"sy0\">,</span><br/>               <span class=\"re0\">$Y</span><span class=\"sy0\">,</span><br/>               <span class=\"re0\">$start_x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"re0\">$X</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>               <span class=\"re0\">$start_y</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"re0\">$Y</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@maze</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat ES<span class=\"sy0\">,</span> <span class=\"sy0\">-</span>N<span class=\"sy0\">,</span> <span class=\"br0\">(</span>ESW<span class=\"sy0\">,</span> EW<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> SW <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat <span class=\"br0\">(</span>NS<span class=\"sy0\">,</span> TODO<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span><span class=\"sy0\">,</span> NS <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$Y</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat NES<span class=\"sy0\">,</span> EW<span class=\"sy0\">,</span> <span class=\"br0\">(</span>NESW<span class=\"sy0\">,</span> EW<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> NSW <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat <span class=\"br0\">(</span>NS<span class=\"sy0\">,</span> TODO<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span><span class=\"sy0\">,</span> NS <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@maze</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span> flat NE<span class=\"sy0\">,</span> <span class=\"br0\">(</span>EW<span class=\"sy0\">,</span> NEW<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$X</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>NS<span class=\"sy0\">,</span> NW <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$start_y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$start_x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@stack</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$start_x</span><span class=\"sy0\">,</span> <span class=\"re0\">$start_y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> pick_direction<span class=\"br0\">(</span> <span class=\"re0\">$current</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"re0\">$current</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$current</span> <span class=\"sy0\">=</span> move<span class=\"br0\">(</span> <span class=\"re0\">$dir</span><span class=\"sy0\">,</span> <span class=\"re0\">$current</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">unless</span> <span class=\"re0\">@stack</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">pop</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@maze</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> pick_direction<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">=</span><br/>\t    <span class=\"br0\">(</span>Up    <span class=\"kw1\">if</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Down  <span class=\"kw1\">if</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Left  <span class=\"kw1\">if</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Right <span class=\"kw1\">if</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@neighbors</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"kw1\">or</span> DeadEnd<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> move <span class=\"br0\">(</span><span class=\"re0\">$dir</span><span class=\"sy0\">,</span> <span class=\"re0\">@cur</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@cur</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">given</span> <span class=\"re0\">$dir</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">when</span> Up    <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"sy0\">--</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> E<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">--</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> W<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Down  <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"sy0\">++</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> E<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> W<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Left  <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">--</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> S<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">--</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> N<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Right <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">++</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> OPEN<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> S<span class=\"sy0\">;</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> N<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <br/>\t<span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> display <span class=\"br0\">(</span><span class=\"re0\">@maze</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@maze</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@y</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">@y</span><span class=\"sy0\">.</span><span class=\"me1\">rotor</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">print</span> <span class=\"re0\">@ch</span><span class=\"br0\">[</span><span class=\"kw3\">abs</span> <span class=\"re0\">$w</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"re0\">$c</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"re0\">@ch</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"kw1\">x</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span> <br/>\t    <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">@ch</span><span class=\"br0\">[</span><span class=\"kw3\">abs</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">' '</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">say</span> <span class=\"re0\">@ch</span><span class=\"br0\">[</span><span class=\"re0\">@y</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve <span class=\"br0\">(</span><span class=\"re0\">@maze</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"re0\">@from</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@to</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">@maze</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@from</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$xto</span><span class=\"sy0\">,</span> <span class=\"re0\">$yto</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@to</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@stack</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> drop<span class=\"sy0\">-</span>crumb<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$c</span> <span class=\"br0\">}</span><br/>    drop<span class=\"sy0\">-</span>crumb<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span>N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> pick_direction<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"re0\">$dir</span> <span class=\"br0\">{</span><br/>\t    <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> move<span class=\"br0\">(</span><span class=\"re0\">$dir</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"re0\">@maze</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$xto</span> <span class=\"kw1\">and</span> <span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"re0\">$yto</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>TRIED<span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">pop</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>TRIED<span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">pop</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> pick_direction<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">=</span><br/>\t    <span class=\"br0\">(</span>Up    <span class=\"kw1\">unless</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Down  <span class=\"kw1\">unless</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Left  <span class=\"kw1\">unless</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t    <span class=\"br0\">(</span>Right <span class=\"kw1\">unless</span> <span class=\"re0\">@maze</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@neighbors</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"kw1\">or</span> DeadEnd<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> move <span class=\"br0\">(</span><span class=\"re0\">$dir</span><span class=\"sy0\">,</span> <span class=\"re0\">@cur</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@cur</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">given</span> <span class=\"re0\">$dir</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">when</span> Up    <span class=\"br0\">{</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"br0\">{</span> <span class=\"kw3\">push</span> <span class=\"re0\">@stack</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">--</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> drop<span class=\"sy0\">-</span>crumb <span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span>S<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Down  <span class=\"br0\">{</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"br0\">{</span> <span class=\"kw3\">push</span> <span class=\"re0\">@stack</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> drop<span class=\"sy0\">-</span>crumb <span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span>N<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Left  <span class=\"br0\">{</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"br0\">{</span> <span class=\"kw3\">push</span> <span class=\"re0\">@stack</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">--,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> drop<span class=\"sy0\">-</span>crumb <span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span>E<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> Right <span class=\"br0\">{</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"br0\">{</span> <span class=\"kw3\">push</span> <span class=\"re0\">@stack</span><span class=\"sy0\">,</span> $<span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">++,</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> drop<span class=\"sy0\">-</span>crumb <span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span>W<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <br/>\t<span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>display solve gen_maze<span class=\"br0\">(</span> <span class=\"nu0\">29</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 58, "block": "<pre class=\"text highlighted_source\">constant w = 11, h = 8<br/>\u00a0<br/>sequence wall = join(repeat(\"+\",w+1),\"---\")&amp;\"\\n\",<br/>         cell = join(repeat(\"|\",w+1),\"\u00a0? \")&amp;\"\\n\",<br/>         grid = split(join(repeat(wall,h+1),cell),'\\n')<br/>\u00a0<br/>procedure amaze(integer x, integer y)<br/>    grid[y][x] = ' '                        -- mark cell visited<br/>    sequence p = shuffle({{x-4,y},{x,y+2},{x+4,y},{x,y-2}})<br/>    for i=1 to length(p) do<br/>        integer {nx,ny} = p[i]<br/>        if nx&gt;1 and nx&lt;w*4 and ny&gt;1 and ny&lt;=2*h and grid[ny][nx]='?' then<br/>            integer mx = (x+nx)/2<br/>            grid[(y+ny)/2][mx-1..mx+1] = ' ' -- knock down wall<br/>            amaze(nx,ny)<br/>        end if<br/>    end for<br/>end procedure<br/>\u00a0<br/>integer dx,dy -- door location (in a wall!)<br/>\u00a0<br/>function solve_maze(integer x, y)<br/>    sequence p = {{x-4,y},{x,y+2},{x+4,y},{x,y-2}}<br/>    for d=1 to length(p) do<br/>        integer {nx,ny} = p[d]<br/>        integer {wx,wy} = {(x+nx)/2,(y+ny)/2}<br/>        if grid[wy][wx]=' ' then<br/>            grid[wy][wx] = \"-:-:\"[d]        -- mark path<br/>            if {wx,wy}={dx,dy} then return true end if<br/>            if grid[ny][nx]=' ' then<br/>                grid[ny][nx] = 'o'          -- mark cell<br/>                if solve_maze(nx,ny) then return true end if<br/>                grid[ny][nx] = ' '          -- unmark cell<br/>            end if<br/>            grid[wy][wx] = ' '              -- unmark path<br/>        end if<br/>    end for <br/>    return false<br/>end function<br/>\u00a0<br/>function heads()<br/>    return rand(2)=1 -- toin coss 50:50 true(1)/false(0)<br/>end function<br/>\u00a0<br/>integer {x,y} = {(rand(w)*4)-1,rand(h)*2}<br/>amaze(x,y)<br/>-- mark start pos<br/>grid[y][x] = '*'<br/>-- add a random door (heads=rhs/lhs, tails=top/btm)<br/>if heads() then<br/>    {dy,dx} = {rand(h)*2,heads()*w*4+1}<br/>    grid[dy][dx] = ' '<br/>else<br/>    {dy,dx} = {heads()*h*2+1,rand(w)*4-1}<br/>    grid[dy][dx-1..dx+1] = ' '<br/>end if<br/>{} = solve_maze(x,y)<br/>puts(1,join(grid,'\\n'))</pre>"}, {"lang": "PicoLisp", "loc": 16, "block": "<pre class=\"text highlighted_source\">(de shortestPath (Goal This Maze)<br/>   (let (Path NIL  Best NIL  Dir \" &gt; \")<br/>      (recur (This Path Dir)<br/>         (when (and This (not (: mark)))<br/>            (push 'Path (cons This Dir))<br/>            (if (== Goal This)<br/>               (unless (and Best (&gt;= (length Path) (length Best)))<br/>                  (setq Best Path) )<br/>               (=: mark T)<br/>               (recurse (: west) Path \" &gt; \")<br/>               (recurse (: east) Path \" &lt; \")<br/>               (recurse (: south) Path \" \\^ \")<br/>               (recurse (: north) Path \" v \")<br/>               (=: mark NIL) ) ) )<br/>      (disp Maze 0<br/>         '((Fld) (if (asoq Fld Best) (cdr @) \"   \")) ) ) )</pre>"}, {"lang": "Prolog", "loc": 149, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> cell<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> maze<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> path<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>maze_solve<span class=\"br0\">(</span>Lig<span class=\"sy4\">,</span>Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tretractall<span class=\"br0\">(</span>cell<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tretractall<span class=\"br0\">(</span>maze<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tretractall<span class=\"br0\">(</span>path<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% initialisation of the neighbours of the cells</span><br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span>   forall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> J<span class=\"br0\">)</span><span class=\"sy4\">,</span> assert<span class=\"br0\">(</span>maze<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% creation of the window of the maze</span><br/>\tnew<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Maze'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>Lig<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span>XL <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  <span class=\"nu0\">50</span><span class=\"sy4\">,</span> YL <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\t\tXR <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\t\tnew<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>XL<span class=\"sy4\">,</span> YL<span class=\"sy4\">,</span> XR<span class=\"sy4\">,</span> YL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span>XT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  <span class=\"nu0\">50</span> <span class=\"sy3\">+</span> I <span class=\"sy3\">*</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span> YT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\t\tYB <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\t\tnew<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>XT<span class=\"sy4\">,</span> YT<span class=\"sy4\">,</span> XT<span class=\"sy4\">,</span> YB<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tSX <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span><span class=\"sy4\">,</span><br/>\tSY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> size<span class=\"br0\">(</span>SX<span class=\"sy4\">,</span> SY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tL0 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span>Lig<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tC0 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span>Col<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>cell<span class=\"br0\">(</span>L0<span class=\"sy4\">,</span> C0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>search<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L0<span class=\"sy4\">,</span> C0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% we look for a path from cell(0, 0) to cell(Lig-1, Col-1)</span><br/>\t<span class=\"co1\">% creation of the entrance</span><br/>\terase_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% creation of the exit</span><br/>\tLig1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tCol1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\terase_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> Lig1<span class=\"sy4\">,</span> Col1<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% seraching the path</span><br/>\tassert<span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twalk<span class=\"br0\">(</span>Lig<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tpath<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tdisplay_path<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>walk<span class=\"br0\">(</span>Lig<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tpath<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>L<span class=\"sy4\">,</span> C<span class=\"br0\">]</span> <span class=\"sy5\">|</span> _R<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tL <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tC <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">retract</span></a><span class=\"br0\">(</span>path<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>Lig<span class=\"sy4\">,</span> C<span class=\"br0\">]</span><span class=\"sy5\">|</span>P<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>walk<span class=\"br0\">(</span>Lig<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">retract</span></a><span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>L<span class=\"sy4\">,</span> C<span class=\"br0\">]</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaze<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> Edge<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmember<span class=\"br0\">(</span><span class=\"br0\">[</span>L1<span class=\"sy4\">,</span> C1<span class=\"br0\">]</span><span class=\"sy4\">,</span> Edge<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>member<span class=\"br0\">(</span><span class=\"br0\">[</span>L1<span class=\"sy4\">,</span> C1<span class=\"br0\">]</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>L1<span class=\"sy4\">,</span>C1<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>L<span class=\"sy4\">,</span> C<span class=\"br0\">]</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twalk<span class=\"br0\">(</span>Lig<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>display_path<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>display_path<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>L<span class=\"sy4\">,</span> C<span class=\"br0\">]</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tnew<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> box<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy4\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> fill_pattern<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span><span class=\"sy5\">@</span>default<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tX <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">60</span><span class=\"sy4\">,</span><br/>\tY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">60</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tdisplay_path<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>search<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tDir <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnextcell<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>cell<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span>C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>cur<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span>C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">retract</span></a><span class=\"br0\">(</span>maze<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> Edge<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>maze<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>L1<span class=\"sy4\">,</span> C1<span class=\"br0\">]</span> <span class=\"sy5\">|</span> Edge<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">retract</span></a><span class=\"br0\">(</span>maze<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> C1<span class=\"sy4\">,</span> Edge1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>maze<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> C1<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>L<span class=\"sy4\">,</span> C<span class=\"br0\">]</span> <span class=\"sy5\">|</span> Edge1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\terase_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsearch<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>erase_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   C <span class=\"sy6\">&lt;</span> C1 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> C2 <span class=\"sy6\">=</span> C1<span class=\"sy4\">;</span> C2 <span class=\"sy6\">=</span> C<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tXT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C2  <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tYT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">51</span><span class=\"sy4\">,</span> YR <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>L<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>XT<span class=\"sy4\">,</span> YT<span class=\"sy4\">,</span> XT<span class=\"sy4\">,</span> YR<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> colour<span class=\"sy4\">,</span> white<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>erase_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tXT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  <span class=\"nu0\">51</span> <span class=\"sy3\">+</span> C <span class=\"sy3\">*</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span> XR <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">50</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>C <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   L <span class=\"sy6\">&lt;</span> L1 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> L2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L1<span class=\"sy4\">;</span> L2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L2 <span class=\"sy3\">*</span> <span class=\"nu0\">30</span> <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>XT<span class=\"sy4\">,</span> YT<span class=\"sy4\">,</span> XR<span class=\"sy4\">,</span> YT<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> colour<span class=\"sy4\">,</span> white<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>nextcell<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnext<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>   Dir1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>Dir<span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\t    next<span class=\"br0\">(</span>Dir1<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>   Dir2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>Dir<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\t    next<span class=\"br0\">(</span>Dir2<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>   Dir3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>Dir<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\t    next<span class=\"br0\">(</span>Dir3<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% 0 =&gt; northward</span><br/>next<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> _Lig<span class=\"sy4\">,</span> _Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\tL1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>cell<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% 1 =&gt; rightward</span><br/>next<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> _Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tC <span class=\"sy6\">&lt;</span> Col <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tC1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>cell<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% 2 =&gt; southward</span><br/>next<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> _Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">&lt;</span> Lig <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tL1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>cell<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% 3 =&gt; leftward</span><br/>next<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> _Lig<span class=\"sy4\">,</span> _Col<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tC <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\tC1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>cell<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 110, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">;code from the maze generation task is place here in its entirety before the rest of the code</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> displayMazePath<span class=\"br0\">(</span>Array maze<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, List Path.<span class=\"kw2\">POINT</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> x, y, vWall.s, hWall.s<br/>  <span class=\"kw1\">Protected</span> mazeWidth <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, mazeHeight <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"kw1\">Dim</span> mazeOutput.mazeOutput<span class=\"br0\">(</span>mazeHeight<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"kw1\">Dim</span> mazeRow.mazeOutput<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> pathChars.s <span class=\"sy0\">=</span> <span class=\"st0\">\"@^&gt;v&lt;\"</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> mazeHeight<br/>    makeDisplayMazeRow<span class=\"br0\">(</span>mazeRow<span class=\"br0\">(</span><span class=\"br0\">)</span>, maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, y<span class=\"br0\">)</span>: mazeOutput<span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> mazeRow<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Protected</span> prevPath.<span class=\"kw2\">POINT</span> <span class=\"sy0\">=</span> path<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">While</span> <span class=\"kw2\">NextElement</span><span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      x <span class=\"sy0\">=</span> path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> prevPath<span class=\"sy0\">\\</span>x<br/>      y <span class=\"sy0\">=</span> path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> prevPath<span class=\"sy0\">\\</span>y<br/>      <span class=\"kw1\">Select</span> x<br/>        <span class=\"kw1\">Case</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>: dirTaken <span class=\"sy0\">=</span> #dir_W<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span>: dirTaken <span class=\"sy0\">=</span> #dir_E<br/>        <span class=\"kw1\">Default</span><br/>          <span class=\"kw1\">If</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>            dirTaken <span class=\"sy0\">=</span> #dir_N<br/>          <span class=\"kw1\">Else</span><br/>            dirTaken <span class=\"sy0\">=</span> #dir_S<br/>          <span class=\"kw1\">EndIf</span> <br/>      <span class=\"kw1\">EndSelect</span><br/>      hWall <span class=\"sy0\">=</span> mazeOutput<span class=\"br0\">(</span>prevPath<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span><span class=\"sy0\">\\</span>hWall<br/>      mazeOutput<span class=\"br0\">(</span>prevPath<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span><span class=\"sy0\">\\</span>hWall <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>hWall, prevPath<span class=\"sy0\">\\</span>x <span class=\"sy0\">*</span> #cellDWidth <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>pathChars, dirTaken <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Right</span><span class=\"br0\">(</span>hWall, <span class=\"kw2\">Len</span><span class=\"br0\">(</span>hWall<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>prevPath<span class=\"sy0\">\\</span>x <span class=\"sy0\">*</span> #cellDWidth <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      prevPath <span class=\"sy0\">=</span> path<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Wend</span> <br/>    hWall <span class=\"sy0\">=</span> mazeOutput<span class=\"br0\">(</span>prevPath<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span><span class=\"sy0\">\\</span>hWall<br/>    mazeOutput<span class=\"br0\">(</span>prevPath<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span><span class=\"sy0\">\\</span>hWall <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>hWall, prevPath<span class=\"sy0\">\\</span>x <span class=\"sy0\">*</span> #cellDWidth <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>pathChars, #dir_ID <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Right</span><span class=\"br0\">(</span>hWall, <span class=\"kw2\">Len</span><span class=\"br0\">(</span>hWall<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>prevPath<span class=\"sy0\">\\</span>x <span class=\"sy0\">*</span> #cellDWidth <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> mazeHeight<br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>mazeOutput<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">\\</span>vWall<span class=\"br0\">)</span>: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>mazeOutput<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">\\</span>hWall<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> solveMaze<span class=\"br0\">(</span>Array maze<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"sy0\">*</span>start.<span class=\"kw2\">POINT</span>, <span class=\"sy0\">*</span>finish.<span class=\"kw2\">POINT</span>, List Path.<span class=\"kw2\">POINT</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> mazeWidth <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, mazeHeight <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> visited<span class=\"br0\">(</span>mazeWidth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, mazeHeight <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">;includes padding for easy border detection</span><br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> i<br/>  <span class=\"co1\">;mark outside border as already visited (off limits)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> mazeWidth<br/>    visited<span class=\"br0\">(</span>i, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True: visited<span class=\"br0\">(</span>i, mazeHeight <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> mazeHeight<br/>    visited<span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True: visited<span class=\"br0\">(</span>mazeWidth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> x <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>start<span class=\"sy0\">\\</span>x, y <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>start<span class=\"sy0\">\\</span>y, nextCellDir<br/>  visited<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_ID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, #dir_ID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>\u00a0<br/>  <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    <span class=\"kw1\">If</span> x <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>finish<span class=\"sy0\">\\</span>x <span class=\"kw1\">And</span> y <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>finish<span class=\"sy0\">\\</span>y<br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x: path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y<br/>      <span class=\"kw1\">Break</span> <span class=\"co1\">;success</span><br/>    <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>    nextCellDir <span class=\"sy0\">=</span> #firstDir <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> #firstDir <span class=\"kw1\">To</span> #numDirs<br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> visited<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> maze<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#wall, i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#wall, i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> wallvalue<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> #Null<br/>          nextCellDir <span class=\"sy0\">=</span> i: <span class=\"kw1\">Break</span> <span class=\"co1\">;exit for/next search</span><br/>        <span class=\"kw1\">EndIf</span> <br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Next</span> <br/>\u00a0<br/>    <span class=\"kw1\">If</span> nextCellDir <span class=\"sy0\">&gt;=</span> #firstDir<br/>      visited<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, nextCellDir<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#visited, nextCellDir<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #True<br/>\u00a0<br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x: path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y<br/>\u00a0<br/>      x <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#maze, nextCellDir<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x: y <span class=\"sy0\">+</span> offset<span class=\"br0\">(</span>#maze, nextCellDir<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<br/>    <span class=\"kw1\">ElseIf</span> ListSize<span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      x <span class=\"sy0\">=</span> path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x: y <span class=\"sy0\">=</span> path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<br/>      <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span> <br/>      <span class=\"kw1\">Break</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">ForEver</span><br/>\u00a0<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;demonstration</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.<span class=\"kw2\">POINT</span> start, finish<br/>  start<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span>mazeWidth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>: start<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span>mazeHeight <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  finish<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span>mazeWidth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>: finish<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span>mazeHeight <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> Path.<span class=\"kw2\">POINT</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  solveMaze<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, start, finish, path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Solution found for path between (\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>start<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>start<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\") and (\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>finish<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>finish<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>    displayMazePath<span class=\"br0\">(</span>maze<span class=\"br0\">(</span><span class=\"br0\">)</span>, path<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"No solution found for path between (\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>start<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>start<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\") and (\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>finish<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>finish<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 52, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"co1\"># python 3</span><br/>\u00a0<br/><span class=\"kw1\">def</span> Dijkstra<span class=\"br0\">(</span>Graph<span class=\"sy0\">,</span> source<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<br/>        +   +---+---+<br/>        | 0   1   2 |<br/>        +---+   +   +<br/>        | 3   4 | 5  <br/>        +---+---+---+<br/>\u00a0<br/>        &gt;&gt;&gt; graph = (        # or ones on the diagonal<br/>        ...     (0,1,0,0,0,0,),<br/>        ...     (1,0,1,0,1,0,),<br/>        ...     (0,1,0,0,0,1,),<br/>        ...     (0,0,0,0,1,0,),<br/>        ...     (0,1,0,1,0,0,),<br/>        ...     (0,0,1,0,0,0,),<br/>        ... )<br/>        ...<br/>        &gt;&gt;&gt; Dijkstra(graph, 0)<br/>        ([0, 1, 2, 3, 2, 3], [1e+140, 0, 1, 4, 1, 2])<br/>        &gt;&gt;&gt; display_solution([1e+140, 0, 1, 4, 1, 2])<br/>        5&lt;2&lt;1&lt;0<br/>    '''</span><br/>    <span class=\"co1\"># Graph[u][v] is the weight from u to v (however 0 means infinity)</span><br/>    infinity <span class=\"sy0\">=</span> <span class=\"kw2\">float</span><span class=\"br0\">(</span><span class=\"st0\">'infinity'</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>graph<span class=\"br0\">)</span><br/>    dist <span class=\"sy0\">=</span> <span class=\"br0\">[</span>infinity<span class=\"br0\">]</span>*n   <span class=\"co1\"># Unknown distance function from source to v</span><br/>    previous <span class=\"sy0\">=</span> <span class=\"br0\">[</span>infinity<span class=\"br0\">]</span>*n <span class=\"co1\"># Previous node in optimal path from source</span><br/>    dist<span class=\"br0\">[</span>source<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>        <span class=\"co1\"># Distance from source to source</span><br/>    Q <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\"># All nodes in the graph are unoptimized - thus are in Q</span><br/>    <span class=\"kw1\">while</span> Q:           <span class=\"co1\"># The main loop</span><br/>        u <span class=\"sy0\">=</span> <span class=\"kw2\">min</span><span class=\"br0\">(</span>Q<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> n:dist<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span>                 <span class=\"co1\"># vertex in Q with smallest dist[]</span><br/>        Q.<span class=\"me1\">remove</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> dist<span class=\"br0\">[</span>u<span class=\"br0\">]</span> <span class=\"sy0\">==</span> infinity:<br/>            <span class=\"kw1\">break</span> <span class=\"co1\"># all remaining vertices are inaccessible from source</span><br/>        <span class=\"kw1\">for</span> v <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:               <span class=\"co1\"># each neighbor v of u</span><br/>            <span class=\"kw1\">if</span> Graph<span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>v <span class=\"kw1\">in</span> Q<span class=\"br0\">)</span>: <span class=\"co1\"># where v has not yet been visited</span><br/>                alt <span class=\"sy0\">=</span> dist<span class=\"br0\">[</span>u<span class=\"br0\">]</span> + Graph<span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">]</span><br/>                <span class=\"kw1\">if</span> alt <span class=\"sy0\">&lt;</span> dist<span class=\"br0\">[</span>v<span class=\"br0\">]</span>:       <span class=\"co1\"># Relax (u,v,a)</span><br/>                    dist<span class=\"br0\">[</span>v<span class=\"br0\">]</span> <span class=\"sy0\">=</span> alt<br/>                    previous<span class=\"br0\">[</span>v<span class=\"br0\">]</span> <span class=\"sy0\">=</span> u<br/>    <span class=\"kw1\">return</span> dist<span class=\"sy0\">,</span>previous<br/>\u00a0<br/><span class=\"kw1\">def</span> display_solution<span class=\"br0\">(</span>predecessor<span class=\"br0\">)</span>:<br/>    cell <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>predecessor<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> cell:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>cell<span class=\"sy0\">,</span>end<span class=\"sy0\">=</span><span class=\"st0\">'&lt;'</span><span class=\"br0\">)</span><br/>        cell <span class=\"sy0\">=</span> predecessor<span class=\"br0\">[</span>cell<span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>;; Returns a path connecting two given cells in the maze<br/>;; find-path\u00a0:: Maze Cell Cell -&gt; (Listof Cell)<br/>(define (find-path m p1 p2)<br/>  (match-define (maze N M tbl) m)<br/>  (define (alternatives p prev) (remove prev (connections tbl p)))<br/>  (define (dead-end? p prev) (empty? (alternatives p prev)))<br/>  (define ((next-turn route) p)<br/>    (define prev (car route))<br/>    (cond<br/>      [(equal? p p2) (cons p2 route)]<br/>      [(dead-end? p prev) '()]<br/>      [else (append-map (next-turn (cons p route)) <br/>                        (alternatives p prev))]))<br/>  (reverse <br/>   (append-map (next-turn (list p1)) <br/>               (alternatives p1 (list p1)))))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 75, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Maze<br/>  <span class=\"co1\"># Solve via breadth-first algorithm.</span><br/>  <span class=\"co1\"># Each queue entry is a path, that is list of coordinates with the</span><br/>  <span class=\"co1\"># last coordinate being the one that shall be visited next.</span><br/>  <span class=\"kw1\">def</span> solve<br/>\u00a0<br/>    <span class=\"co1\"># Clean up.</span><br/>    reset_visiting_state<br/>\u00a0<br/>    <span class=\"co1\"># Enqueue start position.</span><br/>    <span class=\"re1\">@queue</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    enqueue_cell<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"re1\">@start_x</span>, <span class=\"re1\">@start_y</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># Loop as long as there are cells to visit and no solution has</span><br/>    <span class=\"co1\"># been found yet.</span><br/>    path = <span class=\"kw2\">nil</span><br/>    <span class=\"kw1\">until</span> path <span class=\"sy0\">||</span> <span class=\"re1\">@queue</span>.<span class=\"me1\">empty</span>?<br/>      path = solve_visit_cell<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> path<br/>      <span class=\"co1\"># Mark the cells that make up the shortest path.</span><br/>      <span class=\"kw1\">for</span> x, y <span class=\"kw1\">in</span> path<br/>        <span class=\"re1\">@path</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"No solution found?!\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  private<br/>\u00a0<br/>  <span class=\"co1\"># Maze solving visiting method.</span><br/>  <span class=\"kw1\">def</span> solve_visit_cell<br/>    <span class=\"co1\"># Get the next path.</span><br/>    path = <span class=\"re1\">@queue</span>.<span class=\"me1\">shift</span><br/>    <span class=\"co1\"># The cell to visit is the last entry in the path.</span><br/>    x, y = path.<span class=\"me1\">last</span><br/>\u00a0<br/>    <span class=\"co1\"># Have we reached the end yet?</span><br/>    <span class=\"kw2\">return</span> path  <span class=\"kw1\">if</span> x == <span class=\"re1\">@end_x</span> <span class=\"sy0\">&amp;&amp;</span> y == <span class=\"re1\">@end_y</span><br/>\u00a0<br/>    <span class=\"co1\"># Mark cell as visited.</span><br/>    <span class=\"re1\">@visited</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> dx, dy <span class=\"kw1\">in</span> DIRECTIONS<br/>      <span class=\"kw1\">if</span> dx.<span class=\"me1\">nonzero</span>?<br/>        <span class=\"co1\"># Left / Right</span><br/>        new_x = x <span class=\"sy0\">+</span> dx<br/>        <span class=\"kw1\">if</span> move_valid?<span class=\"br0\">(</span>new_x, y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0<a class=\"__cf_email__\" data-cfemail=\"113051677463657872707d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_walls<span class=\"br0\">[</span> <span class=\"br0\">[</span>x, new_x<span class=\"br0\">]</span>.<span class=\"me1\">min</span> <span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><br/>          enqueue_cell<span class=\"br0\">(</span>path, new_x, y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"co1\"># Top / Bottom</span><br/>        new_y = y <span class=\"sy0\">+</span> dy<br/>        <span class=\"kw1\">if</span> move_valid?<span class=\"br0\">(</span>x, new_y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0<a class=\"__cf_email__\" data-cfemail=\"7c5d3c14130e15061312081d10\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_walls<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"br0\">[</span>y, new_y<span class=\"br0\">]</span>.<span class=\"me1\">min</span> <span class=\"br0\">]</span><br/>          enqueue_cell<span class=\"br0\">(</span>path, x, new_y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw2\">nil</span>         <span class=\"co1\"># No solution yet.</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Enqueue a new coordinate to visit.</span><br/>  <span class=\"kw1\">def</span> enqueue_cell<span class=\"br0\">(</span>path, x, y<span class=\"br0\">)</span><br/>    <span class=\"co1\"># Add new coordinates to the current path and enqueue the new path.</span><br/>    <span class=\"re1\">@queue</span> <span class=\"sy0\">&lt;&lt;</span> path <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x, y<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration:</span><br/>maze = Maze.<span class=\"me1\">new</span> <span class=\"nu0\">20</span>, <span class=\"nu0\">10</span><br/>maze.<span class=\"me1\">solve</span><br/>maze.<span class=\"kw3\">print</span></pre>"}, {"lang": "Tcl", "loc": 56, "block": "<pre class=\"tcl highlighted_source\">oo::<span class=\"me1\">define</span> maze <span class=\"br0\">{</span><br/>    <span class=\"kw1\">method</span> solve <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\">### Initialization of visited matrix and location/path queue</span><br/>\t<span class=\"kw1\">set</span> visited <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$x</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$y</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> queue <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">### Loop to do the searching ###</span><br/>\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t    <span class=\"co1\"># Check for running out of path; an error in maze construction</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$queue</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">error</span> <span class=\"st0\">\"cannot reach finish\"</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"co1\"># Visit the next square from the queue</span><br/>\t    <span class=\"kw1\">set</span> queue <span class=\"br0\">[</span>lassign <span class=\"re0\">$queue</span> cx cy path<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$visited</span> <span class=\"re0\">$cx</span> <span class=\"re0\">$cy</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw2\">lset</span> visited <span class=\"re0\">$cx</span> <span class=\"re0\">$cy</span> <span class=\"nu0\">1</span><br/>\t    <span class=\"kw2\">lappend</span> path <span class=\"re0\">$cx</span> <span class=\"re0\">$cy</span><br/>\t    <span class=\"co1\"># Check for reaching the goal</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$cx</span> == <span class=\"re0\">$x</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$cy</span> == <span class=\"re0\">$y</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>\t    <span class=\"co1\"># Add the square in each direction to the queue if a move there is legal</span><br/>\t    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dx dy<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> nx <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$cx</span> + <span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> ny <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$cy</span> + <span class=\"re0\">$dy</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"re0\">$nx</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$nx</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$ny</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$ny</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$y</span><br/>\t\t    <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$dx</span> <span class=\"sy0\">&amp;&amp;</span> idx<span class=\"br0\">(</span><span class=\"re0\">$verti</span>, min<span class=\"br0\">(</span><span class=\"re0\">$cx</span>,<span class=\"re0\">$nx</span><span class=\"br0\">)</span>, <span class=\"re0\">$cy</span><span class=\"br0\">)</span> ||<br/>\t\t\t<span class=\"re0\">$dy</span> <span class=\"sy0\">&amp;&amp;</span> idx<span class=\"br0\">(</span><span class=\"re0\">$horiz</span>, <span class=\"re0\">$cx</span>, min<span class=\"br0\">(</span><span class=\"re0\">$cy</span>,<span class=\"re0\">$ny</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lappend</span> queue <span class=\"re0\">$nx</span> <span class=\"re0\">$ny</span> <span class=\"re0\">$path</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">### Loop to set up the path rendering ###</span><br/>\t<span class=\"co1\"># (-2,-2) is just a marker that isn't next to the maze at all, so</span><br/>\t<span class=\"co1\"># guaranteeing the use of the last 'else' clause</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>cx cy<span class=\"br0\">}</span> <span class=\"re0\">$path</span> <span class=\"br0\">{</span>nx ny<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$path</span> <span class=\"nu0\">2</span> end<span class=\"br0\">]</span> -<span class=\"nu0\">2</span> -<span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$nx</span>-<span class=\"re0\">$cx</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lset</span> content <span class=\"re0\">$cx</span> <span class=\"re0\">$cy</span> <span class=\"st0\">\"v\"</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$nx</span>-<span class=\"re0\">$cx</span> == -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lset</span> content <span class=\"re0\">$cx</span> <span class=\"re0\">$cy</span> <span class=\"st0\">\"^\"</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$ny</span>-<span class=\"re0\">$cy</span> == -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lset</span> content <span class=\"re0\">$cx</span> <span class=\"re0\">$cy</span> <span class=\"st0\">\"&lt;\"</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lset</span> content <span class=\"re0\">$cx</span> <span class=\"re0\">$cy</span> <span class=\"st0\">\"&gt;\"</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">### Return the path ###</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$path</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Do the solution (we ignore the returned path here...)</span><br/>m solve<br/><span class=\"co1\"># Print it out</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>m view<span class=\"br0\">]</span></pre>"}, {"lang": "zkl", "loc": 43, "block": "<pre class=\"text highlighted_source\">ver,hor:=make_maze();  // see above link for this code<br/>\u00a0<br/>fcn munge(a,b){ String(a[0,2],b,a[3,*]) } // \"+---\" --&gt; \"+-*-\"<br/>\u00a0<br/>fcn solveMaze(ver,hor, a,b, u,v, w,h){<br/>   if (a==u and b==v) return(True);<br/>\u00a0<br/>   sh:=hor[b][a]; sv:=ver[b][a];<br/>   hor[b][a]=munge(sh,\"*\"); ver[b][a]=munge(sv,\"*\");   // drop breadcrumb<br/>\u00a0<br/>   foreach dx,dy in (T( T(0,-1),T(1,0),T(0,1),T(-1,0) )){<br/>      x:=a+dx; y:=b+dy; hy:=hor[y]; vy:=ver[y];<br/>      if ( (0&lt;=x&lt;w) and (0&lt;=y&lt;h) and // (x,y) in bounds<br/>\t   (dx==0 or (dx== 1 and vy[x]==\"    \") or   // horizontal<br/>\t\t     (dx==-1 and vy[a][0]==\" \" and vy[x][2]!=\"*\")) and<br/>\t   (dy==0 or (dy== 1 and hy[x]==\"+   \") or   // vertical<br/>\t\t     (dy==-1 and hor[b][a][1]==\" \" and hy[x][2]!=\"*\"))<br/>         )<br/>      {<br/>\t sh:=hy[x];<br/>\t if(solveMaze(ver,hor, x,y, u,v, w,h)){<br/>\t    hy[x]=sh; // remove splat on wall but not floor while backing out<br/>\t    return(True); <br/>\t }<br/>      }<br/>   }<br/>   hor[b][a]=sh; ver[b][a]=sv;  // pick up breadcrumb when backtracking<br/>   return(False);<br/>}<br/>\u00a0<br/>w:=(hor[0].len() - 1); h:=(hor.len() - 1);<br/>startx:=(0).random(w); starty:=(0).random(h);<br/>endx \u00a0:=(0).random(w); endy \u00a0:=(0).random(h);<br/>\u00a0<br/>sh:=hor[starty][startx];<br/>if (not solveMaze(ver,hor, startx,starty, endx,endy, w,h))<br/>   println(\"No solution path found.\");<br/>else{<br/>   hor[starty][startx]=sh;<br/>   ver[starty][startx]=munge(ver[starty][startx],\"S\");<br/>   ver[endy][endx]    =munge(ver[endy][endx],\"E\");<br/>   foreach a,b in (hor.zip(ver)) { println(a.concat(),\"\\n\",b.concat()) }<br/>}</pre>"}]}