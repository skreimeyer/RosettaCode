{"task": "Langton%27s_ant", "blocks": [{"lang": "Ada", "loc": 57, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Langtons_Ant <span class=\"kw1\">is</span><br/>\u00a0<br/>   Size: <span class=\"kw3\">constant</span> Positive\u00a0:= <span class=\"nu0\">100</span>; <span class=\"co1\">-- change this to extend the playground</span><br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Step <span class=\"kw1\">is</span> Integer <span class=\"kw3\">range</span> -<span class=\"nu0\">1</span> .. +<span class=\"nu0\">1</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Right<span class=\"br0\">(</span>N, W: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Step<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Tmp: Step\u00a0:= W;<br/>   <span class=\"kw1\">begin</span><br/>      W\u00a0:= - N;<br/>      N\u00a0:= Tmp;<br/>   <span class=\"kw1\">end</span> Right;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Left<span class=\"br0\">(</span>N, W: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Step<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span> <span class=\"kw1\">loop</span><br/>         Right<span class=\"br0\">(</span>N, W<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Left;<br/>\u00a0<br/>   Color_Character: <span class=\"kw3\">array</span><span class=\"br0\">(</span>Boolean<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Character\u00a0:=<br/>     <span class=\"br0\">(</span>False =&gt; ' ', True =&gt; '#'<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Is_Black: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Size</span>, <span class=\"nu0\">1</span> .. <span class=\"me1\">Size</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean\u00a0:=<br/>     <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; False<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- initially, the world is white;</span><br/>\u00a0<br/>   Ant_X, Ant_Y: Natural\u00a0:= Size/<span class=\"nu0\">2</span>; <span class=\"co1\">-- Position of Ant;</span><br/>   Ant_North: Step\u00a0:= <span class=\"nu0\">1</span>; Ant_West: Step\u00a0:= <span class=\"nu0\">0</span>; <span class=\"co1\">-- initially, Ant looks northward</span><br/>\u00a0<br/>   Iteration: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">loop</span> <span class=\"co1\">-- iterate the loop until an exception is raised</span><br/>      <span class=\"kw1\">if</span> Is_Black<span class=\"br0\">(</span>Ant_X, Ant_Y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Left<span class=\"br0\">(</span>Ant_North, Ant_West<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Right<span class=\"br0\">(</span>Ant_North, Ant_West<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Is_Black<span class=\"br0\">(</span>Ant_X, Ant_Y<span class=\"br0\">)</span>\u00a0:= <span class=\"kw2\">not</span> Is_Black<span class=\"br0\">(</span>Ant_X, Ant_Y<span class=\"br0\">)</span>;<br/>      Ant_X\u00a0:= Ant_X - Ant_North; <span class=\"co1\">-- this may raise an exception</span><br/>      Ant_Y\u00a0:= Ant_Y - Ant_West;  <span class=\"co1\">-- this may raise an exception</span><br/>      Iteration\u00a0:= Iteration + <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/><span class=\"kw1\">exception</span><br/>   <span class=\"kw3\">when</span> Constraint_Error =&gt; <span class=\"co1\">-- Ant has left its playground ... now output</span><br/>      <span class=\"kw1\">for</span> X <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Size</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> Y <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Size</span> <span class=\"kw1\">loop</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Color_Character<span class=\"br0\">(</span>Is_Black<span class=\"br0\">(</span>X, Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"# Iteration:\"</span> &amp; Integer'Image<span class=\"br0\">(</span>Iteration<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Langtons_Ant;<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 51, "block": "<pre class=\"text highlighted_source\">integer<br/>is_white(list map, integer x, integer y)<br/>{<br/>    integer p, w;<br/>    data b;<br/>\u00a0<br/>    b = map[y];<br/>    w = b[x &gt;&gt; 3];<br/>    p = 1 &lt;&lt; (7 - (x &amp; 7));<br/>    b[x &gt;&gt; 3] = w ^ p;<br/>\u00a0<br/>   \u00a0!(w &amp; p);<br/>}<br/>\u00a0<br/>void<br/>ant(integer x, integer y, integer d, list map)<br/>{<br/>    while (-1 &lt; x &amp;&amp; x &lt; 100 &amp;&amp; -1 &lt; y &amp;&amp; y &lt; 100) {<br/>        d += is_white(map, x, y)\u00a0? 3\u00a0: 1;<br/>        d &amp;= 3;<br/>\u00a0<br/>        if (d &amp; 1) {<br/>            y += (d &amp; 2) - 1;<br/>        } else {<br/>            x += 1 - (d &amp; 2);<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    integer i;<br/>    file f;<br/>    list l;<br/>\u00a0<br/>    i = 100;<br/>    while (i) {<br/>        i -= 1;<br/>        l_n_data(l, -1).run(13, 0);<br/>    }<br/>\u00a0<br/>    ant(50, 50, 2, l);<br/>\u00a0<br/>    f.create(\"ant.pbm\", 00644);<br/>\u00a0<br/>    f.text(\"P4\\n100 100\\n\");<br/>    l.ucall(f_data, 1, f);<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 67, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># size of board for Langton's ant #</span><br/>    <span class=\"kw3\">INT</span> max board <span class=\"sy1\">=</span> 100<span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> max board<span class=\"sy1\">,</span> 1 <span class=\"sy1\">:</span> max board <span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> board<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># start with the board all white #</span><br/>    <span class=\"kw3\">CHAR</span> white <span class=\"sy1\">=</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> black <span class=\"sy1\">=</span> <span class=\"st0\">\"#\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> r <span class=\"kw2\">TO</span> 1 <span class=\"kw8\">UPB</span> board <span class=\"kw2\">DO</span> <span class=\"kw2\">FOR</span> c <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> board <span class=\"kw2\">DO</span> board<span class=\"br0\">[</span> r<span class=\"sy1\">,</span> c <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> white <span class=\"kw2\">OD</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># possible ant directions #</span><br/>    <span class=\"kw3\">INT</span> head left <span class=\"sy1\">=</span> 0<span class=\"sy1\">,</span> head up <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> head right <span class=\"sy1\">=</span> 2<span class=\"sy1\">,</span> head down <span class=\"sy1\">=</span> 3<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns the new direction if we turn left from curr direction #</span><br/>    <span class=\"kw4\">OP</span> LEFT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> curr direction <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>       <span class=\"kw2\">IF</span>   curr direction <span class=\"sy1\">=</span> head left  <span class=\"kw2\">THEN</span> head down<br/>       <span class=\"kw2\">ELIF</span> curr direction <span class=\"sy1\">=</span> head down  <span class=\"kw2\">THEN</span> head right<br/>       <span class=\"kw2\">ELIF</span> curr direction <span class=\"sy1\">=</span> head right <span class=\"kw2\">THEN</span> head up<br/>       <span class=\"kw2\">ELSE</span>                                  head left<br/>       <span class=\"kw2\">FI</span> <span class=\"sy1\">;</span> <span class=\"coMULTI\"># LEFT #</span><br/>    <span class=\"coMULTI\"># returns the new direction if we turn right from curr direction #</span><br/>    <span class=\"kw4\">OP</span> RIGHT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> curr direction <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>       <span class=\"kw2\">IF</span>   curr direction <span class=\"sy1\">=</span> head left  <span class=\"kw2\">THEN</span> head up<br/>       <span class=\"kw2\">ELIF</span> curr direction <span class=\"sy1\">=</span> head up    <span class=\"kw2\">THEN</span> head right<br/>       <span class=\"kw2\">ELIF</span> curr direction <span class=\"sy1\">=</span> head right <span class=\"kw2\">THEN</span> head down<br/>       <span class=\"kw2\">ELSE</span>                                  head left<br/>       <span class=\"kw2\">FI</span> <span class=\"sy1\">;</span> <span class=\"coMULTI\"># RIGHT #</span><br/>    <span class=\"coMULTI\"># move the ant until it leaves the board #</span><br/>    <span class=\"kw3\">INT</span> ant row <span class=\"sy1\">:=</span> max board <span class=\"kw12\">OVER</span> 2<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> ant col <span class=\"sy1\">:=</span> max board <span class=\"kw12\">OVER</span> 2<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> ant direction <span class=\"sy1\">:=</span> head up<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> max row <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> max col <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> min row <span class=\"sy1\">:=</span> max board<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> min col <span class=\"sy1\">:=</span> max board<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> moves <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> ant row <span class=\"sy1\">&gt;=</span> 1 <span class=\"kw8\">LWB</span> board <span class=\"kw16\">AND</span> ant row <span class=\"sy1\">&lt;=</span> 1 <span class=\"kw8\">UPB</span> board<br/>      <span class=\"kw16\">AND</span> ant col <span class=\"sy1\">&gt;=</span> 2 <span class=\"kw8\">LWB</span> board <span class=\"kw16\">AND</span> ant col <span class=\"sy1\">&lt;=</span> 2 <span class=\"kw8\">UPB</span> board<br/>    <span class=\"kw2\">DO</span><br/>        moves <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> ant row <span class=\"sy1\">&gt;</span> max row <span class=\"kw2\">THEN</span> max row <span class=\"sy1\">:=</span> ant row <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> ant col <span class=\"sy1\">&gt;</span> max col <span class=\"kw2\">THEN</span> max col <span class=\"sy1\">:=</span> ant col <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> ant row <span class=\"sy1\">&lt;</span> min row <span class=\"kw2\">THEN</span> min row <span class=\"sy1\">:=</span> ant row <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> ant col <span class=\"sy1\">&lt;</span> min col <span class=\"kw2\">THEN</span> min col <span class=\"sy1\">:=</span> ant col <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> board<span class=\"br0\">[</span> ant row<span class=\"sy1\">,</span> ant col <span class=\"br0\">]</span> <span class=\"sy1\">=</span> white <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># ant turns right on a white square #</span><br/>            ant direction <span class=\"sy1\">:=</span> RIGHT ant direction<span class=\"sy1\">;</span><br/>            board<span class=\"br0\">[</span> ant row<span class=\"sy1\">,</span> ant col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> black<br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"coMULTI\"># ant turns left on a black square #</span><br/>            ant direction <span class=\"sy1\">:=</span>  LEFT ant direction<span class=\"sy1\">;</span><br/>            board<span class=\"br0\">[</span> ant row<span class=\"sy1\">,</span> ant col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> white<br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># move the ant #</span><br/>        <span class=\"kw2\">IF</span>     ant direction <span class=\"sy1\">=</span> head up    <span class=\"kw2\">THEN</span> ant row <span class=\"sy1\">-:=</span> 1<br/>        <span class=\"kw2\">ELIF</span>   ant direction <span class=\"sy1\">=</span> head down  <span class=\"kw2\">THEN</span> ant row <span class=\"sy1\">+:=</span> 1<br/>        <span class=\"kw2\">ELIF</span>   ant direction <span class=\"sy1\">=</span> head left  <span class=\"kw2\">THEN</span> ant col <span class=\"sy1\">-:=</span> 1<br/>        <span class=\"kw2\">ELSE</span> <span class=\"coMULTI\"># ant direction = head right #</span>    ant col <span class=\"sy1\">+:=</span> 1<br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># show resultant position #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"After \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> moves<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" moves.\"</span><br/>           <span class=\"sy1\">,</span> <span class=\"st0\">\" Showing rows \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> min row<span class=\"sy1\">,</span>0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" to \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max row<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"st0\">\" columns \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> min col<span class=\"sy1\">,</span>0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" to \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max col<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>           <span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> r <span class=\"kw2\">FROM</span> min row <span class=\"kw2\">TO</span> max row <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> board<span class=\"br0\">[</span> r<span class=\"sy1\">,</span> min col <span class=\"sy1\">:</span> max col <span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AutoHotkey", "loc": 56, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"co1\">; Directions</span><br/>Directions <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>: <span class=\"st0\">\"North\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>: <span class=\"st0\">\"East\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>: <span class=\"st0\">\"South\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span>: <span class=\"st0\">\"West\"</span><span class=\"br0\">}</span><br/><span class=\"co1\">; Initialize the plane (set all cells to white)</span><br/>White <span class=\"sy0\">:=</span> 0xFFFFFF<br/>Plane <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>PW <span class=\"sy0\">:=</span> PH <span class=\"sy0\">:=</span> <span class=\"nu0\">100</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% PH <span class=\"br0\">{</span><br/>    I <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% PW<br/>        Plane<span class=\"br0\">[</span>I<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> White<br/><span class=\"br0\">}</span><br/><span class=\"co1\">; Let it run</span><br/>DI <span class=\"sy0\">:=</span> D <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"co1\">; initial direction</span><br/>X <span class=\"sy0\">:=</span> Y <span class=\"sy0\">:=</span> <span class=\"nu0\">50</span> <span class=\"co1\">; initial coordinates</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>X <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>X <span class=\"sy0\">&lt;=</span> PW<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Y <span class=\"sy0\">&lt;=</span> PH<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    D <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>D <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Plane<span class=\"br0\">[</span>X<span class=\"sy0\">,</span> Y<span class=\"br0\">]</span> <span class=\"sy0\">^=</span> White<span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>D <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        X <span class=\"sy0\">+=</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>D <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>D <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        Y <span class=\"sy0\">+=</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>D <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>D <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">; Show the result</span><br/>HBM <span class=\"sy0\">:=</span> CreateDIB<span class=\"br0\">(</span>Plane<span class=\"sy0\">,</span> PW<span class=\"sy0\">,</span> PH<span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Margin\"><span class=\"kw7\">Margin</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x0 y0 w20 h440 Center 0x200<span class=\"sy0\">,</span> W<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x20 y0 w400 h20 Center 0x200<span class=\"sy0\">,</span> N<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Picture\"><span class=\"kw8\">Picture</span></a><span class=\"sy0\">,</span> x20 y20 w400 h400 0x4E hwndHPIC <span class=\"co1\">; SS_REALSIZECONTROL = 0x40 | SS_BITMAP = 0xE</span><br/><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"User32.dll\\SendMessage\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> HPIC<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> 0x172<span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> HBM<span class=\"br0\">)</span> <span class=\"co1\">; STM_SETIMAGE = 0x172</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> xp<span class=\"sy0\">+</span><span class=\"nu0\">5</span> yp h20 0x200 BackgroundTrans<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Initial direction: \"</span> <span class=\"sy0\">.</span> Directions<span class=\"br0\">[</span>DI<span class=\"br0\">]</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x20 y420 w400 h20 Center 0x200<span class=\"sy0\">,</span> S<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> x420 y0 w20 h440 Center 0x200<span class=\"sy0\">,</span> E<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> Langton's ant <span class=\"br0\">(</span><span class=\"re0\">%PW%</span>x<span class=\"re0\">%PH%</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/>CreateDIB<span class=\"br0\">(</span>PixelArray<span class=\"sy0\">,</span> PAW<span class=\"sy0\">,</span> PAH<span class=\"sy0\">,</span> BMW <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> BMH <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> Gradient <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; SKAN, 01-Apr-2014 / array version by just me</span><br/>    SLL <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>PAW <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>PAW <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>BMBITS<span class=\"sy0\">,</span> SLL <span class=\"sy0\">*</span> PAH<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    P <span class=\"sy0\">:=</span> <span class=\"sy0\">&amp;</span>BMBITS<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% PAH <span class=\"br0\">{</span><br/>        R <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% PAW<br/>            P <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Numput</span></a><span class=\"br0\">(</span>PixelArray<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span> P <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        P <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>PAW <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    HBM <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Gdi32.dll\\CreateBitmap\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> PAW<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> PAH<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UPtr\"</span><span class=\"br0\">)</span><br/>    HBM <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"User32.dll\\CopyImage\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> HBM<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> 0x2008<span class=\"sy0\">,</span> <span class=\"st0\">\"UPtr\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"Gdi32.dll\\SetBitmapBits\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> HBM<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> SLL <span class=\"sy0\">*</span> PAH<span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>BMBITS<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!Gradient<span class=\"br0\">)</span><br/>        HBM <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"User32.dll\\CopyImage\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> HBM<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UPtr\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"User32.dll\\CopyImage\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> HBM<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> BMW<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> BMH<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> 0x200C<span class=\"sy0\">,</span> <span class=\"st0\">\"UPtr\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"co1\">; http://ahkscript.org/boards/viewtopic.php?f=6&amp;t=3203</span></pre>"}, {"lang": "AutoIt", "loc": 78, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$iCountMax</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100000</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$iDelayStep</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>  <span class=\"co0\">; stop between steps in msec</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$aDirection</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> _ <span class=\"co0\">; [ direction 0-3 ][ left change x, y, right change x, y ]</span><br/><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> _   <span class=\"co0\">; == direction 0</span><br/><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> _   <span class=\"co0\">; == direction 1</span><br/><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> _   <span class=\"co0\">; == direction 2</span><br/><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>     <span class=\"co0\">; == direction 3</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$hGui</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICreate.htm\"><span class=\"kw3\">GUICreate</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Langton's ant\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUISetBkColor.htm\"><span class=\"kw3\">GUISetBkColor</span></a><span class=\"br0\">(</span>0xFFFFFF<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">99</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">99</span><br/>\t\t<span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateLabel.htm\"><span class=\"kw3\">GUICtrlCreateLabel</span></a><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetColor.htm\"><span class=\"kw3\">GUICtrlSetColor</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> 0xFF0000<span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUISetState.htm\"><span class=\"kw3\">GUISetState</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"nu0\">49</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">49</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Do</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/Sleep.htm\"><span class=\"kw3\">Sleep</span></a><span class=\"br0\">(</span><span class=\"re0\">$iDelayStep</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Until</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> _SetAnt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Do</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Until</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUIGetMsg.htm\"><span class=\"kw3\">GUIGetMsg</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _SetAnt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> Static <span class=\"re0\">$iRowLast</span> <span class=\"sy0\">=</span> <span class=\"nu0\">49</span><span class=\"sy0\">,</span> <span class=\"re0\">$iColLast</span> <span class=\"sy0\">=</span> <span class=\"nu0\">49</span><span class=\"sy0\">,</span> <span class=\"re0\">$iCount</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> Static <span class=\"re0\">$aCol</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>0xFFFFFF<span class=\"sy0\">,</span>0x000000<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$iDirection</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iRow</span><span class=\"sy0\">,</span> <span class=\"re0\">$iCol</span><span class=\"sy0\">,</span> <span class=\"re0\">$fRight</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">False</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iCount</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iCountMax</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"co0\">; == get current color</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iLastColor</span> <span class=\"sy0\">=</span> <span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"re0\">$iRowLast</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$iColLast</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t<span class=\"co0\">; == go to left/right</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iLastColor</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$fRight</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">True</span></a><br/>\u00a0<br/>\t<span class=\"co0\">; == set the ant to the next field</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$indexX</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$indexY</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$fRight</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<span class=\"re0\">$indexX</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>\t\t<span class=\"re0\">$indexY</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t<span class=\"re0\">$iRow</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iRowLast</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$aDirection</span><span class=\"br0\">[</span><span class=\"re0\">$iDirection</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$indexX</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$iCol</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iColLast</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$aDirection</span><span class=\"br0\">[</span><span class=\"re0\">$iDirection</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$indexY</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iRow</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Or</span></a> <span class=\"re0\">$iRow</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">99</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Or</span></a> <span class=\"re0\">$iCol</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Or</span></a> <span class=\"re0\">$iCol</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">99</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"re0\">$iRowLast</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$iColLast</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"re0\">$iRow</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$iCol</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co0\">; == direction for next step</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$fRight</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<span class=\"re0\">$iDirection</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iDirection</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$iDirection</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t<span class=\"re0\">$iDirection</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iDirection</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$iDirection</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\u00a0<br/>\t<span class=\"co0\">; == change the color of the current field</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetBkColor.htm\"><span class=\"kw3\">GUICtrlSetBkColor</span></a><span class=\"br0\">(</span><span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"re0\">$iRowLast</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$iColLast</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$aCol</span><span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> <span class=\"re0\">$iLastColor</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$aFields</span><span class=\"br0\">[</span><span class=\"re0\">$iRowLast</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$iColLast</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> <span class=\"re0\">$iLastColor</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span><br/>\u00a0<br/>\t<span class=\"re0\">$iRowLast</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iRow</span><br/>\t<span class=\"re0\">$iColLast</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iCol</span><br/>\t<span class=\"re0\">$iCount</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/WinSetTitle.htm\"><span class=\"kw3\">WinSetTitle</span></a><span class=\"br0\">(</span><span class=\"re0\">$hGui</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Langton's ant      [ step: \"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringFormat.htm\"><span class=\"kw3\">StringFormat</span></a><span class=\"br0\">(</span><span class=\"st0\">'%06d'</span><span class=\"sy0\">,</span> <span class=\"re0\">$iCount</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" ]\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"nu0\">1</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_SetAnt</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 95, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># usage: awk  -v debug=0  -f langton.awk</span><br/>\u00a0<br/><span class=\"co1\"># Simulates the cellular automaton \"Langton's ant\",</span><br/><span class=\"co1\"># see http://en.wikipedia.org/wiki/Langton%27s_ant</span><br/>\u00a0<br/><span class=\"kw6\">function</span> turnRight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tdir<span class=\"sy3\">++</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> dir<span class=\"sy2\">&gt;</span><span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> dir=<span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> turnLeft<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tdir<span class=\"sy3\">--</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> dir<span class=\"sy2\">&lt;</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> dir=<span class=\"nu0\">4</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> move<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir<span class=\"sy2\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> y<span class=\"sy3\">--</span>; z=<span class=\"st0\">\"^\"</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir<span class=\"sy2\">==</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> y<span class=\"sy3\">++</span>; z=<span class=\"st0\">\"v\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir<span class=\"sy2\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x<span class=\"sy3\">++</span>; z=<span class=\"st0\">\"&gt;\"</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir<span class=\"sy2\">==</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x<span class=\"sy3\">--</span>; z=<span class=\"st0\">\"&lt;\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> ant<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> debug <span class=\"br0\">)</span>  AntStat<span class=\"br0\">(</span><span class=\"br0\">)</span> \t\t\t\t<span class=\"co1\">##</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> grid<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"sy2\">==</span><span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> turnLeft<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> turnRight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> grid<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"sy2\">==</span><span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> color=<span class=\"nu0\">1</span>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> color=<span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> debug <span class=\"br0\">)</span>  <span class=\"kw5\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"# action\"</span>, color, dir, z <span class=\"br0\">)</span>\t<span class=\"co1\">##</span><br/>\u00a0<br/>\tgrid<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> = color<br/>\tmove<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">###</span><br/>\u00a0<br/><span class=\"kw6\">function</span> AntStat<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"Move#\u00a0%d\u00a0: Ant @ x=%d y=%d dir=%d\u00a0%s  color=%d<span class=\"es0\">\\n</span>\"</span>,<br/>\t\t moveNr, x,y, dir,z, grid<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> dumpGrid<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tAntStat<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"Grid:\"</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>xx=<span class=\"nu0\">1</span>; xx<span class=\"sy2\">&lt;=</span>limit<span class=\"sy3\">/</span><span class=\"nu0\">10</span>; xx<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"....+....%s\"</span>, xx <span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw5\">printf</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/>\tcSum=<span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>yy=<span class=\"nu0\">1</span>; yy <span class=\"sy2\">&lt;=</span> limit; yy<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"%4d:\"</span>,yy <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>xx=<span class=\"nu0\">1</span>; xx <span class=\"sy2\">&lt;=</span> limit; xx<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tc = grid<span class=\"br0\">[</span>xx,yy<span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span> cSum<span class=\"sy3\">++</span><br/>\tc1<span class=\"sy3\">++</span><br/>\tc2<span class=\"sy3\">+</span>=grid<span class=\"br0\">[</span>xx,yy<span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>xx<span class=\"sy2\">==</span>x<span class=\"br0\">)</span><span class=\"sy1\">&amp;&amp;</span><span class=\"br0\">(</span>yy<span class=\"sy2\">==</span>y<span class=\"br0\">)</span> <span class=\"br0\">)</span> \t<span class=\"br0\">{</span> c=z <span class=\"br0\">}</span> \t<span class=\"co1\"># Ant</span><br/>\t\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"Cells:\u00a0%d  'black' cells:\u00a0%d  Moves:\u00a0%d<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span>, limit<span class=\"sy3\">*</span>limit, cSum, moveNr <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <br/>\t  <span class=\"kw5\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"Langton's ant<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span> <br/>\u00a0<br/>\t  limit  = <span class=\"nu0\">72</span><br/>\t  <span class=\"kw1\">for</span><span class=\"br0\">(</span>x=<span class=\"nu0\">1</span>; x <span class=\"sy2\">&lt;=</span> limit; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>y=<span class=\"nu0\">1</span>; y <span class=\"sy2\">&lt;=</span> limit; y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tgrid<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>\t\t<span class=\"br0\">}</span><br/>\t  <span class=\"br0\">}</span><br/>\u00a0<br/>\t  moveNr =   <span class=\"nu0\">0</span><br/>\t  x      =  <span class=\"nu0\">36</span><br/>\t  y      =  <span class=\"nu0\">28</span><br/>\t  dir    =   <span class=\"nu0\">1</span>\t<span class=\"co1\"># 1=up/north 2=right/east 3=down/south 4=left/west</span><br/>\t  z      = <span class=\"st0\">\"!\"</span><br/>\u00a0<br/>\t  <span class=\"kw1\">while</span><span class=\"br0\">(</span> moveNr <span class=\"sy2\">&lt;</span> <span class=\"nu0\">11200</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>\t\tmoveNr<span class=\"sy3\">++</span><br/> \t\tant<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x<span class=\"sy2\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy1\">||</span> x<span class=\"sy2\">&gt;</span>limit<span class=\"br0\">)</span> <span class=\"kw1\">break</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>y<span class=\"sy2\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy1\">||</span> y<span class=\"sy2\">&gt;</span>limit<span class=\"br0\">)</span> <span class=\"kw1\">break</span><br/>\u00a0<br/>\t\t<span class=\"co1\"># Snapshots:</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>moveNr<span class=\"sy2\">==</span><span class=\"nu0\">163</span> <span class=\"sy1\">||</span> moveNr<span class=\"sy2\">==</span><span class=\"nu0\">1297</span> <span class=\"sy1\">||</span> moveNr<span class=\"sy2\">==</span><span class=\"nu0\">10095</span> <span class=\"br0\">)</span> dumpGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>y<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"kw1\">break</span><br/>\t  <span class=\"br0\">}</span><br/>\t  dumpGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span>\t<span class=\"br0\">{</span> <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"END.\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      REM Implementation of Langton's ant for Rosetta Code<br/>      fieldsize%=100<br/>      REM Being pedantic, this will actually result in a field of 101 square,<br/>      REM since arrays start at 0, and my implementation allows them to use it<br/>      DIM field&amp;(fieldsize%,fieldsize%)  \u00a0: REM variables with an &amp; suffix are byte variables<br/>      x%=fieldsize%/2<br/>      y%=fieldsize%/2<br/>      d%=0<br/>      REPEAT<br/>        IF field&amp;(x%,y%)=0 THEN field&amp;(x%,y%)=1:d%-=1 ELSE field&amp;(x%,y%)=0:d%+=1<br/>        GCOL 15*field&amp;(x%,y%)<br/>        PLOT 69,x%*2,y%*2    \u00a0:REM for historical reasons there are two \"plot points\" per pixel<br/>        d%=(d%+4) MOD 4      \u00a0:REM ensure direction is always between 0 and 3<br/>        CASE d% OF<br/>          WHEN 0:y%+=1<br/>          WHEN 1:x%+=1<br/>          WHEN 2:y%-=1<br/>          WHEN 3:x%-=1<br/>        ENDCASE<br/>      UNTIL x%&gt;fieldsize% OR x%&lt;0 OR y%&gt;fieldsize% OR y%&lt;0<br/>      END<br/>\u00a0</pre>"}, {"lang": "bc", "loc": 50, "block": "<pre class=\"text highlighted_source\">define o() {<br/>    auto i, j<br/>\u00a0<br/>    \"P1 \"<br/>    w<br/>    h<br/>    for (j = 0; j &lt; h; j++) {<br/>        for (i = 0; i &lt; w; i++) {<br/>            a[j * w + i]<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>define l(w, h, x, y) {<br/>    auto a[], d, i, x[], y[]<br/>\u00a0<br/>    /* d represents one of the four possible directions:<br/>     *             0<br/>     *             \u21d1<br/>     *           3\u21d0 \u21d21<br/>     *             \u21d3<br/>     *             2<br/>     * The arrays x[] and y[] contain the changes to the x and y direction for <br/>     * each value of d.<br/>     */<br/>    x[1] = 1<br/>    x[3] = -1<br/>    y[0] = -1<br/>    y[2] = 1<br/>\u00a0<br/>    while (1) {<br/>        i = y * w + x<br/>        if (a[i] == 0) d += 1   /* turn right if white */<br/>        if (a[i] == 1) d -= 1   /* turn left if black */<br/>        if (d &lt; 0) d = 3<br/>        if (d &gt; 3) d = 0<br/>        x += x[d]<br/>        y += y[d]<br/>        a[i] = 1 - a[i]         /* toggle cell colour */<br/>        if (x &lt; 0) break<br/>        if (x == w) break<br/>        if (y &lt; 0) break<br/>        if (y == h) break<br/>    }<br/>\u00a0<br/>    o()<br/>}<br/>\u00a0<br/>l(100, 100, 50, 50)<br/>quit</pre>"}, {"lang": "Befunge", "loc": 5, "block": "<pre class=\"text highlighted_source\">\"22222 -\"*&gt;&gt;&gt;1-:0\\:\"P\"%\\v&gt;\\7%1g48*-/2%3*48*+,1+:20g`!v1g01+55p03:_$$$&gt;@<br/>!\"$(<a class=\"__cf_email__\" data-cfemail=\"073747\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>`vp00_^#!:p+7/\"P\"&lt;&lt;^g+7/*5\"p\"\\%\"P\"/7::+g03*\"d\":_$,1+&gt;:40g`!^1g03&lt;<br/>_::10g\\v&gt;00g+4%:00p::3\\`\\1-*50g+50p:2\\-\\0`*+::0\\`\\\"c\"`+50g:0\\`\\\"c\"`++#^<br/>-*84g1&lt;v^+1*2g09pg08g07-*g06-1*2p09:%2/g06:gp08:+7/*5\"p\"\\p07:%\"P\"/7:p06<br/>0p+:7%^&gt;&gt;-:0`!*+10p::20g\\-:0`*+20p:\"d\"*50g::30g\\-:0`!*+30p::40g\\-:0`*+4</pre>"}, {"lang": "C", "loc": 75, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> w <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>pix<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> refresh<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[H\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> w<span class=\"sy0\">;</span> j<span class=\"sy0\">++,</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>pix<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> walk<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> dx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> dy <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tpix <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> w <span class=\"sy0\">*</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[H<span class=\"es5\">\\033</span>[J\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">*</span> w <span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>pix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> k <span class=\"sy0\">=</span> dx<span class=\"sy0\">,</span> dx <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>dy<span class=\"sy0\">,</span> dy <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span>\t    k <span class=\"sy0\">=</span> dy<span class=\"sy0\">,</span> dy <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>dx<span class=\"sy0\">,</span> dx <span class=\"sy0\">=</span> k<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tpix<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>pix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[%d;%dH%c\"</span><span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> pix<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tx <span class=\"sy0\">+=</span> dx<span class=\"sy0\">,</span> y <span class=\"sy0\">+=</span> dy<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tk <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a><span class=\"br0\">(</span>pix <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> pix<span class=\"sy0\">,</span> w <span class=\"sy0\">*</span> h <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> w <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> w<span class=\"br0\">)</span> pix<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\tx<span class=\"sy0\">++,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;=</span> w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a><span class=\"br0\">(</span>pix<span class=\"sy0\">,</span> pix <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> w <span class=\"sy0\">*</span> h <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> w<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> w <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> w<span class=\"br0\">)</span> pix<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\tx<span class=\"sy0\">--,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;=</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a><span class=\"br0\">(</span>pix<span class=\"sy0\">,</span> pix <span class=\"sy0\">+</span> w<span class=\"sy0\">,</span> w <span class=\"sy0\">*</span> <span class=\"br0\">(</span>h <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>pix <span class=\"sy0\">+</span> w <span class=\"sy0\">*</span> <span class=\"br0\">(</span>h <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ty<span class=\"sy0\">--,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a><span class=\"br0\">(</span>pix <span class=\"sy0\">+</span> w<span class=\"sy0\">,</span> pix<span class=\"sy0\">,</span> w <span class=\"sy0\">*</span> <span class=\"br0\">(</span>h <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>pix<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ty<span class=\"sy0\">++,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k<span class=\"br0\">)</span> refresh<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[%d;%dH<span class=\"es5\">\\033</span>[<a class=\"__cf_email__\" data-cfemail=\"a39092cee3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"es5\">\\033</span>[m\"</span><span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tusleep<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> w <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> h <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>w <span class=\"sy0\">&lt;</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span> w <span class=\"sy0\">=</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">&lt;</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span> h <span class=\"sy0\">=</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\twalk<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 300, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">600</span>, CELL_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">4</span>, GRID_SIZE <span class=\"sy1\">=</span> BMP_SIZE <span class=\"sy2\">/</span> CELL_SIZE<span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">bool</span> INFINIT_RUN <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> cellState <span class=\"br0\">{</span> WHITE, BLACK, ANT <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">enum</span> facing <span class=\"br0\">{</span> NOR, EAS, SOU, WES <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">enum</span> state <span class=\"br0\">{</span> RUNNING, RESTING <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> myBitmap<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tDeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPINFO\tbi<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>\t   <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>\t   <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>\t   <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>\tHDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\thdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\u00a0<br/>\twidth <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tZeroMemory<span class=\"br0\">(</span> pBits, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD clr <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, <span class=\"nu0\">1</span>, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> string path <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>\tBITMAPINFO\t infoheader<span class=\"sy4\">;</span><br/>\tBITMAP\t\t bitmap<span class=\"sy4\">;</span><br/>\tDWORD\t\t wb<span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tDWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tHANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tCloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span><br/>    HDC\t    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>   <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>\t    width, height<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> Ant<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    Ant<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span><br/>\t_bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> _grid, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> _grid <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tRED_BRUSH <span class=\"sy1\">=</span> CreateSolidBrush<span class=\"br0\">(</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_antState <span class=\"sy1\">=</span> RUNNING<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    ~Ant<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tDeleteObject<span class=\"br0\">(</span> RED_BRUSH <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPosition<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_sx <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span> _sy <span class=\"sy1\">=</span> y<span class=\"sy4\">;</span><br/>\t_facing <span class=\"sy1\">=</span> WES<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> mainLoop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> _antState <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> RUNNING<span class=\"sy4\">:</span><br/>\t        simulate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"co1\">// fall thru</span><br/>\t    <span class=\"kw1\">case</span> RESTING<span class=\"sy4\">:</span><br/>\t\tdisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setHWND<span class=\"br0\">(</span> HWND hwnd <span class=\"br0\">)</span> <span class=\"br0\">{</span> _hwnd <span class=\"sy1\">=</span> hwnd<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> simulate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> _grid<span class=\"br0\">[</span>_sx<span class=\"br0\">]</span><span class=\"br0\">[</span>_sy<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> BLACK<span class=\"sy4\">:</span><br/>\t\t_grid<span class=\"br0\">[</span>_sx<span class=\"br0\">]</span><span class=\"br0\">[</span>_sy<span class=\"br0\">]</span> <span class=\"sy1\">=</span> WHITE<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">--</span>_facing <span class=\"sy1\">&lt;</span> NOR <span class=\"br0\">)</span> _facing <span class=\"sy1\">=</span> WES<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WHITE<span class=\"sy4\">:</span><br/>\t\t_grid<span class=\"br0\">[</span>_sx<span class=\"br0\">]</span><span class=\"br0\">[</span>_sy<span class=\"br0\">]</span> <span class=\"sy1\">=</span> BLACK<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>_facing <span class=\"sy1\">&gt;</span> WES <span class=\"br0\">)</span> _facing <span class=\"sy1\">=</span> NOR<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> _facing <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> NOR<span class=\"sy4\">:</span> <br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">--</span>_sy <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> INFINIT_RUN <span class=\"br0\">)</span> _sy <span class=\"sy1\">=</span> GRID_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">else</span> _antState <span class=\"sy1\">=</span> RESTING<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> EAS<span class=\"sy4\">:</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>_sx <span class=\"sy1\">&gt;=</span> GRID_SIZE <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> INFINIT_RUN <span class=\"br0\">)</span> _sx <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">else</span> _antState <span class=\"sy1\">=</span> RESTING<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> SOU<span class=\"sy4\">:</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>_sy <span class=\"sy1\">&gt;=</span> GRID_SIZE <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> INFINIT_RUN <span class=\"br0\">)</span> _sy <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">else</span> _antState <span class=\"sy1\">=</span> RESTING<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WES<span class=\"sy4\">:</span><br/>\t        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">--</span>_sx <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> INFINIT_RUN <span class=\"br0\">)</span> _sx <span class=\"sy1\">=</span> GRID_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">else</span> _antState <span class=\"sy1\">=</span> RESTING<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        _bmp.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        HBRUSH br<span class=\"sy4\">;</span> RECT rc<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> xx, yy<span class=\"sy4\">;</span> HDC dc <span class=\"sy1\">=</span> _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> GRID_SIZE<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> GRID_SIZE<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t        <span class=\"kw1\">switch</span><span class=\"br0\">(</span> _grid<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t        <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">case</span> BLACK<span class=\"sy4\">:</span> br <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>HBRUSH<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> GetStockObject<span class=\"br0\">(</span> BLACK_BRUSH <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> WHITE<span class=\"sy4\">:</span> br <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>HBRUSH<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> GetStockObject<span class=\"br0\">(</span> WHITE_BRUSH <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t        <span class=\"br0\">}</span><br/>\t        <span class=\"kw1\">if</span><span class=\"br0\">(</span> x <span class=\"sy1\">==</span> _sx <span class=\"sy3\">&amp;&amp;</span> y <span class=\"sy1\">==</span> _sy <span class=\"br0\">)</span> br <span class=\"sy1\">=</span> RED_BRUSH<span class=\"sy4\">;</span><br/>\u00a0<br/>\t        xx <span class=\"sy1\">=</span> x <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> CELL_SIZE<span class=\"sy4\">;</span><br/>\t        SetRect<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>rc, xx, yy, xx <span class=\"sy2\">+</span> CELL_SIZE, yy <span class=\"sy2\">+</span> CELL_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t        FillRect<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>rc, br <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>        HDC wdc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> _hwnd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        BitBlt<span class=\"br0\">(</span> wdc, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, BMP_SIZE, BMP_SIZE, dc, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, SRCCOPY <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ReleaseDC<span class=\"br0\">(</span> _hwnd, wdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    myBitmap _bmp<span class=\"sy4\">;</span><br/>    HWND     _hwnd<span class=\"sy4\">;</span><br/>    HBRUSH   RED_BRUSH<span class=\"sy4\">;</span><br/>    BYTE     _grid<span class=\"br0\">[</span>GRID_SIZE<span class=\"br0\">]</span><span class=\"br0\">[</span>GRID_SIZE<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>      _sx, _sy, _facing<span class=\"sy4\">;</span><br/>    state    _antState<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> wnd<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> wnd<span class=\"sy4\">::</span><span class=\"me2\">Run</span><span class=\"br0\">(</span> HINSTANCE hInst <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_hInst <span class=\"sy1\">=</span> hInst<span class=\"sy4\">;</span><br/>\t_hwnd <span class=\"sy1\">=</span> InitAll<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t_ant.<span class=\"me1\">setHWND</span><span class=\"br0\">(</span> _hwnd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_ant.<span class=\"me1\">setPosition</span><span class=\"br0\">(</span> GRID_SIZE <span class=\"sy2\">/</span> <span class=\"nu0\">2</span>, GRID_SIZE <span class=\"sy2\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tShowWindow<span class=\"br0\">(</span> _hwnd, SW_SHOW <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tUpdateWindow<span class=\"br0\">(</span> _hwnd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tMSG msg<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> msg <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> msg.<span class=\"me1\">message</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> WM_QUIT <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> PeekMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, PM_REMOVE <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tTranslateMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tDispatchMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">else</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t_ant.<span class=\"me1\">mainLoop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> UnregisterClass<span class=\"br0\">(</span> <span class=\"st0\">\"_LANGTONS_ANT_\"</span>, _hInst <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> WINAPI wnd<span class=\"sy4\">::</span><span class=\"me2\">WndProc</span><span class=\"br0\">(</span> HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> msg <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> WM_DESTROY<span class=\"sy4\">:</span> PostQuitMessage<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">default</span><span class=\"sy4\">:</span><br/>\t\t<span class=\"kw1\">return</span> DefWindowProc<span class=\"br0\">(</span> hWnd, msg, wParam, lParam <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HWND InitAll<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tWNDCLASSEX wcex<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>wcex, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> wcex <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">cbSize</span>\t       <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> WNDCLASSEX <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">style</span>\t       <span class=\"sy1\">=</span> CS_HREDRAW <span class=\"sy3\">|</span> CS_VREDRAW<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">lpfnWndProc</span>   <span class=\"sy1\">=</span> <span class=\"br0\">(</span> WNDPROC <span class=\"br0\">)</span>WndProc<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hInstance</span>     <span class=\"sy1\">=</span> _hInst<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hCursor</span>       <span class=\"sy1\">=</span> LoadCursor<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span>, IDC_ARROW <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hbrBackground</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> HBRUSH <span class=\"br0\">)</span><span class=\"br0\">(</span> COLOR_WINDOW <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">lpszClassName</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"_LANGTONS_ANT_\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tRegisterClassEx<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>wcex <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> CreateWindow<span class=\"br0\">(</span> <span class=\"st0\">\"_LANGTONS_ANT_\"</span>, <span class=\"st0\">\".: Langton's Ant -- PJorente\u00a0:.\"</span>, WS_SYSMENU, CW_USEDEFAULT, <span class=\"nu0\">0</span>, BMP_SIZE, BMP_SIZE, <span class=\"kw2\">NULL</span>, <span class=\"kw2\">NULL</span>, _hInst, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HINSTANCE _hInst<span class=\"sy4\">;</span><br/>    HWND      _hwnd<span class=\"sy4\">;</span><br/>    Ant       _ant<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> APIENTRY _tWinMain<span class=\"br0\">(</span> HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, <span class=\"kw4\">int</span> nCmdShow <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    wnd myWnd<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> myWnd.<span class=\"me1\">Run</span><span class=\"br0\">(</span> hInstance <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 94, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> LangtonAnt<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> Point<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> X<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Y<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Point<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            X <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>            Y <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> Direction<br/>    <span class=\"br0\">{</span><br/>        North, East, West, South<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Langton<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">bool</span> <span class=\"br0\">[</span>,<span class=\"br0\">]</span> IsBlack<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> Point _origin<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> Point _antPosition <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> OutOfBounds <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// I don't see any mention of what direction the ant is supposed to start out in</span><br/>        <span class=\"kw1\">private</span> Direction _antDirection <span class=\"sy0\">=</span> Direction<span class=\"sy0\">.</span><span class=\"me1\">East</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> Direction<span class=\"br0\">[</span><span class=\"br0\">]</span> _leftTurn <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> Direction<span class=\"sy0\">.</span><span class=\"me1\">West</span>, Direction<span class=\"sy0\">.</span><span class=\"me1\">North</span>, Direction<span class=\"sy0\">.</span><span class=\"me1\">South</span>, Direction<span class=\"sy0\">.</span><span class=\"me1\">East</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> Direction<span class=\"br0\">[</span><span class=\"br0\">]</span> _rightTurn <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> Direction<span class=\"sy0\">.</span><span class=\"me1\">East</span>, Direction<span class=\"sy0\">.</span><span class=\"me1\">South</span>, Direction<span class=\"sy0\">.</span><span class=\"me1\">North</span>, Direction<span class=\"sy0\">.</span><span class=\"me1\">West</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> _xInc <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> _yInc <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Langton<span class=\"br0\">(</span><span class=\"kw4\">int</span> width, <span class=\"kw4\">int</span> height, Point origin<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            _origin <span class=\"sy0\">=</span> origin<span class=\"sy0\">;</span><br/>            IsBlack <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>width, height<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            OutOfBounds <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Langton<span class=\"br0\">(</span><span class=\"kw4\">int</span> width, <span class=\"kw4\">int</span> height<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>width, height, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, height <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> MoveAnt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            _antPosition<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+=</span> _xInc<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>_antDirection<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            _antPosition<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">+=</span> _yInc<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>_antDirection<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Point Step<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>OutOfBounds<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> InvalidOperationException<span class=\"br0\">(</span><span class=\"st0\">\"Trying to step after ant is out of bounds\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Point ptCur <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>_antPosition<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+</span> _origin<span class=\"sy0\">.</span><span class=\"me1\">X</span>, _antPosition<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">+</span> _origin<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> leftTurn <span class=\"sy0\">=</span> IsBlack<span class=\"br0\">[</span>ptCur<span class=\"sy0\">.</span><span class=\"me1\">X</span>, ptCur<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> iDirection <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> _antDirection<span class=\"sy0\">;</span><br/>            _antDirection <span class=\"sy0\">=</span> leftTurn <span class=\"sy0\">?</span> _leftTurn<span class=\"br0\">[</span>iDirection<span class=\"br0\">]</span> <span class=\"sy0\">:</span> _rightTurn<span class=\"br0\">[</span>iDirection<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            IsBlack<span class=\"br0\">[</span>ptCur<span class=\"sy0\">.</span><span class=\"me1\">X</span>, ptCur<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>IsBlack<span class=\"br0\">[</span>ptCur<span class=\"sy0\">.</span><span class=\"me1\">X</span>, ptCur<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            MoveAnt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ptCur <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>_antPosition<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+</span> _origin<span class=\"sy0\">.</span><span class=\"me1\">X</span>, _antPosition<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">+</span> _origin<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            OutOfBounds <span class=\"sy0\">=</span> <br/>                ptCur<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span><br/>                ptCur<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">&gt;=</span> IsBlack<span class=\"sy0\">.</span><span class=\"me1\">GetUpperBound</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                ptCur<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span><br/>                ptCur<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">&gt;=</span> IsBlack<span class=\"sy0\">.</span><span class=\"me1\">GetUpperBound</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> _antPosition<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Langton ant <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Langton<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ant<span class=\"sy0\">.</span><span class=\"me1\">OutOfBounds</span><span class=\"br0\">)</span> ant<span class=\"sy0\">.</span><span class=\"me1\">Step</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> iRow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> iRow <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> iRow<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> iCol <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> iCol <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> iCol<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>ant<span class=\"sy0\">.</span><span class=\"me1\">IsBlack</span><span class=\"br0\">[</span>iCol, iRow<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"#\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Chapel", "loc": 70, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>config const gridHeight: int = 100;<br/>config const gridWidth: int = 100;<br/>\u00a0<br/>class PBMWriter {<br/>  var imgDomain: domain(2);<br/>  var imgData: [imgDomain] int;<br/>\u00a0<br/>  proc PBMWriter( height: int, width: int ){<br/>    imgDomain = { 1..#height, 1..#width };<br/>  }<br/>\u00a0<br/>  proc this( i\u00a0: int, j\u00a0: int) ref\u00a0: int{<br/>    return this.imgData[ i, j ];<br/>  }<br/>\u00a0<br/>  proc writeImage( fileName: string ){<br/>    var file = open(fileName, iomode.cw);<br/>    var writingChannel = file.writer();<br/>    writingChannel.write(\"P1\\n\", imgDomain.dim(1).size, \" \" ,imgDomain.dim(2).size,\"\\n\");<br/>\u00a0<br/>    for px in imgData {<br/>      writingChannel.write( px, \" \" );<br/>    }<br/>\u00a0<br/>    writingChannel.write( \"\\n\" );<br/>    writingChannel.flush();<br/>    writingChannel.close();<br/>  }<br/>\u00a0<br/>}<br/>\u00a0<br/>enum Color { white, black };<br/>\u00a0<br/>inline proc nextDirection( position: 2*int, turnLeft: bool ): 2*int {<br/>  return ( (if turnLeft then 1 else -1 ) * position[2], (if turnLeft then -1 else 1 ) * position[1] );<br/>}<br/>\u00a0<br/>proc &lt;( left: 2*int, right: 2*int ){<br/>  return left[1] &lt; right[1] &amp;&amp; left[2] &lt; right[2];<br/>}<br/>\u00a0<br/>proc &lt;=( left: 2*int, right: 2*int ){<br/>  return left[1] &lt;= right[1] &amp;&amp; left[2] &lt;= right[2];<br/>}<br/>\u00a0<br/>proc main{<br/>  const gridDomain: domain(2) = {1..#gridHeight, 1..#gridWidth};<br/>  var grid: [gridDomain] Color;<br/>\u00a0<br/>  var antPos = ( gridHeight / 2, gridWidth / 2 );<br/>  var antDir = (1,0); // start up;<br/>\u00a0<br/>  while (0,0) &lt; antPos &amp;&amp; antPos &lt;= (gridHeight, gridWidth ) {<br/>    var currColor = grid[ antPos ];<br/>    grid[antPos] = if currColor == Color.white then Color.black else Color.white\u00a0;<br/>\u00a0<br/>    antDir = nextDirection( antDir, currColor == Color.black );<br/>    antPos = antPos + antDir;<br/>  }<br/>\u00a0<br/>  var image = new PBMWriter( height = gridHeight, width = gridWidth );<br/>\u00a0<br/>  for (i, j) in gridDomain {<br/>    image[i,j] = if grid[gridHeight-j+1,gridHeight-i+1] == Color.black then 0 else 1;<br/>  }<br/>\u00a0<br/>  image.writeImage( \"output.png\" );<br/>}<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 14, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>bounds <span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      xs <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> ys <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>dir <span class=\"nu0\">0</span> x <span class=\"nu0\">50</span> y <span class=\"nu0\">50</span><br/>         grid <span class=\"br0\">{</span><span class=\"br0\">[</span>x y<span class=\"br0\">]</span> false<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>bounds x<span class=\"br0\">)</span> <span class=\"br0\">(</span>bounds y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>cur <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>grid <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            dir <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"sy0\">+</span> dir <span class=\"br0\">(</span><span class=\"kw1\">if</span> cur <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> dir <span class=\"br0\">(</span><span class=\"sy0\">+</span> x <span class=\"br0\">(</span>xs dir<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> y <span class=\"br0\">(</span>ys dir<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">merge</span> grid <span class=\"br0\">{</span><span class=\"br0\">[</span>x y<span class=\"br0\">]</span> cur<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>col <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span>println<br/>          <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid <span class=\"br0\">[</span><span class=\"sy0\">%</span> col<span class=\"br0\">]</span><span class=\"br0\">)</span> \\# \\<span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 91, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> langtons-ant<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">78</span>  Grid-<span class=\"kw3\">Size</span>               <span class=\"kw3\">VALUE</span> <span class=\"nu0\">100</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  grid-<span class=\"kw3\">area</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  grid-x              <span class=\"kw3\">OCCURS</span> Grid-<span class=\"kw3\">Size</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>               <span class=\"nu0\">05</span>  grid-y          <span class=\"kw3\">OCCURS</span> Grid-<span class=\"kw3\">Size</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>                   <span class=\"nu0\">07</span>  cell-colour <span class=\"kw3\">PIC</span> X <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"W\"</span><span class=\"sy0\">.</span><br/>                       <span class=\"nu0\">88</span>  black   <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">.</span><br/>                       <span class=\"nu0\">88</span>  white   <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"W\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  ant-x                   <span class=\"kw3\">PIC</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  ant-y                   <span class=\"kw3\">PIC</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  ant-direction           <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">88</span>  upward              <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">88</span>  rightward           <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">88</span>  downward            <span class=\"kw3\">VALUE</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">88</span>  leftward            <span class=\"kw3\">VALUE</span> <span class=\"nu0\">3</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">78</span>  Pause-Time-Ns           <span class=\"kw3\">VALUE</span> <span class=\"nu0\">10000000</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  display-y               <span class=\"kw3\">PIC</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">78</span>  Black-Background        <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">78</span>  White-Background        <span class=\"kw3\">VALUE</span> <span class=\"nu0\">7</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  i                       <span class=\"kw3\">PIC</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  j                       <span class=\"kw3\">PIC</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  pause                   <span class=\"kw3\">PIC</span> X<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       main-<span class=\"kw3\">line</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DIVIDE</span> Grid-<span class=\"kw3\">Size</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">2</span> <span class=\"kw2\">GIVING</span> ant-x<span class=\"sy0\">,</span> ant-y<br/>\u00a0<br/>           <span class=\"kw2\">PERFORM</span> display-initial-grid<br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">UNTIL</span> <span class=\"br0\">(</span>ant-x <span class=\"sy0\">=</span> Grid-<span class=\"kw3\">Size</span> <span class=\"kw3\">OR</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                   <span class=\"kw3\">OR</span> <span class=\"br0\">(</span>ant-y <span class=\"sy0\">=</span> Grid-<span class=\"kw3\">Size</span> <span class=\"kw3\">OR</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>               <span class=\"kw2\">PERFORM</span> step-simulation<br/>               <span class=\"kw2\">CALL</span> <span class=\"st0\">\"CBL_OC_NANOSLEEP\"</span> <span class=\"kw3\">USING</span> Pause-Time-Ns<br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Press enter to quit.\"</span> <span class=\"kw3\">AT</span> <span class=\"kw3\">LINE</span> <span class=\"nu0\">1</span> <span class=\"kw3\">COLUMN</span> <span class=\"nu0\">1</span><br/>           <span class=\"kw2\">ACCEPT</span> pause<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span><br/>       step-simulation<span class=\"sy0\">.</span><br/>           <span class=\"kw1\">IF</span> black <span class=\"br0\">(</span>ant-x<span class=\"sy0\">,</span> ant-y<span class=\"br0\">)</span><br/>               <span class=\"kw3\">SET</span> white <span class=\"br0\">(</span>ant-x<span class=\"sy0\">,</span> ant-y<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>               <span class=\"kw2\">PERFORM</span> display-ant-cell<br/>               <span class=\"kw2\">COMPUTE</span> ant-direction <span class=\"sy0\">=</span><br/>                   <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>ant-direction<span class=\"sy0\"> + </span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>           <span class=\"kw3\">ELSE</span><br/>               <span class=\"kw3\">SET</span> black <span class=\"br0\">(</span>ant-x<span class=\"sy0\">,</span> ant-y<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>               <span class=\"kw2\">PERFORM</span> display-ant-cell<br/>               <span class=\"kw2\">COMPUTE</span> ant-direction <span class=\"sy0\">=</span><br/>                   <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>ant-direction<span class=\"sy0\"> - </span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>           END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>           <span class=\"kw2\">EVALUATE</span> <span class=\"kw3\">TRUE</span><br/>               <span class=\"kw3\">WHEN</span> upward<br/>                   <span class=\"kw2\">ADD</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> ant-y<br/>               <span class=\"kw3\">WHEN</span> rightward<br/>                   <span class=\"kw2\">ADD</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> ant-x<br/>               <span class=\"kw3\">WHEN</span> downward<br/>                   <span class=\"kw3\">SUBTRACT</span> <span class=\"nu0\">1</span> <span class=\"kw3\">FROM</span> ant-y<br/>               <span class=\"kw3\">WHEN</span> leftward<br/>                   <span class=\"kw3\">SUBTRACT</span> <span class=\"nu0\">1</span> <span class=\"kw3\">FROM</span> ant-x<br/>           END-<span class=\"kw2\">EVALUATE</span><br/>           <span class=\"sy0\">.</span><br/>       display-ant-cell<span class=\"sy0\">.</span><br/>               <span class=\"kw3\">SUBTRACT</span> ant-y <span class=\"kw3\">FROM</span> Grid-<span class=\"kw3\">Size</span> <span class=\"kw2\">GIVING</span> display-y<br/>               <span class=\"kw1\">IF</span> black <span class=\"br0\">(</span>ant-x<span class=\"sy0\">,</span> ant-y<span class=\"br0\">)</span><br/>                   <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">SPACE</span> <span class=\"kw3\">AT</span> <span class=\"kw3\">LINE</span> display-y <span class=\"kw3\">COLUMN</span> ant-x<br/>                       <span class=\"kw3\">WITH</span> BACKGROUND-COLOR Black-Background<br/>               <span class=\"kw3\">ELSE</span><br/>                   <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">SPACE</span> <span class=\"kw3\">AT</span> <span class=\"kw3\">LINE</span> display-y <span class=\"kw3\">COLUMN</span> ant-x<br/>                      <span class=\"kw3\">WITH</span> BACKGROUND-COLOR White-Background<br/>               END-<span class=\"kw1\">IF</span><br/>               <span class=\"sy0\">.</span><br/>       display-initial-grid<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> i <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> i &gt; Grid-<span class=\"kw3\">Size</span><br/>                   <span class=\"kw3\">AFTER</span> j <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> j &gt; Grid-<span class=\"kw3\">Size</span><br/>               <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">SPACE</span> <span class=\"kw3\">AT</span> <span class=\"kw3\">LINE</span> i <span class=\"kw3\">COLUMN</span> j<br/>                   <span class=\"kw3\">WITH</span> BACKGROUND-COLOR White-Background<br/>           END-<span class=\"kw2\">PERFORM</span><br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 81, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"kw3\">class</span> Ant<br/>  constructor<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span>world<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>location = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">@</span>direction = <span class=\"st0\">'E'</span><br/>\u00a0<br/>  move<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span><br/>    <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> = <span class=\"sy0\">@</span>location<br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">@</span>world.<span class=\"me1\">is_set</span> x<span class=\"sy0\">,</span> y<br/>      <span class=\"sy0\">@</span>world.<span class=\"me1\">unset</span> x<span class=\"sy0\">,</span> y<br/>      <span class=\"sy0\">@</span>direction = Directions.<span class=\"me1\">left</span> <span class=\"sy0\">@</span>direction<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"sy0\">@</span>world.<span class=\"me1\">set</span> x<span class=\"sy0\">,</span> y<br/>      <span class=\"sy0\">@</span>direction = Directions.<span class=\"me1\">right</span> <span class=\"sy0\">@</span>direction<br/>    <span class=\"sy0\">@</span>location = Directions.<span class=\"me1\">forward</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"sy0\">@</span>direction<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Model a theoretically infinite 2D world with a hash, allowing squares</span><br/><span class=\"co1\"># to be black or white (independent of any ants.)</span><br/><span class=\"kw3\">class</span> BlackWhiteWorld<br/>  constructor<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>bits = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  set<span class=\"sy0\">:</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>bits<span class=\"br0\">[</span><span class=\"st0\">\"#{x},#{y}\"</span><span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>\u00a0<br/>  unset<span class=\"sy0\">:</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw3\">delete</span> <span class=\"sy0\">@</span>bits<span class=\"br0\">[</span><span class=\"st0\">\"#{x},#{y}\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>  is_set<span class=\"sy0\">:</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>bits<span class=\"br0\">[</span><span class=\"st0\">\"#{x},#{y}\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>  draw<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"co1\"># Most of this code just involves finding the extent of the world.</span><br/>    <span class=\"co1\"># Always include the origin, even if it's not set.</span><br/>    <span class=\"sy0\">@</span>min_x = <span class=\"sy0\">@</span>max_x = <span class=\"sy0\">@</span>min_y = <span class=\"sy0\">@</span>max_y = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> key <span class=\"kw1\">of</span> <span class=\"sy0\">@</span>bits<br/>      <span class=\"br0\">[</span>xx<span class=\"sy0\">,</span> yy<span class=\"br0\">]</span> = <span class=\"br0\">(</span>coord <span class=\"kw1\">for</span> coord <span class=\"kw1\">in</span> key.<span class=\"me1\">split</span> <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>      x = parseInt xx<br/>      y = parseInt yy<br/>      <span class=\"sy0\">@</span>min_x = x <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"sy0\">@</span>min_x<br/>      <span class=\"sy0\">@</span>max_x = x <span class=\"kw1\">if</span> x <span class=\"sy0\">&gt;</span> <span class=\"sy0\">@</span>max_x<br/>      <span class=\"sy0\">@</span>min_y = y <span class=\"kw1\">if</span> y <span class=\"sy0\">&lt;</span> <span class=\"sy0\">@</span>min_y<br/>      <span class=\"sy0\">@</span>max_y = y <span class=\"kw1\">if</span> y <span class=\"sy0\">&gt;</span> <span class=\"sy0\">@</span>max_y<br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"top left: #{@min_x}, #{@max_y}, bottom right: #{@max_x}, #{@min_y}\"</span><br/>    <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"sy0\">@</span>max_y..<span class=\"sy0\">@</span>min_y<span class=\"br0\">]</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      s = <span class=\"st0\">''</span><br/>      <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"sy0\">@</span>min_x..<span class=\"sy0\">@</span>max_x<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">@</span>bits<span class=\"br0\">[</span><span class=\"st0\">\"#{x},#{y}\"</span><span class=\"br0\">]</span><br/>          s <span class=\"sy0\">+</span>= <span class=\"st0\">'#'</span><br/>        <span class=\"kw1\">else</span><br/>          s <span class=\"sy0\">+</span>= <span class=\"st0\">'_'</span><br/>      console.<span class=\"me1\">log</span> s<br/>\u00a0<br/><span class=\"co1\"># Simple code for directions, independent of ants.</span><br/>Directions =<br/>  left<span class=\"sy0\">:</span> <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'W'</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'N'</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'S'</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'W'</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'E'</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'S'</span><br/>    <span class=\"st0\">'N'</span><br/>\u00a0<br/>  right<span class=\"sy0\">:</span> <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'E'</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'N'</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'S'</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'E'</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'W'</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'S'</span><br/>    <span class=\"st0\">'N'</span><br/>\u00a0<br/>  forward<span class=\"sy0\">:</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> dir<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'N'</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'S'</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'E'</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"kw1\">if</span> dir == <span class=\"st0\">'W'</span><br/>\u00a0<br/>\u00a0<br/>world = <span class=\"kw3\">new</span> BlackWhiteWorld<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>ant = <span class=\"kw3\">new</span> Ant<span class=\"br0\">(</span>world<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">11500</span><span class=\"br0\">]</span><br/>  ant.<span class=\"me1\">move</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"Ant is at #{ant.location}, direction #{ant.direction}\"</span><br/>world.<span class=\"me1\">draw</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 32, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> toggle <span class=\"br0\">(</span>gv<span class=\"br0\">)</span> `<span class=\"br0\">(</span><span class=\"kw1\">setf</span>  <span class=\"sy0\">,</span>gv <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"sy0\">,</span>gv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> langtons-ant <span class=\"br0\">(</span>width height start-x start-y start-dir<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> width height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>x start-x<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>y start-y<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>dir start-dir<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop while <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> -<span class=\"nu0\">1</span> x width<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> -<span class=\"nu0\">1</span> y height<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>toggle <span class=\"br0\">(</span><span class=\"kw1\">aref</span> grid x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setq</span> dir <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ dir<span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setq</span> dir <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"nu0\">1</span>- dir<span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">case</span> dir<br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"br0\">(</span>decf y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span>incf x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"br0\">(</span>incf y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"br0\">(</span>decf x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    grid<br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> show-grid <span class=\"br0\">(</span>grid<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>width height<span class=\"br0\">)</span> <span class=\"br0\">(</span>array-dimensions grid<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>y height<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>x width<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> grid x y<span class=\"br0\">)</span> <span class=\"st0\">\"#\"</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">princ</span> #\\Newline<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">setf</span> *random-state* <span class=\"br0\">(</span>make-random-state t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>show-grid <span class=\"br0\">(</span>langtons-ant <span class=\"nu0\">100</span> <span class=\"nu0\">100</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">45</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">45</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 26, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">75</span><span class=\"sy0\">,</span> height <span class=\"sy0\">=</span> <span class=\"nu0\">52</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> maxSteps <span class=\"sy0\">=</span> <span class=\"nu0\">12</span>_000<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> Direction <span class=\"br0\">{</span> up<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> down<span class=\"sy0\">,</span> left <span class=\"br0\">}</span><br/>    <span class=\"kw4\">enum</span> Color <span class=\"sy0\">:</span> <span class=\"kw4\">char</span> <span class=\"br0\">{</span> white <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span><span class=\"sy0\">,</span> black <span class=\"sy0\">=</span> <span class=\"st0\">'#'</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">uint</span> x <span class=\"sy0\">=</span> width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> height <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    Color<span class=\"br0\">[</span>width<span class=\"br0\">]</span><span class=\"br0\">[</span>height<span class=\"br0\">]</span> M<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">up</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Color<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> maxSteps <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> width <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">&lt;</span> height<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> turn <span class=\"sy0\">=</span> M<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> black<span class=\"sy0\">;</span><br/>            dir <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Direction<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>dir <span class=\"sy0\">+</span> <span class=\"br0\">(</span>turn <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            M<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>M<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> black<span class=\"br0\">)</span> <span class=\"sy0\">?</span> white <span class=\"sy0\">:</span> black<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">final</span> <span class=\"kw1\">switch</span><span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Direction<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> up<span class=\"sy0\">:</span>    y<span class=\"sy0\">--;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> right<span class=\"sy0\">:</span> x<span class=\"sy0\">--;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> down<span class=\"sy0\">:</span>  y<span class=\"sy0\">++;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> left<span class=\"sy0\">:</span>  x<span class=\"sy0\">++;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%-(%c%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 61, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'plot<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>lib 'types<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>move iter x dir constant: plane turns cmax  width  xmax <span class=\"br0\">(</span>cidx <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> iter <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">;; get color index of current square</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> cidx <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> plane x<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0<br/>\t<span class=\"co1\">;; turn\t</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> turns cidx<span class=\"br0\">)</span>  <br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> dir <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> dir <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> dir<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; right is #t</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> dir <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> dir <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> dir<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0<br/>\t<span class=\"co1\">;; rotate colors</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> cidx <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> cidx cmax<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> cidx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> plane x cidx<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">;; move</span><br/>\t<span class=\"co1\">;; x = v + h*width for a pixel at (h,v)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> x <br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> dir <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> dir <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x width<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> dir <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> dir <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x width<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0<br/>\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> x xmax<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> iter <span class=\"sy0\">-</span><span class=\"nu0\">666</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; out of bounds</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> iter <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> iter<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\titer<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; a color table of 16 colors</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> colors <br/>   <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>rgb <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rgb <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rgb <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rgb <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rgb <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rgb <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rgb <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> colors <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> colors colors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; transform color index into rgb color, using colors table.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>colorize plane xmax<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>x xmax<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> plane x <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> colors <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> plane x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>vector<span class=\"sy0\">-&gt;</span>pixels plane<span class=\"br0\">)</span><br/>\txmax <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; ant's patterns</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> turns #<span class=\"br0\">(</span>#t #t #f #f #f #t #f #f #f #t #t #t<span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;; RRLLLRLLLRRR</span><br/><span class=\"co1\">;;(define turns #(#t #t #f #f #f #t #t #f))\u00a0; RRLLLRRL</span><br/><span class=\"co1\">;;(define turns #(#t #f))\u00a0; RL\u00a0: basic ant</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span>  <span class=\"br0\">(</span>ant <span class=\"br0\">(</span>iter <span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>clear<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> width <span class=\"br0\">(</span>first <span class=\"br0\">(</span>pixels<span class=\"sy0\">-</span>dim<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; plane dimensions</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> height <span class=\"br0\">(</span>rest <span class=\"br0\">(</span>pixels<span class=\"sy0\">-</span>dim<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> plane <span class=\"br0\">(</span>pixels<span class=\"sy0\">-&gt;</span>uint32<span class=\"sy0\">-</span><span class=\"kw1\">vector</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> x <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> width <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> width <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> height <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; middle of plane</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> xmax <span class=\"br0\">(</span><span class=\"sy0\">*</span> width height<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"br0\">(</span>move iter  x <span class=\"nu0\">0</span> plane turns <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> turns<span class=\"br0\">)</span><span class=\"br0\">)</span> width xmax<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>colorize plane xmax<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>ant<span class=\"br0\">)</span> <span class=\"co1\">;; run</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 51, "block": "<pre class=\"text highlighted_source\">open list core generic<br/>\u00a0<br/>type Field = Field a<br/>type Color = White | Black<br/>type Direction = Lft | Fwd | Rgt | Bwd<br/>field s = Field [[White \\\\ _ &lt;- [1..s]] \\\\ _ &lt;- [1..s]]<br/>\u00a0<br/>isBlack Black = true<br/>isBlack _ = false<br/>\u00a0<br/>newfield xc yc (Field xs) = Field (newfield' 0 xs)<br/>  where newfield' _ [] = []<br/>        newfield' n (x::xs) <br/>          | n == yc = row 0 x\u00a0:: xs<br/>          | else   = x\u00a0:: newfield' (n+1) xs<br/>          where row _ [] = []<br/>                row n (x::xs) <br/>                  | n == xc = toggle x\u00a0:: xs<br/>                  | else    = x\u00a0:: row (n+1) xs<br/>                  where toggle White = Black<br/>                        toggle Black = White<br/>\u00a0<br/>showPath (Field xs) = toString &lt;| show' \"\" xs<br/>  where show' sb [] = sb +&gt; \"\"<br/>        show' sb (x::xs) = show' (showRow sb x +&gt; \"\\r\\n\") xs<br/>          where showRow sb [] = sb +&gt; \"\"<br/>                showRow sb (x::xs) = showRow (sb +&gt; s) xs<br/>                  where s | isBlack x = \"#\"<br/>                          | else = \"_\"<br/>\u00a0<br/>move s xc yc = move' (Fwd,xc,yc) (field s)<br/>  where move' (pos,xc,yc)@coor fld <br/>          | xc &gt;= s || yc &gt;= s || xc &lt; 0 || yc &lt; 0 = fld<br/>          | else = fld |&gt; newfield xc yc |&gt; move' (matrix (dir fld) coor)<br/>          where dir (Field xs) <br/>                  | `isBlack` (xs:yc):xc = Lft<br/>                  | else = Rgt<br/>                matrix Lft (pos,x,y) = go (left pos,x,y)<br/>                matrix Rgt (pos,x,y) = go (right pos,x,y)<br/>                go (Lft,x,y) = (Lft,x - 1,y)<br/>                go (Rgt,x,y) = (Rgt,x+1,y)<br/>                go (Fwd,x,y) = (Fwd,x,y - 1)<br/>                go (Bwd,x,y) = (Bwd,x,y+1)<br/>                right Lft = Fwd<br/>                right Fwd = Rgt<br/>                right Rgt = Bwd<br/>                right Bwd = Lft<br/>                left Lft = Bwd<br/>                left Bwd = Rgt<br/>                left Rgt = Fwd<br/>                left Fwd = Lft</pre>"}, {"lang": "Elixir", "loc": 27, "block": "<pre class=\"text highlighted_source\">defmodule Langtons do<br/>  def ant(sizex, sizey) do<br/>    {px, py} = {div(sizex,2), div(sizey,2)}     # start position<br/>    move(MapSet.new, sizex, sizey, px, py, {1,0}, 0)<br/>  end<br/>\u00a0<br/>  defp move(plane, sx, sy, px, py, _, step) when px&lt;0 or sx&lt;px or py&lt;0 or sy&lt;py, do:<br/>    print(plane, sx, sy, px, py, step)<br/>  defp move(plane, sx, sy, px, py, dir, step) do<br/>    {plane2, {dx,dy}} = if {px,py} in plane,<br/>                          do:   {MapSet.delete(plane, {px,py}), turn_right(dir)},<br/>                          else: {MapSet.put(plane, {px,py}), turn_left(dir)}<br/>    move(plane2, sx, sy, px+dx, py+dy, {dx,dy}, step+1)<br/>  end<br/>\u00a0<br/>  defp turn_right({dx, dy}), do: {dy, -dx}<br/>  defp turn_left({dx, dy}), do: {-dy, dx}<br/>\u00a0<br/>  defp print(plane, sx, sy, px, py, step) do<br/>    IO.puts \"out of bounds after #{step} moves: (#{px}, #{py})\"<br/>    Enum.each(0..sy, fn j -&gt;<br/>      IO.puts Enum.map(0..sx, fn i -&gt; if {i,j} in plane, do: \"#\", else: \".\" end)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>Langtons.ant(100, 100)</pre>"}, {"lang": "Elm", "loc": 132, "block": "<pre class=\"text highlighted_source\">import Maybe as M<br/>import Matrix <br/>import Time exposing (Time, every, second)<br/>import List exposing (..)<br/>import String exposing (join)<br/>import Html exposing (div, h1, text)<br/>import Html.App exposing (program)<br/>import Svg <br/>import Svg.Attributes exposing (version, viewBox, cx, cy, r, x, y, x1, y1, x2, y2, fill,style, width, height, preserveAspectRatio)<br/>\u00a0<br/>w = 700<br/>h = 700<br/>dt = 0.0001<br/>\u00a0<br/>type Direction = North | West | South | East<br/>\u00a0<br/>type alias Model =<br/>  { rows\u00a0: Int<br/>  , cols\u00a0: Int<br/>  , boxes\u00a0: Matrix.Matrix Bool<br/>  , location\u00a0: Matrix.Location<br/>  , direction\u00a0: Direction<br/>  }<br/>\u00a0<br/>initModel\u00a0: Int -&gt; Int -&gt; Model<br/>initModel cols rows = <br/>     { rows = rows<br/>     , cols = cols <br/>     , boxes = Matrix.matrix rows cols (\\location -&gt; False)<br/>     , location = (rows//2,cols//2)<br/>     , direction = North<br/>     }<br/>\u00a0<br/>view model =<br/>  let<br/>    borderLineStyle = style \"stroke:black;stroke-width:0.3\"<br/>\u00a0<br/>    x1Min = x1 &lt;| toString 0<br/>    y1Min = y1 &lt;| toString 0<br/>    x1Max = x1 &lt;| toString model.cols<br/>    y1Max = y1 &lt;| toString model.rows<br/>    x2Min = x2 &lt;| toString 0<br/>    y2Min = y2 &lt;| toString 0<br/>    x2Max = x2 &lt;| toString model.cols<br/>    y2Max = y2 &lt;| toString model.rows<br/>\u00a0<br/>    borders = [ Svg.line [ x1Min, y1Min, x2Max, y2Min, borderLineStyle ] []<br/>              , Svg.line [ x1Max, y1Min, x2Max, y2Max, borderLineStyle ] []<br/>              , Svg.line [ x1Max, y1Max, x2Min, y2Max, borderLineStyle ] []<br/>              , Svg.line [ x1Min, y1Max, x2Min, y2Min, borderLineStyle ] []<br/>              ]<br/>\u00a0<br/>    circleInBox (row,col) color = <br/>      Svg.circle [ r \"0.25\"<br/>      , fill (color)<br/>      , cx (toString (toFloat col + 0.5))<br/>      , cy (toString (toFloat row + 0.5))<br/>      ] [] <br/>\u00a0<br/>    showUnvisited location box =<br/>       if box then [circleInBox location \"black\" ]<br/>              else []<br/>\u00a0<br/>    unvisited = model.boxes <br/>                  |&gt; Matrix.mapWithLocation showUnvisited <br/>                  |&gt; Matrix.flatten <br/>                  |&gt; concat<br/>\u00a0<br/>    maze = [ Svg.g [] &lt;| borders ++ unvisited ] <br/>\u00a0<br/>  in<br/>      div <br/>          [] <br/>          [ h1 [] [text \"Langton's Ant\"]<br/>          , Svg.svg <br/>              [ version \"1.1\"<br/>              , width (toString w)<br/>              , height (toString h)<br/>              , viewBox (join \" \" <br/>                           [ 0          |&gt; toString<br/>                           , 0          |&gt; toString<br/>                           , model.cols |&gt; toString<br/>                           , model.rows |&gt; toString ])<br/>              ] <br/>              maze<br/>          ]<br/>\u00a0<br/>updateModel\u00a0: Model -&gt; Model<br/>updateModel model = <br/>      let current = model.location<br/>          inBox =    snd current &gt;= 0 &amp;&amp; snd current &lt; model.cols<br/>                  &amp;&amp; fst current &gt;= 0 &amp;&amp; fst current &lt; model.rows<br/>      in if not inBox then<br/>           model<br/>         else<br/>           let currentValue = Matrix.get current model.boxes |&gt; M.withDefault False<br/>\u00a0<br/>               dir = case (model.direction, currentValue) of<br/>                       (North, True) -&gt; East<br/>                       (East, True) -&gt; South<br/>                       (South, True) -&gt; West<br/>                       (West, True) -&gt; North<br/>\u00a0<br/>                       (North, False) -&gt; West<br/>                       (East, False) -&gt; North<br/>                       (South, False) -&gt; East<br/>                       (West, False) -&gt; South<br/>\u00a0<br/>               next = case dir of<br/>                        North -&gt; (fst current+1, snd current)<br/>                        South -&gt; (fst current-1, snd current)<br/>                        East -&gt; (fst current, snd current+1)<br/>                        West -&gt; (fst current, snd current-1)<br/>\u00a0<br/>               boxes = Matrix.set current (not currentValue) model.boxes <br/>\u00a0<br/>           in {model | boxes=boxes, location=next, direction=dir}<br/>\u00a0<br/>type Msg = Tick Time <br/>\u00a0<br/>subscriptions model = every (dt * second) Tick<br/>\u00a0<br/>main =<br/>  let <br/>    update msg model = (updateModel model, Cmd.none)<br/>    init = (initModel 100 100 , Cmd.none)<br/>  in program <br/>       { init = init<br/>       , view = view<br/>       , update = update<br/>       , subscriptions = subscriptions<br/>       }</pre>"}, {"lang": "Erlang", "loc": 114, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> langtons_ant <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> neighbour<span class=\"sy1\">,</span> <span class=\"br0\">{</span>north<span class=\"sy1\">,</span> south<span class=\"sy1\">,</span> east<span class=\"sy1\">,</span> west<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> state<span class=\"sy1\">,</span> <span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"sy1\">,</span> controller<span class=\"sy1\">,</span> max_x<span class=\"sy1\">,</span> max_y<span class=\"sy1\">,</span> neighbour<span class=\"sy1\">,</span> position<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"re5\">Controller</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Max_x</span> <span class=\"sy3\">=</span> <span class=\"re5\">Max_y</span> <span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Pid_positions</span> <span class=\"sy3\">=</span> <span class=\"re3\">plane_create</span><span class=\"br0\">(</span> <span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Pids</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pid_positions</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>       <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>pid_positions<span class=\"sy1\">,</span> <span class=\"re5\">Pid_positions</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>       <span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">_Position</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keyfind</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Max_x</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid_positions</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>ant_start<span class=\"sy1\">,</span> north<span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>       <span class=\"kw1\">receive</span><br/>       <span class=\"br0\">{</span>ant_arrives<span class=\"sy1\">,</span> <span class=\"re5\">_Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><br/>       <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>       <span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"re5\">Pids</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"re5\">Pids</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Positions_colours</span> <span class=\"sy3\">=</span> <span class=\"re3\">display_positions_colours</span><span class=\"br0\">(</span> <span class=\"re5\">Pids</span><span class=\"sy1\">,</span> <span class=\"re5\">Controller</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">All_lines</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">display_line</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Positions_colours</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">Lines_with_black</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">All_lines</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span>black<span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">display_on_screen</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Lines</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Lines</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Lines_with_black</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_line</span><span class=\"br0\">(</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Positions_colours</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/proplists.html\"><span class=\"kw5\">proplists</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Positions_colours</span><span class=\"sy1\">,</span> white<span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_on_screen</span><span class=\"br0\">(</span> white <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re6\">$_</span><span class=\"sy1\">;</span><br/><span class=\"re3\">display_on_screen</span><span class=\"br0\">(</span> black <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> $#<span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_positions_colours</span><span class=\"br0\">(</span> <span class=\"re5\">Pids</span><span class=\"sy1\">,</span> <span class=\"re5\">Controller</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>position_colour<span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">display_positions_colours_receive</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">_X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_positions_colours_receive</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>position_colour<span class=\"sy1\">,</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Colour</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Colour</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">receive</span><br/>    <span class=\"br0\">{</span>pid_positions<span class=\"sy1\">,</span> <span class=\"re5\">Pid_positions</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">_My_position</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> loop_neighbour<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>position<span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid_positions</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">garbage_collect</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"co1\">% Shrink process after using large Pid_positions. For memory starved systems.</span><br/>        <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"br0\">{</span>neighbour<span class=\"sy3\">=</span><span class=\"re5\">Neighbour</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>ant_start<span class=\"sy1\">,</span> <span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span> <span class=\"kw1\">when</span> <span class=\"re5\">Controller</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>controller <span class=\"sy1\">-&gt;</span><br/>                <span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">New_state</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_ant_departs</span><span class=\"br0\">(</span> <span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>ant_arrives<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>                <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">New_state</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>ant_arrives<span class=\"sy1\">,</span> <span class=\"re5\">From</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>                <span class=\"br0\">{</span><span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">New_state</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_ant_arrives</span><span class=\"br0\">(</span> <span class=\"re5\">From</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                <span class=\"br0\">{</span><span class=\"re5\">To</span><span class=\"sy1\">,</span> <span class=\"re5\">Newest_state</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_ant_departs</span><span class=\"br0\">(</span> <span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">New_state</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                <span class=\"re5\">To</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>ant_arrives<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>                <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Newest_state</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>position_colour<span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span> <span class=\"kw1\">when</span> <span class=\"re5\">Controller</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>controller <span class=\"sy1\">-&gt;</span><br/>                <span class=\"re5\">Controller</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>position_colour<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>position<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>colour<span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>                <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">Controller</span><span class=\"br0\">}</span> <span class=\"kw1\">when</span> <span class=\"re5\">Controller</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>controller <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_ant_arrives</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Neighbour</span> <span class=\"sy3\">=</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>neighbour<span class=\"sy1\">,</span><br/>        <span class=\"re5\">From</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_ant_arrives_direction</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">{</span><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span><span class=\"re5\">From</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_ant_arrives_direction</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span>north<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">north</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_direction</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span>south<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">south</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_direction</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span>east<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">east</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_direction</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span>west<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">west</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span> north<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">west</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span> north<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>black<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">east</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span> south<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">east</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span> south<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>black<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">west</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span> east<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">north</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span> east<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>black<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">south</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span> west<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">south</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_arrives_new_direction</span><span class=\"br0\">(</span> west<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>black<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">north</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_ant_departs</span><span class=\"br0\">(</span> north<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>position<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> max_y<span class=\"sy3\">=</span><span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>controller<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_departs</span><span class=\"br0\">(</span> south<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>position<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>controller<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_departs</span><span class=\"br0\">(</span> east<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>position<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">_Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> max_x<span class=\"sy3\">=</span><span class=\"re5\">X</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>controller<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_departs</span><span class=\"br0\">(</span> west<span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>position<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">_Y</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>controller<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_departs</span><span class=\"br0\">(</span> <span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Neighbour</span> <span class=\"sy3\">=</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>neighbour<span class=\"sy1\">,</span><br/>        <span class=\"re5\">Pid</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_ant_departs_pid</span><span class=\"br0\">(</span> <span class=\"re5\">Direction</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span><span class=\"re3\">other_colour</span><span class=\"br0\">(</span><span class=\"re5\">State</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_ant_departs_pid</span><span class=\"br0\">(</span> north<span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span>north<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_departs_pid</span><span class=\"br0\">(</span> south<span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span>south<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_departs_pid</span><span class=\"br0\">(</span> east<span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span>east<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_ant_departs_pid</span><span class=\"br0\">(</span> west<span class=\"sy1\">,</span> #<span class=\"re7\">neighbour</span><span class=\"br0\">{</span>west<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_neighbour</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Y</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">My_y</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"re8\">#</span><span class=\"re7\">neighbour</span><span class=\"br0\">{</span>north<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_neighbour</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Y</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">My_y</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"re8\">#</span><span class=\"re7\">neighbour</span><span class=\"br0\">{</span>south<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_neighbour</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">My_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">My_x</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">My_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"re8\">#</span><span class=\"re7\">neighbour</span><span class=\"br0\">{</span>east<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_neighbour</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">My_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">My_x</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">My_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Neighbour</span><span class=\"re8\">#</span><span class=\"re7\">neighbour</span><span class=\"br0\">{</span>west<span class=\"sy3\">=</span><span class=\"re5\">Pid</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_neighbour</span><span class=\"br0\">(</span> <span class=\"re5\">_Pid_position</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">other_colour</span><span class=\"br0\">(</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>white<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">black</span><span class=\"sy1\">;</span><br/><span class=\"re3\">other_colour</span><span class=\"br0\">(</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span>black<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">white</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">plane_create</span><span class=\"br0\">(</span> <span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re3\">plane_create_cell</span><span class=\"br0\">(</span><span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"re3\">plane_create_cell</span><span class=\"br0\">(</span> <span class=\"re5\">Controller</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> <span class=\"re5\">Position</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn_link</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>controller<span class=\"sy3\">=</span><span class=\"re5\">Controller</span><span class=\"sy1\">,</span> max_x<span class=\"sy3\">=</span><span class=\"re5\">Max_x</span><span class=\"sy1\">,</span> max_y<span class=\"sy3\">=</span><span class=\"re5\">Max_y</span><span class=\"sy1\">,</span> position<span class=\"sy3\">=</span><span class=\"re5\">Position</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 65, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> std\\console.e<br/><span class=\"kw1\">include</span> std\\graphics.e<br/>\u00a0<br/><span class=\"kw2\">sequence</span> grid <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"co1\">--fill 100 by 100 grid with white (1)</span><br/><span class=\"kw2\">sequence</span> antData <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">48</span><span class=\"sy2\">,</span> <span class=\"nu0\">53</span><span class=\"sy2\">,</span> <span class=\"nu0\">360</span><span class=\"br0\">}</span> <span class=\"co1\">--ant x coordinate, y coordinate, facing angle</span><br/><span class=\"kw2\">integer</span> iterations <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">--while ant isn't out of bounds of the 100 by 100 area..</span><br/><span class=\"kw1\">while</span> antData<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> antData<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> &lt; <span class=\"nu0\">100</span> <span class=\"kw1\">and</span> antData<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> antData<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> &lt; <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>    switch grid<span class=\"br0\">[</span>antData<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>antData<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        case <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><span class=\"co1\">--cell is already white</span><br/>            grid<span class=\"br0\">[</span>antData<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>antData<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">--cell turns black, ant turns right</span><br/>            antData<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">+=</span> <span class=\"nu0\">90</span><br/>            break<br/>        case <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><span class=\"co1\">--cell is already black</span><br/>            grid<span class=\"br0\">[</span>antData<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>antData<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"co1\">--cell turns white, ant turns left</span><br/>            antData<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">-=</span> <span class=\"nu0\">90</span><br/>            break<br/>    <span class=\"kw1\">end</span> switch<br/>    <span class=\"co1\">--wrap ant directions if &gt; 360 or &lt; 90 (by 90)</span><br/>    switch antData<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        case <span class=\"nu0\">450</span> <span class=\"kw1\">then</span><br/>            antData<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">90</span><br/>            break<br/>        case <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            antData<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">360</span><br/>            break<br/>    <span class=\"kw1\">end</span> switch  <br/>    <span class=\"co1\">--move ant based on its new facing, one square</span><br/>    <span class=\"co1\">--first north, then south, east, west</span><br/>    switch antData<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        case <span class=\"nu0\">360</span> <span class=\"kw1\">then</span><br/>            antData<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">-=</span> <span class=\"nu0\">1</span><br/>            break<br/>        case <span class=\"nu0\">180</span> <span class=\"kw1\">then</span><br/>            antData<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>            break<br/>        case <span class=\"nu0\">90</span> <span class=\"kw1\">then</span><br/>            antData<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>            break<br/>        case <span class=\"nu0\">270</span> <span class=\"kw1\">then</span><br/>            antData<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">-=</span> <span class=\"nu0\">1</span><br/>            break<br/>    <span class=\"kw1\">end</span> switch<br/>iterations <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>wrap<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">--don't wrap text output, the grid wouldnt display as a square</span><br/>\u00a0<br/><span class=\"kw1\">for</span> y<span class=\"sy1\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> x<span class=\"sy1\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>        switch grid<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"kw1\">do</span><span class=\"co1\">--each grid block , based on color</span><br/>            case <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>                break<br/>            case <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>                break<br/>        <span class=\"kw1\">end</span> switch<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span>     <br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>%d Iterations<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>iterations<span class=\"br0\">)</span><br/>any_key<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"co1\">--wait for keypress, put default message 'press any key..'</span></pre>"}, {"lang": "Fantom", "loc": 132, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class World<br/>{<br/>  Int height<br/>  Int width<br/>  Bool[] state<br/>\u00a0<br/>  new make (Int height, Int width)<br/>  {<br/>    this.height = height<br/>    this.width = width<br/>    state = List(Bool#, height * width)<br/>    (height*width).times { state.add (false) }<br/>  }<br/>\u00a0<br/>  Bool inWorld (Int x, Int y)<br/>  {<br/>    x &gt;= 0 &amp;&amp; x &lt; width &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; height<br/>  }<br/>\u00a0<br/>  Void show ()<br/>  {<br/>    height.times |h|<br/>    {<br/>      width.times |w|<br/>      {<br/>        Env.cur.out.writeChar (state[w*width+h]\u00a0? '#'\u00a0: '.')<br/>      }<br/>      Env.cur.out.writeChar ('\\n')<br/>    }<br/>  }<br/>\u00a0<br/>  Void flip (Int x, Int y)<br/>  {<br/>    state[x*width + y] =\u00a0!state[x*width + y]<br/>  }<br/>\u00a0<br/>  Bool stateOf (Int x, Int y)<br/>  {<br/>    state[x*width + y]<br/>  }<br/>}<br/>\u00a0<br/>enum class Direction <br/>{ <br/>  up (0, -1), <br/>  down (0, 1), <br/>  left (-1, 0), <br/>  right (1, 0)<br/>\u00a0<br/>  private new make (Int deltaX, Int deltaY)<br/>  {<br/>    this.deltaX = deltaX<br/>    this.deltaY = deltaY<br/>  }<br/>\u00a0<br/>  Direction rotateLeft ()<br/>  {<br/>    if (this == up) return left<br/>    if (this == down) return right<br/>    if (this == left) return down<br/>    // if (this == right) <br/>    return up<br/>  }<br/>\u00a0<br/>  Direction rotateRight ()<br/>  {<br/>    if (this == up) return right<br/>    if (this == down) return left<br/>    if (this == left) return up<br/>    // if (this == right) <br/>    return down<br/>  }<br/>\u00a0<br/>  const Int deltaX<br/>  const Int deltaY<br/>}<br/>\u00a0<br/>class Ant<br/>{<br/>  World world<br/>  Int currX<br/>  Int currY<br/>  Direction direction<br/>\u00a0<br/>  new make (World world, Int x, Int y)<br/>  {<br/>    this.world = world<br/>    currX = x<br/>    currY = y<br/>    direction = Direction.up<br/>  }<br/>\u00a0<br/>  Bool inWorld ()<br/>  {<br/>    world.inWorld (currX, currY)<br/>  }<br/>\u00a0<br/>  // the ant movement rules<br/>  Void move ()<br/>  {<br/>    if (world.stateOf (currX, currY))<br/>    {<br/>      direction = direction.rotateLeft<br/>    }<br/>    else<br/>    {<br/>      direction = direction.rotateRight<br/>    }<br/>    world.flip (currX, currY)<br/>    currX += direction.deltaX<br/>    currY += direction.deltaY<br/>  }<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  Void main ()<br/>  {<br/>    world\u00a0:= World (100, 100)<br/>    ant\u00a0:= Ant (world, 50, 50)<br/>    numIterations\u00a0:= 0<br/>    while (ant.inWorld)<br/>    {<br/>      ant.move<br/>      numIterations += 1<br/>    }<br/>    world.show<br/>    echo (\"Finished in $numIterations iterations\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 48, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Langtons_Ant<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">csize</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">direction</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, maxsteps <span class=\"sy0\">=</span> <span class=\"nu0\">20000</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, x, y  <br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">cells</span><span class=\"br0\">(</span>csize,csize<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">cflag</span><br/>\u00a0<br/>  x <span class=\"sy0\">=</span> csize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>;   y <span class=\"sy0\">=</span> x<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, maxsteps<br/>    cflag <span class=\"sy0\">=</span> cells<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>cflag<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      direction <span class=\"sy0\">=</span> direction <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>direction <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> direction <span class=\"sy0\">=</span> direction <span class=\"sy0\">-</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">else</span><br/>      direction <span class=\"sy0\">=</span> direction <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>direction <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> direction <span class=\"sy0\">=</span> direction <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    cells<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> cells<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">select</span> <span class=\"kw1\">case</span><span class=\"br0\">(</span>direction<span class=\"br0\">)</span><br/>      <span class=\"kw1\">case</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">case</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">case</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        y <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">case</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>x &lt; <span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> x &gt; csize <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> y &lt; <span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> y &gt; csize<span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, csize<br/>    <span class=\"kw1\">do</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, csize<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>cells<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\".\"</span><br/>      <span class=\"kw1\">else</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"#\"</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 65, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 16-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s gui</span><br/>\u00a0<br/><span class=\"co1\">' a cell size of 4 x 4 pixels is used</span><br/><span class=\"co1\">' In FreeBASIC the 0,0 is the top left corner</span><br/>\u00a0<br/><span class=\"kw1\">ScreenRes</span> <span class=\"nu0\">400</span>,<span class=\"nu0\">400</span>,<span class=\"nu0\">8</span> <span class=\"co1\">' give a 100 by 100 field</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span> p = <span class=\"kw1\">ScreenPtr</span><br/><span class=\"kw1\">If</span> p = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">End</span> <span class=\"co1\">' p does not point to screen</span><br/>\u00a0<br/><span class=\"kw1\">Palette</span> <span class=\"nu0\">0</span>,       <span class=\"nu0\">0</span>,   <span class=\"nu0\">0</span>,   <span class=\"nu0\">0</span>      <span class=\"co1\">' index 0 = black</span><br/><span class=\"kw1\">Palette</span> <span class=\"nu0\">255</span>,   <span class=\"nu0\">255</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">255</span>      <span class=\"co1\">' index 225 = white</span><br/>\u00a0<br/><span class=\"kw1\">Line</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"nu0\">799</span>, <span class=\"nu0\">799</span><span class=\"br0\">)</span>, <span class=\"nu0\">255</span>, bf   <span class=\"co1\">' draw box and fill it with white color</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> count, offset, x = <span class=\"nu0\">199</span>, y = <span class=\"nu0\">199</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> col   <span class=\"co1\">' = color</span><br/><span class=\"co1\">' direction, 0 = up, 1 = right, 2 = down, 3 = left</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> d     <span class=\"co1\">' d = 0, looking up</span><br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>  offset = x + y * <span class=\"nu0\">400</span><br/>  col = p<span class=\"br0\">[</span>offset<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> col = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    d = <span class=\"br0\">(</span>d -<span class=\"nu0\">1</span><span class=\"br0\">)</span> And <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Else</span><br/>    d = <span class=\"br0\">(</span>d +<span class=\"nu0\">1</span><span class=\"br0\">)</span> And <span class=\"nu0\">3</span><br/>  EndIf<br/>\u00a0<br/>  col = col <span class=\"kw1\">Xor</span> <span class=\"nu0\">255</span> <span class=\"co1\">' flip the color</span><br/>\u00a0<br/>  <span class=\"kw1\">ScreenLock</span>        <span class=\"co1\">' don't update screen while we are drawing</span><br/>\u00a0<br/>  <span class=\"co1\">' draw a 4*4 block and paint it with palette color [0 | 255]</span><br/>  <span class=\"kw1\">Line</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> - <span class=\"br0\">(</span>x +<span class=\"nu0\">3</span>, y -<span class=\"nu0\">3</span><span class=\"br0\">)</span>, col, bf<br/>\u00a0<br/>  <span class=\"kw1\">ScreenUnLock</span>    <span class=\"co1\">' allow screen update's</span><br/>\u00a0<br/>  <span class=\"co1\">'Sleep 100       ' slow the program down if needed</span><br/>\u00a0<br/>  <span class=\"co1\">' true = 0, false = -1</span><br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span>d And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>    x = x + <span class=\"br0\">(</span>d = <span class=\"nu0\">1</span><span class=\"br0\">)</span> * <span class=\"nu0\">4</span> - <span class=\"br0\">(</span>d = <span class=\"nu0\">3</span><span class=\"br0\">)</span> * <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Else</span><br/>    y = y - <span class=\"br0\">(</span>d = <span class=\"nu0\">0</span><span class=\"br0\">)</span> * <span class=\"nu0\">4</span> + <span class=\"br0\">(</span>d = <span class=\"nu0\">2</span><span class=\"br0\">)</span> * <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>  count += <span class=\"nu0\">1</span><br/>  <span class=\"co1\">' update step count window title bar</span><br/>  <span class=\"kw1\">WindowTitle</span> <span class=\"st0\">\"Langton's ant step: \"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">' has user clicked on close window \"X\" then end program</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">InKey</span> = <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> + <span class=\"st0\">\"k\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">End</span><br/>\u00a0<br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> x &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Or</span> x &gt; <span class=\"nu0\">398</span> <span class=\"kw1\">Or</span> y &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Or</span> y &gt; <span class=\"nu0\">398</span><br/>\u00a0<br/><span class=\"co1\">' display total count in window title bar</span><br/><span class=\"kw1\">WindowTitle</span> <span class=\"st0\">\"Langton's ant has left the field in \"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span> + <span class=\"st0\">\" steps\"</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"co1\">'Print\u00a0: Print \"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Gambas", "loc": 76, "block": "<pre class=\"gambas highlighted_source\"><span class=\"co1\">'This code will create a GUI Form to display the result</span><br/>\u00a0<br/>hGridView <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://www.google.com/search?hl=en&amp;q=gridview+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">GridView</span></a>                                               <span class=\"co1\">'The display is on a GridView</span><br/>iCol <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">38</span>                                                <span class=\"co1\">'Column start position</span><br/>iRow <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">30</span>                                                <span class=\"co1\">'Row start position</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_show<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>SetUpForm                                                           <span class=\"co1\">'Run the SetUpForm routine</span><br/>Go                                                                  <span class=\"co1\">'Run the Go routine</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Go<span class=\"br0\">(</span><span class=\"br0\">)</span>                                                     <span class=\"co1\">'This is what does the work</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siDir <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>                                              <span class=\"co1\">'Stores the Direction of the ant 0 = North, 1 = East, 2 = South ,3 = West</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a>                                                <span class=\"co1\">'Counter</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/repeat\"><span class=\"kw1\">Repeat</span></a>                                                              <span class=\"co1\">'Repeat loop</span><br/>  <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> siCount                                                       <span class=\"co1\">'Increase siCount</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> hGridView<span class=\"br0\">[</span>iRow, iCol<span class=\"br0\">]</span>.<span class=\"me1\">background</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                     <span class=\"co1\">'If the Background of the cell is white then..(Right turn)</span><br/>    hGridView<span class=\"br0\">[</span>iRow, iCol<span class=\"br0\">]</span>.<span class=\"me1\">background</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                            <span class=\"co1\">'Make the Background black</span><br/>    siDir <span class=\"sy0\">=</span> Direction<span class=\"br0\">(</span>siDir, <a href=\"http://gambasdoc.org/help/lang/true\"><span class=\"kw1\">True</span></a><span class=\"br0\">)</span>                                  <span class=\"co1\">'Get the direction to turn</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDir <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/dec\"><span class=\"kw1\">Dec</span></a> iRow                                      <span class=\"co1\">'Decrease Row if facing North</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDir <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iCol                                      <span class=\"co1\">'Increase Column if facing East</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDir <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iRow                                      <span class=\"co1\">'Increase Row if facing South</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDir <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/dec\"><span class=\"kw1\">Dec</span></a> iCol                                      <span class=\"co1\">'Decrease Column if facing West</span><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <br/><span class=\"co1\">'Wait                                                                'This will allow you to see the Grid being populated. Rem it out for an instant result</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> hGridView<span class=\"br0\">[</span>iRow, iCol<span class=\"br0\">]</span>.<span class=\"me1\">background</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                      <span class=\"co1\">'If the Background of the cell is black then.. Left Turn</span><br/>    hGridView<span class=\"br0\">[</span>iRow, iCol<span class=\"br0\">]</span>.<span class=\"me1\">background</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>                           <span class=\"co1\">'Make the Background white</span><br/>    siDir <span class=\"sy0\">=</span> Direction<span class=\"br0\">(</span>siDir, <a href=\"http://gambasdoc.org/help/lang/false\"><span class=\"kw1\">False</span></a><span class=\"br0\">)</span>                                 <span class=\"co1\">'Get the direction to turn</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDir <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/dec\"><span class=\"kw1\">Dec</span></a> iRow                                      <span class=\"co1\">'Decrease Row if facing North</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDir <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iCol                                      <span class=\"co1\">'Increase Column if facing East</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDir <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iRow                                      <span class=\"co1\">'Increase Row if facing South</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDir <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/dec\"><span class=\"kw1\">Dec</span></a> iCol                                      <span class=\"co1\">'Decrease Column if facing West</span><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <br/><a href=\"http://gambasdoc.org/help/lang/until\"><span class=\"kw1\">Until</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">9660</span>                                                <span class=\"co1\">'Loop 9660 times</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Direction<span class=\"br0\">(</span>siDirection <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a>, bWay <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/boolean\"><span class=\"kw4\">Boolean</span></a><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/byte\"><span class=\"kw4\">Byte</span></a> <span class=\"co1\">'To workout which way to go</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> bWay <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                                                        <span class=\"co1\">'If turning Right then</span><br/>  <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> siDirection                                                   <span class=\"co1\">'Increase siDirection e.g. 0 = North to 1 = East </span><br/><a href=\"http://gambasdoc.org/help/lang/else\"><span class=\"kw1\">Else</span></a>                                                                <span class=\"co1\">'Else if turning Left</span><br/>  <a href=\"http://gambasdoc.org/help/lang/dec\"><span class=\"kw1\">Dec</span></a> siDirection                                                   <span class=\"co1\">'Decrease siDirection e.g. 2 = South to 1 = East </span><br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDirection <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> siDirection <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>                             <span class=\"co1\">'To address 0 - 1 = -1</span><br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siDirection <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> siDirection <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                             <span class=\"co1\">'To address 3 + 1 = 4</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/return\"><span class=\"kw1\">Return</span></a> siDirection                                                  <span class=\"co1\">'Return the correct direction</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> SetUpForm<span class=\"br0\">(</span><span class=\"br0\">)</span>                                              <span class=\"co1\">'Set up the Form and Create the Gridview</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/with\"><span class=\"kw1\">With</span></a> <a href=\"http://gambasdoc.org/help/lang/me\"><span class=\"kw1\">Me</span></a>                                                             <span class=\"co1\">'Change the Properties of the Form</span><br/>  .<span class=\"me1\">Height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1012</span>                                                    <span class=\"co1\">'Set the Form Height</span><br/>  .<span class=\"me1\">Width</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1012</span>                                                     <span class=\"co1\">'Set the Form Width</span><br/>  .<span class=\"me1\">Arrangement</span> <span class=\"sy0\">=</span> Arrange.<span class=\"me1\">Vertical</span>                                   <span class=\"co1\">'Set the Form Arrangement</span><br/>  .<span class=\"me1\">Padding</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>                                                      <span class=\"co1\">'Set the Form Padding (Border)</span><br/>  .<span class=\"me1\">title</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Langton's ant\"</span>                                          <span class=\"co1\">'Set the Form Title</span><br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/with\"><span class=\"kw1\">With</span></a><br/>\u00a0<br/>hGridView <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://www.google.com/search?hl=en&amp;q=gridview+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">GridView</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/me\"><span class=\"kw1\">Me</span></a><span class=\"br0\">)</span>                                        <span class=\"co1\">'Create a GridView</span><br/><a href=\"http://gambasdoc.org/help/lang/with\"><span class=\"kw1\">With</span></a> hGridView                                                      <span class=\"co1\">'Change the Properties of the GridView</span><br/>  .<span class=\"me1\">Columns</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span>                                              <span class=\"co1\">'Create 100 Columns</span><br/>  .<span class=\"me1\">Rows</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span>                                                 <span class=\"co1\">'Create 100 Rows</span><br/>  .<span class=\"me1\">Columns</span>.<span class=\"me1\">Width</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>                                               <span class=\"co1\">'Set the Column Width</span><br/>  .<span class=\"me1\">Rows</span>.<span class=\"me1\">Height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>                                                 <span class=\"co1\">'Set the Column Height</span><br/>  .<span class=\"me1\">expand</span> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/true\"><span class=\"kw1\">True</span></a>                                                    <span class=\"co1\">'Set the Gridview to Expand to fill the Form</span><br/>  .<span class=\"me1\">background</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>                                                  <span class=\"co1\">'Set the Gridview background to White</span><br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/with\"><span class=\"kw1\">With</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GFA Basic", "loc": 95, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'<br/>' Langton's ant<br/>'<br/>' World is a global boolean array, 100x100 in size<br/>width%=100<br/>height%=100<br/>DIM world!(width%,height%)<br/>ARRAYFILL world!(),FALSE<br/>' Time in world<br/>time%=0<br/>' Ant is represented by a global three-element array<br/>' holding: x, y, direction [0=north,1=west,2=south,3=east]<br/>DIM ant%(3)<br/>'<br/>@setup_ant<br/>@run_ant<br/>@display_world<br/>'<br/>' Displays the world to file \"langton.out\": . for false, # for true<br/>'<br/>PROCEDURE display_world<br/>  LOCAL i%,j%<br/>  OPEN \"o\",#1,\"langton.out\"<br/>  PRINT #1,\"Time in world: \";time%;\" ticks\"<br/>  FOR i%=0 TO width%-1<br/>    FOR j%=0 TO height%-1<br/>      IF world!(i%,j%)<br/>        PRINT #1,\"#\";<br/>      ELSE<br/>        PRINT #1,\".\";<br/>      ENDIF<br/>    NEXT j%<br/>    PRINT #1,\"\"<br/>  NEXT i%<br/>  CLOSE #1<br/>RETURN<br/>'<br/>' Set up the ant to start at (50,50) facing north<br/>'<br/>PROCEDURE setup_ant<br/>  ant%(0)=50<br/>  ant%(1)=50<br/>  ant%(2)=0<br/>RETURN<br/>'<br/>' check if ant position is within world's bounds<br/>'<br/>FUNCTION ant_in_world<br/>  RETURN ant%(0)&gt;=0 AND ant%(0)&lt;width% AND ant%(1)&gt;=0 AND ant%(1)&lt;height%<br/>ENDFUNC<br/>'<br/>' Turn ant direction to left<br/>'<br/>PROCEDURE ant_turn_left<br/>  ant%(2)=(ant%(2)+1) MOD 4<br/>RETURN<br/>'<br/>' Turn ant direction to right<br/>'<br/>PROCEDURE ant_turn_right<br/>  ant%(2)=(ant%(2)+3) MOD 4<br/>RETURN<br/>'<br/>' Ant takes a step forward in current direction<br/>'<br/>PROCEDURE ant_step_forward<br/>  SELECT ant%(2)<br/>  CASE 0<br/>    ant%(0)=ant%(0)+1<br/>  CASE 1<br/>    ant%(1)=ant%(1)+1<br/>  CASE 2<br/>    ant%(0)=ant%(0)-1<br/>  CASE 3<br/>    ant%(1)=ant%(1)-1<br/>  ENDSELECT<br/>RETURN<br/>'<br/>' Run the ant until it falls out of the world<br/>'<br/>PROCEDURE run_ant<br/>  WHILE @ant_in_world<br/>    time%=time%+1<br/>    IF world!(ant%(0),ant%(1))\u00a0! true for white<br/>      world!(ant%(0),ant%(1))=FALSE<br/>      @ant_turn_left<br/>    ELSE\u00a0! false for black<br/>      world!(ant%(0),ant%(1))=TRUE<br/>      @ant_turn_right<br/>    ENDIF<br/>    @ant_step_forward<br/>  WEND<br/>RETURN<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 53, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"image\"</span><br/>    <span class=\"st0\">\"image/color\"</span><br/>    <span class=\"st0\">\"image/draw\"</span><br/>    <span class=\"st0\">\"image/png\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    up <span class=\"sy2\">=</span> iota<br/>    rt<br/>    dn<br/>    lt<br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    bounds <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">)</span><br/>    im <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewGray<span class=\"sy1\">(</span>bounds<span class=\"sy1\">)</span><br/>    gBlack <span class=\"sy2\">:=</span> color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>    gWhite <span class=\"sy2\">:=</span> color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">{</span><span class=\"nu0\">255</span><span class=\"sy1\">}</span><br/>    draw<span class=\"sy3\">.</span>Draw<span class=\"sy1\">(</span>im<span class=\"sy1\">,</span> bounds<span class=\"sy1\">,</span> image<span class=\"sy3\">.</span>NewUniform<span class=\"sy1\">(</span>gWhite<span class=\"sy1\">),</span> image<span class=\"sy3\">.</span>ZP<span class=\"sy1\">,</span> draw<span class=\"sy3\">.</span>Src<span class=\"sy1\">)</span><br/>    pos <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>Point<span class=\"sy1\">{</span><span class=\"nu0\">50</span><span class=\"sy1\">,</span> <span class=\"nu0\">50</span><span class=\"sy1\">}</span><br/>    dir <span class=\"sy2\">:=</span> up<br/>    <span class=\"kw1\">for</span> pos<span class=\"sy3\">.</span>In<span class=\"sy1\">(</span>bounds<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> im<span class=\"sy3\">.</span>At<span class=\"sy1\">(</span>pos<span class=\"sy3\">.</span>X<span class=\"sy1\">,</span> pos<span class=\"sy3\">.</span>Y<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">)</span><span class=\"sy3\">.</span>Y <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> gBlack<span class=\"sy3\">.</span>Y<span class=\"sy1\">:</span><br/>            im<span class=\"sy3\">.</span>SetGray<span class=\"sy1\">(</span>pos<span class=\"sy3\">.</span>X<span class=\"sy1\">,</span> pos<span class=\"sy3\">.</span>Y<span class=\"sy1\">,</span> gWhite<span class=\"sy1\">)</span><br/>            dir<span class=\"sy2\">--</span><br/>        <span class=\"kw1\">case</span> gWhite<span class=\"sy3\">.</span>Y<span class=\"sy1\">:</span><br/>            im<span class=\"sy3\">.</span>SetGray<span class=\"sy1\">(</span>pos<span class=\"sy3\">.</span>X<span class=\"sy1\">,</span> pos<span class=\"sy3\">.</span>Y<span class=\"sy1\">,</span> gBlack<span class=\"sy1\">)</span><br/>            dir<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> dir&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            pos<span class=\"sy3\">.</span>X <span class=\"sy2\">+=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span> dir&amp;<span class=\"nu0\">2</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            pos<span class=\"sy3\">.</span>Y <span class=\"sy2\">-=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span> dir&amp;<span class=\"nu0\">2</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"st0\">\"ant.png\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> png<span class=\"sy3\">.</span>Encode<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> im<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Set <span class=\"br0\">(</span>member<span class=\"sy0\">,</span>insert<span class=\"sy0\">,</span>delete<span class=\"sy0\">,</span>Set<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 52, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> graphics<span class=\"sy1\">,</span>printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <br/>   e <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">100</span>   <span class=\"co1\"># 100 or whole number from command line</span><br/>   LangtonsAnt<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">record</span> antrec<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>nesw<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> LangtonsAnt<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>   size  <span class=\"sy1\">:=</span> sprintf<span class=\"br0\">(</span><span class=\"st0\">\"size=%d,%d\"</span><span class=\"sy1\">,</span>e<span class=\"sy1\">,</span>e<span class=\"br0\">)</span><br/>   label <span class=\"sy1\">:=</span> sprintf<span class=\"br0\">(</span><span class=\"st0\">\"Langton's Ant\u00a0%dx%d [%d]\"</span><span class=\"sy1\">,</span>e<span class=\"sy1\">,</span>e<span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   <span class=\"sy1\">&amp;</span><span class=\"kw3\">window</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span>label<span class=\"sy1\">,</span><span class=\"st0\">\"g\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"bg=white\"</span><span class=\"sy1\">,</span>size<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <br/>               <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Unable to open window\"</span><span class=\"br0\">)</span> <br/>\u00a0<br/>   ant <span class=\"sy1\">:=</span> antrec<span class=\"br0\">(</span>e<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>e<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,?</span><span class=\"nu0\">4</span><span class=\"sy1\">%</span>4<span class=\"br0\">)</span><br/>   board <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"sy1\">!</span>board <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>e<span class=\"sy1\">,</span><span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   k <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>      k <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"fg=red\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw5\">DrawPoint</span><span class=\"br0\">(</span>ant<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"sy1\">,</span>ant<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><br/>\u00a0<br/>      cell <span class=\"sy1\">:=</span> board<span class=\"br0\">[</span>ant<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"sy1\">,</span>ant<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">if</span> cell <span class=\"sy1\">==</span> <span class=\"st0\">\"w\"</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>                        <span class=\"co1\"># white cell</span><br/>         <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"fg=black\"</span><span class=\"br0\">)</span><br/>         ant<span class=\"sy1\">.</span><span class=\"me1\">nesw</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>ant<span class=\"sy1\">.</span><span class=\"me1\">nesw</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">%</span> <span class=\"nu0\">4</span>            <span class=\"co1\"># . turn right</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span>                                       <span class=\"co1\"># black cell</span><br/>         <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span> <span class=\"st0\">\"fg=white\"</span><span class=\"br0\">)</span>   <br/>         ant<span class=\"sy1\">.</span><span class=\"me1\">nesw</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>ant<span class=\"sy1\">.</span><span class=\"me1\">nesw</span> <span class=\"sy1\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy1\">%</span> <span class=\"nu0\">4</span>            <span class=\"co1\"># . turn left = 3 x right</span><br/>         <span class=\"br0\">}</span><br/>      board<span class=\"br0\">[</span>ant<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"sy1\">,</span>ant<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span>cell<span class=\"sy1\">,</span><span class=\"st0\">\"wb\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"bw\"</span><span class=\"br0\">)</span>    <span class=\"co1\"># flip colour         </span><br/>      <span class=\"kw5\">DrawPoint</span><span class=\"br0\">(</span>ant<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"sy1\">,</span>ant<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">case</span> ant<span class=\"sy1\">.</span><span class=\"me1\">nesw</span> <span class=\"kw1\">of</span> <span class=\"br0\">{</span>                           <span class=\"co1\"># go</span><br/>         <span class=\"nu0\">0</span><span class=\"sy1\">:</span> ant<span class=\"sy1\">.</span><span class=\"me1\">y</span> <span class=\"sy1\">-:=</span> <span class=\"nu0\">1</span>                            <span class=\"co1\"># . north</span><br/>         <span class=\"nu0\">1</span><span class=\"sy1\">:</span> ant<span class=\"sy1\">.</span><span class=\"me1\">x</span> <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span>                            <span class=\"co1\"># . east</span><br/>         <span class=\"nu0\">2</span><span class=\"sy1\">:</span> ant<span class=\"sy1\">.</span><span class=\"me1\">y</span> <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span>                            <span class=\"co1\"># . south</span><br/>         <span class=\"nu0\">3</span><span class=\"sy1\">:</span> ant<span class=\"sy1\">.</span><span class=\"me1\">x</span> <span class=\"sy1\">-:=</span> <span class=\"nu0\">1</span>                            <span class=\"co1\"># . west</span><br/>         <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> ant<span class=\"sy1\">.</span><span class=\"me1\">x</span> <span class=\"sy1\">&lt;=</span> e <span class=\"sy1\">&amp;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> ant<span class=\"sy1\">.</span><span class=\"me1\">y</span> <span class=\"sy1\">&lt;=</span> e <span class=\"kw1\">then</span> <span class=\"kw1\">next</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">break</span>      <br/>      <span class=\"br0\">}</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"Langton's Ant exited the field after\u00a0%d rounds.<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>k<span class=\"br0\">)</span><br/>   label <span class=\"sy1\">:=</span> sprintf<span class=\"br0\">(</span><span class=\"st0\">\"label=Langton's Ant\u00a0%dx%d [%d]\"</span><span class=\"sy1\">,</span>e<span class=\"sy1\">,</span>e<span class=\"sy1\">,</span>k<span class=\"br0\">)</span><br/>   <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span>label<span class=\"br0\">)</span><br/>   WDone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">dirs=: <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span> <span class=\"nu0\">_1</span>,:<span class=\"nu0\">_1</span> <span class=\"nu0\">0</span><br/>langton=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  loc=. &lt;.-:$cells=. <span class=\"sy0\">(</span><span class=\"nu0\">_2</span>{.<span class=\"kw2\">y</span>,<span class=\"kw2\">y</span><span class=\"sy0\">)</span>$dir=. <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while.</span> *./<span class=\"sy0\">(</span><span class=\"nu0\">0</span>&lt;:loc<span class=\"sy0\">)</span>, loc&lt;$cells <span class=\"kw1\">do.</span><br/>    color=. <span class=\"sy0\">(</span>&lt;loc<span class=\"sy0\">)</span> { cells<br/>    cells=. <span class=\"sy0\">(</span>-.color<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>&lt;loc<span class=\"sy0\">)</span>} cells<br/>    dir=. <span class=\"nu0\">4</span> | dir +  <span class=\"nu0\">_1</span> ^ color<br/>    loc=. loc + dir { dirs<br/>  <span class=\"kw1\">end.</span><br/>  <span class=\"st_h\">' #'</span> {~ cells<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 68, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Color</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Graphics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.JFrame</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.JPanel</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Langton <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> planePanel<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> ZOOM <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> Langton<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> plane<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tplanePanel <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t@Override<br/>\t\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paint<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> plane.<span class=\"me1\">length</span><span class=\"sy0\">;</span>y<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> plane<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span>x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\tg.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>plane<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">BLACK</span> <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">WHITE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\tg.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>x <span class=\"sy0\">*</span> ZOOM, y <span class=\"sy0\">*</span> ZOOM, ZOOM, ZOOM<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"co1\">//mark the starting point</span><br/>\t\t\t\tg.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">GREEN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tg.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>plane<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> ZOOM,<br/>\t\t\t\t           plane.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> ZOOM, ZOOM<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, ZOOM<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\tplanePanel.<span class=\"me1\">setSize</span><span class=\"br0\">(</span>plane<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, plane.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tadd<span class=\"br0\">(</span>planePanel<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsetSize<span class=\"br0\">(</span>ZOOM <span class=\"sy0\">*</span> plane<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span>, ZOOM <span class=\"sy0\">*</span> plane.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsetDefaultCloseOperation<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsetVisible<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">new</span> Langton<span class=\"br0\">(</span>runAnt<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> runAnt<span class=\"br0\">(</span><span class=\"kw4\">int</span> height, <span class=\"kw4\">int</span> width<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> plane <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>height<span class=\"br0\">]</span><span class=\"br0\">[</span>width<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> antX <span class=\"sy0\">=</span> width<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, antY <span class=\"sy0\">=</span> height<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"co1\">//start in the middle-ish</span><br/>\t\t<span class=\"kw4\">int</span> xChange <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, yChange <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">//start moving up</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>antX <span class=\"sy0\">&lt;</span> width <span class=\"sy0\">&amp;&amp;</span> antY <span class=\"sy0\">&lt;</span> height <span class=\"sy0\">&amp;&amp;</span> antX <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> antY <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>plane<span class=\"br0\">[</span>antY<span class=\"br0\">]</span><span class=\"br0\">[</span>antX<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"co1\">//turn left</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>xChange <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">//if moving up or down</span><br/>\t\t\t\t\txChange <span class=\"sy0\">=</span> yChange<span class=\"sy0\">;</span><br/>\t\t\t\t\tyChange <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span> <span class=\"co1\">//if moving left or right</span><br/>\t\t\t\t\tyChange <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>xChange<span class=\"sy0\">;</span><br/>\t\t\t\t\txChange <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"co1\">//turn right</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>xChange <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">//if moving up or down</span><br/>\t\t\t\t\txChange <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>yChange<span class=\"sy0\">;</span><br/>\t\t\t\t\tyChange <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span> <span class=\"co1\">//if moving left or right</span><br/>\t\t\t\t\tyChange <span class=\"sy0\">=</span> xChange<span class=\"sy0\">;</span><br/>\t\t\t\t\txChange <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tplane<span class=\"br0\">[</span>antY<span class=\"br0\">]</span><span class=\"br0\">[</span>antX<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>plane<span class=\"br0\">[</span>antY<span class=\"br0\">]</span><span class=\"br0\">[</span>antX<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tantX <span class=\"sy0\">+=</span> xChange<span class=\"sy0\">;</span><br/>\t\t\tantY <span class=\"sy0\">+=</span> yChange<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> plane<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 103, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"co1\">// create global canvas</span><br/><span class=\"kw1\">var</span> canvas <span class=\"sy0\">=</span> document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span><span class=\"st0\">'canvas'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>canvas.<span class=\"me1\">id</span> <span class=\"sy0\">=</span> <span class=\"st0\">'globalCanvas'</span><span class=\"sy0\">;</span><br/>document.<span class=\"me1\">body</span>.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span>canvas<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> langtonant<span class=\"br0\">(</span>antx<span class=\"sy0\">,</span> optx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">var</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// extend default opts</span><br/>\t<span class=\"kw1\">var</span> opts <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t\tgridsize<span class=\"sy0\">:</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span><br/>\t\tpixlsize<span class=\"sy0\">:</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>\t\tinterval<span class=\"sy0\">:</span> <span class=\"nu0\">4</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> optx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\topts<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> optx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// extend default ants</span><br/>\t<span class=\"kw1\">var</span> ants <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><br/>\t\tx<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span><br/>\t\ty<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span><br/>\t\td<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> antx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tants<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> antx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// initialise grid</span><br/>\t<span class=\"kw1\">var</span> grid <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> opts.<span class=\"me1\">gridsize</span><span class=\"sy0\">;</span> x <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tgrid<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> opts.<span class=\"me1\">gridsize</span><span class=\"sy0\">;</span> y <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tgrid<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// initialise directions</span><br/>\t<span class=\"kw1\">var</span> dirs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>\t\t<span class=\"br0\">{</span>x<span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">{</span>x<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">{</span>x<span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">{</span>x<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// initialise canvas</span><br/>\t<span class=\"kw1\">var</span> canv <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">'globalCanvas'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">var</span> cont <span class=\"sy0\">=</span> canv.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcanv.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> opts.<span class=\"me1\">gridsize</span> <span class=\"sy0\">*</span> opts.<span class=\"me1\">pixlsize</span><span class=\"sy0\">;</span><br/>\tcanv.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> opts.<span class=\"me1\">gridsize</span> <span class=\"sy0\">*</span> opts.<span class=\"me1\">pixlsize</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// initialise pixels</span><br/>\t<span class=\"kw1\">var</span> pixlblac <span class=\"sy0\">=</span> cont.<span class=\"me1\">createImageData</span><span class=\"br0\">(</span>opts.<span class=\"me1\">pixlsize</span><span class=\"sy0\">,</span> opts.<span class=\"me1\">pixlsize</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>opts.<span class=\"me1\">pixlsize</span> <span class=\"sy0\">*</span> opts.<span class=\"me1\">pixlsize</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tpixlblac.<span class=\"me1\">data</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">var</span> pixlwhit <span class=\"sy0\">=</span> cont.<span class=\"me1\">createImageData</span><span class=\"br0\">(</span>opts.<span class=\"me1\">pixlsize</span><span class=\"sy0\">,</span> opts.<span class=\"me1\">pixlsize</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>opts.<span class=\"me1\">pixlsize</span> <span class=\"sy0\">*</span> opts.<span class=\"me1\">pixlsize</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tpixlwhit.<span class=\"me1\">data</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// run simulation</span><br/>\t<span class=\"kw1\">function</span> simulate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> sane <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// iterate over ants</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ants.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> ants<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// invert, draw, turn</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>n.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tgrid<span class=\"br0\">[</span>n.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t\t\tcont.<span class=\"me1\">putImageData</span><span class=\"br0\">(</span>pixlblac<span class=\"sy0\">,</span> n.<span class=\"me1\">x</span> <span class=\"sy0\">*</span> opts.<span class=\"me1\">pixlsize</span><span class=\"sy0\">,</span> n.<span class=\"me1\">y</span> <span class=\"sy0\">*</span> opts.<span class=\"me1\">pixlsize</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tn.<span class=\"me1\">d</span> <span class=\"sy0\">--;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\tgrid<span class=\"br0\">[</span>n.<span class=\"me1\">x</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\tcont.<span class=\"me1\">putImageData</span><span class=\"br0\">(</span>pixlwhit<span class=\"sy0\">,</span> n.<span class=\"me1\">x</span> <span class=\"sy0\">*</span> opts.<span class=\"me1\">pixlsize</span><span class=\"sy0\">,</span> n.<span class=\"me1\">y</span> <span class=\"sy0\">*</span> opts.<span class=\"me1\">pixlsize</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tn.<span class=\"me1\">d</span> <span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// modulus wraparound</span><br/>\t\t\tn.<span class=\"me1\">d</span> <span class=\"sy0\">+=</span> dirs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\t\t\tn.<span class=\"me1\">d</span> <span class=\"sy0\">%=</span> dirs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// position + direction</span><br/>\t\t\tn.<span class=\"me1\">x</span> <span class=\"sy0\">+=</span> dirs<span class=\"br0\">[</span>n.<span class=\"me1\">d</span><span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>\t\t\tn.<span class=\"me1\">y</span> <span class=\"sy0\">+=</span> dirs<span class=\"br0\">[</span>n.<span class=\"me1\">d</span><span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// sanity check</span><br/>\t\t\tsane <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n.<span class=\"me1\">x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> n.<span class=\"me1\">x</span> <span class=\"sy0\">&gt;</span> opts.<span class=\"me1\">gridsize</span> <span class=\"sy0\">||</span> n.<span class=\"me1\">y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> n.<span class=\"me1\">y</span> <span class=\"sy0\">&gt;</span> opts.<span class=\"me1\">gridsize</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"kw2\">false</span> <span class=\"sy0\">:</span> sane<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// loop with interval</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>sane<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tsetTimeout<span class=\"br0\">(</span>simulate<span class=\"sy0\">,</span> opts.<span class=\"me1\">interval</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tsimulate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 59, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def matrix(m; n; init):  <br/>  if m == 0 then [range(0;n)] | map(init)<br/>  elif m &gt; 0 then [range(0;m)][ range(0;m) ] = matrix(0;n;init) <br/>  else error(\"matrix\\(m);_;_) invalid\")<br/>  end;<br/>\u00a0<br/>def printout:<br/>  . as $grid<br/>  | ($grid|length) as $height<br/>  | ($grid[0]|length) as $width<br/>  | reduce range(0;$height) as $i (\"\\u001BH\";<br/>    . + reduce range(0;$width) as $j (\"\\n\";<br/>         . + if $grid[$i][$j] then \" \" else \"#\" end ) );<br/>\u00a0<br/>\u00a0<br/>def langtons_ant(grid_size):<br/>\u00a0<br/>  def flip(ant):<br/>    # Flip the color of the current square<br/>    .[ant[0]][ant[1]] = (.[ant[0]][ant[1]] | not) <br/> \u00a0;<br/>\u00a0<br/>  # input/output: the ant's state: [x, y, direction]<br/>  # where direction is one of (0,1,2,3)<br/>  def move(grid):<br/>    # If the cell is black, it changes to white and the ant turns left;<br/>    # If the cell is white, it changes to black and the ant turns right;<br/>    (if grid[.[0]][.[1]] then 1 else 3 end) as $turn<br/>    | .[2] = ((.[2] + $turn)\u00a0% 4)<br/>    | if   .[2] == 0 then .[0] += 1<br/>      elif .[2] == 1 then .[1] += 1<br/>      elif .[2] == 2 then .[0] += -1<br/>      else                .[1] += -1<br/>      end<br/> \u00a0;<br/>\u00a0<br/>  # state: [ant, grid]<br/>  def iterate:<br/>    .[0] as $ant | .[1] as $grid<br/>    # exit if the ant is outside the grid<br/>    | if $ant[0] &lt; 1 or $ant[0] &gt; grid_size <br/>      or $ant[1] &lt; 1 or $ant[1] &gt; grid_size<br/>      then [ $ant, $grid ]<br/>      else<br/>        ($grid | flip($ant)) as $grid<br/>        | ($ant | move($grid)) as $ant<br/>        | [$ant, $grid] | iterate<br/>      end<br/> \u00a0;<br/>\u00a0<br/>  ((grid_size/2) | floor | [ ., ., 0]) as $ant<br/>  | matrix(grid_size; grid_size; true) as $grid <br/>  | [$ant, $grid] | iterate<br/>  | .[1]<br/>  | printout<br/>;<br/>\u00a0<br/>langtons_ant(100)</pre>"}, {"lang": "Kotlin", "loc": 34, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Direction <span class=\"br0\">{</span> UP, RIGHT, DOWN, LEFT <span class=\"br0\">}</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> WHITE <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> BLACK <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> width <span class=\"sy0\">=</span> <span class=\"nu0\">75</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> height <span class=\"sy0\">=</span> <span class=\"nu0\">52</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxSteps <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><span class=\"sy0\">_</span>000<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> width / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y <span class=\"sy0\">=</span> height / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>height<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>width<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">UP</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> maxSteps <span class=\"sy0\">&amp;&amp;</span> x in <span class=\"nu0\">0</span> until width <span class=\"sy0\">&amp;&amp;</span> y in <span class=\"nu0\">0</span> until height<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> turn <span class=\"sy0\">=</span> m<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> BLACK<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> index <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dir.<span class=\"me1\">ordinal</span> + <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>turn<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> and <span class=\"nu0\">3</span><br/>        dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>index<span class=\"br0\">]</span><br/>        m<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>m<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> BLACK<span class=\"br0\">)</span> WHITE <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> BLACK<br/>        when <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             Direction.<span class=\"me1\">UP</span>    -<span class=\"sy0\">&gt;</span> y--<br/>             Direction.<span class=\"me1\">RIGHT</span> -<span class=\"sy0\">&gt;</span> x--<br/>             Direction.<span class=\"me1\">DOWN</span>  -<span class=\"sy0\">&gt;</span> y++<br/>             Direction.<span class=\"me1\">LEFT</span>  -<span class=\"sy0\">&gt;</span> x++<br/>        <span class=\"br0\">}</span><br/>        i++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until height<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>m<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> WHITE<span class=\"br0\">)</span> <span class=\"st0\">'.'</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 56, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">dim</span> arena<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>black<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>white<span class=\"sy0\">=</span><span class=\"kw2\">not</span><span class=\"br0\">(</span>black<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><br/>  <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span><br/>    arena<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span>white<br/>  <span class=\"kw1\">next</span><br/><span class=\"kw1\">next</span><br/><span class=\"co1\">'north=1 east=2 south=3 west=4</span><br/>\u00a0<br/><span class=\"kw1\">nomainwin</span><br/><span class=\"kw1\">graphicbox</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span>.g<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><br/><span class=\"kw1\">open</span> <span class=\"st0\">\"Langton's Ant\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">window</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/><span class=\"sy0\">#</span><span class=\"nu0\">1</span> <span class=\"st0\">\"trapclose Quit\"</span><br/><span class=\"sy0\">#</span><span class=\"nu0\">1</span>.g <span class=\"st0\">\"down\"</span><br/>\u00a0<br/>antX<span class=\"sy0\">=</span><span class=\"nu0\">50</span><span class=\"sy0\">:</span>antY<span class=\"sy0\">=</span><span class=\"nu0\">50</span><br/>nsew<span class=\"sy0\">=</span><span class=\"nu0\">1</span>    <span class=\"co1\">'ant initially points north</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>antX<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>antX<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>antY<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>antY<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> arena<span class=\"br0\">(</span>antX<span class=\"sy0\">,</span>antY<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      nsew<span class=\"sy0\">=</span>nsew<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> nsew<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> nsew<span class=\"sy0\">=</span><span class=\"nu0\">4</span><br/>    <span class=\"kw1\">else</span><br/>      nsew<span class=\"sy0\">=</span>nsew<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> nsew<span class=\"sy0\">&gt;</span><span class=\"nu0\">4</span> <span class=\"kw1\">then</span> nsew<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">select</span> <span class=\"kw1\">case</span> nsew<br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> antY<span class=\"sy0\">=</span>antY<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> antX<span class=\"sy0\">=</span>antX<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> antY<span class=\"sy0\">=</span>antY<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span> antX<span class=\"sy0\">=</span>antX<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>\u00a0<br/>    arena<span class=\"br0\">(</span>antX<span class=\"sy0\">,</span>antY<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">not</span><span class=\"br0\">(</span>arena<span class=\"br0\">(</span>antX<span class=\"sy0\">,</span>antY<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">#</span><span class=\"nu0\">1</span>.g <span class=\"st0\">\"color \"</span>;GetColor$<span class=\"br0\">(</span>antX<span class=\"sy0\">,</span>antY<span class=\"br0\">)</span><br/>    <span class=\"sy0\">#</span><span class=\"nu0\">1</span>.g <span class=\"st0\">\"set \"</span>;antX;<span class=\"st0\">\" \"</span>;antY<br/><span class=\"kw1\">wend</span><br/>\u00a0<br/><span class=\"sy0\">#</span><span class=\"nu0\">1</span>.g <span class=\"st0\">\"flush\"</span><br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">function</span> GetColor$<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> arena<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        GetColor$<span class=\"sy0\">=</span><span class=\"st0\">\"white\"</span><br/>    <span class=\"kw1\">else</span><br/>        GetColor$<span class=\"sy0\">=</span><span class=\"st0\">\"black\"</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">sub</span> Quit handle$<br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>handle$<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0</pre>"}, {"lang": "Locomotive Basic", "loc": 14, "block": "<pre class=\"locobasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">mode</span> <span class=\"nu0\">1</span>:<span class=\"kw1\">defint</span> a-z:<span class=\"kw1\">deg</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">ink</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>:<span class=\"kw1\">ink</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">26</span><br/><span class=\"nu0\">30</span> x=<span class=\"nu0\">50</span>:y=<span class=\"nu0\">50</span>:ang=<span class=\"nu0\">270</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">dim</span> play<span class=\"br0\">(</span><span class=\"nu0\">100</span>,<span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">graphics</span> <span class=\"kw1\">pen</span> <span class=\"nu0\">3</span>:<span class=\"kw1\">move</span> <span class=\"nu0\">220</span>,<span class=\"nu0\">100</span>:<span class=\"kw1\">drawr</span> <span class=\"nu0\">200</span>,<span class=\"nu0\">0</span>:<span class=\"kw1\">drawr</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">200</span>:<span class=\"kw1\">drawr</span> -<span class=\"nu0\">200</span>,<span class=\"nu0\">0</span>:<span class=\"kw1\">drawr</span> <span class=\"nu0\">0</span>,-<span class=\"nu0\">200</span><br/><span class=\"nu0\">60</span> <span class=\"co1\">' move ant</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">if</span> play<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"kw1\">then</span> ang=ang-<span class=\"nu0\">90</span> <span class=\"kw1\">else</span> ang=ang+<span class=\"nu0\">90</span><br/><span class=\"nu0\">80</span> play<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>=<span class=\"nu0\">1</span>-play<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">plot</span> <span class=\"nu0\">220</span>+<span class=\"nu0\">2</span>*x,<span class=\"nu0\">100</span>+<span class=\"nu0\">2</span>*y,play<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/><span class=\"nu0\">100</span> ang=ang <span class=\"kw2\">mod</span> <span class=\"nu0\">360</span><br/><span class=\"nu0\">110</span> x=x+<span class=\"kw2\">sin</span><span class=\"br0\">(</span>ang<span class=\"br0\">)</span><br/><span class=\"nu0\">120</span> y=y+<span class=\"kw2\">cos</span><span class=\"br0\">(</span>ang<span class=\"br0\">)</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">if</span> x&lt;<span class=\"nu0\">1</span> <span class=\"kw1\">or</span> x&gt;<span class=\"nu0\">100</span> <span class=\"kw1\">or</span> y&lt;<span class=\"nu0\">1</span> <span class=\"kw1\">or</span> y&gt;<span class=\"nu0\">100</span> <span class=\"kw1\">then</span> <span class=\"kw1\">end</span><br/><span class=\"nu0\">140</span> <span class=\"kw1\">goto</span> <span class=\"nu0\">70</span></pre>"}, {"lang": "Logo", "loc": 51, "block": "<pre class=\"text highlighted_source\">make \"size 100<br/>make \"white 1<br/>make \"black 2<br/>make \"sum sum\u00a0:white\u00a0:black<br/>make \"chars [. #]<br/>make \"origin quotient\u00a0:size 2<br/>make \"grid mdarray (list\u00a0:size\u00a0:size) <br/>make \"directions [ [1 0] [0 1] [-1 0] [0 -1] ]<br/>\u00a0<br/>repeat size [<br/>  local \"y<br/>  make \"y repcount<br/>  repeat size [<br/>    mdsetitem (list repcount\u00a0:y)\u00a0:grid\u00a0:white<br/>  ]<br/>]<br/>make \"x quotient\u00a0:size 2<br/>make \"y quotient\u00a0:size 2<br/>make \"direction sum 1 random count\u00a0:directions<br/>\u00a0<br/>while [(and (:x &gt; 0) (:x &lt;=\u00a0:size) (:y &gt; 0) (:y &lt;=\u00a0:size))] [<br/>  local \"color<br/>  make \"color mditem (list\u00a0:x\u00a0:y)\u00a0:grid<br/>  local \"delta<br/>  ifelse [equal?\u00a0:color\u00a0:white] [<br/>     make \"delta 1<br/>  ] [<br/>     make \"delta -1<br/>  ]<br/>  make \"direction sum 1 (modulo (:direction +\u00a0:delta - 1) count\u00a0:directions)<br/>  make \"dir (item\u00a0:direction\u00a0:directions)<br/>  mdsetitem (list\u00a0:x\u00a0:y)\u00a0:grid (sum\u00a0:sum minus\u00a0:color)<br/>  make \"x sum\u00a0:x first\u00a0:dir<br/>  make \"y sum\u00a0:y last\u00a0:dir<br/>]<br/>\u00a0<br/>repeat size [<br/>  local \"y <br/>  local \"blank<br/>  make \"y repcount<br/>  make \"blank \"true<br/>  repeat size [if ( (mditem (list repcount\u00a0:y)\u00a0:grid) =\u00a0:black ) [make \"blank \"false]]<br/>\u00a0<br/>  if [not\u00a0:blank] [<br/>    repeat size [<br/>      type item (mditem (list repcount\u00a0:y)\u00a0:grid)\u00a0:chars<br/>    ]<br/>    print []<br/>  ]<br/>]<br/>bye</pre>"}, {"lang": "LOLCODE", "loc": 39, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> plane <span class=\"kw1\">ITZ</span> A BUKKIT<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> init <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> i TIL <span class=\"kw2\">BOTH SAEM</span> i <span class=\"kw4\">AN</span> <span class=\"nu0\">10000</span><br/>    plane <span class=\"kw1\">HAS</span> A SRS i <span class=\"kw1\">ITZ</span> FAIL<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> init<br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> x <span class=\"kw1\">ITZ</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"kw1\">I HAS A</span> y <span class=\"kw1\">ITZ</span> <span class=\"nu0\">50</span><br/><span class=\"kw1\">I HAS A</span> dir <span class=\"kw1\">ITZ</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">I HAS A</span> pos<span class=\"sy0\">,</span> <span class=\"kw1\">I HAS A</span> cell<br/>\u00a0<br/><span class=\"co1\">BTW, WE PURRTIND WE HAS A 2D STRUKSHUR FUR EZ AKSESS</span><br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> walker<br/>    pos <span class=\"kw1\">R</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> <span class=\"kw2\">PRODUKT</span> <span class=\"kw2\">OF</span> y <span class=\"kw4\">AN</span> <span class=\"nu0\">100</span> <span class=\"kw4\">AN</span> x<br/>    cell <span class=\"kw1\">R</span> <span class=\"kw4\">NOT</span> plane'Z SRS pos<br/>    plane'Z SRS pos <span class=\"kw1\">R</span> cell<br/>    dir <span class=\"kw1\">R</span> <span class=\"kw2\">MOD</span> <span class=\"kw2\">OF</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> dir <span class=\"kw4\">AN</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> <span class=\"nu0\">5</span> <span class=\"kw4\">AN</span> <span class=\"kw2\">PRODUKT</span> <span class=\"kw2\">OF</span> cell <span class=\"kw4\">AN</span> <span class=\"nu0\">2</span> <span class=\"kw4\">AN</span> <span class=\"nu0\">4</span><br/>\u00a0<br/>    dir<span class=\"sy0\">,</span> <span class=\"kw2\">WTF?</span><br/>    <span class=\"kw2\">OMG</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x <span class=\"kw1\">R</span>  <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> x <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">GTFO</span><br/>    <span class=\"kw2\">OMG</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"kw1\">R</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> y <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">GTFO</span><br/>    <span class=\"kw2\">OMG</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> x <span class=\"kw1\">R</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> x <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">GTFO</span><br/>    <span class=\"kw2\">OMG</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> y <span class=\"kw1\">R</span>  <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> y <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">GTFO</span><br/>    OIC<br/>\u00a0<br/>    <span class=\"co1\">BTW, CHEKIN TEH ANTZ BOUNDZ</span><br/>    <span class=\"kw2\">WON</span> <span class=\"kw2\">OF</span> <span class=\"kw2\">BOTH SAEM</span> x <span class=\"kw4\">AN</span> -<span class=\"nu0\">1</span> <span class=\"kw4\">AN</span> <span class=\"kw2\">BOTH SAEM</span> x <span class=\"kw4\">AN</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><span class=\"sy0\">,</span> YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">GTFO</span><span class=\"sy0\">,</span> OIC<br/>    <span class=\"kw2\">WON</span> <span class=\"kw2\">OF</span> <span class=\"kw2\">BOTH SAEM</span> y <span class=\"kw4\">AN</span> -<span class=\"nu0\">1</span> <span class=\"kw4\">AN</span> <span class=\"kw2\">BOTH SAEM</span> y <span class=\"kw4\">AN</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><span class=\"sy0\">,</span> YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">GTFO</span><span class=\"sy0\">,</span> OIC<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> walker<br/>\u00a0<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> printer <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> cell TIL <span class=\"kw2\">BOTH SAEM</span> cell <span class=\"kw4\">AN</span> <span class=\"nu0\">10000</span><br/>    plane'Z SRS cell<span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>        YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"#\"</span>!<br/>        NO WAI<span class=\"sy0\">,</span> <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\".\"</span>!<br/>    OIC<br/>\u00a0<br/>    <span class=\"kw4\">NOT</span> <span class=\"kw2\">MOD</span> <span class=\"kw2\">OF</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> cell <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span> <span class=\"kw4\">AN</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><span class=\"sy0\">,</span> YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> OIC<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> printer <span class=\"co1\">BTW, UR OUTTA CYAN</span><br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 108, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> socket <span class=\"sy0\">=</span> <span class=\"kw3\">require</span> <span class=\"st0\">'socket'</span> <span class=\"co1\">-- needed for socket.sleep</span><br/><span class=\"kw1\">local</span> curses <span class=\"sy0\">=</span> <span class=\"kw3\">require</span> <span class=\"st0\">'curses'</span> <span class=\"co1\">-- used for graphics</span><br/>\u00a0<br/><span class=\"kw1\">local</span> naptime <span class=\"sy0\">=</span> <span class=\"nu0\">0.02</span> <span class=\"co1\">-- seconds</span><br/><span class=\"kw1\">local</span> world_x<span class=\"sy0\">,</span> world_y <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"kw1\">local</span> world <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> wrl <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"kw1\">do</span><br/>\t\twrl<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x <span class=\"kw1\">do</span><br/>\t\t\twrl<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> wrl<br/><span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">(</span>world_x<span class=\"sy0\">,</span> world_y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- directions: 0 up, clockwise</span><br/><span class=\"kw1\">local</span> ant <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <br/>\tx <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>world_x <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\ty <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>world_y <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\tdir <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>\tstep <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> self<span class=\"sy0\">.</span>dir <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> self<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">elseif</span> self<span class=\"sy0\">.</span>dir <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> self<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">elseif</span> self<span class=\"sy0\">.</span>dir <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> self<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">else</span> self<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>world<span class=\"sy0\">.</span>step <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>self<span class=\"sy0\">,</span> ant<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> self<span class=\"br0\">[</span>ant<span class=\"sy0\">.</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>ant<span class=\"sy0\">.</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span>\t<span class=\"co1\">-- white</span><br/>\t\t<span class=\"co1\">-- change cell color</span><br/>\t\tself<span class=\"br0\">[</span>ant<span class=\"sy0\">.</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>ant<span class=\"sy0\">.</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"co1\">-- change dir</span><br/>\t\tant<span class=\"sy0\">.</span>dir <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ant<span class=\"sy0\">.</span>dir <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><br/>\t\tant<span class=\"sy0\">:</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">-- boundary conditions</span><br/>\t\t<span class=\"kw1\">if</span> ant<span class=\"sy0\">.</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> ant<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> world_x<br/>\t\t<span class=\"kw1\">elseif</span> ant<span class=\"sy0\">.</span>x <span class=\"sy0\">&gt;</span> world_x <span class=\"kw1\">then</span> ant<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">if</span> ant<span class=\"sy0\">.</span>y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> ant<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> world_y<br/>\t\t<span class=\"kw1\">elseif</span> ant<span class=\"sy0\">.</span>y <span class=\"sy0\">&gt;</span> world_y <span class=\"kw1\">then</span> ant<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"co1\">-- change cell color</span><br/>\t\tself<span class=\"br0\">[</span>ant<span class=\"sy0\">.</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>ant<span class=\"sy0\">.</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"co1\">-- change dir</span><br/>\t\tant<span class=\"sy0\">.</span>dir <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ant<span class=\"sy0\">.</span>dir <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><br/>\t\tant<span class=\"sy0\">:</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">-- boundary conditions</span><br/>\t\t<span class=\"kw1\">if</span> ant<span class=\"sy0\">.</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> ant<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> world_x<br/>\t\t<span class=\"kw1\">elseif</span> ant<span class=\"sy0\">.</span>x <span class=\"sy0\">&gt;</span> world_x <span class=\"kw1\">then</span> ant<span class=\"sy0\">.</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">if</span> ant<span class=\"sy0\">.</span>y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> ant<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> world_y<br/>\t\t<span class=\"kw1\">elseif</span> ant<span class=\"sy0\">.</span>y <span class=\"sy0\">&gt;</span> world_y <span class=\"kw1\">then</span> ant<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>world<span class=\"sy0\">.</span>draw <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>self<span class=\"sy0\">,</span> ant<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>self <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>self<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> ant<span class=\"sy0\">.</span>y <span class=\"kw2\">and</span> j <span class=\"sy0\">==</span> ant<span class=\"sy0\">.</span>x <span class=\"kw1\">then</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>attron<span class=\"br0\">(</span>curses<span class=\"sy0\">.</span>color_pair<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>mvaddch<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"co1\">--win:attroff(curses.color_pair(3))</span><br/>\t\t\t<span class=\"kw1\">elseif</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>\t\t\t\twin<span class=\"sy0\">:</span>attron<span class=\"br0\">(</span>curses<span class=\"sy0\">.</span>color_pair<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>mvaddch<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"co1\">--win:attroff(curses.color_pair(1))</span><br/>\t\t\t<span class=\"kw1\">elseif</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>attron<span class=\"br0\">(</span>curses<span class=\"sy0\">.</span>color_pair<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>mvaddch<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"co1\">--win:attroff(curses.color_pair(2))</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"self[\"</span> <span class=\"sy0\">..</span> i <span class=\"sy0\">..</span> <span class=\"st0\">\"][\"</span> <span class=\"sy0\">..</span> j <span class=\"sy0\">..</span> <span class=\"st0\">\"] is \"</span> <span class=\"sy0\">..</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"!\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> it <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>curses<span class=\"sy0\">.</span>initscr<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>start_color<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>echo<span class=\"br0\">(</span><span class=\"kw4\">false</span><span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>init_pair<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_WHITE<span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_WHITE<span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>init_pair<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_BLACK<span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_BLACK<span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>init_pair<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_RED<span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_WHITE<span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>init_pair<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_WHITE<span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_BLACK<span class=\"br0\">)</span><br/>win <span class=\"sy0\">=</span> curses<span class=\"sy0\">.</span>newwin<span class=\"br0\">(</span>world_y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> world_x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>win<span class=\"sy0\">:</span>clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">repeat</span><br/>\tworld<span class=\"sy0\">:</span>draw<span class=\"br0\">(</span>ant<span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>move<span class=\"br0\">(</span>world_y<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>clrtoeol<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>attron<span class=\"br0\">(</span>curses<span class=\"sy0\">.</span>color_pair<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>addstr<span class=\"br0\">(</span><span class=\"st0\">\"Iteration: \"</span> <span class=\"sy0\">..</span> it <span class=\"sy0\">..</span> <span class=\"st0\">\", nap = \"</span> <span class=\"sy0\">..</span> naptime<span class=\"sy0\">*</span><span class=\"nu0\">1000</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>refresh<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tworld<span class=\"sy0\">:</span>step<span class=\"br0\">(</span>ant<span class=\"br0\">)</span><br/>\tit <span class=\"sy0\">=</span> it <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"co1\">--local c = stdscr:getch()</span><br/>\t<span class=\"co1\">--if c == '+' then naptime = naptime - (naptime / 10)</span><br/>\t<span class=\"co1\">--elseif c == '-' then naptime = naptime + (naptime / 10)</span><br/>\t<span class=\"co1\">--end</span><br/>\tsocket<span class=\"sy0\">.</span>sleep<span class=\"br0\">(</span>naptime<span class=\"br0\">)</span><br/><span class=\"kw1\">until</span> <span class=\"kw4\">false</span><br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 21, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> u = langton_ant<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> nargin&lt;<span class=\"nu0\">1</span>, n=<span class=\"nu0\">100</span>; <span class=\"kw1\">end</span>;<br/>\tA = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sparse.html\"><span class=\"kw2\">sparse</span></a><span class=\"br0\">(</span>n,n<span class=\"br0\">)</span>;\t<span class=\"co1\">% white</span><br/>\tP = <span class=\"br0\">[</span>n/<span class=\"nu0\">2</span>;n/<span class=\"nu0\">2</span><span class=\"br0\">]</span>;\t<span class=\"co1\">% Positon</span><br/>\tD = <span class=\"nu0\">3</span>;\t         <span class=\"co1\">% index of direction 0-3 </span><br/>\tT = <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,-<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>;<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,-<span class=\"nu0\">1</span><span class=\"br0\">]</span>;\t<span class=\"co1\">% 4 directions</span><br/>\tk = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\tk = k+<span class=\"nu0\">1</span>;\t<br/>\t\ta = A<span class=\"br0\">(</span>P<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,P<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\tA<span class=\"br0\">(</span>P<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,P<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = ~a;<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> a <span class=\"br0\">)</span><br/>\t\t\tD = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>D+<span class=\"nu0\">1</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tD = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>D-<span class=\"nu0\">1</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">end</span>;<br/>\t\tP = P+T<span class=\"br0\">(</span>:,D+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>k,<span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,spy<span class=\"br0\">(</span>A<span class=\"br0\">)</span>;<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pause.html\"><span class=\"kw2\">pause</span></a><span class=\"br0\">(</span>.1<span class=\"br0\">)</span>;<span class=\"kw1\">end</span>;  <span class=\"co1\">%display after every 100 interations</span><br/>\t<span class=\"kw1\">end</span>; <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">direction = 1;<br/>data = SparseArray[{{50, 50} -&gt; -1}, {100, 100}, 1];<br/>NestWhile[<br/>  {<a class=\"__cf_email__\" data-cfemail=\"c694a386\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#, <a class=\"__cf_email__\" data-cfemail=\"5b12361b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#} &amp;@(direction *= (data[[Sequence @@ #]] *= -1) I) + # &amp;,<br/>  {50, 50}, 1 &lt;= <a class=\"__cf_email__\" data-cfemail=\"92dffbfcd2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a># &lt;= <a class=\"__cf_email__\" data-cfemail=\"410c203901\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a># &lt;= 100 &amp;];<br/><a class=\"__cf_email__\" data-cfemail=\"e7ae8a868082a783869386\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Nim", "loc": 34, "block": "<pre class=\"text highlighted_source\">import strutils, sequtils<br/>\u00a0<br/>type<br/>  Direction = enum up, right, down, left<br/>  Color = enum white, black<br/>\u00a0<br/>const<br/>  width = 75<br/>  height = 52<br/>  maxSteps = 12_000<br/>\u00a0<br/>var<br/>  m: array[height, array[width, Color]]<br/>  dir = up<br/>  x = width div 2<br/>  y = height div 2<br/>\u00a0<br/>var i = 0<br/>while i &lt; maxSteps and x in 0 .. &lt; width and y in 0 .. &lt; height:<br/>  let turn = m[y][x] == black<br/>  m[y][x] = if m[y][x] == black: white else: black<br/>\u00a0<br/>  dir = Direction((4 + int(dir) + (if turn: 1 else: -1)) mod 4)<br/>  case dir<br/>  of up:    dec y<br/>  of right: dec x<br/>  of down:  inc y<br/>  of left:  inc x<br/>\u00a0<br/>  inc i<br/>\u00a0<br/>for row in m:<br/>  echo map(row, proc(x: Color): string =<br/>    if x == white: \".\" else: \"#\").join(\"\")</pre>"}, {"lang": "OCaml", "loc": 32, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> dir <span class=\"sy0\">=</span> North <span class=\"sy0\">|</span> East <span class=\"sy0\">|</span> South <span class=\"sy0\">|</span> West<br/>\u00a0<br/><span class=\"kw1\">let</span> turn_left <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> North <span class=\"sy0\">-&gt;</span> West<br/>  <span class=\"sy0\">|</span> East  <span class=\"sy0\">-&gt;</span> North<br/>  <span class=\"sy0\">|</span> South <span class=\"sy0\">-&gt;</span> East<br/>  <span class=\"sy0\">|</span> West  <span class=\"sy0\">-&gt;</span> South<br/>\u00a0<br/><span class=\"kw1\">let</span> turn_right <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> North <span class=\"sy0\">-&gt;</span> East<br/>  <span class=\"sy0\">|</span> East  <span class=\"sy0\">-&gt;</span> South<br/>  <span class=\"sy0\">|</span> South <span class=\"sy0\">-&gt;</span> West<br/>  <span class=\"sy0\">|</span> West  <span class=\"sy0\">-&gt;</span> North<br/>\u00a0<br/><span class=\"kw1\">let</span> move <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> North <span class=\"sy0\">-&gt;</span> x, y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span> East  <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, y<br/>  <span class=\"sy0\">|</span> South <span class=\"sy0\">-&gt;</span> x, y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span> West  <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, y<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  open_graph <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop <span class=\"br0\">(</span>x, y <span class=\"kw1\">as</span> pos<span class=\"br0\">)</span> dir <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> color <span class=\"sy0\">=</span> point_color x y <span class=\"kw1\">in</span><br/>    set_color <span class=\"br0\">(</span><span class=\"kw1\">if</span> color <span class=\"sy0\">=</span> white <span class=\"kw1\">then</span> black <span class=\"kw1\">else</span> white<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    plot x y<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">let</span> dir <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> color <span class=\"sy0\">=</span> white <span class=\"kw1\">then</span> turn_right <span class=\"kw1\">else</span> turn_left<span class=\"br0\">)</span> dir <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span>key_pressed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> loop <span class=\"br0\">(</span>move pos dir<span class=\"br0\">)</span> dir<br/>  <span class=\"kw1\">in</span><br/>  loop <span class=\"br0\">(</span>size_x<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>, size_y<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> North</pre>"}, {"lang": "PARI/GP", "loc": 15, "block": "<pre class=\"parigp highlighted_source\">langton<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>M<span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span><span class=\"nu1\">100</span><span class=\"sy0\">,</span><span class=\"nu1\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"sy0\">=</span><span class=\"nu1\">50</span><span class=\"sy0\">,</span>y<span class=\"sy0\">=</span><span class=\"nu1\">50</span><span class=\"sy0\">,</span>d<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">&amp;&amp;</span> x<span class=\"sy0\">&lt;=</span><span class=\"nu1\">100</span> <span class=\"sy0\">&amp;&amp;</span> y<span class=\"sy0\">&lt;=</span><span class=\"nu1\">100</span><span class=\"sy0\">,</span><br/>    d<span class=\"sy0\">=</span><span class=\"br0\">(</span>d<span class=\"sy0\">+</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">4</span><span class=\"sy0\">;</span><br/>    M<span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"sy0\">=!</span>M<span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>d<span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">,</span>x<span class=\"sy0\">+=</span>d<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>y<span class=\"sy0\">+=</span>d<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  M<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>show<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>d<span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#M<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#M<span class=\"sy0\">,</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">,</span>v<span class=\"sy0\">=</span>u<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#M<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#M<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>t<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>i<span class=\"sy0\">;</span>u<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"sy0\">=</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">plothraw</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>show<span class=\"br0\">(</span>langton<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 115, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"co2\">{$B- Early and safe resolution of  If x &lt;&gt; 0 and 1/x...}</span><br/><span class=\"kw1\">Program</span> LangtonsAnt<span class=\"sy1\">;</span> <span class=\"kw1\">Uses</span> CRT<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{Perpetrated by R.N.McLean (whom God preserve), Victoria University, December MMXV.}</span><br/> <span class=\"kw1\">Var</span> AsItWas<span class=\"sy1\">:</span> <span class=\"kw4\">record</span> mode<span class=\"sy1\">:</span> <span class=\"kw4\">word</span><span class=\"sy1\">;</span> ta<span class=\"sy1\">:</span> <span class=\"kw4\">word</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">Var</span> LastLine<span class=\"sy1\">,</span>LastCol<span class=\"sy1\">:</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Procedure</span> Swap<span class=\"br0\">(</span><span class=\"kw1\">var</span> a<span class=\"sy1\">,</span>b<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Oh for a compiler-recognised statement.}</span><br/>  <span class=\"kw1\">var</span> t<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Such as A=:=B;}</span><br/>   <span class=\"kw1\">Begin</span><br/>    t<span class=\"sy1\">:</span><span class=\"sy3\">=</span>a<span class=\"sy1\">;</span> a<span class=\"sy1\">:</span><span class=\"sy3\">=</span>b<span class=\"sy1\">;</span> b<span class=\"sy1\">:</span><span class=\"sy3\">=</span>t<span class=\"sy1\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">var</span> Stepwise<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">Var</span> Cell<span class=\"sy1\">:</span> <span class=\"kw4\">Array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">80</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">50</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{The screen is of limited size, alas.}</span><br/> <span class=\"kw1\">Var</span> x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>Step<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{In the absence of complex numbers,}</span><br/> <span class=\"kw1\">Var</span> dx<span class=\"sy1\">,</span>dy<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{And also of array action statements.}</span><br/>\u00a0<br/> <span class=\"kw1\">Procedure</span> Croak<span class=\"br0\">(</span>Gasp<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Exit message...}</span><br/>  <span class=\"kw1\">Begin</span><br/>   GoToXY<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> TextColor<span class=\"br0\">(</span>Yellow<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Reserve line twelve.}</span><br/>   <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>Gasp<span class=\"sy1\">,</span><span class=\"st0\">' on step '</span><span class=\"sy1\">,</span>Step<span class=\"sy1\">,</span><span class=\"st0\">' to ('</span><span class=\"sy1\">,</span>x<span class=\"sy1\">,</span><span class=\"st0\">','</span><span class=\"sy1\">,</span>y<span class=\"sy1\">,</span><span class=\"st0\">')'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   HALT<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Procedure</span> Harken<span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Waits for a keystroke.}</span><br/>  <span class=\"kw1\">var</span> ch<span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{The character. Should really be 16-bit.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   ch<span class=\"sy1\">:</span><span class=\"sy3\">=</span>ReadKey<span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Fancy keys evoke double characters. I don't care.}</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy3\">=</span> <span class=\"st0\">'S'</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>ch <span class=\"sy3\">=</span> <span class=\"st0\">'s'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> Stepwise<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw1\">not</span> Stepwise\t<span class=\"coMULTI\">{Quick, slow, quick, quick, slow...}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> ch <span class=\"sy3\">=</span> <span class=\"re1\">#27</span> <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'ESC!'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Or perhaps, enough already!}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span>\t\t\t\t<span class=\"coMULTI\">{Fancy keys will give a twostep.}</span><br/> <span class=\"kw1\">Procedure</span> Waitabit<span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Slows the action.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   <span class=\"kw1\">if</span> Stepwise <span class=\"kw1\">or</span> KeyPressed <span class=\"kw1\">then</span> Harken<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Perhaps a change while on the run.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{of Waitabit.}</span><br/>\u00a0<br/> <span class=\"kw1\">Procedure</span> Turn<span class=\"br0\">(</span>way<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{(dx,dy)*(0,w) = (-w*dy,+w*dx)}</span><br/>  <span class=\"kw1\">Begin</span><br/>   Swap<span class=\"br0\">(</span>dx<span class=\"sy1\">,</span>dy<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{In the absence of complex arithmetic,}</span><br/>   dx<span class=\"sy1\">:</span><span class=\"sy3\">=-</span>way<span class=\"sy3\">*</span>dx<span class=\"sy1\">;</span> dy<span class=\"sy1\">:</span><span class=\"sy3\">=</span>way<span class=\"sy3\">*</span>dy<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Do this in two stages.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">const</span> Arrow<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span>\t<span class=\"coMULTI\">{Only four entries are of interest.}</span><br/>  <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">27</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">26</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{For the four arrow symbols.}</span><br/> <span class=\"kw1\">Procedure</span> ShowDirection<span class=\"br0\">(</span>Enter<span class=\"sy1\">,</span>How<span class=\"sy1\">:</span> <span class=\"kw4\">byte</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Show one.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   GoToXY<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>LastLine <span class=\"sy3\">-</span> y <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{(x,y) position, in Cartesian style.}</span><br/>   TextBackground<span class=\"br0\">(</span>Enter<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{The value in Cell[x,y] may have been changed.}</span><br/>   TextColor<span class=\"br0\">(</span>How<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span>Arrow<span class=\"br0\">[</span>dx<span class=\"sy1\">,</span>dy<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Not an ASCII control character, but an arrow symbol.}</span><br/>   Waitabit<span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Having gone to all this trouble.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">Procedure</span> ShowState<span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Special usage for line two of the screen.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   GoToXY<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> TextBackground<span class=\"br0\">(</span>LightGray<span class=\"br0\">)</span><span class=\"sy1\">;</span> TextColor<span class=\"br0\">(</span>Black<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">Write</span><span class=\"br0\">(</span>Step<span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"st0\">' ('</span><span class=\"sy1\">,</span>x<span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"st0\">','</span><span class=\"sy1\">,</span>y<span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"st0\">') '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   TextColor<span class=\"br0\">(</span>Yellow<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Yellow indicates the direction in mind.}</span><br/>   <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span>Arrow<span class=\"br0\">[</span>dx<span class=\"sy1\">,</span>dy<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{On *arrival* at a position.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Var</span> i<span class=\"sy1\">,</span>j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Steppers. No whole-array assault as in Cell:=LightGray;}</span><br/> <span class=\"kw1\">var</span> Enter<span class=\"sy1\">:</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Needed to remember the cell state on arrival.}</span><br/> <span class=\"kw1\">BEGIN</span><br/>  AsItWas<span class=\"sy1\">.</span><span class=\"me1\">mode</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>LastMode<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Grr. I might want to save the display content too!}</span><br/>  AsItWas<span class=\"sy1\">.</span><span class=\"me1\">ta</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>TextAttr<span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Not just its colour and style.}</span><br/>  TextMode<span class=\"br0\">(</span>C80<span class=\"sy3\">+</span>Font8x8<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Crazed gibberish gives less unsquare character cells, and 80x50 of them.}</span><br/>  LastLine<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Hi<span class=\"br0\">(</span>WindMax<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{ + 1 omitted, as a write to the last line scrolls the screen up one...}</span><br/>  LastCol<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Lo<span class=\"br0\">(</span>WindMax<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Counting starts at zero, even though GoToXY starts with one.}</span><br/>  x<span class=\"sy1\">:</span><span class=\"sy3\">=</span>LastCol <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Start somewhere middleish.}</span><br/>  y<span class=\"sy1\">:</span><span class=\"sy3\">=</span>LastLine <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Consider (x,y) as being (0,0) for axes.}</span><br/>  dx<span class=\"sy1\">:</span><span class=\"sy3\">=+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> dy<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Initial direction.}</span><br/>  TextBackground<span class=\"br0\">(</span>LightGray<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{\"White\" is not valid for background colour.}</span><br/>  TextColor<span class=\"br0\">(</span>Black<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{This will show up on a light background.}</span><br/>  ClrScr<span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Here we go.}</span><br/>\u00a0<br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'Langton'</span><span class=\"st0\">'s Ant, on x = 1:'</span><span class=\"sy1\">,</span>LastCol<span class=\"sy1\">,</span><span class=\"st0\">', y = 1:'</span><span class=\"sy1\">,</span>LastLine<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  ShowState<span class=\"sy1\">;</span>\t\t\t\t\t<span class=\"coMULTI\">{Where we start.}</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"sy1\">;</span> TextColor<span class=\"br0\">(</span>Black<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'Press a key for each step.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Some encouragement.}</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'\"S\" to pause each step or not.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'ESC to quit.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> LastLine <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span> GoToXY<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Draw a y-axis.}</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> LastCol <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span> GoToXY<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>LastLine <span class=\"sy3\">-</span> y <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{And x.}</span><br/>  gotoxy<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Can't silence the cursor!}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> LastCol <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Prepare the cells.}</span><br/>   <span class=\"kw1\">for</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> LastLine <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{One by one.}</span><br/>    Cell<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>LightGray<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Cell:=LightGray. Sigh.}</span><br/>\u00a0<br/>  Stepwise<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">true</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{The action is of interest.}</span><br/>  <span class=\"kw1\">for</span> Step<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">12000</span> <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Here we go.}</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>x &gt; LastCol<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>y &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>y &gt; LastCol<span class=\"br0\">)</span> <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'Out of bounds'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>\t\t\t\t<span class=\"coMULTI\">{We're in a cell.}</span><br/>     <span class=\"kw1\">begin</span>\t\t\t\t<span class=\"coMULTI\">{So, inspect it.}</span><br/>      <span class=\"kw1\">if</span> Stepwise <span class=\"kw1\">or</span> <span class=\"br0\">(</span>Step <span class=\"kw1\">mod</span> <span class=\"nu0\">10</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> ShowState\t<span class=\"coMULTI\">{On arrival.}</span><br/>       <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> KeyPressed <span class=\"kw1\">then</span> Harken<span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{If we're not pausing, check for a key poke.}</span><br/>      Enter<span class=\"sy1\">:</span><span class=\"sy3\">=</span>cell<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"sy1\">;</span>\t\t\t\t\t<span class=\"coMULTI\">{This is what awaits the feet.}</span><br/>      <span class=\"kw1\">if</span> Stepwise <span class=\"kw1\">then</span> ShowDirection<span class=\"br0\">(</span>Enter<span class=\"sy1\">,</span>Yellow<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Current direction, about to be changed.}</span><br/>      <span class=\"kw1\">case</span> cell<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span> <span class=\"kw1\">of</span>\t\t\t\t\t<span class=\"coMULTI\">{So, what to do?}</span><br/>   LightGray<span class=\"sy1\">:</span> <span class=\"kw1\">begin</span> Cell<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>Black<span class=\"sy1\">;</span>     Turn<span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><span class=\"coMULTI\">{White. Make black and turn right.}</span><br/>       Black<span class=\"sy1\">:</span> <span class=\"kw1\">begin</span> Cell<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>LightGray<span class=\"sy1\">;</span> Turn<span class=\"br0\">(</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><span class=\"coMULTI\">{Black. Make white and turn left.}</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t\t\t\t\t\t<span class=\"coMULTI\">{Having decided,}</span><br/>      <span class=\"kw1\">if</span> Stepwise <span class=\"kw1\">then</span> ShowDirection<span class=\"br0\">(</span>Enter<span class=\"sy1\">,</span>Green<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Show the direction about to be stepped.}</span><br/>      GoToXY<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>LastLine <span class=\"sy3\">-</span> y <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Screen location (column,line) for (x,y)}</span><br/>      TextBackground<span class=\"br0\">(</span>Cell<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Change the state I'm about to leave.}</span><br/>      <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Foreground colour irrelevant for spaces.}</span><br/>      x<span class=\"sy1\">:</span><span class=\"sy3\">=</span>x <span class=\"sy3\">+</span> dx<span class=\"sy1\">;</span> y<span class=\"sy1\">:</span><span class=\"sy3\">=</span>y <span class=\"sy3\">+</span> dy<span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Make the step!}</span><br/>     <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{On to consider our new position.}</span><br/>\u00a0<br/>  Croak<span class=\"br0\">(</span><span class=\"st0\">'Finished'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{That was fun.}</span><br/>\u00a0<br/> <span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 41, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"co1\"># Perl 5 implementation of Langton's Ant</span><br/>\u00a0<br/><span class=\"co1\"># Using screen coordinates - 0,0 in upper-left, +X right, +Y down -</span><br/><span class=\"co1\"># these directions (right, up, left, down) are counterclockwise</span><br/><span class=\"co1\"># so advance through the array to turn left, retreat to turn right</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@dirs</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># we treat any false as white and true as black, so undef is fine for initial all-white grid</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@plane</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$plane</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># start out in approximate middle</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$size</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># pointing in a random direction</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">@dirs</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$move</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$move</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span><span class=\"sy0\">;</span> <span class=\"re0\">$move</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\"># toggle cell's value (white-&gt;black or black-&gt;white)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$plane</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"re0\">$plane</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">||=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># if it's now true (black), then it was white, so turn right </span><br/>        <span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$dir</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">@dirs</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># otherwise it was black, so turn left</span><br/>        <span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$dir</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">@dirs</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$dirs</span><span class=\"br0\">[</span><span class=\"re0\">$dir</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$y</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$dirs</span><span class=\"br0\">[</span><span class=\"re0\">$dir</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Out of bounds after $move moves at ($x, $y)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$y</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$size</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$size</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$plane</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'#'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'.'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 25, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@vecs</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@blocky</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' \u2598\u259d\u2580\u2596\u258c\u259e\u259b\u2597\u259a\u2590\u259c\u2584\u2599\u259f\u2588'</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">enum</span> Square <span class=\"sy0\">&lt;</span>White Black<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@plane</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>White <span class=\"kw1\">xx</span> <span class=\"re0\">$size</span><span class=\"br0\">]</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$size</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$size</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <span class=\"re0\">@vecs</span><span class=\"sy0\">.</span><span class=\"kw3\">keys</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$moves</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">given</span> <span class=\"re0\">@plane</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">when</span> <span class=\"sy0\">:!</span><span class=\"kw3\">defined</span> <span class=\"br0\">{</span> <span class=\"kw1\">last</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> White <span class=\"br0\">{</span> <span class=\"re0\">$dir</span><span class=\"sy0\">--;</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> Black<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> Black <span class=\"br0\">{</span> <span class=\"re0\">$dir</span><span class=\"sy0\">++;</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> White<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$moves</span><span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">+=</span>\u00ab\u00a0<span class=\"re0\">@vecs</span><span class=\"br0\">[</span><span class=\"re0\">$dir</span> <span class=\"sy0\">%=</span> <span class=\"re0\">@vecs</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Out of bounds after $moves moves at ($x, $y)\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span> <span class=\"sy0\">...</span> <span class=\"re0\">$size</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"kw3\">join</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> gather <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span> <span class=\"sy0\">...</span> <span class=\"re0\">$size</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>        take <span class=\"re0\">@blocky</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"sy0\">*</span> <span class=\"re0\">@plane</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>                    <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">@plane</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                    <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"re0\">@plane</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>                    <span class=\"sy0\">+</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"re0\">@plane</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">sequence grid = repeat(repeat(' ',100),100)<br/>integer aX = 50, aY = 50,<br/>        gXY, angle = 1                      -- ' '/'#';  0,1,2,3 = NESW<br/>constant dX = {0,-1,0,1}                    -- (dY = reverse(dX))<br/>\u00a0<br/>while aX&gt;=1 and aX&lt;=100<br/>  and aY&gt;=1 and aY&lt;=100 do<br/>    gXY = grid[aX][aY]<br/>    grid[aX][aY] = 67-gXY           -- ' '&lt;=&gt;'#', aka 32&lt;-&gt;35<br/>    angle = mod(angle+2*gXY+3,4)    -- +/-1, ie 0,1,2,3 -&gt; 1,2,3,0 or 3,0,1,2<br/>    aX += dX[angle+1]<br/>    aY += dX[4-angle]<br/>end while<br/>\u00a0<br/>puts(1,join(grid,\"\\n\"))</pre>"}, {"lang": "PHP", "loc": 53, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"co1\">// INIT AND DEFINITION</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'dest_name'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'output.png'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// destination image</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'width'</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'height'</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">70</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// 0-up, 1-left, 2-down, 3-right</span><br/><span class=\"re0\">$field</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$step_count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <br/>\u00a0<br/><span class=\"co1\">// LANGTON\u00b4S ANT PROCEDURE</span><br/><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;=</span> width <span class=\"sy0\">&amp;&amp;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;=</span> height<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$field</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.php.net/unset\"><span class=\"kw3\">unset</span></a><span class=\"br0\">(</span><span class=\"re0\">$field</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$dir</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$field</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$dir</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"re0\">$dir</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span> <span class=\"re0\">$y</span><span class=\"sy0\">++;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"re0\">$x</span><span class=\"sy0\">--;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"re0\">$y</span><span class=\"sy0\">--;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> <span class=\"re0\">$x</span><span class=\"sy0\">++;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$step_count</span><span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">// ARRAY TO IMAGE</span><br/><span class=\"re0\">$img</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecreatetruecolor\"><span class=\"kw3\">imagecreatetruecolor</span></a><span class=\"br0\">(</span>width<span class=\"sy0\">,</span> height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$white</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> width<span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\t<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> height<span class=\"sy0\">;</span> <span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$field</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.php.net/imagesetpixel\"><span class=\"kw3\">imagesetpixel</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">// TEXT TO IMAGE</span><br/><span class=\"re0\">$color</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$color</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$color</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$color</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$print_array</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><br/>\t<span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Langton`s Ant'</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">=&gt;</span><span class=\"st_h\">'PHP Version'</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">=&gt;</span><span class=\"st_h\">'Steps: '</span> <span class=\"sy0\">.</span> <span class=\"re0\">$step_count</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$print_array</span> <span class=\"kw1\">as</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$line</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.php.net/imagestring\"><span class=\"kw3\">imagestring</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"re0\">$key</span><span class=\"sy0\">*</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"re0\">$line</span><span class=\"sy0\">,</span> <span class=\"re0\">$color</span><span class=\"br0\">[</span><span class=\"re0\">$key</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">// SAVE IMAGE</span><br/><a href=\"http://www.php.net/imagepng\"><span class=\"kw3\">imagepng</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> dest_name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(de ant (Width Height X Y)<br/>   (let (Field (make (do Height (link (need Width)))) Dir 0)<br/>      (until (or (le0 X) (le0 Y) (&gt; X Width) (&gt; Y Height))<br/>         (let Cell (nth Field X Y)<br/>            (setq Dir (% (+ (if (car Cell) 1 3) Dir) 4))<br/>            (set Cell (not (car Cell))) <br/>            (case Dir<br/>               (0 (inc 'X))<br/>               (1 (inc 'Y))<br/>               (2 (dec 'X))<br/>               (3 (dec 'Y)) ) ) )<br/>      (prinl \"P1\")<br/>      (prinl Width \" \" Height)<br/>      (for Row Field<br/>         (prinl (mapcar '[(X) (if X 1 0)] Row)) ) ) )<br/>(out '(display -) (ant 100 100 50 50))<br/>(bye)<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 29, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$Size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"re0\">$G</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1</span>..<span class=\"re0\">$Size</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$G</span> <span class=\"sy0\">+=</span> <span class=\"sy0\">,</span><span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$Size</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"co1\">#  Direction of next move</span><br/><span class=\"re0\">$Dx</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"re0\">$Dy</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">#  While we are still on the grid...</span><br/><span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">0</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$y</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">0</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$x</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$Size</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$y</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$Size</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Change direction</span><br/>    <span class=\"re0\">$Dx</span><span class=\"sy0\">,</span> <span class=\"re0\">$Dy</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$Dy</span> <span class=\"sy0\">*</span> <span class=\"re0\">$G</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span> <span class=\"re0\">$Dx</span> <span class=\"sy0\">*</span> <span class=\"re0\">$G</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">#  Change state of current square</span><br/>    <span class=\"re0\">$G</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$G</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\">#  Move forward</span><br/>    <span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Dx</span><br/>    <span class=\"re0\">$y</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Dy</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Convert to strings for output</span><br/><span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Row</span> <span class=\"kw3\">in</span> <span class=\"re0\">$G</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"re0\">$Row</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy0\">-</span>join <span class=\"st0\">''</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Processing", "loc": 81, "block": "<pre class=\"text highlighted_source\">/*<br/> * we use the following conventions:<br/> * directions 0: up, 1: left, 2: down: 3: right<br/> *<br/> * pixel white: true, black: false<br/> *<br/> * turn right: true, left: false<br/> *<br/> */<br/>\u00a0<br/>// number of iteration steps per frame<br/>// set this to 1 to see a slow animation of each<br/>// step or to 10 or 100 for a faster animation<br/>\u00a0<br/>final int STEP=100;<br/>\u00a0<br/>int x;<br/>int y;<br/>int direction;<br/>\u00a0<br/>void setup() {<br/>  // 100x100 is large enough to show the<br/>  // corridor after about 10000 cycles<br/>  size(100, 100, P2D);<br/>\u00a0<br/>  background(#ffffff);<br/>\u00a0<br/>  x=width/2;<br/>  y=height/2;<br/>\u00a0<br/>  direction=0;<br/>}<br/>\u00a0<br/>int count=0;<br/>\u00a0<br/>void draw() {<br/>  for(int i=0;i&lt;STEP;i++) {<br/>    count++;<br/>    boolean pix=get(x,y)!=-1; //white =-1<br/>    setBool(x,y,pix);<br/>\u00a0<br/>    turn(pix);<br/>    move();<br/>\u00a0<br/>    if(x&lt;0||y&lt;0||x&gt;=width||y&gt;=height) {<br/>      println(\"finished\");<br/>      noLoop();<br/>      break;<br/>    }<br/>  }<br/>  if(count%1000==0) {<br/>    println(\"iteration \"+count);<br/>  }<br/>}<br/>\u00a0<br/>void move() {<br/>  switch(direction) {<br/>    case 0:<br/>      y--;<br/>      break;<br/>    case 1:<br/>      x--;<br/>      break;<br/>    case 2:<br/>      y++;<br/>      break;<br/>    case 3:<br/>      x++;<br/>      break;<br/>  }<br/>}<br/>\u00a0<br/>void turn(boolean rightleft) {<br/>  direction+=rightleft?1:-1;<br/>  if(direction==-1) direction=3;<br/>  if(direction==4) direction=0;<br/>}<br/>\u00a0<br/>void setBool(int x, int y, boolean white) {<br/>  set(x,y,white?#ffffff:#000000);<br/>}</pre>"}, {"lang": "Prolog", "loc": 33, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">%_______________________________________________________________</span><br/><span class=\"co1\">% Langtons ant.</span><br/><span class=\"sy1\">:-</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a><br/>\tblack<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>plot_point<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>   <span class=\"co1\">% Output a 5x5 black box at R,C</span><br/>\tnew<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> box<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy4\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">*</span> <span class=\"nu0\">5</span> <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> Y <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Row <span class=\"sy3\">*</span> <span class=\"nu0\">5</span> <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> colour<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span>black<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> send<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> fill_pattern<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span>blue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> center<span class=\"br0\">(</span>point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> send<span class=\"br0\">(</span><span class=\"sy5\">@</span>win<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>update_win <span class=\"sy1\">:-</span>  <span class=\"co1\">% Make a 500x500 window, find all the black points and plot them</span><br/>\tnew<span class=\"br0\">(</span><span class=\"sy5\">@</span>win<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Langtons Ant'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span><span class=\"sy5\">@</span>win<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> size<span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"sy4\">,</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> send<span class=\"br0\">(</span><span class=\"sy5\">@</span>win<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tblack<span class=\"br0\">(</span>Row<span class=\"sy3\">/</span>Col<span class=\"br0\">)</span><span class=\"sy4\">,</span>plot_point<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"br0\">)</span><span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">fail</span></a><span class=\"sy4\">.</span><br/>update_win<span class=\"sy4\">.</span><br/>\u00a0<br/>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> left<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> black<span class=\"br0\">(</span>Row<span class=\"sy3\">/</span>Col<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">retract</span></a><span class=\"br0\">(</span>black<span class=\"br0\">(</span>Row<span class=\"sy3\">/</span>Col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> right<span class=\"br0\">)</span><span class=\"sy1\">:-</span> not<span class=\"br0\">(</span>black<span class=\"br0\">(</span>Row<span class=\"sy3\">/</span>Col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> assert<span class=\"br0\">(</span>black<span class=\"br0\">(</span>Row<span class=\"sy3\">/</span>Col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>move<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> Row<span class=\"sy4\">,</span>Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"br0\">(</span>Row <span class=\"sy6\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> Col <span class=\"sy6\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> Row <span class=\"sy6\">&gt;</span> <span class=\"nu0\">99</span><span class=\"sy4\">;</span> Col <span class=\"sy6\">&gt;</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>move<span class=\"br0\">(</span>north<span class=\"sy4\">,</span>Row<span class=\"sy4\">,</span>Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span>left<span class=\"br0\">)</span><span class=\"sy4\">,</span> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>west<span class=\"sy4\">,</span> Row<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span>right<span class=\"br0\">)</span><span class=\"sy4\">,</span> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>east<span class=\"sy4\">,</span> Row<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>move<span class=\"br0\">(</span>south<span class=\"sy4\">,</span>Row<span class=\"sy4\">,</span>Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span>right<span class=\"br0\">)</span><span class=\"sy4\">,</span> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>west<span class=\"sy4\">,</span> Row<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span>left<span class=\"br0\">)</span><span class=\"sy4\">,</span> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>east<span class=\"sy4\">,</span> Row<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>move<span class=\"br0\">(</span>east<span class=\"sy4\">,</span>Row<span class=\"sy4\">,</span>Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span>right<span class=\"br0\">)</span><span class=\"sy4\">,</span> R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Row <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>south<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span>left<span class=\"br0\">)</span><span class=\"sy4\">,</span> R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Row <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>north<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>move<span class=\"br0\">(</span>west<span class=\"sy4\">,</span>Row<span class=\"sy4\">,</span>Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span>left<span class=\"br0\">)</span><span class=\"sy4\">,</span> R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Row <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>south<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span>direction<span class=\"br0\">(</span>Row<span class=\"sy4\">,</span>Col<span class=\"sy4\">,</span>right<span class=\"br0\">)</span><span class=\"sy4\">,</span> R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Row <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>north<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>go <span class=\"sy1\">:-</span>   retractall<span class=\"br0\">(</span>black<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>north<span class=\"sy4\">,</span><span class=\"nu0\">49</span><span class=\"sy4\">,</span><span class=\"nu0\">49</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> update_win<span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 55, "block": "<pre class=\"purebasic highlighted_source\">#White <span class=\"sy0\">=</span> $FFFFFF<br/>#Black <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>#planeHeight <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>#planeWidth <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>#canvasID <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>#windowID <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span>#windowID, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">150</span>, <span class=\"nu0\">150</span>, <span class=\"st0\">\"Langton's ant\"</span>, #PB_Window_SystemMenu <span class=\"sy0\">|</span> #PB_Window_ScreenCentered<span class=\"br0\">)</span><br/>CanvasGadget<span class=\"br0\">(</span>#canvasID, <span class=\"nu0\">25</span>, <span class=\"nu0\">25</span>, #planeWidth, #planeHeight<span class=\"br0\">)</span><br/><span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span>CanvasOutput<span class=\"br0\">(</span>#canvasID<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Box</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, #planeWidth, #planeHeight, #White<span class=\"br0\">)</span><br/><span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> event, quit, ant.<span class=\"kw2\">POINT</span>, antDirection, antSteps<br/>\u00a0<br/>ant<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> #planeHeight <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>ant<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> #planeWidth <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">Repeat</span><br/>  <span class=\"kw1\">Repeat</span><br/>    event <span class=\"sy0\">=</span> <span class=\"kw2\">WindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> event <span class=\"sy0\">=</span> #PB_Event_CloseWindow<br/>      quit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      event <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Until</span> event <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span>CanvasOutput<span class=\"br0\">(</span>#canvasID<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Select</span> <span class=\"kw2\">Point</span><span class=\"br0\">(</span>ant<span class=\"sy0\">\\</span>x, ant<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Case</span> #Black<br/>        <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>ant<span class=\"sy0\">\\</span>x, ant<span class=\"sy0\">\\</span>y, #White<span class=\"br0\">)</span><br/>        antDirection <span class=\"sy0\">=</span> <span class=\"br0\">(</span>antDirection <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"co1\">;turn left</span><br/>      <span class=\"kw1\">Case</span> #White<br/>        <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>ant<span class=\"sy0\">\\</span>x, ant<span class=\"sy0\">\\</span>y, #Black<span class=\"br0\">)</span><br/>        antDirection <span class=\"sy0\">=</span> <span class=\"br0\">(</span>antDirection <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"co1\">;turn right</span><br/>    <span class=\"kw1\">EndSelect</span><br/>  <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Select</span> antDirection<br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">0</span> <span class=\"co1\">;up</span><br/>      ant<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span> <span class=\"co1\">;left</span><br/>      ant<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">2</span> <span class=\"co1\">;down</span><br/>      ant<span class=\"sy0\">\\</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">3</span> <span class=\"co1\">;right</span><br/>      ant<span class=\"sy0\">\\</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">EndSelect</span><br/>  antSteps <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> ant<span class=\"sy0\">\\</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> ant<span class=\"sy0\">\\</span>x <span class=\"sy0\">&gt;=</span> #planeWidth <span class=\"kw1\">Or</span> ant<span class=\"sy0\">\\</span>y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> ant<span class=\"sy0\">\\</span>y <span class=\"sy0\">&gt;=</span> #planeHeight<br/>    <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Langton's ant status\"</span>, <span class=\"st0\">\"Out of bounds after \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>antSteps<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" steps.\"</span><span class=\"br0\">)</span><br/>    quit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">EndIf</span>    <br/>\u00a0<br/>  <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">;control animation speed and avoid hogging CPU</span><br/><span class=\"kw1\">Until</span> quit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Python", "loc": 28, "block": "<pre class=\"python highlighted_source\">width <span class=\"sy0\">=</span> <span class=\"nu0\">75</span><br/>height <span class=\"sy0\">=</span> <span class=\"nu0\">52</span><br/>nsteps <span class=\"sy0\">=</span> <span class=\"nu0\">12000</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Dir: up<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> down<span class=\"sy0\">,</span> left <span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">class</span> Turn: left<span class=\"sy0\">,</span> right <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><br/><span class=\"kw1\">class</span> Color: white<span class=\"sy0\">,</span> black <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><br/>M <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>Color.<span class=\"me1\">white</span><span class=\"br0\">]</span> * width <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>height<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>x <span class=\"sy0\">=</span> width // <span class=\"nu0\">2</span><br/>y <span class=\"sy0\">=</span> height // <span class=\"nu0\">2</span><br/><span class=\"kw2\">dir</span> <span class=\"sy0\">=</span> Dir.<span class=\"me1\">up</span><br/>\u00a0<br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> i <span class=\"sy0\">&lt;</span> nsteps <span class=\"kw1\">and</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&lt;</span> width <span class=\"kw1\">and</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> y <span class=\"sy0\">&lt;</span> height:<br/>    turn <span class=\"sy0\">=</span> Turn.<span class=\"me1\">left</span> <span class=\"kw1\">if</span> M<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Color.<span class=\"me1\">black</span> <span class=\"kw1\">else</span> Turn.<span class=\"me1\">right</span><br/>    M<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span> <span class=\"kw1\">if</span> M<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Color.<span class=\"me1\">black</span> <span class=\"kw1\">else</span> Color.<span class=\"me1\">black</span><br/>\u00a0<br/>    <span class=\"kw2\">dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> + <span class=\"kw2\">dir</span> + <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> turn <span class=\"kw1\">else</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">4</span><br/>    <span class=\"kw2\">dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Dir.<span class=\"me1\">up</span><span class=\"sy0\">,</span> Dir.<span class=\"me1\">right</span><span class=\"sy0\">,</span> Dir.<span class=\"me1\">down</span><span class=\"sy0\">,</span> Dir.<span class=\"me1\">left</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">dir</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span>   <span class=\"kw2\">dir</span> <span class=\"sy0\">==</span> Dir.<span class=\"me1\">up</span>:    y -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">elif</span> <span class=\"kw2\">dir</span> <span class=\"sy0\">==</span> Dir.<span class=\"me1\">right</span>: x -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">elif</span> <span class=\"kw2\">dir</span> <span class=\"sy0\">==</span> Dir.<span class=\"me1\">down</span>:  y +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">elif</span> <span class=\"kw2\">dir</span> <span class=\"sy0\">==</span> Dir.<span class=\"me1\">left</span>:  x +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span>: <span class=\"kw1\">assert</span> <span class=\"kw2\">False</span><br/>    i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> M<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>langton.ant = function(n = 100) {<br/>\tmap = matrix(data = 0, nrow = n, ncol = n)<br/>\tp = floor(c(n/2, n/2))<br/>\td = sample(1:4, 1)<br/>\ti = 1<br/>\twhile(p[1] &gt; 0 &amp; p[1] &lt;= n &amp; p[2] &gt; 0 &amp; p[2] &lt;= n) {<br/>\t\tif(map[p[1], p[2]] == 1) {<br/>\t\t\tmap[p[1], p[2]] = 0<br/>\t\t\tp = p + switch(d, c(0, 1), c(-1, 0), c(0, -1), c(1, 0))<br/>\t\t\td = ifelse(d == 4, 1, d + 1)<br/>\t\t} else {<br/>\t\t\tmap[p[1], p[2]] = 1<br/>\t\t\tp = p + switch(d, c(0, -1), c(1, 0), c(0, 1), c(-1, 0))<br/>\t\t\td = ifelse(d == 1, 4, d - 1)<br/>\t\t}<br/>\t}<br/>\treturn(map)<br/>}<br/>\u00a0<br/>image(langton.ant(), xaxt = \"n\", yaxt = \"n\", bty = \"n\")<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 64, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>;; contracts allow us to describe expected behaviour of funcitons<br/>(define direction/c (or/c 'u 'r 'l 'd))<br/>(define turn/c (-&gt; direction/c direction/c))<br/>(define grid/c (hash/c integer? (hash/c integer? boolean?)))<br/>(define-struct/contract ant ([d direction/c] [x integer?] [y integer?]))<br/>\u00a0<br/>(define/contract (turn-right dir) turn/c<br/>  (case dir ((u) 'r) ((d) 'l) ((r) 'd) ((l) 'u)))<br/>\u00a0<br/>(define/contract (turn-left dir) turn/c<br/>  (case dir ((u) 'l) ((d) 'r) ((r) 'u) ((l) 'd)))<br/>\u00a0<br/>(define/contract (move d x y)<br/>  (-&gt; direction/c integer? integer? (list/c direction/c integer? integer?))<br/>  (list<br/>   d<br/>   (+ x (case d ((l) -1) ((r) 1) (else 0)))<br/>   (+ y (case d ((u) -1) ((d) 1) (else 0)))))<br/>\u00a0<br/>\u00a0<br/>(define/contract (move-ant d a) (-&gt; direction/c ant? ant?)<br/>  (apply make-ant (move d (ant-x a) (ant-y a))))<br/>\u00a0<br/>(define/contract (langton a grid) (-&gt; ant? grid/c grid/c)<br/>  (let ((ax (ant-x a)) (ay (ant-y a)))<br/>    (if (and (&lt;= 1 ax 100) (&lt;= 1 ay 100))<br/>        (let* ((grid-row (hash-ref grid ay hash))<br/>               (cell-black? (hash-ref grid-row ax #f)))<br/>          (langton<br/>           (move-ant ((if cell-black? turn-left turn-right) (ant-d a)) a)<br/>           (hash-set grid ay (hash-set grid-row ax (not cell-black?)))))<br/>        grid)))<br/>\u00a0<br/>(define/contract (show-grid/text grid) (-&gt; grid/c void?)<br/>  (for*\u00a0; for* allows us to refer to y in rw<br/>      ((y (in-range 1 101))<br/>       (rw (in-value (hash-ref grid y #f)))<br/>       #:when rw       \u00a0; if there is no row, the ant never visisted it<br/>       #:when (newline)\u00a0; when can be used simply for its side effect<br/>       (x (in-range 1 101)))<br/>    (case (hash-ref rw x #\\?)<br/>      ((#\\?) (display #\\space))\u00a0; distingush between \"ant-visited white\" vs. pure white<br/>      ((#f)  (display #\\:))    \u00a0; little anty footprints left<br/>      ((#t)  (display #\\#)))))<br/>\u00a0<br/>\u00a0<br/>(show-grid/text (langton (make-ant 'u 50 50) (hash)))<br/>\u00a0<br/>(require 2htdp/image)<br/>(define/contract (show-grid/png grid) (-&gt; grid/c image?)<br/>  (for*/fold<br/>      ((scn (empty-scene 408 408)))<br/>       ((y (in-range 1 101))<br/>       (rw (in-value (hash-ref grid y #f)))<br/>       #:when rw       \u00a0; if there is no row, the ant never visisted it<br/>       (x (in-range 1 101)))<br/>    (case (hash-ref rw x #\\?)<br/>      ((#\\?) scn)\u00a0; distingush between \"ant-visited white\" vs. pure white<br/>      ((#f)  (place-image (circle 2 \"outline\" \"gray\") (* x 4) (* y 4) scn))    \u00a0; little anty footprints left<br/>      ((#t)  (place-image (circle 2 \"solid\" \"black\")  (* x 4) (* y 4) scn)))))<br/>(show-grid/png (langton (make-ant 'u 50 50) (hash)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 37, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program implements Langton's ant walk and displays the ant's path (finite field).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> dir char seed <span class=\"sy0\">.</span>                        <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed <span class=\"coMULTI\">/*Integer? Then use it as a RANDOM SEED*/</span><br/><span class=\"kw1\">if</span>  dir==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  dir==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> dir=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*ant is facing a random direction,    */</span><br/><span class=\"kw1\">if</span> char==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> char==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> char= <span class=\"st0\">'#'</span>          <span class=\"coMULTI\">/*binary colors:   0\u2261white,  1\u2261black.  */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> scrSize<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">with</span> sd          sw <span class=\"sy0\">.</span>      <span class=\"coMULTI\">/*obtain the terminal's depth and width*/</span><br/>                           sd=sd -<span class=\"nu0\">6</span>;   sw=sw -<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*adjust for terminal's useable area.  */</span><br/>   xHome=<span class=\"nu0\">1000000</span>;       yHome=<span class=\"nu0\">1000000</span>            <span class=\"coMULTI\">/*initially in the middle of nowhere.  */</span><br/> x=xHome;             y=yHome                    <span class=\"coMULTI\">/*start ant's walk in middle of nowhere*/</span><br/>$<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>;     $<span class=\"sy0\">.</span>0=<span class=\"nu0\">4</span>\u00a0;   $<span class=\"sy0\">.</span>2=<span class=\"nu0\">2</span>;    $<span class=\"sy0\">.</span>3=<span class=\"nu0\">3</span>;   $<span class=\"sy0\">.</span>4=<span class=\"nu0\">4</span>     <span class=\"coMULTI\">/* 1\u2261north   2\u2261east   3\u2261south   4\u2261west.*/</span><br/>minX=x;   minY=y;   maxX=x;   maxY=y             <span class=\"coMULTI\">/*initialize the min/max values for X,Y*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*the universe  (walk field)  is white.*/</span><br/>     <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> <span class=\"br0\">(</span>maxX-minY<span class=\"sy0\">&gt;</span>sw<span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"br0\">(</span>maxY-minY<span class=\"sy0\">&gt;</span>sd<span class=\"br0\">)</span> <span class=\"coMULTI\">/*is the path out\u2500of\u2500bounds for screen?*/</span><br/>     <a class=\"__cf_email__\" data-cfemail=\"d1b3bdb0b2baec91\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y;                  @<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y= <span class=\"sy0\">\\</span>@<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y <span class=\"coMULTI\">/*invert (flip)  ant's cell color code.*/</span><br/>     <span class=\"kw1\">if</span> black  <span class=\"kw3\">then</span> dir=dir - <span class=\"nu0\">1</span>                  <span class=\"coMULTI\">/*if cell color was black,  turn  left.*/</span><br/>               <span class=\"kw3\">else</span> dir=dir + <span class=\"nu0\">1</span>                  <span class=\"coMULTI\">/* \"   \"    \"    \"  white,  turn right.*/</span><br/>     dir=$<span class=\"sy0\">.</span>dir                                   <span class=\"coMULTI\">/*$ array handles/adjusts under &amp; over.*/</span><br/>               <span class=\"kw1\">select</span>                            <span class=\"coMULTI\">/*ant walks the direction it's facing. */</span><br/>               <span class=\"kw3\">when</span> dir==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> y= y + <span class=\"nu0\">1</span>        <span class=\"coMULTI\">/*is ant walking north?  Then go up.   */</span><br/>               <span class=\"kw3\">when</span> dir==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> x= x + <span class=\"nu0\">1</span>        <span class=\"coMULTI\">/* \"  \"     \"     east?    \"  \"  right.*/</span><br/>               <span class=\"kw3\">when</span> dir==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> y= y - <span class=\"nu0\">1</span>        <span class=\"coMULTI\">/* \"  \"     \"    south?    \"  \"  down. */</span><br/>               <span class=\"kw3\">when</span> dir==<span class=\"nu0\">4</span>  <span class=\"kw3\">then</span> x= x - <span class=\"nu0\">1</span>        <span class=\"coMULTI\">/* \"  \"     \"     west?    \"  \"  left. */</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span>                  <span class=\"coMULTI\">/*the  DIRection  is always normalized.*/</span><br/>     minX=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minX, x<span class=\"br0\">)</span>;     maxX=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxX, x<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*find the minimum and maximum of  X.  */</span><br/>     minY=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minY, y<span class=\"br0\">)</span>;     maxY=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxY, y<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*  \"   \"     \"     \"     \"     \"  Y.  */</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*steps*/</span>                             <span class=\"coMULTI\">/* [\u2191]  ant walks  hither and thither. */</span><br/>                                                 <span class=\"coMULTI\">/*finished walking, it's out\u2500of\u2500bounds.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\" Langton's ant walked \"</span>    #     <span class=\"st0\">' steps '</span>, sw, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><br/>@<span class=\"sy0\">.</span>xHome<span class=\"sy0\">.</span>yHome=<span class=\"st0\">'\u2588'</span>                                <span class=\"coMULTI\">/*show the ant's initial starting point*/</span><br/>@<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y=        <span class=\"st0\">'\u2219'</span>                                <span class=\"coMULTI\">/*show where the ant went out\u2500of\u2500bounds*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  show Langton's ant's trail.    */</span><br/>     <span class=\"kw1\">do</span>    y=maxY  <span class=\"kw2\">to</span> minY  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  _=           <span class=\"coMULTI\">/*display a single  row  of cells.     */</span><br/>        <span class=\"kw1\">do</span> x=minX  <span class=\"kw2\">to</span> maxX;         _=_ <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y <span class=\"coMULTI\">/*build a cell row for the display.    */</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*x*/</span>                              <span class=\"coMULTI\">/* [\u2193]  strip trailing blanks from line*/</span><br/>     _=<span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>_, char, <span class=\"nu0\">10</span><span class=\"br0\">)</span>,  <span class=\"st0\">'T'</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/*color the cells:   black  or  white. */</span><br/>     <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> _                       <span class=\"coMULTI\">/*display line (strip trailing blanks).*/</span><br/>     <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*y*/</span>                              <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 57, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"guilib.ring\"<br/>load \"stdlib.ring\"<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                   setwindowtitle(\"drawing using qpainter\")<br/>                   setgeometry(100,100,500,500)<br/>                   label1 = new qlabel(win1) {<br/>                             setgeometry(10,10,400,400)<br/>                             settext(\"\")<br/>                  }<br/>                  new qpushbutton(win1) {<br/>                         setgeometry(200,400,100,30)<br/>                         settext(\"draw\")<br/>                         setclickevent(\"draw()\")<br/>                  }<br/>                  show()<br/>         }<br/>         exec()<br/>         }<br/>\u00a0<br/>func draw<br/>        p1 = new qpicture()<br/>             color = new qcolor() {<br/>             setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>                  setcolor(color)<br/>                  setwidth(1)<br/>        }<br/>        new qpainter() {<br/>               begin(p1)<br/>               setpen(pen)<br/>\u00a0<br/>        fieldsize=100<br/>        field = newlist(fieldsize,fieldsize)   <br/>        x=fieldsize/2<br/>        y=fieldsize/2  <br/>        d=0<br/>        while x&lt;=fieldsize and x&gt;=0 and y&lt;=fieldsize and y&gt;=0<br/>                if field[x][y]=0  field[x][y]=1 d-=1 else field[x][y]=0 d+=1 ok<br/>                drawpoint(x*2, y*2)     <br/>                d=(d+4)\u00a0% 4 <br/>                switch d <br/>                        on 0 y+=1<br/>                        on 1 x+=1<br/>                        on 2 y-=1<br/>                        on 3 x-=1<br/>                off<br/>        end <br/>\u00a0<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 90, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Ant<br/>\u00a0<br/>  <span class=\"kw1\">class</span> OutOfBoundsException <span class=\"sy0\">&lt;</span> <span class=\"kw4\">StandardError</span>; <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> Plane<br/>    <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>      <span class=\"re1\">@size_x</span>, <span class=\"re1\">@size_y</span> = x, y<br/>      <span class=\"re1\">@cells</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>x, <span class=\"re3\">:white</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> white?<span class=\"br0\">(</span>px, py<span class=\"br0\">)</span><br/>      <span class=\"re1\">@cells</span><span class=\"br0\">[</span>py<span class=\"br0\">]</span><span class=\"br0\">[</span>px<span class=\"br0\">]</span> == <span class=\"re3\">:white</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> toggle_colour<span class=\"br0\">(</span>px, py<span class=\"br0\">)</span><br/>      <span class=\"re1\">@cells</span><span class=\"br0\">[</span>py<span class=\"br0\">]</span><span class=\"br0\">[</span>px<span class=\"br0\">]</span> = <span class=\"br0\">(</span>white?<span class=\"br0\">(</span>px, py<span class=\"br0\">)</span>\u00a0? <span class=\"re3\">:black</span>\u00a0: <span class=\"re3\">:white</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> check_bounds<span class=\"br0\">(</span>px, py<span class=\"br0\">)</span><br/>      <span class=\"kw1\">unless</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span>= px <span class=\"kw1\">and</span> px <span class=\"sy0\">&lt;</span> <span class=\"re1\">@size_x</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span>= py <span class=\"kw1\">and</span> py <span class=\"sy0\">&lt;</span> <span class=\"re1\">@size_y</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">raise</span> OutOfBoundsException, <span class=\"st0\">\"(#@size_x, #@size_y)\"</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> to_s<br/>      <span class=\"re1\">@cells</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span><br/>        row.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>cell<span class=\"sy0\">|</span> cell == <span class=\"re3\">:white</span>\u00a0? <span class=\"st0\">\".\"</span>\u00a0: <span class=\"st0\">\"#\"</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>      <span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  dir_move = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">:north</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:east</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:south</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"re3\">:west</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  Move = <span class=\"kw4\">Hash</span><span class=\"br0\">[</span>dir_move<span class=\"br0\">]</span><br/>  directions = dir_move.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>dir, move<span class=\"sy0\">|</span> dir<span class=\"br0\">}</span>       <span class=\"co1\"># [:north,\u00a0:east,\u00a0:south,\u00a0:west]</span><br/>  Right = <span class=\"kw4\">Hash</span><span class=\"br0\">[</span> directions.<span class=\"me1\">zip</span><span class=\"br0\">(</span>directions.<span class=\"me1\">rotate</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span> <span class=\"br0\">]</span><br/>  Left  = Right.<span class=\"me1\">invert</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>size_x, size_y, pos_x=size_x<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, pos_y=size_y<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@plane</span> = Plane.<span class=\"me1\">new</span><span class=\"br0\">(</span>size_x, size_y<span class=\"br0\">)</span><br/>    <span class=\"re1\">@pos_x</span>, <span class=\"re1\">@pos_y</span> = pos_x, pos_y<br/>    <span class=\"re1\">@direction</span> = <span class=\"re3\">:south</span><br/>    <span class=\"re1\">@plane</span>.<span class=\"me1\">check_bounds</span><span class=\"br0\">(</span>@pos_x, <span class=\"re1\">@pos_y</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> run<br/>    moves = <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        moves <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>        move<br/>      <span class=\"kw1\">rescue</span> OutOfBoundsException<br/>        <span class=\"kw1\">break</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    moves<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> move<br/>    <span class=\"re1\">@plane</span>.<span class=\"me1\">toggle_colour</span><span class=\"br0\">(</span>@pos_x, <span class=\"re1\">@pos_y</span><span class=\"br0\">)</span><br/>    advance<br/>    <span class=\"kw1\">if</span> <span class=\"re1\">@plane</span>.<span class=\"me1\">white</span>?<span class=\"br0\">(</span>@pos_x, <span class=\"re1\">@pos_y</span><span class=\"br0\">)</span><br/>      <span class=\"re1\">@direction</span> = Right<span class=\"br0\">[</span>@direction<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"re1\">@direction</span> = Left<span class=\"br0\">[</span>@direction<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> advance<br/>    dx, dy = Move<span class=\"br0\">[</span>@direction<span class=\"br0\">]</span><br/>    <span class=\"re1\">@pos_x</span> <span class=\"sy0\">+</span>= dx<br/>    <span class=\"re1\">@pos_y</span> <span class=\"sy0\">+</span>= dy<br/>    <span class=\"re1\">@plane</span>.<span class=\"me1\">check_bounds</span><span class=\"br0\">(</span>@pos_x, <span class=\"re1\">@pos_y</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> position<br/>    <span class=\"st0\">\"(#@pos_x, #@pos_y)\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"re1\">@plane</span>.<span class=\"me1\">to_s</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#</span><br/><span class=\"co1\"># the simulation</span><br/><span class=\"co1\">#</span><br/>ant = Ant.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>moves = ant.<span class=\"me1\">run</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"out of bounds after #{moves} moves: #{ant.position}\"</span><br/><span class=\"kw3\">puts</span> ant</pre>"}, {"lang": "Run BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">dim plane(100,100)<br/>x  = 50: y = 50: minY = 100<br/>\u00a0<br/>while (x&gt;0) and (x&lt;100) and (y&gt;0) and (y&lt;100)<br/> if plane(x,y) then<br/>   nxt = nxt - 1<br/>   if nxt &lt; 1 then nxt = 4<br/>  else<br/>   nxt = nxt + 1<br/>   if nxt &gt; 4 then nxt = 1<br/> end if<br/>\u00a0<br/> x          = x + (nxt = 2) - (nxt = 4)<br/> y          = y + (nxt = 3) - (nxt = 1)<br/> plane(x,y) = (plane(x,y) &lt;&gt; 1)<br/> minY       = min(y,minY)          ' find lowest and <br/> maxY       = max(y,maxY)          '  highest y to prevent printing blank lines<br/>wend<br/>\u00a0<br/>graphic #g, 100,100<br/>for y = minY to maxY<br/>  for x = 1 to 100<br/>   print chr$((plane(x,y)*3) + 32);<br/>     if plane(x,y) = 1 then  #g \"color green\u00a0; set \"; x; \" \"; y else #g \"color blue\u00a0; set \"; x; \" \"; y<br/>  next x<br/>  print y<br/>next y<br/>render #g <br/>#g \"flush\"\"</pre>"}, {"lang": "Rust", "loc": 77, "block": "<pre class=\"text highlighted_source\">struct Ant {<br/>    x: usize,<br/>    y: usize,<br/>    dir: Direction<br/>}<br/>\u00a0<br/>#[derive(Clone,Copy)]<br/>enum Direction {<br/>    North,<br/>    East,<br/>    South,<br/>    West<br/>}<br/>\u00a0<br/>use Direction::*;<br/>\u00a0<br/>impl Ant {<br/>    fn mv(&amp;mut self, vec: &amp;mut Vec&lt;Vec&lt;u8&gt;&gt;) {<br/>        let pointer = &amp;mut vec[self.y][self.x];<br/>        //change direction<br/>        match *pointer {<br/>            0 =&gt; self.dir = self.dir.right(),<br/>            1 =&gt; self.dir = self.dir.left(),<br/>            _ =&gt; panic!(\"Unexpected colour in grid\")<br/>        }<br/>        //flip colour<br/>        //if it's 1 it's black<br/>        //if it's 0 it's white<br/>        *pointer ^= 1;<br/>\u00a0<br/>        //move direction<br/>        match self.dir {<br/>            North =&gt; self.y -= 1,<br/>            South =&gt; self.y += 1,<br/>            East =&gt; self.x += 1,<br/>            West =&gt; self.x -= 1,<br/>        }<br/>\u00a0<br/>    }<br/>}<br/>\u00a0<br/>impl Direction {<br/>    fn right(self) -&gt; Direction {<br/>        match self {<br/>            North =&gt; East,<br/>            East =&gt; South,<br/>            South =&gt; West,<br/>            West =&gt; North,<br/>        }<br/>    }<br/>\u00a0<br/>    fn left(self) -&gt; Direction {<br/>        //3 rights equal a left<br/>        self.right().right().right()<br/>    }<br/>}<br/>\u00a0<br/>fn main(){<br/>    //create a 100x100 grid using vectors<br/>    let mut grid: Vec&lt;Vec&lt;u8&gt;&gt; = vec![vec![0; 100]; 100];<br/>    let mut ant = Ant {<br/>        x: 50, y: 50, dir: Direction::North<br/>    };<br/>\u00a0<br/>    while ant.x &lt; 100 &amp;&amp; ant.y &lt; 100 {<br/>        ant.mv(&amp;mut grid);<br/>    }<br/>    for each in grid.iter() {<br/>        //construct string<br/>        //using iterator methods to quickly convert the vector<br/>        //to a string<br/>        let string = each.iter()<br/>                         .map(|&amp;x| if x == 0 { \" \" } else { \"#\" })<br/>                         .fold(String::new(), |x, y| x+y);<br/>        println!(\"{}\", string);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 43, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Langton<span class=\"br0\">(</span>matrix<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Char<span class=\"br0\">]</span><span class=\"br0\">]</span>, ant<span class=\"sy0\">:</span>Ant<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Langton.<span class=\"sy0\">_</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows<span class=\"sy0\">=</span>matrix.<span class=\"me1\">size</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols<span class=\"sy0\">=</span>matrix<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isValid <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> ant.<span class=\"me1\">row</span> <span class=\"sy0\">&amp;&amp;</span> ant.<span class=\"me1\">row</span> <span class=\"sy0\">&lt;</span> cols <span class=\"sy0\">&amp;&amp;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> ant.<span class=\"me1\">col</span>  <span class=\"sy0\">&amp;&amp;</span> ant.<span class=\"me1\">col</span> <span class=\"sy0\">&lt;</span> rows<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isBlack<span class=\"sy0\">=</span>matrix<span class=\"br0\">(</span>ant.<span class=\"me1\">row</span><span class=\"br0\">)</span><span class=\"br0\">(</span>ant.<span class=\"me1\">col</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>BLACK<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> changeColor<span class=\"br0\">(</span>c<span class=\"sy0\">:</span>Char<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span>matrix<span class=\"br0\">(</span>ant.<span class=\"me1\">row</span><span class=\"br0\">)</span><span class=\"br0\">(</span>ant.<span class=\"me1\">col</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>c<span class=\"sy0\">;</span> matrix<span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> evolve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>Langton<span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>newCol, newAnt<span class=\"br0\">)</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>isBlack<span class=\"br0\">)</span> <span class=\"br0\">(</span>WHITE, ant.<span class=\"me1\">turnLeft</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">(</span>BLACK, ant.<span class=\"me1\">turnRight</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Langton<span class=\"br0\">(</span>changeColor<span class=\"br0\">(</span>newCol<span class=\"br0\">)</span>, newAnt.<span class=\"me1\">move</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>matrix map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span>\t<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Ant<span class=\"br0\">(</span>row<span class=\"sy0\">:</span>Int, col<span class=\"sy0\">:</span>Int, d<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> turnLeft<span class=\"sy0\">=</span>Ant<span class=\"br0\">(</span>row,col,<span class=\"br0\">(</span>d-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> turnRight<span class=\"sy0\">=</span>Ant<span class=\"br0\">(</span>row,col,<span class=\"br0\">(</span>d+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> move<span class=\"sy0\">=</span>d <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> Ant<span class=\"br0\">(</span>row-<span class=\"nu0\">1</span>,col,d<span class=\"br0\">)</span>\t<span class=\"co1\">// north</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> Ant<span class=\"br0\">(</span>row,col+<span class=\"nu0\">1</span>,d<span class=\"br0\">)</span>\t<span class=\"co1\">// east</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> Ant<span class=\"br0\">(</span>row+<span class=\"nu0\">1</span>,col,d<span class=\"br0\">)</span>\t<span class=\"co1\">// south</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">3</span> <span class=\"sy0\">=&gt;</span> Ant<span class=\"br0\">(</span>row,col-<span class=\"nu0\">1</span>,d<span class=\"br0\">)</span>\t<span class=\"co1\">// west</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Langton <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> BLACK<span class=\"sy0\">=</span><span class=\"st0\">'#'</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> WHITE<span class=\"sy0\">=</span><span class=\"st0\">'.'</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">100</span>, y<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Langton<span class=\"br0\">(</span>Array.<span class=\"me1\">fill</span><span class=\"br0\">(</span>y, x<span class=\"br0\">)</span><span class=\"br0\">(</span>WHITE<span class=\"br0\">)</span>, Ant<span class=\"br0\">(</span>x<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">1</span>, y<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> l<span class=\"sy0\">=</span>Langton<span class=\"br0\">(</span><span class=\"nu0\">100</span>,<span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> moves<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>l.<span class=\"me1\">isValid</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      moves +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      l<span class=\"sy0\">=</span>l.<span class=\"me1\">evolve</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Out of bounds after \"</span>+moves+<span class=\"st0\">\" moves\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>l<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 30, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: direction is new enum UP, RIGHT, DOWN, LEFT end enum;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const integer: width is 75;<br/>    const integer: height is 52;<br/>    var array array boolean: m is height times width times FALSE;<br/>    var direction: dir is UP;<br/>    var integer: x is width div 2;<br/>    var integer: y is height div 2;<br/>  begin<br/>    while x in {1 .. width} and y in {1 .. height} do<br/>      dir\u00a0:= direction conv ((ord(dir) + 2 * ord(m[y][x]) - 1) mod 4);<br/>      m[y][x]\u00a0:= not m[y][x];<br/>      case dir of<br/>        when {UP}:    decr(y);<br/>        when {RIGHT}: decr(x);<br/>        when {DOWN}:  incr(y);<br/>        when {LEFT}:  incr(x);<br/>      end case;<br/>    end while;<br/>    for key x range m do<br/>      for y range 1 to width do<br/>        write(\".#\"[succ(ord(m[x][y]))]);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Scilab", "loc": 71, "block": "<pre class=\"text highlighted_source\">grid_size=100;                              //side length of the square grid<br/>ant_pos=round([grid_size/2 grid_size/2]);   //ant's initial position at center of grid<br/>head_direction='W';                         //ant's initial direction can be either<br/>                                            //'N' north, 'S' south, 'E' east, or 'W' west<br/>\u00a0<br/>grid=~zeros(grid_size,grid_size)    //blank grid<br/>col=[];                             //cell color handler<br/>next_step=%T;                       //step flag<br/>i=0;                                //step counter<br/>\u00a0<br/>while next_step<br/>\u00a0<br/>    col=grid(ant_pos(1),ant_pos(2));    //get cell color<br/>\u00a0<br/>    if col then                         //if white cell<br/>        grid(ant_pos(1),ant_pos(2))=~grid(ant_pos(1),ant_pos(2));  //switch color<br/>        if head_direction=='N' then     //if head to N<br/>            head_direction='E';         //turn right to E<br/>            ant_pos(2)=ant_pos(2)+1;    //step forward<br/>\u00a0<br/>        elseif head_direction=='E' then //if head to E<br/>            head_direction='S';         //turn right to S<br/>            ant_pos(1)=ant_pos(1)+1;    //step forward<br/>\u00a0<br/>        elseif head_direction=='S' then //if head to S<br/>            head_direction='W';         //turn right to W<br/>            ant_pos(2)=ant_pos(2)-1;    //step forward<br/>\u00a0<br/>        elseif head_direction=='W' then //if head to W<br/>            head_direction='N';         //turn right to N<br/>            ant_pos(1)=ant_pos(1)-1;    //step forward<br/>        end<br/>    else                                //if black cell<br/>        grid(ant_pos(1),ant_pos(2))=~grid(ant_pos(1),ant_pos(2));  //switch color<br/>        if head_direction=='N' then     //if head to N<br/>            head_direction='W';         //turn left to E<br/>            ant_pos(2)=ant_pos(2)-1;    //step foward<br/>\u00a0<br/>        elseif head_direction=='W' then //if head to W<br/>           head_direction='S';          //turn left to S<br/>            ant_pos(1)=ant_pos(1)+1;    //step forward<br/>\u00a0<br/>        elseif head_direction=='S' then //if head to S<br/>            head_direction='E';         //turn left to E<br/>            ant_pos(2)=ant_pos(2)+1;    //step forward<br/>\u00a0<br/>        elseif head_direction=='E' then //if head to E<br/>            head_direction='N';         //turn left to N<br/>            ant_pos(1)=ant_pos(1)-1;    //step forward<br/>        end<br/>    end<br/>\u00a0<br/>    i=i+1;<br/>\u00a0<br/>    if ant_pos(1)&lt;1 | ant_pos(1)&gt;100 | ant_pos(2)&lt;0 | ant_pos(2)&gt;100 then   //check ant's position<br/>        disp(\"Out of bounds after \"+string(i)+\" steps\");<br/>        next_step=~next_step;                                               //break loop if out of bounds<br/>    end<br/>end<br/>\u00a0<br/>ascii_grid=string(zeros(grid));     //create grid of chars to display<br/>                                    //on the console<br/>for a=1:length(grid)<br/>    if grid(a) then<br/>        ascii_grid(a)=\" \";          //blank space if cell is white<br/>    else<br/>        ascii_grid(a)=\"#\";          //# if cell is black<br/>    end<br/>end<br/>\u00a0<br/>disp(ascii_grid);</pre>"}, {"lang": "Sidef", "loc": 24, "block": "<pre class=\"ruby highlighted_source\">define dirs = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>define size = <span class=\"nu0\">100</span><br/>\u00a0<br/>enum <span class=\"sy0\">|</span>White, Black<span class=\"sy0\">|</span><br/>var plane = size.<span class=\"me1\">of</span> <span class=\"br0\">{</span> size.<span class=\"me1\">of</span> <span class=\"br0\">(</span>White<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"br0\">[</span>size <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>...<br/><span class=\"me1\">var</span> dir = dirs.<span class=\"me1\">len</span>.<span class=\"me1\">irand</span><br/>\u00a0<br/>var moves = <span class=\"nu0\">0</span><br/><span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">break</span><br/>\u00a0<br/>    given <span class=\"br0\">(</span>plane<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">(</span>White<span class=\"br0\">)</span> <span class=\"br0\">{</span> dir<span class=\"sy0\">--</span>; plane<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = Black <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">(</span>Black<span class=\"br0\">)</span> <span class=\"br0\">{</span> dir<span class=\"sy0\">++</span>; plane<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = White <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"sy0\">++</span>moves<br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span>\\x, \\y<span class=\"br0\">]</span>, dirs<span class=\"br0\">[</span>dir <span class=\"sy0\">%</span>= dirs.<span class=\"me1\">len</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">zip</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span> <span class=\"sy0\">*</span>a <span class=\"sy0\">+</span>= b <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"Out of bounds after #{moves} moves at (#{x}, #{y})\"</span><br/>plane.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>square<span class=\"sy0\">|</span> square == Black\u00a0? <span class=\"st0\">'#'</span>\u00a0: <span class=\"st0\">'.'</span> <span class=\"br0\">}</span><span class=\"br0\">}</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span>.<span class=\"me1\">join</span>.<span class=\"me1\">say</span><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 73, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let WIDTH = 100<br/>let HEIGHT = 100<br/>\u00a0<br/>struct Point {<br/>    var x:Int<br/>    var y:Int<br/>}<br/>\u00a0<br/>enum Direction: Int {<br/>    case North = 0, East, West, South<br/>}<br/>\u00a0<br/>class Langton {<br/>    let leftTurn = [Direction.West, Direction.North, Direction.South, Direction.East]<br/>    let rightTurn = [Direction.East, Direction.South, Direction.North, Direction.West]<br/>    let xInc = [0, 1,-1, 0]<br/>    let yInc = [-1, 0, 0, 1]<br/>    var isBlack:[[Bool]]<br/>    var origin:Point<br/>    var antPosition = Point(x:0, y:0)<br/>    var outOfBounds = false<br/>    var antDirection = Direction.East<br/>\u00a0<br/>    init(width:Int, height:Int) {<br/>        self.origin = Point(x:width / 2, y:height / 2)<br/>        self.isBlack = Array(count: width, repeatedValue: Array(count: height, repeatedValue: false))<br/>    }<br/>\u00a0<br/>    func moveAnt() {<br/>        self.antPosition.x += xInc[self.antDirection.rawValue]<br/>        self.antPosition.y += yInc[self.antDirection.rawValue]<br/>    }<br/>\u00a0<br/>    func step() -&gt; Point {<br/>        if self.outOfBounds {<br/>            println(\"Ant tried to move while out of bounds.\")<br/>            exit(0)<br/>        }<br/>\u00a0<br/>        var ptCur = Point(x:self.antPosition.x + self.origin.x, y:self.antPosition.y + self.origin.y)<br/>        let black = self.isBlack[ptCur.x][ptCur.y]<br/>        let direction = self.antDirection.rawValue<br/>\u00a0<br/>        self.antDirection = (black\u00a0? self.leftTurn\u00a0: self.rightTurn)[direction]<br/>\u00a0<br/>        self.isBlack[ptCur.x][ptCur.y] =\u00a0!self.isBlack[ptCur.x][ptCur.y]<br/>\u00a0<br/>        self.moveAnt()<br/>        ptCur = Point(x:self.antPosition.x + self.origin.x, y:self.antPosition.y + self.origin.y)<br/>        self.outOfBounds =<br/>            ptCur.x &lt; 0 ||<br/>            ptCur.x &gt;= self.isBlack.count ||<br/>            ptCur.y &lt; 0 ||<br/>            ptCur.y &gt;= self.isBlack[0].count<br/>\u00a0<br/>        return self.antPosition<br/>    }<br/>}<br/>\u00a0<br/>\u00a0<br/>let ant = Langton(width: WIDTH, height: HEIGHT)<br/>while\u00a0!ant.outOfBounds {<br/>    ant.step()<br/>}<br/>\u00a0<br/>for row in 0 ..&lt; WIDTH {<br/>    for col in 0 ..&lt; HEIGHT {<br/>        print(ant.isBlack[col][row]\u00a0? \"#\"\u00a0: \" \")<br/>    }<br/>    println()<br/>}</pre>"}, {"lang": "Tcl", "loc": 33, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tk<br/>\u00a0<br/><span class=\"kw1\">proc</span> step <span class=\"br0\">{</span>workarea<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> x y dir<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"re0\">$workarea</span> get <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$workarea</span> put black -to <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> dir<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> dir <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$workarea</span> put white -to <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> dir -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> dir <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">switch</span> <span class=\"re0\">$dir</span> <span class=\"br0\">{</span><br/>\t<span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span><br/>\t<span class=\"nu0\">1</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span><br/>\t<span class=\"nu0\">2</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"nu0\">3</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || <span class=\"re0\">$x</span> <span class=\"sy0\">&gt;</span>= <span class=\"br0\">[</span>image width <span class=\"re0\">$workarea</span><span class=\"br0\">]</span> || <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || <span class=\"re0\">$y</span> <span class=\"sy0\">&gt;</span>= <span class=\"br0\">[</span>image height <span class=\"re0\">$workarea</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>image create photo antgrid -width <span class=\"nu0\">100</span> -height <span class=\"nu0\">100</span><br/>pack <span class=\"br0\">[</span>label .l -image antgrid<span class=\"br0\">]</span><br/>antgrid put white -to <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">99</span> <span class=\"nu0\">99</span><br/><span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">set</span> y <span class=\"nu0\">50</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> dir <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>    update<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>step antgrid<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Produce output in file</span><br/>antgrid write ant.gif -<span class=\"kw2\">format</span> gif</pre>"}, {"lang": "TI-83 BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">PROGRAM:LANT<br/>:ClrDraw<br/>:0\u2192N<br/>:47\u2192A<br/>:31\u2192B<br/>:90\u2192\u0398<br/>:Repeat getKey<br/>:If pxl-Test(B,A)<br/>:Then<br/>:\u0398+90\u2192\u0398<br/>:Else<br/>:\u0398-90\u2192\u0398<br/>:End<br/>:Pxl-Change(B,A)<br/>:A+cos(\u0398\u00b0)\u2192A<br/>:B+sin(\u0398\u00b0)\u2192B<br/>:N+1\u2192N<br/>:End<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 61, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Ant()<br/><span class=\"kw4\">Dim</span> TablDatas(1 <span class=\"kw3\">To</span> 200, 1 <span class=\"kw3\">To</span> 256) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, sDir <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, sFile <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, Str <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> ColA <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, LigA <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, ColF <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, LigF <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, Num <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> Top <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, Left <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, Bottom <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, Right <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/>    <span class=\"co1\">'init variables<br/></span>    Top = <span class=\"kw5\">True</span><br/>    LigF = 80<br/>    ColF = 50<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 200<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 256<br/>            TablDatas(i, j) = <span class=\"st0\">\" \"</span><br/>        <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"co1\">'directory<br/></span>    sDir = <span class=\"st0\">\"C:\\Users\\yourname\\Desktop\\\"</span><br/>    <span class=\"co1\">'name txt file<br/></span>    sFile = <span class=\"st0\">\"Langton_Ant.txt\"</span><br/>\u00a0<br/>    <span class=\"co1\">'start<br/></span>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 15000<br/>        LigA = LigF<br/>        ColA = ColF<br/>        <span class=\"kw3\">If</span> LigA = 1 <span class=\"kw3\">Or</span> ColA = 1 <span class=\"kw3\">Or</span> ColA = 256 <span class=\"kw3\">Or</span> LigA = 200 <span class=\"kw3\">Then</span> <span class=\"kw3\">GoTo</span> Fin<br/>        <span class=\"kw3\">If</span> TablDatas(LigA, ColA) = <span class=\"st0\">\" \"</span> <span class=\"kw3\">Then</span><br/>            TablDatas(LigA, ColA) = <span class=\"st0\">\"#\"</span><br/>            <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> <span class=\"kw5\">True</span><br/>                <span class=\"kw3\">Case</span> Top: Top = <span class=\"kw5\">False</span>: Left = <span class=\"kw5\">True</span>: LigF = LigA: ColF = ColA - 1<br/>                <span class=\"kw3\">Case</span> Left: Left = <span class=\"kw5\">False</span>: Bottom = <span class=\"kw5\">True</span>: LigF = LigA + 1: ColF = ColA<br/>                <span class=\"kw3\">Case</span> Bottom: Bottom = <span class=\"kw5\">False</span>: Right = <span class=\"kw5\">True</span>: LigF = LigA: ColF = ColA + 1<br/>                <span class=\"kw3\">Case</span> Right: Right = <span class=\"kw5\">False</span>: Top = <span class=\"kw5\">True</span>: LigF = LigA - 1: ColF = ColA<br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>        <span class=\"kw3\">Else</span><br/>            TablDatas(LigA, ColA) = <span class=\"st0\">\" \"</span><br/>            <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> <span class=\"kw5\">True</span><br/>                <span class=\"kw3\">Case</span> Top: Top = <span class=\"kw5\">False</span>: Right = <span class=\"kw5\">True</span>: LigF = LigA: ColF = ColA + 1<br/>                <span class=\"kw3\">Case</span> Left: Left = <span class=\"kw5\">False</span>: Top = <span class=\"kw5\">True</span>: LigF = LigA - 1: ColF = ColA<br/>                <span class=\"kw3\">Case</span> Bottom: Bottom = <span class=\"kw5\">False</span>: Left = <span class=\"kw5\">True</span>: LigF = LigA: ColF = ColA - 1<br/>                <span class=\"kw3\">Case</span> Right: Right = <span class=\"kw5\">False</span>: Bottom = <span class=\"kw5\">True</span>: LigF = LigA + 1: ColF = ColA<br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"co1\">'result in txt file<br/></span>    Num = FreeFile<br/>    <span class=\"kw4\">Open</span> sDir &amp; sFile <span class=\"kw3\">For</span> <span class=\"kw4\">Output</span> <span class=\"kw4\">As</span> #Num<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(TablDatas, 1)<br/>        Str = vbNullString<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(TablDatas, 2)<br/>            Str = Str &amp; TablDatas(i, j)<br/>        <span class=\"kw3\">Next</span> j<br/>        <span class=\"kw4\">Print</span> #1, Str<br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">Close</span> #Num<br/>    <span class=\"kw2\">Exit</span> <span class=\"kw2\">Sub</span><br/>Fin:<br/>MsgBox <span class=\"st0\">\"Stop\u00a0! The ant is over limits.\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Vim Script", "loc": 63, "block": "<pre class=\"vim highlighted_source\"><span class=\"co1\">\" return character under cursor</span><br/><span class=\"kw1\">function</span><span class=\"sy0\">!</span> CurrChar<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>   <span class=\"kw1\">return</span> <span class=\"kw3\">matchstr</span><span class=\"br0\">(</span><span class=\"kw3\">getline</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span>, <span class=\"st0\">'<span class=\"es0\">\\%</span>'</span> <span class=\"sy0\">.</span> <span class=\"kw3\">col</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">'c.'</span><span class=\"br0\">)</span><br/>endfunction<span class=\"co1\"><br/>\u00a0<br/>\" draw all-white grid (arguments are characters to use for white and black)</span><br/><span class=\"kw1\">function</span><span class=\"sy0\">!</span> LangtonClear<span class=\"br0\">(</span>white, black<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span><span class=\"kw3\">bufname</span> = <span class=\"st0\">'langtons.ant'</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">bufexists</span><span class=\"br0\">(</span>l<span class=\"sy0\">:</span><span class=\"kw3\">bufname</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span>winnum = <span class=\"kw3\">bufwinnr</span><span class=\"br0\">(</span>l<span class=\"sy0\">:</span><span class=\"kw3\">bufname</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> l<span class=\"sy0\">:</span>winnum == <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">execute</span> <span class=\"st0\">'sbuffer '</span> <span class=\"sy0\">.</span> <span class=\"kw3\">bufnr</span><span class=\"br0\">(</span>l<span class=\"sy0\">:</span><span class=\"kw3\">bufname</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">execute</span> l<span class=\"sy0\">:</span>winnum <span class=\"sy0\">.</span> <span class=\"st0\">'wincmd w'</span><br/>    <span class=\"kw1\">endif</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">execute</span> <span class=\"st0\">'new '</span> <span class=\"sy0\">.</span> l<span class=\"sy0\">:</span><span class=\"kw3\">bufname</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">execute</span> <span class=\"st0\">'1,$ delete _'</span><br/>  <span class=\"kw1\">call</span> <span class=\"kw3\">append</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw3\">repeat</span><span class=\"br0\">(</span>a<span class=\"sy0\">:</span>white,<span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">execute</span> <span class=\"st0\">'normal! 1Gyy99p'</span><br/>  goto <span class=\"nu0\">5100</span><br/>  <span class=\"kw1\">let</span> b<span class=\"sy0\">:</span>directions = <span class=\"br0\">[</span> <span class=\"st0\">'k'</span>, <span class=\"st0\">'l'</span>, <span class=\"st0\">'j'</span>, <span class=\"st0\">'h'</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">let</span> b<span class=\"sy0\">:</span>direction = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">let</span> b<span class=\"sy0\">:</span>white = a<span class=\"sy0\">:</span>white<br/>  <span class=\"kw1\">let</span> b<span class=\"sy0\">:</span>black = a<span class=\"sy0\">:</span>black <br/>endfunction<span class=\"co1\"><br/>\u00a0<br/>\" move the ant one step</span><br/><span class=\"kw1\">function</span><span class=\"sy0\">!</span> LangtonStep<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span><span class=\"kw2\">ch</span> = CurrChar<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> l<span class=\"sy0\">:</span><span class=\"kw2\">ch</span> == b<span class=\"sy0\">:</span>white<br/>    <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span><span class=\"kw2\">ch</span> = b<span class=\"sy0\">:</span>black<br/>    <span class=\"kw1\">let</span> b<span class=\"sy0\">:</span>direction = <span class=\"br0\">(</span>b<span class=\"sy0\">:</span>direction  <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">elseif</span> l<span class=\"sy0\">:</span><span class=\"kw2\">ch</span> == b<span class=\"sy0\">:</span>black<br/>    <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span><span class=\"kw2\">ch</span> = b<span class=\"sy0\">:</span>white<br/>    <span class=\"kw1\">let</span> b<span class=\"sy0\">:</span>direction = <span class=\"br0\">(</span>b<span class=\"sy0\">:</span>direction  <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">endif</span><br/>  <span class=\"kw1\">execute</span> <span class=\"st0\">'normal! r'</span><span class=\"sy0\">.</span>l<span class=\"sy0\">:</span><span class=\"kw2\">ch</span><span class=\"sy0\">.</span>b<span class=\"sy0\">:</span>directions<span class=\"br0\">[</span>b<span class=\"sy0\">:</span>direction<span class=\"br0\">]</span><br/>endfunction<span class=\"co1\"><br/>\u00a0<br/>\" run until we hit the edge</span><span class=\"co1\"><br/>\" optional arguments specify white and black characters;</span><span class=\"co1\"><br/>\" default . and @, respectively.</span><br/><span class=\"kw1\">function</span><span class=\"sy0\">!</span> RunLangton<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span>white=<span class=\"st0\">'.'</span><br/>  <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span>black=<span class=\"st0\">'@'</span><br/>  <span class=\"kw1\">if</span> a<span class=\"sy0\">:</span><span class=\"nu0\">0</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <br/>    <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span>white=a<span class=\"sy0\">:</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> a<span class=\"sy0\">:</span><span class=\"nu0\">0</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <br/>      <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span>black=a<span class=\"sy0\">:</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">endif</span><br/>  <span class=\"kw1\">endif</span><br/>  <span class=\"kw1\">call</span> LangtonClear<span class=\"br0\">(</span>l<span class=\"sy0\">:</span>white, l<span class=\"sy0\">:</span>black<span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span>before = <span class=\"kw3\">getpos</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> LangtonStep<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> l<span class=\"sy0\">:</span>after = <span class=\"kw3\">getpos</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> l<span class=\"sy0\">:</span>before == l<span class=\"sy0\">:</span>after<br/>      <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">endif</span><br/>  <span class=\"kw1\">endwhile</span><br/>endfunction</pre>"}, {"lang": "Whitespace", "loc": 92, "block": "<pre class=\"whitespace highlighted_source\"><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/>\u00a0<br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span></pre>"}, {"lang": "XPL0", "loc": 17, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>int X, Y, Dir;<br/>[SetVid($13);                   \\set 320x200 graphic video mode<br/>X:= 50;  Y:= 50;  Dir:= 0;      \\start in middle facing east<br/>repeat  if ReadPix(X,Y) then    \\(black and white are reversed)<br/>                [Dir:= Dir-1;\\left\\   Point(X,Y, 0\\black\\)]<br/>        else    [Dir:= Dir+1;\\right\\  Point(X,Y,$F\\white\\)];<br/>        case Dir &amp; 3 of<br/>          0:    X:= X+1;        \\east<br/>          1:    Y:= Y+1;        \\south<br/>          2:    X:= X-1;        \\west<br/>          3:    Y:= Y-1         \\north<br/>        other   [];<br/>until   X&lt;0\u00a0! X&gt;=100\u00a0! Y&lt;0\u00a0! Y&gt;=100;<br/>X:= ChIn(1);                    \\wait for keystroke<br/>SetVid(3);                      \\restore normal text mode<br/>]</pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">white:=0xff|ff|ff; black:=0;<br/>w:=h:=100; bitmap:=PPM(w,h,white);<br/>x:=w/2; y:=h/2; dir:=0;\t// start in middle facing east<br/>do{<br/>   if(bitmap[x,y]){ dir-=1; bitmap[x,y]=black; } // white--&gt;black, turn left<br/>      else        { dir+=1; bitmap[x,y]=white; } // black--&gt;white, turn right<br/>   switch(dir.bitAnd(3)){  // dir is always &lt;0<br/>      case(0){ x+=1; }\t// east<br/>      case(1){ y-=1; }\t// south<br/>      case(2){ x-=1; }\t// west<br/>      case(3){ y+=1; }  // north<br/>   }<br/>}while((0&lt;=x&lt;w) and (0&lt;=y&lt;h));<br/>\u00a0<br/>bitmap.write(File(\"foo.ppm\",\"wb\"));</pre>"}]}