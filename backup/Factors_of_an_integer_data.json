{"task": "Factors_of_an_integer", "blocks": [{"lang": "0815", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&lt;:1:~&gt;|~#:end:&gt;~x}:str:/={^:wei:~%x&lt;:a:x=$~<br/>=}:wei:x&lt;:1:+{&gt;~&gt;x=-#:fin:^:str:}:fin:{{~%<br/>\u00a0</pre>"}, {"lang": "360 Assembly", "loc": 23, "block": "<pre class=\"text highlighted_source\">*        Factors of an integer -   07/10/2015<br/>FACTOR   CSECT<br/>         USING  FACTOR,R15         set base register<br/>         LA     R7,PG              <a class=\"__cf_email__\" data-cfemail=\"0777606e3a477760\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA     R6,1               i<br/>         L      R3,N               loop count<br/>LOOP     L      R5,N               n<br/>         LA     R4,0<br/>         DR     R4,R6              n/i<br/>         LTR    R4,R4              if mod(n,i)=0<br/>         BNZ    NEXT<br/>         XDECO  R6,PG+120          edit i<br/>         MVC    0(6,R7),PG+126     output i<br/>         LA     R7,6(R7)           pgi=pgi+6<br/>NEXT     LA     R6,1(R6)           i=i+1<br/>         BCT    R3,LOOP            loop<br/>         XPRNT  PG,120             print buffer<br/>         XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>N        DC     F'12345'           &lt;== input value<br/>PG       DC     CL132' '           buffer<br/>         YREGS<br/>         END    FACTOR</pre>"}, {"lang": "ACL2", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factors-r <span class=\"br0\">(</span>n i<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix <span class=\"br0\">(</span>- n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>zp <span class=\"br0\">(</span>- n i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">list</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod n i<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i <span class=\"br0\">(</span>factors-r n <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span>factors-r n <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factors <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>factors-r n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 7, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> factor<span class=\"br0\">(</span>n:uint<span class=\"br0\">)</span>:Vector.<span class=\"sy0\">&lt;</span>uint<span class=\"sy0\">&gt;</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> factors:Vector.<span class=\"sy0\">&lt;</span>uint<span class=\"sy0\">&gt;</span> = <span class=\"kw2\">new</span> Vector.<span class=\"sy0\">&lt;</span>uint<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span>= n; i++<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i == <span class=\"nu0\">0</span><span class=\"br0\">)</span>factors.<span class=\"kw3\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> factors;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 22, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_Line</span>;<br/><span class=\"kw3\">procedure</span> Factors <span class=\"kw1\">is</span><br/>   Number \u00a0: Positive;<br/>   Test_Nr\u00a0: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> /= <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Standard_Error</span>, <span class=\"st0\">\"Missing argument!\"</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Set_Exit_Status</span> <span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Failure</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   Number\u00a0:= Positive'Value <span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Factors of\"</span> &amp; Positive'Image <span class=\"br0\">(</span>Number<span class=\"br0\">)</span> &amp; <span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Number <span class=\"kw2\">mod</span> Test_Nr = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Positive'Image <span class=\"br0\">(</span>Test_Nr<span class=\"br0\">)</span> &amp; <span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Test_Nr ** <span class=\"nu0\">2</span> &gt;= Number;<br/>      Test_Nr\u00a0:= Test_Nr + <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span>Positive'Image <span class=\"br0\">(</span>Number<span class=\"br0\">)</span> &amp; <span class=\"st0\">\".\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Factors;</pre>"}, {"lang": "Aikido", "loc": 34, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>function factor (n:int) {<br/>    var result = []<br/>    function append (v) {<br/>        if (!(v in result)) {<br/>            result.append (v)<br/>        }<br/>    }<br/>    var sqrt = cast&lt;int&gt;(Math.sqrt (n))<br/>    append (1)<br/>    for (var i = n-1\u00a0; i &gt;= sqrt\u00a0; i--) {<br/>        if ((n\u00a0% i) == 0) {<br/>            append (i)<br/>            append (n/i)<br/>        }<br/>    }<br/>    append (n)<br/>    return result.sort()<br/>}<br/>\u00a0<br/>function printvec (vec) {<br/>    var comma = \"\"<br/>    print (\"[\")<br/>    foreach v vec {<br/>        print (comma + v)<br/>        comma = \", \"<br/>    }<br/>    println (\"]\")<br/>}<br/>\u00a0<br/>printvec (factor (45))<br/>printvec (factor (25))<br/>printvec (factor (100))</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> YIELDINT <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> gen factors <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> YIELDINT yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> n <span class=\"kw12\">MOD</span> i <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>      yield<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>      <span class=\"kw3\">INT</span> other <span class=\"sy1\">=</span> n <span class=\"kw12\">OVER</span> i<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> i <span class=\"kw15\">NE</span> other <span class=\"kw2\">THEN</span> yield<span class=\"br0\">(</span>n <span class=\"kw12\">OVER</span> i<span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> nums2factor <span class=\"sy1\">=</span> <span class=\"br0\">(</span>45<span class=\"sy1\">,</span> 53<span class=\"sy1\">,</span> 64<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> nums2factor <span class=\"kw2\">DO</span><br/>  <span class=\"kw3\">INT</span> num <span class=\"sy1\">=</span> nums2factor<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">STRING</span> sep <span class=\"sy1\">:=</span> <span class=\"st0\">\": \"</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># FOR INT j IN #</span> gen factors<span class=\"br0\">(</span>num<span class=\"sy1\">,</span> <span class=\"coMULTI\"># ) DO ( #</span><br/><span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span><span class=\"kw3\">INT</span> j<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>       <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>sep<span class=\"sy1\">,</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>j<span class=\"sy1\">,</span>0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>       sep<span class=\"sy1\">:=</span><span class=\"st0\">\", \"</span><br/><span class=\"coMULTI\"># OD #</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "ALGOL W", "loc": 52, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% return the factors of n ( n should be &gt;= 1 ) in the array factor      \u00a0%<br/>   \u00a0% the bounds of factor should be 0\u00a0:: len (len must be at least 1)      \u00a0%<br/>   \u00a0% the number of factors will be returned in factor( 0 )                 \u00a0%<br/>    procedure getFactorsOf ( integer value n<br/>                          \u00a0; integer array factor( * )<br/>                          \u00a0; integer value len<br/>                           )\u00a0;<br/>    begin<br/>        for i\u00a0:= 0 until len do factor( i )\u00a0:= 0;<br/>        if n &gt;= 1 and len &gt;= 1 then begin<br/>            integer pos, lastFactor;<br/>            factor( 0 )\u00a0:= factor( 1 )\u00a0:= pos\u00a0:= 1;<br/>           \u00a0% find the factors up to sqrt( n )                              \u00a0%<br/>            for f\u00a0:= 2 until truncate( sqrt( n ) ) + 1 do begin<br/>                if ( n rem f ) = 0 and pos &lt;= len then begin<br/>                   \u00a0% found another factor and there's room to store it     \u00a0%<br/>                    pos          \u00a0:= pos + 1;<br/>                    factor( 0   )\u00a0:= pos;<br/>                    factor( pos )\u00a0:= f<br/>                end if_found_factor<br/>            end for_f;<br/>           \u00a0% find the factors above sqrt( n )                              \u00a0%<br/>            lastFactor\u00a0:= factor( factor( 0 ) );<br/>            for f\u00a0:= factor( 0 ) step -1 until 1 do begin<br/>                integer newFactor;<br/>                newFactor\u00a0:= n div factor( f );<br/>                if newFactor &gt; lastFactor and pos &lt;= len then begin<br/>                   \u00a0% found another factor and there's room to store it     \u00a0%<br/>                    pos          \u00a0:= pos + 1;<br/>                    factor( 0   )\u00a0:= pos;<br/>                    factor( pos )\u00a0:= newFactor<br/>                end if_found_factor<br/>            end for_f;<br/>        end if_params_ok<br/>    end getFactorsOf\u00a0;<br/>\u00a0<br/>\u00a0<br/>   \u00a0% prpocedure to test getFactorsOf                                       \u00a0%<br/>    procedure testFactorsOf( integer value n )\u00a0;<br/>    begin<br/>        integer array factor( 0\u00a0:: 100 );<br/>        getFactorsOf( n, factor, 100 );<br/>        i_w\u00a0:= 1; s_w\u00a0:= 0;\u00a0% set output format                             \u00a0%<br/>        write( n, \" has \", factor( 0 ), \" factors:\" );<br/>        for f\u00a0:= 1 until factor( 0 ) do writeon( \" \", factor( f ) )<br/>    end testFactorsOf\u00a0;<br/>\u00a0<br/>   \u00a0% test the factorising                                                  \u00a0%<br/>    for i\u00a0:= 1 until 100 do testFactorsOf( i )<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 5, "block": "<pre class=\"text highlighted_source\">      factors\u2190{(0=(\u2373\u2375)|\u2375)/\u2373\u2375}<br/>      factors 12345<br/>1 3 5 15 823 2469 4115 12345<br/>      factors 720<br/>1 2 3 4 5 6 8 9 10 12 15 16 18 20 24 30 36 40 45 48 60 72 80 90 120 144 180 240 360 720</pre>"}, {"lang": "AppleScript", "loc": 93, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- integerFactors\u00a0:: Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> integerFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> realRoot <span class=\"kw3\">to</span> n <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> intRoot <span class=\"kw3\">to</span> realRoot <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>        <span class=\"kw3\">set</span> blnPerfectSquare <span class=\"kw3\">to</span> intRoot <span class=\"sy0\">=</span> realRoot<br/>\u00a0<br/>        <span class=\"co1\">-- isFactor\u00a0:: Int -&gt; Bool </span><br/>        <span class=\"kw3\">script</span> isFactor<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"co1\">-- Factors up to square root of n,</span><br/>        <span class=\"kw3\">set</span> lows <span class=\"kw3\">to</span> filter<span class=\"br0\">(</span>isFactor, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, intRoot<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">-- integerQuotient\u00a0:: Int -&gt; Int</span><br/>        <span class=\"kw3\">script</span> integerQuotient<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> x<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"co1\">-- and quotients of these factors beyond the square root.</span><br/>        lows <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>integerQuotient, \u00ac<br/>            <span class=\"kw1\">items</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>blnPerfectSquare <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> reverse <span class=\"kw3\">of</span> lows<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> integerFactors<br/>\u00a0<br/><span class=\"co1\">-- TEST ------------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    integerFactors<span class=\"br0\">(</span><span class=\"nu0\">120</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS -----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- filter\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> filter<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">if</span> |\u03bb|<span class=\"br0\">(</span>v, i, xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> filter<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "ARM Assembly", "loc": 188, "block": "<pre class=\"arm highlighted_source\">\u00a0<br/><span class=\"sy0\">/*</span> ARM assembly Raspberry PI  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span>  program factorst<span class=\"sy0\">.</span>s   <span class=\"sy0\">*/</span><br/>\u00a0<br/><span class=\"sy0\">/*</span> Constantes    <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>equ STDOUT<span class=\"sy0\">,</span> <span class=\"nu0\">1</span>     @ Linux output console<br/><span class=\"sy0\">.</span>equ EXIT<span class=\"sy0\">,</span>   <span class=\"nu0\">1</span>     @ Linux syscall<br/><span class=\"sy0\">.</span>equ WRITE<span class=\"sy0\">,</span>  <span class=\"nu0\">4</span>     @ Linux syscall<br/><span class=\"sy0\">/*</span> Initialized data <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>data<br/>szMessDeb<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>ascii <span class=\"st0\">\"Factors of\u00a0:\"</span><br/>sMessValeur<span class=\"sy0\">:</span>   <span class=\"sy0\">.</span>fill <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><br/>                   <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"are\u00a0: \\n\"</span><br/>sMessFactor<span class=\"sy0\">:</span>   <span class=\"sy0\">.</span>fill <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><br/>                   <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"\\n\"</span><br/>szCarriageReturn<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"\\n\"</span><br/>\u00a0<br/><span class=\"sy0\">/*</span> UnInitialized data <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>bss <br/>\u00a0<br/><span class=\"sy0\">/*</span>  code section <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>text<br/><span class=\"sy0\">.</span>global main <br/>main<span class=\"sy0\">:</span>                <span class=\"sy0\">/*</span> entry of program  <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> saves <span class=\"nu0\">2</span> registers <span class=\"sy0\">*/</span><br/>\u00a0<br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">100</span><br/>    <span class=\"kw7\">bl</span> factors<br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">97</span><br/>    <span class=\"kw7\">bl</span> factors<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iNumber<br/>    <span class=\"kw7\">bl</span> factors<br/>\u00a0<br/>\u00a0<br/><span class=\"nu0\">100</span><span class=\"sy0\">:</span>   <span class=\"sy0\">/*</span> standard end of the program <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> #<span class=\"nu0\">0</span>                  @ return code<br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>                 @restaur <span class=\"nu0\">2</span> registers<br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r7</span><span class=\"sy0\">,</span> #EXIT              @ request to exit program<br/>    swi <span class=\"nu0\">0</span>                       @ perform the system call<br/>\u00a0<br/>iNumber<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int <span class=\"nu0\">32767</span><br/>iAdrszCarriageReturn<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>int  szCarriageReturn<br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span>     calcul factors of number                                  <span class=\"sy0\">*/</span> <br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains the number <span class=\"sy0\">*/</span><br/>factors<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t<span class=\"sy0\">/*</span> save  registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r1</span><span class=\"sy0\">-</span><span class=\"kw35\">r6</span><span class=\"br0\">}</span>    \t\t<span class=\"sy0\">/*</span> save others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r5</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span>    @ limit calcul<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>iAdrsMessValeur   @ conversion register in decimal string<br/>    <span class=\"kw7\">bl</span> conversion10S<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszMessDeb     @ display message<br/>    <span class=\"kw7\">bl</span> affichageMess<br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r6</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>    @ counter loop<br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span>   @ loop <br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r5</span>    @ dividende<br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r6</span>    @ divisor<br/>    <span class=\"kw7\">bl</span> division<br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>    @ remainder = zero\u00a0?<br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">2f</span><br/>    @ display result if yes<br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r6</span><br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>iAdrsMessFactor<br/>    <span class=\"kw7\">bl</span> conversion10S<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrsMessFactor<br/>    <span class=\"kw7\">bl</span> affichageMess<br/><span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw35\">r6</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>      @ <span class=\"kw1\">add</span> <span class=\"nu0\">1</span> to loop counter<br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r6</span><span class=\"sy0\">,</span><span class=\"kw35\">r5</span>      @ &lt;=  number\u00a0?<br/>    <span class=\"kw8\">ble</span> <span class=\"nu0\">1b</span>        @ yes loop<br/><span class=\"nu0\">100</span><span class=\"sy0\">:</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r1</span><span class=\"sy0\">-</span><span class=\"kw35\">r6</span><span class=\"br0\">}</span>     \t\t<span class=\"sy0\">/*</span> restaur others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t\t<span class=\"sy0\">/*</span> restaur des  <span class=\"nu0\">2</span> registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>\t        \t\t\t<span class=\"sy0\">/*</span> return  <span class=\"sy0\">*/</span><br/>iAdrsMessValeur<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int sMessValeur<br/>iAdrszMessDeb<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szMessDeb<br/>iAdrsMessFactor<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int sMessFactor<br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span>     display text with size calculation                         <span class=\"sy0\">*/</span> <br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains the address of the message <span class=\"sy0\">*/</span><br/>affichageMess<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t<span class=\"sy0\">/*</span> save  registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r7</span><span class=\"br0\">}</span>    \t\t<span class=\"sy0\">/*</span> save others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>   \t\t\t\t<span class=\"sy0\">/*</span> counter length <span class=\"sy0\">*/</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span>      \t<span class=\"sy0\">/*</span> loop length calculation <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">ldrb</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"br0\">]</span>  \t\t\t<span class=\"sy0\">/*</span> read octet start position <span class=\"sy0\">+</span> index <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>       \t\t\t<span class=\"sy0\">/*</span> if <span class=\"nu0\">0</span> its over <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">addne</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>   \t\t\t<span class=\"sy0\">/*</span> else <span class=\"kw1\">add</span> <span class=\"nu0\">1</span> in the length <span class=\"sy0\">*/</span><br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">1b</span>          \t\t\t<span class=\"sy0\">/*</span> <span class=\"kw1\">and</span> loop <span class=\"sy0\">*/</span><br/>                                <span class=\"sy0\">/*</span> so here <span class=\"kw35\">r2</span> contains the length of the message <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span>        \t\t\t<span class=\"sy0\">/*</span> address message in <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#STDOUT      \t\t<span class=\"sy0\">/*</span> code to write to the standard output Linux <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r7</span><span class=\"sy0\">,</span> #WRITE             <span class=\"sy0\">/*</span> code call system <span class=\"st0\">\"write\"</span> <span class=\"sy0\">*/</span><br/>    swi #<span class=\"nu0\">0</span>                      <span class=\"sy0\">/*</span> call systeme <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r7</span><span class=\"br0\">}</span>     \t\t<span class=\"sy0\">/*</span> restaur others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t\t<span class=\"sy0\">/*</span> restaur des  <span class=\"nu0\">2</span> registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>\t        \t\t\t<span class=\"sy0\">/*</span> return  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span>=============================================<span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> division integer unsigned                <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span>============================================<span class=\"sy0\">*/</span><br/>division<span class=\"sy0\">:</span><br/>    <span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains N <span class=\"sy0\">*/</span><br/>    <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> contains D <span class=\"sy0\">*/</span><br/>    <span class=\"sy0\">/*</span> <span class=\"kw35\">r2</span> contains Q <span class=\"sy0\">*/</span><br/>    <span class=\"sy0\">/*</span> <span class=\"kw35\">r3</span> contains R <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span> <span class=\"kw35\">lr</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> #<span class=\"nu0\">0</span>                 <span class=\"sy0\">/*</span> <span class=\"kw35\">r2</span>\u00a0? <span class=\"nu0\">0</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> #<span class=\"nu0\">0</span>                 <span class=\"sy0\">/*</span> <span class=\"kw35\">r3</span>\u00a0? <span class=\"nu0\">0</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span> #<span class=\"nu0\">32</span>                <span class=\"sy0\">/*</span> <span class=\"kw35\">r4</span>\u00a0? <span class=\"nu0\">32</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw7\">b</span> <span class=\"nu0\">2f</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>    <span class=\"kw5\">movs</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> <span class=\"kw1\">LSL</span> #<span class=\"nu0\">1</span>    <span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span>\u00a0? <span class=\"kw35\">r0</span> &lt;&lt; <span class=\"nu0\">1</span> updating cpsr <span class=\"br0\">(</span>sets C if 31st bit of <span class=\"kw35\">r0</span> was <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">adc</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"kw35\">r3</span>         <span class=\"sy0\">/*</span> <span class=\"kw35\">r3</span>\u00a0? <span class=\"kw35\">r3</span> <span class=\"sy0\">+</span> <span class=\"kw35\">r3</span> <span class=\"sy0\">+</span> C<span class=\"sy0\">.</span> This is equivalent to <span class=\"kw35\">r3</span>\u00a0? <span class=\"br0\">(</span><span class=\"kw35\">r3</span> &lt;&lt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> C <span class=\"sy0\">*/</span><br/>\u00a0<br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"kw35\">r1</span>             <span class=\"sy0\">/*</span> compute <span class=\"kw35\">r3</span> <span class=\"sy0\">-</span> <span class=\"kw35\">r1</span> <span class=\"kw1\">and</span> update cpsr <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">subhs</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"kw35\">r1</span>       <span class=\"sy0\">/*</span> if <span class=\"kw35\">r3</span> &gt;= <span class=\"kw35\">r1</span> <span class=\"br0\">(</span>C=<span class=\"nu0\">1</span><span class=\"br0\">)</span> then <span class=\"kw35\">r3</span>\u00a0? <span class=\"kw35\">r3</span> <span class=\"sy0\">-</span> <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">adc</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw35\">r2</span>         <span class=\"sy0\">/*</span> <span class=\"kw35\">r2</span>\u00a0? <span class=\"kw35\">r2</span> <span class=\"sy0\">+</span> <span class=\"kw35\">r2</span> <span class=\"sy0\">+</span> C<span class=\"sy0\">.</span> This is equivalent to <span class=\"kw35\">r2</span>\u00a0? <span class=\"br0\">(</span><span class=\"kw35\">r2</span> &lt;&lt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> C <span class=\"sy0\">*/</span><br/><span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>    <span class=\"kw5\">subs</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span> #<span class=\"nu0\">1</span>        <span class=\"sy0\">/*</span> <span class=\"kw35\">r4</span>\u00a0? <span class=\"kw35\">r4</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw8\">bpl</span> <span class=\"nu0\">1b</span>            <span class=\"sy0\">/*</span> if <span class=\"kw35\">r4</span> &gt;= <span class=\"nu0\">0</span> <span class=\"br0\">(</span>N=<span class=\"nu0\">0</span><span class=\"br0\">)</span> then branch to <span class=\"sy0\">.</span>Lloop1 <span class=\"sy0\">*/</span><br/>\u00a0<br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span> <span class=\"kw35\">lr</span><span class=\"br0\">}</span><br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>\t<br/>\u00a0<br/><span class=\"sy0\">/***************************************************/</span><br/><span class=\"sy0\">/*</span>   conversion register in string d\u00e9cimal signed  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/***************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains the register   <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> contains address of conversion area <span class=\"sy0\">*/</span><br/>conversion10S<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> save registers frame <span class=\"kw1\">and</span> return <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">-</span><span class=\"kw35\">r5</span><span class=\"br0\">}</span>   <span class=\"sy0\">/*</span> save other registers  <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span>       <span class=\"sy0\">/*</span> early storage area <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r5</span><span class=\"sy0\">,</span>#<span class=\"st0\">'+'</span>     <span class=\"sy0\">/*</span> default sign is <span class=\"sy0\">+</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>       <span class=\"sy0\">/*</span> n\u00e9gatif number\u00a0? <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">movlt</span> <span class=\"kw35\">r5</span><span class=\"sy0\">,</span>#<span class=\"st0\">'-'</span>     <span class=\"sy0\">/*</span> yes sign is <span class=\"sy0\">-</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">mvnlt</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span>       <span class=\"sy0\">/*</span> <span class=\"kw1\">and</span> inverse in positive value <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">addlt</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">10</span>   <span class=\"sy0\">/*</span> area length <span class=\"sy0\">*/</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"sy0\">/*</span> conversion loop <span class=\"sy0\">*/</span><br/>    <span class=\"kw7\">bl</span> divisionpar10 <span class=\"sy0\">/*</span> division  <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>#<span class=\"nu0\">48</span>        <span class=\"sy0\">/*</span> <span class=\"kw1\">add</span> <span class=\"nu0\">48</span> at remainder for conversion ascii <span class=\"sy0\">*/</span>\t<br/>    <span class=\"kw3\">strb</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"br0\">]</span>  <span class=\"sy0\">/*</span> store byte area <span class=\"kw35\">r5</span> <span class=\"sy0\">+</span> position <span class=\"kw35\">r4</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">sub</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>      <span class=\"sy0\">/*</span> previous position <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>     <br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">1b</span>\t       <span class=\"sy0\">/*</span> loop if quotient not equal z\u00e9ro <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">strb</span> <span class=\"kw35\">r5</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"br0\">]</span>  <span class=\"sy0\">/*</span> store sign at current position  <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">subs</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>   <span class=\"sy0\">/*</span> previous position <span class=\"sy0\">*/</span><br/>    <span class=\"kw8\">blt</span>  <span class=\"nu0\">100f</span>         <span class=\"sy0\">/*</span> if <span class=\"kw35\">r4</span> &lt; <span class=\"nu0\">0</span>  end  <span class=\"sy0\">*/</span><br/>    <span class=\"sy0\">/*</span> else complete area with space <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span>#<span class=\"st0\">' '</span>   <span class=\"sy0\">/*</span> character space <span class=\"sy0\">*/</span>\t<br/><span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>    <span class=\"kw3\">strb</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"br0\">]</span>  <span class=\"sy0\">/*</span> store  byte  <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">subs</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>   <span class=\"sy0\">/*</span> previous position <span class=\"sy0\">*/</span><br/>    <span class=\"kw8\">bge</span> 2b        <span class=\"sy0\">/*</span> loop if <span class=\"kw35\">r4</span> greather or equal zero <span class=\"sy0\">*/</span><br/><span class=\"nu0\">100</span><span class=\"sy0\">:</span>  <span class=\"sy0\">/*</span>  standard end of function  <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">-</span><span class=\"kw35\">r5</span><span class=\"br0\">}</span>   <span class=\"sy0\">/*</span>restaur others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>   <span class=\"sy0\">/*</span> restaur des  <span class=\"nu0\">2</span> registers frame et return  <span class=\"sy0\">*/</span><br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>   <br/>\u00a0<br/><span class=\"sy0\">/***************************************************/</span><br/><span class=\"sy0\">/*</span>   division par <span class=\"nu0\">10</span>   sign\u00e9                       <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> Thanks to http<span class=\"sy0\">://</span>thinkingeek<span class=\"sy0\">.</span>com<span class=\"sy0\">/</span>arm<span class=\"sy0\">-</span>assembler<span class=\"sy0\">-</span>raspberry<span class=\"sy0\">-</span>pi<span class=\"sy0\">/*</span>  <br/><span class=\"sy0\">/*</span> <span class=\"kw1\">and</span>   http<span class=\"sy0\">://</span>www<span class=\"sy0\">.</span>hackersdelight<span class=\"sy0\">.</span>org<span class=\"sy0\">/</span>            <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/***************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contient le dividende   <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> retourne le quotient <span class=\"sy0\">*/</span>\t<br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> retourne le reste  <span class=\"sy0\">*/</span><br/>divisionpar10<span class=\"sy0\">:</span>\t<br/>  <span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains the argument to be divided by <span class=\"nu0\">10</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r2</span><span class=\"sy0\">-</span><span class=\"kw35\">r4</span><span class=\"br0\">}</span>   <span class=\"sy0\">/*</span> save autres registres  <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">mov</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span> <br/>   <span class=\"kw3\">ldr</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span>Ls_magic_number_10 <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> &lt;<span class=\"sy0\">-</span> magic_number <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">smull</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"kw35\">r0</span>   <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> &lt;<span class=\"sy0\">-</span> Lower32Bits<span class=\"br0\">(</span><span class=\"kw35\">r1</span><span class=\"sy0\">*</span><span class=\"kw35\">r0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <span class=\"kw35\">r2</span> &lt;<span class=\"sy0\">-</span> Upper32Bits<span class=\"br0\">(</span><span class=\"kw35\">r1</span><span class=\"sy0\">*</span><span class=\"kw35\">r0</span><span class=\"br0\">)</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw1\">ASR</span> #<span class=\"nu0\">2</span>     <span class=\"sy0\">/*</span> <span class=\"kw35\">r2</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r2</span> &gt;&gt; <span class=\"nu0\">2</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> <span class=\"kw1\">LSR</span> #<span class=\"nu0\">31</span>    <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r0</span> &gt;&gt; <span class=\"nu0\">31</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">add</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw35\">r1</span>         <span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r2</span> <span class=\"sy0\">+</span> <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">add</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span> <span class=\"kw1\">lsl</span> #<span class=\"nu0\">2</span>   <span class=\"sy0\">/*</span> <span class=\"kw35\">r2</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r0</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">sub</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw1\">lsl</span> #<span class=\"nu0\">1</span>   <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r4</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw35\">r2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>  = <span class=\"kw35\">r4</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw35\">r0</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r2</span><span class=\"sy0\">-</span><span class=\"kw35\">r4</span><span class=\"br0\">}</span><br/>   <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>                  <span class=\"sy0\">/*</span> leave function <span class=\"sy0\">*/</span><br/>   <span class=\"sy0\">.</span>align <span class=\"nu0\">4</span><br/><span class=\"sy0\">.</span>Ls_magic_number_10<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>word <span class=\"nu0\">0x66666667</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 9, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span>\u00a0% factors<span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span> factors<span class=\"br0\">(</span><span class=\"nu0\">53</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span> factors<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>\u00a0<br/>Factors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span>  v <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"nu0\">1</span> <span class=\"st0\">\",\"</span> n\u00a0: <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span>\u00a0? v\u00a0: v <span class=\"st0\">\",\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\",\"</span> n<span class=\"sy0\">//</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> N U D<span class=\"sy0\">,</span><br/>   <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> v<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 13, "block": "<pre class=\"autoit highlighted_source\"><span class=\"co0\">;AutoIt Version: 3.2.10.0</span><br/><span class=\"re0\">$num</span> <span class=\"sy0\">=</span> <span class=\"nu0\">45</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"Factors\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Factors of \"</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$num</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" are: \"</span> <span class=\"sy0\">&amp;</span> factors<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">consolewrite</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"Factors of \"</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$num</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" are: \"</span> <span class=\"sy0\">&amp;</span> factors<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> factors<span class=\"br0\">(</span><span class=\"re0\">$intg</span><span class=\"br0\">)</span><br/>   <span class=\"re0\">$ls_factors</span><span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">to</span></a> <span class=\"re0\">$intg</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>      <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"re0\">$intg</span><span class=\"sy0\">/</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Int.htm\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$intg</span><span class=\"sy0\">/</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t <span class=\"re0\">$ls_factors</span><span class=\"sy0\">=</span><span class=\"re0\">$ls_factors</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$i</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\", \"</span><br/>      <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$ls_factors</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$intg</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a></pre>"}, {"lang": "AWK", "loc": 20, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f FACTORS_OF_AN_INTEGER.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"enter a number or C/R to exit\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"invalid:\u00a0%s<span class=\"es0\">\\n</span>\"</span>,<span class=\"re0\">$0</span><span class=\"br0\">)</span><br/>      next<br/>    <span class=\"br0\">}</span><br/>    n = <span class=\"re0\">$0</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"factors of\u00a0%s:\"</span>,n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy3\">%</span> i <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span>,i<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 41, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">SUB</span> factor <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckshared.shtml\"><span class=\"kw3\">SHARED</span></a> factors<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> L <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"Gimme a number\"</span>; i<br/>\u00a0<br/>factor i<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> factors<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">FOR</span> L <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\",\"</span>; factors<span class=\"br0\">(</span>L<span class=\"br0\">)</span>;<br/><span class=\"kw1\">NEXT</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/>\u00a0<br/><span class=\"kw1\">SUB</span> factor <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> tmpint1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> L0 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> L1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> tmp<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> factors<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    factors<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> what<br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> L0<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"co1\">'all this REDIMing and copying can be replaced with:</span><br/>            <span class=\"co1\">'REDIM PRESERVE factors(UBOUND(factors)+1)</span><br/>            <span class=\"co1\">'in languages that support the PRESERVE keyword</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> tmp<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>            <span class=\"kw1\">FOR</span> L1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><br/>                tmp<span class=\"br0\">(</span>L1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> factors<span class=\"br0\">(</span>L1<span class=\"br0\">)</span><br/>            <span class=\"kw1\">NEXT</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> factors<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">FOR</span> L1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                factors<span class=\"br0\">(</span>L1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> tmp<span class=\"br0\">(</span>L1<span class=\"br0\">)</span><br/>            <span class=\"kw1\">NEXT</span><br/>            factors<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> L0<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">NEXT</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span></pre>"}, {"lang": "Batch File", "loc": 9, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> res=Factors of <span class=\"sy0\">%</span><span class=\"re3\">1</span>:<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">1</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">fac</span> <span class=\"sy0\">%</span><span class=\"re3\">1</span> <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">fac</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a test = <span class=\"sy0\">%</span><span class=\"re3\">1</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">test</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> res=<span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">2</span></pre>"}, {"lang": "BBC BASIC", "loc": 25, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTLIB\"<br/>      sort% = FN_sortinit(0, 0)<br/>\u00a0<br/>      PRINT \"The factors of 45 are \" FNfactorlist(45)<br/>      PRINT \"The factors of 12345 are \" FNfactorlist(12345)<br/>      END<br/>\u00a0<br/>      DEF FNfactorlist(N%)<br/>      LOCAL C%, I%, L%(), L$<br/>      DIM L%(32)<br/>      FOR I% = 1 TO SQR(N%)<br/>        IF (N% MOD I% = 0) THEN<br/>          L%(C%) = I%<br/>          C% += 1<br/>          IF (N% &lt;&gt; I%^2) THEN<br/>            L%(C%) = (N% DIV I%)<br/>            C% += 1<br/>          ENDIF<br/>        ENDIF<br/>      NEXT I%<br/>      CALL sort%, L%(0)<br/>      FOR I% = 0 TO C%-1<br/>        L$ += STR$(L%(I%)) + \", \"<br/>      NEXT<br/>      = LEFT$(LEFT$(L$))</pre>"}, {"lang": "bc", "loc": 44, "block": "<pre class=\"text highlighted_source\">/* Calculate the factors of n and return their count.<br/> * This function mutates the global array f[] which will<br/> * contain all factors of n in ascending order after the call!<br/> */<br/>define f(n) {<br/>    auto i, d, h, h[], l, o<br/>    /* Local variables:<br/>     * i: Loop variable.<br/>     * d: Complementary (higher) factor to i.<br/>     * h: Will always point to the last element of h[].<br/>     * h[]: Array to hold the greater factor of the pair (x, y), where <br/>     *      x * y == n. The factors are stored in descending order.<br/>     * l: Will always point to the next free spot in f[].<br/>     * o: For saving the value of scale.<br/>     */<br/>\u00a0<br/>    /* Use integer arithmetic */<br/>    o = scale<br/>    scale = 0<br/>\u00a0<br/>    /* Two factors are 1 and n (if n\u00a0!= 1) */<br/>    f[l++] = 1<br/>    if (n == 1) return(1)<br/>    h[0] = n<br/>\u00a0<br/>    /* Main loop */<br/>    for (i = 2; i &lt; h[h]; i++) {<br/>        if (n\u00a0% i == 0) {<br/>            d = n / i<br/>            if (d\u00a0!= i) {<br/>                h[++h] = d<br/>            }<br/>            f[l++] = i<br/>        }<br/>    }<br/>\u00a0<br/>    /* Append the values in h[] to f[] */<br/>    while (h &gt;= 0) {<br/>        f[l++] = h[h--]<br/>    }<br/>\u00a0<br/>    scale = o<br/>    return(l)<br/>}</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">10:p&amp;v:      &gt;:0:g%#v_0:g\\:0:g/\\v<br/>     &gt;:0:g:*`|      &gt;           &gt;0:g1+0:p<br/>             &gt;:0:g:*-#v_0:g\\&gt;$&gt;:!#@_.v<br/>                      &gt;     ^ ^  ,\" \"&lt;</pre>"}, {"lang": "C", "loc": 68, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>list<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">short</span> count<span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span> Factors<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> xferFactors<span class=\"br0\">(</span> Factors <span class=\"sy0\">*</span>fctrs<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>flist<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> flix <span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> ix<span class=\"sy0\">,</span> ij<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> newSize <span class=\"sy0\">=</span> fctrs<span class=\"sy0\">-&gt;</span>count <span class=\"sy0\">+</span> flix<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>newSize <span class=\"sy0\">&gt;</span> flix<span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>        fctrs<span class=\"sy0\">-&gt;</span>list <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span> fctrs<span class=\"sy0\">-&gt;</span>list<span class=\"sy0\">,</span> newSize <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        fctrs<span class=\"sy0\">-&gt;</span>list <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>  newSize <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>ij<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>ix<span class=\"sy0\">=</span>fctrs<span class=\"sy0\">-&gt;</span>count<span class=\"sy0\">;</span> ix<span class=\"sy0\">&lt;</span>newSize<span class=\"sy0\">;</span> ij<span class=\"sy0\">++,</span>ix<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        fctrs<span class=\"sy0\">-&gt;</span>list<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> <span class=\"sy0\">=</span> flist<span class=\"br0\">[</span>ij<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    fctrs<span class=\"sy0\">-&gt;</span>count <span class=\"sy0\">=</span> newSize<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Factors <span class=\"sy0\">*</span>factor<span class=\"br0\">(</span> <span class=\"kw4\">int</span> num<span class=\"sy0\">,</span> Factors <span class=\"sy0\">*</span>fctrs<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> flist<span class=\"br0\">[</span><span class=\"nu0\">301</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> flix<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> dvsr<span class=\"sy0\">;</span><br/>    flix <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    fctrs<span class=\"sy0\">-&gt;</span>count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>fctrs<span class=\"sy0\">-&gt;</span>list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fctrs<span class=\"sy0\">-&gt;</span>list <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>dvsr<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> dvsr<span class=\"sy0\">*</span>dvsr <span class=\"sy0\">&lt;</span> num<span class=\"sy0\">;</span> dvsr<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> dvsr <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> flix <span class=\"sy0\">==</span> <span class=\"nu0\">300</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            xferFactors<span class=\"br0\">(</span> fctrs<span class=\"sy0\">,</span> flist<span class=\"sy0\">,</span> flix <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            flix <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        flist<span class=\"br0\">[</span>flix<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> dvsr<span class=\"sy0\">;</span><br/>        flist<span class=\"br0\">[</span>flix<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> num<span class=\"sy0\">/</span>dvsr<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dvsr<span class=\"sy0\">*</span>dvsr <span class=\"sy0\">==</span> num<span class=\"br0\">)</span> <br/>        flist<span class=\"br0\">[</span>flix<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> dvsr<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>flix <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        xferFactors<span class=\"br0\">(</span> fctrs<span class=\"sy0\">,</span> flist<span class=\"sy0\">,</span> flix <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> fctrs<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> nums2factor<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">2059</span><span class=\"sy0\">,</span> <span class=\"nu0\">223092870</span><span class=\"sy0\">,</span> <span class=\"nu0\">3135</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    Factors ftors <span class=\"sy0\">=</span> <span class=\"br0\">{</span> NULL<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> sep<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        factor<span class=\"br0\">(</span> nums2factor<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>ftors <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>factors of\u00a0%d are:<span class=\"es1\">\\n</span>  \"</span><span class=\"sy0\">,</span> nums2factor<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sep <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>ftors.<span class=\"me1\">count</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c\u00a0%d\"</span><span class=\"sy0\">,</span> sep<span class=\"sy0\">,</span> ftors.<span class=\"me1\">list</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            sep <span class=\"sy0\">=</span> <span class=\"st0\">','</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 36, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> GenerateFactors<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> factors<span class=\"sy4\">;</span><br/>    factors.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    factors.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> i <span class=\"sy2\">*</span> i <span class=\"sy1\">&lt;=</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy2\">%</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            factors.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy2\">*</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> n<span class=\"br0\">)</span><br/>                factors.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>n <span class=\"sy2\">/</span> i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>factors.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, factors.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> factors<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> SampleNumbers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">3135</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">60</span>, <span class=\"nu0\">81</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>SampleNumbers<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> factors <span class=\"sy1\">=</span> GenerateFactors<span class=\"br0\">(</span>SampleNumbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Factors of \"</span> <span class=\"sy1\">&lt;&lt;</span> SampleNumbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" are:<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>factors.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, factors.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 19, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extension<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Factors<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> me<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, me<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> me <span class=\"sy0\">%</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, <span class=\"nu0\">45</span><span class=\"sy0\">.</span><span class=\"me1\">Factors</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 8, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\t{Integer*} getFactors(Integer n) =&gt;<br/>\t\t(1..n).filter((Integer element) =&gt; element.divides(n));<br/>\u00a0<br/>\tfor(Integer i in 1..100) {<br/>\t\tprint(\"the factors of ``i`` are ``getFactors(i)``\");<br/>\t}<br/>}</pre>"}, {"lang": "Chapel", "loc": 8, "block": "<pre class=\"text highlighted_source\">iter factors(n) {<br/>\tfor i in 1..floor(sqrt(n)):int {<br/>\t\tif n\u00a0% i == 0 then {<br/>\t\t\tyield i;<br/>\t\t\tyield n / i;<br/>\t\t}<br/>\t}<br/>}</pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn factors <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <br/>\t<span class=\"br0\">(</span>filter #<span class=\"br0\">(</span>zero? <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span>inc n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>factors <span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 42, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> FACTORS<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  CALCULATING<span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  NUM  <span class=\"kw3\">USAGE</span> BINARY-LONG <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  LIM  <span class=\"kw3\">USAGE</span> BINARY-LONG <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  CNT  <span class=\"kw3\">USAGE</span> BINARY-LONG <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  DIV  <span class=\"kw3\">USAGE</span> BINARY-LONG <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  <span class=\"kw4\">REM</span>  <span class=\"kw3\">USAGE</span> BINARY-LONG <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  ZRS  <span class=\"kw3\">USAGE</span> BINARY-SHORT <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  DISPLAYING<span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  DIS  <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw3\">USAGE</span> <span class=\"kw2\">DISPLAY</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       MAIN-<span class=\"kw3\">PROCEDURE</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Factors of? \"</span> <span class=\"kw3\">WITH</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><br/>           <span class=\"kw2\">ACCEPT</span> NUM<br/>           <span class=\"kw2\">DIVIDE</span> NUM <span class=\"kw3\">BY</span> <span class=\"nu0\">2</span> <span class=\"kw2\">GIVING</span> LIM<span class=\"sy0\">.</span><br/>\u00a0<br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> CNT <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> CNT &gt; LIM<br/>               <span class=\"kw2\">DIVIDE</span> NUM <span class=\"kw3\">BY</span> CNT <span class=\"kw2\">GIVING</span> DIV <span class=\"kw2\">REMAINDER</span> <span class=\"kw4\">REM</span><br/>               <span class=\"kw1\">IF</span> <span class=\"kw4\">REM</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                   <span class=\"kw2\">MOVE</span> CNT <span class=\"kw2\">TO</span> DIS<br/>                   <span class=\"kw2\">PERFORM</span> SHODIS<br/>               END-<span class=\"kw1\">IF</span><br/>           END-<span class=\"kw2\">PERFORM</span><span class=\"sy0\">.</span><br/>\u00a0<br/>           <span class=\"kw2\">MOVE</span> NUM <span class=\"kw2\">TO</span> DIS<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> SHODIS<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       SHODIS<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">MOVE</span> <span class=\"kw3\">ZERO</span> <span class=\"kw2\">TO</span> ZRS<span class=\"sy0\">.</span><br/>           <span class=\"kw1\">INSPECT</span> DIS <span class=\"kw2\">TALLYING</span> ZRS <span class=\"kw3\">FOR</span> <span class=\"kw3\">LEADING</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> DIS<span class=\"br0\">(</span>ZRS<span class=\"sy0\"> + </span><span class=\"nu0\">1</span>:<span class=\"br0\">)</span><br/>           <span class=\"kw2\">EXIT</span> PARAGRAPH<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> FACTORS<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 59, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># Reference implementation for finding factors is slow, but hopefully</span><br/><span class=\"co1\"># robust--we'll use it to verify the more complicated (but hopefully faster)</span><br/><span class=\"co1\"># algorithm.</span><br/>slow_factors = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"br0\">(</span>i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span> <span class=\"kw1\">when</span> n <span class=\"sy0\">%</span> i == <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># The rest of this code does two optimizations:</span><br/><span class=\"co1\">#   1) When you find a prime factor, divide it out of n (smallest_prime_factor).</span><br/><span class=\"co1\">#   2) Find the prime factorization first, then compute composite factors from those.</span><br/>\u00a0<br/>smallest_prime_factor = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> n <span class=\"kw1\">if</span> i<span class=\"sy0\">*</span>i <span class=\"sy0\">&gt;</span> n<br/>    <span class=\"kw1\">return</span> i <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> i == <span class=\"nu0\">0</span><br/>\u00a0<br/>prime_factors = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw1\">if</span> n == <span class=\"nu0\">1</span><br/>  spf = smallest_prime_factor n<br/>  result = prime_factors<span class=\"br0\">(</span>n <span class=\"sy0\">/</span> spf<span class=\"br0\">)</span><br/>  result<span class=\"br0\">[</span>spf<span class=\"br0\">]</span> <span class=\"kw2\">or</span>= <span class=\"nu0\">0</span><br/>  result<span class=\"br0\">[</span>spf<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  result<br/>\u00a0<br/>fast_factors = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  prime_hash = prime_factors n<br/>  exponents = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> p <span class=\"kw1\">of</span> prime_hash<br/>    exponents.<span class=\"me1\">push</span><br/>      p<span class=\"sy0\">:</span> p<br/>      exp<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>  result = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw4\">true</span><br/>    factor = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> obj <span class=\"kw1\">in</span> exponents<br/>      factor <span class=\"sy0\">*</span>= Math.<span class=\"me1\">pow</span> obj.<span class=\"me1\">p</span><span class=\"sy0\">,</span> obj.<span class=\"me1\">exp</span><br/>    result.<span class=\"me1\">push</span> factor<br/>    <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> factor == n<br/>    <span class=\"co1\"># roll the odometer</span><br/>    <span class=\"kw1\">for</span> obj<span class=\"sy0\">,</span> i <span class=\"kw1\">in</span> exponents<br/>      <span class=\"kw1\">if</span> obj.<span class=\"me1\">exp</span> <span class=\"sy0\">&lt;</span> prime_hash<span class=\"br0\">[</span>obj.<span class=\"me1\">p</span><span class=\"br0\">]</span><br/>        obj.<span class=\"me1\">exp</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">break</span><br/>      <span class=\"kw1\">else</span><br/>        obj.<span class=\"me1\">exp</span> = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> result.<span class=\"me1\">sort</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-</span> b<br/>\u00a0<br/>verify_factors = <span class=\"br0\">(</span>factors<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  expected_result = slow_factors n<br/>  <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"wrong length\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> factors.<span class=\"me1\">length</span> <span class=\"sy0\">!</span>= expected_result.<span class=\"me1\">length</span><br/>  <span class=\"kw1\">for</span> factor<span class=\"sy0\">,</span> i <span class=\"kw1\">in</span> expected_result<br/>    console.<span class=\"me1\">log</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"wrong value\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> factors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= factor     <br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">37</span><span class=\"sy0\">,</span> <span class=\"nu0\">1001</span><span class=\"sy0\">,</span> <span class=\"nu0\">11111111111</span><span class=\"sy0\">,</span> <span class=\"nu0\">99999999999</span><span class=\"br0\">]</span><br/>  factors = fast_factors n<br/>  console.<span class=\"me1\">log</span> n<span class=\"sy0\">,</span> factors<br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><br/>    verify_factors factors<span class=\"sy0\">,</span> n</pre>"}, {"lang": "Common Lisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factors <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>lows '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>highs '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>limit <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>isqrt n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>factor <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ factor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> factor limit<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span>* limit limit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>push limit highs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>remove-duplicates <span class=\"br0\">(</span>nreconc lows highs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>quotient remainder<span class=\"br0\">)</span> <span class=\"br0\">(</span>floor n factor<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> remainder<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>push factor lows<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>push quotient highs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 23, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span> factors<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    T<span class=\"br0\">[</span><span class=\"br0\">]</span> res <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    T limit <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>T i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            res <span class=\"sy0\">~=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> q <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>q <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span><br/>                res <span class=\"sy0\">~=</span> q<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> res.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">release</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">53</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">1111111</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>factors<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 1, "block": "<pre>import 'dart:math';\n\nfactors(n)\n{\n var factorsArr = [];\n factorsArr.add(n);\n factorsArr.add(1);\n for(var test = n - 1; test &gt;= sqrt(n).toInt(); test--)\n  if(n\u00a0% test == 0)\n  {\n   factorsArr.add(test);\n   factorsArr.add(n / test);\n  }\n return factorsArr;\n}\n\nvoid main() {\n  print(factors(5688));\n}\n</pre>"}, {"lang": "E", "loc": 7, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> factors<span class=\"br0\">(</span>x <span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> xfactors <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> f <span class=\"sy0\">?</span> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> f <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">x</span> <span class=\"br0\">{</span><br/>      xfactors with<span class=\"sy0\">=</span> f<br/>    <span class=\"br0\">}</span><br/>    return xfactors<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 20, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; ppows</span><br/><span class=\"co1\">;; input\u00a0: a list g of grouped prime factors ( 3 3 3 ..)</span><br/><span class=\"co1\">;; returns (1 3 9 27 ...)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ppows g <span class=\"br0\">(</span>mult <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>ppows '<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">set!</span> mult <span class=\"br0\">(</span><span class=\"sy0\">*</span> mult a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> mult ppows<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; factors</span><br/><span class=\"co1\">;; decomp n into ((2 2 ..) ( 3 3 ..)  ) prime factors groups</span><br/><span class=\"co1\">;; combines (1 2 4 8 ..) (1 3 9 ..) lists</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factors n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort <span class=\"sy0\">&lt;</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>divs'<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"br0\">(</span><span class=\"kw1\">map</span>  ppows <span class=\"br0\">(</span>group <span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span>for<span class=\"sy0\">*/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a divs<span class=\"br0\">)</span> <span class=\"br0\">(</span>b g<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 3, "block": "<pre class=\"text highlighted_source\">open list<br/>\u00a0<br/>factors m = filter (\\x -&gt; m\u00a0% x == 0) [1..m]</pre>"}, {"lang": "Elixir", "loc": 27, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def factor(1), do: [1]<br/>  def factor(n) do<br/>    (for i &lt;- 1..div(n,2), rem(n,i)==0, do: i) ++ [n]<br/>  end<br/>\u00a0<br/>  # Recursive (faster version);<br/>  def divisor(n), do: divisor(n, 1, []) |&gt; Enum.sort<br/>\u00a0<br/>  defp divisor(n, i, factors) when n &lt; i*i    , do: factors<br/>  defp divisor(n, i, factors) when n == i*i   , do: [i | factors]<br/>  defp divisor(n, i, factors) when rem(n,i)==0, do: divisor(n, i+1, [i, div(n,i) | factors])<br/>  defp divisor(n, i, factors)                 , do: divisor(n, i+1, factors)<br/>end<br/>\u00a0<br/>Enum.each([45, 53, 60, 64], fn n -&gt;<br/>  IO.puts \"#{n}: #{inspect RC.factor(n)}\"<br/>end)<br/>\u00a0<br/>IO.puts \"\\nRange: #{inspect range = 1..10000}\"<br/>funs = [ factor:  &amp;RC.factor/1,<br/>         divisor: &amp;RC.divisor/1 ]<br/>Enum.each(funs, fn {name, fun} -&gt;<br/>  {time, value} =\u00a0:timer.tc(fn -&gt; Enum.count(range, &amp;length(fun.(&amp;1))==2) end)<br/>  IO.puts \"#{name}\\t prime count\u00a0: #{value},\\t#{time/1000000} sec\"<br/>end)<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">I</span> <span class=\"sy3\">||</span> <span class=\"re5\">I</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"kw3\">trunc</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">I</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM FACTORS<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>PROCEDURE FACTORLIST(N-&gt;L$)<br/>\u00a0<br/>      LOCAL C%,I,FLIPS%,I%<br/>      LOCAL DIM L[32]<br/>      FOR I=1 TO SQR(N) DO<br/>        IF N=I*INT(N/I) THEN<br/>          L[C%]=I<br/>          C%=C%+1<br/>          IF N&lt;&gt;I*I THEN<br/>            L[C%]=INT(N/I)<br/>            C%=C%+1<br/>          END IF<br/>        END IF<br/>      END FOR<br/>\u00a0<br/>     \u00a0! BUBBLE SORT ARRAY L[]<br/>      FLIPS%=1<br/>      WHILE FLIPS%&gt;0 DO<br/>         FLIPS%=0<br/>         FOR I%=0 TO C%-2 DO<br/>            IF L[I%]&gt;L[I%+1] THEN SWAP(L[I%],L[I%+1]) FLIPS%=1<br/>         END FOR<br/>      END WHILE<br/>\u00a0<br/>      L$=\"\"<br/>      FOR I%=0 TO C%-1 DO<br/>        L$=L$+STR$(L[I%])+\",\"<br/>      END FOR<br/>      L$=LEFT$(L$,LEN(L$)-1)<br/>\u00a0<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    PRINT(CHR$(12);)\u00a0! CLS<br/>    FACTORLIST(45-&gt;L$)<br/>    PRINT(\"The factors of 45 are \";L$)<br/>    FACTORLIST(12345-&gt;L$)<br/>    PRINT(\"The factors of 12345 are \";L$)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> factors number <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> divisor <span class=\"kw1\">in</span> <span class=\"nu0\">1</span> .. <span class=\"br0\">(</span><span class=\"kw4\">float</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"kw3\">sqrt</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span> number <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> number <span class=\"sy0\">%</span> divisor <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">yield</span> divisor<br/>        <span class=\"kw1\">if</span> number <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">yield</span> number <span class=\"sy0\">/</span> divisor <span class=\"co1\">//special case condition: when number=1 then divisor=(number/divisor), so don't repeat it</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>   USE: math.primes.factors\n   ( scratchpad ) 24 divisors .\n   { 1 2 3 4 6 8 12 24 }\n</pre>"}, {"lang": "FALSE", "loc": 2, "block": "<pre class=\"text highlighted_source\">[1[\\<a class=\"__cf_email__\" data-cfemail=\"fadeba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"4763076a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>][\\<a class=\"__cf_email__\" data-cfemail=\"1b3f5b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"133753\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"87a3c7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"c5e185\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/*=[$.\" \"]?1+]#.%]f:<br/>45f;! 53f;! 64f;!</pre>"}, {"lang": "Fish", "loc": 5, "block": "<pre class=\"text highlighted_source\">0v<br/> &gt;i:0(?v'0'%+a*<br/>       &gt;~a,:1:&gt;r{%       \u00a0?vr:nr','ov<br/>              ^:&amp;:;?(&amp;:+1r:&lt;        &lt; <br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: factors dup 2/ 1+ 1 do dup i mod 0= if i swap then loop\u00a0;<br/>: .factors factors begin dup dup . 1 &lt;&gt; while drop repeat drop cr\u00a0; <br/>\u00a0<br/>45 .factors<br/>53 .factors<br/>64 .factors<br/>100 .factors</pre>"}, {"lang": "Fortran", "loc": 20, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Factors<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, <span class=\"kw1\">number</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Enter a number between 1 and 2147483647\"</span><br/>  read<span class=\"sy0\">*</span>, <span class=\"kw1\">number</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span><span class=\"kw1\">number</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> i, <span class=\"kw1\">number</span><span class=\"sy0\">/</span>i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"co1\">! Check to see if number is a square</span><br/>  i <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i <span class=\"sy0\">==</span> <span class=\"kw1\">number</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>     write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> i<br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span><span class=\"kw1\">number</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>     write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> i, <span class=\"kw1\">number</span><span class=\"sy0\">/</span>i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 20, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> printFactors<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">Print</span> n; <span class=\"st0\">\" =&gt;\"</span>;<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n / <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> i; <span class=\"st0\">\" \"</span>;<br/>  <span class=\"kw1\">Next</span> i<br/>  <span class=\"kw1\">Print</span> n<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <br/>\u00a0<br/>printFactors<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>printFactors<span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>printFactors<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>printFactors<span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span><br/>printFactors<span class=\"br0\">(</span><span class=\"nu0\">67</span><span class=\"br0\">)</span><br/>printFactors<span class=\"br0\">(</span><span class=\"nu0\">96</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 1, "block": "<pre class=\"text highlighted_source\">allFactors[n]</pre>"}, {"lang": "FunL", "loc": 1, "block": "<pre class=\"text highlighted_source\">def factors( n ) = {d | d &lt;- 1..n if d|n}</pre>"}, {"lang": "FutureBasic", "loc": 48, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>clear local mode<br/>local fn IntegerFactors( f as long ) as Str255<br/>dim as long i, s, l(100), c\u00a0: c = 0<br/>dim as Str255 factorStr<br/>\u00a0<br/>for i = 1 to sqr(f)<br/>  if ( f mod i == 0 )<br/>    l(c) = i<br/>    c++<br/>      if ( f &lt;&gt; i ^ 2 )<br/>        l(c) = ( f / i )<br/>        c++<br/>      end if<br/>  end if<br/>next i<br/>s = 1<br/>while ( s = 1 )<br/>s = 0<br/>  for i = 0 to c-1<br/>    if l(i) &gt; l(i+1) and l(i+1) &lt;&gt; 0<br/>      swap l(i), l(i+1)<br/>      s = 1<br/>    end if<br/>  next i<br/>wend<br/>for i = 0 to c-1<br/>  if ( i &lt; c -1 )<br/>    factorStr = factorStr + str$(l(i)) + \",\"<br/>  else<br/>    factorStr = factorStr + str$(l(i))<br/>  end if<br/>next<br/>end fn = factorStr<br/>\u00a0<br/>print \"Factors of 25 are:\"; fn IntegerFactors( 25 )<br/>print \"Factors of 45 are:\"; fn IntegerFactors( 45 )<br/>print \"Factors of 103 are:\"; fn IntegerFactors( 103 )<br/>print \"Factors of 760 are:\"; fn IntegerFactors( 760 )<br/>print \"Factors of 12345 are:\"; fn IntegerFactors( 12345 )<br/>print \"Factors of 32766 are:\"; fn IntegerFactors( 32766 )<br/>print \"Factors of 32767 are:\"; fn IntegerFactors( 32767 )<br/>print \"Factors of 57097 are:\"; fn IntegerFactors( 57097 )<br/>print \"Factors of 12345678 are:\"; fn IntegerFactors( 12345678 )<br/>print \"Factors of 32434243 are:\"; fn IntegerFactors( 32434243 )<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 20, "block": "<pre class=\"text highlighted_source\"># Built-in function<br/>DivisorsInt(Factorial(5));<br/># [ 1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120 ]<br/>\u00a0<br/># A possible implementation, not suitable to large n<br/>div\u00a0:= n -&gt; Filtered([1 .. n], k -&gt; n mod k = 0);<br/>\u00a0<br/>div(Factorial(5));<br/># [ 1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120 ]<br/>\u00a0<br/># Another implementation, usable for large n (if n can be factored quickly)<br/>div2\u00a0:= function(n)                                              <br/>  local f, p;<br/>  f\u00a0:= Collected(FactorsInt(n));<br/>  p\u00a0:= List(f, v -&gt; List([0 .. v[2]], k -&gt; v[1]^k));<br/>  return SortedList(List(Cartesian(p), Product));<br/>end;<br/>\u00a0<br/>div2(Factorial(5));<br/># [ 1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120 ]</pre>"}, {"lang": "Go", "loc": 52, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">53</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">45</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">600851475143</span><span class=\"sy1\">)</span><br/>    printFactors<span class=\"sy1\">(</span><span class=\"nu0\">999999999999999989</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> printFactors<span class=\"sy1\">(</span>nr <span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> nr &lt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Factors of\"</span><span class=\"sy1\">,</span> nr<span class=\"sy1\">,</span> <span class=\"st0\">\"not computed\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Factors of\u00a0%d: \"</span><span class=\"sy1\">,</span> nr<span class=\"sy1\">)</span><br/>    fs <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int64</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    fs<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    apf <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>p <span class=\"kw4\">int64</span><span class=\"sy1\">,</span> e <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        n <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>fs<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> pp <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> p<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; e<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> pp <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> pp<span class=\"sy3\">*</span>p <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; n<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                fs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>fs<span class=\"sy1\">,</span> fs<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">*</span>pp<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    e <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> nr &amp; <span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> e<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        nr &gt;&gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    apf<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">);</span> nr &gt; <span class=\"nu0\">1</span><span class=\"sy1\">;</span> d <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> d<span class=\"sy3\">*</span>d &gt; nr <span class=\"sy1\">{</span><br/>            d <span class=\"sy2\">=</span> nr<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> e <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> nr<span class=\"sy3\">%</span>d <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> e<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            nr <span class=\"sy2\">/=</span> d<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> e &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            apf<span class=\"sy1\">(</span>d<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>fs<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Number of factors =\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>fs<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Gosu", "loc": 9, "block": "<pre class=\"text highlighted_source\">var numbers = {11, 21, 32, 45, 67, 96}<br/>numbers.each(\\ number -&gt; printFactors(number))<br/>\u00a0<br/>function printFactors(n: int) {<br/>  if (n &lt; 1) return<br/>  var result =\"${n} =&gt; \"<br/>  (1 .. n/2).each(\\ i -&gt; {result += n\u00a0% i == 0\u00a0? \"${i} \"\u00a0: \"\"})<br/>  print(\"${result}${n}\")<br/>}</pre>"}, {"lang": "Groovy", "loc": 13, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> factorize <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20long\"><span class=\"kw4\">long</span></a> target <span class=\"sy0\">-&gt;</span> <br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>target <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span>1L<span class=\"br0\">]</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>target <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span>1L, target<span class=\"br0\">]</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> targetSqrt <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> lowfactors <span class=\"sy0\">=</span> <span class=\"br0\">(</span>2L..<span class=\"me1\">targetSqrt</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20grep\"><span class=\"kw5\">grep</span></a> <span class=\"br0\">{</span> <span class=\"br0\">(</span>target <span class=\"sy0\">%</span> it<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>lowfactors <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span>1L, target<span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> nhalf <span class=\"sy0\">=</span> lowfactors.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>lowfactors<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> targetSqrt<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> lowfactors <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>nhalf<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> target.<span class=\"me1\">intdiv</span><span class=\"br0\">(</span>lowfactors<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse\"><span class=\"kw5\">reverse</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span>target<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> HFM<span class=\"sy0\">.</span>Primes <span class=\"br0\">(</span>primePowerFactors<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- primePowerFactors\u00a0:: Integer -&gt; [(Integer,Int)]</span><br/>\u00a0<br/>factors <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> <span class=\"sy0\">.</span><br/>          <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>p<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>p<span class=\"sy0\">^</span>i <span class=\"sy0\">|</span> i<span class=\"sy0\">&lt;-</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span>m<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> primePowerFactors</pre>"}, {"lang": "HicEst", "loc": 7, "block": "<pre class=\"hicest highlighted_source\"> <span class=\"kw1\">DLG</span><span class=\"br0\">(</span>NameEdit<span class=\"sy1\">=</span>N<span class=\"sy1\">,</span> TItle<span class=\"sy1\">=</span><span class=\"st0\">'Enter an integer'</span><span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> N<span class=\"sy1\">^</span><span class=\"nu0\">0.5</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>N<span class=\"sy1\">,</span>i<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> i<span class=\"sy1\">,</span> N<span class=\"sy1\">/</span>i<br/> <span class=\"kw1\">ENDDO</span><br/>\u00a0<br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>numbers <span class=\"sy1\">:=</span> arglist <span class=\"sy1\">|||</span> <span class=\"br0\">[</span> <span class=\"nu0\">32767</span><span class=\"sy1\">,</span> <span class=\"nu0\">45</span><span class=\"sy1\">,</span> <span class=\"nu0\">53</span><span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span>    <span class=\"co1\"># combine command line provided and default set of values</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>lf<span class=\"sy1\">,</span><span class=\"st0\">\"factors of \"</span><span class=\"sy1\">,</span>i <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>numbers<span class=\"sy1\">,</span><span class=\"st0\">\"=\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>divisors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> lf <span class=\"sy1\">:=</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> factors</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">foi=: [: I. <span class=\"nu0\">0</span> = <span class=\"sy0\">(</span>|~ <a class=\"__cf_email__\" data-cfemail=\"fd94d3bd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;:<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 13, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a><span class=\"sy0\">&gt;</span> factors<span class=\"br0\">(</span><span class=\"kw3\">long</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a><span class=\"sy0\">&gt;</span> factors = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/TreeSet.html\"><span class=\"kw46\">TreeSet</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>1L<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">long</span> test = n - <span class=\"nu0\">1</span><span class=\"sy0\">;</span> test <span class=\"sy0\">&gt;</span>= <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> test--<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> test == <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>   factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>test<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>n / test<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/> <span class=\"kw2\">return</span> factors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 20, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> factors<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <span class=\"kw1\">var</span><br/>  n_factors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  i<span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> i <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>   n_factors.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">/</span> i <span class=\"sy0\">!==</span> i<span class=\"br0\">)</span><br/>    n_factors.<span class=\"me1\">push</span><span class=\"br0\">(</span>num <span class=\"sy0\">/</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/> n_factors.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> a <span class=\"sy0\">-</span> b<span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// numeric sort</span><br/> <span class=\"kw1\">return</span> n_factors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>factors<span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// [1,3,5,9,15,45] </span><br/>factors<span class=\"br0\">(</span><span class=\"nu0\">53</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// [1,53] </span><br/>factors<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// [1,2,4,8,16,32,64]</span></pre>"}, {"lang": "jq", "loc": 16, "block": "<pre class=\"text highlighted_source\"># This implementation uses \"sort\" for tidiness<br/>def factors:<br/>  . as $num<br/>  | reduce range(1; 1 + sqrt|floor) as $i<br/>      ([];<br/>       if ($num\u00a0% $i) == 0 then<br/>         ($num / $i) as $r<br/>         | if $i == $r then . + [$i] else . + [$i, $r] end<br/>       else . <br/>       end )<br/>  | sort;<br/>\u00a0<br/>def task:<br/>  (45, 53, 64) | \"\\(.): \\(factors)\"\u00a0;<br/>\u00a0<br/>task</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">function factors(n)<br/>    f = [one(n)]<br/>    for (p,e) in factor(n)<br/>        f = reduce(vcat, f, [f*p^j for j in 1:e])<br/>    end<br/>    return length(f) == 1\u00a0? [one(n), n]\u00a0: sort!(f)<br/>end</pre>"}, {"lang": "K", "loc": 19, "block": "<pre class=\"text highlighted_source\"> f:{i:{y[&amp;x=y*x div y]}[x;1+!_sqrt x];?i,x div|i}<br/>equivalent to:<br/>q)f:{i:{y where x=y*x div y}[x\u00a0; 1+ til floor sqrt x]; distinct i,x div reverse i}<br/>\u00a0<br/>   f 120<br/>1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120<br/>\u00a0<br/>   f 1024<br/>1 2 4 8 16 32 64 128 256 512 1024<br/>\u00a0<br/>   f 600851475143<br/>1 71 839 1471 6857 59569 104441 486847 1234169 5753023 10086647 87625999 408464633 716151937 8462696833 600851475143<br/>\u00a0<br/>   #f 3491888400 / has 1920 factors<br/>1920<br/>\u00a0<br/>   / Number of factors for 3491888400 .. 3491888409<br/>   #:'f' 3491888400+!10<br/>1920 16 4 4 12 16 32 16 8 24</pre>"}, {"lang": "Kotlin", "loc": 13, "block": "<pre class=\"scala highlighted_source\">fun printFactors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"$n =&gt; \"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">filter</span> <span class=\"br0\">{</span> n <span class=\"sy0\">%</span> it <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        .<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\"$it \"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numbers <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"nu0\">21</span>, <span class=\"nu0\">32</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">67</span>, <span class=\"nu0\">96</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>number in numbers<span class=\"br0\">)</span> printFactors<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factors <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>list-comp<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>- i <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">seq</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>trunc <span class=\"br0\">(</span>/ n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 73, "block": "<pre class=\"lb highlighted_source\">num <span class=\"sy0\">=</span> <span class=\"nu0\">10677106534462215678539721403561279</span><br/>maxnFactors <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/><span class=\"kw1\">dim</span> primeFactors<span class=\"br0\">(</span>maxnFactors<span class=\"br0\">)</span><span class=\"sy0\">,</span>  nPrimeFactors<span class=\"br0\">(</span>maxnFactors<span class=\"br0\">)</span><br/><span class=\"kw1\">global</span> nDifferentPrimeNumbersFound<span class=\"sy0\">,</span> nFactors<span class=\"sy0\">,</span> iFactor<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Start finding all factors of \"</span>;num; <span class=\"st0\">\":\"</span><br/>\u00a0<br/>nDifferentPrimeNumbersFound<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>dummy <span class=\"sy0\">=</span> factorize<span class=\"br0\">(</span>num<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>nFactors <span class=\"sy0\">=</span> showPrimeFactors<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/><span class=\"kw1\">dim</span> factors<span class=\"br0\">(</span>nFactors<span class=\"br0\">)</span><br/>dummy <span class=\"sy0\">=</span> generateFactors<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">sort</span> factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> nFactors<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nFactors<br/>   <span class=\"kw1\">print</span> i;<span class=\"st0\">\"     \"</span>;factors<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"done\"</span><br/>\u00a0<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">function</span> factorize<span class=\"br0\">(</span>iNum<span class=\"sy0\">,</span>offset<span class=\"br0\">)</span><br/>    factorFound<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    i <span class=\"sy0\">=</span> offset<br/>    <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iNum <span class=\"kw1\">MOD</span> i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> _<br/>        <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> primeFactors<span class=\"br0\">(</span>nDifferentPrimeNumbersFound<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i _<br/>            <span class=\"kw1\">then</span><br/>               nPrimeFactors<span class=\"br0\">(</span>nDifferentPrimeNumbersFound<span class=\"br0\">)</span> <span class=\"sy0\">=</span> nPrimeFactors<span class=\"br0\">(</span>nDifferentPrimeNumbersFound<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">else</span><br/>               nDifferentPrimeNumbersFound <span class=\"sy0\">=</span> nDifferentPrimeNumbersFound <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>               primeFactors<span class=\"br0\">(</span>nDifferentPrimeNumbersFound<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>               nPrimeFactors<span class=\"br0\">(</span>nDifferentPrimeNumbersFound<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>            <span class=\"kw1\">if</span> iNum<span class=\"sy0\">/</span>i<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> dummy <span class=\"sy0\">=</span> factorize<span class=\"br0\">(</span>iNum<span class=\"sy0\">/</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><br/>            factorFound<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>         i<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">while</span> factorFound<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">and</span> i<span class=\"sy0\">&lt;=</span><span class=\"kw2\">sqr</span><span class=\"br0\">(</span>iNum<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> factorFound<span class=\"sy0\">=</span><span class=\"nu0\">0</span> _<br/>    <span class=\"kw1\">then</span><br/>       nDifferentPrimeNumbersFound <span class=\"sy0\">=</span> nDifferentPrimeNumbersFound <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>       primeFactors<span class=\"br0\">(</span>nDifferentPrimeNumbersFound<span class=\"br0\">)</span> <span class=\"sy0\">=</span> iNum<br/>       nPrimeFactors<span class=\"br0\">(</span>nDifferentPrimeNumbersFound<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">function</span> showPrimeFactors<span class=\"br0\">(</span>iNum<span class=\"br0\">)</span><br/>   showPrimeFactors<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>   <span class=\"kw1\">print</span> iNum;<span class=\"st0\">\" = \"</span>;<br/>   <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nDifferentPrimeNumbersFound<br/>      <span class=\"kw1\">print</span> primeFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<span class=\"st0\">\"^\"</span>;nPrimeFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> i<span class=\"sy0\">&lt;</span>nDifferentPrimeNumbersFound <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\" * \"</span>; <span class=\"kw1\">else</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"\"</span><br/>      showPrimeFactors <span class=\"sy0\">=</span> showPrimeFactors<span class=\"sy0\">*</span><span class=\"br0\">(</span>nPrimeFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">next</span> i<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">function</span> generateFactors<span class=\"br0\">(</span>product<span class=\"sy0\">,</span>pIndex<span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> pIndex<span class=\"sy0\">&gt;</span>nDifferentPrimeNumbersFound _<br/>   <span class=\"kw1\">then</span><br/>      factors<span class=\"br0\">(</span>iFactor<span class=\"br0\">)</span> <span class=\"sy0\">=</span> product<br/>      iFactor<span class=\"sy0\">=</span>iFactor<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> nPrimeFactors<span class=\"br0\">(</span>pIndex<span class=\"br0\">)</span><br/>         dummy <span class=\"sy0\">=</span> generateFactors<span class=\"br0\">(</span>product<span class=\"sy0\">*</span>primeFactors<span class=\"br0\">(</span>pIndex<span class=\"br0\">)</span>^i<span class=\"sy0\">,</span>pIndex<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">next</span> i<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lingo", "loc": 8, "block": "<pre class=\"text highlighted_source\">on factors(n) <br/>  res = [1]<br/>  repeat with i = 2 to n/2<br/>    if n mod i = 0 then res.add(i)<br/>  end repeat<br/>  res.add(n)<br/>  return res<br/>end</pre>"}, {"lang": "Logo", "loc": 5, "block": "<pre class=\"text highlighted_source\">to factors\u00a0:n<br/>  output filter [equal? 0 modulo\u00a0:n\u00a0?] iseq 1\u00a0:n<br/>end<br/>\u00a0<br/>show factors 28      \u00a0; [1 2 4 7 14 28]</pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> Factors<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <br/>    <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>            f<span class=\"br0\">[</span><span class=\"sy0\">#</span>f<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    f<span class=\"br0\">[</span><span class=\"sy0\">#</span>f<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>\u00a0<br/>    <span class=\"kw1\">return</span> f<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>numtheory:-divisors(n);<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">Factorize[n_Integer]\u00a0:= Divisors[n]</pre>"}, {"lang": "MATLAB / Octave", "loc": 12, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"kw1\">function</span> fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    f = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/factor.html\"><span class=\"kw2\">factor</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;\t<span class=\"co1\">% prime decomposition</span><br/>    K = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dec2bin.html\"><span class=\"kw2\">dec2bin</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span>:<span class=\"nu0\">2</span>^length<span class=\"br0\">(</span>f<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>-<span class=\"co2\">'0'</span>;   <span class=\"co1\">% generate all possible permutations</span><br/>    F = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ones.html\"><span class=\"kw2\">ones</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>^length<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span>;\t<br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>K<span class=\"br0\">)</span><br/>      F<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/prod.html\"><span class=\"kw2\">prod</span></a><span class=\"br0\">(</span>f<span class=\"br0\">(</span>~K<span class=\"br0\">(</span>k,:<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\t\t<span class=\"co1\">% and compute products </span><br/>    <span class=\"kw1\">end</span>; <br/>    F = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/unique.html\"><span class=\"kw2\">unique</span></a><span class=\"br0\">(</span>F<span class=\"br0\">)</span>;\t<span class=\"co1\">% eliminate duplicates</span><br/>    printf<span class=\"br0\">(</span><span class=\"co2\">'There are\u00a0%i factors for\u00a0%i.\\n'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>F<span class=\"br0\">)</span>,n<span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>F<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span>;<br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">(%i96) divisors(100);<br/>(%o96) {1,2,4,5,10,20,25,50,100}</pre>"}, {"lang": "MAXScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn factors n =<br/>(<br/>\treturn (for i = 1 to n+1 where mod n i == 0 collect i)<br/>)<br/>\u00a0</pre>"}, {"lang": "Mercury", "loc": 40, "block": "<pre class=\"text highlighted_source\">:- module fac.<br/>\u00a0<br/>:- interface.<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module float, int, list, math, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    io.command_line_arguments(Args,\u00a0!IO),<br/>    list.filter_map(string.to_int, Args, CleanArgs),<br/>    list.foldl((pred(Arg::in,\u00a0!.IO::di,\u00a0!:IO::uo) is det\u00a0:-<br/>                    factor(Arg, X),<br/>                    io.format(\"factor(%d, [\", [i(Arg)],\u00a0!IO),<br/>                    io.write_list(X, \",\", io.write_int,\u00a0!IO),<br/>                    io.write_string(\"])\\n\",\u00a0!IO)<br/>               ), CleanArgs,\u00a0!IO).<br/>\u00a0<br/>:- pred factor(int::in, list(int)::out) is det.<br/>factor(N, Factors)\u00a0:-<br/>    Limit = float.truncate_to_int(math.sqrt(float(N))),<br/>\tfactor(N, 2, Limit, [], Unsorted),<br/>    list.sort_and_remove_dups([1, N | Unsorted], Factors).<br/>\u00a0<br/>:- pred factor(int, int, int, list(int), list(int)).<br/>:- mode factor(in,  in,  in,  in,        out) is det.<br/>factor(N, X, Limit,\u00a0!Accumulator)\u00a0:-<br/>    ( if X  &gt; Limit <br/>          then true<br/>          else ( if 0 = N mod X <br/>                     then\u00a0!:Accumulator = [X, N / X |\u00a0!.Accumulator]<br/>                     else true ),<br/>               factor(N, X + 1, Limit,\u00a0!Accumulator) ).<br/>\u00a0<br/>:- func factor(int) = list(int).<br/>%:- mode factor(in) = out is det.<br/>factor(N) = Factors\u00a0:- factor(N, Factors).<br/>\u00a0<br/>:- end_module fac.</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre>\u041f9\t1\t\u041f6\t\u041a\u0418\u041f6\t\u0418\u041f9\t\u0418\u041f6\t/\t\u041f8\t^\t[x]\nx#0\t21\t-\tx=0\t03\t\u0418\u041f6\t\u0421/\u041f\t\u0418\u041f8\t\u041f9\t\u0411\u041f\n04\t1\t\u0421/\u041f\t\u0411\u041f\t21\n</pre>"}, {"lang": "MUMPS", "loc": 11, "block": "<pre class=\"text highlighted_source\">factors(num)\tNew fctr,list,sep,sqrt<br/>\tIf num&lt;1 Quit \"Too small a number\"<br/>\tIf num[\".\" Quit \"Not an integer\"<br/>\tSet sqrt=num**0.5\\1<br/>\tFor fctr=1:1:sqrt Set:num/fctr'[\".\" list(fctr)=1,list(num/fctr)=1<br/>\tSet (list,fctr)=\"\",sep=\"[\" For  Set fctr=$Order(list(fctr)) Quit:fctr=\"\"  Set list=list_sep_fctr,sep=\",\"<br/>\tQuit list_\"]\"<br/>\u00a0<br/>w $$factors(45)\u00a0; [1,3,5,9,15,45]<br/>w $$factors(53)\u00a0; [1,53]<br/>w $$factors(64)\u00a0; [1,2,4,8,16,32,64]</pre>"}, {"lang": "NetRexx", "loc": 35, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx ***********************************************************<br/>* 21.04.2013 Walter Pachl<br/>* 21.04.2013 add method main to accept argument(s)<br/>*********************************************************************/</span><br/>options replace format comments java crossref symbols nobinary<br/><span class=\"kw1\">class</span> divl<br/>  method main<span class=\"br0\">(</span>argwords=String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>    arg=Rexx<span class=\"br0\">(</span>argwords<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Parse</span> arg a b<br/>    <span class=\"kw1\">Say</span> a b<br/>    <span class=\"kw1\">If</span> a=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      help=<span class=\"st0\">'java divl low [high] shows'</span><br/>      help=help<span class=\"sy0\">||</span><span class=\"st0\">' divisors of all numbers between low and high'</span><br/>      <span class=\"kw1\">Say</span> help<br/>      <span class=\"kw1\">Return</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">If</span> b=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> b=a<br/>    <span class=\"kw1\">loop</span> x=a To b<br/>      <span class=\"kw1\">say</span> x <span class=\"st0\">'-&gt;'</span> divs<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"kw3\">End</span><br/>\u00a0<br/>method divs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  <span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*handle special case of 1     */</span><br/>  lo=<span class=\"nu0\">1</span><br/>  hi=x<br/>  odd=x<span class=\"sy0\">//</span><span class=\"nu0\">2</span>                            <span class=\"coMULTI\">/* 1 if x is odd               */</span><br/>  <span class=\"kw1\">loop</span> j=<span class=\"nu0\">2</span>+odd By <span class=\"nu0\">1</span>+odd While j<span class=\"sy0\">*</span>j<span class=\"sy0\">&lt;</span>x   <span class=\"coMULTI\">/*divide by numbers&lt;sqrt(x)    */</span><br/>    <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span>j==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">Do</span>                <span class=\"coMULTI\">/*Divisible?  Add two divisors:*/</span><br/>      lo=lo j                         <span class=\"coMULTI\">/* list low divisors           */</span><br/>      hi=x%j hi                       <span class=\"coMULTI\">/* list high divisors          */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> j<span class=\"sy0\">*</span>j=x <span class=\"kw3\">Then</span>                       <span class=\"coMULTI\">/*for a square number as input */</span><br/>    lo=lo j                           <span class=\"coMULTI\">/* add its square root         */</span><br/>  <span class=\"kw1\">return</span> lo hi                        <span class=\"coMULTI\">/* return both lists           */</span></pre>"}, {"lang": "Nim", "loc": 15, "block": "<pre class=\"text highlighted_source\">import intsets, math, algorithm<br/>\u00a0<br/>proc factors(n): seq[int] =<br/>  var fs = initIntSet()<br/>  for x in 1 .. int(sqrt(float(n))):<br/>    if n mod x == 0:<br/>      fs.incl(x)<br/>      fs.incl(n div x)<br/>\u00a0<br/>  result = @[]<br/>  for x in fs:<br/>    result.add(x)<br/>  sort(result, system.cmp[int])<br/>\u00a0<br/>echo factors(45)</pre>"}, {"lang": "Niue", "loc": 11, "block": "<pre class=\"text highlighted_source\">[ 'n\u00a0; [ negative-or-zero [ , ] if <br/>       [ n not-factor [ , ] when ] else ] n times n ] 'factors\u00a0;<br/>\u00a0<br/>[ dup 0 &lt;= ] 'negative-or-zero\u00a0;<br/>[ swap dup rot swap mod 0 = not ] 'not-factor\u00a0;<br/>\u00a0<br/>( tests )<br/>100 factors .s .clr ( =&gt; 1 2 4 5 10 20 25 50 100 ) newline<br/>53 factors .s .clr ( =&gt; 1 53 ) newline<br/>64 factors .s .clr ( =&gt; 1 2 4 8 16 32 64 ) newline<br/>12 factors .s .clr ( =&gt; 1 2 3 4 6 12 )  </pre>"}, {"lang": "Oberon-2", "loc": 67, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Factors;<br/><span class=\"kw1\">IMPORT</span> Out<span class=\"sy0\">,</span>SYSTEM;<br/><span class=\"kw1\">TYPE</span>\t<br/>\tLIPool <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\tLIVector<span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> LIVectorDesc;<br/>\tLIVectorDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\tcap<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tlen<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tLIPool<span class=\"sy0\">:</span> LIPool;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> New<span class=\"br0\">(</span>cap<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> LIVector;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tv<span class=\"sy0\">:</span> LIVector;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span>;<br/>\t\tv.<span class=\"me1\">cap</span> <span class=\"sy0\">:=</span> cap;<br/>\t\tv.<span class=\"me1\">len</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>v.<span class=\"me1\">LIPool</span><span class=\"sy0\">,</span>cap<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> v<br/>\t<span class=\"kw1\">END</span> New;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> LIVector<span class=\"br0\">)</span> Add<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span> <br/>\t\tnewLIPool<span class=\"sy0\">:</span> LIPool;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> v.<span class=\"me1\">len</span> <span class=\"sy0\">=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>v.<span class=\"me1\">LIPool</span>^<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\t<span class=\"coMULTI\">(* run out of space *)</span><br/>\t\t\tv.<span class=\"me1\">cap</span> <span class=\"sy0\">:=</span> v.<span class=\"me1\">cap</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>v.<span class=\"me1\">cap</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\t\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>newLIPool<span class=\"sy0\">,</span>v.<span class=\"me1\">cap</span><span class=\"br0\">)</span>;<br/>\t\t\tSYSTEM.<span class=\"me1\">MOVE</span><span class=\"br0\">(</span>SYSTEM.<span class=\"me1\">ADR</span><span class=\"br0\">(</span>v.<span class=\"me1\">LIPool</span>^<span class=\"br0\">)</span><span class=\"sy0\">,</span>SYSTEM.<span class=\"me1\">ADR</span><span class=\"br0\">(</span>newLIPool^<span class=\"br0\">)</span><span class=\"sy0\">,</span>v.<span class=\"me1\">cap</span> <span class=\"sy0\">*</span> <span class=\"kw3\">SIZE</span><span class=\"br0\">(</span><span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\t\tv.<span class=\"me1\">LIPool</span> <span class=\"sy0\">:=</span> newLIPool<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tv.<span class=\"me1\">LIPool</span><span class=\"br0\">[</span>v.<span class=\"me1\">len</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> x;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>v.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span> Add;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> LIVector<span class=\"br0\">)</span> At<span class=\"br0\">(</span>idx<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> v.<span class=\"me1\">LIPool</span><span class=\"br0\">[</span>idx<span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">END</span> At;<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Factors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span><span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> LIVector;<br/><span class=\"kw1\">VAR</span> <br/>\tj<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\tv<span class=\"sy0\">:</span> LIVector;<br/><span class=\"kw1\">BEGIN</span><br/>\tv <span class=\"sy0\">:=</span> New<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>n <span class=\"kw1\">MOD</span> j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> v.<span class=\"me1\">Add</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">END</span>; <br/>\t<span class=\"kw1\">RETURN</span> v<br/><span class=\"kw1\">END</span> Factors;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>\tv<span class=\"sy0\">:</span> LIVector;<br/>\tj<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tv <span class=\"sy0\">:=</span> Factors<span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> v.<span class=\"me1\">len</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\tOut.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>v.<span class=\"me1\">At</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span>;<br/>\tOut.<span class=\"me1\">Int</span><span class=\"br0\">(</span>v.<span class=\"me1\">len</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" factors\"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Factors.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 38, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> IO<span class=\"sy0\">;</span><br/><span class=\"kw1\">use</span> Structure<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Basic <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> GenerateFactors<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span>  ~ IntVector <span class=\"br0\">{</span><br/>      factors <span class=\"sy0\">:=</span> IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      factors<span class=\"sy0\">-&gt;</span> <span class=\"me1\">AddBack</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      factors<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          factors<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;&gt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factors<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      factors<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>      <span class=\"kw1\">return</span> factors<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      numbers <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">3135</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"sy0\">,</span> <span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numbers<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        factors <span class=\"sy0\">:=</span> GenerateFactors<span class=\"br0\">(</span>numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Factors of \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"st0\">\" are:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> factors<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>factors<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> range <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> n <span class=\"sy0\">-&gt;</span> range<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> @ <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> factors n <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> v <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> v<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>range n<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">Integer method: factors  self seq filter(#[ self isMultiple ])\u00a0;<br/>\u00a0<br/>120 factors println</pre>"}, {"lang": "Oz", "loc": 20, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Factors</span> N<span class=\"br0\">}</span><br/>     Sqr = <span class=\"br0\">{</span>Float<span class=\"sy0\">.</span>toInt <span class=\"br0\">{</span>Sqrt <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toFloat N<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>     Fs = <span class=\"kw1\">for</span> X <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span>Sqr append:App <span class=\"kw1\">do</span><br/>             <span class=\"kw1\">if</span> N <span class=\"kw1\">mod</span> X <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span><br/>                CoFactor = N <span class=\"kw1\">div</span> X<br/>             <span class=\"kw1\">in</span><br/>                <span class=\"kw1\">if</span> CoFactor <span class=\"sy0\">==</span> X <span class=\"kw1\">then</span> <span class=\"co1\">%% avoid duplicate factor</span><br/>                   <span class=\"br0\">{</span>App <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"br0\">}</span>          <span class=\"co1\">%% when N is a square number</span><br/>                <span class=\"kw1\">else</span><br/>                   <span class=\"br0\">{</span>App <span class=\"br0\">[</span>X CoFactor<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>                <span class=\"kw1\">end</span><br/>             <span class=\"kw1\">end</span><br/>          <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Sort Fs Value<span class=\"sy0\">.</span><span class=\"st0\">'&lt;'</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Factors 53<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">divisors</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span></pre>"}, {"lang": "Panda", "loc": 4, "block": "<pre class=\"text highlighted_source\">fun factor(n) type integer-&gt;integer<br/>   f where n.mod(1..n=&gt;f)==0<br/>\u00a0<br/>45.factor</pre>"}, {"lang": "Pascal", "loc": 19, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Factors<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> number<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span> <br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Enter a number between 1 and 2147483647: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> round<span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> number <span class=\"kw1\">mod</span> i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">write</span> <span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span>  number <span class=\"kw1\">div</span> i<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Check to see if number is a square</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> round<span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> i<span class=\"sy3\">*</span>i <span class=\"sy3\">=</span> number <span class=\"kw1\">then</span><br/>     <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> number <span class=\"kw1\">mod</span> i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>     <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> number<span class=\"sy3\">/</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> factors<br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"co5\">$_</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span>factors<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> factors <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> squish <span class=\"kw3\">sort</span> <span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"kw1\">div</span> <span class=\"re0\">$_</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%%</span> <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"kw3\">sqrt</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre>{1,3,5,15,823,2469,4115,12345}\n</pre>"}, {"lang": "PHP", "loc": 12, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> GetFactors<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"re0\">$factors</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         <span class=\"re0\">$factors</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$factors</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">/</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://www.php.net/sort\"><span class=\"kw3\">sort</span></a><span class=\"br0\">(</span><span class=\"re0\">$factors</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"re0\">$factors</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de factors (N)<br/>   (filter<br/>      '((D) (=0 (% N D)))<br/>      (range 1 N) ) )</pre>"}, {"lang": "PILOT", "loc": 12, "block": "<pre class=\"text highlighted_source\">T \u00a0:Enter a number.<br/>A \u00a0:#n<br/>C \u00a0:factor = 1<br/>T \u00a0:The factors of #n are:<br/>*Loop<br/>C \u00a0:remainder = n\u00a0% factor<br/>T ( remainder = 0 ) \u00a0:#factor<br/>J ( factor = n )    \u00a0:*Finished<br/>C \u00a0:factor = factor + 1<br/>J \u00a0:*Loop<br/>*Finished<br/>END:</pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"text highlighted_source\">do i = 1 to n;<br/>   if mod(n, i) = 0 then put skip list (i);<br/>end;</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Factor <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">1</span>..<span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ProDOS", "loc": 3, "block": "<pre class=\"text highlighted_source\">editvar /newvar /value=a /userinput=1 /title=Enter an integer:<br/>do /delimspaces\u00a0%% -a- &gt;b<br/>printline Factors of -a-: -b- </pre>"}, {"lang": "Prolog", "loc": 7, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>brute_force_factors<span class=\"br0\">(</span> N <span class=\"sy4\">,</span> Fs <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy4\">,</span><br/>  N <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy4\">,</span>  <br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">setof</span></a><span class=\"br0\">(</span> F <span class=\"sy4\">,</span> <span class=\"br0\">(</span> between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>N<span class=\"sy4\">,</span>F<span class=\"br0\">)</span> <span class=\"sy4\">,</span> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> F <span class=\"sy1\">=:=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy4\">,</span> Fs <span class=\"br0\">)</span><br/>  <span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 21, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> PrintFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, lim<span class=\"sy0\">=</span><span class=\"kw2\">Round</span><span class=\"br0\">(</span><span class=\"kw2\">sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,#PB_Round_Up<span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> F.i<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> lim<br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>i<br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">/</span>i<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">;- Present the result</span><br/>  <span class=\"kw2\">SortList</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"br0\">)</span>,#PB_Sort_Ascending<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> F<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter integer to factorize: \"</span><span class=\"br0\">)</span><br/>  PrintFactors<span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Press ENTER to quit.\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> factors<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">return</span> <span class=\"br0\">[</span>i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> n%i<span class=\"br0\">]</span></pre>"}, {"lang": "R", "loc": 12, "block": "<pre class=\"text highlighted_source\">factors &lt;- function(n)<br/>{<br/>   if(length(n) &gt; 1) <br/>   {<br/>      lapply(as.list(n), factors)<br/>   } else<br/>   {<br/>      one.to.n &lt;- seq_len(n)<br/>      one.to.n[(n\u00a0%% one.to.n) == 0]<br/>   }<br/>}<br/>factors(60)</pre>"}, {"lang": "Racket", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; a naive version<br/>(define (naive-factors n)<br/>  (for/list ([i (in-range 1 (add1 n))] #:when (zero? (modulo n i))) i))<br/>(naive-factors 120)\u00a0; -&gt; '(1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120)<br/>\u00a0<br/>;; much better: use `factorize' to get prime factors and construct the<br/>;; list of results from that<br/>(require math)<br/>(define (factors n)<br/>  (sort (for/fold ([l '(1)]) ([p (factorize n)])<br/>          (append (for*/list ([e (in-range 1 (add1 (cadr p)))] [x l])<br/>                    (* x (expt (car p) e)))<br/>                  l))<br/>        &lt;))<br/>(naive-factors 120)\u00a0; -&gt; same<br/>\u00a0<br/>;; to see how fast it is:<br/>(define huge 1200034005600070000008900000000000000000)<br/>(time (length (factors  huge)))<br/>;; I get 42ms for getting a list of 7776 numbers<br/>\u00a0<br/>;; but actually the math library comes with a `divisors' function that<br/>;; does the same, except even faster<br/>(divisors 120)\u00a0; -&gt; same<br/>\u00a0<br/>(time (length (divisors huge)))<br/>;; And this one clocks at 17ms<br/>\u00a0</pre>"}, {"lang": "REALbasic", "loc": 13, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> factors(num <span class=\"kw4\">As</span> UInt64) <span class=\"kw4\">As</span> UInt64()<br/>  <span class=\"co1\">'This function accepts an unsigned 64 bit integer as input and returns an array of unsigned 64 bit integers<br/></span>  <span class=\"kw4\">Dim</span> result() <span class=\"kw4\">As</span> UInt64<br/>  <span class=\"kw4\">Dim</span> iFactor <span class=\"kw4\">As</span> UInt64 = 1<br/>  <span class=\"kw3\">While</span> iFactor &lt;= num/2 <span class=\"co1\">'Since a factor will never be larger than half of the number<br/></span>    <span class=\"kw3\">If</span> num <span class=\"kw4\">Mod</span> iFactor = 0 <span class=\"kw3\">Then</span><br/>      result.Append(iFactor)<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    iFactor = iFactor + 1<br/>  Wend<br/>  result.Append(num) <span class=\"co1\">'Since a given number is always a factor of itself<br/></span>  Return result<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  displays  divisors  of any [negative/zero/positive]  integer or a range.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> LO HI inc <span class=\"sy0\">.</span>                                         <span class=\"coMULTI\">/*obtain the optional args*/</span><br/>HI=<span class=\"kw6\">word</span><span class=\"br0\">(</span>HI LO <span class=\"nu0\">20</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;  LO=<span class=\"kw6\">word</span><span class=\"br0\">(</span>LO <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;  inc=<span class=\"kw6\">word</span><span class=\"br0\">(</span>inc <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*define the range options*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>high<span class=\"br0\">)</span>+<span class=\"nu0\">2</span>;      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, w-<span class=\"nu0\">2</span><span class=\"br0\">)</span>;    $=<span class=\"st0\">'\u221e'</span>   <span class=\"coMULTI\">/*decimal digits for  //  */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span>;  @<span class=\"sy0\">.</span>1=<span class=\"st0\">\"{unity}\"</span>; @<span class=\"sy0\">.</span>2=<span class=\"st0\">'[prime]'</span>; @<span class=\"sy0\">.</span>$=<span class=\"st0\">\"  {\"</span>$<span class=\"st0\">'}  '</span> <span class=\"coMULTI\">/*define some literals.   */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'n'</span>, w<span class=\"br0\">)</span>    <span class=\"st0\">\"#divisors\"</span>    <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'divisors'</span>, <span class=\"nu0\">60</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*display the  header.    */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>, w<span class=\"br0\">)</span>    <span class=\"st0\">\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\"</span>    <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>       , <span class=\"nu0\">60</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*   \"     \"   separator. */</span><br/>p#=<span class=\"nu0\">0</span>                                                          <span class=\"coMULTI\">/*count of prime numbers. */</span><br/>     <span class=\"kw1\">do</span> n=LO  <span class=\"kw2\">to</span> HI  <span class=\"kw2\">by</span> inc; divs=divisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span>; #=<span class=\"kw6\">words</span><span class=\"br0\">(</span>divs<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*get list of divs; # divs*/</span><br/>     <span class=\"kw1\">if</span> divs==$  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  #=$\u00a0; divs= <span class=\"st0\">'  (infinite)'</span>;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*handle case for infinity*/</span><br/>     <a class=\"__cf_email__\" data-cfemail=\"29591469\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#;      <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> n<span class=\"sy0\">\\</span>==-<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <a class=\"__cf_email__\" data-cfemail=\"d5a5e895\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">..</span>           <span class=\"coMULTI\">/*   \"     \"   \"  negative*/</span><br/>     <span class=\"kw1\">if</span> <a class=\"__cf_email__\" data-cfemail=\"cbbbf6f68b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>2  <span class=\"kw3\">then</span> p#=p#+<span class=\"nu0\">1</span>                                  <span class=\"coMULTI\">/*Prime? Then bump counter*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>n, w<span class=\"br0\">)</span>      <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'['</span>#<span class=\"st0\">\"]\"</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>       <span class=\"st0\">\"\u2500\u2500\u25ba \"</span>        p      <span class=\"st0\">' '</span>       divs<br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span>                                 <span class=\"coMULTI\">/* [\u2191]   process a range of integers.  */</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">17</span><span class=\"br0\">)</span>     p#    <span class=\"st0\">' primes were found.'</span> <span class=\"coMULTI\">/*display the number of primes found.  */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>divisors: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> b;     a=<span class=\"nu0\">1</span>    <span class=\"coMULTI\">/*set  X  and  B  to the 1st argument. */</span><br/><span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> x==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">'\u221e'</span>;  b=x;  <span class=\"kw3\">end</span><br/>odd=x<span class=\"sy0\">//</span><span class=\"nu0\">2</span>                                         <span class=\"coMULTI\">/* [\u2193]  process EVEN or ODD ints.   ___*/</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>+odd  <span class=\"kw2\">by</span> <span class=\"nu0\">1</span>+odd  <span class=\"kw2\">while</span> j<span class=\"sy0\">*</span>j<span class=\"sy0\">&lt;</span>x        <span class=\"coMULTI\">/*divide by all the integers up to \u221a x */</span><br/>        <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span>j==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; a=a j; b=x%j b; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*\u00f7?  Add factors to  \u03b1  and  \u00df  lists.*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                              <span class=\"coMULTI\">/* [\u2191] \u00a0%  \u2261  integer division.     ___*/</span><br/><span class=\"kw1\">if</span> j<span class=\"sy0\">*</span>j==x  <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span>  a j b                   <span class=\"coMULTI\">/*Was  X  a square?   Then insert  \u221a x */</span><br/>                 <span class=\"kw1\">return</span>  a   b                   <span class=\"coMULTI\">/*return the divisors of both lists.   */</span></pre>"}, {"lang": "Ring", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>nArray = list(100)<br/>n = 45<br/>j = 0<br/>for i = 1 to n<br/>    if n\u00a0% i = 0 j = j + 1 nArray[j] = i ok<br/>next<br/>\u00a0<br/>see \"Factors of \" + n + \" = \"<br/>for i = 1 to j<br/>    see \"\" + nArray[i] + \" \"<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>  <span class=\"kw1\">def</span> factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"kw2\">self</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"kw2\">self</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span>.<span class=\"me1\">zero</span>? <span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">p</span> <span class=\"nu0\">45</span>.<span class=\"me1\">factors</span></pre>"}, {"lang": "Run BASIC", "loc": 32, "block": "<pre class=\"text highlighted_source\">PRINT \"Factors of 45 are \";factorlist$(45)<br/>PRINT \"Factors of 12345 are \"; factorlist$(12345)<br/>END<br/>\u00a0<br/>function factorlist$(f)<br/>DIM L(100)<br/>FOR i = 1 TO SQR(f)<br/>  IF (f MOD i) = 0 THEN<br/>    L(c) = i<br/>    c = c + 1<br/>    IF (f &lt;&gt; i^2) THEN<br/>      L(c) = (f / i)<br/>      c = c + 1<br/>    END IF<br/>  END IF<br/>NEXT i<br/>s = 1<br/>while s = 1<br/>s = 0<br/>for i = 0 to c-1<br/> if L(i) &gt; L(i+1) and L(i+1) &lt;&gt; 0 then<br/>  t = L(i)<br/>  L(i) = L(i+1)<br/>  L(i+1) = t<br/>  s      = 1<br/> end if<br/>next i<br/>wend<br/>FOR i = 0 TO c-1<br/>  factorlist$ = factorlist$ + STR$(L(i)) + \", \"<br/>NEXT<br/>end function</pre>"}, {"lang": "Rust", "loc": 18, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    assert_eq!(vec![1, 2, 4, 5, 10, 10, 20, 25, 50, 100], factor(100)); // asserts that two expressions are equal to each other<br/>    assert_eq!(vec![1, 101], factor(101));<br/>\u00a0<br/>}<br/>\u00a0<br/>fn factor(num: i32) -&gt; Vec&lt;i32&gt; {<br/>    let mut factors: Vec&lt;i32&gt; = Vec::new(); // creates a new vector for the factors of the number<br/>\u00a0<br/>    for i in 1..((num as f32).sqrt() as i32 + 1) { <br/>        if num\u00a0% i == 0 {<br/>            factors.push(i); // pushes smallest factor to factors<br/>            factors.push(num/i); // pushes largest factor to factors<br/>        }<br/>    }<br/>    factors.sort(); // sorts the factors into numerical order for viewing purposes<br/>    factors // returns the factors<br/>}</pre>"}, {"lang": "Sather", "loc": 29, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>\u00a0<br/>  factors(n\u00a0:INT):ARRAY{INT} is<br/>    f:ARRAY{INT};<br/>    f\u00a0:= #;<br/>    f\u00a0:= f.append(|1|); <br/>    f\u00a0:= f.append(|n|);<br/>    loop i\u00a0::= 2.upto!( n.flt.sqrt.int );<br/>      if n%i = 0 then<br/>        f\u00a0:= f.append(|i|);<br/>\tif (i*i) /= n then f\u00a0:= f.append(|n / i|); end;<br/>      end;<br/>    end;<br/>    f.sort;<br/>    return f;<br/>  end;<br/>\u00a0<br/>  main is<br/>    a\u00a0:ARRAY{INT}\u00a0:= |3135, 45, 64, 53, 45, 81|;<br/>    loop l\u00a0::= a.elt!;<br/>      #OUT + \"factors of \" + l + \": \";<br/>      r\u00a0::= factors(l);<br/>      loop ri\u00a0::= r.elt!;<br/>        #OUT + ri + \" \";<br/>      end;<br/>      #OUT + \"\\n\";<br/>    end;<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 15, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/>Brute force approach<span class=\"sy0\">:</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factors<span class=\"br0\">(</span>num<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span> to num<span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> divisor <span class=\"sy0\">=&gt;</span><br/>      num <span class=\"sy0\">%</span> divisor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>Since factors can<span class=\"co2\">'t</span> be higher than sqrt<span class=\"br0\">(</span>num<span class=\"br0\">)</span>, the code above can be edited as follows<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factors<span class=\"br0\">(</span>num<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span> to sqrt<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> divisor <span class=\"sy0\">=&gt;</span><br/>      num <span class=\"sy0\">%</span> divisor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 9, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factors n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>factors <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"kw1\">d</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> n <span class=\"kw1\">d</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"kw1\">d</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>factors <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">d</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>factors <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">d</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span>factors <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>factors <span class=\"nu0\">1111111</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 30, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: writeFactors (in integer: number) is func<br/>  local<br/>    var integer: testNum is 0;<br/>  begin<br/>    write(\"Factors of \" &lt;&amp; number &lt;&amp; \": \");<br/>    for testNum range 1 to sqrt(number) do<br/>      if number rem testNum = 0 then<br/>        if testNum &lt;&gt; 1 then<br/>          write(\", \");<br/>        end if;<br/>        write(testNum);<br/>        if testNum &lt;&gt; number div testNum then<br/>          write(\", \" &lt;&amp; number div testNum);<br/>        end if;<br/>      end if;<br/>    end for;<br/>    writeln;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const array integer: numsToFactor is [] (45, 53, 64);<br/>    var integer: number is 0;<br/>  begin<br/>    for number range numsToFactor do<br/>      writeFactors(number);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 1, "block": "<pre class=\"text highlighted_source\">Factors(num(0))[i]\u00a0:= i when num mod i = 0 foreach i within 1 ... num;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func factors<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  gather <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">|</span>d<span class=\"sy0\">|</span><br/>        take<span class=\"br0\">(</span>d, n<span class=\"sy0\">//</span>d<span class=\"br0\">)</span> <span class=\"kw1\">if</span> d.<span class=\"me1\">divides</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"me1\">n</span>.<span class=\"me1\">isqrt</span><br/>  <span class=\"br0\">}</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">uniq</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"br0\">[</span><span class=\"nu0\">53</span>, <span class=\"nu0\">64</span>, <span class=\"nu0\">32766</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"factors(#{n}): #{factors(n)}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Slate", "loc": 6, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"2f416f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Integer traits) primeFactors<br/>[<br/>  [|\u00a0:result |<br/>   result nextPut: 1.<br/>   n primesDo: [|\u00a0:prime | result nextPut: prime]] writingAs: {}<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 7, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Integer</span>&gt;&gt;factors<br/>\t|<span class=\"re3\"> a </span>|<br/>\t<span class=\"re6\">a</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/>\t<span class=\"re5\">1</span> to: <span class=\"br0\">(</span><span class=\"kw1\">self</span> / <span class=\"re5\">2</span><span class=\"br0\">)</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> | <br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">self</span> \\\\ i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re5\">0</span><span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span> <span class=\"re5\">a</span> add: <span class=\"re5\">i</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>.<br/>\t<span class=\"re5\">a</span> add: <span class=\"kw1\">self</span>.<br/>\t^a</pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">func factors(n: Int) -&gt; [Int] {<br/>\u00a0<br/>    return filter(1...n) { n\u00a0% $0 == 0 }<br/>}</pre>"}, {"lang": "Tcl", "loc": 12, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> factors <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> factors <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> factors <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> / <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -unique -integer <span class=\"re0\">$factors</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>factors <span class=\"nu0\">64</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>factors <span class=\"nu0\">45</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>factors <span class=\"nu0\">53</span><span class=\"br0\">]</span></pre>"}, {"lang": "UNIX Shell", "loc": 12, "block": "<pre class=\"text highlighted_source\">factor() {<br/>  r=`echo \"sqrt($1)\" | bc` # or `echo $1 v p | dc`<br/>  i=1 <br/>  while [ $i -lt $r ]; do<br/>    if [ `expr $1\u00a0% $i` -eq 0 ]; then<br/>      echo $i  <br/>      expr $1 / $i<br/>    fi<br/>    i=`expr $i + 1`<br/>  done | sort -nu<br/>}<br/>\u00a0</pre>"}, {"lang": "Ursa", "loc": 10, "block": "<pre class=\"text highlighted_source\">decl int n<br/>set n (int args&lt;1&gt;)<br/>\u00a0<br/>decl int i<br/>for (set i 1) (&lt; i (+ (/ n 2) 1)) (inc i)<br/>        if (= (mod n i) 0)<br/>                out i \"  \" console<br/>        end if<br/>end for<br/>out n endl console</pre>"}, {"lang": "Ursala", "loc": 4, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>factors \"n\" = (filter not remainder/\"n\") nrange(1,\"n\")</pre>"}, {"lang": "VBA", "loc": 14, "block": "<pre class=\"text highlighted_source\">Function Factors(x As Integer) As String<br/> Application.Volatile<br/> Dim i As Integer<br/> Dim cooresponding_factors As String<br/> Factors = 1<br/> corresponding_factors = x<br/> For i = 2 To Sqr(x)<br/>  If x Mod i = 0 Then<br/>   Factors = Factors &amp; \", \" &amp; i<br/>   If i &lt;&gt; x / i Then corresponding_factors = x / i &amp; \", \" &amp; corresponding_factors<br/>  End If<br/> Next i<br/> If x &lt;&gt; 1 Then Factors = Factors &amp; \", \" &amp; corresponding_factors<br/>End Function</pre>"}, {"lang": "Wortel", "loc": 9, "block": "<pre class=\"text highlighted_source\">@let {<br/>  factors1      &amp;n\u00a0!-\\%%n @to n<br/>  factors_tacit @(\\\\%%\u00a0!- @to)<br/>  [[<br/>   \u00a0!factors1 10 <br/>   \u00a0!factors_tacit 100 <br/>   \u00a0!factors1 720 <br/>  ]]<br/>}</pre>"}, {"lang": "XPL0", "loc": 17, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>int     N0, N, F;<br/>[N0:= 1;<br/>repeat  IntOut(0, N0);  Text(0, \" = \");<br/>        F:= 2;  N:= N0;<br/>        repeat  if rem(N/F) = 0 then<br/>                        [if N # N0 then Text(0, \" * \");<br/>                        IntOut(0, F);<br/>                        N:= N/F;<br/>                        ]<br/>                else F:= F+1;<br/>        until   F&gt;N;<br/>        if N0=1 then IntOut(0, 1);      \\1 = 1<br/>        CrLf(0);<br/>        N0:= N0+1;<br/>until   KeyHit;<br/>]</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">fcn f(n){ (1).pump(n.toFloat().sqrt(), List,<br/>   'wrap(m){((n\u00a0% m)==0) and T(m,n/m) or Void.Skip}) }<br/>fcn g(n){ [[(m); [1..n.toFloat().sqrt()],'{n%m==0}; '{T(m,n/m)} ]] }  // list comprehension</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 7, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> INPUT <span class=\"st0\">\"Enter a number or 0 to exit: \"</span>;n<br/><span class=\"nu0\">20</span> <span class=\"kw1\">IF</span> n=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> STOP <br/><span class=\"nu0\">30</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Factors of \"</span>;n;<span class=\"st0\">\": \"</span>;<br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">50</span> <span class=\"kw1\">IF</span> FN m<span class=\"br0\">(</span>n,i<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> i;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">60</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">70</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b</pre>"}]}