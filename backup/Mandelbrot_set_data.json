{"task": "Mandelbrot_set", "blocks": [{"lang": "ACL2", "loc": 55, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> abs-sq <span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span>realpart z<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span>imagpart z<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> round-decimal <span class=\"br0\">(</span>x places<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>* x <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> places<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> places<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> round-complex <span class=\"br0\">(</span>z places<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>complex <span class=\"br0\">(</span>round-decimal <span class=\"br0\">(</span>realpart z<span class=\"br0\">)</span> places<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>round-decimal <span class=\"br0\">(</span>imagpart z<span class=\"br0\">)</span> places<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mandel-point-r <span class=\"br0\">(</span>z c limit<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix limit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>zp limit<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>abs-sq z<span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> limit<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span>mandel-point-r <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>round-complex <span class=\"br0\">(</span>* z z<span class=\"br0\">)</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> c<span class=\"br0\">)</span><br/>                            c<br/>                            <span class=\"br0\">(</span><span class=\"nu0\">1</span>- limit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mandel-point <span class=\"br0\">(</span>z iters<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>- <span class=\"nu0\">5</span> <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>mandel-point-r z z iters<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ iters <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> draw-mandel-row <span class=\"br0\">(</span>im re cols width iters<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix cols<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp cols<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">prog2</span>$ <span class=\"br0\">(</span>cw <span class=\"br0\">(</span>coerce<br/>                    <span class=\"br0\">(</span><span class=\"kw1\">list</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">case</span> <span class=\"br0\">(</span>mandel-point <span class=\"br0\">(</span>complex re im<span class=\"br0\">)</span><br/>                                         iters<span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"nu0\">5</span> #\\#<span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"nu0\">4</span> #\\*<span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"nu0\">3</span> #\\<span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"nu0\">2</span> #\\<span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span>otherwise #\\Space<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> 'string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>draw-mandel-row im<br/>                                <span class=\"br0\">(</span>+ re <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>/ width <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span>- cols<span class=\"br0\">)</span><br/>                                width iters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> draw-mandel <span class=\"br0\">(</span>im rows width height iters<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp rows<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">progn</span>$ <span class=\"br0\">(</span>draw-mandel-row im -<span class=\"nu0\">2</span> width width iters<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>cw <span class=\"st0\">\"~%\"</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>draw-mandel <span class=\"br0\">(</span>- im <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>/ height <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"nu0\">1</span>- rows<span class=\"br0\">)</span><br/>                            width<br/>                            height<br/>                            iters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> draw-mandelbrot <span class=\"br0\">(</span>width iters<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>height <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>* <span class=\"nu0\">1000</span> width<span class=\"br0\">)</span> <span class=\"nu0\">3333</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>draw-mandel <span class=\"nu0\">1</span> height width height iters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 40, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Lumen.<span class=\"me1\">Binary</span>;<br/><span class=\"kw3\">package</span> <span class=\"kw3\">body</span> Mandelbrot <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Create_Image <span class=\"br0\">(</span>Width, Height\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Lumen.<span class=\"me1\">Image</span>.<span class=\"me1\">Descriptor</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> <span class=\"kw3\">type</span> Lumen.<span class=\"me1\">Binary</span>.<span class=\"me1\">Byte</span>;<br/>      Result\u00a0: Lumen.<span class=\"me1\">Image</span>.<span class=\"me1\">Descriptor</span>;<br/>      X0, Y0\u00a0: Float;<br/>      X, Y, Xtemp\u00a0: Float;<br/>      Iteration  \u00a0: Float;<br/>      Max_Iteration\u00a0: <span class=\"kw3\">constant</span> Float\u00a0:= <span class=\"nu0\">1000.0</span>;<br/>      Color\u00a0: Lumen.<span class=\"me1\">Binary</span>.<span class=\"me1\">Byte</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Result.<span class=\"me1\">Width</span>\u00a0:= Width;<br/>      Result.<span class=\"me1\">Height</span>\u00a0:= Height;<br/>      Result.<span class=\"me1\">Complete</span>\u00a0:= True;<br/>      Result.<span class=\"me1\">Values</span>\u00a0:= <span class=\"kw3\">new</span> Lumen.<span class=\"me1\">Image</span>.<span class=\"me1\">Pixel_Matrix</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Width</span>, <span class=\"nu0\">1</span> .. <span class=\"me1\">Height</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> Screen_X <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Width</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> Screen_Y <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Height</span> <span class=\"kw1\">loop</span><br/>            X0\u00a0:= -<span class=\"nu0\">2.5</span> + <span class=\"br0\">(</span><span class=\"nu0\">3.5</span> / Float <span class=\"br0\">(</span>Width<span class=\"br0\">)</span> * Float <span class=\"br0\">(</span>Screen_X<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            Y0\u00a0:= -<span class=\"nu0\">1.0</span> + <span class=\"br0\">(</span><span class=\"nu0\">2.0</span> / Float <span class=\"br0\">(</span>Height<span class=\"br0\">)</span> * Float <span class=\"br0\">(</span>Screen_Y<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            X\u00a0:= <span class=\"nu0\">0.0</span>;<br/>            Y\u00a0:= <span class=\"nu0\">0.0</span>;<br/>            Iteration\u00a0:= <span class=\"nu0\">0.0</span>;<br/>            <span class=\"kw1\">while</span> X * X + Y * Y &lt;= <span class=\"nu0\">4.0</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> Iteration &lt; Max_Iteration <span class=\"kw1\">loop</span><br/>               Xtemp\u00a0:= X * X - Y * Y + X0;<br/>               Y\u00a0:= <span class=\"nu0\">2.0</span> * X * Y + Y0;<br/>               X\u00a0:= Xtemp;<br/>               Iteration\u00a0:= Iteration + <span class=\"nu0\">1.0</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">if</span> Iteration = Max_Iteration <span class=\"kw1\">then</span><br/>               Color\u00a0:= <span class=\"nu0\">255</span>;<br/>            <span class=\"kw1\">else</span><br/>               Color\u00a0:= <span class=\"nu0\">0</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            Result.<span class=\"me1\">Values</span> <span class=\"br0\">(</span>Screen_X, Screen_Y<span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span>R =&gt; Color, G =&gt; Color, B =&gt; Color, A =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Create_Image;<br/>\u00a0<br/><span class=\"kw1\">end</span> Mandelbrot;</pre>"}, {"lang": "ALGOL 68", "loc": 40, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw3\">INT</span> pix <span class=\"sy1\">=</span> 300<span class=\"sy1\">,</span> max iter <span class=\"sy1\">=</span> 256<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> zoom <span class=\"sy1\">=</span> <span class=\"re1\">0.33</span> <span class=\"sy1\">/</span> pix<span class=\"sy1\">;</span><br/><span class=\"br0\">[</span><span class=\"sy1\">-</span>pix <span class=\"sy1\">:</span> pix<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>pix <span class=\"sy1\">:</span> pix<span class=\"br0\">]</span> <span class=\"kw3\">INT</span> plane<span class=\"sy1\">;</span><br/><span class=\"kw3\">COMPL</span> ctr <span class=\"sy1\">=</span> <span class=\"re1\">0.05</span> <span class=\"kw10\">I</span> <span class=\"re1\">0.75</span> <span class=\"coMULTI\"># center of set #</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Compute the length of an orbit. #</span><br/><span class=\"kw4\">PROC</span> iterate <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">COMPL</span> z0<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>  <span class=\"kw2\">BEGIN</span> <span class=\"kw3\">COMPL</span> z <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> iter <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> <span class=\"br0\">(</span>iter <span class=\"sy1\">+:=</span> 1<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> max iter <span class=\"coMULTI\"># not converged #</span> <span class=\"kw16\">AND</span> <span class=\"kw8\">ABS</span> z <span class=\"sy1\">&lt;</span> 2 <span class=\"coMULTI\"># not diverged #</span><br/>        <span class=\"kw2\">DO</span> z <span class=\"sy1\">:=</span> z <span class=\"sy1\">*</span> z <span class=\"sy1\">+</span> z0<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        iter<br/>  <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Compute set and find maximum orbit length. #</span>     <br/><span class=\"kw3\">INT</span> max col <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> x <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>pix <span class=\"kw2\">TO</span> pix<br/><span class=\"kw2\">DO</span> <span class=\"kw2\">FOR</span> y <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>pix <span class=\"kw2\">TO</span> pix<br/>   <span class=\"kw2\">DO</span> <span class=\"kw3\">COMPL</span> z0 <span class=\"sy1\">=</span> ctr <span class=\"sy1\">+</span> <span class=\"br0\">(</span>x <span class=\"sy1\">*</span> zoom<span class=\"br0\">)</span> <span class=\"kw10\">I</span> <span class=\"br0\">(</span>y <span class=\"sy1\">*</span> zoom<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> <span class=\"br0\">(</span>plane <span class=\"br0\">[</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> iterate <span class=\"br0\">(</span>z0<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> max iter<br/>      <span class=\"kw2\">THEN</span> <span class=\"br0\">(</span>plane <span class=\"br0\">[</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> max col <span class=\"sy1\">|</span> max col <span class=\"sy1\">:=</span> plane <span class=\"br0\">[</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">OD</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Make a plot. #</span><br/><span class=\"kw6\">FILE</span> plot<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> num pix <span class=\"sy1\">=</span> 2 <span class=\"sy1\">*</span> pix <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw22\">make device</span> <span class=\"br0\">(</span>plot<span class=\"sy1\">,</span> <span class=\"st0\">\"gif\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span> <span class=\"br0\">(</span>num pix<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\"x\"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span> <span class=\"br0\">(</span>num pix<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">open</span> <span class=\"br0\">(</span>plot<span class=\"sy1\">,</span> <span class=\"st0\">\"mandelbrot.gif\"</span><span class=\"sy1\">,</span> <span class=\"kw21\">stand draw channel</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> x <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>pix <span class=\"kw2\">TO</span> pix<br/><span class=\"kw2\">DO</span> <span class=\"kw2\">FOR</span> y <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>pix <span class=\"kw2\">TO</span> pix<br/>   <span class=\"kw2\">DO</span> <span class=\"kw3\">INT</span> col <span class=\"sy1\">=</span> <span class=\"br0\">(</span>plane <span class=\"br0\">[</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> max col <span class=\"sy1\">|</span> max col <span class=\"sy1\">|</span> plane <span class=\"br0\">[</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">REAL</span> c <span class=\"sy1\">=</span> <span class=\"kw24\">sqrt</span> <span class=\"br0\">(</span>1<span class=\"sy1\">-</span> col <span class=\"sy1\">/</span> max col<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># sqrt to enhance contrast #</span><br/>      draw colour <span class=\"br0\">(</span>plot<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> c<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      draw point <span class=\"br0\">(</span>plot<span class=\"sy1\">,</span> <span class=\"br0\">(</span>x <span class=\"sy1\">+</span> pix<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span>num pix <span class=\"sy1\">-</span> 1<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>y <span class=\"sy1\">+</span> pix<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span>num pix  <span class=\"sy1\">-</span> 1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">OD</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">close</span> <span class=\"br0\">(</span>plot<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Applesoft BASIC", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>10  HGR2<br/>20  XC = -0.5       \u00a0: REM CENTER COORD X<br/>30  YC = 0          \u00a0: REM   \"      \"   Y<br/>40  S = 2           \u00a0: REM SCALE<br/>45  IT = 20         \u00a0: REM ITERATIONS<br/>50  XR = S * 4 / 3  \u00a0: REM TOTAL RANGE OF X<br/>60  YR = S          \u00a0: REM   \"     \"   \"  Y<br/>70  X0 = XC - (XR/2)\u00a0: REM MIN VALUE OF X<br/>80  X1 = XC + (XR/2)\u00a0: REM MAX   \"   \"  X<br/>90  Y0 = YC - (YR/2)\u00a0: REM MIN   \"   \"  Y<br/>100 Y1 = YC - (YR/2)\u00a0: REM MAX   \"   \"  Y<br/>110 XM = XR / 279   \u00a0: REM SCALING FACTOR FOR X<br/>120 YM = YR / 191   \u00a0: REM    \"      \"     \"  Y<br/>130 FOR YI = 0 TO 3 \u00a0: REM INTERLEAVE<br/>140   FOR YS = 0+YI TO 188+YI STEP 4\u00a0: REM Y SCREEN COORDINATE<br/>145   HCOLOR=3\u00a0: HPLOT 0,YS TO 279,YS<br/>150     FOR XS = 0 TO 278 STEP 2    \u00a0: REM X SCREEN COORDINATE<br/>170       X = XS * XM + X0 \u00a0: REM TRANSL SCREEN TO TRUE X<br/>180       Y = YS * YM + Y0 \u00a0: REM TRANSL SCREEN TO TRUE Y<br/>190       ZX = 0<br/>200       ZY = 0<br/>210       XX = 0<br/>220       YY = 0<br/>230       FOR I = 0 TO IT<br/>240         ZY = 2 * ZX * ZY + Y<br/>250         ZX = XX - YY + X<br/>260         XX = ZX * ZX<br/>270         YY = ZY * ZY<br/>280         C = IT-I<br/>290         IF XX+YY &gt;= 4 GOTO 301<br/>300       NEXT I<br/>301       IF C &gt;= 8 THEN C = C - 8\u00a0: GOTO 301<br/>310       HCOLOR = C\u00a0: HPLOT XS, YS TO XS+1, YS<br/>320     NEXT XS<br/>330   NEXT YS<br/>340 NEXT YI<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 117, "block": "<pre class=\"autohotkey highlighted_source\">Max_Iteration <span class=\"sy0\">:=</span> <span class=\"nu0\">256</span><br/>Width <span class=\"sy0\">:=</span> Height <span class=\"sy0\">:=</span> <span class=\"nu0\">400</span><br/>\u00a0<br/>File <span class=\"sy0\">:=</span> <span class=\"st0\">\"MandelBrot.\"</span> Width <span class=\"st0\">\".bmp\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Progress.htm\"><span class=\"kw3\">Progress</span></a><span class=\"sy0\">,</span> b2 w400 fs9<span class=\"sy0\">,</span> Creating Colours <span class=\"sy0\">...</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a><span class=\"sy0\">,</span> CreateColours<br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a><span class=\"sy0\">,</span> CreateBitmap<br/><a href=\"http://www.autohotkey.com/docs/commands/Progress.htm\"><span class=\"kw3\">Progress</span></a><span class=\"sy0\">,</span> Off<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>Caption<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Margin\"><span class=\"kw7\">Margin</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Picture\"><span class=\"kw8\">Picture</span></a><span class=\"sy0\">,,</span> <span class=\"re0\">%File%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,,</span> MandelBrot<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiEscape\"><span class=\"kw7\">GuiEscape</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">CreateBitmap: </span><span class=\"co1\">; create and save a 32bit bitmap file</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <span class=\"co1\">; define header details</span><br/>    HeaderBMP  <span class=\"sy0\">:=</span> <span class=\"nu0\">14</span><br/>    HeaderDIB  <span class=\"sy0\">:=</span> <span class=\"nu0\">40</span><br/>    DataOffset <span class=\"sy0\">:=</span> HeaderBMP <span class=\"sy0\">+</span> HeaderDIB<br/>    ImageSize  <span class=\"sy0\">:=</span> Width <span class=\"sy0\">*</span> Height <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"co1\">; 32bit</span><br/>    FileSize   <span class=\"sy0\">:=</span> DataOffset <span class=\"sy0\">+</span> ImageSize<br/>    Resolution <span class=\"sy0\">:=</span> <span class=\"nu0\">3780</span> <span class=\"co1\">; from mspaint</span><br/>\u00a0<br/>    <span class=\"co1\">; create bitmap header</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>IMAGE<span class=\"sy0\">,</span> FileSize<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"B\"</span><span class=\"br0\">)</span>   <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x00<span class=\"sy0\">,</span> <span class=\"st0\">\"Char\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"M\"</span><span class=\"br0\">)</span>   <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x01<span class=\"sy0\">,</span> <span class=\"st0\">\"Char\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>FileSize   <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x02<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>DataOffset <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x0A<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>HeaderDIB  <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x0E<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>Width      <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x12<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>Height     <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x16<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>          <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x1A<span class=\"sy0\">,</span> <span class=\"st0\">\"Short\"</span><span class=\"br0\">)</span> <span class=\"co1\">; Planes</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><span class=\"nu0\">32</span>         <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x1C<span class=\"sy0\">,</span> <span class=\"st0\">\"Short\"</span><span class=\"br0\">)</span> <span class=\"co1\">; Bits per Pixel</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>ImageSize  <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x22<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>Resolution <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x26<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>Resolution <span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> 0x2A<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">; fill in Data</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a><span class=\"sy0\">,</span> CreatePixels<br/>\u00a0<br/>    <span class=\"co1\">; save Bitmap to file</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">FileDelete</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%File%</span><br/>    Handle <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"CreateFile\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span> File<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> 0x40000000<br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"WriteFile\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> Handle<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>IMAGE<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><br/>            <span class=\"sy0\">,</span> FileSize<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt *\"</span><span class=\"sy0\">,</span> Bytes<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"CloseHandle\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> Handle<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">CreatePixels: </span><span class=\"co1\">; create pixels for [-2 &lt; x &lt; 1] [-1.5 &lt; y &lt; 1.5]</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% Height <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        yi <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        y0 <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.5</span> <span class=\"sy0\">+</span> yi <span class=\"sy0\">/</span> Height <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"co1\">; range -1.5 .. +1.5</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Progress.htm\"><span class=\"kw3\">Progress</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"nu0\">200</span><span class=\"sy0\">*</span>yi <span class=\"sy0\">//</span> Height<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Current line: \"</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>yi <span class=\"st0\">\" / \"</span> Height<br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Width%</span> <span class=\"br0\">{</span><br/>            xi <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            x0 <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> xi <span class=\"sy0\">/</span> Width <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"co1\">; range -2 .. +1</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a><span class=\"sy0\">,</span> Mandelbrot<br/>            p1 <span class=\"sy0\">:=</span> DataOffset <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Width <span class=\"sy0\">*</span> yi <span class=\"sy0\">+</span> xi<span class=\"br0\">)</span><br/>            <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>Colour<span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> p1<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>            p2 <span class=\"sy0\">:=</span> DataOffset <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Width <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Height<span class=\"sy0\">-</span>yi<span class=\"br0\">)</span> <span class=\"sy0\">+</span> xi<span class=\"br0\">)</span><br/>            <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>Colour<span class=\"sy0\">,</span> IMAGE<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">Mandelbrot: </span><span class=\"co1\">; calculate a colour for each pixel</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    x <span class=\"sy0\">:=</span> y <span class=\"sy0\">:=</span> Iteration <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">While</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span>y <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"br0\">(</span>Iteration <span class=\"sy0\">&lt;</span> Max_Iteration<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        xtemp <span class=\"sy0\">:=</span> x<span class=\"sy0\">*</span>x <span class=\"sy0\">-</span> y<span class=\"sy0\">*</span>y <span class=\"sy0\">+</span> x0<br/>        y <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>x<span class=\"sy0\">*</span>y <span class=\"sy0\">+</span> y0<br/>        x <span class=\"sy0\">:=</span> xtemp<br/>        Iteration<span class=\"sy0\">++</span><br/>    <span class=\"br0\">}</span><br/>    Colour <span class=\"sy0\">:=</span> Iteration <span class=\"sy0\">=</span> Max_Iteration\u00a0? <span class=\"nu0\">0</span>\u00a0: Colour_<span class=\"re0\">%Iteration%</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/><span class=\"re2\">CreateColours: </span><span class=\"co1\">; borrowed from PureBasic example</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">64</span> <span class=\"br0\">{</span><br/>        i4 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>i3 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>i2 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>i1 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">64</span><br/>        Colour_<span class=\"re0\">%i1%</span> <span class=\"sy0\">:=</span> RGB<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>i1 <span class=\"sy0\">+</span> <span class=\"nu0\">128</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>i1<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        Colour_<span class=\"re0\">%i2%</span> <span class=\"sy0\">:=</span> RGB<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>i1<span class=\"br0\">)</span><br/>        Colour_<span class=\"re0\">%i3%</span> <span class=\"sy0\">:=</span> RGB<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"sy0\">-</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>i1<span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>        Colour_<span class=\"re0\">%i4%</span> <span class=\"sy0\">:=</span> RGB<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"sy0\">-</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>i1<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>RGB<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; return 24bit color value</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>r<span class=\"sy0\">&amp;</span>0xFF<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">16</span> | g<span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">8</span> | b<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 46, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  XSize=<span class=\"nu0\">59</span>; YSize=<span class=\"nu0\">21</span>;<br/>  MinIm=<span class=\"sy3\">-</span><span class=\"nu0\">1.0</span>; MaxIm=<span class=\"nu0\">1.0</span>;MinRe=<span class=\"sy3\">-</span><span class=\"nu0\">2.0</span>; MaxRe=<span class=\"nu0\">1.0</span>;<br/>  StepX=<span class=\"br0\">(</span>MaxRe<span class=\"sy3\">-</span>MinRe<span class=\"br0\">)</span><span class=\"sy3\">/</span>XSize; StepY=<span class=\"br0\">(</span>MaxIm<span class=\"sy3\">-</span>MinIm<span class=\"br0\">)</span><span class=\"sy3\">/</span>YSize;<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>y=<span class=\"nu0\">0</span>;y<span class=\"sy2\">&lt;</span>YSize;y<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    Im=MinIm<span class=\"sy3\">+</span>StepY<span class=\"sy3\">*</span>y;<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x=<span class=\"nu0\">0</span>;x<span class=\"sy2\">&lt;</span>XSize;x<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>      Re=MinRe<span class=\"sy3\">+</span>StepX<span class=\"sy3\">*</span>x; Zr=Re; Zi=Im;<br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>n=<span class=\"nu0\">0</span>;n<span class=\"sy2\">&lt;</span><span class=\"nu0\">30</span>;n<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>        a=Zr<span class=\"sy3\">*</span>Zr; b=Zi<span class=\"sy3\">*</span>Zi;<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy3\">+</span>b<span class=\"sy2\">&gt;</span><span class=\"nu0\">4.0</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span>;<br/>        Zi=<span class=\"nu0\">2</span><span class=\"sy3\">*</span>Zr<span class=\"sy3\">*</span>Zi<span class=\"sy3\">+</span>Im; Zr=a<span class=\"sy3\">-</span>b<span class=\"sy3\">+</span>Re;<br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span> <span class=\"st0\">\"%c\"</span>,<span class=\"nu0\">62</span><span class=\"sy3\">-</span>n;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span> <span class=\"st0\">\"\"</span>;<br/>  <span class=\"br0\">}</span><br/>  exit;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy2\">&gt;&gt;&gt;&gt;&gt;&gt;=====&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;;;<span class=\"sy5\">:::</span><span class=\"nu0\">96032</span><span class=\"sy5\">:</span>;;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;=========</span>=<br/><span class=\"sy2\">&gt;&gt;&gt;&gt;&gt;===&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;;;;<span class=\"sy5\">:::</span><span class=\"nu0\">873</span><span class=\"sy3\">*</span>079<span class=\"sy5\">::</span>;;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;=======</span><br/><span class=\"sy2\">&gt;&gt;&gt;&gt;===&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;;;;<span class=\"sy5\">::</span><span class=\"nu0\">9974</span>    <span class=\"br0\">(</span>.9<span class=\"sy5\">::::</span>;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;=====</span>=<br/><span class=\"sy2\">&gt;&gt;&gt;=</span>=<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;;;<span class=\"sy5\">:</span><span class=\"nu0\">98888764</span>     <span class=\"nu0\">5789999</span><span class=\"sy5\">:</span>;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;===</span>=<br/><span class=\"sy2\">&gt;&gt;=</span>=<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;<span class=\"sy5\">::::</span><span class=\"nu0\">996</span>. &amp;<span class=\"nu0\">2</span>           <span class=\"nu0\">45335</span><span class=\"sy5\">:</span>;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;===</span><br/><span class=\"sy2\">&gt;&gt;=&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;<span class=\"sy5\">::::::</span><span class=\"nu0\">999752</span>                 <span class=\"sy3\">*</span><span class=\"nu0\">79</span><span class=\"sy5\">:</span>;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;=</span>=<br/><span class=\"sy2\">&gt;=&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;<span class=\"sy5\">:</span><span class=\"nu0\">599999999886</span>                    <span class=\"sy3\">%</span>78<span class=\"sy5\">:</span>;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;=</span><br/><span class=\"sy2\">&gt;&lt;&lt;&lt;&lt;</span>;;;;;<span class=\"sy5\">:::</span><span class=\"nu0\">972456</span><span class=\"sy3\">-</span><span class=\"nu0\">567763</span>                      <span class=\"sy3\">+</span><span class=\"nu0\">9</span>;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br/><span class=\"sy2\">&gt;&lt;</span>;;;;;;<span class=\"sy5\">::::</span><span class=\"nu0\">9875</span>&amp;      .3                       <span class=\"sy3\">*</span><span class=\"nu0\">9</span>;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;</span><br/><span class=\"sy2\">&gt;</span>;;;;;;<span class=\"sy5\">::</span><span class=\"nu0\">997564</span>'        '                       <span class=\"nu0\">8</span><span class=\"sy5\">:</span>;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy5\">::</span><span class=\"nu0\">988897735</span><span class=\"sy3\">/</span>                                 &amp;<span class=\"nu0\">89</span><span class=\"sy5\">:</span>;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy5\">::</span><span class=\"nu0\">988897735</span><span class=\"sy3\">/</span>                                 &amp;<span class=\"nu0\">89</span><span class=\"sy5\">:</span>;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;</span><br/><span class=\"sy2\">&gt;</span>;;;;;;<span class=\"sy5\">::</span><span class=\"nu0\">997564</span>'        '                       <span class=\"nu0\">8</span><span class=\"sy5\">:</span>;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;</span><br/><span class=\"sy2\">&gt;&lt;</span>;;;;;;<span class=\"sy5\">::::</span><span class=\"nu0\">9875</span>&amp;      .3                       <span class=\"sy3\">*</span><span class=\"nu0\">9</span>;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;</span><br/><span class=\"sy2\">&gt;&lt;&lt;&lt;&lt;</span>;;;;;<span class=\"sy5\">:::</span><span class=\"nu0\">972456</span><span class=\"sy3\">-</span><span class=\"nu0\">567763</span>                      <span class=\"sy3\">+</span><span class=\"nu0\">9</span>;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br/><span class=\"sy2\">&gt;=&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;<span class=\"sy5\">:</span><span class=\"nu0\">599999999886</span>                    <span class=\"sy3\">%</span>78<span class=\"sy5\">:</span>;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;=</span><br/><span class=\"sy2\">&gt;&gt;=&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;<span class=\"sy5\">::::::</span><span class=\"nu0\">999752</span>                 <span class=\"sy3\">*</span><span class=\"nu0\">79</span><span class=\"sy5\">:</span>;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;=</span>=<br/><span class=\"sy2\">&gt;&gt;=</span>=<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;<span class=\"sy5\">::::</span><span class=\"nu0\">996</span>. &amp;<span class=\"nu0\">2</span>           <span class=\"nu0\">45335</span><span class=\"sy5\">:</span>;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;===</span><br/><span class=\"sy2\">&gt;&gt;&gt;=</span>=<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;;;<span class=\"sy5\">:</span><span class=\"nu0\">98888764</span>     <span class=\"nu0\">5789999</span><span class=\"sy5\">:</span>;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;===</span>=<br/><span class=\"sy2\">&gt;&gt;&gt;&gt;===&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;;;;<span class=\"sy5\">::</span><span class=\"nu0\">9974</span>    <span class=\"br0\">(</span>.9<span class=\"sy5\">::::</span>;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;=====</span>=<br/><span class=\"sy2\">&gt;&gt;&gt;&gt;&gt;===&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>;;;;;;;<span class=\"sy5\">:::</span><span class=\"nu0\">873</span><span class=\"sy3\">*</span>079<span class=\"sy5\">::</span>;;;;<span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;=======</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 28, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckscreen.shtml\"><span class=\"kw3\">SCREEN</span></a> <span class=\"nu0\">13</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckwindow.shtml\"><span class=\"kw3\">WINDOW</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.5</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">FOR</span> x0 <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span> <span class=\"kw1\">STEP</span> <span class=\"nu0\">.01</span><br/>    <span class=\"kw1\">FOR</span> y0 <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.5</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1.5</span> <span class=\"kw1\">STEP</span> <span class=\"nu0\">.01</span><br/>        x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>        iteration <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        maxIteration <span class=\"sy0\">=</span> <span class=\"nu0\">223</span><br/>\u00a0<br/>        <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> iteration <span class=\"sy0\">&lt;</span> maxIteration<span class=\"br0\">)</span><br/>            xtemp <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">-</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">+</span> x0<br/>            y <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> y <span class=\"sy0\">+</span> y0<br/>\u00a0<br/>            x <span class=\"sy0\">=</span> xtemp<br/>\u00a0<br/>            iteration <span class=\"sy0\">=</span> iteration <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">WEND</span><br/>\u00a0<br/>        <span class=\"kw1\">IF</span> iteration <span class=\"sy0\">&lt;&gt;</span> maxIteration <span class=\"kw1\">THEN</span><br/>            c <span class=\"sy0\">=</span> iteration<br/>        <span class=\"kw1\">ELSE</span><br/>            c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\u00a0<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckpset.shtml\"><span class=\"kw3\">PSET</span></a> <span class=\"br0\">(</span>x0<span class=\"sy0\">,</span> y0<span class=\"br0\">)</span><span class=\"sy0\">,</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">32</span><br/>    <span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">NEXT</span></pre>"}, {"lang": "Befunge", "loc": 11, "block": "<pre class=\"text highlighted_source\">0&gt;:00p58*`#@_0&gt;:01p78vv$$&lt;<br/>@^+1g00,+55_v#\u00a0!`\\+*9&lt;&gt;4v$<br/>@v30p20\"?~^\"&lt; ^+1g10,+*8&lt;$<br/>@&gt;p0\\&gt;\\::*::882**02g*0v &gt;^<br/>`*:*\" d\":+*:-*\"[Z\"+g3 &lt; |&lt;<br/>v-*\"[Z\"+g30*g20**288\\--\\&lt;#<br/>&gt;2**5#&gt;8*:*/00g\"P\"*58*:*v^<br/>v*288 p20/**288:+*\"[Z\"+-&lt;:<br/>&gt;*%03 p58*:*/01g\"3\"* v&gt;::^<br/>   \\_^#!:-1\\+-*2*:*85&lt;^<br/>\u00a0</pre>"}, {"lang": "Brace", "loc": 17, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/env bx<br/>use b<br/>\u00a0<br/>Main():<br/>\tnum outside = 16, ox = -0.5, oy = 0, r = 1.5<br/>\tlong i, max_i = 100, rb_i = 30<br/>\tspace()<br/>\tuint32_t *px = pixel()<br/>\tnum d = 2*r/h, x0 = ox-d*w_2, y0 = oy+d*h_2<br/>\tfor(y, 0, h):<br/>\t\tcmplx c = x0 + (y0-d*y)*I<br/>\t\trepeat(w):<br/>\t\t\tcmplx w = 0<br/>\t\t\tfor i=0; i &lt; max_i &amp;&amp; cabs(w) &lt; outside; ++i<br/>\t\t\t\tw = w*w + c<br/>\t\t\t*px++ = i &lt; max_i\u00a0? rainbow(i*359 / rb_i\u00a0% 360)\u00a0: black<br/>\t\t\tc += d</pre>"}, {"lang": "Brainf***", "loc": 147, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>     A mandelbrot set fractal viewer in brainf*ck written by Erik Bosman<br/>+++++++++++++[-&gt;++&gt;&gt;&gt;+++++&gt;++&gt;+&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;++++++&gt;---&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++++++++++++++[[<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]+[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-]&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-]+<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;+++++[-[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]+[&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-]&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;[-]+&lt;&lt;&lt;&lt;&lt;&lt;++++[-[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;+++++++[-[-&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[[-]&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;<br/>&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;+&lt;&lt;&lt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;+&lt;&lt;&lt;+&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;+&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++++++++++++++[[<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]+&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+[<br/>&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;-&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;[<br/>-&lt;&lt;+&gt;&gt;]&lt;&lt;[-&gt;&gt;+&gt;&gt;+&lt;&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;[&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>[&gt;[-]&lt;-&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;[&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;-&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+<br/>&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&gt;+&lt;&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;<br/>+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-]&lt;-&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;<br/>&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++++++++++++++[[&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;[-&lt;&lt;&lt;-&gt;&gt;&gt;]+&lt;&lt;&lt;[-&gt;&gt;&gt;-&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;+&lt;]]+&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;-&lt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;<br/>&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;[-]+&lt;]]+&gt;[-&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;+&gt;&gt;&gt;-&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++++++++++++++++++<br/>+++++++&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;[-]&lt;&lt;]&gt;&gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&lt;[-&lt;+&gt;&gt;&gt;&gt;+&lt;&lt;[-]]&gt;[-&lt;&lt;[-&gt;+&gt;&gt;&gt;-<br/>&lt;&lt;&lt;&lt;]&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;[-]&gt;[-]&gt;[-]&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;<br/>[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++++++++++++++[[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]+&gt;[-<br/>]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+[&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;-&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;[-&lt;&lt;+&gt;&gt;]&lt;<br/>&lt;[-&gt;&gt;+&gt;+&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-]&lt;-&gt;&gt;&gt;<br/>[-&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;]&lt;&lt;[-&gt;&gt;+&lt;&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;<br/>&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;-&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;[-&lt;&lt;+<br/>&gt;&gt;]&lt;&lt;[-&gt;&gt;+&gt;&gt;+&lt;&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;<br/>[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-<br/>]&lt;-&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>[&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>]&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;++++++++<br/>+++++++[[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;[<br/>-]&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;+&gt;[-&lt;-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;++&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;[-&lt;<br/>&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&lt;-&gt;+&gt;]&lt;[-&gt;+&lt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;[-]&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;<br/>[-&gt;&gt;&gt;&gt;-&gt;&gt;&gt;&gt;&gt;[&gt;&gt;[-&lt;&lt;-&gt;&gt;]+&lt;&lt;[-&gt;&gt;-&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]<br/>+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;+&lt;]]+&gt;&gt;&gt;[-&lt;&lt;&lt;-&gt;&gt;&gt;]+&lt;&lt;&lt;[-&gt;&gt;&gt;-&lt;[-&lt;&lt;+&gt;&gt;]&lt;&lt;[-&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;[-]+&lt;]]+&gt;[-&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;&gt;[-&lt;&lt;-&gt;&gt;]&lt;&lt;[-&gt;&gt;+&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;+&lt;[&gt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&lt;]&gt;[-&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;]&gt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;[-&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;]&gt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;[-&lt;-&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;+&lt;[&gt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;[-&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;]&gt;]&lt;[-&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;]&gt;&gt;[-&gt;&gt;&gt;+&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;]&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;<br/>]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>[&gt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&lt;]&gt;[-&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;]&gt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;[-&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;]&gt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;]]&gt;[-]&gt;&gt;[-]&gt;[-]&gt;&gt;&gt;&gt;&gt;[&gt;&gt;[-]&gt;[-]&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;[-&lt;<br/>&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++++++++++++++[<br/>[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]+&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+<br/>[&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;-&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;<br/>[-&lt;&lt;+&gt;&gt;]&lt;&lt;[-&gt;&gt;+&gt;+&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;[&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[<br/>&gt;[-]&lt;-&gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;]&lt;&lt;[-&gt;&gt;+&lt;&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[<br/>&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;<br/>&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;[-]&gt;&gt;&gt;&gt;+++++++++++++++[[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+[&gt;&gt;&gt;[-&lt;&lt;&lt;-&gt;&gt;&gt;]+&lt;&lt;&lt;[-&gt;&gt;&gt;-&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;+&lt;]]+&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;-&lt;[-<br/>&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;[-]+&lt;]]+&gt;[-&lt;[&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;&gt;&gt;<br/>[-&lt;&lt;&lt;-&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&lt;[&gt;[-&gt;+&gt;[-&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;<br/>+&gt;&gt;]&lt;]&gt;[-&lt;&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;]&gt;&gt;[-&lt;+&gt;&gt;[-&lt;&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;]&gt;<br/>[-&lt;&lt;+&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;&gt;[-&lt;&lt;-&gt;&gt;]&lt;&lt;[-&gt;&gt;+&lt;&lt;]&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&lt;[&gt;[-&gt;+&gt;&gt;[-&lt;&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;+&gt;]&gt;]&lt;[-&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;]&gt;&gt;&gt;[-&lt;&lt;+&gt;[-&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;]&lt;[-&lt;+&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;<br/>]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;[-]&gt;[-]&gt;[-]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]&gt;[-]&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;<br/>&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;+&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;+&gt;[-&lt;-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;<br/>&gt;]&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;++&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&lt;-&gt;+&gt;&gt;]&lt;&lt;[-&gt;&gt;+&lt;&lt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;<br/>&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;-&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;[-&lt;&lt;&lt;-&gt;&gt;&gt;]+&lt;&lt;&lt;[-&gt;&gt;&gt;-&lt;[-&lt;&lt;+&gt;&gt;]&lt;&lt;[-&gt;&gt;+&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;+&lt;]]+&gt;&gt;[-&lt;&lt;-&gt;&gt;]+&lt;&lt;[-&gt;&gt;-&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;<br/>&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;[-]+&lt;]]+&gt;[-&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;[-&lt;-&gt;]&lt;[-&gt;+<br/>&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&lt;[&gt;[-&gt;&gt;&gt;&gt;+&lt;&lt;[-&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&gt;]&lt;[-&gt;&gt;&gt;-<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;]&gt;&gt;[-&gt;&gt;+&lt;&lt;&lt;[-&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;]&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;<br/>]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;[-]&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;+&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;<br/>&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;[&gt;+&gt;&gt;[-&lt;&lt;-&gt;&gt;]&lt;&lt;[-&gt;&gt;+&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&lt;[&gt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;[-&gt;&gt;&gt;-<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&gt;&gt;+&lt;&lt;]&lt;]&gt;[-&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;]&gt;[-&gt;&gt;&gt;+&lt;&lt;[<br/>-&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;]&gt;[-&gt;&gt;+&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;[-]&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;<br/>&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&gt;[-]&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;+&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;[-&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&gt;&gt;+&lt;&lt;]&lt;]&gt;[-&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;]&gt;[-&gt;&gt;&gt;+&lt;&lt;[-&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;]&gt;[-&gt;&gt;+&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;[-]&gt;[-]&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]&gt;[-]&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+<br/>&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;<br/>]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;+&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++++++++++++++[[&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;]+&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+[&gt;+&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;-&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;[-&lt;&lt;+<br/>&gt;&gt;]&lt;&lt;[-&gt;&gt;+&gt;&gt;+&lt;&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;<br/>[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-<br/>]&lt;-&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>[&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;-&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;<br/>&lt;&lt;[-&gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&gt;+&lt;&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;&lt;+&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-]&lt;-&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;&lt;&lt;]&lt;+<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++++++++++++++[[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;[-&lt;&lt;&lt;-&gt;&gt;&gt;]+&lt;&lt;&lt;[-&gt;&gt;&gt;-&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>]&gt;&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;+&lt;]]+&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;-&lt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;[-&gt;&gt;&gt;+&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;[-]+&lt;]]+&gt;[-&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;-&gt;&gt;[-&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;+&lt;&lt;[-]&lt;&lt;]&gt;&gt;]&lt;&lt;+&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;<br/>-&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;.&gt;&gt;]&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;&gt;&gt;[<br/>&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;[-]&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;[-]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;+++++++++++[-[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+[-]&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-]+&gt;&gt;&gt;]&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;&gt;[&gt;+&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;<br/>&gt;+&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;[-&gt;&gt;+&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;[&gt;[-]&lt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;]&lt;<br/>+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;[-]+&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;-&gt;&gt;[&gt;&gt;<br/>&gt;&gt;&gt;[-&gt;&gt;+&lt;&lt;]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-]&lt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;<br/>&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;+++++[-[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;+&lt;&lt;&lt;<br/>&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;-&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;+&lt;]]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;-&lt;&lt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;[-]+&lt;]]+&gt;[-&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]&lt;&lt;&lt;+++++[-[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;]]&gt;&gt;&gt;]&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;[-]&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;++++++++++[-[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+[-]&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-]+&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;[&gt;+&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;&gt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;[-&gt;&gt;+&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-]&lt;-<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;+&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;[-]+&lt;&lt;&lt;]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-&gt;[&gt;&gt;&gt;<br/>&gt;&gt;&gt;[-&gt;&gt;+&lt;&lt;]&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;[-]&lt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;[&lt;-&gt;-&lt;&lt;+&gt;&gt;]&lt;[-&gt;+&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&lt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;+++++[-[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;<br/>+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;&gt;&gt;]+&lt;<br/>&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;-&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&lt;&lt;]&gt;&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;+&lt;]]+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>-&lt;&lt;[-&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;[-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;[-]+&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;&gt;<br/>&gt;&gt;&gt;]&gt;[-]+&lt;]]+&gt;[-&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]&lt;&lt;&lt;++++<br/>+[-[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&gt;&gt;&gt;&gt;&gt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-&lt;&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;<br/>&lt;&lt;&lt;&lt;&lt;]]&gt;&gt;&gt;]<br/>\u00a0</pre>"}, {"lang": "C", "loc": 90, "block": "<pre class=\"c highlighted_source\"> <span class=\"coMULTI\">/* <br/> c program:<br/> --------------------------------<br/>  1. draws Mandelbrot set for Fc(z)=z*z +c<br/>  using Mandelbrot algorithm ( boolean escape time )<br/> -------------------------------         <br/> 2. technique of creating ppm file is  based on the code of Claudio Rocchini<br/> http://en.wikipedia.org/wiki/Image:Color_complex_plot.jpg<br/> create 24 bit color graphic file ,  portable pixmap file = PPM <br/> see http://en.wikipedia.org/wiki/Portable_pixmap<br/> to see the file use external application ( graphic viewer)<br/>  */</span><br/> <span class=\"co2\">#include &lt;stdio.h&gt;</span><br/> <span class=\"co2\">#include &lt;math.h&gt;</span><br/> <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>          <span class=\"coMULTI\">/* screen ( integer) coordinate */</span><br/>        <span class=\"kw4\">int</span> iX<span class=\"sy0\">,</span>iY<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> iXmax <span class=\"sy0\">=</span> <span class=\"nu0\">800</span><span class=\"sy0\">;</span> <br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> iYmax <span class=\"sy0\">=</span> <span class=\"nu0\">800</span><span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/* world ( double) coordinate = parameter plane*/</span><br/>        <span class=\"kw4\">double</span> Cx<span class=\"sy0\">,</span>Cy<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> CxMin<span class=\"sy0\">=-</span><span class=\"nu16\">2.5</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> CxMax<span class=\"sy0\">=</span><span class=\"nu16\">1.5</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> CyMin<span class=\"sy0\">=-</span><span class=\"nu16\">2.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> CyMax<span class=\"sy0\">=</span><span class=\"nu16\">2.0</span><span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/* */</span><br/>        <span class=\"kw4\">double</span> PixelWidth<span class=\"sy0\">=</span><span class=\"br0\">(</span>CxMax<span class=\"sy0\">-</span>CxMin<span class=\"br0\">)</span><span class=\"sy0\">/</span>iXmax<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> PixelHeight<span class=\"sy0\">=</span><span class=\"br0\">(</span>CyMax<span class=\"sy0\">-</span>CyMin<span class=\"br0\">)</span><span class=\"sy0\">/</span>iYmax<span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/* color component ( R or G or B) is coded from 0 to 255 */</span><br/>        <span class=\"coMULTI\">/* it is 24 bit color RGB file */</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> MaxColorComponentValue<span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"sy0\">;</span> <br/>        FILE <span class=\"sy0\">*</span> fp<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>filename<span class=\"sy0\">=</span><span class=\"st0\">\"new1.ppm\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>comment<span class=\"sy0\">=</span><span class=\"st0\">\"# \"</span><span class=\"sy0\">;</span><span class=\"coMULTI\">/* comment should start with # */</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> color<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/* Z=Zx+Zy*i \u00a0;   Z0 = 0 */</span><br/>        <span class=\"kw4\">double</span> Zx<span class=\"sy0\">,</span> Zy<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> Zx2<span class=\"sy0\">,</span> Zy2<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Zx2=Zx*Zx;  Zy2=Zy*Zy  */</span><br/>        <span class=\"coMULTI\">/*  */</span><br/>        <span class=\"kw4\">int</span> Iteration<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> IterationMax<span class=\"sy0\">=</span><span class=\"nu0\">200</span><span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/* bail-out value , radius of circle\u00a0;  */</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">double</span> EscapeRadius<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> ER2<span class=\"sy0\">=</span>EscapeRadius<span class=\"sy0\">*</span>EscapeRadius<span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/*create new file,give it a name and open it in binary mode  */</span><br/>        fp<span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span><span class=\"st0\">\"wb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* b -  binary mode */</span><br/>        <span class=\"coMULTI\">/*write ASCII header to the file*/</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"P6<span class=\"es1\">\\n</span>\u00a0%s<span class=\"es1\">\\n</span>\u00a0%d<span class=\"es1\">\\n</span>\u00a0%d<span class=\"es1\">\\n</span>\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>comment<span class=\"sy0\">,</span>iXmax<span class=\"sy0\">,</span>iYmax<span class=\"sy0\">,</span>MaxColorComponentValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/* compute and write image data bytes to the file*/</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>iY<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>iY<span class=\"sy0\">&lt;</span>iYmax<span class=\"sy0\">;</span>iY<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>             Cy<span class=\"sy0\">=</span>CyMin <span class=\"sy0\">+</span> iY<span class=\"sy0\">*</span>PixelHeight<span class=\"sy0\">;</span><br/>             <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fabs.html\"><span class=\"kw3\">fabs</span></a><span class=\"br0\">(</span>Cy<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span> PixelHeight<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> Cy<span class=\"sy0\">=</span><span class=\"nu16\">0.0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Main antenna */</span><br/>             <span class=\"kw1\">for</span><span class=\"br0\">(</span>iX<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>iX<span class=\"sy0\">&lt;</span>iXmax<span class=\"sy0\">;</span>iX<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">{</span>         <br/>                        Cx<span class=\"sy0\">=</span>CxMin <span class=\"sy0\">+</span> iX<span class=\"sy0\">*</span>PixelWidth<span class=\"sy0\">;</span><br/>                        <span class=\"coMULTI\">/* initial value of orbit = critical point Z= 0 */</span><br/>                        Zx<span class=\"sy0\">=</span><span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>                        Zy<span class=\"sy0\">=</span><span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>                        Zx2<span class=\"sy0\">=</span>Zx<span class=\"sy0\">*</span>Zx<span class=\"sy0\">;</span><br/>                        Zy2<span class=\"sy0\">=</span>Zy<span class=\"sy0\">*</span>Zy<span class=\"sy0\">;</span><br/>                        <span class=\"coMULTI\">/* */</span><br/>                        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Iteration<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>Iteration<span class=\"sy0\">&lt;</span>IterationMax <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Zx2<span class=\"sy0\">+</span>Zy2<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>ER2<span class=\"br0\">)</span><span class=\"sy0\">;</span>Iteration<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            Zy<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>Zx<span class=\"sy0\">*</span>Zy <span class=\"sy0\">+</span> Cy<span class=\"sy0\">;</span><br/>                            Zx<span class=\"sy0\">=</span>Zx2<span class=\"sy0\">-</span>Zy2 <span class=\"sy0\">+</span>Cx<span class=\"sy0\">;</span><br/>                            Zx2<span class=\"sy0\">=</span>Zx<span class=\"sy0\">*</span>Zx<span class=\"sy0\">;</span><br/>                            Zy2<span class=\"sy0\">=</span>Zy<span class=\"sy0\">*</span>Zy<span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                        <span class=\"coMULTI\">/* compute  pixel color (24 bit = 3 bytes) */</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Iteration<span class=\"sy0\">==</span>IterationMax<span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span> <span class=\"coMULTI\">/*  interior of Mandelbrot set = black */</span><br/>                           color<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                           color<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                           color<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>                           <br/>                        <span class=\"br0\">}</span><br/>                     <span class=\"kw1\">else</span> <br/>                        <span class=\"br0\">{</span> <span class=\"coMULTI\">/* exterior of Mandelbrot set = white */</span><br/>                             color<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Red*/</span><br/>                             color<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* Green */</span> <br/>                             color<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"sy0\">;</span><span class=\"coMULTI\">/* Blue */</span><br/>                        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                        <span class=\"coMULTI\">/*write color to the file*/</span><br/>                        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>color<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 39, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"co2\">#include &lt;complex&gt;</span><br/>\u00a0<br/><span class=\"co1\">// get dimensions for arrays</span><br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> ElementType, std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> dim1, std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> dim2<span class=\"sy1\">&gt;</span><br/> std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> get_first_dimension<span class=\"br0\">(</span>ElementType <span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>a<span class=\"br0\">)</span><span class=\"br0\">[</span>dim1<span class=\"br0\">]</span><span class=\"br0\">[</span>dim2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> dim1<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> ElementType, std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> dim1, std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> dim2<span class=\"sy1\">&gt;</span><br/> std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> get_second_dimension<span class=\"br0\">(</span>ElementType <span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>a<span class=\"br0\">)</span><span class=\"br0\">[</span>dim1<span class=\"br0\">]</span><span class=\"br0\">[</span>dim2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> dim2<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> ColorType, <span class=\"kw2\">typename</span> ImageType<span class=\"sy1\">&gt;</span><br/> <span class=\"kw4\">void</span> draw_Mandelbrot<span class=\"br0\">(</span>ImageType<span class=\"sy3\">&amp;</span> image,                                   <span class=\"co1\">//where to draw the image</span><br/>                      ColorType set_color, ColorType non_set_color,       <span class=\"co1\">//which colors to use for set/non-set points</span><br/>                      <span class=\"kw4\">double</span> cxmin, <span class=\"kw4\">double</span> cxmax, <span class=\"kw4\">double</span> cymin, <span class=\"kw4\">double</span> cymax,<span class=\"co1\">//the rect to draw in the complex plane</span><br/>                      <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> max_iterations<span class=\"br0\">)</span>                          <span class=\"co1\">//the maximum number of iterations</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> <span class=\"kw4\">const</span> ixsize <span class=\"sy1\">=</span> get_first_dimension<span class=\"br0\">(</span>image<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> <span class=\"kw4\">const</span> iysize <span class=\"sy1\">=</span> get_first_dimension<span class=\"br0\">(</span>image<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> ix <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> ix <span class=\"sy1\">&lt;</span> ixsize<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>ix<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> iy <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> iy <span class=\"sy1\">&lt;</span> iysize<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>iy<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> c<span class=\"br0\">(</span>cxmin <span class=\"sy2\">+</span> ix<span class=\"sy2\">/</span><span class=\"br0\">(</span>ixsize<span class=\"sy2\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy2\">*</span><span class=\"br0\">(</span>cxmax<span class=\"sy2\">-</span>cxmin<span class=\"br0\">)</span>, cymin <span class=\"sy2\">+</span> iy<span class=\"sy2\">/</span><span class=\"br0\">(</span>iysize<span class=\"sy2\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy2\">*</span><span class=\"br0\">(</span>cymax<span class=\"sy2\">-</span>cymin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> z <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>      <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> iterations<span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>iterations <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> iterations <span class=\"sy1\">&lt;</span> max_iterations <span class=\"sy3\">&amp;&amp;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu16\">2.0</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>iterations<span class=\"br0\">)</span> <br/>        z <span class=\"sy1\">=</span> z<span class=\"sy2\">*</span>z <span class=\"sy2\">+</span> c<span class=\"sy4\">;</span><br/>\u00a0<br/>      image<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"br0\">[</span>iy<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>iterations <span class=\"sy1\">==</span> max_iterations<span class=\"br0\">)</span> <span class=\"sy4\">?</span> set_color <span class=\"sy4\">:</span> non_set_color<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Cixl", "loc": 71, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use: cx;<br/>\u00a0<br/>define: max 4.0;<br/>define: max-iter 570;<br/>\u00a0<br/>let: (max-x max-y) screen-size;<br/>let: max-cx $max-x 2.0 /;<br/>let: max-cy $max-y 2.0 /;<br/>let: rows Stack&lt;Str&gt; new;<br/>let: buf Buf new;<br/>let: zoom 0 ref;<br/>\u00a0<br/>func: render()()<br/>  $rows clear<br/>\u00a0<br/>  $max-y 2 / {<br/>    let: y;<br/>    $buf 0 seek<br/>\u00a0<br/>    $max-x {<br/>      let: x;<br/>      let: (zx zy) 0.0 ref\u00a0%%;<br/>      let: cx $x $max-cx - $zoom deref /;<br/>      let: cy $y $max-cy - $zoom deref /;<br/>      let: i #max-iter ref;<br/>\u00a0<br/>      {<br/>        let: nzx $zx deref ** $zy deref ** - $cx +;<br/>\t$zy $zx deref *2 $zy deref * $cy + set<br/>\t$zx $nzx set<br/>        $i &amp;-- set-call\t<br/>        $nzx ** $zy deref ** + #max &lt; $i deref and<br/>      } while<br/>\u00a0<br/>      let: c $i deref\u00a0% -7 bsh bor 256 mod;<br/>      $c {$x 256 mod $y 256 mod} {0 0} if-else $c new-rgb $buf set-bg<br/>      @@s $buf print<br/>    } for<br/>\u00a0<br/>    $rows $buf str push   <br/>  } for<br/>\u00a0<br/>  1 1 #out move-to<br/>  $rows {#out print} for<br/>  $rows riter {#out print} for;<br/>\u00a0<br/>#out hide-cursor<br/>raw-mode<br/>\u00a0<br/>let: poll Poll new;<br/>let: is-done #f ref;<br/>\u00a0<br/>$poll #in {<br/>  #in read-char _<br/>  $is-done #t set<br/>} on-read<br/>\u00a0<br/>{<br/>  $zoom &amp;++ set-call<br/>  render<br/>  $poll 0 wait _<br/>  $is-done deref\u00a0!<br/>} while<br/>\u00a0<br/>#out reset-style<br/>#out clear-screen<br/>1 1 #out move-to<br/>#out show-cursor<br/>normal-mode<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 138, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing.Imaging</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Forms</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">/// &lt;summary&gt;</span><br/><span class=\"co1\">/// Generates bitmap of Mandelbrot Set and display it on the form.</span><br/><span class=\"co1\">/// &lt;/summary&gt;</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> MandelbrotSetForm <span class=\"sy0\">:</span> Form<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">const</span> <span class=\"kw4\">double</span> MaxValueExtent <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">;</span><br/>    Thread thread<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> CalcMandelbrotSetColor<span class=\"br0\">(</span>ComplexNumber c<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// from http://en.wikipedia.org/w/index.php?title=Mandelbrot_set</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> MaxIterations <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">double</span> MaxNorm <span class=\"sy0\">=</span> MaxValueExtent <span class=\"sy0\">*</span> MaxValueExtent<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> iteration <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        ComplexNumber z <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ComplexNumber<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span><br/>            z <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> z <span class=\"sy0\">+</span> c<span class=\"sy0\">;</span><br/>            iteration<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>z<span class=\"sy0\">.</span><span class=\"me1\">Norm</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> MaxNorm <span class=\"sy0\">&amp;&amp;</span> iteration <span class=\"sy0\">&lt;</span> MaxIterations<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iteration <span class=\"sy0\">&lt;</span> MaxIterations<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>iteration <span class=\"sy0\">/</span> MaxIterations<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// black</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> GenerateBitmap<span class=\"br0\">(</span>Bitmap bitmap<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> scale <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> MaxValueExtent <span class=\"sy0\">/</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>bitmap<span class=\"sy0\">.</span><span class=\"me1\">Width</span>, bitmap<span class=\"sy0\">.</span><span class=\"me1\">Height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> bitmap<span class=\"sy0\">.</span><span class=\"me1\">Height</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bitmap<span class=\"sy0\">.</span><span class=\"me1\">Height</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> scale<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> bitmap<span class=\"sy0\">.</span><span class=\"me1\">Width</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j <span class=\"sy0\">-</span> bitmap<span class=\"sy0\">.</span><span class=\"me1\">Width</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> scale<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">double</span> color <span class=\"sy0\">=</span> CalcMandelbrotSetColor<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ComplexNumber<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                bitmap<span class=\"sy0\">.</span><span class=\"me1\">SetPixel</span><span class=\"br0\">(</span>j, i, GetColor<span class=\"br0\">(</span>color<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> Color GetColor<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">double</span> MaxColor <span class=\"sy0\">=</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">double</span> ContrastValue <span class=\"sy0\">=</span> <span class=\"nu0\">0.2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> Color<span class=\"sy0\">.</span><span class=\"me1\">FromArgb</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,<br/>            <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>MaxColor <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"kw1\">value</span>, ContrastValue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> MandelbrotSetForm<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// form creation</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">Text</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Mandelbrot Set Drawing\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">BackColor</span> <span class=\"sy0\">=</span> <span class=\"kw5\">System.<span class=\"me1\">Drawing</span></span><span class=\"sy0\">.</span><span class=\"me1\">Color</span><span class=\"sy0\">.</span><span class=\"me1\">Black</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">BackgroundImageLayout</span> <span class=\"sy0\">=</span> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Windows</span><span class=\"sy0\">.</span><span class=\"me1\">Forms</span><span class=\"sy0\">.</span><span class=\"me1\">ImageLayout</span><span class=\"sy0\">.</span><span class=\"me1\">Stretch</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">MaximizeBox</span> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">StartPosition</span> <span class=\"sy0\">=</span> FormStartPosition<span class=\"sy0\">.</span><span class=\"me1\">CenterScreen</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">FormBorderStyle</span> <span class=\"sy0\">=</span> FormBorderStyle<span class=\"sy0\">.</span><span class=\"me1\">FixedDialog</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">ClientSize</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Size<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">Load</span> <span class=\"sy0\">+=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">EventHandler</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">MainForm_Load</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> MainForm_Load<span class=\"br0\">(</span><span class=\"kw4\">object</span> sender, EventArgs e<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        thread <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Thread<span class=\"br0\">(</span>thread_Proc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        thread<span class=\"sy0\">.</span><span class=\"me1\">IsBackground</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        thread<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">ClientSize</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> thread_Proc<span class=\"br0\">(</span><span class=\"kw4\">object</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// start from small image to provide instant display for user</span><br/>        Size size <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Size<span class=\"br0\">)</span>args<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>width <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">.</span><span class=\"me1\">Width</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> height <span class=\"sy0\">=</span> width <span class=\"sy0\">*</span> size<span class=\"sy0\">.</span><span class=\"me1\">Height</span> <span class=\"sy0\">/</span> size<span class=\"sy0\">.</span><span class=\"me1\">Width</span><span class=\"sy0\">;</span><br/>            Bitmap bitmap <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Bitmap<span class=\"br0\">(</span>width, height, PixelFormat<span class=\"sy0\">.</span><span class=\"me1\">Format24bppRgb</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            GenerateBitmap<span class=\"br0\">(</span>bitmap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">BeginInvoke</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SetNewBitmapDelegate<span class=\"br0\">(</span>SetNewBitmap<span class=\"br0\">)</span>, bitmap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            width <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            Thread<span class=\"sy0\">.</span><span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">// then generate final image</span><br/>        Bitmap finalBitmap <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Bitmap<span class=\"br0\">(</span>size<span class=\"sy0\">.</span><span class=\"me1\">Width</span>, size<span class=\"sy0\">.</span><span class=\"me1\">Height</span>, PixelFormat<span class=\"sy0\">.</span><span class=\"me1\">Format24bppRgb</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        GenerateBitmap<span class=\"br0\">(</span>finalBitmap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">BeginInvoke</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SetNewBitmapDelegate<span class=\"br0\">(</span>SetNewBitmap<span class=\"br0\">)</span>, finalBitmap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> SetNewBitmap<span class=\"br0\">(</span>Bitmap image<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">BackgroundImage</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">BackgroundImage</span><span class=\"sy0\">.</span><span class=\"me1\">Dispose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">BackgroundImage</span> <span class=\"sy0\">=</span> image<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">delegate</span> <span class=\"kw4\">void</span> SetNewBitmapDelegate<span class=\"br0\">(</span>Bitmap image<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Application<span class=\"sy0\">.</span><span class=\"me1\">Run</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> MandelbrotSetForm<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> ComplexNumber<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> Re<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> Im<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> ComplexNumber<span class=\"br0\">(</span><span class=\"kw4\">double</span> re, <span class=\"kw4\">double</span> im<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">Re</span> <span class=\"sy0\">=</span> re<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">Im</span> <span class=\"sy0\">=</span> im<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> ComplexNumber <span class=\"kw1\">operator</span> <span class=\"sy0\">+</span><span class=\"br0\">(</span>ComplexNumber x, ComplexNumber y<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ComplexNumber<span class=\"br0\">(</span>x<span class=\"sy0\">.</span><span class=\"me1\">Re</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">.</span><span class=\"me1\">Re</span>, x<span class=\"sy0\">.</span><span class=\"me1\">Im</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">.</span><span class=\"me1\">Im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> ComplexNumber <span class=\"kw1\">operator</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>ComplexNumber x, ComplexNumber y<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ComplexNumber<span class=\"br0\">(</span>x<span class=\"sy0\">.</span><span class=\"me1\">Re</span> <span class=\"sy0\">*</span> y<span class=\"sy0\">.</span><span class=\"me1\">Re</span> <span class=\"sy0\">-</span> x<span class=\"sy0\">.</span><span class=\"me1\">Im</span> <span class=\"sy0\">*</span> y<span class=\"sy0\">.</span><span class=\"me1\">Im</span>,<br/>            x<span class=\"sy0\">.</span><span class=\"me1\">Re</span> <span class=\"sy0\">*</span> y<span class=\"sy0\">.</span><span class=\"me1\">Im</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">.</span><span class=\"me1\">Im</span> <span class=\"sy0\">*</span> y<span class=\"sy0\">.</span><span class=\"me1\">Re</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> Norm<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Re <span class=\"sy0\">*</span> Re <span class=\"sy0\">+</span> Im <span class=\"sy0\">*</span> Im<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 22, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns mandelbrot<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">refer-clojure</span> <span class=\"sy0\">:</span><span class=\"me1\">exclude</span> <span class=\"br0\">[</span>+<span class=\"sy0\"> * &lt;</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>contrib complex-numbers<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>generic <span class=\"br0\">[</span>arithmetic <span class=\"sy0\">:</span><span class=\"me1\">only</span> <span class=\"br0\">[</span>+ *<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                                 <span class=\"br0\">[</span>comparison <span class=\"sy0\">:</span><span class=\"me1\">only</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                                 <span class=\"br0\">[</span>math-functions <span class=\"sy0\">:</span><span class=\"me1\">only</span> <span class=\"br0\">[</span><span class=\"kw1\">abs</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defn mandelbrot? <span class=\"br0\">[</span>z<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>c <span class=\"nu0\">1</span><br/>         m <span class=\"br0\">(</span>iterate #<span class=\"br0\">(</span>+ z <span class=\"br0\">(</span>* <span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span> c<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span>first m<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>inc c<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>rest m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">20</span> c<span class=\"br0\">)</span> true false<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn mandelbrot <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>for <span class=\"br0\">[</span>y <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> -<span class=\"nu0\">1</span> -<span class=\"nu0\">0.05</span><span class=\"br0\">)</span><br/>\tx <span class=\"br0\">(</span>range -<span class=\"nu0\">2</span> <span class=\"nu0\">0.5</span> <span class=\"nu0\">0.0315</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>mandelbrot? <span class=\"br0\">(</span>complex x y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"#\"</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>interpose \\newline <span class=\"br0\">(</span>map #<span class=\"br0\">(</span><span class=\"kw1\">apply</span> str <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>partition <span class=\"nu0\">80</span> <span class=\"br0\">(</span>mandelbrot<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 51, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> MANDELBROT-SET-<span class=\"kw3\">PROGRAM</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  COMPLEX-ARITHMETIC<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> X               <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> Y               <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> X-A             <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> X-B             <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> Y-A             <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> X-A-SQUARED     <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> Y-A-SQUARED     <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> SUM-OF-SQUARES  <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> ROOT            <span class=\"kw3\">PIC</span> S9V9<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  LOOP-COUNTERS<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> I               <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> J               <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> K               <span class=\"kw3\">PIC</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">77</span>  PLOT-<span class=\"kw3\">CHARACTER</span>     <span class=\"kw3\">PIC</span> X<span class=\"sy0\">.</span><br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>CONTROL-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> OUTER-LOOP-PARAGRAPH<br/>    <span class=\"kw2\">VARYING</span> I <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> I <span class=\"kw3\">IS</span> <span class=\"kw3\">GREATER</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">24</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span><br/>OUTER-LOOP-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> INNER-LOOP-PARAGRAPH<br/>    <span class=\"kw2\">VARYING</span> J <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> J <span class=\"kw3\">IS</span> <span class=\"kw3\">GREATER</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">64</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">''</span><span class=\"sy0\">.</span><br/>INNER-LOOP-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">SPACE</span> <span class=\"kw2\">TO</span> PLOT-<span class=\"kw3\">CHARACTER</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">ZERO</span>  <span class=\"kw2\">TO</span> X-A<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">ZERO</span>  <span class=\"kw2\">TO</span> Y-A<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MULTIPLY</span> J   <span class=\"kw3\">BY</span>   <span class=\"nu0\">0.0390625</span>   <span class=\"kw2\">GIVING</span> X<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">SUBTRACT</span> <span class=\"nu0\">1.5</span> <span class=\"kw3\">FROM</span> X<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MULTIPLY</span> I   <span class=\"kw3\">BY</span>   <span class=\"nu0\">0.083333333</span> <span class=\"kw2\">GIVING</span> Y<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">SUBTRACT</span> <span class=\"nu0\">1</span> <span class=\"kw3\">FROM</span> Y<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> ITERATION-PARAGRAPH <span class=\"kw2\">VARYING</span> K <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">UNTIL</span> K <span class=\"kw3\">IS</span> <span class=\"kw3\">GREATER</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">100</span> <span class=\"kw3\">OR</span> PLOT-<span class=\"kw3\">CHARACTER</span> <span class=\"kw3\">IS</span> <span class=\"kw3\">EQUAL</span> <span class=\"kw2\">TO</span> <span class=\"st0\">'#'</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> PLOT-<span class=\"kw3\">CHARACTER</span> <span class=\"kw3\">WITH</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><span class=\"sy0\">.</span><br/>ITERATION-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MULTIPLY</span> X-A <span class=\"kw3\">BY</span> X-A <span class=\"kw2\">GIVING</span> X-A-SQUARED<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MULTIPLY</span> Y-A <span class=\"kw3\">BY</span> Y-A <span class=\"kw2\">GIVING</span> Y-A-SQUARED<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">SUBTRACT</span> Y-A-SQUARED <span class=\"kw3\">FROM</span> X-A-SQUARED <span class=\"kw2\">GIVING</span> X-B<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">ADD</span>      X   <span class=\"kw2\">TO</span> X-B<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MULTIPLY</span> X-A <span class=\"kw3\">BY</span> Y-A <span class=\"kw2\">GIVING</span> Y-A<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MULTIPLY</span> Y-A <span class=\"kw3\">BY</span> <span class=\"nu0\">2</span>   <span class=\"kw2\">GIVING</span> Y-A<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">SUBTRACT</span> Y   <span class=\"kw3\">FROM</span> Y-A<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span>     X-B <span class=\"kw2\">TO</span>   X-A<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">ADD</span> X-A-SQUARED <span class=\"kw2\">TO</span> Y-A-SQUARED <span class=\"kw2\">GIVING</span> SUM-OF-SQUARES<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">SQRT</span> <span class=\"br0\">(</span>SUM-OF-SQUARES<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> ROOT<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> ROOT <span class=\"kw3\">IS</span> <span class=\"kw3\">GREATER</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">2</span> <span class=\"kw3\">THEN</span> <span class=\"kw2\">MOVE</span> <span class=\"st0\">'#'</span> <span class=\"kw2\">TO</span> PLOT-<span class=\"kw3\">CHARACTER</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 45, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defpackage #<span class=\"sy0\">:</span><span class=\"me1\">mandelbrot</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> #<span class=\"sy0\">:</span><span class=\"me1\">cl</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>in-package #<span class=\"sy0\">:</span><span class=\"me1\">mandelbrot</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>deftype pixel <span class=\"br0\">(</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span>unsigned-byte <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>deftype image <span class=\"br0\">(</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"kw1\">array</span> pixel<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> write-pgm <span class=\"br0\">(</span>image filespec<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>image image<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s filespec <span class=\"sy0\">:</span><span class=\"me1\">direction</span> <span class=\"sy0\">:</span><span class=\"me1\">output</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'pixel <span class=\"sy0\">:</span><span class=\"me1\">if-exists</span> <span class=\"sy0\">:</span><span class=\"me1\">supersede</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>width  <span class=\"br0\">(</span>array-dimension image <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>height <span class=\"br0\">(</span>array-dimension image <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>header <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"P5~A~D ~D~A255~A\"</span> #\\Newline width height #\\Newline #\\Newline<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop for c across header<br/>            <span class=\"kw1\">do</span> <span class=\"br0\">(</span>write-byte <span class=\"br0\">(</span>char-code c<span class=\"br0\">)</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>row height<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>col width<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>write-byte <span class=\"br0\">(</span><span class=\"kw1\">aref</span> image row col<span class=\"br0\">)</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *x-<span class=\"kw1\">max</span>* <span class=\"nu0\">800</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *y-<span class=\"kw1\">max</span>* <span class=\"nu0\">800</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *cx-<span class=\"kw1\">min</span>* -<span class=\"nu0\">2.5</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *cx-<span class=\"kw1\">max</span>* <span class=\"nu0\">1.5</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *cy-<span class=\"kw1\">min</span>* -<span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *cy-<span class=\"kw1\">max</span>* <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *escape-radius* <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *iteration-<span class=\"kw1\">max</span>* <span class=\"nu0\">40</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mandelbrot <span class=\"br0\">(</span>filespec<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pixel-width  <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- *cx-<span class=\"kw1\">max</span>* *cx-<span class=\"kw1\">min</span>*<span class=\"br0\">)</span> *x-<span class=\"kw1\">max</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>pixel-height <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- *cy-<span class=\"kw1\">max</span>* *cy-<span class=\"kw1\">min</span>*<span class=\"br0\">)</span> *y-<span class=\"kw1\">max</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>image <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> *y-<span class=\"kw1\">max</span>* *x-<span class=\"kw1\">max</span>*<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'pixel <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for y from <span class=\"nu0\">0</span> below *y-<span class=\"kw1\">max</span>*<br/>          for cy from *cy-<span class=\"kw1\">min</span>* by pixel-height<br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">0</span> below *x-<span class=\"kw1\">max</span>*<br/>                   for cx from *cx-<span class=\"kw1\">min</span>* by pixel-width<br/>                   for iteration <span class=\"sy0\">=</span> <span class=\"br0\">(</span>loop with c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>complex cx cy<span class=\"br0\">)</span><br/>                                         for iteration from <span class=\"nu0\">0</span> below *iteration-<span class=\"kw1\">max</span>*<br/>                                         for z <span class=\"sy0\">=</span> c then <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* z z<span class=\"br0\">)</span> c<span class=\"br0\">)</span><br/>                                         while <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> z<span class=\"br0\">)</span> *escape-radius*<span class=\"br0\">)</span><br/>                                         finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> iteration<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   for pixel <span class=\"sy0\">=</span> <span class=\"br0\">(</span>round <span class=\"br0\">(</span>* <span class=\"nu0\">255</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- *iteration-<span class=\"kw1\">max</span>* iteration<span class=\"br0\">)</span> *iteration-<span class=\"kw1\">max</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> image y x<span class=\"br0\">)</span> pixel<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>write-pgm image filespec<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">real</span> y <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.2</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu16\">1.2</span><span class=\"sy0\">;</span> y <span class=\"sy0\">+=</span> <span class=\"nu16\">0.05</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">real</span> x <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu16\">2.05</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu16\">0.55</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu16\">0.03</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">auto</span> z <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>.<span class=\"me1\">complex</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>_<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>                z <span class=\"sy0\">=</span> z <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> complex<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            write<span class=\"br0\">(</span>z.<span class=\"me1\">abs</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 36, "block": "<pre class=\"text highlighted_source\">class Complex {<br/>  double _r,_i;<br/>\u00a0<br/>  Complex(this._r,this._i);<br/>  double get r =&gt; _r;<br/>  double get i =&gt; _i;<br/>  String toString() =&gt; \"($r,$i)\";<br/>\u00a0<br/>  Complex operator +(Complex other) =&gt; new Complex(r+other.r,i+other.i);<br/>  Complex operator *(Complex other) =&gt;<br/>      new Complex(r*other.r-i*other.i,r*other.i+other.r*i);<br/>  double abs() =&gt; r*r+i*i;<br/>}<br/>\u00a0<br/>void main() {<br/>  double start_x=-1.5;<br/>  double start_y=-1.0;<br/>  double step_x=0.03;<br/>  double step_y=0.1;<br/>\u00a0<br/>  for(int y=0;y&lt;20;y++) {<br/>    String line=\"\";<br/>    for(int x=0;x&lt;70;x++) {<br/>      Complex c=new Complex(start_x+step_x*x,start_y+step_y*y);<br/>      Complex z=new Complex(0.0, 0.0);<br/>      for(int i=0;i&lt;100;i++) {<br/>        z=z*(z)+c;<br/>        if(z.abs()&gt;2) {<br/>          break;<br/>        }<br/>      }<br/>      line+=z.abs()&gt;2\u00a0? \" \"\u00a0: \"*\";<br/>    }<br/>    print(line);<br/>  }<br/>}</pre>"}, {"lang": "DEC BASIC-PLUS", "loc": 18, "block": "<pre class=\"text highlighted_source\">10 X1=59\\Y1=21<br/>20 I1=-1.0\\I2=1.0\\R1=-2.0\\R2=1.0<br/>30 S1=(R2-R1)/X1\\S2=(I2-I1)/Y1<br/>40 FOR Y=0 TO Y1<br/>50 I3=I1+S2*Y<br/>60 FOR X=0 TO X1<br/>70 R3=R1+S1*X\\Z1=R3\\Z2=I3<br/>80 FOR N=0 TO 30<br/>90 A=Z1*Z1\\B=Z2*Z2<br/>100 IF A+B&gt;4.0 THEN GOTO 130<br/>110 Z2=2*Z1*Z2+I3\\Z1=A-B+R3<br/>120 NEXT N<br/>130 PRINT STRING$(1%,62%-N);<br/>140 NEXT X<br/>150 PRINT<br/>160 NEXT Y<br/>170 END<br/>\u00a0</pre>"}, {"lang": "DWScript", "loc": 17, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">const</span> maxIter <span class=\"sy3\">=</span> <span class=\"nu0\">256</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> y<span class=\"sy1\">:</span><span class=\"sy3\">=-</span><span class=\"nu0\">39</span> <span class=\"kw1\">to</span> <span class=\"nu0\">39</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> x<span class=\"sy1\">:</span><span class=\"sy3\">=-</span><span class=\"nu0\">39</span> <span class=\"kw1\">to</span> <span class=\"nu0\">39</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">var</span> c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Complex<span class=\"br0\">(</span>y<span class=\"sy3\">/</span><span class=\"nu0\">40</span><span class=\"sy3\">-</span><span class=\"nu0\">0.5</span><span class=\"sy1\">,</span> x<span class=\"sy3\">/</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">var</span> z <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> maxIter <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>         z <span class=\"sy1\">:</span><span class=\"sy3\">=</span> z<span class=\"sy3\">*</span>z <span class=\"sy3\">+</span> c<span class=\"sy1\">;</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw3\">Abs</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>&gt;<span class=\"sy3\">=</span><span class=\"nu0\">4</span> <span class=\"kw1\">then</span> Break<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> i&gt;<span class=\"sy3\">=</span>maxIter <span class=\"kw1\">then</span><br/>         Print<span class=\"br0\">(</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span> Print<span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    PrintLn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "eC", "loc": 51, "block": "<pre class=\"text highlighted_source\">void drawMandelbrot(Bitmap bmp, float range, Complex center, ColorAlpha * palette, int nPalEntries, int nIterations, float scale)<br/>{<br/>   int x, y;<br/>   int w = bmp.width, h = bmp.height;<br/>   ColorAlpha * picture = (ColorAlpha *)bmp.picture;<br/>   double logOf2 = log(2);<br/>   Complex d<br/>   {<br/>      w &gt; h\u00a0? range\u00a0: range * w / h,<br/>      h &gt; w\u00a0? range\u00a0: range * h / w<br/>   };<br/>   Complex C0 { center.a - d.a/2, center.b - d.b/2 };<br/>   Complex C = C0;<br/>   double delta = d.a / w;<br/>\u00a0<br/>   for(y = 0; y &lt; h; y++, C.a = C0.a, C.b += delta)<br/>   {<br/>      for(x = 0; x &lt; w; x++, picture++, C.a += delta)<br/>      {<br/>         Complex Z { };<br/>         int i;<br/>         double ii = 0;<br/>         bool out = false;<br/>         double Za2 = Z.a * Z.a, Zb2 = Z.b * Z.b;<br/>         for(i = 0; i &lt; nIterations; i++)<br/>         {<br/>            double z2;<br/>            Z = { Za2 - Zb2, 2*Z.a*Z.b };<br/>            Z.a += C.a;<br/>            Z.b += C.b;<br/>            Za2 = Z.a * Z.a, Zb2 = Z.b * Z.b;<br/>            z2 = Za2 + Zb2;<br/>\u00a0<br/>            if(z2 &gt;= 2*2)<br/>            {<br/>               ii = (double)(i + 1 - log(0.5 * log(z2)) / logOf2);<br/>               out = true;<br/>               break;<br/>            }<br/>         }<br/>         if(out)<br/>         {<br/>            float si = (float)(ii * scale);<br/>            int i0 = ((int)si)\u00a0% nPalEntries;<br/>            *picture = palette[i0];<br/>         }<br/>         else<br/>            *picture = black;<br/>      }<br/>   }<br/>}</pre>"}, {"lang": "EchoLisp", "loc": 13, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span> <span class=\"co1\">;; fractal function</span><br/><span class=\"br0\">(</span>lib 'plot<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; (fractal z zc n) iterates z\u00a0:= z^2 + c, n times</span><br/><span class=\"co1\">;; 100 iterations</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mset z<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> Infinity <span class=\"br0\">(</span>fractal <span class=\"nu0\">0</span> z <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Infinity z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; plot function argument inside square (-2 -2), (2,2)</span><br/><span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>z<span class=\"sy0\">-</span>arg mset <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; result here [http://www.echolalie.org/echolisp/help.html#fractal]</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 29, "block": "<pre class=\"text highlighted_source\">defmodule Mandelbrot do<br/>  def set do<br/>    xsize = 59<br/>    ysize = 21<br/>    minIm = -1.0<br/>    maxIm = 1.0<br/>    minRe = -2.0<br/>    maxRe = 1.0<br/>    stepX = (maxRe - minRe) / xsize<br/>    stepY = (maxIm - minIm) / ysize<br/>    Enum.each(0..ysize, fn y -&gt;<br/>      im = minIm + stepY * y<br/>      Enum.map(0..xsize, fn x -&gt;<br/>        re = minRe + stepX * x<br/>        62 - loop(0, re, im, re, im, re*re+im*im)<br/>      end) |&gt; IO.puts<br/>    end)<br/>  end<br/>\u00a0<br/>  defp loop(n, _, _, _, _, _) when n&gt;=30, do: n<br/>  defp loop(n, _, _, _, _, v) when v&gt;4.0, do: n-1<br/>  defp loop(n, re, im, zr, zi, _) do<br/>    a = zr * zr<br/>    b = zi * zi<br/>    loop(n+1, re, im, a-b+re, 2*zr*zi+im, a+b)<br/>  end<br/>end<br/>\u00a0<br/>Mandelbrot.set</pre>"}, {"lang": "Erlang", "loc": 52, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>mandelbrot<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>test<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">magnitude</span><span class=\"br0\">(</span><span class=\"re5\">Z</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">R</span> <span class=\"sy3\">=</span> complex:<span class=\"re3\">real</span><span class=\"br0\">(</span><span class=\"re5\">Z</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">I</span> <span class=\"sy3\">=</span> complex:<span class=\"re3\">imaginary</span><span class=\"br0\">(</span><span class=\"re5\">Z</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">R</span> <span class=\"sy3\">*</span> <span class=\"re5\">R</span> <span class=\"sy3\">+</span> <span class=\"re5\">I</span> <span class=\"sy3\">*</span> <span class=\"re5\">I</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">mandelbrot</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">MaxI</span><span class=\"sy1\">,</span> <span class=\"re5\">Z</span><span class=\"sy1\">,</span> <span class=\"re5\">I</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"re5\">I</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">MaxI</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"re3\">magnitude</span><span class=\"br0\">(</span><span class=\"re5\">Z</span><span class=\"br0\">)</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        true <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re5\">NZ</span> <span class=\"sy3\">=</span> complex:<span class=\"re3\">add</span><span class=\"br0\">(</span>complex:<span class=\"re3\">mult</span><span class=\"br0\">(</span><span class=\"re5\">Z</span><span class=\"sy1\">,</span> <span class=\"re5\">Z</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"re3\">mandelbrot</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">MaxI</span><span class=\"sy1\">,</span> <span class=\"re5\">NZ</span><span class=\"sy1\">,</span> <span class=\"re5\">I</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw1\">case</span> <span class=\"re5\">I</span> <span class=\"kw1\">of</span> <br/>                <span class=\"re5\">MaxI</span> <span class=\"sy1\">-&gt;</span><br/>                    $<span class=\"sy3\">*</span><span class=\"sy1\">;</span><br/>                <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span><br/>                    $ <br/>            <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><br/>        <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">S</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <br/>        <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><br/>                <span class=\"kw1\">begin</span> <br/>                    <span class=\"re5\">Z</span> <span class=\"sy3\">=</span> complex:<span class=\"re3\">make</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                    <span class=\"re3\">mandelbrot</span><span class=\"br0\">(</span><span class=\"re5\">Z</span><span class=\"sy1\">,</span> <span class=\"nu0\">50</span><span class=\"sy1\">,</span> <span class=\"re5\">Z</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span><br/>            <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">seq_float</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.5</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.0315</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>        <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">seq_float</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.05</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    ok<span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% **************************************************</span><br/><span class=\"co1\">% Copied from https://gist.github.com/andruby/241489</span><br/><span class=\"co1\">% **************************************************</span><br/>\u00a0<br/><span class=\"re3\">seq_float</span><span class=\"br0\">(</span><span class=\"re5\">Min</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Inc</span><span class=\"sy1\">,</span> <span class=\"re5\">Counter</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"re5\">Counter</span><span class=\"sy3\">*</span><span class=\"re5\">Inc</span> <span class=\"sy3\">+</span> <span class=\"re5\">Min</span><span class=\"br0\">)</span> <span class=\"sy3\">&gt;=</span> <span class=\"re5\">Max</span> <span class=\"sy1\">-&gt;</span> <br/>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">Max</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">seq_float</span><span class=\"br0\">(</span><span class=\"re5\">Min</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Inc</span><span class=\"sy1\">,</span> <span class=\"re5\">Counter</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re3\">seq_float</span><span class=\"br0\">(</span><span class=\"re5\">Min</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Inc</span><span class=\"sy1\">,</span> <span class=\"re5\">Counter</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Inc</span> <span class=\"sy3\">*</span> <span class=\"re5\">Counter</span> <span class=\"sy3\">+</span> <span class=\"re5\">Min</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">seq_float</span><span class=\"br0\">(</span><span class=\"re5\">Min</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Inc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re3\">seq_float</span><span class=\"br0\">(</span><span class=\"re5\">Min</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Inc</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% **************************************************</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM MANDELBROT<br/>\u00a0<br/>!$KEY<br/>!$INCLUDE=\"PC.LIB\"<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>SCREEN(7)<br/>GR_WINDOW(-2,1.5,2,-1.5)<br/>FOR X0=-2 TO 2 STEP 0.01 DO<br/>    FOR Y0=-1.5 TO 1.5 STEP 0.01 DO<br/>        X=0<br/>        Y=0<br/>\u00a0<br/>        ITERATION=0<br/>        MAX_ITERATION=223<br/>\u00a0<br/>        WHILE (X*X+Y*Y&lt;=(2*2) AND ITERATION&lt;MAX_ITERATION) DO<br/>            X_TEMP=X*X-Y*Y+X0<br/>            Y=2*X*Y+Y0<br/>\u00a0<br/>            X=X_TEMP<br/>\u00a0<br/>            ITERATION=ITERATION+1<br/>        END WHILE<br/>\u00a0<br/>        IF ITERATION&lt;&gt;MAX_ITERATION THEN<br/>            C=ITERATION<br/>          ELSE<br/>            C=0<br/>        END IF<br/>\u00a0<br/>        PSET(X0,Y0,C)<br/>    END FOR<br/>END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 60, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">Drawing</span> <br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Windows</span>.<span class=\"me1\">Forms</span><br/><span class=\"kw1\">type</span> Complex <span class=\"sy0\">=</span><br/>    <span class=\"br0\">{</span> <br/>        re\u00a0: float<span class=\"sy0\">;</span><br/>        im\u00a0: <span class=\"kw4\">float</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">let</span> cplus <span class=\"br0\">(</span>x:Complex<span class=\"br0\">)</span> <span class=\"br0\">(</span>y:Complex<span class=\"br0\">)</span>\u00a0: Complex <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">{</span><br/>        re <span class=\"sy0\">=</span> x.<span class=\"me1\">re</span> <span class=\"sy0\">+</span> y.<span class=\"me1\">re</span><span class=\"sy0\">;</span><br/>        im <span class=\"sy0\">=</span> x.<span class=\"me1\">im</span> <span class=\"sy0\">+</span> y.<span class=\"me1\">im</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">let</span> cmult <span class=\"br0\">(</span>x:Complex<span class=\"br0\">)</span> <span class=\"br0\">(</span>y:Complex<span class=\"br0\">)</span>\u00a0: Complex <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">{</span><br/>        re <span class=\"sy0\">=</span> x.<span class=\"me1\">re</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">re</span> <span class=\"sy0\">-</span> x.<span class=\"me1\">im</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">im</span><span class=\"sy0\">;</span><br/>        im <span class=\"sy0\">=</span> x.<span class=\"me1\">re</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">im</span> <span class=\"sy0\">+</span> x.<span class=\"me1\">im</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">re</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">let</span> norm <span class=\"br0\">(</span>x:Complex<span class=\"br0\">)</span>\u00a0: <span class=\"kw4\">float</span> <span class=\"sy0\">=</span><br/>    x.<span class=\"me1\">re</span><span class=\"sy0\">*</span>x.<span class=\"me1\">re</span> <span class=\"sy0\">+</span> x.<span class=\"me1\">im</span><span class=\"sy0\">*</span>x.<span class=\"me1\">im</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Mandel <span class=\"sy0\">=</span> <span class=\"kw1\">class</span><br/>    <span class=\"kw1\">inherit</span> Form<br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> xPixels <span class=\"sy0\">=</span> <span class=\"nu0\">500</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> yPixels <span class=\"sy0\">=</span> <span class=\"nu0\">500</span><br/>    <span class=\"kw1\">val</span> <span class=\"kw1\">mutable</span> bmp\u00a0: Bitmap<br/>    <span class=\"kw1\">member</span> x.<span class=\"me1\">mandelbrot</span> xMin xMax yMin yMax maxIter <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> mandelbrotIterator z c n <span class=\"sy0\">=</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>norm z<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2.0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">match</span> n <span class=\"kw1\">with</span><br/>                    | <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>                    | n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> z<span class=\"st0\">' = cplus ( cmult z z ) c in<br/>                            mandelbrotIterator z'</span> c <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> dx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xMax <span class=\"sy0\">-</span> xMin<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span> <span class=\"br0\">(</span>Mandel.<span class=\"me1\">xPixels</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> dy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>yMax <span class=\"sy0\">-</span> yMin<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span> <span class=\"br0\">(</span>Mandel.<span class=\"me1\">yPixels</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">for</span> xi <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> Mandel.<span class=\"me1\">xPixels</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">for</span> yi <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> Mandel.<span class=\"me1\">yPixels</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <span class=\"br0\">{</span>re <span class=\"sy0\">=</span> xMin <span class=\"sy0\">+</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">*</span> <span class=\"kw4\">float</span><span class=\"br0\">(</span>xi<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>                         im <span class=\"sy0\">=</span> yMin <span class=\"sy0\">+</span> <span class=\"br0\">(</span>dy <span class=\"sy0\">*</span> <span class=\"kw4\">float</span><span class=\"br0\">(</span>yi<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">in</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mandelbrotIterator <span class=\"br0\">{</span>re<span class=\"sy0\">=</span><span class=\"nu0\">0</span>.<span class=\"sy0\">;</span>im<span class=\"sy0\">=</span><span class=\"nu0\">0</span>.<span class=\"sy0\">;</span><span class=\"br0\">}</span> c maxIter<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                    x.<span class=\"me1\">bmp</span>.<span class=\"me1\">SetPixel</span><span class=\"br0\">(</span>xi,yi,Color.<span class=\"me1\">Azure</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">else</span><br/>                    x.<span class=\"me1\">bmp</span>.<span class=\"me1\">SetPixel</span><span class=\"br0\">(</span>xi,yi,Color.<span class=\"me1\">Black</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">done</span><br/>        <span class=\"kw1\">done</span><br/>\u00a0<br/>    <span class=\"kw1\">member</span> <span class=\"kw1\">public</span> x.<span class=\"me1\">generate</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x.<span class=\"me1\">mandelbrot</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span> <span class=\"nu0\">0.5</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"nu0\">1.0</span> <span class=\"nu0\">200</span> <span class=\"sy0\">;</span> x.<span class=\"me1\">Refresh</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> x <span class=\"sy0\">=</span> <span class=\"br0\">{</span>bmp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Bitmap<span class=\"br0\">(</span>Mandel.<span class=\"me1\">xPixels</span> , Mandel.<span class=\"me1\">yPixels</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>        x.<span class=\"me1\">Text</span> <span class=\"sy0\">&lt;-</span> <span class=\"st0\">\"Mandelbrot set\"</span> <span class=\"sy0\">;</span><br/>        x.<span class=\"me1\">Width</span> <span class=\"sy0\">&lt;-</span> Mandel.<span class=\"me1\">xPixels</span> <span class=\"sy0\">;</span><br/>        x.<span class=\"me1\">Height</span> <span class=\"sy0\">&lt;-</span> Mandel.<span class=\"me1\">yPixels</span> <span class=\"sy0\">;</span><br/>        x.<span class=\"me1\">BackgroundImage</span> <span class=\"sy0\">&lt;-</span> x.<span class=\"me1\">bmp</span><span class=\"sy0\">;</span><br/>        x.<span class=\"me1\">generate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        x.<span class=\"me1\">Show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">let</span> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Mandel<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">do</span> Application.<span class=\"me1\">Run</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>! with (\"::\") or without (\":\") generalizations:<br/>!\u00a0: [a..b] ( steps a b -- a..b ) 2dup swap - 4 nrot 1 - / &lt;range&gt;\u00a0;<br/>::  [a..b] ( steps a b -- a..b ) a b b a - steps 1 - / &lt;range&gt;\u00a0;<br/>\u00a0<br/>: &gt;char ( n -- c )<br/>    dup -1 = [ drop 32 ] [ 26 mod CHAR: a + ] if\u00a0;<br/>\u00a0<br/>! iterates z' = z^2 + c, Factor does complex numbers!<br/>: iter ( c z -- z' ) dup * +\u00a0;<br/>\u00a0<br/>: unbound ( c --\u00a0? ) absq 4 &gt;\u00a0;<br/>\u00a0<br/>:: mz ( c max i z -- n )<br/>  {<br/>    { [ i max &gt;= ] [ -1 ] }<br/>    { [ z unbound ] [ i ] }<br/>    [ c max i 1 + c z iter mz ]<br/>  } cond\u00a0;<br/>\u00a0<br/>: mandelzahl ( c max -- n ) 0 0 mz\u00a0;<br/>\u00a0<br/>:: mandel ( w h max -- )<br/>    h -1. 1. [a..b]\u00a0! range over y<br/>    [   w -2. 1. [a..b]\u00a0! range over x<br/>        [ dupd swap rect&gt; max mandelzahl &gt;char ] map<br/>        &gt;string print<br/>        drop\u00a0! old y<br/>    ] each<br/>   \u00a0;<br/>\u00a0<br/>70 25 1000 mandel<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 26, "block": "<pre class=\"text highlighted_source\">500 value max-iter<br/>\u00a0<br/>: mandel ( gmp  F: imin imax rmin rmax -- )<br/>  0e 0e { F: imin F: imax F: rmin F: rmax F: Zr F: Zi }<br/>  dup bheight 0 do<br/>    i s&gt;f dup bheight s&gt;f f/ imax imin f- f* imin f+ TO Zi<br/>    dup bwidth 0 do<br/>      i s&gt;f dup bwidth s&gt;f f/ rmax rmin f- f* rmin f+ TO Zr<br/>      Zr Zi max-iter<br/>      begin  1- dup<br/>      while  fover fdup f* fover fdup f*<br/>             fover fover f+ 4e f&lt;<br/>      while  f- Zr f+<br/>             frot frot f* 2e f* Zi f+<br/>      repeat fdrop fdrop<br/>             drop 0        \\ for a pretty grayscale image, replace with: 255 max-iter */<br/>      else   drop 255<br/>      then   fdrop fdrop<br/>      over i j rot g!<br/>    loop<br/>  loop    drop\u00a0;<br/>\u00a0<br/>80 24 graymap<br/>dup -1e 1e -2e 1e mandel<br/>dup gshow<br/>free bye</pre>"}, {"lang": "Fortran", "loc": 56, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> mandelbrot<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>  , <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">rk</span>       <span class=\"sy0\">=</span> <span class=\"kw4\">selected_real_kind</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"nu0\">99</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>  , <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">i_max</span>    <span class=\"sy0\">=</span>  <span class=\"nu0\">800</span><br/>  <span class=\"kw3\">integer</span>  , <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">j_max</span>    <span class=\"sy0\">=</span>  <span class=\"nu0\">600</span><br/>  <span class=\"kw3\">integer</span>  , <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">n_max</span>    <span class=\"sy0\">=</span>  <span class=\"nu0\">100</span><br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">x_centre</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">0.5</span>_rk<br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">y_centre</span> <span class=\"sy0\">=</span>  <span class=\"nu0\">0.0</span>_rk<br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">width</span>    <span class=\"sy0\">=</span>  <span class=\"nu0\">4.0</span>_rk<br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">height</span>   <span class=\"sy0\">=</span>  <span class=\"nu0\">3.0</span>_rk<br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">dx_di</span>    <span class=\"sy0\">=</span>   width <span class=\"sy0\">/</span> i_max<br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">dy_dj</span>    <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>height <span class=\"sy0\">/</span> j_max<br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">x_offset</span> <span class=\"sy0\">=</span> x_centre <span class=\"sy0\">-</span> <span class=\"nu0\">0.5</span>_rk <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i_max <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> dx_di<br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">y_offset</span> <span class=\"sy0\">=</span> y_centre <span class=\"sy0\">-</span> <span class=\"nu0\">0.5</span>_rk <span class=\"sy0\">*</span> <span class=\"br0\">(</span>j_max <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> dy_dj<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span>i_max, j_max<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">image</span><br/>  <span class=\"kw3\">integer</span>   <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">integer</span>   <span class=\"sy0\">::</span> <span class=\"me2\">j</span><br/>  <span class=\"kw3\">integer</span>   <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">y</span><br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x_0</span><br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">y_0</span><br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x_sqr</span><br/>  <span class=\"kw3\">real</span> <span class=\"br0\">(</span>rk<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">y_sqr</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, j_max<br/>    y_0 <span class=\"sy0\">=</span> y_offset <span class=\"sy0\">+</span> dy_dj <span class=\"sy0\">*</span> j<br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i_max<br/>      x_0 <span class=\"sy0\">=</span> x_offset <span class=\"sy0\">+</span> dx_di <span class=\"sy0\">*</span> i<br/>      x <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>_rk<br/>      y <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>_rk<br/>      n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">do</span><br/>        x_sqr <span class=\"sy0\">=</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><br/>        y_sqr <span class=\"sy0\">=</span> y <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x_sqr <span class=\"sy0\">+</span> y_sqr &gt; <span class=\"nu0\">4.0</span>_rk<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          image <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><br/>          <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> n_max<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          image <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>          <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        y <span class=\"sy0\">=</span> y_0 <span class=\"sy0\">+</span> <span class=\"nu0\">2.0</span>_rk <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> y<br/>        x <span class=\"sy0\">=</span> x_0 <span class=\"sy0\">+</span> x_sqr <span class=\"sy0\">-</span> y_sqr<br/>        n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  open  <span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"kw1\">file</span> <span class=\"sy0\">=</span> <span class=\"st0\">'out.pgm'</span><span class=\"br0\">)</span><br/>  write <span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"st0\">'(a/ i0, 1x, i0/ i0)'</span><span class=\"br0\">)</span> <span class=\"st0\">'P2'</span>, i_max, j_max, <span class=\"nu0\">255</span><br/>  write <span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"st0\">'(i0)'</span><span class=\"br0\">)</span> image<br/>  close <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> mandelbrot</pre>"}, {"lang": "Futhark", "loc": 42, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>default(f32)<br/>\u00a0<br/>type complex = (f32, f32)<br/>\u00a0<br/>fun dot(c: complex): f32 =<br/>  let (r, i) = c<br/>  in r * r + i * i<br/>\u00a0<br/>fun multComplex(x: complex, y: complex): complex =<br/>  let (a, b) = x<br/>  let (c, d) = y<br/>  in (a*c - b * d,<br/>      a*d + b * c)<br/>\u00a0<br/>fun addComplex(x: complex, y: complex): complex =<br/>  let (a, b) = x<br/>  let (c, d) = y<br/>  in (a + c,<br/>      b + d)<br/>\u00a0<br/>fun divergence(depth: int, c0: complex): int =<br/>  loop ((c, i) = (c0, 0)) = while i &lt; depth &amp;&amp; dot(c) &lt; 4.0 do<br/>    (addComplex(c0, multComplex(c, c)),<br/>     i + 1)<br/>  in i<br/>\u00a0<br/>fun mandelbrot(screenX: int, screenY: int, depth: int, view: (f32,f32,f32,f32)): [screenX][screenY]int =<br/>  let (xmin, ymin, xmax, ymax) = view<br/>  let sizex = xmax - xmin<br/>  let sizey = ymax - ymin<br/>  in map (fn (x: int): [screenY]int  =&gt;<br/>           map  (fn (y: int): int  =&gt;<br/>                  let c0 = (xmin + (f32(x) * sizex) / f32(screenX),<br/>                            ymin + (f32(y) * sizey) / f32(screenY))<br/>                  in divergence(depth, c0))<br/>                (iota screenY))<br/>         (iota screenX)<br/>\u00a0<br/>fun main(screenX: int, screenY: int, depth: int, xmin: f32, ymin: f32, xmax: f32, ymax: f32): [screenX][screenY]int =<br/>  mandelbrot(screenX, screenY, depth, (xmin, ymin, xmax, ymax))<br/>\u00a0</pre>"}, {"lang": "GLSL", "loc": 32, "block": "<pre class=\"glsl highlighted_source\"><span class=\"kw3\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw3\">vec2</span> uv <span class=\"sy0\">=</span> <span class=\"kw6\">gl_FragCoord</span><span class=\"sy0\">.</span><span class=\"me1\">xy</span> <span class=\"sy0\">/</span> iResolution<span class=\"sy0\">.</span><span class=\"me1\">xy</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">float</span> scale <span class=\"sy0\">=</span> iResolution<span class=\"sy0\">.</span><span class=\"me1\">y</span> <span class=\"sy0\">/</span> iResolution<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>\tuv<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>uv<span class=\"sy0\">-</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">5.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tuv<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">*=</span>scale<span class=\"sy0\">;</span><br/>\tuv<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">+=</span><span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\tuv<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">-=</span><span class=\"nu0\">0.5</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t<span class=\"kw3\">vec2</span> z <span class=\"sy0\">=</span> <span class=\"kw3\">vec2</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">vec3</span> c <span class=\"sy0\">=</span> <span class=\"kw3\">vec3</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">float</span> v<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">170</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>z<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">*</span>z<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">+</span>z<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">*</span>z<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">4.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\tz <span class=\"sy0\">=</span> <span class=\"kw3\">vec2</span><span class=\"br0\">(</span>z<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">*</span>z<span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">-</span> z<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">*</span>z<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">*</span>z<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">*</span>z<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> uv<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>z<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">*</span>z<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">+</span>z<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">*</span>z<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tc<span class=\"sy0\">.</span><span class=\"me1\">b</span><span class=\"sy0\">=</span><span class=\"kw3\">float</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">20.0</span><span class=\"sy0\">;</span><br/>\t\t\tc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">=</span><span class=\"kw5\">sin</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">float</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\t<span class=\"kw6\">gl_FragColor</span> <span class=\"sy0\">=</span> <span class=\"kw3\">vec4</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "gnuplot", "loc": 2, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+terminal%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">terminal</span></a> <span class=\"kw5\">png</span><br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+output%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">output</span></a> <span class=\"st0\">'mandelbrot.png'</span></pre>"}, {"lang": "Go", "loc": 24, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/><span class=\"kw1\">import</span> <span class=\"st0\">\"math/cmplx\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> mandelbrot<span class=\"sy1\">(</span>a <span class=\"kw4\">complex128</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>z <span class=\"kw4\">complex128</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">50</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        z <span class=\"sy2\">=</span> z<span class=\"sy3\">*</span>z <span class=\"sy3\">+</span> a<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span> y &gt;<span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span> y <span class=\"sy2\">-=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">05</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">5</span><span class=\"sy1\">;</span> x <span class=\"sy2\">+=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">0315</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">cmplx</span><span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span>mandelbrot<span class=\"sy1\">(</span><span class=\"kw4\">complex</span><span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">)))</span> &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Complex<br/>\u00a0<br/>mandelbrot a <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>\\z <span class=\"sy0\">-&gt;</span> z<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> a<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!!</span> <span class=\"nu0\">50</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw1\">if</span> magnitude <span class=\"br0\">(</span>mandelbrot <span class=\"br0\">(</span>x\u00a0:<span class=\"sy0\">+</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"st0\">'*'</span> <span class=\"kw1\">else</span> <span class=\"st0\">' '</span><br/>                           <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.9685</span> <span class=\"sy0\">..</span> <span class=\"nu0\">0.5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                       <span class=\"sy0\">|</span> y <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.95</span> <span class=\"sy0\">..</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Haxe", "loc": 1, "block": "<pre class=\"text highlighted_source\">haxe -swf mandelbrot.swf -main Mandelbrot</pre>"}, {"lang": "Huginn", "loc": 69, "block": "<pre class=\"text highlighted_source\">#! /bin/sh<br/>exec huginn -E \"${0}\" \"${@}\"<br/>#! huginn<br/>\u00a0<br/>import Algorithms as algo;<br/>import Mathematics as math;<br/>import OperatingSystem as os;<br/>\u00a0<br/>mandelbrot( x, y ) {<br/>  c = math.Complex( x, y );<br/>  z = math.Complex( 0., 0. );<br/>  s = -1;<br/>  for ( i\u00a0: algo.range( 50 ) ) {<br/>    z = z * z + c;<br/>    if ( | z | &gt; 2. ) {<br/>      s = i;<br/>      break;<br/>    }<br/>  }<br/>  return ( s );<br/>}<br/>\u00a0<br/>main( argv_ ) {<br/>  imgSize = term_size( argv_ );<br/>  yRad = 1.2;<br/>  yScale = 2. * yRad / real( imgSize[0] );<br/>  xScale = 3.3 / real( imgSize[1] );<br/>  glyphTab = [ \".\", \":\", \"-\", \"+\", \"+\" ].resize( 12, \"*\" ).resize( 26, \"%\" ).resize( 50, \"@\" ).push( \" \" );<br/>  for ( y\u00a0: algo.range( imgSize[0] ) ) {<br/>    line = \"\";<br/>    for ( x\u00a0: algo.range( imgSize[1] ) ) {<br/>      line += glyphTab[ mandelbrot( xScale * real( x ) - 2.3, yScale * real( y ) - yRad ) ];<br/>    }<br/>    print( line + \"\\n\" );<br/>  }<br/>  return ( 0 );<br/>}<br/>\u00a0<br/>term_size( argv_ ) {<br/>  lines = 25;<br/>  columns = 80;<br/>  if ( size( argv_ ) == 3 ) {<br/>    lines = integer( argv_[1] );<br/>    columns = integer( argv_[2] );<br/>  } else {<br/>    envLines = os.env( \"LINES\" );<br/>    envColumns = os.env( \"COLUMNS\" );<br/>    if ( ( envLines\u00a0!= none ) &amp;&amp; ( envColumns\u00a0!= none ) ) {<br/>      lines = integer( envLines );<br/>      columns = integer( envColumns );<br/>    } else {<br/>      lines = integer( invoke( ( \"/usr/bin/tput\", \"lines\" ) ) ) - 1;<br/>      columns = integer( invoke( ( \"/usr/bin/tput\", \"cols\" ) ) ) - 1;<br/>    }<br/>  }<br/>  lines -= 1;<br/>  columns -= 1;<br/>  return ( ( lines, columns ) );<br/>}<br/>\u00a0<br/>invoke( cmd_ ) {<br/>  p = os.spawn( cmd_... );<br/>  res = \"\";<br/>  out = p.out();<br/>  while ( ( line = out.read_line() )\u00a0!= none ) {<br/>    res += line;<br/>  }<br/>  return ( res );<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 46, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> graphics<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    width <span class=\"sy1\">:=</span> <span class=\"nu0\">750</span><br/>    height <span class=\"sy1\">:=</span> <span class=\"nu0\">600</span><br/>    limit <span class=\"sy1\">:=</span> <span class=\"nu0\">100</span><br/>    WOpen<span class=\"br0\">(</span><span class=\"st0\">\"size=\"</span><span class=\"sy1\">||</span>width<span class=\"sy1\">||</span><span class=\"st0\">\",\"</span><span class=\"sy1\">||</span>height<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> x<span class=\"sy1\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"sy1\">&amp;</span> y<span class=\"sy1\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> height <span class=\"kw1\">do</span><br/>    <span class=\"br0\">{</span><br/>        z<span class=\"sy1\">:=</span>complex<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        c<span class=\"sy1\">:=</span>complex<span class=\"br0\">(</span><span class=\"nu0\">2.5</span><span class=\"sy1\">*</span>x<span class=\"sy1\">/</span>width<span class=\"sy1\">-</span><span class=\"nu0\">2.0</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"sy1\">*</span>y<span class=\"sy1\">/</span>height<span class=\"sy1\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        j<span class=\"sy1\">:=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">while</span> j<span class=\"sy1\">&lt;</span>limit <span class=\"sy1\">&amp;</span> cAbs<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy1\">&lt;</span><span class=\"nu0\">2.0</span> <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span><br/>           z <span class=\"sy1\">:=</span> cAdd<span class=\"br0\">(</span>cMul<span class=\"br0\">(</span>z<span class=\"sy1\">,</span>z<span class=\"br0\">)</span><span class=\"sy1\">,</span>c<span class=\"br0\">)</span><br/>           j<span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw5\">Fg</span><span class=\"br0\">(</span>mColor<span class=\"br0\">(</span>j<span class=\"sy1\">,</span>limit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw5\">DrawPoint</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">WriteImage</span><span class=\"br0\">(</span><span class=\"st0\">\"./mandelbrot.gif\"</span><span class=\"br0\">)</span><br/>    WDone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mColor<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>limit<span class=\"br0\">)</span><br/>   max_color <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">^</span><span class=\"nu0\">16</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>   color <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>max_color<span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">/</span>limit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> x<span class=\"sy1\">=</span>limit<br/>          <span class=\"kw1\">then</span> <span class=\"st0\">\"black\"</span><br/>          <span class=\"kw1\">else</span> color<span class=\"sy1\">||</span><span class=\"st0\">\",\"</span><span class=\"sy1\">||</span>color<span class=\"sy1\">||</span><span class=\"st0\">\",0\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">record</span> complex<span class=\"br0\">(</span>r<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cAdd<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> complex<span class=\"br0\">(</span>x<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"sy1\">+</span>y<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"sy1\">,</span>x<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"sy1\">+</span>y<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cMul<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> complex<span class=\"br0\">(</span>x<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"sy1\">*</span>y<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"sy1\">-</span>x<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"sy1\">*</span>y<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"sy1\">,</span>x<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"sy1\">*</span>y<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"sy1\">+</span>x<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"sy1\">*</span>y<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cAbs<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>x<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"sy1\">*</span>x<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"sy1\">+</span>x<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"sy1\">*</span>x<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 48, "block": "<pre class=\"idl highlighted_source\">\u00a0<br/>PRO Mandelbrot,xRange,yRange,xPixels,yPixels,iterations<br/>\u00a0<br/>xPixelstartVec <span class=\"sy0\">=</span> Lindgen<span class=\"br0\">(</span> xPixels<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Float<span class=\"br0\">(</span>xRange<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>xRange<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> $<br/>                 xPixels <span class=\"sy0\">+</span> xRange<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>yPixelstartVec <span class=\"sy0\">=</span> Lindgen<span class=\"br0\">(</span> yPixels<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Float<span class=\"br0\">(</span>YRANGE<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>yrange<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>$<br/>                 <span class=\"sy0\">/</span> yPixels <span class=\"sy0\">+</span> yRange<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/>constArr <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span> Rebin<span class=\"br0\">(</span> xPixelstartVec, xPixels, yPixels<span class=\"br0\">)</span>,$<br/>                     Rebin<span class=\"br0\">(</span> Transpose<span class=\"br0\">(</span>yPixelstartVec<span class=\"br0\">)</span>, xPixels, yPixels<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>valArr <span class=\"sy0\">=</span> ComplexArr<span class=\"br0\">(</span> xPixels, yPixels<span class=\"br0\">)</span><br/>\u00a0<br/>res <span class=\"sy0\">=</span> IntArr<span class=\"br0\">(</span> xPixels, yPixels<span class=\"br0\">)</span><br/>\u00a0<br/>oriIndex <span class=\"sy0\">=</span> Lindgen<span class=\"br0\">(</span> Long<span class=\"br0\">(</span>xPixels<span class=\"br0\">)</span> <span class=\"sy0\">*</span> yPixels<span class=\"br0\">)</span><br/>\u00a0<br/>FOR i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, iterations<span class=\"sy0\">-</span><span class=\"nu0\">1</span> DO BEGIN <span class=\"sy0\">;</span> only one loop needed<br/>\u00a0<br/>    <span class=\"sy0\">;</span> calculation for whole array at once<br/>    valArr <span class=\"sy0\">=</span> valArr<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> constArr<br/>\u00a0<br/>    whereIn <span class=\"sy0\">=</span> Where<span class=\"br0\">(</span> Abs<span class=\"br0\">(</span> valArr<span class=\"br0\">)</span> LE 4.0d, COMPLEMENT<span class=\"sy0\">=</span>whereOut<span class=\"br0\">)</span><br/>\u00a0<br/>    IF whereIn<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> EQ <span class=\"sy0\">-</span><span class=\"nu0\">1</span> THEN BREAK<br/>\u00a0<br/>    valArr <span class=\"sy0\">=</span> valArr<span class=\"br0\">[</span> whereIn<span class=\"br0\">]</span><br/>\u00a0<br/>    constArr <span class=\"sy0\">=</span> constArr<span class=\"br0\">[</span> whereIn<span class=\"br0\">]</span><br/>\u00a0<br/>    IF whereOut<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> NE <span class=\"sy0\">-</span><span class=\"nu0\">1</span> THEN BEGIN<br/>\u00a0<br/>        res<span class=\"br0\">[</span> oriIndex<span class=\"br0\">[</span> whereOut<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\u00a0<br/>        oriIndex <span class=\"sy0\">=</span> oriIndex<span class=\"br0\">[</span> whereIn<span class=\"br0\">]</span><br/>    ENDIF<br/>ENDFOR<br/>\u00a0<br/>tv,res <span class=\"sy0\">;</span> open a window and show the result<br/>\u00a0<br/>END<br/>\u00a0<br/>\u00a0<br/>Mandelbrot,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>.,<span class=\"nu0\">2.3</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1.3</span>,<span class=\"nu0\">1.3</span><span class=\"br0\">]</span>,<span class=\"nu0\">640</span>,<span class=\"nu0\">512</span>,<span class=\"nu0\">200</span><br/>\u00a0<br/>END<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Inform 7", "loc": 186, "block": "<pre class=\"text highlighted_source\">\"Mandelbrot\"<br/>\u00a0<br/>The story headline is \"A Non-Interactive Set\".<br/>\u00a0<br/>Include Glimmr Drawing Commands by Erik Temple.<br/>\u00a0<br/>[Q20 fixed-point or floating-point: see definitions below]<br/>Use floating-point math.<br/>\u00a0<br/>Finished is a room.<br/>\u00a0<br/>The graphics-window is a graphics g-window spawned by the main-window.<br/>The position is g-placeabove.<br/>\u00a0<br/>When play begins:<br/>\tlet f10 be 10 as float;<br/>\tnow min re is ( -20 as float ) fdiv f10;<br/>\tnow max re is ( 6 as float ) fdiv f10;<br/>\tnow min im is ( -12 as float ) fdiv f10;<br/>\tnow max im is ( 12 as float ) fdiv f10;<br/>\tnow max iterations is 100;<br/>\tadd color g-Black to the palette;<br/>\tadd color g-Red to the palette;<br/>\tadd hex \"#FFA500\" to the palette;<br/>\tadd color g-Yellow to the palette;<br/>\tadd color g-Green to the palette;<br/>\tadd color g-Blue to the palette;<br/>\tadd hex \"#4B0082\" to the palette;<br/>\tadd hex \"#EE82EE\" to the palette;<br/>\topen up the graphics-window.<br/>\u00a0<br/>Min Re is a number that varies.<br/>Max Re is a number that varies.<br/>Min Im is a number that varies.<br/>Max Im is a number that varies.<br/>\u00a0<br/>Max Iterations is a number that varies.<br/>\u00a0<br/>Min X is a number that varies.<br/>Max X is a number that varies.<br/>Min Y is a number that varies.<br/>Max Y is a number that varies.<br/>\u00a0<br/>The palette is a list of numbers that varies.<br/>\u00a0<br/>[vertically mirrored version]<br/>Window-drawing rule for the graphics-window when max im is fneg min im:<br/>\tclear the graphics-window;<br/>\tlet point be { 0, 0 };<br/>\tnow min X is 0 as float;<br/>\tnow min Y is 0 as float;<br/>\tlet mX be the width of the graphics-window minus 1;<br/>\tlet mY be the height of the graphics-window minus 1;<br/>\tnow max X is mX as float;<br/>\tnow max Y is mY as float;<br/>\tlet L be the column order with max mX;<br/>\trepeat with X running through L:<br/>\t\tnow entry 1 in point is X;<br/>\t\trepeat with Y running from 0 to mY / 2:<br/>\t\t\tnow entry 2 in point is Y;<br/>\t\t\tlet the scaled point be the complex number corresponding to the point;<br/>\t\t\tlet V be the Mandelbrot result for the scaled point;<br/>\t\t\tlet C be the color corresponding to V;<br/>\t\t\tif C is 0, next;<br/>\t\t\tdraw a rectangle (C) in the graphics-window at the point with size 1 by 1;<br/>\t\t\tnow entry 2 in point is mY - Y;<br/>\t\t\tdraw a rectangle (C) in the graphics-window at the point with size 1 by 1;<br/>\t\tyield to VM;<br/>\trule succeeds.<br/>\u00a0<br/>[slower non-mirrored version]<br/>Window-drawing rule for the graphics-window:<br/>\tclear the graphics-window;<br/>\tlet point be { 0, 0 };<br/>\tnow min X is 0 as float;<br/>\tnow min Y is 0 as float;<br/>\tlet mX be the width of the graphics-window minus 1;<br/>\tlet mY be the height of the graphics-window minus 1;<br/>\tnow max X is mX as float;<br/>\tnow max Y is mY as float;<br/>\tlet L be the column order with max mX;<br/>\trepeat with X running through L:<br/>\t\tnow entry 1 in point is X;<br/>\t\trepeat with Y running from 0 to mY:<br/>\t\t\tnow entry 2 in point is Y;<br/>\t\t\tlet the scaled point be the complex number corresponding to the point;<br/>\t\t\tlet V be the Mandelbrot result for the scaled point;<br/>\t\t\tlet C be the color corresponding to V;<br/>\t\t\tif C is 0, next;<br/>\t\t\tdraw a rectangle (C) in the graphics-window at the point with size 1 by 1;<br/>\t\tyield to VM;<br/>\trule succeeds.<br/>\u00a0<br/>To decide which list of numbers is column order with max (N - number):<br/>\tlet L be a list of numbers;<br/>\tlet L2 be a list of numbers;<br/>\tlet D be 64;<br/>\tlet rev be false;<br/>\twhile D &gt; 0:<br/>\t\tlet X be 0;<br/>\t\ttruncate L2 to 0 entries;<br/>\t\twhile X &lt;= N:<br/>\t\t\tif D is 64 or X / D is odd, add X to L2;<br/>\t\t\tincrease X by D;<br/>\t\tif rev is true:<br/>\t\t\treverse L2;<br/>\t\t\tlet rev be false;<br/>\t\totherwise:<br/>\t\t\tlet rev be true;<br/>\t\tadd L2 to L;<br/>\t\tlet D be D / 2;<br/>\tdecide on L.<br/>\u00a0<br/>To decide which list of numbers is complex number corresponding to (P - list of numbers):<br/>\tlet R be a list of numbers;<br/>\textend R to 2 entries;<br/>\tlet X be entry 1 in P as float;<br/>\tlet X be (max re fsub min re) fmul (X fdiv max X);<br/>\tlet X be X fadd min re;<br/>\tlet Y be entry 2 in P as float;<br/>\tlet Y be (max im fsub min im) fmul (Y fdiv max Y);<br/>\tlet Y be Y fadd min im;<br/>\tnow entry 1 in R is X;<br/>\tnow entry 2 in R is Y;<br/>\tdecide on R.<br/>\u00a0<br/>To decide which number is Mandelbrot result for (P - list of numbers):<br/>\tlet c_re be entry 1 in P;<br/>\tlet c_im be entry 2 in P;<br/>\tlet z_re be 0 as float;<br/>\tlet z_im be z_re;<br/>\tlet threshold be 4 as float;<br/>\tlet runs be 0;<br/>\twhile 1 is 1:<br/>\t\t[ z = z * z ]<br/>\t\tlet r2 be z_re fmul z_re;<br/>\t\tlet i2 be z_im fmul z_im;<br/>\t\tlet ri be z_re fmul z_im;<br/>\t\tlet z_re be r2 fsub i2;<br/>\t\tlet z_im be ri fadd ri;<br/>\t\t[ z = z + c ]<br/>\t\tlet z_re be z_re fadd c_re;<br/>\t\tlet z_im be z_im fadd c_im;<br/>\t\tlet norm be (z_re fmul z_re) fadd (z_im fmul z_im);<br/>\t\tincrease runs by 1;<br/>\t\tif norm is greater than threshold, decide on runs;<br/>\t\tif runs is max iterations, decide on 0.<br/>\u00a0<br/>To decide which number is color corresponding to (V - number):<br/>\tlet L be the number of entries in the palette;<br/>\tlet N be the remainder after dividing V by L;<br/>\tdecide on entry (N + 1) in the palette.<br/>\u00a0<br/>Section - Fractional numbers (for Glulx only)<br/>\u00a0<br/>To decide which number is (N - number) as float: (- (numtof({N})) -).<br/>To decide which number is (N - number) fadd (M - number): (- (fadd({N}, {M})) -).<br/>To decide which number is (N - number) fsub (M - number): (- (fsub({N}, {M})) -).<br/>To decide which number is (N - number) fmul (M - number): (- (fmul({N}, {M})) -).<br/>To decide which number is (N - number) fdiv (M - number): (- (fdiv({N}, {M})) -).<br/>To decide which number is fneg (N - number): (- (fneg({N})) -).<br/>To yield to VM: (- glk_select_poll(gg_event); -).<br/>\u00a0<br/>Use Q20 fixed-point math translates as (- Constant Q20_MATH; -).<br/>Use floating-point math translates as (- Constant FLOAT_MATH; -).<br/>\u00a0<br/>Include (-<br/>#ifdef Q20_MATH;<br/>! Q11.20 format: 1 sign bit, 11 integer bits, 20 fraction bits<br/>[ numtof n r; @shiftl n 20 r; return r; ];<br/>[ fadd n m; return n+m; ];<br/>[ fsub n m; return n-m; ];<br/>[ fmul n m; n = n + $$1000000000; @sshiftr n 10 n; m = m + $$1000000000; @sshiftr m 10 m; return n * m; ]; <br/>[ fdiv n m; @sshiftr m 20 m; return n / m; ];<br/>[ fneg n; return -n; ];<br/>#endif;<br/>\u00a0<br/>#ifdef FLOAT_MATH;<br/>[ numtof f; @\"S2:400\" f f; return f; ];<br/>[ fadd n m; @\"S3:416\" n m n; return n; ];<br/>[ fsub n m; @\"S3:417\" n m n; return n; ];<br/>[ fmul n m; @\"S3:418\" n m n; return n; ];<br/>[ fdiv n m; @\"S3:419\" n m n; return n; ];<br/>[ fneg n; @bitxor n $80000000 n; return n; ];<br/>#endif;<br/>-).</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">mcf=. <span class=\"sy0\">(</span>&lt;: 2:<span class=\"sy0\">)</span>@|@<span class=\"sy0\">(</span>] <span class=\"sy0\">((</span>*:@] + [<span class=\"sy0\">)</span>^:<span class=\"sy0\">((</span>&lt;: 2:<span class=\"sy0\">)</span>@|@]<span class=\"sy0\">)</span>^:<span class=\"nu0\">1000</span><span class=\"sy0\">)</span> 0:<span class=\"sy0\">)</span> <span class=\"co1\">NB. 1000 iterations test</span></pre>"}, {"lang": "Java", "loc": 43, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Graphics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.image.BufferedImage</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.JFrame</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Mandelbrot <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> MAX_ITER <span class=\"sy0\">=</span> <span class=\"nu0\">570</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> ZOOM <span class=\"sy0\">=</span> <span class=\"nu0\">150</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a> I<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">double</span> zx, zy, cX, cY, tmp<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Mandelbrot<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span><span class=\"br0\">(</span><span class=\"st0\">\"Mandelbrot Set\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBounds<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">800</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setResizable<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setDefaultCloseOperation<span class=\"br0\">(</span>EXIT_ON_CLOSE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        I <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a><span class=\"br0\">(</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span>, getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a>.<span class=\"me1\">TYPE_INT_RGB</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                zx <span class=\"sy0\">=</span> zy <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                cX <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> ZOOM<span class=\"sy0\">;</span><br/>                cY <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">-</span> <span class=\"nu0\">300</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> ZOOM<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> iter <span class=\"sy0\">=</span> MAX_ITER<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>zx <span class=\"sy0\">*</span> zx <span class=\"sy0\">+</span> zy <span class=\"sy0\">*</span> zy <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> iter <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    tmp <span class=\"sy0\">=</span> zx <span class=\"sy0\">*</span> zx <span class=\"sy0\">-</span> zy <span class=\"sy0\">*</span> zy <span class=\"sy0\">+</span> cX<span class=\"sy0\">;</span><br/>                    zy <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> zx <span class=\"sy0\">*</span> zy <span class=\"sy0\">+</span> cY<span class=\"sy0\">;</span><br/>                    zx <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>                    iter<span class=\"sy0\">--;</span><br/>                <span class=\"br0\">}</span><br/>                I.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>x, y, iter <span class=\"sy0\">|</span> <span class=\"br0\">(</span>iter <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paint<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">drawImage</span><span class=\"br0\">(</span>I, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">new</span> Mandelbrot<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 69, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> mandelIter<span class=\"br0\">(</span>cx<span class=\"sy0\">,</span> cy<span class=\"sy0\">,</span> maxIter<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> xx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> yy <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> xy <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> maxIter<span class=\"sy0\">;</span><br/>  while <span class=\"br0\">(</span>i<span class=\"sy0\">--</span> <span class=\"sy0\">&amp;&amp;</span> xx <span class=\"sy0\">+</span> yy <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    xy <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y<span class=\"sy0\">;</span><br/>    xx <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x<span class=\"sy0\">;</span><br/>    yy <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> y<span class=\"sy0\">;</span><br/>    x <span class=\"sy0\">=</span> xx <span class=\"sy0\">-</span> yy <span class=\"sy0\">+</span> cx<span class=\"sy0\">;</span><br/>    y <span class=\"sy0\">=</span> xy <span class=\"sy0\">+</span> xy <span class=\"sy0\">+</span> cy<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> maxIter <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> mandelbrot<span class=\"br0\">(</span>canvas<span class=\"sy0\">,</span> xmin<span class=\"sy0\">,</span> xmax<span class=\"sy0\">,</span> ymin<span class=\"sy0\">,</span> ymax<span class=\"sy0\">,</span> iterations<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> width <span class=\"sy0\">=</span> canvas.<span class=\"me1\">width</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> height <span class=\"sy0\">=</span> canvas.<span class=\"me1\">height</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">var</span> ctx <span class=\"sy0\">=</span> canvas.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> img <span class=\"sy0\">=</span> ctx.<span class=\"me1\">getImageData</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> width<span class=\"sy0\">,</span> height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> pix <span class=\"sy0\">=</span> img.<span class=\"me1\">data</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> ix <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ix <span class=\"sy0\">&lt;</span> width<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>ix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> iy <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> iy <span class=\"sy0\">&lt;</span> height<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>iy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> xmin <span class=\"sy0\">+</span> <span class=\"br0\">(</span>xmax <span class=\"sy0\">-</span> xmin<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ix <span class=\"sy0\">/</span> <span class=\"br0\">(</span>width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> ymin <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ymax <span class=\"sy0\">-</span> ymin<span class=\"br0\">)</span> <span class=\"sy0\">*</span> iy <span class=\"sy0\">/</span> <span class=\"br0\">(</span>height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> mandelIter<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> iterations<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">var</span> ppos <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>width <span class=\"sy0\">*</span> iy <span class=\"sy0\">+</span> ix<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> iterations<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        pix<span class=\"br0\">[</span>ppos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>iterations <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          pix<span class=\"br0\">[</span>ppos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span> <span class=\"sy0\">*</span> c<span class=\"sy0\">;</span><br/>          pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>          pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          pix<span class=\"br0\">[</span>ppos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>          pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>          pix<span class=\"br0\">[</span>ppos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>          pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>          pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      pix<span class=\"br0\">[</span>ppos <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  ctx.<span class=\"me1\">putImageData</span><span class=\"br0\">(</span>img<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> canvas <span class=\"sy0\">=</span> document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span><span class=\"st0\">'canvas'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>canvas.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> <span class=\"nu0\">900</span><span class=\"sy0\">;</span><br/>canvas.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">600</span><span class=\"sy0\">;</span><br/>\u00a0<br/>document.<span class=\"me1\">body</span>.<span class=\"me1\">insertBefore</span><span class=\"br0\">(</span>canvas<span class=\"sy0\">,</span> document.<span class=\"me1\">body</span>.<span class=\"me1\">childNodes</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>mandelbrot<span class=\"br0\">(</span>canvas<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 15, "block": "<pre class=\"text highlighted_source\"># SVG STUFF<br/>  def svg(id; width; height): <br/>    \"&lt;svg width='\\(width // \"100%\")' height='\\(height // \"100%\") '<br/>        id='\\(id)'<br/>        xmlns='http://www.w3.org/2000/svg'&gt;\";<br/>\u00a0<br/>  def pixel(x;y;r;g;b;a):<br/>    \"&lt;circle cx='\\(x)' cy='\\(y)' r='1' fill='rgb(\\(r|floor),\\(g|floor),\\(b|floor))' /&gt;\";<br/>\u00a0<br/># \"UNTIL\"<br/>  # As soon as \"condition\" is true, then emit . and stop:<br/>  def do_until(condition; next):<br/>    def u: if condition then . else (next|u) end;<br/>    u;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 14, "block": "<pre class=\"python highlighted_source\">function mandelbrot<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    z <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>:<span class=\"nu0\">50</span><br/>        z <span class=\"sy0\">=</span> z^<span class=\"nu0\">2</span> + a<br/>    end<br/>    <span class=\"kw1\">return</span> z<br/>end<br/>\u00a0<br/><span class=\"kw1\">for</span> y<span class=\"sy0\">=</span><span class=\"nu0\">1.0</span>:-<span class=\"nu0\">0.05</span>:-<span class=\"nu0\">1.0</span><br/>    <span class=\"kw1\">for</span> x<span class=\"sy0\">=</span>-<span class=\"nu0\">2.0</span>:<span class=\"nu0\">0.0315</span>:<span class=\"nu0\">0.5</span><br/>        <span class=\"kw2\">abs</span><span class=\"br0\">(</span>mandelbrot<span class=\"br0\">(</span><span class=\"kw2\">complex</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    end<br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>end</pre>"}, {"lang": "Kotlin", "loc": 45, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Graphics</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">image</span>.<span class=\"me1\">BufferedImage</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JFrame</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Mandelbrot<span class=\"sy0\">:</span> JFrame<span class=\"br0\">(</span><span class=\"st0\">\"Mandelbrot Set\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> MAX<span class=\"sy0\">_</span>ITER <span class=\"sy0\">=</span> <span class=\"nu0\">570</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ZOOM <span class=\"sy0\">=</span> <span class=\"nu0\">150.0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> img<span class=\"sy0\">:</span> BufferedImage<br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        setBounds<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">800</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span><br/>        isResizable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        defaultCloseOperation <span class=\"sy0\">=</span> EXIT<span class=\"sy0\">_</span>ON<span class=\"sy0\">_</span>CLOSE<br/>        img <span class=\"sy0\">=</span> BufferedImage<span class=\"br0\">(</span>width, height, BufferedImage.<span class=\"me1\">TYPE_INT_RGB</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span> until height<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> zx <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> zy <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cX <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x - <span class=\"nu0\">400</span><span class=\"br0\">)</span> / ZOOM<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cY <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y - <span class=\"nu0\">300</span><span class=\"br0\">)</span> / ZOOM<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> iter <span class=\"sy0\">=</span> MAX<span class=\"sy0\">_</span>ITER<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>zx <span class=\"sy0\">*</span> zx + zy <span class=\"sy0\">*</span> zy <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4.0</span> <span class=\"sy0\">&amp;&amp;</span> iter <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> zx <span class=\"sy0\">*</span> zx - zy <span class=\"sy0\">*</span> zy + cX<br/>                    zy <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> zx <span class=\"sy0\">*</span> zy + cY<br/>                    zx <span class=\"sy0\">=</span> tmp<br/>                    iter--<br/>                <span class=\"br0\">}</span><br/>                img.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>x, y, iter or <span class=\"br0\">(</span>iter shl <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paint<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">drawImage</span><span class=\"br0\">(</span>img, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Mandelbrot<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">isVisible</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: d2c(*,*) 2 compress 'c dress\u00a0;        # Make a complex number.<br/>\u00a0<br/>: iterate(c) [0 0](c) \"dup * over +\" steps reshape execute\u00a0;<br/>\u00a0<br/>: print_line(*) \"#*+-. \" \"\" split swap subscript \"\" join . \"\\n\" .\u00a0;<br/>\u00a0<br/>75 iota 45 - 20 /                       # x coordinates<br/>29 iota 14 - 10 /                       # y cordinates<br/>'d2c outer                              # Make complex matrix.<br/>\u00a0<br/>10 'steps set                           # How many iterations?<br/>\u00a0<br/>iterate abs int 5 min 'print_line apply # Compute &amp; print <br/>\u00a0</pre>"}, {"lang": "Lang5", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: d2c(*,*) 2 compress 'c dress\u00a0;        # Make a complex number.<br/>\u00a0<br/>: iterate(c) [0 0](c) \"dup * over +\" steps reshape execute\u00a0;<br/>\u00a0<br/>: print_line(*) \"#*+-. \" \"\" split swap subscript \"\" join . \"\\n\" .\u00a0;<br/>\u00a0<br/>75 iota 45 - 20 /                       # x coordinates<br/>29 iota 14 - 10 /                       # y cordinates<br/>'d2c outer                              # Make complex matrix.<br/>\u00a0<br/>10 'steps set                           # How many iterations?<br/>\u00a0<br/>iterate abs int 5 min 'print_line apply # Compute &amp; print <br/>\u00a0</pre>"}, {"lang": "Lasso", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>define mandelbrotBailout =&gt; 16<br/>define mandelbrotMaxIterations =&gt; 1000<br/>\u00a0<br/>define mandelbrotIterate(x, y) =&gt; {<br/>\tlocal(cr = #y - 0.5,<br/>\t\tci = #x, <br/>\t\tzi = 0.0, <br/>\t\tzr = 0.0, <br/>\t\ti = 0, <br/>\t\ttemp, zr2, zi2)<br/>\u00a0<br/>\t{<br/>\t\t++#i;<br/>\t\t#temp = #zr * #zi<br/>\t\t#zr2 = #zr * #zr<br/>\t\t#zi2 = #zi * #zi<br/>\u00a0<br/>\t\t#zi2 + #zr2 &gt; mandelbrotBailout?<br/>\t\t\treturn #i<br/>\t\t#i &gt; mandelbrotMaxIterations?<br/>\t\t\treturn 0<br/>\u00a0<br/>\t\t#zr = #zr2 - #zi2 + #cr<br/>\t\t#zi = #temp + #temp + #ci<br/>\u00a0<br/>\t\tcurrentCapture-&gt;restart<br/>\t}()<br/>}<br/>\u00a0<br/>define mandelbrotTest() =&gt; {<br/>\tlocal(x, y = -39.0)<br/>\t{<br/>\t\tstdout('\\n')<br/>\t\t#x = -39.0<br/>\t\t{<br/>\t\t\tmandelbrotIterate(#x / 40.0, #y / 40.0) == 0?<br/>\t\t\t\tstdout('*')<br/>\t\t\t\t| stdout(' ');<br/>\t\t\t++#x<br/>\t\t\t#x &lt;= 39.0?<br/>\t\t\t\tcurrentCapture-&gt;restart<br/>\t\t}();<br/>\t\t++#y<br/>\u00a0<br/>\t\t#y &lt;= 39.0?<br/>\t\t\tcurrentCapture-&gt;restart<br/>\t}()<br/>\tstdout('\\n')<br/>}<br/>\u00a0<br/>mandelbrotTest<br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 35, "block": "<pre class=\"text highlighted_source\">to mandelbrot\u00a0:left\u00a0:bottom\u00a0:side\u00a0:size<br/>  cs setpensize [1 1]<br/>  make \"inc\u00a0:side/:size<br/>  make \"zr\u00a0:left<br/>  repeat\u00a0:size [<br/>    make \"zr\u00a0:zr +\u00a0:inc<br/>    make \"zi\u00a0:bottom<br/>    pu<br/>    setxy repcount -\u00a0:size/2  minus\u00a0:size/2<br/>    pd<br/>    repeat\u00a0:size [<br/>      make \"zi\u00a0:zi +\u00a0:inc<br/>      setpencolor count.color calc\u00a0:zr\u00a0:zi<br/>      fd 1 ] ]<br/>end<br/>\u00a0<br/>to count.color\u00a0:count<br/> \u00a0;op (list\u00a0:count\u00a0:count\u00a0:count)<br/>  if\u00a0:count &gt; 256 [op 0]\t; black<br/>  if\u00a0:count &gt; 128 [op 7]\t; white<br/>  if\u00a0:count &gt;  64 [op 5]\t; magenta<br/>  if\u00a0:count &gt;  32 [op 6]\t; yellow<br/>  if\u00a0:count &gt;  16 [op 4]\t; red<br/>  if\u00a0:count &gt;   8 [op 2]\t; green<br/>  if\u00a0:count &gt;   4 [op 1]\t; blue<br/>  op 3\t\t\t\t; cyan<br/>end<br/>\u00a0<br/>to calc\u00a0:zr\u00a0:zi [:count 0] [:az 0] [:bz 0]<br/>  if\u00a0:az*:az +\u00a0:bz*:bz &gt; 4 [op\u00a0:count]<br/>  if\u00a0:count &gt; 256 [op\u00a0:count]<br/>  op (calc\u00a0:zr\u00a0:zi (:count + 1) (:zr +\u00a0:az*:az -\u00a0:bz*:bz) (:zi + 2*:az*:bz))<br/>end<br/>\u00a0<br/>mandelbrot -2 -1.25 2.5 400</pre>"}, {"lang": "Lua", "loc": 70, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> maxIterations <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><br/><span class=\"kw1\">local</span> minX<span class=\"sy0\">,</span> maxX<span class=\"sy0\">,</span> minY<span class=\"sy0\">,</span> maxY <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2.5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.5</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2.5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.5</span><br/><span class=\"kw1\">local</span> miX<span class=\"sy0\">,</span> mxX<span class=\"sy0\">,</span> miY<span class=\"sy0\">,</span> mxY<br/><span class=\"kw1\">function</span> remap<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> t1<span class=\"sy0\">,</span> t2<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2 <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"br0\">(</span> x <span class=\"sy0\">-</span> t1 <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span> t2 <span class=\"sy0\">-</span> t1 <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> g <span class=\"sy0\">=</span> f <span class=\"sy0\">*</span> <span class=\"br0\">(</span> s2 <span class=\"sy0\">-</span> s1 <span class=\"br0\">)</span> <span class=\"sy0\">+</span> s1<br/>    <span class=\"kw1\">return</span> g<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> drawMandelbrot<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> pts<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> as<span class=\"sy0\">,</span> za<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> bs<span class=\"sy0\">,</span> zb<span class=\"sy0\">,</span> cnt<span class=\"sy0\">,</span> clr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> hei <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> wid <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            a <span class=\"sy0\">=</span> remap<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> wid<span class=\"sy0\">,</span> minX<span class=\"sy0\">,</span> maxX <span class=\"br0\">)</span><br/>            b <span class=\"sy0\">=</span> remap<span class=\"br0\">(</span> j<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> hei<span class=\"sy0\">,</span> minY<span class=\"sy0\">,</span> maxY <span class=\"br0\">)</span><br/>            cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> za <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> zb <span class=\"sy0\">=</span> b<br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span> cnt <span class=\"sy0\">&lt;</span> maxIterations <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                as <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> a <span class=\"sy0\">-</span> b <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span> bs <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> a <span class=\"sy0\">*</span> b<br/>                a <span class=\"sy0\">=</span> za <span class=\"sy0\">+</span> as<span class=\"sy0\">;</span> b <span class=\"sy0\">=</span> zb <span class=\"sy0\">+</span> bs<br/>                <span class=\"kw1\">if</span> <span class=\"kw3\">math.abs</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw3\">math.abs</span><span class=\"br0\">(</span> b <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">16</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span> <span class=\"kw1\">end</span><br/>                cnt <span class=\"sy0\">=</span> cnt <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">if</span> cnt <span class=\"sy0\">==</span> maxIterations <span class=\"kw1\">then</span> clr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">else</span> clr <span class=\"sy0\">=</span> remap<span class=\"br0\">(</span> cnt<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> maxIterations<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>            pts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> clr<span class=\"sy0\">,</span> clr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">}</span><br/>            love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>points<span class=\"br0\">(</span> pts <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> startFractal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><span class=\"sy0\">;</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><br/>    drawMandelbrot<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>load<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    wid<span class=\"sy0\">,</span> hei <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    canvas <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>newCanvas<span class=\"br0\">(</span> wid<span class=\"sy0\">,</span> hei <span class=\"br0\">)</span><br/>    startFractal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>mousepressed<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> button<span class=\"sy0\">,</span> istouch <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> button <span class=\"sy0\">==</span>  <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        startDrag <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span> miX <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> miY <span class=\"sy0\">=</span> y<br/>    <span class=\"kw1\">else</span><br/>        minX <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2.5</span><span class=\"sy0\">;</span> maxX <span class=\"sy0\">=</span> <span class=\"nu0\">2.5</span><span class=\"sy0\">;</span> minY <span class=\"sy0\">=</span> minX<span class=\"sy0\">;</span> maxY <span class=\"sy0\">=</span> maxX<br/>        startFractal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        startDrag <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>mousereleased<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> button<span class=\"sy0\">,</span> istouch <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> startDrag <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">local</span> l<br/>        <span class=\"kw1\">if</span> x <span class=\"sy0\">&gt;</span> miX <span class=\"kw1\">then</span> mxX <span class=\"sy0\">=</span> x<br/>        <span class=\"kw1\">else</span> l <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> mxX <span class=\"sy0\">=</span> miX<span class=\"sy0\">;</span> miX <span class=\"sy0\">=</span> l<br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> y <span class=\"sy0\">&gt;</span> miY <span class=\"kw1\">then</span> mxY <span class=\"sy0\">=</span> y<br/>        <span class=\"kw1\">else</span> l <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span> mxY <span class=\"sy0\">=</span> miY<span class=\"sy0\">;</span> miY <span class=\"sy0\">=</span> l<br/>        <span class=\"kw1\">end</span><br/>        miX <span class=\"sy0\">=</span> remap<span class=\"br0\">(</span> miX<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> wid<span class=\"sy0\">,</span> minX<span class=\"sy0\">,</span> maxX <span class=\"br0\">)</span> <br/>        mxX <span class=\"sy0\">=</span> remap<span class=\"br0\">(</span> mxX<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> wid<span class=\"sy0\">,</span> minX<span class=\"sy0\">,</span> maxX <span class=\"br0\">)</span><br/>        miY <span class=\"sy0\">=</span> remap<span class=\"br0\">(</span> miY<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> hei<span class=\"sy0\">,</span> minY<span class=\"sy0\">,</span> maxY <span class=\"br0\">)</span> <br/>        mxY <span class=\"sy0\">=</span> remap<span class=\"br0\">(</span> mxY<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> hei<span class=\"sy0\">,</span> minY<span class=\"sy0\">,</span> maxY <span class=\"br0\">)</span><br/>        minX <span class=\"sy0\">=</span> miX<span class=\"sy0\">;</span> maxX <span class=\"sy0\">=</span> mxX<span class=\"sy0\">;</span> minY <span class=\"sy0\">=</span> miY<span class=\"sy0\">;</span> maxY <span class=\"sy0\">=</span> mxY<br/>        startFractal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">ImageTools:-Embed(Fractals[EscapeTime]:-Mandelbrot(500, -2.0-1.35*I, .7+1.35*I, output = layer1));</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 5, "block": "<pre class=\"text highlighted_source\">eTime[z0_, maxIter_Integer: 100]\u00a0:= (<a class=\"__cf_email__\" data-cfemail=\"1b577e757c6f735b557e686f4c7372777e5772686f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[(# + z0)^2 &amp;, 0, (<a class=\"__cf_email__\" data-cfemail=\"ecad8e9fac\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a># &lt;= 2) &amp;, 1, maxIter]) - 1<br/>\u00a0<br/>DistributeDefinitions[eTime];<br/>mesh = ParallelTable[eTime[(x + I*y), 1000], {y, 1.2, -1.2, -0.01}, {x, -1.72, 1, 0.01}];<br/>ReliefPlot[mesh, Frame -&gt; False]</pre>"}, {"lang": "Mathmap", "loc": 1, "block": "<pre>filter mandelbrot (gradient coloration)\n   c=ri:(xy/xy:[X,X]*1.5-xy:[0.5,0]);\n   z=ri:[0,0]; # initial value z0 = 0 \n   # iteration of z\n   iter=0;\n   while abs(z)&lt;2 &amp;&amp; iter&lt;31\n   do\n       z=z*z+c;  # z(n+1) = fc(zn)\n       iter=iter+1\n   end;\n   coloration(iter/32) # color of pixel\nend\n</pre>"}, {"lang": "MATLAB", "loc": 33, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>theSet,realAxis,imaginaryAxis<span class=\"br0\">]</span> = mandelbrotSet<span class=\"br0\">(</span>start,gridSpacing,last,maxIteration<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">%Define the escape time algorithm</span><br/>    <span class=\"kw1\">function</span> escapeTime = escapeTimeAlgorithm<span class=\"br0\">(</span>z0<span class=\"br0\">)</span><br/>\u00a0<br/>        escapeTime = <span class=\"nu0\">0</span>;<br/>        z = <span class=\"nu0\">0</span>;<br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span>z<span class=\"br0\">)</span>&lt;=<span class=\"nu0\">2</span><span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>escapeTime &lt; maxIteration<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            z = <span class=\"br0\">(</span>z + z0<span class=\"br0\">)</span>^<span class=\"nu0\">2</span>;            <br/>            escapeTime = escapeTime + <span class=\"nu0\">1</span>;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%Define the imaginary axis</span><br/>    imaginaryAxis = <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/imag.html\"><span class=\"kw2\">imag</span></a><span class=\"br0\">(</span>start<span class=\"br0\">)</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/imag.html\"><span class=\"kw2\">imag</span></a><span class=\"br0\">(</span>gridSpacing<span class=\"br0\">)</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/imag.html\"><span class=\"kw2\">imag</span></a><span class=\"br0\">(</span>last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">%Define the real axis</span><br/>    realAxis = <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/real.html\"><span class=\"kw2\">real</span></a><span class=\"br0\">(</span>start<span class=\"br0\">)</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/real.html\"><span class=\"kw2\">real</span></a><span class=\"br0\">(</span>gridSpacing<span class=\"br0\">)</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/real.html\"><span class=\"kw2\">real</span></a><span class=\"br0\">(</span>last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">%Construct the complex plane from the real and imaginary axes</span><br/>    complexPlane = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/meshgrid.html\"><span class=\"kw2\">meshgrid</span></a><span class=\"br0\">(</span>realAxis,imaginaryAxis<span class=\"br0\">)</span> + <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/meshgrid.html\"><span class=\"kw2\">meshgrid</span></a><span class=\"br0\">(</span>imaginaryAxis<span class=\"br0\">(</span><span class=\"kw1\">end</span>:-<span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span>,realAxis<span class=\"br0\">)</span>'.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>;<br/>\u00a0<br/>    <span class=\"co1\">%Apply the escape time algorithm to each point in the complex plane </span><br/>    theSet = arrayfun<span class=\"br0\">(</span>@escapeTimeAlgorithm, complexPlane<span class=\"br0\">)</span>;<br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">%Draw the set</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pcolor.html\"><span class=\"kw2\">pcolor</span></a><span class=\"br0\">(</span>realAxis,imaginaryAxis,theSet<span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/shading.html\"><span class=\"kw2\">shading</span></a> flat;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Metapost", "loc": 44, "block": "<pre class=\"text highlighted_source\">prologues:=3;<br/>outputtemplate:=\"%j-%c.svg\";<br/>outputformat:=\"svg\";<br/>\u00a0<br/>\u00a0<br/>def mandelbrot(expr maxX, maxY) =<br/>  max_iteration\u00a0:= 500;<br/>\u00a0<br/>  color col[];<br/>  for i\u00a0:= 0 upto max_iteration:<br/>    t\u00a0:= i / max_iteration;<br/>    col[i] = (t,t,t);<br/>  endfor;<br/>\u00a0<br/>\u00a0<br/>  for px\u00a0:= 0 upto maxX:<br/>    for py\u00a0:= 0 upto maxY:<br/>      xz\u00a0:= px * 3.5 / maxX - 2.5; \u00a0% (-2.5,1)<br/>      yz\u00a0:= py * 2 / maxY - 1;     \u00a0% (-1,1)<br/>\u00a0<br/>      x\u00a0:= 0;<br/>      y\u00a0:= 0;<br/>\u00a0<br/>      iteration\u00a0:= 0;<br/>\u00a0<br/>      forever: exitunless ((x*x + y*y &lt; 4) and (iteration &lt; max_iteration));<br/>        xtemp\u00a0:= x*x - y*y + xz;<br/>        y\u00a0:= 2*x*y + yz;<br/>        x\u00a0:= xtemp;<br/>        iteration\u00a0:= iteration + 1;<br/>      endfor;<br/>\u00a0<br/>      draw (px,py) withpen pencircle withcolor col[iteration];<br/>\u00a0<br/>    endfor;<br/>  endfor;<br/>enddef;<br/>\u00a0<br/>\u00a0<br/>beginfig(1);<br/>  mandelbrot(200, 150);<br/>endfig;<br/>\u00a0<br/>end</pre>"}, {"lang": "Modula-3", "loc": 56, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Mandelbrot <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> Wr<span class=\"sy0\">,</span> Stdio<span class=\"sy0\">,</span> Fmt<span class=\"sy0\">,</span> Word;<br/>\u00a0<br/><span class=\"kw1\">CONST</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">50</span>;<br/>      limit2 <span class=\"sy0\">=</span> <span class=\"nu0\">4.0</span>;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> UByte <span class=\"sy0\">=</span> <span class=\"kw1\">BITS</span> <span class=\"nu0\">8</span> <span class=\"kw1\">FOR</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">16</span>_FF<span class=\"br0\">]</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> width <span class=\"sy0\">:=</span> <span class=\"nu0\">200</span>;<br/>    height <span class=\"sy0\">:=</span> <span class=\"nu0\">200</span>;<br/>    bitnum<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    byteacc<span class=\"sy0\">:</span> UByte <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    isOverLimit<span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>    Zr<span class=\"sy0\">,</span> Zi<span class=\"sy0\">,</span> Cr<span class=\"sy0\">,</span> Ci<span class=\"sy0\">,</span> Tr<span class=\"sy0\">,</span> Ti<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\u00a0<br/>  Wr.<span class=\"me1\">PutText</span><span class=\"br0\">(</span>Stdio.<span class=\"me1\">stdout</span><span class=\"sy0\">,</span> <span class=\"st0\">\"P4<span class=\"es0\">\\n</span>\"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>height<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"kw1\">FOR</span> y <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">FOR</span> x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      Zr <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>; Zi <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>      Cr <span class=\"sy0\">:=</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1.5</span>;<br/>      Ci <span class=\"sy0\">:=</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>height<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span>;<br/>\u00a0<br/>      <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        Tr <span class=\"sy0\">:=</span> Zr<span class=\"sy0\">*</span>Zr <span class=\"sy0\">-</span> Zi<span class=\"sy0\">*</span>Zi <span class=\"sy0\">+</span> Cr;<br/>        Ti <span class=\"sy0\">:=</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">*</span>Zr<span class=\"sy0\">*</span>Zi <span class=\"sy0\">+</span> Ci;<br/>        Zr <span class=\"sy0\">:=</span> Tr; Zi <span class=\"sy0\">:=</span> Ti;<br/>        isOverLimit <span class=\"sy0\">:=</span> Zr<span class=\"sy0\">*</span>Zr <span class=\"sy0\">+</span> Zi<span class=\"sy0\">*</span>Zi &gt; limit2;<br/>        <span class=\"kw1\">IF</span> isOverLimit <span class=\"kw1\">THEN</span> <span class=\"kw1\">EXIT</span>; <span class=\"kw1\">END</span>;<br/>      <span class=\"kw1\">END</span>;<br/>\u00a0<br/>      <span class=\"kw1\">IF</span> isOverLimit <span class=\"kw1\">THEN</span><br/>        byteacc <span class=\"sy0\">:=</span> Word.<span class=\"me1\">Xor</span><span class=\"br0\">(</span>Word.<span class=\"me1\">LeftShift</span><span class=\"br0\">(</span>byteacc<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span>_00<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">ELSE</span><br/>        byteacc <span class=\"sy0\">:=</span> Word.<span class=\"me1\">Xor</span><span class=\"br0\">(</span>Word.<span class=\"me1\">LeftShift</span><span class=\"br0\">(</span>byteacc<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span>_01<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">END</span>;<br/>\u00a0<br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>bitnum<span class=\"br0\">)</span>;<br/>\u00a0<br/>      <span class=\"kw1\">IF</span> bitnum <span class=\"sy0\">=</span> <span class=\"nu0\">8</span> <span class=\"kw1\">THEN</span><br/>        Wr.<span class=\"me1\">PutChar</span><span class=\"br0\">(</span>Stdio.<span class=\"me1\">stdout</span><span class=\"sy0\">,</span> <span class=\"kw3\">VAL</span><span class=\"br0\">(</span>byteacc<span class=\"sy0\">,</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        byteacc <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>        bitnum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">ELSIF</span> x <span class=\"sy0\">=</span> width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>        byteacc <span class=\"sy0\">:=</span> Word.<span class=\"me1\">LeftShift</span><span class=\"br0\">(</span>byteacc<span class=\"sy0\">,</span> <span class=\"nu0\">8</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>width <span class=\"kw1\">MOD</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        Wr.<span class=\"me1\">PutChar</span><span class=\"br0\">(</span>Stdio.<span class=\"me1\">stdout</span><span class=\"sy0\">,</span> <span class=\"kw3\">VAL</span><span class=\"br0\">(</span>byteacc<span class=\"sy0\">,</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        byteacc <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>        bitnum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">END</span>;<br/>      Wr.<span class=\"me1\">Flush</span><span class=\"br0\">(</span>Stdio.<span class=\"me1\">stdout</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Mandelbrot.</pre>"}, {"lang": "MySQL", "loc": 98, "block": "<pre class=\"mysql highlighted_source\">\u00a0<br/><span class=\"co1\">-- Table to contain all the data points</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=TABLE\"><span class=\"kw1\">TABLE</span></a> points <span class=\"br0\">(</span><br/>  c_re <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a><span class=\"sy2\">,</span><br/>  c_im <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a><span class=\"sy2\">,</span><br/>  z_re <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DEFAULT\"><span class=\"kw2\">DEFAULT</span></a> <span class=\"nu0\">0</span><span class=\"sy2\">,</span><br/>  z_im <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DEFAULT\"><span class=\"kw2\">DEFAULT</span></a> <span class=\"nu0\">0</span><span class=\"sy2\">,</span><br/>  znew_re <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DEFAULT\"><span class=\"kw2\">DEFAULT</span></a> <span class=\"nu0\">0</span><span class=\"sy2\">,</span><br/>  znew_im <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DEFAULT\"><span class=\"kw2\">DEFAULT</span></a> <span class=\"nu0\">0</span><span class=\"sy2\">,</span><br/>  steps <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INT\"><span class=\"kw4\">INT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DEFAULT\"><span class=\"kw2\">DEFAULT</span></a> <span class=\"nu0\">0</span><span class=\"sy2\">,</span><br/>  active <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CHAR\"><span class=\"kw5\">CHAR</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DEFAULT\"><span class=\"kw2\">DEFAULT</span></a> <span class=\"nu0\">1</span><br/><span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\u00a0<br/>DELIMITER <span class=\"sy1\">|</span><br/>\u00a0<br/><span class=\"co1\">-- Iterate over all the points in the table 'points'</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=PROCEDURE\"><span class=\"kw1\">PROCEDURE</span></a> itrt <span class=\"br0\">(</span><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=IN\"><span class=\"kw2\">IN</span></a> n <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INT\"><span class=\"kw4\">INT</span></a><span class=\"br0\">)</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  label: LOOP<br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=UPDATE\"><span class=\"kw1\">UPDATE</span></a> points<br/>      <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a><br/>        znew_re<span class=\"sy1\">=</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">POWER</span></a><span class=\"br0\">(</span>z_re<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">-</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">POWER</span></a><span class=\"br0\">(</span>z_im<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">+</span>c_re<span class=\"sy2\">,</span><br/>        znew_im<span class=\"sy1\">=</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>z_re<span class=\"sy1\">*</span>z_im<span class=\"sy1\">+</span>c_im<span class=\"sy2\">,</span><br/>        steps<span class=\"sy1\">=</span>steps<span class=\"sy1\">+</span><span class=\"nu0\">1</span><br/>      <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=WHERE\"><span class=\"kw1\">WHERE</span></a> active<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=UPDATE\"><span class=\"kw1\">UPDATE</span></a> points <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a><br/>        z_re<span class=\"sy1\">=</span>znew_re<span class=\"sy2\">,</span><br/>        z_im<span class=\"sy1\">=</span>znew_im<span class=\"sy2\">,</span><br/>        active<span class=\"sy1\">=</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">POWER</span></a><span class=\"br0\">(</span>z_re<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">POWER</span></a><span class=\"br0\">(</span>z_im<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">&gt;</span><span class=\"nu0\">4</span><span class=\"sy2\">,</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=WHERE\"><span class=\"kw1\">WHERE</span></a> active<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> n <span class=\"sy1\">=</span> n <span class=\"sy1\">-</span> <span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">THEN</span></a><br/>      ITERATE label<span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"sy2\">;</span><br/>    LEAVE label<span class=\"sy2\">;</span><br/>  <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> LOOP label<span class=\"sy2\">;</span><br/><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a><span class=\"sy1\">|</span><br/>\u00a0<br/><span class=\"co1\">-- Populate the table 'points'</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=PROCEDURE\"><span class=\"kw1\">PROCEDURE</span></a> populate <span class=\"br0\">(</span><br/>  r_min <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a><span class=\"sy2\">,</span><br/>  r_max <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a><span class=\"sy2\">,</span><br/>  r_step <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a><span class=\"sy2\">,</span><br/>  i_min <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a><span class=\"sy2\">,</span><br/>  i_max <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a><span class=\"sy2\">,</span><br/>  i_step <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DOUBLE\"><span class=\"kw4\">DOUBLE</span></a><span class=\"br0\">)</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DELETE\"><span class=\"kw1\">DELETE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FROM\"><span class=\"kw1\">FROM</span></a> points<span class=\"sy2\">;</span><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @rl <span class=\"sy1\">=</span> r_min<span class=\"sy2\">;</span><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy2\">;</span><br/>  rloop: LOOP<br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @im <span class=\"sy1\">=</span> i_min<span class=\"sy2\">;</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy2\">;</span><br/>    iloop: LOOP<br/>      <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INSERT\"><span class=\"kw2\">INSERT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INTO\"><span class=\"kw1\">INTO</span></a> points <span class=\"br0\">(</span>c_re<span class=\"sy2\">,</span> c_im<span class=\"br0\">)</span><br/>        <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=VALUES\"><span class=\"kw1\">VALUES</span></a> <span class=\"br0\">(</span>@rl<span class=\"sy2\">,</span> @im<span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>      <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @b<span class=\"sy1\">=</span>@b<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>      <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @im<span class=\"sy1\">=</span>i_min <span class=\"sy1\">+</span> @b <span class=\"sy1\">*</span> i_step<span class=\"sy2\">;</span><br/>      <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> @im <span class=\"sy1\">&lt;</span> i_max <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">THEN</span></a><br/>        ITERATE iloop<span class=\"sy2\">;</span><br/>      <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"sy2\">;</span><br/>      LEAVE iloop<span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> LOOP iloop<span class=\"sy2\">;</span><br/>      <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @a<span class=\"sy1\">=</span>@a<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> @rl<span class=\"sy1\">=</span>r_min <span class=\"sy1\">+</span> @a <span class=\"sy1\">*</span> r_step<span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a> @rl <span class=\"sy1\">&lt;</span> r_max <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">THEN</span></a><br/>      ITERATE rloop<span class=\"sy2\">;</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"sy2\">;</span><br/>    LEAVE rloop<span class=\"sy2\">;</span><br/>  <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a> LOOP rloop<span class=\"sy2\">;</span><br/><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a><span class=\"sy1\">|</span><br/>\u00a0<br/>DELIMITER <span class=\"sy2\">;</span><br/>\u00a0<br/><span class=\"co1\">-- Choose size and resolution of graph</span><br/><span class=\"co1\">--             R_min, R_max, R_step, I_min, I_max, I_step</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CALL\"><span class=\"kw1\">CALL</span></a> populate<span class=\"br0\">(</span> <span class=\"sy1\">-</span><span class=\"nu0\">2.5</span><span class=\"sy2\">,</span>  <span class=\"nu0\">1.5</span><span class=\"sy2\">,</span>   <span class=\"nu0\">0.005</span><span class=\"sy2\">,</span>  <span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span>    <span class=\"nu0\">2</span><span class=\"sy2\">,</span>     <span class=\"nu0\">0.005</span> <span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\u00a0<br/><span class=\"co1\">-- Calculate 50 iterations</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CALL\"><span class=\"kw1\">CALL</span></a> itrt<span class=\"br0\">(</span> <span class=\"nu0\">50</span> <span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\u00a0<br/><span class=\"co1\">-- Create the image (/tmp/image.ppm)</span><br/><span class=\"co1\">-- Note, MySQL will not over-write an existing file and you may need</span><br/><span class=\"co1\">-- administrator access to delete or move it</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SELECT\"><span class=\"kw1\">SELECT</span></a> @xmax<span class=\"sy1\">:=</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/group-by-functions-and-modifiers.html\"><span class=\"kw22\">COUNT</span></a><span class=\"br0\">(</span>c_re<span class=\"br0\">)</span> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INTO\"><span class=\"kw1\">INTO</span></a> @xmax <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FROM\"><span class=\"kw1\">FROM</span></a> points <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=GROUP%20BY\"><span class=\"kw1\">GROUP BY</span></a> c_im <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=LIMIT\"><span class=\"kw1\">LIMIT</span></a> <span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SELECT\"><span class=\"kw1\">SELECT</span></a> @ymax<span class=\"sy1\">:=</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/group-by-functions-and-modifiers.html\"><span class=\"kw22\">COUNT</span></a><span class=\"br0\">(</span>c_im<span class=\"br0\">)</span> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INTO\"><span class=\"kw1\">INTO</span></a> @ymax <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FROM\"><span class=\"kw1\">FROM</span></a> points <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=GROUP%20BY\"><span class=\"kw1\">GROUP BY</span></a> c_re <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=LIMIT\"><span class=\"kw1\">LIMIT</span></a> <span class=\"nu0\">1</span><span class=\"sy2\">;</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> group_concat_max_len<span class=\"sy1\">=</span><span class=\"nu0\">11</span><span class=\"sy1\">*</span>@xmax<span class=\"sy1\">*</span>@ymax<span class=\"sy2\">;</span><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SELECT\"><span class=\"kw1\">SELECT</span></a><br/>  <span class=\"st0\">'P3'</span><span class=\"sy2\">,</span> @xmax<span class=\"sy2\">,</span> @ymax<span class=\"sy2\">,</span> <span class=\"nu0\">200</span><span class=\"sy2\">,</span><br/>  <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/group-by-functions-and-modifiers.html\"><span class=\"kw22\">GROUP_CONCAT</span></a><span class=\"br0\">(</span><br/>    <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/string-functions.html\"><span class=\"kw13\">CONCAT</span></a><span class=\"br0\">(</span><br/>      <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"br0\">(</span> active<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">55</span><span class=\"sy1\">+</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">MOD</span></a><span class=\"br0\">(</span>steps<span class=\"sy2\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy2\">,</span> <span class=\"st0\">' '</span><span class=\"sy2\">,</span><br/>      <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"br0\">(</span> active<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">55</span><span class=\"sy1\">+</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">MOD</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">POWER</span></a><span class=\"br0\">(</span>steps<span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy2\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy2\">,</span> <span class=\"st0\">' '</span><span class=\"sy2\">,</span><br/>      <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">IF</span></a><span class=\"br0\">(</span> active<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">55</span><span class=\"sy1\">+</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">MOD</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">POWER</span></a><span class=\"br0\">(</span>steps<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy2\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=ORDER%20BY\"><span class=\"kw1\">ORDER BY</span></a> c_im <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=ASC\"><span class=\"kw1\">ASC</span></a><span class=\"sy2\">,</span> c_re <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=ASC\"><span class=\"kw1\">ASC</span></a> SEPARATOR <span class=\"st0\">' '</span> <span class=\"br0\">)</span><br/>    <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=INTO\"><span class=\"kw1\">INTO</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=OUTFILE\"><span class=\"kw1\">OUTFILE</span></a> <span class=\"st0\">'/tmp/image.ppm'</span><br/>  <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FROM\"><span class=\"kw1\">FROM</span></a> points<span class=\"sy2\">;</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 20, "block": "<pre class=\"text highlighted_source\">import complex<br/>\u00a0<br/>proc mandelbrot(a: Complex): Complex =<br/>  for i in 0 .. &lt;50:<br/>    result = result * result + a<br/>\u00a0<br/>iterator stepIt(start, step: float, iterations: int): auto =<br/>  for i in 0 .. iterations:<br/>    yield start + float(i) * step<br/>\u00a0<br/>var rows = \"\"<br/>for y in stepIt(1.0, -0.05, 41):<br/>  for x in stepIt(-2.0, 0.0315, 80):<br/>    if abs(mandelbrot((x,y))) &lt; 2:<br/>      rows.add('*')<br/>    else:<br/>      rows.add(' ')<br/>  rows.add(\"\\n\")<br/>\u00a0<br/>echo rows</pre>"}, {"lang": "OCaml", "loc": 27, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span>load <span class=\"st0\">\"graphics.cma\"</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> mandelbrot xMin xMax yMin yMax xPixels yPixels maxIter <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> mandelbrotIterator z c n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><span class=\"sy0\">.</span>norm z<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2.0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">match</span> n <span class=\"kw1\">with</span><br/>      <span class=\"sy0\">|</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>      <span class=\"sy0\">|</span> n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> z<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><span class=\"sy0\">.</span>add <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><span class=\"sy0\">.</span>mul z z<span class=\"br0\">)</span> c <span class=\"kw1\">in</span><br/>             mandelbrotIterator z<span class=\"sy0\">'</span> c <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><span class=\"sy0\">.</span>open_graph<br/>    <span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> xPixels<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"st0\">\"x\"</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> yPixels<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> dx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xMax <span class=\"sy0\">-.</span> xMin<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> xPixels<span class=\"br0\">)</span> <br/>  <span class=\"kw1\">and</span> dy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>yMax <span class=\"sy0\">-.</span> yMin<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> yPixels<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> xi <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> xPixels <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> yi <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> yPixels <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><span class=\"sy0\">.</span>re <span class=\"sy0\">=</span> xMin <span class=\"sy0\">+.</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> xi<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><span class=\"sy0\">.</span>im <span class=\"sy0\">=</span> yMin <span class=\"sy0\">+.</span> <span class=\"br0\">(</span>dy <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> yi<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mandelbrotIterator <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><span class=\"sy0\">.</span>zero c maxIter<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><span class=\"sy0\">.</span>set_color <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><span class=\"sy0\">.</span>white<span class=\"sy0\">;</span><br/>         <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><span class=\"sy0\">.</span>plot xi yi <span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><span class=\"sy0\">.</span>set_color <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><span class=\"sy0\">.</span>black<span class=\"sy0\">;</span><br/>         <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><span class=\"sy0\">.</span>plot xi yi <span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;;</span><br/>\u00a0<br/>mandelbrot <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span> <span class=\"nu0\">0.5</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"nu0\">1.0</span> <span class=\"nu0\">500</span> <span class=\"nu0\">500</span> <span class=\"nu0\">200</span><span class=\"sy0\">;;</span></pre>"}, {"lang": "Octave", "loc": 34, "block": "<pre class=\"octave highlighted_source\"><span class=\"co1\">#! /usr/bin/octave -qf</span><br/><span class=\"kw2\">global</span> width <span class=\"sy3\">=</span> <span class=\"nu0\">200</span><span class=\"sy5\">;</span><br/><span class=\"kw2\">global</span> height <span class=\"sy3\">=</span> <span class=\"nu0\">200</span><span class=\"sy5\">;</span><br/>maxiter <span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy5\">;</span><br/>\u00a0<br/>z0 <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/><span class=\"kw2\">global</span> cmax <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">+</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy5\">;</span><br/><span class=\"kw2\">global</span> cmin <span class=\"sy3\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">2</span> <span class=\"sy1\">-</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy5\">;</span><br/>\u00a0<br/><span class=\"kw4\">function</span> cs <span class=\"sy3\">=</span> pscale<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>  <span class=\"kw2\">global</span> cmax<span class=\"sy5\">;</span><br/>  <span class=\"kw2\">global</span> cmin<span class=\"sy5\">;</span><br/>  <span class=\"kw2\">global</span> width<span class=\"sy5\">;</span><br/>  <span class=\"kw2\">global</span> height<span class=\"sy5\">;</span><br/>  <span class=\"kw2\">persistent</span> px <span class=\"sy3\">=</span> <span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/real.html\"><span class=\"kw5\">real</span></a><span class=\"br0\">(</span>cmax<span class=\"sy1\">-</span>cmin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>width<span class=\"sy5\">;</span><br/>  <span class=\"kw2\">persistent</span> py <span class=\"sy3\">=</span> <span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/imag.html\"><span class=\"kw5\">imag</span></a><span class=\"br0\">(</span>cmax<span class=\"sy1\">-</span>cmin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>height<span class=\"sy5\">;</span><br/>  cs <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/real.html\"><span class=\"kw5\">real</span></a><span class=\"br0\">(</span>cmin<span class=\"br0\">)</span> <span class=\"sy1\">+</span> px<span class=\"sy1\">*</span><a href=\"http://octave.sourceforge.net/octave/function/real.html\"><span class=\"kw5\">real</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy1\">*</span><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/imag.html\"><span class=\"kw5\">imag</span></a><span class=\"br0\">(</span>cmin<span class=\"br0\">)</span> <span class=\"sy1\">+</span> py<span class=\"sy1\">*</span><a href=\"http://octave.sourceforge.net/octave/function/imag.html\"><span class=\"kw5\">imag</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>ms <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/zeros.html\"><span class=\"kw5\">zeros</span></a><span class=\"br0\">(</span>width<span class=\"sy5\">,</span> height<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">for</span> x <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">:</span>width<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw4\">for</span> y <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">:</span>height<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    z0 <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/>    c <span class=\"sy3\">=</span> pscale<span class=\"br0\">(</span>x<span class=\"sy1\">+</span>y<span class=\"sy1\">*</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">for</span> ic <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span>maxiter<br/>      z1 <span class=\"sy3\">=</span> z0<span class=\"sy2\">^</span><span class=\"nu0\">2</span> <span class=\"sy1\">+</span> c<span class=\"sy5\">;</span><br/>      <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/abs.html\"><span class=\"kw5\">abs</span></a><span class=\"br0\">(</span>z1<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"kw4\">break</span><span class=\"sy5\">;</span> <span class=\"kw4\">endif</span><br/>      z0 <span class=\"sy3\">=</span> z1<span class=\"sy5\">;</span><br/>    <span class=\"kw4\">endfor</span><br/>    ms<span class=\"br0\">(</span>x<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span> y<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> ic<span class=\"sy1\">/</span>maxiter<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfor</span><br/>\u00a0<br/>saveimage<span class=\"br0\">(</span><span class=\"co4\">\"mandel.ppm\"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/round.html\"><span class=\"kw5\">round</span></a><span class=\"br0\">(</span>ms <span class=\"sy2\">.*</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy2\">.'</span><span class=\"sy5\">,</span> <span class=\"co4\">\"ppm\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">mandelbrot<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>y<span class=\"sy0\">=-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu2\">0.05</span><span class=\"sy0\">,</span> <br/>    <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>x<span class=\"sy0\">=-</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> <span class=\"nu2\">0.5</span><span class=\"sy0\">,</span> <span class=\"nu2\">0.0315</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>my<span class=\"br0\">(</span>z<span class=\"sy0\">=</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">20</span><span class=\"sy0\">,</span>z<span class=\"sy0\">=</span>z<span class=\"sy0\">*</span>z<span class=\"sy0\">+</span>c<span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">abs</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span>y<span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 89, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> mandelbrot<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>   ixmax <span class=\"sy3\">=</span> <span class=\"nu0\">800</span><span class=\"sy1\">;</span><br/>   iymax <span class=\"sy3\">=</span> <span class=\"nu0\">800</span><span class=\"sy1\">;</span><br/>   cxmin <span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">2.5</span><span class=\"sy1\">;</span><br/>   cxmax <span class=\"sy3\">=</span>  <span class=\"nu0\">1.5</span><span class=\"sy1\">;</span><br/>   cymin <span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">2.0</span><span class=\"sy1\">;</span><br/>   cymax <span class=\"sy3\">=</span>  <span class=\"nu0\">2.0</span><span class=\"sy1\">;</span><br/>   maxcolorcomponentvalue <span class=\"sy3\">=</span> <span class=\"nu0\">255</span><span class=\"sy1\">;</span><br/>   maxiteration <span class=\"sy3\">=</span> <span class=\"nu0\">200</span><span class=\"sy1\">;</span><br/>   escaperadius <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>   colortype <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>      red   <span class=\"sy1\">:</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>      green <span class=\"sy1\">:</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>      blue  <span class=\"sy1\">:</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>   ix<span class=\"sy1\">,</span> iy      <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>   cx<span class=\"sy1\">,</span> cy      <span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>   pixelwidth  <span class=\"sy1\">:</span> <span class=\"kw4\">real</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span>cxmax <span class=\"sy3\">-</span> cxmin<span class=\"br0\">)</span> <span class=\"sy3\">/</span> ixmax<span class=\"sy1\">;</span><br/>   pixelheight <span class=\"sy1\">:</span> <span class=\"kw4\">real</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span>cymax <span class=\"sy3\">-</span> cymin<span class=\"br0\">)</span> <span class=\"sy3\">/</span> iymax<span class=\"sy1\">;</span><br/>   filename    <span class=\"sy1\">:</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"st0\">'new1.ppm'</span><span class=\"sy1\">;</span><br/>   comment     <span class=\"sy1\">:</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"st0\">'# '</span><span class=\"sy1\">;</span><br/>   outfile     <span class=\"sy1\">:</span> textfile<span class=\"sy1\">;</span><br/>   color       <span class=\"sy1\">:</span> colortype<span class=\"sy1\">;</span><br/>   zx<span class=\"sy1\">,</span> zy      <span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>   zx2<span class=\"sy1\">,</span> zy2    <span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>   iteration   <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>   er2         <span class=\"sy1\">:</span> <span class=\"kw4\">real</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span>escaperadius <span class=\"sy3\">*</span> escaperadius<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co2\">{$I-}</span><br/>   assign<span class=\"br0\">(</span>outfile<span class=\"sy1\">,</span> filename<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   rewrite<span class=\"br0\">(</span>outfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">if</span> ioresult &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>stderr<span class=\"sy1\">,</span> <span class=\"st0\">'unable to open output file: '</span><span class=\"sy1\">,</span> filename<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      exit<span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>   <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>outfile<span class=\"sy1\">,</span> <span class=\"st0\">'P6'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>outfile<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span> comment<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>outfile<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span> ixmax<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>outfile<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span> iymax<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>outfile<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span> maxcolorcomponentvalue<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span> iy <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> iymax <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">begin</span><br/>      cy <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cymin <span class=\"sy3\">+</span> <span class=\"br0\">(</span>iy <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span>pixelheight<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span>cy<span class=\"br0\">)</span> &lt; pixelheight <span class=\"sy3\">/</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> cy <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> ix <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> ixmax <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>         cx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cxmin <span class=\"sy3\">+</span> <span class=\"br0\">(</span>ix <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span>pixelwidth<span class=\"sy1\">;</span><br/>         zx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/>         zy <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/>         zx2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> zx<span class=\"sy3\">*</span>zx<span class=\"sy1\">;</span><br/>         zy2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> zy<span class=\"sy3\">*</span>zy<span class=\"sy1\">;</span><br/>         iteration <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>         <span class=\"kw1\">while</span> <span class=\"br0\">(</span>iteration &lt; maxiteration<span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>zx2 <span class=\"sy3\">+</span> zy2 &lt; er2<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"kw1\">begin</span><br/>            zy <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>zx<span class=\"sy3\">*</span>zy <span class=\"sy3\">+</span> cy<span class=\"sy1\">;</span><br/>            zx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> zx2 <span class=\"sy3\">-</span> zy2 <span class=\"sy3\">+</span> cx<span class=\"sy1\">;</span><br/>            zx2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> zx<span class=\"sy3\">*</span>zx<span class=\"sy1\">;</span><br/>            zy2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> zy<span class=\"sy3\">*</span>zy<span class=\"sy1\">;</span><br/>            iteration <span class=\"sy1\">:</span><span class=\"sy3\">=</span> iteration <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>         <span class=\"kw1\">if</span> iteration <span class=\"sy3\">=</span> maxiteration <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">begin</span><br/>            color<span class=\"sy1\">.</span><span class=\"me1\">red</span>   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>            color<span class=\"sy1\">.</span><span class=\"me1\">green</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>            color<span class=\"sy1\">.</span><span class=\"me1\">blue</span>  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>         <span class=\"kw1\">end</span><br/>         <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">begin</span><br/>            color<span class=\"sy1\">.</span><span class=\"me1\">red</span>   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">255</span><span class=\"sy1\">;</span><br/>            color<span class=\"sy1\">.</span><span class=\"me1\">green</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">255</span><span class=\"sy1\">;</span><br/>            color<span class=\"sy1\">.</span><span class=\"me1\">blue</span>  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">255</span><span class=\"sy1\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>         <span class=\"kw3\">write</span><span class=\"br0\">(</span>outfile<span class=\"sy1\">,</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span>color<span class=\"sy1\">.</span><span class=\"me1\">red</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span>color<span class=\"sy1\">.</span><span class=\"me1\">green</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span>color<span class=\"sy1\">.</span><span class=\"me1\">blue</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>   close<span class=\"br0\">(</span>outfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 15, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mandelbrot <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"re0\">$z</span> <span class=\"sy0\">*</span> <span class=\"re0\">$z</span> <span class=\"sy0\">+</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">$_</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a> <span class=\"re0\">$z</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&gt;=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">0.0315</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> mandelbrot<span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st_h\">' '</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'#'</span><span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 49, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@color_map</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"sy0\">~*.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/../</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy0\">:</span><span class=\"nu0\">16</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <br/>000000 0000fc 4000fc 7c00fc bc00fc fc00fc fc00bc fc007c fc0040 fc0000 fc4000<br/>fc7c00 fcbc00 fcfc00 bcfc00 7cfc00 40fc00 00fc00 00fc40 00fc7c 00fcbc 00fcfc<br/>00bcfc 007cfc 0040fc 7c7cfc 9c7cfc bc7cfc dc7cfc fc7cfc fc7cdc fc7cbc fc7c9c<br/>fc7c7c fc9c7c fcbc7c fcdc7c fcfc7c dcfc7c bcfc7c 9cfc7c 7cfc7c 7cfc9c 7cfcbc<br/>7cfcdc 7cfcfc 7cdcfc 7cbcfc 7c9cfc b4b4fc c4b4fc d8b4fc e8b4fc fcb4fc fcb4e8<br/>fcb4d8 fcb4c4 fcb4b4 fcc4b4 fcd8b4 fce8b4 fcfcb4 e8fcb4 d8fcb4 c4fcb4 b4fcb4<br/>b4fcc4 b4fcd8 b4fce8 b4fcfc b4e8fc b4d8fc b4c4fc 000070 1c0070 <span class=\"nu0\">380070</span> <span class=\"nu0\">540070</span><br/><span class=\"nu0\">700070</span> <span class=\"nu0\">700054</span> <span class=\"nu0\">700038</span> 70001c <span class=\"nu0\">700000</span> 701c00 <span class=\"nu0\">703800</span> <span class=\"nu0\">705400</span> <span class=\"nu0\">707000</span> <span class=\"nu0\">547000</span> <span class=\"nu0\">387000</span><br/>1c7000 007000 00701c 007038 007054 007070 005470 003870 001c70 <span class=\"nu0\">383870</span> <span class=\"nu0\">443870</span><br/><span class=\"nu0\">543870</span> <span class=\"nu0\">603870</span> <span class=\"nu0\">703870</span> <span class=\"nu0\">703860</span> <span class=\"nu0\">703854</span> <span class=\"nu0\">703844</span> <span class=\"nu0\">703838</span> <span class=\"nu0\">704438</span> <span class=\"nu0\">705438</span> <span class=\"nu0\">706038</span> <span class=\"nu0\">707038</span><br/><span class=\"nu0\">607038</span> <span class=\"nu0\">547038</span> <span class=\"nu0\">447038</span> <span class=\"nu0\">387038</span> <span class=\"nu0\">387044</span> <span class=\"nu0\">387054</span> <span class=\"nu0\">387060</span> <span class=\"nu0\">387070</span> <span class=\"nu0\">386070</span> <span class=\"nu0\">385470</span> <span class=\"nu0\">384470</span><br/><span class=\"nu0\">505070</span> <span class=\"nu0\">585070</span> <span class=\"nu0\">605070</span> <span class=\"nu0\">685070</span> <span class=\"nu0\">705070</span> <span class=\"nu0\">705068</span> <span class=\"nu0\">705060</span> <span class=\"nu0\">705058</span> <span class=\"nu0\">705050</span> <span class=\"nu0\">705850</span> <span class=\"nu0\">706050</span><br/><span class=\"nu0\">706850</span> <span class=\"nu0\">707050</span> <span class=\"nu0\">687050</span> <span class=\"nu0\">607050</span> <span class=\"nu0\">587050</span> <span class=\"nu0\">507050</span> <span class=\"nu0\">507058</span> <span class=\"nu0\">507060</span> <span class=\"nu0\">507068</span> <span class=\"nu0\">507070</span> <span class=\"nu0\">506870</span><br/><span class=\"nu0\">506070</span> <span class=\"nu0\">505870</span> 000040 <span class=\"nu0\">100040</span> <span class=\"nu0\">200040</span> <span class=\"nu0\">300040</span> <span class=\"nu0\">400040</span> <span class=\"nu0\">400030</span> <span class=\"nu0\">400020</span> <span class=\"nu0\">400010</span> <span class=\"nu0\">400000</span><br/><span class=\"nu0\">401000</span> <span class=\"nu0\">402000</span> <span class=\"nu0\">403000</span> <span class=\"nu0\">404000</span> <span class=\"nu0\">304000</span> <span class=\"nu0\">204000</span> <span class=\"nu0\">104000</span> 004000 004010 004020 004030<br/>004040 003040 002040 001040 <span class=\"nu0\">202040</span> <span class=\"nu0\">282040</span> <span class=\"nu0\">302040</span> <span class=\"nu0\">382040</span> <span class=\"nu0\">402040</span> <span class=\"nu0\">402038</span> <span class=\"nu0\">402030</span><br/><span class=\"nu0\">402028</span> <span class=\"nu0\">402020</span> <span class=\"nu0\">402820</span> <span class=\"nu0\">403020</span> <span class=\"nu0\">403820</span> <span class=\"nu0\">404020</span> <span class=\"nu0\">384020</span> <span class=\"nu0\">304020</span> <span class=\"nu0\">284020</span> <span class=\"nu0\">204020</span> <span class=\"nu0\">204028</span><br/><span class=\"nu0\">204030</span> <span class=\"nu0\">204038</span> <span class=\"nu0\">204040</span> <span class=\"nu0\">203840</span> <span class=\"nu0\">203040</span> <span class=\"nu0\">202840</span> 2c2c40 302c40 342c40 3c2c40 402c40<br/>402c3c 402c34 402c30 402c2c 40302c 40342c 403c2c 40402c 3c402c 34402c 30402c<br/>2c402c 2c4030 2c4034 2c403c 2c4040 2c3c40 2c3440 2c3040<br/><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> MAX_ITERATIONS <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">$height</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">@*ARGS</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> cut<span class=\"br0\">(</span>Range <span class=\"re0\">$r</span><span class=\"sy0\">,</span> UInt <span class=\"re0\">$n</span> <span class=\"kw1\">where</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span> <span class=\"sy0\">-</span> <span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"kw3\">min</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span> <span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw3\">re</span> <span class=\"sy0\">=</span> cut<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw3\">im</span> <span class=\"sy0\">=</span> cut<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">5</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"re0\">$width</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span><span class=\"sy0\">*</span> 1i<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mandelbrot<span class=\"br0\">(</span>Complex <span class=\"re0\">$z</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> Complex <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">MAX_ITERATIONS</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"re0\">$z</span><span class=\"sy0\">*</span><span class=\"re0\">$z</span> <span class=\"sy0\">+</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$_</span> <span class=\"kw1\">if</span> <span class=\"re0\">$z</span><span class=\"sy0\">.</span><span class=\"kw3\">abs</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"P3\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"$width $height\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"255\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"kw3\">re</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$re</span> <span class=\"br0\">{</span><br/>    put <span class=\"re0\">@color_map</span><span class=\"br0\">[</span><span class=\"sy0\">|.</span><span class=\"kw3\">reverse</span><span class=\"sy0\">,</span> <span class=\"sy0\">|.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..*</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$width</span><span class=\"br0\">]</span> <span class=\"kw1\">given</span><br/>    <span class=\"kw1\">my</span> <span class=\"sy0\">@</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;mandelbrot</span><span class=\"sy0\">.</span><span class=\"me1\">assuming</span><span class=\"br0\">(</span>0i<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$re</span> \u00ab<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"sy0\">@</span><span class=\"kw3\">im</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 25, "block": "<pre class=\"text highlighted_source\">--<br/>-- Mandlebrot set in ascii art demo.<br/>-- <br/>constant b=\" .:,;!/&gt;)|&amp;IH%*#\"<br/>atom r, i, c, C, z, Z, t, k<br/>    for y=30 to 0 by -1 do<br/>        C = y*0.1-1.5<br/>        puts(1,'\\n')<br/>        for x=0 to 74 do<br/>            c = x*0.04-2<br/>            z = 0<br/>            Z = 0<br/>            r = c<br/>            i = C<br/>            k = 0<br/>            while k&lt;112 do<br/>                t = z*z-Z*Z+r<br/>                Z = 2*z*Z+i<br/>                z = t<br/>                if z*z+Z*Z&gt;10 then exit end if<br/>                k += 1<br/>            end while<br/>            puts(1,b[remainder(k,16)+1])<br/>        end for<br/>    end for</pre>"}, {"lang": "PHP", "loc": 40, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$min_x</span><span class=\"sy0\">=-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$max_x</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$min_y</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$max_y</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$dim_x</span><span class=\"sy0\">=</span><span class=\"nu0\">400</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$dim_y</span><span class=\"sy0\">=</span><span class=\"nu0\">300</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$im</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><a href=\"http://www.php.net/imagecreate\"><span class=\"kw3\">imagecreate</span></a><span class=\"br0\">(</span><span class=\"re0\">$dim_x</span><span class=\"sy0\">,</span> <span class=\"re0\">$dim_y</span><span class=\"br0\">)</span><br/>  or <a href=\"http://www.php.net/die\"><span class=\"kw3\">die</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Cannot Initialize new GD image stream\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/header\"><span class=\"kw3\">header</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Content-Type: image/png\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$black_color</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$white_color</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$y</span><span class=\"sy0\">&lt;=</span><span class=\"re0\">$dim_y</span><span class=\"sy0\">;</span><span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$x</span><span class=\"sy0\">&lt;=</span><span class=\"re0\">$dim_x</span><span class=\"sy0\">;</span><span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$c1</span><span class=\"sy0\">=</span><span class=\"re0\">$min_x</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$max_x</span><span class=\"sy0\">-</span><span class=\"re0\">$min_x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$dim_x</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$c2</span><span class=\"sy0\">=</span><span class=\"re0\">$min_y</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$max_y</span><span class=\"sy0\">-</span><span class=\"re0\">$min_y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$dim_y</span><span class=\"sy0\">*</span><span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$z1</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$z2</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$new1</span><span class=\"sy0\">=</span><span class=\"re0\">$z1</span><span class=\"sy0\">*</span><span class=\"re0\">$z1</span><span class=\"sy0\">-</span><span class=\"re0\">$z2</span><span class=\"sy0\">*</span><span class=\"re0\">$z2</span><span class=\"sy0\">+</span><span class=\"re0\">$c1</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$new2</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$z1</span><span class=\"sy0\">*</span><span class=\"re0\">$z2</span><span class=\"sy0\">+</span><span class=\"re0\">$c2</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$z1</span><span class=\"sy0\">=</span><span class=\"re0\">$new1</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$z2</span><span class=\"sy0\">=</span><span class=\"re0\">$new2</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$z1</span><span class=\"sy0\">*</span><span class=\"re0\">$z1</span><span class=\"sy0\">+</span><span class=\"re0\">$z2</span><span class=\"sy0\">*</span><span class=\"re0\">$z2</span><span class=\"sy0\">&gt;=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.php.net/imagesetpixel\"><span class=\"kw3\">imagesetpixel</span></a> <span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$white_color</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.php.net/imagepng\"><span class=\"kw3\">imagepng</span></a><span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/imagedestroy\"><span class=\"kw3\">imagedestroy</span></a><span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(scl 6)<br/>\u00a0<br/>(let Ppm (make (do 300 (link (need 400))))<br/>   (for (Y . Row) Ppm<br/>      (for (X . @) Row<br/>         (let (ZX 0  ZY 0  CX (*/ (- X 250) 1.0 150)  CY (*/ (- Y 150) 1.0 150)  C 570)<br/>            (while (and (&gt; 4.0 (+ (*/ ZX ZX 1.0) (*/ ZY ZY 1.0))) (gt0 C))<br/>               (let Tmp (- (*/ ZX ZX 1.0) (*/ ZY ZY 1.0) (- CX))<br/>                  (setq<br/>                     ZY (+ (*/ 2 ZX ZY 1.0) CY)<br/>                     ZX Tmp ) )<br/>               (dec 'C) )<br/>            (set (nth Ppm Y X) (list 0 C C)) ) ) )<br/>   (out \"img.ppm\"<br/>      (prinl \"P6\")<br/>      (prinl 400 \" \" 300)<br/>      (prinl 255)<br/>      (for Y Ppm (for X Y (apply wr X))) ) )</pre>"}, {"lang": "PostScript", "loc": 46, "block": "<pre class=\"text highlighted_source\">%!PS-Adobe-2.0<br/>%%BoundingBox: 0 0 300 200<br/>%%EndComments<br/>/origstate save def<br/>/ld {load def} bind def<br/>/m /moveto ld /g /setgray ld<br/>/dot { currentpoint 1 0 360 arc fill } bind def<br/>%%EndProlog<br/>% param<br/>/maxiter 200 def<br/>% complex manipulation<br/>/complex { 2 array astore } def<br/>/real { 0 get } def<br/>/imag { 1 get } def<br/>/cmul { /a exch def /b exch def<br/>    a real b real mul<br/>    a imag b imag mul sub<br/>    a real b imag mul<br/>    a imag b real mul add<br/>    2 array astore<br/>} def<br/>/cadd { aload pop 3 -1 roll aload pop<br/>    3 -1 roll add<br/>    3 1 roll add exch 2 array astore<br/>} def<br/>/cconj { aload pop neg 2 array astore } def<br/>/cabs2 { dup cconj cmul 0 get} def<br/>% mandel<br/>200 100 translate<br/>-200 1 100 { /x exch def<br/>  -100 1 100 { /y exch def<br/>    /z0 0.0 0.0 complex def<br/>    0 1 maxiter { /iter exch def<br/>\tx 100 div y 100 div complex<br/>\tz0 z0 cmul<br/>\tcadd dup /z0 exch def<br/>\tcabs2 4 gt {exit} if<br/>    } for<br/>    iter maxiter div g<br/>    x y m dot<br/>  } for<br/>} for<br/>%<br/>showpage<br/>origstate restore<br/>%%EOF</pre>"}, {"lang": "PowerShell", "loc": 22, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">16</span><br/><span class=\"re0\">$colors</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Enum<span class=\"br0\">]</span>::GetValues<span class=\"br0\">(</span><span class=\"br0\">[</span>System.ConsoleColor<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>; <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">84</span>; <span class=\"kw1\">Write-Host</span> <span class=\"st0\">\" \"</span> <span class=\"kw5\">-BackgroundColor</span> <span class=\"br0\">(</span><span class=\"re0\">$colors</span><span class=\"br0\">[</span><span class=\"re0\">$k</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw5\">-NoNewline</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>        <span class=\"kw3\">do</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$r</span> <span class=\"sy0\">-</span> <span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span> <span class=\"sy0\">/</span> <span class=\"nu0\">25</span><br/>            <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/>            <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$j</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">*</span> <span class=\"re0\">$j</span> <span class=\"sy0\">+</span> <span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">11</span> <span class=\"kw4\">-band</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">111</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">Write-Host</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OpenEdge/Progress", "loc": 45, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> print_str <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span> <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">INIT</span> <span class=\"st0\">''</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> X1 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">INIT</span> <span class=\"nu0\">50</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> Y1 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">INIT</span> <span class=\"nu0\">21</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> <span class=\"kw4\">X</span> <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> <span class=\"kw4\">Y</span> <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> N <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> I3 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> R3 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> Z1 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> Z2 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> A <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> B <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> I1 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">INIT</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> I2 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">INIT</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> R1 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">INIT</span> <span class=\"sy0\">-</span><span class=\"nu0\">2.0</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> R2 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">INIT</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> S1 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> S2 <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/>S1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>R2 <span class=\"sy0\">-</span> R1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> X1<span class=\"sy0\">.</span><br/>S2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>I2 <span class=\"sy0\">-</span> I1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> Y1<span class=\"sy0\">.</span><br/><span class=\"kw1\">DO</span> <span class=\"kw4\">Y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> Y1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>  <span class=\"me0\">I3</span> <span class=\"sy0\">=</span> I1 <span class=\"sy0\">+</span> S2 <span class=\"sy0\">*</span> <span class=\"kw4\">Y</span><span class=\"sy0\">.</span><br/>  <span class=\"kw1\">DO</span> <span class=\"kw4\">X</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> X1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>    <span class=\"me0\">R3</span> <span class=\"sy0\">=</span> R1 <span class=\"sy0\">+</span> S1 <span class=\"sy0\">*</span> <span class=\"kw4\">X</span><span class=\"sy0\">.</span><br/>    Z1 <span class=\"sy0\">=</span> R3<span class=\"sy0\">.</span><br/>    Z2 <span class=\"sy0\">=</span> I3<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">DO</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">29</span><span class=\"sy0\">:</span><br/>      <span class=\"me0\">A</span> <span class=\"sy0\">=</span> Z1 <span class=\"sy0\">*</span> Z1<span class=\"sy0\">.</span><br/>      B <span class=\"sy0\">=</span> Z2 <span class=\"sy0\">*</span> Z2<span class=\"sy0\">.</span><br/>      <span class=\"kw1\">IF</span> A <span class=\"sy0\">+</span> B <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4.0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">LEAVE</span><span class=\"sy0\">.</span><br/>      Z2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Z1 <span class=\"sy0\">*</span> Z2 <span class=\"sy0\">+</span> I3<span class=\"sy0\">.</span><br/>      Z1 <span class=\"sy0\">=</span> A <span class=\"sy0\">-</span> B <span class=\"sy0\">+</span> R3<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>    print_str <span class=\"sy0\">=</span> print_str <span class=\"sy0\">+</span> <span class=\"kw3\">CHR</span><span class=\"br0\">(</span><span class=\"nu0\">62</span> <span class=\"sy0\">-</span> N<span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>  <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>  print_str <span class=\"sy0\">=</span> print_str <span class=\"sy0\">+</span> <span class=\"st0\">'~n'</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">OUTPUT TO</span> <span class=\"st0\">\"C:\\Temp\\out.txt\"</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">MESSAGE</span> print_str<span class=\"sy0\">.</span><br/><span class=\"kw1\">OUTPUT CLOSE</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Processing", "loc": 65, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/><span class=\"sy3\">//</span> Following code <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> a zoomable Mandelbrot<span class=\"sy4\">.</span> <br/><span class=\"sy3\">//</span> Of course<span class=\"sy4\">,</span> you want to click on an interesting area <br/><span class=\"sy3\">//</span> with contrast and more colors to zoom in<span class=\"sy4\">.</span><br/>\u00a0<br/>double x<span class=\"sy4\">,</span> y<span class=\"sy4\">,</span> zr<span class=\"sy4\">,</span> zi<span class=\"sy4\">,</span> zr2<span class=\"sy4\">,</span> zi2<span class=\"sy4\">,</span> cr<span class=\"sy4\">,</span> ci<span class=\"sy4\">,</span> n<span class=\"sy4\">;</span><br/>double zmx1<span class=\"sy4\">,</span> zmx2<span class=\"sy4\">,</span> zmy1<span class=\"sy4\">,</span> zmy2<span class=\"sy4\">,</span> f<span class=\"sy4\">,</span> di<span class=\"sy4\">,</span> dj<span class=\"sy4\">;</span><br/>double fn1<span class=\"sy4\">,</span> fn2<span class=\"sy4\">,</span> fn3<span class=\"sy4\">,</span> re<span class=\"sy4\">,</span> gr<span class=\"sy4\">,</span> bl<span class=\"sy4\">,</span> xt<span class=\"sy4\">,</span> yt<span class=\"sy4\">,</span> i<span class=\"sy4\">,</span> j<span class=\"sy4\">;</span><br/>\u00a0<br/>void setup<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  size<span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"sy4\">,</span> <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  di <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  dj <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  f <span class=\"sy6\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/>  fn1 <span class=\"sy6\">=</span> random<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>  fn2 <span class=\"sy6\">=</span> random<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>  fn3 <span class=\"sy6\">=</span> random<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  zmx1 <span class=\"sy6\">=</span> int<span class=\"br0\">(</span>width <span class=\"sy3\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  zmx2 <span class=\"sy6\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>  zmy1 <span class=\"sy6\">=</span> int<span class=\"br0\">(</span>height <span class=\"sy3\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  zmy2 <span class=\"sy6\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>void draw<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  if <span class=\"br0\">(</span>i <span class=\"sy6\">&lt;=</span> width<span class=\"br0\">)</span> i<span class=\"sy3\">++</span><span class=\"sy4\">;</span><br/>  x <span class=\"sy6\">=</span>  <span class=\"br0\">(</span>i <span class=\"sy3\">+</span>  di<span class=\"br0\">)</span><span class=\"sy3\">/</span> zmx1 <span class=\"sy3\">-</span> zmx2<span class=\"sy4\">;</span><br/>  for <span class=\"br0\">(</span> j <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy6\">&lt;=</span> height<span class=\"sy4\">;</span> j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    y <span class=\"sy6\">=</span> zmy2 <span class=\"sy3\">-</span> <span class=\"br0\">(</span>j <span class=\"sy3\">+</span> dj<span class=\"br0\">)</span> <span class=\"sy3\">/</span> zmy1<span class=\"sy4\">;</span><br/>    zr <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    zi <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    zr2 <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <br/>    zi2 <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <br/>    cr <span class=\"sy6\">=</span> x<span class=\"sy4\">;</span>   <br/>    ci <span class=\"sy6\">=</span> y<span class=\"sy4\">;</span>  <br/>    n <span class=\"sy6\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    while <span class=\"br0\">(</span>n <span class=\"sy6\">&lt;</span> <span class=\"nu0\">200</span> <span class=\"sy5\">&amp;&amp;</span> <span class=\"br0\">(</span>zr2 <span class=\"sy3\">+</span> zi2<span class=\"br0\">)</span> <span class=\"sy6\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      zi2 <span class=\"sy6\">=</span> zi <span class=\"sy3\">*</span> zi<span class=\"sy4\">;</span><br/>      zr2 <span class=\"sy6\">=</span> zr <span class=\"sy3\">*</span> zr<span class=\"sy4\">;</span><br/>      zi <span class=\"sy6\">=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> zi <span class=\"sy3\">*</span> zr <span class=\"sy3\">+</span> ci<span class=\"sy4\">;</span><br/>      zr <span class=\"sy6\">=</span> zr2 <span class=\"sy3\">-</span> zi2 <span class=\"sy3\">+</span> cr<span class=\"sy4\">;</span><br/>      n<span class=\"sy3\">++</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span>  <br/>    re <span class=\"sy6\">=</span> <span class=\"br0\">(</span>n <span class=\"sy3\">*</span> fn1<span class=\"br0\">)</span> <span class=\"co1\">% 255;</span><br/>    gr <span class=\"sy6\">=</span> <span class=\"br0\">(</span>n <span class=\"sy3\">*</span> fn2<span class=\"br0\">)</span> <span class=\"co1\">% 255;</span><br/>    bl <span class=\"sy6\">=</span> <span class=\"br0\">(</span>n <span class=\"sy3\">*</span> fn3<span class=\"br0\">)</span> <span class=\"co1\">% 255;</span><br/>    stroke<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">float</span></a><span class=\"br0\">)</span>re<span class=\"sy4\">,</span> <span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">float</span></a><span class=\"br0\">)</span>gr<span class=\"sy4\">,</span> <span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">float</span></a><span class=\"br0\">)</span>bl<span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>    point<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">float</span></a><span class=\"br0\">)</span>i<span class=\"sy4\">,</span> <span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">float</span></a><span class=\"br0\">)</span>j<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>void mousePressed<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  background<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>  xt <span class=\"sy6\">=</span> mouseX<span class=\"sy4\">;</span><br/>  yt <span class=\"sy6\">=</span> mouseY<span class=\"sy4\">;</span><br/>  di <span class=\"sy6\">=</span> di <span class=\"sy3\">+</span> xt <span class=\"sy3\">-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">float</span></a><span class=\"br0\">(</span>width <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  dj <span class=\"sy6\">=</span> dj <span class=\"sy3\">+</span> yt <span class=\"sy3\">-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">float</span></a><span class=\"br0\">(</span>height <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  zmx1 <span class=\"sy6\">=</span> zmx1 <span class=\"sy3\">*</span> f<span class=\"sy4\">;</span><br/>  zmx2 <span class=\"sy6\">=</span> zmx2 <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy3\">/</span> f<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  zmy1 <span class=\"sy6\">=</span> zmy1 <span class=\"sy3\">*</span> f<span class=\"sy4\">;</span><br/>  zmy2 <span class=\"sy6\">=</span> zmy2 <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy3\">/</span> f<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  di <span class=\"sy6\">=</span> di <span class=\"sy3\">*</span> f<span class=\"sy4\">;</span><br/>  dj <span class=\"sy6\">=</span> dj <span class=\"sy3\">*</span> f<span class=\"sy4\">;</span><br/>  i <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  j <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 39, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>pce<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>mandelbrot <span class=\"sy1\">:-</span><br/>    new<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Mandelbrot Set'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    send<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> size<span class=\"br0\">(</span><span class=\"nu0\">700</span><span class=\"sy4\">,</span> <span class=\"nu0\">650</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    new<span class=\"br0\">(</span>Img<span class=\"sy4\">,</span> image<span class=\"br0\">(</span><span class=\"sy5\">@</span>nil<span class=\"sy4\">,</span> width <span class=\"sy4\">:</span><span class=\"sy6\">=</span> <span class=\"nu0\">700</span><span class=\"sy4\">,</span> height <span class=\"sy4\">:</span><span class=\"sy6\">=</span> <span class=\"nu0\">650</span><span class=\"sy4\">,</span> kind <span class=\"sy4\">:</span><span class=\"sy6\">=</span> pixmap<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>    forall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">699</span><span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>           <span class=\"br0\">(</span>   forall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">649</span><span class=\"sy4\">,</span> J<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>              <span class=\"br0\">(</span>   get_RGB<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                  R1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>R <span class=\"sy3\">*</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">65536</span><span class=\"sy4\">,</span><br/>                  G1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>G <span class=\"sy3\">*</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">65536</span><span class=\"sy4\">,</span><br/>                  B1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>B <span class=\"sy3\">*</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">65536</span><span class=\"sy4\">,</span><br/>                  send<span class=\"br0\">(</span>Img<span class=\"sy4\">,</span> pixel<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span><span class=\"sy5\">@</span>default<span class=\"sy4\">,</span> R1<span class=\"sy4\">,</span> G1<span class=\"sy4\">,</span> B1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    new<span class=\"br0\">(</span>Bmp<span class=\"sy4\">,</span> bitmap<span class=\"br0\">(</span>Img<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    send<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Bmp<span class=\"sy4\">,</span> point<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    send<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>get_RGB<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> B<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    CX <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>X <span class=\"sy3\">-</span> <span class=\"nu0\">350</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">150</span><span class=\"sy4\">,</span><br/>    CY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>Y <span class=\"sy3\">-</span> <span class=\"nu0\">325</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">150</span><span class=\"sy4\">,</span><br/>    Iter <span class=\"sy6\">=</span> <span class=\"nu0\">570</span><span class=\"sy4\">,</span><br/>    compute_RGB<span class=\"br0\">(</span>CX<span class=\"sy4\">,</span> CY<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Iter<span class=\"sy4\">,</span> It<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    IterF <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> It <span class=\"sy2\">\\/</span> It <span class=\"sy6\">&lt;&lt;</span> <span class=\"nu0\">15</span><span class=\"sy4\">,</span><br/>    R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> IterF <span class=\"sy6\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy4\">,</span><br/>    Iter1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> IterF <span class=\"sy3\">-</span> R <span class=\"sy6\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"sy4\">,</span><br/>    G <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Iter1 <span class=\"sy6\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">,</span><br/>    B  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Iter1 <span class=\"sy3\">-</span> G <span class=\"sy6\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_RGB<span class=\"br0\">(</span>CX<span class=\"sy4\">,</span> CY<span class=\"sy4\">,</span> ZX<span class=\"sy4\">,</span> ZY<span class=\"sy4\">,</span> Iter<span class=\"sy4\">,</span> IterF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    ZX <span class=\"sy3\">*</span> ZX <span class=\"sy3\">+</span> ZY <span class=\"sy3\">*</span> ZY <span class=\"sy6\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>    Iter <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>    <span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>    Tmp <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  ZX <span class=\"sy3\">*</span> ZX <span class=\"sy3\">-</span> ZY <span class=\"sy3\">*</span> ZY <span class=\"sy3\">+</span> CX<span class=\"sy4\">,</span><br/>    ZY1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> ZX <span class=\"sy3\">*</span> ZY <span class=\"sy3\">+</span> CY<span class=\"sy4\">,</span><br/>    Iter1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Iter <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>    compute_RGB<span class=\"br0\">(</span>CX<span class=\"sy4\">,</span> CY<span class=\"sy4\">,</span> Tmp<span class=\"sy4\">,</span> ZY1<span class=\"sy4\">,</span> Iter1<span class=\"sy4\">,</span> IterF<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_RGB<span class=\"br0\">(</span>_CX<span class=\"sy4\">,</span> _CY<span class=\"sy4\">,</span> _ZX<span class=\"sy4\">,</span> _ZY<span class=\"sy4\">,</span> Iter<span class=\"sy4\">,</span> Iter<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 58, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/>#Window1   <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>#Image1    <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>#ImgGadget <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>#max_iteration <span class=\"sy0\">=</span>  <span class=\"nu0\">64</span><br/>#width         <span class=\"sy0\">=</span> <span class=\"nu0\">800</span><br/>#height        <span class=\"sy0\">=</span> <span class=\"nu0\">600</span><br/><span class=\"kw1\">Define</span>.d x0 ,y0 ,xtemp ,cr, ci<br/><span class=\"kw1\">Define</span>.i i, n, x, y ,Event ,color<br/>\u00a0<br/><span class=\"kw1\">Dim</span> Color.l <span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">63</span><br/>  Color<span class=\"br0\">(</span>   <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> n <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>  n<span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">128</span>, <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> n, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>  Color<span class=\"br0\">(</span>  <span class=\"nu0\">64</span> <span class=\"sy0\">+</span> n <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>  <span class=\"nu0\">64</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> n <span class=\"br0\">)</span><br/>  Color<span class=\"br0\">(</span> <span class=\"nu0\">128</span> <span class=\"sy0\">+</span> n <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>  <span class=\"nu0\">64</span>, <span class=\"nu0\">255</span> <span class=\"sy0\">-</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> n , <span class=\"nu0\">255</span> <span class=\"br0\">)</span><br/>  Color<span class=\"br0\">(</span> <span class=\"nu0\">192</span> <span class=\"sy0\">+</span> n <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>  <span class=\"nu0\">64</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span> <span class=\"sy0\">-</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> n <span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span>#Window1, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, #width, #height, <span class=\"st0\">\"'Mandelbrot set' PureBasic Example\"</span>, #PB_Window_SystemMenu <span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">CreateImage</span><span class=\"br0\">(</span>#Image1, #width, #height<span class=\"br0\">)</span><br/>       <span class=\"kw2\">ImageGadget</span><span class=\"br0\">(</span>#ImgGadget, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, #width, #height, <span class=\"kw2\">ImageID</span><span class=\"br0\">(</span>#Image1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">For</span> y.i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #height <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>         <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">ImageOutput</span><span class=\"br0\">(</span>#Image1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">For</span> x.i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span>  #width <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>           x0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>           y0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"co1\">;</span><br/>           cr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> #width<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2.5</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>           ci <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">/</span> #height<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2.5</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.25</span><br/>           i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>           <span class=\"kw1\">While</span>  <span class=\"br0\">(</span>x0<span class=\"sy0\">*</span>x0 <span class=\"sy0\">+</span> y0<span class=\"sy0\">*</span>y0 <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">4.0</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> i <span class=\"sy0\">&lt;</span> #max_iteration<br/>             i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>             xtemp <span class=\"sy0\">=</span> x0<span class=\"sy0\">*</span>x0 <span class=\"sy0\">-</span> y0<span class=\"sy0\">*</span>y0 <span class=\"sy0\">+</span> cr<br/>             y0    <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>x0<span class=\"sy0\">*</span>y0 <span class=\"sy0\">+</span> ci<br/>             x0    <span class=\"sy0\">=</span> xtemp<br/>           <span class=\"kw1\">Wend</span><br/>           <span class=\"kw1\">If</span> i <span class=\"sy0\">&gt;=</span> #max_iteration<br/>              <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>x, y,  <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>           <span class=\"kw1\">Else</span><br/>              <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>x, y,  Color<span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>         <span class=\"kw1\">Next</span><br/>         <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>         <span class=\"kw2\">SetGadgetState</span><span class=\"br0\">(</span>#ImgGadget, <span class=\"kw2\">ImageID</span><span class=\"br0\">(</span>#Image1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">Repeat</span><br/>           Event <span class=\"sy0\">=</span> <span class=\"kw2\">WindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">If</span> Event <span class=\"sy0\">=</span> #PB_Event_CloseWindow<br/>             <span class=\"kw1\">End</span><br/>           <span class=\"kw1\">EndIf</span><br/>         <span class=\"kw1\">Until</span> Event <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>       <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Repeat</span><br/>      Event <span class=\"sy0\">=</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Until</span> Event <span class=\"sy0\">=</span> #PB_Event_CloseWindow<br/>  <span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># Python 3.0+ and 2.5+</span><br/><span class=\"kw1\">try</span>:<br/>    <span class=\"kw1\">from</span> functools <span class=\"kw1\">import</span> <span class=\"kw2\">reduce</span><br/><span class=\"kw1\">except</span>:<br/>    <span class=\"kw1\">pass</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> mandelbrot<span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> z<span class=\"sy0\">,</span> _: z * z + a<span class=\"sy0\">,</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> step<span class=\"br0\">(</span>start<span class=\"sy0\">,</span> step<span class=\"sy0\">,</span> iterations<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>start + <span class=\"br0\">(</span>i * step<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>iterations<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>rows <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"*\"</span> <span class=\"kw1\">if</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>mandelbrot<span class=\"br0\">(</span><span class=\"kw2\">complex</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">else</span> <span class=\"st0\">\" \"</span><br/>        <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> step<span class=\"br0\">(</span>-<span class=\"nu0\">2.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">.0315</span><span class=\"sy0\">,</span> <span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> step<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">.05</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> rows<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 23, "block": "<pre class=\"text highlighted_source\">iterate.until.escape &lt;- function(z, c, trans, cond, max=50, response=dwell) {<br/>  #we iterate all active points in the same array operation,<br/>  #and keeping track of which points are still iterating.<br/>  active &lt;- seq_along(z)<br/>  dwell &lt;- z<br/>  dwell[] &lt;- 0<br/>  for (i in 1:max) {<br/>    z[active] &lt;- trans(z[active], c[active]);<br/>    survived &lt;- cond(z[active])<br/>    dwell[active[!survived]] &lt;- i<br/>    active &lt;- active[survived]<br/>    if (length(active) == 0) break<br/>  }<br/>  eval(substitute(response))<br/>}<br/>\u00a0<br/>re = seq(-2, 1, len=500)<br/>im = seq(-1.5, 1.5, len=500)<br/>c &lt;- outer(re, im, function(x,y) complex(real=x, imaginary=y))<br/>x &lt;- iterate.until.escape(array(0, dim(c)), c,<br/>                          function(z,c)z^2+c, function(z)abs(z) &lt;= 2,<br/>                          max=100)<br/>image(x)</pre>"}, {"lang": "Racket", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require racket/draw)<br/>\u00a0<br/>(define (iterations a z i)<br/>  (define z\u2032 (+ (* z z) a))<br/>  (if (or (= i 255) (&gt; (magnitude z\u2032) 2))<br/>      i<br/>      (iterations a z\u2032 (add1 i))))<br/>\u00a0<br/>(define (iter-&gt;color i)<br/>  (if (= i 255)<br/>      (make-object color% \"black\")<br/>      (make-object color% (* 5 (modulo i 15)) (* 32 (modulo i 7)) (* 8 (modulo i 31)))))<br/>\u00a0<br/>(define (mandelbrot width height)<br/>  (define target (make-bitmap width height))<br/>  (define dc (new bitmap-dc% [bitmap target]))<br/>  (for* ([x width] [y height])<br/>    (define real-x (- (* 3.0 (/ x width)) 2.25))<br/>    (define real-y (- (* 2.5 (/ y height)) 1.25))<br/>    (send dc set-pen (iter-&gt;color (iterations (make-rectangular real-x real-y) 0 0)) 1 'solid)<br/>    (send dc draw-point x y))<br/>  (send target save-file \"mandelbrot.png\" 'png))<br/>\u00a0<br/>(mandelbrot 300 200)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  generates and displays a Mandelbrot set as an ASCII art character image.*/</span><br/>@ = <span class=\"st0\">'&gt;=&lt;;:9876543210/.-,+*)('</span><span class=\"st0\">'&amp;%$#\"!'</span>            <span class=\"coMULTI\">/*the characters used in the display.  */</span><br/>Xsize = <span class=\"nu0\">59</span>;  minRE = -<span class=\"nu0\">2</span>;  maxRE = +<span class=\"nu0\">1</span>;     stepX = <span class=\"br0\">(</span>maxRE-minRE<span class=\"br0\">)</span> <span class=\"sy0\">/</span> Xsize<br/>Ysize = <span class=\"nu0\">21</span>;  minIM = -<span class=\"nu0\">1</span>;  maxIM = +<span class=\"nu0\">1</span>;     stepY = <span class=\"br0\">(</span>maxIM-minIM<span class=\"br0\">)</span> <span class=\"sy0\">/</span> Ysize<br/>\u00a0<br/>  <span class=\"kw1\">do</span> y=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> ysize;      im=minIM + stepY<span class=\"sy0\">*</span>y<br/>  $=<br/>        <span class=\"kw1\">do</span> x=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> Xsize;   re=minRE + stepX<span class=\"sy0\">*</span>x;    zr=re;    zi=im<br/>\u00a0<br/>            <span class=\"kw1\">do</span> n=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">30</span>;  a=zr<span class=\"sy0\">**</span><span class=\"nu0\">2</span>;   b=zi<span class=\"sy0\">**</span><span class=\"nu0\">2</span>;    <span class=\"kw1\">if</span> a+b<span class=\"sy0\">&gt;</span><span class=\"nu0\">4</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>            zi=zr<span class=\"sy0\">*</span>zi<span class=\"sy0\">*</span><span class=\"nu0\">2</span> + im;            zr=a-b+re<br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/>\u00a0<br/>        $=$ <span class=\"sy0\">||</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>@, n+<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*append number (as a char) to $ string*/</span><br/>        <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*x*/</span><br/>  <span class=\"kw1\">say</span> $                                          <span class=\"coMULTI\">/*display a line of  character  output.*/</span><br/>  <span class=\"kw3\">end</span>             <span class=\"coMULTI\">/*y*/</span>                          <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 55, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"guilib.ring\"<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>               setwindowtitle(\"Mandelbrot set\")<br/>               setgeometry(100,100,500,500)<br/>               label1 = new qlabel(win1) {<br/>                        setgeometry(10,10,400,400)<br/>                        settext(\"\")<br/>               }<br/>               new qpushbutton(win1) {<br/>                   setgeometry(200,400,100,30)<br/>                   settext(\"draw\")<br/>                   setclickevent(\"draw()\")<br/>               }<br/>               show()<br/>         }<br/>         exec()<br/>         }<br/>\u00a0<br/>func draw<br/>        p1 = new qpicture()<br/>             color = new qcolor() {<br/>             setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>              setcolor(color)<br/>              setwidth(1)<br/>        }<br/>        new qpainter() {<br/>            begin(p1)<br/>            setpen(pen)<br/>\u00a0<br/>        x1=300 y1=250<br/>        i1=-1 i2=1 r1=-2 r2=1<br/>        s1=(r2-r1)/x1 s2=(i2-i1)/y1<br/>        for y=0 to y1<br/>            i3=i1+s2*y<br/>            for x=0 to x1<br/>                r3=r1+s1*x z1=r3 z2=i3<br/>                for n=0 to 30<br/>                    a=z1*z1 b=z2*z2<br/>                    if a+b&gt;4 exit ok<br/>                       z2=2*z1*z2+i3 z1=a-b+r3<br/>                next<br/>                if n\u00a0!= 31 drawpoint(x,y) ok<br/>            next <br/>        next<br/>\u00a0<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'complex'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mandelbrot<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>z,c<span class=\"sy0\">|</span> z<span class=\"sy0\">*</span>z <span class=\"sy0\">+</span> a <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span>.<span class=\"me1\">step</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span>.<span class=\"me1\">step</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span>,<span class=\"nu0\">0.0315</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">print</span> mandelbrot<span class=\"br0\">(</span><span class=\"kw4\">Complex</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? <span class=\"st0\">'*'</span>\u00a0: <span class=\"st0\">' '</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">extern crate image;<br/>extern crate num_complex;<br/>\u00a0<br/>use std::fs::File;<br/>use num_complex::Complex;<br/>\u00a0<br/>fn main() {<br/>    let max_iterations = 256u16;<br/>    let img_side = 800u32;<br/>    let cxmin = -2f32;<br/>    let cxmax = 1f32;<br/>    let cymin = -1.5f32;<br/>    let cymax = 1.5f32;<br/>    let scalex = (cxmax - cxmin) / img_side as f32;<br/>    let scaley = (cymax - cymin) / img_side as f32;<br/>\u00a0<br/>    // Create a new ImgBuf<br/>    let mut imgbuf = image::ImageBuffer::new(img_side, img_side);<br/>\u00a0<br/>    // Calculate for each pixel<br/>    for (x, y, pixel) in imgbuf.enumerate_pixels_mut() {<br/>        let cx = cxmin + x as f32 * scalex;<br/>        let cy = cymin + y as f32 * scaley;<br/>\u00a0<br/>        let c = Complex::new(cx, cy);<br/>        let mut z = Complex::new(0f32, 0f32);<br/>\u00a0<br/>        let mut i = 0;<br/>        for t in 0..max_iterations {<br/>            if z.norm() &gt; 2.0 {<br/>                break;<br/>            }<br/>            z = z * z + c;<br/>            i = t;<br/>        }<br/>\u00a0<br/>        *pixel = image::Luma([i as u8]);<br/>    }<br/>\u00a0<br/>    // Save image<br/>    let fout = &amp;mut File::create(\"fractal.png\").unwrap();<br/>    image::ImageLuma8(imgbuf).save(fout, image::PNG).unwrap();<br/>}</pre>"}, {"lang": "Scala", "loc": 43, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> org.<span class=\"me1\">rosettacode</span>.<span class=\"me1\">ArithmeticComplex</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Color</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Mandelbrot<br/><span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> generate<span class=\"br0\">(</span>width<span class=\"sy0\">:</span>Int <span class=\"sy0\">=</span><span class=\"nu0\">600</span>, height<span class=\"sy0\">:</span>Int <span class=\"sy0\">=</span><span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bm<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> RgbBitmap<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxIter<span class=\"sy0\">=</span><span class=\"nu0\">1000</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xMin <span class=\"sy0\">=</span> -<span class=\"nu0\">2.0</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xMax <span class=\"sy0\">=</span>  <span class=\"nu0\">1.0</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> yMin <span class=\"sy0\">=</span> -<span class=\"nu0\">1.0</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> yMax <span class=\"sy0\">=</span>  <span class=\"nu0\">1.0</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cx<span class=\"sy0\">=</span><span class=\"br0\">(</span>xMax-xMin<span class=\"br0\">)</span>/width<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cy<span class=\"sy0\">=</span><span class=\"br0\">(</span>yMax-yMin<span class=\"br0\">)</span>/height<br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until bm.<span class=\"me1\">height</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until bm.<span class=\"me1\">width</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c<span class=\"sy0\">=</span>Complex<span class=\"br0\">(</span>xMin+x<span class=\"sy0\">*</span>cx, yMin+y<span class=\"sy0\">*</span>cy<span class=\"br0\">)</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> iter<span class=\"sy0\">=</span>itMandel<span class=\"br0\">(</span>c, maxIter, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>         bm.<span class=\"me1\">setPixel</span><span class=\"br0\">(</span>x, y, getColor<span class=\"br0\">(</span>iter, maxIter<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      bm<br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> itMandel<span class=\"br0\">(</span>c<span class=\"sy0\">:</span>Complex, imax<span class=\"sy0\">:</span>Int, bailout<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> z<span class=\"sy0\">=</span>Complex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until imax<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         z<span class=\"sy0\">=</span>z<span class=\"sy0\">*</span>z+c<span class=\"sy0\">;</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>z.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> bailout<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> i<br/>      <span class=\"br0\">}</span><br/>      imax<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> getColor<span class=\"br0\">(</span>iter<span class=\"sy0\">:</span>Int, max<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Color<span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>iter<span class=\"sy0\">==</span>max<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Color.<span class=\"me1\">BLACK</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> c<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>math.<span class=\"me1\">log</span><span class=\"br0\">(</span>iter<span class=\"br0\">)</span>/math.<span class=\"me1\">log</span><span class=\"br0\">(</span>max-<span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>c<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>c<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span><span class=\"nu0\">255</span>, <span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>c-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span><span class=\"nu0\">255</span>, <span class=\"nu0\">255</span>, <span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>c-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 41, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> x<span class=\"sy0\">-</span>centre <span class=\"sy0\">-</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> y<span class=\"sy0\">-</span>centre <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> width <span class=\"nu0\">4.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> i<span class=\"sy0\">-</span><span class=\"kw1\">max</span> <span class=\"nu0\">800</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> j<span class=\"sy0\">-</span><span class=\"kw1\">max</span> <span class=\"nu0\">600</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> n <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> r<span class=\"sy0\">-</span><span class=\"kw1\">max</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> file <span class=\"st0\">\"out.pgm\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> colour<span class=\"sy0\">-</span><span class=\"kw1\">max</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> pixel<span class=\"sy0\">-</span>size <span class=\"br0\">(</span><span class=\"sy0\">/</span> width i<span class=\"sy0\">-</span><span class=\"kw1\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> x<span class=\"sy0\">-</span>offset <span class=\"br0\">(</span><span class=\"sy0\">-</span> x<span class=\"sy0\">-</span>centre <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">0.5</span> pixel<span class=\"sy0\">-</span>size <span class=\"br0\">(</span><span class=\"sy0\">+</span> i<span class=\"sy0\">-</span><span class=\"kw1\">max</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> y<span class=\"sy0\">-</span>offset <span class=\"br0\">(</span><span class=\"sy0\">+</span> y<span class=\"sy0\">-</span>centre <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">0.5</span> pixel<span class=\"sy0\">-</span>size <span class=\"br0\">(</span><span class=\"sy0\">+</span> j<span class=\"sy0\">-</span><span class=\"kw1\">max</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>inside? z<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>inside? z<span class=\"sy0\">-</span><span class=\"nu0\">0</span> z n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">magnitude</span> z<span class=\"br0\">)</span> r<span class=\"sy0\">-</span><span class=\"kw1\">max</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">*</span>inside? z<span class=\"sy0\">-</span><span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> z z<span class=\"br0\">)</span> z<span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span>inside? z <span class=\"nu0\">0</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>boolean<span class=\"sy0\">-&gt;</span>integer b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> b colour<span class=\"sy0\">-</span><span class=\"kw1\">max</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>pixel i j<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>boolean<span class=\"sy0\">-&gt;</span>integer<br/>    <span class=\"br0\">(</span>inside?<br/>      <span class=\"br0\">(</span><span class=\"kw1\">make-rectangular</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x<span class=\"sy0\">-</span>offset <span class=\"br0\">(</span><span class=\"sy0\">*</span> pixel<span class=\"sy0\">-</span>size i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"sy0\">-</span> y<span class=\"sy0\">-</span>offset <span class=\"br0\">(</span><span class=\"sy0\">*</span> pixel<span class=\"sy0\">-</span>size j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>plot<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">with-output-to-file</span> file<br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"P2\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">display</span> i<span class=\"sy0\">-</span><span class=\"kw1\">max</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">display</span> j<span class=\"sy0\">-</span><span class=\"kw1\">max</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">display</span> colour<span class=\"sy0\">-</span><span class=\"kw1\">max</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> j <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> j j<span class=\"sy0\">-</span><span class=\"kw1\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i i<span class=\"sy0\">-</span><span class=\"kw1\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>pixel i j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>plot<span class=\"br0\">)</span></pre>"}, {"lang": "Scratch", "loc": 48, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>$canvasWidth<span class=\"sy0\">:</span> <span class=\"nu0\">200</span><span class=\"sy0\">;</span><br/>$canvasHeight<span class=\"sy0\">:</span> <span class=\"nu0\">200</span><span class=\"sy0\">;</span><br/>$iterations<span class=\"sy0\">:</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>$xCorner<span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>$yCorner<span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.5</span><span class=\"sy0\">;</span><br/>$zoom<span class=\"sy0\">:</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>$data<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!</span>global<span class=\"sy0\">;</span><br/><span class=\"sy0\">@</span>mixin plot <span class=\"br0\">(</span>$x<span class=\"sy0\">,</span>$y<span class=\"sy0\">,</span>$count<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  $index<span class=\"sy0\">:</span> <span class=\"br0\">(</span>$y <span class=\"sy0\">*</span> $canvasWidth <span class=\"sy0\">+</span> $x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>  $r<span class=\"sy0\">:</span> $count <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span> <span class=\"sy0\">+</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>  $g<span class=\"sy0\">:</span> $count <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span> <span class=\"sy0\">+</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>  $b<span class=\"sy0\">:</span> $count <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span> <span class=\"sy0\">+</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>  $data<span class=\"sy0\">:</span> append<span class=\"br0\">(</span>$data<span class=\"sy0\">,</span> $x <span class=\"sy0\">+</span> px $y <span class=\"sy0\">+</span> px <span class=\"nu0\">0</span> rgb<span class=\"br0\">(</span>$r<span class=\"sy0\">,</span>$g<span class=\"sy0\">,</span>$b<span class=\"br0\">)</span><span class=\"sy0\">,</span> comma<span class=\"br0\">)</span><span class=\"sy0\">!</span>global<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">@</span><span class=\"kw1\">for</span> $x from <span class=\"nu0\">1</span> to $canvasWidth <span class=\"br0\">{</span><br/>    <span class=\"sy0\">@</span><span class=\"kw1\">for</span> $y from <span class=\"nu0\">1</span> to $canvasHeight <span class=\"br0\">{</span><br/>      $count<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      $size<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      $cx<span class=\"sy0\">:</span> $xCorner <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$x <span class=\"sy0\">*</span> $zoom<span class=\"br0\">)</span> <span class=\"sy0\">/</span> $canvasWidth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      $cy<span class=\"sy0\">:</span> $yCorner <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$y <span class=\"sy0\">*</span> $zoom<span class=\"br0\">)</span> <span class=\"sy0\">/</span> $canvasHeight<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      $zx<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      $zy<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"sy0\">@</span><span class=\"kw1\">while</span> $count <span class=\"sy0\">&lt;</span> $iterations <span class=\"kw2\">and</span> $size <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">4</span>  <span class=\"br0\">{</span><br/>        $count<span class=\"sy0\">:</span> $count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        $temp<span class=\"sy0\">:</span>  <span class=\"br0\">(</span>$zx <span class=\"sy0\">*</span> $zx<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>$zy <span class=\"sy0\">*</span> $zy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        $zy<span class=\"sy0\">:</span>  <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> $zx <span class=\"sy0\">*</span> $zy<span class=\"br0\">)</span> <span class=\"sy0\">+</span> $cy<span class=\"sy0\">;</span><br/>        $zx<span class=\"sy0\">:</span>  $temp <span class=\"sy0\">+</span> $cx<span class=\"sy0\">;</span><br/>        $size<span class=\"sy0\">:</span>  <span class=\"br0\">(</span>$zx <span class=\"sy0\">*</span> $zx<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>$zy <span class=\"sy0\">*</span> $zy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"sy0\">@</span>include plot<span class=\"br0\">(</span>$x<span class=\"sy0\">,</span> $y<span class=\"sy0\">,</span> $count<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>.<span class=\"me1\">set</span> <span class=\"br0\">{</span><br/>  height<span class=\"sy0\">:</span> 1px<span class=\"sy0\">;</span><br/>  width<span class=\"sy0\">:</span> 1px<span class=\"sy0\">;</span><br/>  position<span class=\"sy0\">:</span> absolute<span class=\"sy0\">;</span><br/>  top<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">%;</span><br/>  left<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">%;</span><br/>  transform<span class=\"sy0\">:</span> translate<span class=\"br0\">(</span>$canvasWidth<span class=\"sy0\">*</span>0.5px<span class=\"sy0\">,</span> $canvasWidth<span class=\"sy0\">*</span>0.5px<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  box<span class=\"sy0\">-</span>shadow<span class=\"sy0\">:</span> $data<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Sass/SCSS", "loc": 48, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>$canvasWidth<span class=\"sy0\">:</span> <span class=\"nu0\">200</span><span class=\"sy0\">;</span><br/>$canvasHeight<span class=\"sy0\">:</span> <span class=\"nu0\">200</span><span class=\"sy0\">;</span><br/>$iterations<span class=\"sy0\">:</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>$xCorner<span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>$yCorner<span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.5</span><span class=\"sy0\">;</span><br/>$zoom<span class=\"sy0\">:</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>$data<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!</span>global<span class=\"sy0\">;</span><br/><span class=\"sy0\">@</span>mixin plot <span class=\"br0\">(</span>$x<span class=\"sy0\">,</span>$y<span class=\"sy0\">,</span>$count<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  $index<span class=\"sy0\">:</span> <span class=\"br0\">(</span>$y <span class=\"sy0\">*</span> $canvasWidth <span class=\"sy0\">+</span> $x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>  $r<span class=\"sy0\">:</span> $count <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span> <span class=\"sy0\">+</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>  $g<span class=\"sy0\">:</span> $count <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span> <span class=\"sy0\">+</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>  $b<span class=\"sy0\">:</span> $count <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span> <span class=\"sy0\">+</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>  $data<span class=\"sy0\">:</span> append<span class=\"br0\">(</span>$data<span class=\"sy0\">,</span> $x <span class=\"sy0\">+</span> px $y <span class=\"sy0\">+</span> px <span class=\"nu0\">0</span> rgb<span class=\"br0\">(</span>$r<span class=\"sy0\">,</span>$g<span class=\"sy0\">,</span>$b<span class=\"br0\">)</span><span class=\"sy0\">,</span> comma<span class=\"br0\">)</span><span class=\"sy0\">!</span>global<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">@</span><span class=\"kw1\">for</span> $x from <span class=\"nu0\">1</span> to $canvasWidth <span class=\"br0\">{</span><br/>    <span class=\"sy0\">@</span><span class=\"kw1\">for</span> $y from <span class=\"nu0\">1</span> to $canvasHeight <span class=\"br0\">{</span><br/>      $count<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      $size<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      $cx<span class=\"sy0\">:</span> $xCorner <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$x <span class=\"sy0\">*</span> $zoom<span class=\"br0\">)</span> <span class=\"sy0\">/</span> $canvasWidth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      $cy<span class=\"sy0\">:</span> $yCorner <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$y <span class=\"sy0\">*</span> $zoom<span class=\"br0\">)</span> <span class=\"sy0\">/</span> $canvasHeight<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      $zx<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      $zy<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"sy0\">@</span><span class=\"kw1\">while</span> $count <span class=\"sy0\">&lt;</span> $iterations <span class=\"kw2\">and</span> $size <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">4</span>  <span class=\"br0\">{</span><br/>        $count<span class=\"sy0\">:</span> $count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        $temp<span class=\"sy0\">:</span>  <span class=\"br0\">(</span>$zx <span class=\"sy0\">*</span> $zx<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>$zy <span class=\"sy0\">*</span> $zy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        $zy<span class=\"sy0\">:</span>  <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> $zx <span class=\"sy0\">*</span> $zy<span class=\"br0\">)</span> <span class=\"sy0\">+</span> $cy<span class=\"sy0\">;</span><br/>        $zx<span class=\"sy0\">:</span>  $temp <span class=\"sy0\">+</span> $cx<span class=\"sy0\">;</span><br/>        $size<span class=\"sy0\">:</span>  <span class=\"br0\">(</span>$zx <span class=\"sy0\">*</span> $zx<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>$zy <span class=\"sy0\">*</span> $zy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"sy0\">@</span>include plot<span class=\"br0\">(</span>$x<span class=\"sy0\">,</span> $y<span class=\"sy0\">,</span> $count<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>.<span class=\"me1\">set</span> <span class=\"br0\">{</span><br/>  height<span class=\"sy0\">:</span> 1px<span class=\"sy0\">;</span><br/>  width<span class=\"sy0\">:</span> 1px<span class=\"sy0\">;</span><br/>  position<span class=\"sy0\">:</span> absolute<span class=\"sy0\">;</span><br/>  top<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">%;</span><br/>  left<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">%;</span><br/>  transform<span class=\"sy0\">:</span> translate<span class=\"br0\">(</span>$canvasWidth<span class=\"sy0\">*</span>0.5px<span class=\"sy0\">,</span> $canvasWidth<span class=\"sy0\">*</span>0.5px<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  box<span class=\"sy0\">-</span>shadow<span class=\"sy0\">:</span> $data<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 1, "block": "<pre>$ include \"seed7_05.s7i\";\n  include \"float.s7i\";\n  include \"complex.s7i\";\n  include \"draw.s7i\";\n  include \"keybd.s7i\";\n\n# Display the Mandelbrot set, that are points z[0] in the complex plane\n# for which the sequence z[n+1]\u00a0:= z[n] ** 2 + z[0] (n &gt;= 0) is bounded.\n# Since this program is computing intensive it should be compiled with\n# hi comp -O2 mandelbr\n\nconst integer: pix is 200;\nconst integer: max_iter is 256;\n\nvar array color: colorTable is max_iter times black;\n\nconst func integer: iterate (in complex: z0) is func\n  result\n    var integer: iter is 1;\n  local\n    var complex: z is complex.value;\n  begin\n    z\u00a0:= z0;\n    while sqrAbs(z) &lt; 4.0 and  # not diverged\n        iter &lt; max_iter do     # not converged\n      z *:= z;\n      z +:= z0;\n      incr(iter);\n    end while;\n  end func;\n\nconst proc: displayMandelbrotSet (in complex: center, in float: zoom) is func\n  local\n    var integer: x is 0;\n    var integer: y is 0;\n    var complex: z0 is complex.value;\n  begin\n    for x range -pix to pix do\n      for y range -pix to pix do\n        z0\u00a0:= center + complex(flt(x) * zoom, flt(y) * zoom);\n        point(x + pix, y + pix, colorTable[iterate(z0)]);\n      end for;    \n    end for;\n  end func;\n\nconst proc: main is func\n  local\n    const integer: num_pix is 2 * pix + 1;\n    var integer: col is 0;\n  begin\n    screen(num_pix, num_pix);\n    clear(curr_win, black);\n    KEYBOARD\u00a0:= GRAPH_KEYBOARD;\n    for col range 1 to pred(max_iter) do\n      colorTable[col]\u00a0:= color(65535 - (col * 5003) mod 65535,\n                                       (col * 257)  mod 65535,\n                                       (col * 2609) mod 65535);\n    end for;\n    displayMandelbrotSet(complex(-0.75, 0.0), 1.3 / flt(pix));\n    DRAW_FLUSH;\n    readln(KEYBOARD);\n  end func;\n</pre>"}, {"lang": "SequenceL", "loc": 88, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Complex.sl&gt;;<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>import &lt;Utilities/Math.sl&gt;;<br/>\u00a0<br/>COLOR_STRUCT\u00a0::= (R: int(0), G: int(0), B: int(0));<br/>rgb(r(0), g(0), b(0))\u00a0:= (R: r, G: g, B: b);<br/>\u00a0<br/>RESULT_STRUCT\u00a0::= (FinalValue: Complex(0), Iterations: int(0));<br/>makeResult(val(0), iters(0))\u00a0:= (FinalValue: val, Iterations: iters);<br/>\u00a0<br/>zSquaredOperation(startingNum(0), currentNum(0))\u00a0:=<br/>    complexAdd(startingNum, complexMultiply(currentNum, currentNum));<br/>\u00a0<br/>zSquared(minX(0), maxX(0), resolutionX(0), minY(0), maxY(0), resolutionY(0), maxMagnitude(0), maxIters(0))[Y,X]\u00a0:= <br/>    let<br/>        stepX\u00a0:= (maxX - minX) / resolutionX;<br/>        stepY\u00a0:= (maxY - minY) / resolutionY;<br/>\u00a0<br/>        currentX\u00a0:= X * stepX + minX;<br/>        currentY\u00a0:= Y * stepY + minY;<br/>\u00a0<br/>    in <br/>        operateUntil(zSquaredOperation, makeComplex(currentX, currentY), makeComplex(currentX, currentY), maxMagnitude, 0, maxIters)<br/>    foreach Y within 0 ... (resolutionY - 1),<br/>            X within 0 ... (resolutionX - 1);<br/>\u00a0<br/>operateUntil(operation(0), startingNum(0), currentNum(0), maxMagnitude(0), currentIters(0), maxIters(0))\u00a0:=<br/>    let<br/>        operated\u00a0:= operation(startingNum, currentNum);<br/>    in<br/>        makeResult(currentNum, maxIters) when currentIters &gt;= maxIters<br/>    else<br/>        makeResult(currentNum, currentIters) when complexMagnitude(currentNum) &gt;= maxMagnitude<br/>    else<br/>        operateUntil(operation, startingNum, operated, maxMagnitude, currentIters + 1, maxIters);<br/>\u00a0<br/>//region Smooth Coloring<br/>\u00a0<br/>COLOR_COUNT\u00a0:= size(colorSelections);<br/>\u00a0<br/>colorRange\u00a0:= range(0, 255, 1);<br/>\u00a0<br/>colors\u00a0:= <br/>    let<br/>        first[i]\u00a0:= rgb(0, 0, i) foreach i within colorRange;<br/>        second[i]\u00a0:= rgb(i, i, 255) foreach i within colorRange;<br/>        third[i]\u00a0:= rgb(255, 255, i) foreach i within reverse(colorRange);<br/>        fourth[i]\u00a0:= rgb(255, i, 0) foreach i within reverse(colorRange);<br/>        fifth[i]\u00a0:= rgb(i, 0, 0) foreach i within reverse(colorRange);<br/>\u00a0<br/>        red[i]\u00a0:=   rgb(i, 0, 0) foreach i within colorRange;<br/>        redR[i]\u00a0:=  rgb(i, 0, 0) foreach i within reverse(colorRange);<br/>        green[i]\u00a0:= rgb(0, i, 0) foreach i within colorRange;<br/>        greenR[i]\u00a0:=rgb(0, i, 0) foreach i within reverse(colorRange);<br/>        blue[i]\u00a0:=  rgb(0, 0, i) foreach i within colorRange;<br/>        blueR[i]\u00a0:= rgb(0, 0, i) foreach i within reverse(colorRange);<br/>\u00a0<br/>    in<br/>        //red ++ redR ++ green ++ greenR ++ blue ++ blueR;  <br/>        first ++ second ++ third ++ fourth ++ fifth;<br/>        //first ++ fourth;<br/>\u00a0<br/>colorSelections\u00a0:= range(1, size(colors), 30);<br/>\u00a0<br/>getSmoothColorings(zSquaredResult(2), maxIters(0))[Y,X]\u00a0:=<br/>    let<br/>        current\u00a0:= zSquaredResult[Y,X];<br/>\u00a0<br/>        zn\u00a0:= complexMagnitude(current.FinalValue);<br/>        nu\u00a0:= ln(ln(zn) / ln(2)) / ln(2);<br/>\u00a0<br/>        result\u00a0:= abs(current.Iterations + 1 - nu);<br/>\u00a0<br/>        index\u00a0:= floor(result);<br/>        rem\u00a0:= result - index;<br/>\u00a0<br/>        color1\u00a0:= colorSelections[(index mod COLOR_COUNT) + 1];<br/>        color2\u00a0:= colorSelections[((index + 1) mod COLOR_COUNT) + 1];<br/>    in<br/>        rgb(0, 0, 0) when current.Iterations = maxIters<br/>    else<br/>        colors[color1] when color2 &lt; color1<br/>    else<br/>        colors[floor(linearInterpolate(color1, color2, rem))];<br/>\u00a0<br/>linearInterpolate(v0(0), v1(0), t(0))\u00a0:= (1 - t) * v0 + t * v1;<br/>\u00a0<br/>//endregion</pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func mandelbrot<span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var c = z<br/>    <span class=\"br0\">{</span>   z = <span class=\"br0\">(</span>z<span class=\"sy0\">*</span>z <span class=\"sy0\">+</span> c<span class=\"br0\">)</span><br/>        z.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">*</span> <span class=\"nu0\">20</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> y range<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> range<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0.5</span>, <span class=\"nu0\">0.0315</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span>mandelbrot<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y.<span class=\"me1\">i</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">' '</span>\u00a0: <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SPL", "loc": 18, "block": "<pre class=\"text highlighted_source\">w,h = #.scrsize()<br/>sfx = -2.5; sfy = -2*h/w; fs = 4/w<br/>#.aaoff()<br/>&gt; y, 1...h<br/>  &gt; x, 1...w<br/>    fx = sfx + x*fs; fy = sfy + y*fs<br/>    #.drawpoint(x,y,color(fx,fy):3)<br/>  &lt;<br/>&lt;<br/>color(x,y)=<br/>  zr = x; zi = y; n = 0; maxn = 150<br/>  &gt; zr*zr+zi*zi&lt;4 &amp; n&lt;maxn<br/>    zrn = zr*zr-zi*zi+x; zin = 2*zr*zi+y<br/>    zr = zrn; zi = zin; n += 1<br/>  &lt;<br/> \u00a0? n=maxn, &lt;= 0,0,0<br/>  &lt;= #.hsv2rgb(n/maxn*360,1,1):3<br/>.</pre>"}, {"lang": "Tcl", "loc": 30, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tk<br/>\u00a0<br/><span class=\"kw1\">proc</span> mandelIters <span class=\"br0\">{</span>cx cy<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> count <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>hypot<span class=\"br0\">(</span><span class=\"re0\">$x</span>,<span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">255</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> count<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> x1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span> - <span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$y</span> + <span class=\"re0\">$cx</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> y1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"re0\">$y</span> + <span class=\"re0\">$cy</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> x <span class=\"re0\">$x1</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> y <span class=\"re0\">$y1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$count</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> mandelColor <span class=\"br0\">{</span>iter<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">16</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$iter</span> <span class=\"sy0\">%</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> g <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">32</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$iter</span> <span class=\"sy0\">%</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$iter</span> <span class=\"sy0\">%</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">format</span> <span class=\"st0\">\"#%02x%02x%02x\"</span> <span class=\"re0\">$r</span> <span class=\"re0\">$g</span> <span class=\"re0\">$b</span><br/><span class=\"br0\">}</span><br/>image create photo mandel -width <span class=\"nu0\">300</span> -height <span class=\"nu0\">300</span><br/><span class=\"co1\"># Build picture in strips, updating as we go so we have \"progress\" monitoring</span><br/><span class=\"co1\"># Also set the cursor to tell the user to wait while we work.</span><br/>pack <span class=\"br0\">[</span>label .mandel -image mandel -cursor watch<span class=\"br0\">]</span><br/>update<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">300</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">300</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> i <span class=\"br0\">[</span>mandelIters <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x</span>-<span class=\"nu0\">220</span><span class=\"br0\">)</span>/<span class=\"nu0\">100</span>.<span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y</span>-<span class=\"nu0\">150</span><span class=\"br0\">)</span>/<span class=\"nu0\">90</span>.<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        mandel put <span class=\"br0\">[</span>mandelColor <span class=\"re0\">$i</span><span class=\"br0\">]</span> -to <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><br/>    <span class=\"br0\">}</span><br/>    update<br/><span class=\"br0\">}</span><br/>.mandel configure -cursor <span class=\"br0\">{</span><span class=\"br0\">}</span></pre>"}, {"lang": "Plain TeX", "loc": 5, "block": "<pre class=\"text highlighted_source\">% Plain TeX<br/>\\input pst-fractal<br/>\\psfractal[type=Mandel,xWidth=14cm,yWidth=12cm,maxIter=30,dIter=20]<br/>          (-2.5,-1.5)(1,1.5)<br/>\\end</pre>"}, {"lang": "TI-83 BASIC", "loc": 26, "block": "<pre class=\"text highlighted_source\">PROGRAM:MANDELBR<br/>:Input \"ITER. \",D<br/>:For(A,Xmin,Xmax,\u0394X)<br/>:For(B,Ymin,Ymax,\u0394Y)<br/>:0\u2192X<br/>:0\u2192Y<br/>:0\u2192I<br/>:D\u2192M<br/>:While X^2+Y^2\u22644 and I&lt;M<br/>:X^2-Y^2+A\u2192R<br/>:2XY+B\u2192Y<br/>:R\u2192X<br/>:I+1\u2192I<br/>:End<br/>:If I\u2260M<br/>:Then<br/>:I\u2192C<br/>:Else<br/>:0\u2192C<br/>:End<br/>:If C&lt;1<br/>:Pt-On(A,B)<br/>:End<br/>:End<br/>:End<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 76, "block": "<pre class=\"text highlighted_source\">(defvar x-centre -0.5)<br/>(defvar y-centre 0.0)<br/>(defvar width 4.0)<br/>(defvar i-max 800)<br/>(defvar j-max 600)<br/>(defvar n 100)<br/>(defvar r-max 2.0)<br/>(defvar file \"mandelbrot.pgm\")<br/>(defvar colour-max 255)<br/>(defvar pixel-size (/ width i-max))<br/>(defvar x-offset (- x-centre (* 0.5 pixel-size (+ i-max 1))))<br/>(defvar y-offset (+ y-centre (* 0.5 pixel-size (+ j-max 1))))<br/>\u00a0<br/>;; with-output-to-file macro<br/>(defmacro with-output-to-file (name . body)<br/>  ^(let ((*stdout* (open-file ,name \"w\")))<br/>     (unwind-protect (progn ,*body) (close-stream *stdout*))))<br/>\u00a0<br/>;; complex number library<br/>(defmacro cplx (x y) ^(cons ,x ,y))<br/>(defmacro re (c) ^(car ,c))<br/>(defmacro im (c) ^(cdr ,c))<br/>\u00a0<br/>(defsymacro c0 '(0 . 0))<br/>\u00a0<br/>(macro-time <br/>  (defun with-cplx-expand (specs body)<br/>    (tree-case specs<br/>       (((re im expr) . rest) <br/>        ^(tree-bind (,re . ,im) ,expr ,(with-cplx-expand rest body)))<br/>       (() (tree-case body<br/>             ((a b . rest) ^(progn ,a ,b ,*rest))<br/>             ((a) a)<br/>             (x (error \"with-cplx: invalid body ~s\" body))))<br/>       (x (error \"with-cplx: bad args ~s\" x)))))<br/>\u00a0<br/>(defmacro with-cplx (specs . body)<br/>  (with-cplx-expand specs body))<br/>\u00a0<br/>(defun c+ (x y)<br/>  (with-cplx ((a b x) (c d y))<br/>    (cplx (+ a c) (+ b d))))<br/>\u00a0<br/>(defun c* (x y)<br/>  (with-cplx ((a b x) (c d y))<br/>    (cplx (- (* a c) (* b d)) (+ (* b c) (* a d)))))<br/>\u00a0<br/>(defun modulus (z)<br/>  (with-cplx ((a b z))<br/>    (sqrt (+ (* a a) (* b b)))))<br/>\u00a0<br/>;; Mandelbrot routines<br/>(defun inside-p (z0\u00a0: (z c0) (n n))<br/>  (and (&lt; (modulus z) r-max)<br/>       (or (zerop n)<br/>           (inside-p z0 (c+ (c* z z) z0) (- n 1)))))<br/>\u00a0<br/>(defmacro int-bool (b)<br/>  ^(if ,b colour-max 0))<br/>\u00a0<br/>(defun pixel (i j)<br/>  (int-bool<br/>    (inside-p<br/>      (cplx (+ x-offset (* pixel-size i))<br/>            (- y-offset (* pixel-size j))))))<br/>\u00a0<br/>;; Mandelbrot loop and output<br/>(defun plot ()<br/>  (with-output-to-file file<br/>    (format t \"P2\\n~s\\n~s\\n~s\\n\" i-max j-max colour-max)<br/>    (each ((j (range 1 j-max)))<br/>      (each ((i (range 1 i-max)))<br/>        (format *stdout* \"~s \" (pixel i j)))<br/>      (put-line \"\" *stdout*))))<br/>\u00a0<br/>(plot)</pre>"}, {"lang": "uBasic/4tH", "loc": 46, "block": "<pre class=\"text highlighted_source\">A =-21000                              ' Left Edge = -2.1<br/>B = 15000                              ' Right Edge = 1.5<br/>C = 15000                              ' Top Edge = 1.5<br/>D =-15000                              ' Bottom Edge = -1.5<br/>E = 200                                ' Max Iteration Depth<br/>F = 350                                ' X Step Size<br/>G = 750                                ' Y Step Size<br/>\u00a0<br/>For L = C To D Step -G                 ' Y0<br/>    For K = A To B-1 Step F            ' X0<br/>        V = 0                          ' Y<br/>        U = 0                          ' X<br/>        I = 32                         ' Char To Be Displayed<br/>        For O = 0 To E-1               ' Iteration<br/>            X = (U/10 * U) / 1000      ' X*X<br/>            Y = (V/10 * V) / 1000      ' Y*Y<br/>            If (X + Y &gt; 40000)<br/>                I = 48 + O             ' Print Digit 0...9<br/>                If (O &gt; 9)             ' If Iteration Count &gt; 9,<br/>                    I = 64             '  Print '@'<br/>                Endif<br/>                Break<br/>            Endif<br/>            Z = X - Y + K              ' Temp = X*X - Y*Y + X0<br/>            V = (U/10 * V) / 500 + L   ' Y = 2*X*Y + Y0<br/>            U = Z                      ' X = Temp<br/>        Next<br/>        Gosub I                        '  Ins_char(I)<br/>    Next<br/>    Print<br/>Next<br/>\u00a0<br/>End<br/>                                       ' Translate number to ASCII<br/>32 Print \" \";\u00a0: Return<br/>48 Print \"0\";\u00a0: Return<br/>49 Print \"1\";\u00a0: Return<br/>50 Print \"2\";\u00a0: Return<br/>51 Print \"3\";\u00a0: Return<br/>52 Print \"4\";\u00a0: Return<br/>53 Print \"5\";\u00a0: Return<br/>54 Print \"6\";\u00a0: Return<br/>55 Print \"7\";\u00a0: Return<br/>56 Print \"8\";\u00a0: Return<br/>57 Print \"9\";\u00a0: Return<br/>64 Print \"@\";\u00a0: Return</pre>"}, {"lang": "Vedit macro language", "loc": 34, "block": "<pre class=\"vedit highlighted_source\">#<span class=\"nu0\">1</span> <span class=\"sy0\">=-</span><span class=\"nu0\">21000</span>              <span class=\"co1\">// left edge = -2.1</span><br/>#<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">15000</span>              <span class=\"co1\">// right edge = 1.5</span><br/>#<span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">15000</span>              <span class=\"co1\">// top edge = 1.5</span><br/>#<span class=\"nu0\">4</span> <span class=\"sy0\">=-</span><span class=\"nu0\">15000</span>              <span class=\"co1\">// bottom edge = -1.5</span><br/>#<span class=\"nu0\">5</span> <span class=\"sy0\">=</span> <span class=\"nu0\">200</span>                <span class=\"co1\">// max iteration depth</span><br/>#<span class=\"nu0\">6</span> <span class=\"sy0\">=</span> <span class=\"nu0\">350</span>                <span class=\"co1\">// x step size</span><br/>#<span class=\"nu0\">7</span> <span class=\"sy0\">=</span> <span class=\"nu0\">750</span>                <span class=\"co1\">// y step size</span><br/>\u00a0<br/>Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">12</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">3</span><span class=\"sy0\">;</span> #<span class=\"nu0\">12</span> <span class=\"sy0\">&gt;</span> #<span class=\"nu0\">4</span><span class=\"sy0\">;</span> #<span class=\"nu0\">12</span> <span class=\"sy0\">-=</span> #<span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                   <span class=\"co1\">// y0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">11</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">11</span> <span class=\"sy0\">&lt;</span> #<span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">11</span> <span class=\"sy0\">+=</span> #<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>               <span class=\"co1\">// x0</span><br/>        #<span class=\"nu0\">22</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                                         <span class=\"co1\">// y</span><br/>        #<span class=\"nu0\">21</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                                         <span class=\"co1\">// x</span><br/>        #<span class=\"nu0\">9</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span>                                        <span class=\"co1\">// char to be displayed</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">15</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">15</span> <span class=\"sy0\">&lt;</span> #<span class=\"nu0\">5</span><span class=\"sy0\">;</span> #<span class=\"nu0\">15</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                <span class=\"co1\">// iteration</span><br/>            #<span class=\"nu0\">31</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>#<span class=\"nu0\">21</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span> <span class=\"sy0\">*</span> #<span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span>                 <span class=\"co1\">// x*x</span><br/>            #<span class=\"nu0\">32</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>#<span class=\"nu0\">22</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span> <span class=\"sy0\">*</span> #<span class=\"nu0\">22</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span>                 <span class=\"co1\">// y*y</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">31</span> <span class=\"sy0\">+</span> #<span class=\"nu0\">32</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">40000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                #<span class=\"nu0\">9</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">+</span> #<span class=\"nu0\">15</span>                          <span class=\"co1\">// print digit 0...9</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">15</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                          <span class=\"co1\">// if iteration count &gt; 9,</span><br/>                    #<span class=\"nu0\">9</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span>                            <span class=\"co1\">//  print '@'</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>            #<span class=\"nu0\">33</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">31</span> <span class=\"sy0\">-</span> #<span class=\"nu0\">32</span> <span class=\"sy0\">+</span> #<span class=\"nu0\">11</span>                       <span class=\"co1\">// temp = x*x - y*y + x0</span><br/>            #<span class=\"nu0\">22</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>#<span class=\"nu0\">21</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span> <span class=\"sy0\">*</span> #<span class=\"nu0\">22</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">500</span> <span class=\"sy0\">+</span> #<span class=\"nu0\">12</span>            <span class=\"co1\">// y = 2*x*y + y0</span><br/>            #<span class=\"nu0\">21</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">33</span>                                   <span class=\"co1\">// x = temp</span><br/>        <span class=\"br0\">}</span><br/>        Ins_Char<span class=\"br0\">(</span>#<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    Ins_Newline<br/><span class=\"br0\">}</span><br/>BOF<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 26, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>int     X, Y,                   \\screen coordinates of current point<br/>        Cnt;                    \\iteration counter<br/>real    Cx, Cy,                 \\coordinates scaled to +/-2 range<br/>        Zx, Zy,                 \\complex accumulator<br/>        Temp;                   \\temporary scratch<br/>[SetVid($112);                                  \\set 640x480x24 graphics mode<br/>for Y:= 0 to 480-1 do                           \\for all points on the screen...<br/>    for X:= 0 to 640-1 do<br/>        [Cx:= (float(X)/640.0 - 0.5) * 4.0;     \\range: -2.0 to +2.0<br/>         Cy:= (float(Y-240)/240.0) * 1.5;       \\range: -1.5 to +1.5<br/>         Cnt:= 0;  Zx:= 0.0;  Zy:= 0.0;         \\initialize<br/>         loop   [if Zx*Zx + Zy*Zy &gt; 2.0 then    \\Z heads toward infinity<br/>                    [Point(X, Y, Cnt&lt;&lt;21+Cnt&lt;&lt;10+Cnt&lt;&lt;3); \\set color of pixel to<br/>                    quit;                       \\ rate it approached infinity<br/>                    ];                          \\move on to next point<br/>                Temp:= Zx*Zy;<br/>                Zx:= Zx*Zx - Zy*Zy + Cx;        \\calculate next iteration of Z<br/>                Zy:= 2.0*Temp + Cy;<br/>                Cnt:= Cnt+1;                    \\count number of iterations<br/>                if Cnt &gt;= 1000 then quit;       \\assume point is in Mandelbrot<br/>                ];                              \\ set and leave it colored black<br/>        ];<br/>X:= ChIn(1);                                    \\wait for keystroke<br/>SetVid($03);                                    \\restore normal text display<br/>]</pre>"}, {"lang": "XSLT", "loc": 97, "block": "<pre class=\"xml highlighted_source\">\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;?xml</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span> <span class=\"re0\">encoding</span>=<span class=\"st0\">\"UTF-8\"</span><span class=\"re2\">?&gt;</span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:stylesheet</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span> <span class=\"re0\">xmlns:xsl</span>=<span class=\"st0\">\"http://www.w3.org/1999/XSL/Transform\"</span><span class=\"re2\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc-1\">&lt;!-- XSLT Mandelbrot - written by Joel Yliluoma 2007, http://iki.fi/bisqwit/ --&gt;</span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:output</span> <span class=\"re0\">method</span>=<span class=\"st0\">\"html\"</span> <span class=\"re0\">indent</span>=<span class=\"st0\">\"no\"</span></span><br/><span class=\"sc3\">  <span class=\"re0\">doctype-public</span>=<span class=\"st0\">\"-//W3C//DTD HTML 4.01//EN\"</span></span><br/><span class=\"sc3\">  <span class=\"re0\">doctype-system</span>=<span class=\"st0\">\"http://www.w3.org/TR/REC-html40/strict.dtd\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"/fractal\"</span><span class=\"re2\">&gt;</span></span><br/> <span class=\"sc3\"><span class=\"re1\">&lt;html<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;head<span class=\"re2\">&gt;</span></span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;title<span class=\"re2\">&gt;</span></span></span>XSLT fractal<span class=\"sc3\"><span class=\"re1\">&lt;/title<span class=\"re2\">&gt;</span></span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;style</span> <span class=\"re0\">type</span>=<span class=\"st0\">\"text/css\"</span><span class=\"re2\">&gt;</span></span><br/>body { color:#55F; background:#000 }<br/>pre { font-family:monospace; font-size:7px }<br/>pre span { background:<span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"background\"</span> <span class=\"re2\">/&gt;</span></span> }<br/>   <span class=\"sc3\"><span class=\"re1\">&lt;/style<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/head<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;body<span class=\"re2\">&gt;</span></span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;div</span> <span class=\"re0\">style</span>=<span class=\"st0\">\"position:absolute;top:20px;left:20em\"</span><span class=\"re2\">&gt;</span></span><br/>    Copyright \u00a9 1992,2007 Joel Yliluoma<br/>    (<span class=\"sc3\"><span class=\"re1\">&lt;a</span> <span class=\"re0\">href</span>=<span class=\"st0\">\"http://iki.fi/bisqwit/\"</span><span class=\"re2\">&gt;</span></span>http://iki.fi/bisqwit/<span class=\"sc3\"><span class=\"re1\">&lt;/a<span class=\"re2\">&gt;</span></span></span>)<br/>   <span class=\"sc3\"><span class=\"re1\">&lt;/div<span class=\"re2\">&gt;</span></span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;h1</span> <span class=\"re0\">style</span>=<span class=\"st0\">\"margin:0px\"</span><span class=\"re2\">&gt;</span></span>XSLT fractal<span class=\"sc3\"><span class=\"re1\">&lt;/h1<span class=\"re2\">&gt;</span></span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;pre<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot\"</span> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/pre<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/body<span class=\"re2\">&gt;</span></span></span><br/> <span class=\"sc3\"><span class=\"re1\">&lt;/html<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot\"</span></span><br/><span class=\"sc3\">  <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-line\"</span><span class=\"re2\">&gt;</span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"y/min\"</span><span class=\"re2\">/&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template</span></span><br/><span class=\"sc3\"><span class=\"re2\">&gt;</span><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-line\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-column\"</span><span class=\"re2\">&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"x\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"x/min\"</span><span class=\"re2\">/&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$y\"</span><span class=\"re2\">/&gt;</span></span><br/> <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template</span></span><br/><span class=\"sc3\"> <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:if</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"$y &lt; y/max\"</span></span><br/><span class=\"sc3\">  <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;br</span></span><br/><span class=\"sc3\">  <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-line\"</span><span class=\"re2\">&gt;</span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$y + y/step\"</span><span class=\"re2\">/&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template</span></span><br/><span class=\"sc3\"> <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;/xsl:if</span></span><br/><span class=\"sc3\"><span class=\"re2\">&gt;</span><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-column\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"x\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-slot\"</span><span class=\"re2\">&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"x\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$x\"</span> <span class=\"re2\">/&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$y\"</span> <span class=\"re2\">/&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"zr\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$x\"</span> <span class=\"re2\">/&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"zi\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$y\"</span> <span class=\"re2\">/&gt;</span></span><br/> <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template</span></span><br/><span class=\"sc3\"> <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:if</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"$x &lt; x/max\"</span></span><br/><span class=\"sc3\">  <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-column\"</span><span class=\"re2\">&gt;</span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"x\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$x + x/step\"</span><span class=\"re2\">/&gt;</span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$y\"</span> <span class=\"re2\">/&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template</span></span><br/><span class=\"sc3\"> <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;/xsl:if</span></span><br/><span class=\"sc3\"><span class=\"re2\">&gt;</span><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-slot\"</span></span><br/><span class=\"sc3\"><span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"x\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"zr\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"zi\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"iter\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"0\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:variable</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"zrsqr\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"($zr * $zr)\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:variable</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"zisqr\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"($zi * $zi)\"</span></span><br/><span class=\"sc3\"> <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;xsl:choose<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:when</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"(4*scale*scale &gt;</span></span>= $zrsqr + $zisqr) and (maxiter &gt; $iter+1)\"<br/>   &gt;<span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"bisqwit-mandelbrot-slot\"</span><span class=\"re2\">&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"x\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$x\"</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"y\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$y\"</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"zi\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"(2 * $zr * $zi) div scale + $y\"</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"zr\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"($zrsqr - $zisqr) div scale + $x\"</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"iter\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$iter + 1\"</span> <span class=\"re2\">/&gt;</span></span><br/>   <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template</span></span><br/><span class=\"sc3\">  <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;/xsl:when<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:otherwise</span></span><br/><span class=\"sc3\">   <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:variable</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"magnitude\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"magnitude[@value=$iter]\"</span></span><br/><span class=\"sc3\">    <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;span</span> <span class=\"re0\">style</span>=<span class=\"st0\">\"color:{$magnitude/color}\"</span></span><br/><span class=\"sc3\">   <span class=\"re2\">&gt;</span><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$magnitude/symbol\"</span></span><br/><span class=\"sc3\">  <span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/span<span class=\"re2\">&gt;</span></span><span class=\"re1\">&lt;/xsl:otherwise<span class=\"re2\">&gt;</span></span></span><br/> <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:choose</span></span><br/><span class=\"sc3\"><span class=\"re2\">&gt;</span><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:stylesheet<span class=\"re2\">&gt;</span></span></span><br/>\u00a0</pre>"}, {"lang": "Yabasic", "loc": 37, "block": "<pre class=\"text highlighted_source\">open window 640, 320<br/>wid = 4<br/>xcenter = -1: ycenter = 0<br/>ms = 0<br/>for xcoord = 0 to 639<br/>   for ycoord = 0 to 160<br/>       ms = 0<br/>       ca =(xcoord-320)/640*wid+xcenter<br/>       cb =(ycoord-160)/640*wid+ycenter<br/>       x = 0: y=0<br/>\u00a0<br/>       for t = 1 to 20<br/>           xnew = x*x-y*y+ca<br/>           ynew = 2*x*y+cb<br/>           x=xnew:y=ynew<br/>           magnitudesquared=x*x+y*y<br/>           ms = magnitudesquared<br/>           if (magnitudesquared &gt; 100) break<br/>           //if(magnitudesquared &lt; 100) then\u00a0: color 0,0,0\u00a0: dot xcoord, ycoord\u00a0: end if<br/>       next t<br/>       ms = ms+1<br/>       if(ms &gt; 250) then<br/>       \t    color 32,64,mod(ms,255)<br/>            dot xcoord, ycoord<br/>            dot xcoord, 320- ycoord<br/>        elseif (ms &gt; 150) then<br/>            color mod(ms,255),64,32<br/>            dot xcoord, ycoord<br/>            dot xcoord, 320-ycoord<br/>        else<br/>            color 0,0,0<br/>            dot xcoord, ycoord<br/>            dot xcoord, 320-ycoord<br/>        end if<br/>    next ycoord<br/>next xcoord<br/>\u00a0</pre>"}, {"lang": "Z80 Assembly", "loc": 242, "block": "<pre class=\"z80 highlighted_source\">\u00a0<br/><span class=\"co1\">;</span><br/><span class=\"co1\">;  Compute a Mandelbrot set on a simple Z80 computer.</span><br/><span class=\"co1\">;</span><br/><span class=\"co1\">; Porting this program to another Z80 platform should be easy and straight-</span><br/><span class=\"co1\">; forward: The only dependencies on my homebrew machine are the system-calls </span><br/><span class=\"co1\">; used to print strings and characters. These calls are performed by loading</span><br/><span class=\"co1\">; IX with the number of the system-call and performing an RST 08. To port this</span><br/><span class=\"co1\">; program to another operating system just replace these system-calls with </span><br/><span class=\"co1\">; the appropriate versions. Only three system-calls are used in the following:</span><br/><span class=\"co1\">; _crlf: Prints a CR/LF, _puts: Prints a 0-terminated string (the adress of </span><br/><span class=\"co1\">; which is expected in HL), and _putc: Print a single character which is </span><br/><span class=\"co1\">; expected in A. RST 0 give control back to the monitor.</span><br/><span class=\"co1\">;</span><br/><span class=\"kw3\">#include</span>        <span class=\"st0\">\"mondef.asm\"</span><br/>\u00a0<br/>                org     ram_start<br/>\u00a0<br/>scale           <span class=\"kw3\">equ</span>     <span class=\"nu0\">256</span>                     <span class=\"co1\">; Do NOT change this - the </span><br/>                                                <span class=\"co1\">; arithmetic routines rely on</span><br/>                                                <span class=\"co1\">; this scaling factor!\u00a0:-)</span><br/>divergent       <span class=\"kw3\">equ</span>     scale <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, welcome             <span class=\"co1\">; Print a welcome message</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">ix</span>, _puts<br/>                <span class=\"kw1\">rst</span>     <span class=\"re1\">0</span><span class=\"nu0\">8</span><br/>\u00a0<br/><span class=\"co1\">; for (y = &lt;initial_value&gt;\u00a0; y &lt;= y_end; y += y_step)</span><br/><span class=\"co1\">; {</span><br/>outer_loop      <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>y_end<span class=\"br0\">)</span>             <span class=\"co1\">; Is y &lt;= y_end?</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                <span class=\"kw1\">and</span>     <span class=\"kw2\">a</span>                       <span class=\"co1\">; Clear carry</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">de</span>                  <span class=\"co1\">; Perform the comparison</span><br/>                <span class=\"kw1\">jp</span>      m, mandel_end           <span class=\"co1\">; End of outer loop reached</span><br/>\u00a0<br/><span class=\"co1\">;    for (x = x_start; x &lt;= x_end; x += x_step)</span><br/><span class=\"co1\">;    {</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>x_start<span class=\"br0\">)</span>           <span class=\"co1\">; x = x_start</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"kw2\">hl</span><br/>inner_loop      <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>x_end<span class=\"br0\">)</span>             <span class=\"co1\">; Is x &lt;= x_end?</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"kw1\">and</span>     <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">de</span><br/>                <span class=\"kw1\">jp</span>      m, inner_loop_end       <span class=\"co1\">; End of inner loop reached</span><br/>\u00a0<br/><span class=\"co1\">;      z_0 = z_1 = 0;</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"re1\">0</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>z_<span class=\"re1\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">hl</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>z_<span class=\"re1\">1</span><span class=\"br0\">)</span>, <span class=\"kw2\">hl</span><br/>\u00a0<br/><span class=\"co1\">;      for (iteration = iteration_max; iteration; iteration--)</span><br/><span class=\"co1\">;      {</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"br0\">(</span>iteration_max<span class=\"br0\">)</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">b</span>, <span class=\"kw2\">a</span><br/>iteration_loop  <span class=\"kw1\">push</span>    <span class=\"kw2\">bc</span>                      <span class=\"co1\">; iteration -&gt; stack</span><br/><span class=\"co1\">;        z2 = (z_0 * z_0 - z_1 * z_1) / SCALE;</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">1</span><span class=\"br0\">)</span>               <span class=\"co1\">; Compute DE HL = z_1 * z_1</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">bc</span>, <span class=\"kw2\">de</span><br/>                <span class=\"kw1\">call</span>    mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>z_<span class=\"re1\">0</span>_square_low<span class=\"br0\">)</span>, <span class=\"kw2\">hl</span>    <span class=\"co1\">; z_0 ** 2 is needed later again</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>z_<span class=\"re1\">0</span>_square_high<span class=\"br0\">)</span>, <span class=\"kw2\">de</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">0</span><span class=\"br0\">)</span>               <span class=\"co1\">; Compute DE HL = z_0 * z_0</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">bc</span>, <span class=\"kw2\">de</span><br/>                <span class=\"kw1\">call</span>    mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>z_<span class=\"re1\">1</span>_square_low<span class=\"br0\">)</span>, <span class=\"kw2\">hl</span>    <span class=\"co1\">; z_1 ** 2 will be also needed</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>z_<span class=\"re1\">1</span>_square_high<span class=\"br0\">)</span>, <span class=\"kw2\">de</span><br/>\u00a0<br/>                <span class=\"kw1\">and</span>     <span class=\"kw2\">a</span>                       <span class=\"co1\">; Compute subtraction</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">bc</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">0</span>_square_low<span class=\"br0\">)</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">bc</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>scratch_<span class=\"re1\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">hl</span>         <span class=\"co1\">; Save lower 16 bit of result</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"kw2\">de</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">bc</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">0</span>_square_high<span class=\"br0\">)</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">bc</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">bc</span>, <span class=\"br0\">(</span>scratch_<span class=\"re1\">0</span><span class=\"br0\">)</span>         <span class=\"co1\">; HL BC = z_0 ** 2 - z_1 ** 2</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">c</span>, <span class=\"kw2\">b</span>                    <span class=\"co1\">; Divide by scale = 256</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">b</span>, <span class=\"kw2\">l</span>                    <span class=\"co1\">; Discard the rest</span><br/>                <span class=\"kw1\">push</span>    <span class=\"kw2\">bc</span>                      <span class=\"co1\">; We need BC later</span><br/>\u00a0<br/><span class=\"co1\">;        z3 = 2 * z0 * z1 / SCALE;</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">0</span><span class=\"br0\">)</span>               <span class=\"co1\">; Compute DE HL = 2 * z_0 * z_1</span><br/>                <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">hl</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"kw2\">hl</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">bc</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">call</span>    mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">b</span>, <span class=\"kw2\">e</span>                    <span class=\"co1\">; Divide by scale (= 256)</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">c</span>, <span class=\"kw2\">h</span>                    <span class=\"co1\">; BC contains now z_3</span><br/>\u00a0<br/><span class=\"co1\">;        z1 = z3 + y;</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">bc</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>z_<span class=\"re1\">1</span><span class=\"br0\">)</span>, <span class=\"kw2\">hl</span><br/>\u00a0<br/><span class=\"co1\">;        z_0 = z_2 + x;</span><br/>                <span class=\"kw1\">pop</span>     <span class=\"kw2\">bc</span>                      <span class=\"co1\">; Here BC is needed again\u00a0:-)</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">bc</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>z_<span class=\"re1\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">hl</span><br/>\u00a0<br/><span class=\"co1\">;        if (z0 * z0 / SCALE + z1 * z1 / SCALE &gt; 4 * SCALE)</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">0</span>_square_low<span class=\"br0\">)</span>    <span class=\"co1\">; Use the squares computed</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">1</span>_square_low<span class=\"br0\">)</span>    <span class=\"co1\">; above</span><br/>                <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">de</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">bc</span>, <span class=\"kw2\">hl</span>                  <span class=\"co1\">; BC contains lower word of sum</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">0</span>_square_high<span class=\"br0\">)</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"br0\">(</span>z_<span class=\"re1\">1</span>_square_high<span class=\"br0\">)</span><br/>                <span class=\"kw1\">adc</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">de</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">h</span>, <span class=\"kw2\">l</span>                    <span class=\"co1\">; HL now contains (z_0 ** 2 + </span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">l</span>, <span class=\"kw2\">b</span>                    <span class=\"co1\">; z_1 ** 2) / scale</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">bc</span>, divergent<br/>                <span class=\"kw1\">and</span>     <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">bc</span><br/>\u00a0<br/><span class=\"co1\">;          break;</span><br/>                <span class=\"kw1\">jp</span>      <span class=\"kw2\">c</span>, iteration_dec        <span class=\"co1\">; No break</span><br/>                <span class=\"kw1\">pop</span>     <span class=\"kw2\">bc</span>                      <span class=\"co1\">; Get latest iteration counter</span><br/>                <span class=\"kw1\">jr</span>      iteration_end           <span class=\"co1\">; Exit loop</span><br/>\u00a0<br/><span class=\"co1\">;        iteration++;</span><br/>iteration_dec   <span class=\"kw1\">pop</span>     <span class=\"kw2\">bc</span>                      <span class=\"co1\">; Get iteration counter</span><br/>                <span class=\"kw1\">djnz</span>    iteration_loop          <span class=\"co1\">; We might fall through!</span><br/><span class=\"co1\">;      }</span><br/>iteration_end<br/><span class=\"co1\">;      printf(\"%c\", display[iteration\u00a0% 7]);</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"kw2\">b</span><br/>                <span class=\"kw1\">and</span>     <span class=\"sy0\">$</span>7                      <span class=\"co1\">; lower three bits only (c = 0)</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">hl</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">l</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, display             <span class=\"co1\">; Get start of character array</span><br/>                <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">de</span>                  <span class=\"co1\">; address and load the </span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"br0\">(</span><span class=\"kw2\">hl</span><span class=\"br0\">)</span>                 <span class=\"co1\">; character to be printed</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">ix</span>, _putc               <span class=\"co1\">; Print the character</span><br/>                <span class=\"kw1\">rst</span>     <span class=\"re1\">0</span><span class=\"nu0\">8</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"br0\">(</span>x_step<span class=\"br0\">)</span>            <span class=\"co1\">; x += x_step</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">de</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"kw2\">hl</span><br/>\u00a0<br/>                <span class=\"kw1\">jp</span>      inner_loop<br/><span class=\"co1\">;    }</span><br/><span class=\"co1\">;    printf(\"\\n\");</span><br/>inner_loop_end  <span class=\"kw1\">ld</span>      <span class=\"kw2\">ix</span>, _crlf               <span class=\"co1\">; Print a CR/LF pair</span><br/>                <span class=\"kw1\">rst</span>     <span class=\"re1\">0</span><span class=\"nu0\">8</span><br/>\u00a0<br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">de</span>, <span class=\"br0\">(</span>y_step<span class=\"br0\">)</span>            <span class=\"co1\">; y += y_step</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, <span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">de</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"br0\">(</span>y<span class=\"br0\">)</span>, <span class=\"kw2\">hl</span>                 <span class=\"co1\">; Store new y-value</span><br/>\u00a0<br/>                <span class=\"kw1\">jp</span>      outer_loop<br/><span class=\"co1\">; }</span><br/>\u00a0<br/>mandel_end      <span class=\"kw1\">ld</span>      <span class=\"kw2\">hl</span>, finished            <span class=\"co1\">; Print finished-message</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">ix</span>, _puts<br/>                <span class=\"kw1\">rst</span>     <span class=\"re1\">0</span><span class=\"nu0\">8</span><br/>\u00a0<br/>                <span class=\"kw1\">rst</span>     <span class=\"re1\">0</span>                       <span class=\"co1\">; Return to the monitor</span><br/>\u00a0<br/>welcome         defb    <span class=\"st0\">\"Generating a Mandelbrot set\"</span><br/>                defb    cr, lf, eos<br/>finished        defb    <span class=\"st0\">\"Computation finished.\"</span>, cr, lf, eos<br/>\u00a0<br/>iteration_max   defb    <span class=\"re1\">10</span>                      <span class=\"co1\">; How many iterations</span><br/>x               defw    <span class=\"re1\">0</span>                       <span class=\"co1\">; x-coordinate</span><br/>x_start         defw    <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> scale              <span class=\"co1\">; Minimum x-coordinate</span><br/>x_end           defw    <span class=\"nu0\">5</span> <span class=\"sy0\">*</span>  scale <span class=\"sy0\">/</span> <span class=\"re1\">10</span>         <span class=\"co1\">; Maximum x-coordinate</span><br/>x_step          defw    <span class=\"nu0\">4</span>  <span class=\"sy0\">*</span> scale <span class=\"sy0\">/</span> <span class=\"re1\">100</span>        <span class=\"co1\">; x-coordinate step-width</span><br/>y               defw    <span class=\"sy0\">-</span><span class=\"re1\">1</span> <span class=\"sy0\">*</span> scale              <span class=\"co1\">; Minimum y-coordinate</span><br/>y_end           defw    <span class=\"re1\">1</span>  <span class=\"sy0\">*</span> scale              <span class=\"co1\">; Maximum y-coordinate</span><br/>y_step          defw    <span class=\"re1\">1</span>  <span class=\"sy0\">*</span> scale <span class=\"sy0\">/</span> <span class=\"re1\">10</span>         <span class=\"co1\">; y-coordinate step-width</span><br/>z_<span class=\"re1\">0</span>             defw    <span class=\"re1\">0</span><br/>z_<span class=\"re1\">1</span>             defw    <span class=\"re1\">0</span><br/>scratch_<span class=\"re1\">0</span>       defw    <span class=\"re1\">0</span><br/>z_<span class=\"re1\">0</span>_square_high defw    <span class=\"re1\">0</span><br/>z_<span class=\"re1\">0</span>_square_low  defw    <span class=\"re1\">0</span><br/>z_<span class=\"re1\">1</span>_square_high defw    <span class=\"re1\">0</span><br/>z_<span class=\"re1\">1</span>_square_low  defw    <span class=\"re1\">0</span><br/>display         defb    <span class=\"st0\">\" .-+*=#@\"</span>              <span class=\"co1\">; 8 characters for the display</span><br/>\u00a0<br/><span class=\"co1\">;</span><br/><span class=\"co1\">;   Compute DEHL = BC * DE (signed): This routine is not too clever but it </span><br/><span class=\"co1\">; works. It is based on a standard 16-by-16 multiplication routine for unsigned</span><br/><span class=\"co1\">; integers. At the beginning the sign of the result is determined based on the</span><br/><span class=\"co1\">; signs of the operands which are negated if necessary. Then the unsigned</span><br/><span class=\"co1\">; multiplication takes place, followed by negating the result if necessary.</span><br/><span class=\"co1\">;</span><br/>mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span>          <span class=\"kw1\">xor</span>     <span class=\"kw2\">a</span>                       <span class=\"co1\">; Clear carry and A (-&gt; +)</span><br/>                <span class=\"kw1\">bit</span>     <span class=\"nu0\">7</span>, <span class=\"kw2\">b</span>                    <span class=\"co1\">; Is BC negative?</span><br/>                <span class=\"kw1\">jr</span>      z, bc_positive          <span class=\"co1\">; No</span><br/>                <span class=\"kw1\">sub</span>     <span class=\"kw2\">c</span>                       <span class=\"co1\">; A is still zero, complement</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">c</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"re1\">0</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">a</span>, <span class=\"kw2\">b</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">b</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">scf</span>                             <span class=\"co1\">; Set carry (-&gt; -)</span><br/>bc_positive     <span class=\"kw1\">bit</span>     <span class=\"nu0\">7</span>, <span class=\"kw2\">D</span>                    <span class=\"co1\">; Is DE negative?</span><br/>                <span class=\"kw1\">jr</span>      z, de_positive          <span class=\"co1\">; No</span><br/>                <span class=\"kw1\">push</span>    <span class=\"kw2\">af</span>                      <span class=\"co1\">; Remember carry for later!</span><br/>                <span class=\"kw1\">xor</span>     <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">sub</span>     <span class=\"kw2\">e</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">e</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"re1\">0</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">a</span>, <span class=\"kw2\">d</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">d</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">pop</span>     <span class=\"kw2\">af</span>                      <span class=\"co1\">; Restore carry for complement</span><br/>                <span class=\"kw1\">ccf</span>                             <span class=\"co1\">; Complement Carry (-&gt; +/-?)</span><br/>de_positive     <span class=\"kw1\">push</span>    <span class=\"kw2\">af</span>                      <span class=\"co1\">; Remember state of carry</span><br/>                <span class=\"kw1\">and</span>     <span class=\"kw2\">a</span>                       <span class=\"co1\">; Start multiplication</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">hl</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"re1\">1</span><span class=\"nu0\">6</span>                   <span class=\"co1\">; 16 rounds</span><br/>mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span>_loop     <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">hl</span><br/>                <span class=\"kw1\">rl</span>      <span class=\"kw2\">e</span><br/>                <span class=\"kw1\">rl</span>      <span class=\"kw2\">d</span><br/>                <span class=\"kw1\">jr</span>      nc, mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span>_exit<br/>                <span class=\"kw1\">add</span>     <span class=\"kw2\">hl</span>, <span class=\"kw2\">bc</span><br/>                <span class=\"kw1\">jr</span>      nc, mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span>_exit<br/>                <span class=\"kw1\">inc</span>     <span class=\"kw2\">de</span><br/>mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span>_exit     <span class=\"kw1\">dec</span>     <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">jr</span>      nz, mul_<span class=\"re1\">1</span><span class=\"nu0\">6</span>_loop<br/>                <span class=\"kw1\">pop</span>     <span class=\"kw2\">af</span>                      <span class=\"co1\">; Restore carry from beginning</span><br/>                <span class=\"kw1\">ret</span>     nc                      <span class=\"co1\">; No sign inversion necessary</span><br/>                <span class=\"kw1\">xor</span>     <span class=\"kw2\">a</span>                       <span class=\"co1\">; Complement DE HL</span><br/>                <span class=\"kw1\">sub</span>     <span class=\"kw2\">l</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">l</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"re1\">0</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">a</span>, <span class=\"kw2\">h</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">h</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"re1\">0</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">a</span>, <span class=\"kw2\">e</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">e</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">a</span>, <span class=\"re1\">0</span><br/>                <span class=\"kw1\">sbc</span>     <span class=\"kw2\">a</span>, <span class=\"kw2\">d</span><br/>                <span class=\"kw1\">ld</span>      <span class=\"kw2\">d</span>, <span class=\"kw2\">a</span><br/>                <span class=\"kw1\">ret</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 20, "block": "<pre class=\"text highlighted_source\">fcn mandelbrot{  // lord this is slooooow<br/>   bitmap:=PPM(640,480);<br/>   foreach y,x in ([0..479],[0..639]){<br/>      cx:=(x.toFloat()/640 - 0.5)*4.0;     //range: -2.0 to +2.0<br/>      cy:=((y-240).toFloat()/240.0)*1.5;   //range: -1.5 to +1.5<br/>      cnt:=0; zx:=0.0; zy:=0.0;<br/>      do(1000){<br/>      \t if(zx*zx + zy*zy &gt; 2.0){\t//z heads toward infinity<br/>\t    //set color of pixel to rate it approaches infinity<br/>\t    bitmap[x,y]=cnt.shiftLeft(21) + cnt.shiftLeft(10) + cnt*8;<br/>\t    break;<br/>\t }<br/>\t temp:=zx*zy;<br/>\t zx=zx*zx - zy*zy + cx;\t\t//calculate next iteration of z<br/>\t zy=2.0*temp + cy;<br/>\t cnt+=1;<br/>      }<br/>   }<br/>   bitmap.write(File(\"foo.ppm\",\"wb\"));<br/>}();</pre>"}]}