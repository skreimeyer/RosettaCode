{"task": "Deal_cards_for_FreeCell", "blocks": [{"lang": "Ada", "loc": 38, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> FreeCell <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> State <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span>**<span class=\"nu0\">31</span>;<br/>   <span class=\"kw3\">type</span> Deck <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">51</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> String<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Random <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">procedure</span> Init<span class=\"br0\">(</span>Seed: State<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">function</span> Rand <span class=\"kw1\">return</span> State;<br/>   <span class=\"kw1\">end</span> Random;<br/>   <span class=\"kw3\">package</span> <span class=\"kw3\">body</span> Random <span class=\"kw1\">is</span><br/>      S\u00a0: State\u00a0:= State'First;<br/>      <span class=\"kw3\">procedure</span> Init<span class=\"br0\">(</span>Seed: State<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span> S\u00a0:= Seed; <span class=\"kw1\">end</span> Init;<br/>      <span class=\"kw3\">function</span> Rand <span class=\"kw1\">return</span> State <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>         S\u00a0:= S * <span class=\"nu0\">214013</span> + <span class=\"nu0\">2531011</span>;  <span class=\"kw1\">return</span> S / <span class=\"nu0\">2</span>**<span class=\"nu0\">16</span>;<br/>      <span class=\"kw1\">end</span> Rand;<br/>   <span class=\"kw1\">end</span> Random;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Deal <span class=\"br0\">(</span>num\u00a0: State<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      thedeck\u00a0: Deck;  pick\u00a0: State;<br/>      Chars\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"A23456789TJQKCDHS\"</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> thedeck'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         thedeck<span class=\"br0\">(</span>i<span class=\"br0\">)</span>:= Chars<span class=\"br0\">(</span>i/<span class=\"nu0\">4</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; Chars<span class=\"br0\">(</span>i <span class=\"kw2\">mod</span> <span class=\"nu0\">4</span> + <span class=\"nu0\">14</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Random.<span class=\"me1\">Init</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">51</span> <span class=\"kw1\">loop</span><br/>         pick\u00a0:= Random.<span class=\"me1\">Rand</span> <span class=\"kw2\">mod</span> State<span class=\"br0\">(</span><span class=\"nu0\">52</span>-i<span class=\"br0\">)</span>;<br/>         Put<span class=\"br0\">(</span>thedeck<span class=\"br0\">(</span>Natural<span class=\"br0\">(</span>pick<span class=\"br0\">)</span><span class=\"br0\">)</span>&amp;' '<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">8</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> New_Line; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         thedeck<span class=\"br0\">(</span>Natural<span class=\"br0\">(</span>pick<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= thedeck<span class=\"br0\">(</span><span class=\"nu0\">51</span>-i<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; New_Line;<br/>   <span class=\"kw1\">end</span> Deal;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Deal<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Deal<span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> FreeCell;</pre>"}, {"lang": "AutoHotkey", "loc": 24, "block": "<pre class=\"autohotkey highlighted_source\">FreeCell<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tcards <span class=\"sy0\">:=</span> <span class=\"st0\">\"A23456789TJQK\"</span><span class=\"sy0\">,</span> suits <span class=\"sy0\">:=</span> <span class=\"st0\">\"\u2663\u2666\u2665\u2660\"</span><span class=\"sy0\">,</span> card <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Counter <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> cards<br/>\t<span class=\"br0\">{</span><br/>\t\tThisCard <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> suits<br/>\t\t\tCard<span class=\"br0\">[</span>Counter<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> ThisCard <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><br/>\t<span class=\"br0\">{</span><br/>\t\ta <span class=\"sy0\">:=</span> MS<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>\t\tnum<span class=\"sy0\">:=</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t\tMyCardNo <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">53</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>\t\tMyCard <span class=\"sy0\">:=</span> Card<span class=\"br0\">[</span>MyCardNo<span class=\"br0\">]</span><br/>\t\tCard<span class=\"br0\">[</span>MyCardNo<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Card<span class=\"br0\">[</span><span class=\"nu0\">52</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><br/>\t\tCard<span class=\"sy0\">.</span>Remove<span class=\"br0\">(</span><span class=\"nu0\">52</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>\t\tRes <span class=\"sy0\">.=</span> MyCard <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>?<span class=\"st0\">\"  \"</span>:<span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span>\t<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> Res<br/><span class=\"br0\">}</span><br/>MS<span class=\"br0\">(</span>Seed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tSeed <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> Seed <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"sy0\">,</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>Seed<span class=\"sy0\">,</span> Seed <span class=\"sy0\">//</span> <span class=\"nu0\">65536</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 45, "block": "<pre class=\"text highlighted_source\">      *FLOAT 64<br/>\u00a0<br/>      hand% = 617<br/>\u00a0<br/>      REM Initialise card library:<br/>      SYS \"LoadLibrary\", \"CARDS.DLL\" TO cards%<br/>      IF cards% = 0 ERROR 100, \"No CARDS library\"<br/>      SYS \"GetProcAddress\", cards%, \"cdtInit\" TO cdtInit%<br/>      SYS \"GetProcAddress\", cards%, \"cdtDraw\" TO cdtDraw%<br/>      SYS cdtInit%, ^dx%, ^dy%<br/>      VDU 23,22,8*dx%;5*dy%;8,16,16,128<br/>\u00a0<br/>      REM Initialise deck:<br/>      DIM card&amp;(51)<br/>      FOR I% = 0 TO 51\u00a0: card&amp;(I%) = I%\u00a0: NEXT<br/>\u00a0<br/>      REM Shuffle deck:<br/>      dummy% = FNrng(hand%)<br/>      FOR I% = 51 TO 0 STEP -1<br/>        C% = FNrng(-1) MOD (I% + 1)<br/>        SWAP card&amp;(C%), card&amp;(I%)<br/>      NEXT<br/>\u00a0<br/>      REM Display deck:<br/>      FOR I% = 0 TO 51<br/>        C% = card&amp;(51 - I%)<br/>        X% = (I% MOD 8) * dx%<br/>        Y% = (I% DIV 8) * dy% * 2 / 3<br/>        SYS cdtDraw%, @memhdc%, X%, Y%, C%, 0, 0<br/>      NEXT<br/>      SYS \"InvalidateRect\", @hwnd%, 0, 0<br/>      *GSAVE freecell<br/>      END<br/>\u00a0<br/>      DEF FNrng(seed)<br/>      PRIVATE state, M%<br/>      IF seed &gt;= 0 THEN<br/>        state = seed<br/>      ELSE<br/>        state = (state * 214013 + 2531011)<br/>        FOR M% = 52 TO 31 STEP -1<br/>          IF state &gt;= 2^M% state -= 2^M%<br/>        NEXT<br/>      ENDIF<br/>      = state &gt;&gt; 16</pre>"}, {"lang": "Befunge", "loc": 5, "block": "<pre class=\"text highlighted_source\">vutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDC<br/>&gt;4$0\"\u00a0:rebmun emaG\"&gt;:#,_$&amp;&gt;55+,&gt;\"O?+\"**2+*\"C4'' \"**v<br/>&gt;8%!492*+*48*\\-,1-:11p0g\\0p11g#^<a class=\"__cf_email__\" data-cfemail=\"eeb1aeafdcdddadbd8d9d6d7baa4bfa5adaaa6bd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<br/>^+3:g11,g2+\"/\"%4,g2+g14/4:-\\\"v\"g0:%g11+*-/2-10-1*&lt;&gt;+<br/>&gt;8#8*#4*#::#%*#*/#*:#*0#:\\#*`#:8#::#*:#8*#8:#2*#+^#&lt;</pre>"}, {"lang": "Bracmat", "loc": 63, "block": "<pre class=\"text highlighted_source\">(  ( createArray<br/>  =   array rank ranks suit suits<br/>    .   A 2 3 4 5 6 7 8 9 T J Q K:?ranks<br/>      &amp;\u00a0:?array<br/>      &amp;   whl<br/>        ' (\u00a0!ranks:%?rank\u00a0?ranks<br/>          &amp; \u2663 \u2666 \u2665 \u2660:?suits<br/>          &amp;   whl<br/>            ' (\u00a0!suits:%?suit\u00a0?suits<br/>              &amp;\u00a0!array str$(!rank\u00a0!suit):?array<br/>              )<br/>          )<br/>      &amp;\u00a0!array<br/>  )<br/>&amp; ( deal<br/>  =     A B D L Z pick card dealt deck<br/>      , i last rand row state<br/>    .  \u00a0!arg:(?deck:? [?L.?state)<br/>      &amp; 8:?row<br/>      &amp;\u00a0:?dealt<br/>      &amp; ( pick<br/>        =   sep<br/>          .   (   -1+!row:&gt;0:?row<br/>                &amp; \" \":?sep<br/>              | \\n:?sep&amp;8:?row<br/>              )<br/>            &amp;\u00a0!dealt\u00a0!arg\u00a0!sep:?dealt<br/>        )<br/>      &amp; 2^31:?B<br/>      &amp; 2^16:?D<br/>      &amp; \"<br/>        'Hard code' the numbers B and D into the rand function using<br/>        macro expansion. (Gives a marginally faster execution speed.)<br/>        \"<br/>      &amp;     <br/>          ' ( <br/>            .   mod$(!state*214013+2531011.$B):?state<br/>              &amp; div$(!state.$D)<br/>            )<br/>       \u00a0: (=?rand)<br/>      &amp;\u00a0!L+1:?L<br/>      &amp;   whl<br/>        ' ( mod$(rand$.!L+-1:?L):?i<br/>          &amp;\u00a0!deck:?A [!i\u00a0%?card\u00a0?Z<br/>          &amp;   (\u00a0!Z:?Z\u00a0%@?last&amp;!A\u00a0!last\u00a0!Z<br/>              |\u00a0!A<br/>              )<br/>           \u00a0:\u00a0?deck<br/>          &amp; pick$!card<br/>          )<br/>      &amp; pick$\\n<br/>      &amp; str$!dealt<br/>  )<br/>&amp; createArray$:?deck<br/>&amp; put$(\"Game #1\\n\",\"dealt.txt\",NEW)<br/>&amp; put$(deal$(!deck.1),\"dealt.txt\",APP)<br/>&amp; put$(\"<br/>\u00a0<br/>Game #617<br/>\",\"dealt.txt\",APP)<br/>&amp; put$(deal$(!deck.617),\"dealt.txt\",APP)<br/>&amp;<br/>)</pre>"}, {"lang": "C", "loc": 46, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;locale.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">wchar_t</span> s_suits<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> L<span class=\"st0\">\"\u2663\u2666\u2665\u2660\"</span><span class=\"sy0\">,</span> s_nums<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> L<span class=\"st0\">\"A23456789TJQK\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define RMAX32 ((1U &lt;&lt; 31) - 1)</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> seed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span>  rnd<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seed <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> RMAX32<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> srnd<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> seed <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  <span class=\"es5\">\\033</span>[%dm%lc<span class=\"es5\">\\033</span>[m%lc\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"sy0\">*</span>c<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>\t\t\ts_suits<span class=\"br0\">[</span><span class=\"sy0\">*</span>c <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s_nums<span class=\"br0\">[</span><span class=\"sy0\">*</span>c <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">52</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> deal<span class=\"br0\">(</span><span class=\"kw4\">int</span> s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>t<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\tsrnd<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">51</span> <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">51</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tj <span class=\"sy0\">=</span> <span class=\"nu0\">51</span> <span class=\"sy0\">-</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">52</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> s<span class=\"sy0\">,</span> card<span class=\"br0\">[</span><span class=\"nu0\">52</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">11982</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/setlocale.html\"><span class=\"kw3\">setlocale</span></a><span class=\"br0\">(</span>LC_ALL<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tdeal<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> card<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Hand\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow<span class=\"br0\">(</span>card<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 170, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> FreeCellDeals<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> RNG<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> _state<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> RNG<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            _state <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">.</span><span class=\"me1\">Ticks</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> RNG<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            _state <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Next<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>_state <span class=\"sy0\">=</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> _state <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> Rank<br/>    <span class=\"br0\">{</span><br/>        Ace,<br/>        One,<br/>        Two,<br/>        Three,<br/>        Four,<br/>        Five,<br/>        Six,<br/>        Seven,<br/>        Eight,<br/>        Nine,<br/>        Ten,<br/>        Jack,<br/>        Queen,<br/>        King<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> Suit<br/>    <span class=\"br0\">{</span><br/>        Clubs,<br/>        Diamonds,<br/>        Hearts,<br/>        Spades<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Card<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> Ranks <span class=\"sy0\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> Suits <span class=\"sy0\">=</span> <span class=\"st0\">\"CDHS\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> Rank _rank<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> Rank Rank<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> _rank<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">set</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw1\">value</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw1\">value</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> InvalidOperationException<span class=\"br0\">(</span><span class=\"st0\">\"Setting card rank out of range\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                _rank <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> Suit _suit<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> Suit Suit<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> _suit<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">set</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw1\">value</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw1\">value</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> InvalidOperationException<span class=\"br0\">(</span><span class=\"st0\">\"Setting card rank out of range\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                _suit <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Card<span class=\"br0\">(</span>Rank rank, Suit suit<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Rank <span class=\"sy0\">=</span> rank<span class=\"sy0\">;</span><br/>            Suit <span class=\"sy0\">=</span> suit<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> NRank<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> Rank<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> NSuit<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> Suit<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>Ranks<span class=\"br0\">[</span>NRank<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span>, Suits<span class=\"br0\">[</span>NSuit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> FreeCellDeal<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span> Deck <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> FreeCellDeal<span class=\"br0\">(</span><span class=\"kw4\">int</span> iDeal<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            RNG rng <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> RNG<span class=\"br0\">(</span>iDeal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            List<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span> rDeck <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Deck <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> rank <span class=\"sy0\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy0\">;</span> rank<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> suit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> suit <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> suit<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    rDeck<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Card<span class=\"br0\">(</span><span class=\"br0\">(</span>Rank<span class=\"br0\">)</span>rank, <span class=\"br0\">(</span>Suit<span class=\"br0\">)</span>suit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">// Normally we deal from the front of a deck.  The algorithm \"deals\" from the back so we reverse the</span><br/>            <span class=\"co1\">// deck here to more conventionally deal from the front/start of the array.</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> iCard <span class=\"sy0\">=</span> <span class=\"nu0\">51</span><span class=\"sy0\">;</span> iCard <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> iCard<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> iSwap <span class=\"sy0\">=</span> rng<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>iCard <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Deck<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>rDeck<span class=\"br0\">[</span>iSwap<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                rDeck<span class=\"br0\">[</span>iSwap<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rDeck<span class=\"br0\">[</span>iCard<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            StringBuilder sb <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> iRow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> iRow <span class=\"sy0\">&lt;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> iRow<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> iCol <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> iCol <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> iCol<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    sb<span class=\"sy0\">.</span><span class=\"me1\">AppendFormat</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} \"</span>, Deck<span class=\"br0\">[</span>iRow <span class=\"sy0\">*</span> <span class=\"nu0\">8</span> <span class=\"sy0\">+</span> iCol<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                sb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> iCard <span class=\"sy0\">=</span> <span class=\"nu0\">48</span><span class=\"sy0\">;</span> iCard <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"sy0\">;</span> iCard<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                sb<span class=\"sy0\">.</span><span class=\"me1\">AppendFormat</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} \"</span>, Deck<span class=\"br0\">[</span>iCard<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> FreeCellDeal<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> FreeCellDeal<span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 78, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> fc_dealer<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> deal<span class=\"br0\">(</span> <span class=\"kw4\">int</span> game <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_gn <span class=\"sy1\">=</span> game<span class=\"sy4\">;</span><br/>\tfillDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tshuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tdisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> fillDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> p <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy4\">;</span> c<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> s <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> s<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t_cards<span class=\"br0\">[</span>p<span class=\"sy2\">++</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> c <span class=\"sy3\">|</span> s <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">srand</span><span class=\"br0\">(</span> _gn <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> cc <span class=\"sy1\">=</span> <span class=\"nu0\">52</span>, nc, lc<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> cc <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    nc <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> cc<span class=\"sy4\">;</span><br/>\t    lc <span class=\"sy1\">=</span> _cards<span class=\"br0\">[</span><span class=\"sy2\">--</span>cc<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t    _cards<span class=\"br0\">[</span>cc<span class=\"br0\">]</span> <span class=\"sy1\">=</span> _cards<span class=\"br0\">[</span>nc<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t    _cards<span class=\"br0\">[</span>nc<span class=\"br0\">]</span> <span class=\"sy1\">=</span> lc<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span><span class=\"sy2\">*</span> suit <span class=\"sy1\">=</span> <span class=\"st0\">\"CDHS\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">char</span><span class=\"sy2\">*</span> symb <span class=\"sy1\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> z <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"GAME #\"</span> <span class=\"sy1\">&lt;&lt;</span> _gn <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"=======================\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">51</span><span class=\"sy4\">;</span> c <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> c<span class=\"sy2\">--</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> symb<span class=\"br0\">[</span>_cards<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> suit<span class=\"br0\">[</span>_cards<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>z <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t\tz <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> _cards<span class=\"br0\">[</span><span class=\"nu0\">52</span><span class=\"br0\">]</span>, _gn<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    fc_dealer dealer<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> gn<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Game number please ( 0 to QUIT ): \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> gn<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>gn <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tdealer.<span class=\"me1\">deal</span><span class=\"br0\">(</span> gn <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 33, "block": "<pre class=\"text highlighted_source\">shared void freeCellDeal() {<br/>\u00a0<br/>\t//a function that returns a random number generating function<br/>\tfunction createRNG(variable Integer state) =&gt; <br/>\t\t\t() =&gt; (state = (214_013 * state + 2_531_011)\u00a0% 2^31) / 2^16;<br/>\u00a0<br/>\tvoid deal(Integer num) {<br/>\t\t// create an array with a list comprehension<br/>\t\tvariable value deck = Array {<br/>\t\t\tfor(rank in \"A23456789TJQK\")<br/>\t\t\tfor(suit in \"CDHS\")<br/>\t\t\t\"``rank````suit``\"<br/>\t\t};<br/>\t\tvalue rng = createRNG(num);<br/>\t\tfor(i in 1..52) {<br/>\t\t\tvalue index = rng()\u00a0% deck.size;<br/>\t\t\tassert(exists lastIndex = deck.lastIndex);<br/>\t\t\t//swap the random card with the last one<br/>\t\t\tdeck.swap(index, lastIndex);<br/>\t\t\t//print the last one<br/>\t\t\tprocess.write(\"``deck.last else \"missing card\"`` \" );<br/>\t\t\tif(i\u00a0% 8 == 0) {<br/>\t\t\t\tprint(\"\");<br/>\t\t\t}<br/>\t\t\t//and shrink the array to remove the last card<br/>\t\t\tdeck = deck[...lastIndex - 1];<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tdeal(1);<br/>\tprint(\"\\n\");<br/>\tdeal(617);<br/>}</pre>"}, {"lang": "Clojure", "loc": 16, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> deck <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>rank <span class=\"st0\">\"A23456789TJQK\"</span> suit <span class=\"st0\">\"CDHS\"</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> rank suit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> lcg <span class=\"br0\">[</span>seed<span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>right <span class=\"sy0\">%</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">rest</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> #<span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">%</span> <span class=\"nu0\">214013</span><span class=\"br0\">)</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>left <span class=\"nu0\">1</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span> seed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> gen <span class=\"br0\">[</span>seed<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>rnd rng<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>mod rnd rng<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> rng<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>lcg seed<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">52</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> xchg <span class=\"br0\">[</span>v <span class=\"br0\">[</span>src dst<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> v dst <span class=\"br0\">(</span>v src<span class=\"br0\">)</span> src <span class=\"br0\">(</span>v dst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> show <span class=\"br0\">[</span>seed<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>println <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">partition</span> <span class=\"nu0\">8</span> <span class=\"nu0\">8</span> <span class=\"st0\">\"\"</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> xchg deck <span class=\"br0\">(</span>gen seed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>show <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 26, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-rng <span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>    #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>ash <span class=\"br0\">(</span><span class=\"kw1\">setf</span> seed <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">214013</span> seed<span class=\"br0\">)</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> -<span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> split <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">(</span>map '<span class=\"kw1\">list</span> #'string s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-deck <span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>hand <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">52</span> <span class=\"sy0\">:</span><span class=\"me1\">fill-pointer</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>rng <span class=\"br0\">(</span>make-rng seed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>d <span class=\"br0\">(</span>split <span class=\"st0\">\"A23456789TJQK\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>s <span class=\"br0\">(</span>split <span class=\"st0\">\"\u2663\u2666\u2665\u2660\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>vector-push <span class=\"br0\">(</span>concatenate 'string d s<span class=\"br0\">)</span> hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">52</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>rotatef <span class=\"br0\">(</span><span class=\"kw1\">aref</span> hand <span class=\"br0\">(</span>- <span class=\"nu0\">51</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">aref</span> hand <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> rng<span class=\"br0\">)</span> <span class=\"br0\">(</span>- <span class=\"nu0\">52</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>nreverse hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> show-deck <span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>hand <span class=\"br0\">(</span>make-deck seed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%Hand ~d~%\"</span> seed<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">52</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A \"</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> hand i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod i <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>write-line <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>show-deck <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>show-deck <span class=\"nu0\">617</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 39, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> RandomGenerator <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint</span> seed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">@property</span> <span class=\"kw4\">uint</span> next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seed <span class=\"sy0\">*</span> <span class=\"nu0\">214</span>_013 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>_531_011<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw4\">int</span>.<span class=\"me1\">max</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> seed <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Deck <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">52</span><span class=\"br0\">]</span> cards<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> deal<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> seed<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">enum</span> <span class=\"kw4\">int</span> nc <span class=\"sy0\">=</span> cards.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// Must be signed for iota.</span><br/>        nc.<span class=\"me1\">iota</span>.<span class=\"me1\">retro</span>.<span class=\"me1\">copy</span><span class=\"br0\">(</span>cards<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> rnd <span class=\"sy0\">=</span> RandomGenerator<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> c<span class=\"sy0\">;</span> cards<span class=\"br0\">)</span><br/>            c.<span class=\"me1\">swap</span><span class=\"br0\">(</span>cards<span class=\"br0\">[</span><span class=\"br0\">(</span>nc <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> rnd.<span class=\"me1\">next</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>nc <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%-(\u00a0%s%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span><br/>                 cards<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                 .<span class=\"me1\">chunks</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>                 .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> only<span class=\"br0\">(</span><span class=\"st0\">\"A23456789TJQK\"</span><span class=\"br0\">[</span>c <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                                 <span class=\"st0\">\"CDHS\"</span><span class=\"br0\">[</span>c <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">uint</span> <span class=\"sy0\">:</span> <span class=\"nu0\">11</span>_982<span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Hand \"</span><span class=\"sy0\">,</span> seed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Deck cards<span class=\"sy0\">;</span><br/>    cards.<span class=\"me1\">deal</span><span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    cards.<span class=\"me1\">show</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 29, "block": "<pre class=\"text highlighted_source\">defmodule FreeCell do<br/>  import Bitwise<br/>\u00a0<br/>  @suits ~w( C D H S )<br/>  @pips ~w( A 2 3 4 5 6 7 8 9 T J Q K )<br/>  @orig_deck for pip &lt;- @pips, suit &lt;- @suits, do: pip &lt;&gt; suit<br/>\u00a0<br/>  def deal(games) do<br/>    games = if length(games) == 0, do: [Enum.random(1..32000)], else: games<br/>    Enum.each(games, fn seed -&gt;<br/>      IO.puts \"Game ##{seed}\"<br/>      Enum.reduce(52..2, {seed,@orig_deck}, fn len,{state,deck} -&gt;<br/>        state = ((214013 * state) + 2531011) &amp;&amp;&amp; 0x7fff_ffff<br/>        index = rem(state &gt;&gt;&gt; 16, len)<br/>        last = len - 1<br/>        {a, b} = {Enum.at(deck, index), Enum.at(deck, last)}<br/>        {state, deck |&gt; List.replace_at(index, b) |&gt; List.replace_at(last, a)}<br/>      end)<br/>      |&gt; elem(1)<br/>      |&gt; Enum.reverse<br/>      |&gt; Enum.chunk(8,8,[])<br/>      |&gt; Enum.each(fn row -&gt; Enum.join(row, \" \") |&gt; IO.puts end)<br/>      IO.puts \"\"<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>System.argv |&gt; Enum.map(&amp;String.to_integer/1)<br/>|&gt; FreeCell.deal</pre>"}, {"lang": "ERRE", "loc": 52, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM FREECELL<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>DIM CARDS%[52]<br/>\u00a0<br/>PROCEDURE XRANDOM(SEED-&gt;XRND)<br/>    POW31=2^31<br/>    POW16=2^16<br/>    SEED=SEED*214013+2531011<br/>    SEED=SEED-POW31*INT(SEED/POW31)<br/>    XRND=INT(SEED/POW16)<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE DEAL(CARDS%[],GAME_NUM)<br/>    LOCAL I%,J%,S%<br/>    SEED=GAME_NUM<br/>    FOR I%=1 TO 52 DO<br/>      CARDS%[I%]=52-I%<br/>    END FOR<br/>    FOR I%=1 TO 51 DO<br/>      XRANDOM(SEED-&gt;XRND)<br/>      J%=52-XRND MOD (53-I%)<br/>      S%=CARDS%[I%]<br/>      CARDS%[I%]=CARDS%[J%]<br/>      CARDS%[J%]=S%<br/>    END FOR<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE SHOW(CARDS%[])<br/>    LOCAL INDEX%<br/>    FOR INDEX%=1 TO 52 DO<br/>      PRINT(MID$(SUITS$,CARDS%[INDEX%] MOD 4+1,1);MID$(NUMS$,CARDS%[INDEX%] DIV 4+1,1);\" \";)<br/>      IF INDEX% MOD 8=0 OR INDEX%=52 THEN<br/>        PRINT<br/>      END IF<br/>    END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    PRINT(CHR$(12);)<br/>    SUITS$=\"\u2663\u2666\u2665\u2660\"<br/>    NUMS$=\"A23456789TJQK\"<br/>    GAME_NUM=1982 \u00a0! if missing command line<br/>    IF CMDLINE$&lt;&gt;\"\" THEN GAME_NUM=VAL(CMDLINE$) END IF<br/>    SEED=1<br/>    DEAL(CARDS%[],GAME_NUM)<br/>    PRINT(\"Hand \";GAME_NUM)<br/>    SHOW(CARDS%[])<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 33, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> msKindaRand seed <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> state <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> seed<br/>  <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_:<span class=\"kw4\">unit</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      state <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <span class=\"sy0\">!</span>state <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;&amp;</span> System.<span class=\"me1\">Int32</span>.<span class=\"me1\">MaxValue</span><br/>      <span class=\"sy0\">!</span>state <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;&lt;</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> unshuffledDeck <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">51</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>sprintf <span class=\"st0\">\"%c%c\"</span> <span class=\"st0\">\"A23456789TJQK\"</span>.<span class=\"br0\">[</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"st0\">\"CDHS\"</span>.<span class=\"br0\">[</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> deal boot idx <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span>last,rest<span class=\"br0\">)</span> <span class=\"sy0\">=</span> boot <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">fun</span> xs<span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">head</span> xs<span class=\"br0\">)</span>,<span class=\"br0\">(</span>xs <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">tail</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> idx<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">length</span> boot<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> last, rest<br/>  <span class=\"kw1\">else</span><br/>    rest<br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">mapi</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i x <span class=\"sy0\">-&gt;</span> i,x<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">partition</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> idx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span>xs,ys<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">snd</span> xs<span class=\"br0\">)</span>,<span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">snd</span> ys<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span>xs,ys<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">head</span> ys<span class=\"br0\">)</span>,<span class=\"br0\">(</span>xs @ last::<span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">tail</span> ys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> game gameNo <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> rnd <span class=\"sy0\">=</span> msKindaRand gameNo<br/>  <span class=\"br0\">[</span><span class=\"nu0\">52</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span>rnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> i<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>dealt, boot<span class=\"br0\">)</span> idx<span class=\"sy0\">-&gt;</span>deal boot idx <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span>x,xs<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x::dealt, xs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>,unshuffledDeck<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">fst</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">chunkBySize</span> <span class=\"nu0\">8</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>  <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"Game #%d<span class=\"es0\">\\n</span>%s<span class=\"es0\">\\n</span>\"</span> gameNo<br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">617</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> game<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 55, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> Freecell<br/>  <span class=\"kw3\">use</span> lcgs<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">suit</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"CDHS\"</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rank</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">deck</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">51</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> Createdeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, n<br/>\u00a0<br/>  n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">13</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><br/>      deck<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> rank<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">//</span> suit<span class=\"br0\">(</span>j<span class=\"sy0\">:</span>j<span class=\"br0\">)</span><br/>      n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> Freecelldeal<span class=\"br0\">(</span>game<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">game</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rnum</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">tmp</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> Createdeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  rnum <span class=\"sy0\">=</span> msrand<span class=\"br0\">(</span>game<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">51</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    n <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>rnum, i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    tmp <span class=\"sy0\">=</span> deck<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    deck<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    deck<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> tmp<br/>    rnum <span class=\"sy0\">=</span> msrand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a, i0)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Game #\"</span>, game<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(8(a, tr1))\"</span><span class=\"br0\">)</span> deck<span class=\"br0\">(</span><span class=\"nu0\">51</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span>  <br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> Freecell<br/>\u00a0<br/><span class=\"kw1\">program</span> Freecell_test<br/>  <span class=\"kw3\">use</span> Freecell<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> Freecelldeal<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> Freecelldeal<span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 62, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 04-11-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' to seed ms_lcg(seed &gt; -1)</span><br/><span class=\"co1\">' to get random number ms_lcg(-1) or ms_lcg() or just ms_lcg</span><br/><span class=\"kw1\">Function</span> ms_lcg<span class=\"br0\">(</span>seed <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/>    <span class=\"kw1\">Static</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> ms_state<br/>\u00a0<br/>    <span class=\"kw1\">If</span> seed &lt;&gt; -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        ms_state = seed <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> ^ <span class=\"nu0\">31</span><br/>    <span class=\"kw1\">Else</span><br/>        ms_state = <span class=\"br0\">(</span><span class=\"nu0\">214013</span> * ms_state + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> ^ <span class=\"nu0\">31</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> ms_state <span class=\"kw1\">Shr</span> <span class=\"nu0\">16</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> card<span class=\"br0\">(</span><span class=\"nu0\">51</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> suit = <span class=\"st0\">\"CDHS\"</span>, value = <span class=\"st0\">\"A23456789TJQK\"</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, c, s, v, game = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong game_nr<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">617</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>\u00a0<br/>    ms_lcg<span class=\"br0\">(</span>game_nr<span class=\"br0\">(</span>game<span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"co1\">' seed generator</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"game #\"</span>; game_nr<span class=\"br0\">(</span>game<span class=\"br0\">)</span><br/>    game = game + <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">51</span>             <span class=\"co1\">' set up the cards</span><br/>        card<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = i<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">51</span> <span class=\"kw1\">To</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span>     <span class=\"co1\">' shuffle</span><br/>        c = ms_lcg <span class=\"kw1\">Mod</span> <span class=\"br0\">(</span>i +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Swap</span> card<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, card<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    c = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><br/>            s = card<span class=\"br0\">(</span><span class=\"nu0\">51</span> - c<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">4</span><br/>            v = card<span class=\"br0\">(</span><span class=\"nu0\">51</span> - c<span class=\"br0\">)</span> \\ <span class=\"nu0\">4</span><br/>            <span class=\"kw1\">Print</span> <span class=\"kw1\">Chr</span><span class=\"br0\">(</span>value<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"br0\">)</span>; <span class=\"kw1\">Chr</span><span class=\"br0\">(</span>suit<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/>            c = c +<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">If</span> c &gt; <span class=\"nu0\">51</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Loop</span><br/>    <span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> game &gt; <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>game_nr<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 65, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> sSuits <span class=\"sy2\">=</span> <span class=\"st0\">\"CDHS\"</span><br/><span class=\"kw1\">const</span> sNums <span class=\"sy2\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span><br/><span class=\"kw1\">const</span> rMax32 <span class=\"sy2\">=</span> math<span class=\"sy3\">.</span>MaxInt32<br/>\u00a0<br/><span class=\"kw1\">var</span> seed <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw4\">func</span> rnd<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    seed <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>seed<span class=\"sy3\">*</span><span class=\"nu0\">214013</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2531011</span><span class=\"sy1\">)</span> &amp; rMax32<br/>    <span class=\"kw1\">return</span> seed &gt;&gt; <span class=\"nu0\">16</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> deal<span class=\"sy1\">(</span>s <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    seed <span class=\"sy2\">=</span> s<br/>    t <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">52</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">52</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        t<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">51</span> <span class=\"sy3\">-</span> <span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">51</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        j <span class=\"sy2\">:=</span> <span class=\"nu0\">51</span> <span class=\"sy3\">-</span> rnd<span class=\"sy1\">()</span><span class=\"sy3\">%</span><span class=\"sy1\">(</span><span class=\"nu0\">52</span><span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        t<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> t<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> t<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> t<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> show<span class=\"sy1\">(</span>cs <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> cs <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"\u00a0%c%c\"</span><span class=\"sy1\">,</span> sNums<span class=\"sy1\">[</span>c<span class=\"sy3\">/</span><span class=\"nu0\">4</span><span class=\"sy1\">],</span> sSuits<span class=\"sy1\">[</span>c<span class=\"sy3\">%</span><span class=\"nu0\">4</span><span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">%</span><span class=\"nu0\">8</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>cs<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> game <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">switch</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>        rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>        game <span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">32000</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">var</span> err error<br/>        game<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> &amp;&amp; game &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> &amp;&amp; game &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">32000</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">fallthrough</span><br/>    <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"usage: deal [game]\"</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"       where game is a number in the range 1 to 32000\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Game #%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> game<span class=\"sy1\">)</span><br/>    show<span class=\"sy1\">(</span>deal<span class=\"sy1\">(</span>game<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 43, "block": "<pre class=\"groovy highlighted_source\">\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> FreeCell<span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> seed<br/>\u00a0<br/>    List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> createDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> suits <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'\u2663'</span>,<span class=\"st0\">'\u2666'</span>,<span class=\"st0\">'\u2665'</span>,<span class=\"st0\">'\u2660'</span><span class=\"br0\">]</span><br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> values <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span>,<span class=\"st0\">'2'</span>,<span class=\"st0\">'3'</span>,<span class=\"st0\">'4'</span>,<span class=\"st0\">'5'</span>,<span class=\"st0\">'6'</span>,<span class=\"st0\">'7'</span>,<span class=\"st0\">'8'</span>,<span class=\"st0\">'9'</span>,<span class=\"st0\">'10'</span>,<span class=\"st0\">'J'</span>,<span class=\"st0\">'Q'</span>,<span class=\"st0\">'K'</span><span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span>suits,values<span class=\"br0\">]</span>.<span class=\"me1\">combinations</span><span class=\"br0\">{</span>suit,value <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"$suit$value\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> random<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> seed <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.google.de/search?as_q=Integer&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MAX_VALUE</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> seed <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> shuffledDeck<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> cards<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> deck <span class=\"sy0\">=</span> cards.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>       <span class=\"br0\">(</span>deck.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a><span class=\"br0\">{</span>index <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> r <span class=\"sy0\">=</span> random<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            deck.<span class=\"me1\">swap</span><span class=\"br0\">(</span>r, index<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> deck<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> dealGame<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> seed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">seed</span><span class=\"sy0\">=</span> seed<br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> cards <span class=\"sy0\">=</span> shuffledDeck<span class=\"br0\">(</span>createDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">cards</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a><span class=\"br0\">{</span> number<span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a> <span class=\"st0\">\"${cards.pop()}<span class=\"es0\">\\t</span>\"</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>number <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> freecell <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> FreeCell<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>freecell.<span class=\"me1\">dealGame</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>freecell.<span class=\"me1\">dealGame</span><span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 36, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Bits<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>ST<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>ST<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment<br/>\u00a0<br/>srnd <span class=\"sy0\">::</span> Int32 <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>srnd <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> shiftR <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span>&amp;<span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maxBound\"><span class=\"kw3\">maxBound</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>deal <span class=\"sy0\">::</span> Int32 <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>deal s <span class=\"sy0\">=</span> runST <span class=\"br0\">(</span><span class=\"kw1\">do</span><br/>    ar <span class=\"sy0\">&lt;-</span> newListArray <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">51</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sequence\"><span class=\"kw3\">sequence</span></a> <span class=\"br0\">[</span><span class=\"st0\">\"A23456789TJQK\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CDHS\"</span><span class=\"br0\">]</span><br/>          <span class=\"sy0\">::</span> ST s <span class=\"br0\">(</span>STArray s <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/>    forM <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">52</span><span class=\"sy0\">,</span><span class=\"nu0\">51</span><span class=\"sy0\">..</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> rnd<span class=\"br0\">)</span> <span class=\"sy0\">$</span> \\<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> r `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` n<br/>      vj <span class=\"sy0\">&lt;-</span> readArray ar j<br/>      vn <span class=\"sy0\">&lt;-</span> readArray ar <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      writeArray ar j vn<br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> vj<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span> rnd <span class=\"sy0\">=</span> srnd s<br/>\u00a0<br/>showCards <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showCards <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>            takeWhile <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>            unfoldr <span class=\"br0\">(</span>Just <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  args <span class=\"sy0\">&lt;-</span> getArgs<br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> args<span class=\"br0\">)</span> <span class=\"sy0\">::</span> Int32<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Deal \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> s <span class=\"sy0\">++</span> <span class=\"st0\">\":\"</span><br/>  <span class=\"kw1\">let</span> cards <span class=\"sy0\">=</span> deal s<br/>  showCards cards</pre>"}, {"lang": "Icon and Unicon", "loc": 43, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span>          <span class=\"co1\"># freecelldealer</span><br/>   freecelldealer<span class=\"br0\">(</span><span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span><span class=\"br0\">)</span>      <span class=\"co1\"># seed from command line</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> newDeck<span class=\"br0\">(</span><span class=\"br0\">)</span>                   <span class=\"co1\">#: return a new unshuffled deck</span><br/>   <span class=\"kw1\">every</span> D <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span><span class=\"nu0\">52</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&amp;</span> r <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"st0\">\"A23456789TJQK\"</span> <span class=\"sy1\">&amp;</span> s <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"st0\">\"CDHS\"</span> <span class=\"kw1\">do</span> <br/>      D<span class=\"br0\">[</span>i <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> r <span class=\"sy1\">||</span> s   <span class=\"co1\"># initial deck AC AD ... KS</span><br/>   <span class=\"kw1\">return</span> D<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> freecelldealer<span class=\"br0\">(</span>gamenum<span class=\"br0\">)</span>     <span class=\"co1\">#: deal a freecell hand</span><br/>   <span class=\"sy1\">/</span>gamenum <span class=\"sy1\">:=</span> <span class=\"nu0\">11982</span><br/>   <span class=\"kw1\">return</span> showHand<span class=\"br0\">(</span>freecellshuffle<span class=\"br0\">(</span>newDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>gamenum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showHand<span class=\"br0\">(</span>D<span class=\"br0\">)</span>                 <span class=\"co1\">#: show a freecell hand</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Hand:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span>D<span class=\"br0\">[</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>D<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>      <span class=\"kw1\">if</span> i<span class=\"sy1\">%</span>8 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> D<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> freecellshuffle<span class=\"br0\">(</span>D<span class=\"sy1\">,</span>gamenum<span class=\"br0\">)</span>  <span class=\"co1\">#: freecell shuffle</span><br/>\u00a0<br/>   srand_freecell<span class=\"br0\">(</span>gamenum<span class=\"br0\">)</span>                        <span class=\"co1\"># seed random number generator</span><br/>   D2 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">until</span> <span class=\"sy1\">*</span>D <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span>                              <span class=\"co1\"># repeat until all dealt</span><br/>      D<span class=\"br0\">[</span>r <span class=\"sy1\">:=</span> rand_freecell<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">%</span> <span class=\"sy1\">*</span>D <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=:</span> D<span class=\"br0\">[</span><span class=\"sy1\">*</span>D<span class=\"br0\">]</span>  <span class=\"co1\"># swap random &amp; last cards</span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>D2<span class=\"sy1\">,</span><span class=\"kw4\">pull</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>                             <span class=\"co1\"># remove dealt card from list </span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> D2 <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> srand_freecell<span class=\"br0\">(</span>x<span class=\"br0\">)</span>           <span class=\"co1\">#: seed random </span><br/><span class=\"kw2\">static</span> seed<br/>   <span class=\"kw1\">return</span> seed <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>x <span class=\"sy1\">|</span> <span class=\"sy1\">\\</span>seed <span class=\"sy1\">|</span> <span class=\"nu0\">0</span>      <span class=\"co1\"># parm or seed or zero if none </span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> rand_freecell<span class=\"br0\">(</span><span class=\"br0\">)</span>             <span class=\"co1\">#: lcrng </span><br/>   <span class=\"kw1\">return</span> <span class=\"kw4\">ishift</span><span class=\"br0\">(</span>srand_freecell<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy1\">*</span> srand_freecell<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy1\">%</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><span class=\"sy1\">,-</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 12, "block": "<pre class=\"j highlighted_source\">deck=: ,/ <span class=\"st_h\">'A23456789TJQK'</span> ,\"<span class=\"nu0\">0</span>/ <span class=\"nu0\">7</span> u: <span class=\"st_h\">'\u2663\u2666\u2665\u2660'</span><br/>\u00a0<br/>srnd=: <span class=\"nu0\">3</span>\u00a0:<span class=\"st_h\">'SEED=:{.y,11982'</span><br/>srnd <span class=\"st_h\">''</span><br/>seed=: do bind <span class=\"st_h\">'SEED'</span><br/>rnd=: <span class=\"sy0\">(</span><span class=\"nu0\">2</span>^<span class=\"nu0\">16</span><span class=\"sy0\">)</span> &lt;<a class=\"__cf_email__\" data-cfemail=\"e1cfa1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%~ <span class=\"sy0\">(</span><span class=\"nu0\">2</span>^<span class=\"nu0\">31</span><span class=\"sy0\">)</span> <a class=\"__cf_email__\" data-cfemail=\"394a4b575d79\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>| <span class=\"nu0\">2531011</span> + <span class=\"nu0\">214013</span> * seed<br/>\u00a0<br/>pairs=: &lt;@&lt;@<a class=\"__cf_email__\" data-cfemail=\"0f71214f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>&lt;: , <span class=\"sy0\">(</span>| rnd<span class=\"sy0\">))</span>@&gt;:@<a class=\"__cf_email__\" data-cfemail=\"afc681ef82\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@#  <span class=\"co1\">NB. indices to swap, for shuffle</span><br/>swaps=: [: &gt; C.&amp;.&gt;/@|<a class=\"__cf_email__\" data-cfemail=\"dbf59b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;  <span class=\"co1\">NB.                implement the specified shuffle</span><br/>deal=: |<a class=\"__cf_email__\" data-cfemail=\"5e701e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>swaps pairs<span class=\"sy0\">)</span> bind deck<br/>\u00a0<br/>show=: <span class=\"sy0\">(</span>,\"<span class=\"nu0\">2</span><span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span><span class=\"nu0\">_8</span> ]\\ <span class=\"st_h\">' '</span>&amp;,.<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 64, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Shuffler <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> seed<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> deck <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"st0\">\"AC\"</span>, <span class=\"st0\">\"AD\"</span>, <span class=\"st0\">\"AH\"</span>, <span class=\"st0\">\"AS\"</span>,<br/>\t\t\t<span class=\"st0\">\"2C\"</span>, <span class=\"st0\">\"2D\"</span>, <span class=\"st0\">\"2H\"</span>, <span class=\"st0\">\"2S\"</span>,<br/>\t\t\t<span class=\"st0\">\"3C\"</span>, <span class=\"st0\">\"3D\"</span>, <span class=\"st0\">\"3H\"</span>, <span class=\"st0\">\"3S\"</span>,<br/>\t\t\t<span class=\"st0\">\"4C\"</span>, <span class=\"st0\">\"4D\"</span>, <span class=\"st0\">\"4H\"</span>, <span class=\"st0\">\"4S\"</span>,<br/>\t\t\t<span class=\"st0\">\"5C\"</span>, <span class=\"st0\">\"5D\"</span>, <span class=\"st0\">\"5H\"</span>, <span class=\"st0\">\"5S\"</span>,<br/>\t\t\t<span class=\"st0\">\"6C\"</span>, <span class=\"st0\">\"6D\"</span>, <span class=\"st0\">\"6H\"</span>, <span class=\"st0\">\"6S\"</span>,<br/>\t\t\t<span class=\"st0\">\"7C\"</span>, <span class=\"st0\">\"7D\"</span>, <span class=\"st0\">\"7H\"</span>, <span class=\"st0\">\"7S\"</span>,<br/>\t\t\t<span class=\"st0\">\"8C\"</span>, <span class=\"st0\">\"8D\"</span>, <span class=\"st0\">\"8H\"</span>, <span class=\"st0\">\"8S\"</span>,<br/>\t\t\t<span class=\"st0\">\"9C\"</span>, <span class=\"st0\">\"9D\"</span>, <span class=\"st0\">\"9H\"</span>, <span class=\"st0\">\"9S\"</span>,<br/>\t\t\t<span class=\"st0\">\"TC\"</span>, <span class=\"st0\">\"TD\"</span>, <span class=\"st0\">\"TH\"</span>, <span class=\"st0\">\"TS\"</span>,<br/>\t\t\t<span class=\"st0\">\"JC\"</span>, <span class=\"st0\">\"JD\"</span>, <span class=\"st0\">\"JH\"</span>, <span class=\"st0\">\"JS\"</span>,<br/>\t\t\t<span class=\"st0\">\"QC\"</span>, <span class=\"st0\">\"QD\"</span>, <span class=\"st0\">\"QH\"</span>, <span class=\"st0\">\"QS\"</span>,<br/>\t\t\t<span class=\"st0\">\"KC\"</span>, <span class=\"st0\">\"KD\"</span>, <span class=\"st0\">\"KH\"</span>, <span class=\"st0\">\"KS\"</span>,<br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> random<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tseed <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> seed <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MAX_VALUE</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> seed <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//shuffled cards go to the end</span><br/>\t<span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> getShuffledDeck<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> deck <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">deck</span>, <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> deck.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> random<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> card <span class=\"sy0\">=</span> deck<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tdeck<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tdeck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> card<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> deck<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//deal from end first</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> dealGame<span class=\"br0\">(</span><span class=\"kw4\">int</span> seed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">seed</span> <span class=\"sy0\">=</span> seed<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> shuffledDeck <span class=\"sy0\">=</span> getShuffledDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i <span class=\"sy0\">=</span> shuffledDeck.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> count<span class=\"sy0\">++</span>, i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>shuffledDeck<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>count <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tShuffler s <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Shuffler<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts.<span class=\"me1\">dealGame</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts.<span class=\"me1\">dealGame</span><span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 88, "block": "<pre class=\"javascript highlighted_source\"><span class=\"st0\">\"use strict\"</span><span class=\"sy0\">;</span><br/><span class=\"coMULTI\">/*<br/> * Microsoft C Run-time-Library-compatible Random Number Generator<br/> * Copyright by Shlomi Fish, 2011.<br/> * Released under the MIT/X11 License<br/> * ( http://en.wikipedia.org/wiki/MIT_License ).<br/> * */</span><br/><span class=\"coMULTI\">/* This uses Joose 2.x-or-above, an object system for JavaScript - http://code.google.com/p/joose-js/ . */</span><br/>\u00a0<br/>Class<span class=\"br0\">(</span><span class=\"st0\">'MSRand'</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>    has<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>        seed<span class=\"sy0\">:</span> <span class=\"br0\">{</span> is<span class=\"sy0\">:</span> rw<span class=\"sy0\">,</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    methods<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>        rand<span class=\"sy0\">:</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">setSeed</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">getSeed</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7FFFFFFF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">getSeed</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        max_rand<span class=\"sy0\">:</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>mymax<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> mymax<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        shuffle<span class=\"sy0\">:</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>deck.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> deck.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>                while <span class=\"br0\">(</span><span class=\"sy0\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">max_rand</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">var</span> tmp <span class=\"sy0\">=</span> deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    deck<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> deck<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * Microsoft Windows Freecell / Freecell Pro boards generation.<br/> *<br/> * See:<br/> *<br/> * - http://rosettacode.org/wiki/Deal_cards_for_FreeCell<br/> *<br/> * - http://www.solitairelaboratory.com/mshuffle.txt<br/> *<br/> * Under MIT/X11 Licence.<br/> *<br/> * */</span><br/>\u00a0<br/><span class=\"kw1\">function</span> deal_ms_fc_board<span class=\"br0\">(</span>seed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> randomizer <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> MSRand<span class=\"br0\">(</span><span class=\"br0\">{</span> seed<span class=\"sy0\">:</span> seed <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> num_cols <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> _perl_range <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>start<span class=\"sy0\">,</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> end<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            ret.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> columns <span class=\"sy0\">=</span> _perl_range<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> num_cols<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> deck <span class=\"sy0\">=</span> _perl_range<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"nu0\">13</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    randomizer.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    deck <span class=\"sy0\">=</span> deck.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        columns<span class=\"br0\">[</span>i <span class=\"sy0\">%</span> num_cols<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> render_card <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>card<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> suit <span class=\"sy0\">=</span> <span class=\"br0\">(</span>card <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> rank <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>card <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"A23456789TJQK\"</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>rank<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"CDHS\"</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>suit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> render_column <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> col.<span class=\"me1\">map</span><span class=\"br0\">(</span>render_card<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> columns.<span class=\"me1\">map</span><span class=\"br0\">(</span>render_column<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 43, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Lcg<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> state <span class=\"sy0\">=</span> s<br/>\u00a0<br/>    fun nextInt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"br0\">{</span><br/>        state <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> state + c<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> state / d<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> CARDS  <span class=\"sy0\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SUITS  <span class=\"sy0\">=</span> <span class=\"st0\">\"\u2663\u2666\u2665\u2660\"</span><br/>\u00a0<br/>fun deal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">?&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cards <span class=\"sy0\">=</span> arrayOfNulls<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">52</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <span class=\"nu0\">52</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>      <br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> card <span class=\"sy0\">=</span> CARDS<span class=\"br0\">[</span>i / <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> suit <span class=\"sy0\">=</span> SUITS<span class=\"br0\">[</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>       cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$card$suit\"</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> cards<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun game<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Game #$n:\"</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> msc <span class=\"sy0\">=</span> Lcg<span class=\"br0\">(</span><span class=\"nu0\">214013</span>, <span class=\"nu0\">2531011</span>, <span class=\"nu0\">1</span> shl <span class=\"nu0\">31</span>, <span class=\"nu0\">1</span> shl <span class=\"nu0\">16</span>, n.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cards <span class=\"sy0\">=</span> deal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in <span class=\"nu0\">52</span> downTo <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> index <span class=\"sy0\">=</span> <span class=\"br0\">(</span>msc.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> cards<span class=\"br0\">[</span>index<span class=\"br0\">]</span><br/>        cards<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cards<span class=\"br0\">[</span>m - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"$temp  \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">53</span> - m<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>     <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span>       <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    game<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    game<span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logo", "loc": 56, "block": "<pre class=\"text highlighted_source\">; Linear congruential random number generator<br/>make \"_lcg_state 0<br/>\u00a0<br/>to seed_lcg\u00a0:seed<br/>  make \"_lcg_state\u00a0:seed<br/>end<br/>\u00a0<br/>to sample_lcg<br/>  make \"_lcg_state modulo sum product 214013\u00a0:_lcg_state 2531011 2147483648<br/>  output int quotient\u00a0:_lcg_state 65536<br/>end<br/>\u00a0<br/>; FreeCell<br/>to card_from_number\u00a0:number<br/>  output word item sum 1 int quotient\u00a0:number 4 \"A23456789TJQK item sum 1 modulo\u00a0:number 4 \"CDHS <br/>end<br/>\u00a0<br/>to generate_deal\u00a0:number<br/>  (local \"deck \"size \"index \"deal)<br/>  seed_lcg\u00a0:number<br/>  make \"deck []<br/>  repeat 52 [<br/>    make \"deck lput difference # 1\u00a0:deck<br/>  ]<br/>  make \"deck listtoarray\u00a0:deck<br/>  make \"deal []<br/>  repeat 52 [<br/>    make \"size difference 53 #<br/>    make \"index sum 1 modulo sample_lcg\u00a0:size<br/>    make \"deal lput item\u00a0:index\u00a0:deck\u00a0:deal<br/>    setitem\u00a0:index\u00a0:deck item\u00a0:size\u00a0:deck<br/>  ]<br/>  output\u00a0:deal<br/>end<br/>\u00a0<br/>to print_deal\u00a0:number<br/>  (local \"deal \"i \"j \"index)<br/>  make \"deal generate_deal\u00a0:number<br/>  repeat 7 [<br/>    make \"i difference # 1<br/>    repeat (ifelse [equal?\u00a0:i 6] 4 8) [<br/>      make \"j difference # 1<br/>      make \"index (sum 1 product\u00a0:i 8\u00a0:j)<br/>      type (word (card_from_number item\u00a0:index\u00a0:deal) \"| |)<br/>    ]<br/>    print \"||<br/>  ]<br/>end<br/>\u00a0<br/>print [Game #1]<br/>print_deal 1<br/>print \"||<br/>print [Game #617]<br/>print_deal 617<br/>print \"||<br/>bye</pre>"}, {"lang": "Lua", "loc": 36, "block": "<pre class=\"lua highlighted_source\">deck <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>rank <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"6\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"7\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"8\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"9\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"T\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"J\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Q\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"K\"</span><span class=\"br0\">}</span><br/>suit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"S\"</span><span class=\"br0\">}</span><br/>two31<span class=\"sy0\">,</span> state <span class=\"sy0\">=</span> bit32<span class=\"sy0\">.</span>lshift<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">function</span> rng<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    state <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> state <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> two31<br/>    <span class=\"kw1\">return</span> bit32<span class=\"sy0\">.</span>rshift<span class=\"br0\">(</span>state<span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> initdeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> r <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>rank<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j<span class=\"sy0\">,</span> s <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>suit<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>deck<span class=\"sy0\">,</span> r <span class=\"sy0\">..</span> s<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> deal<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>    initdeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    state <span class=\"sy0\">=</span> num<br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Game #\"</span> <span class=\"sy0\">..</span> num<span class=\"br0\">)</span><br/>    <span class=\"kw1\">repeat</span><br/>        choice <span class=\"sy0\">=</span> rng<span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"sy0\">#</span>deck <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        deck<span class=\"br0\">[</span>choice<span class=\"br0\">]</span><span class=\"sy0\">,</span> deck<span class=\"br0\">[</span><span class=\"sy0\">#</span>deck<span class=\"br0\">]</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">[</span><span class=\"sy0\">#</span>deck<span class=\"br0\">]</span><span class=\"sy0\">,</span> deck<span class=\"br0\">[</span>choice<span class=\"br0\">]</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">..</span> deck<span class=\"br0\">[</span><span class=\"sy0\">#</span>deck<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">#</span>deck <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        deck<span class=\"br0\">[</span><span class=\"sy0\">#</span>deck<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>    <span class=\"kw1\">until</span> <span class=\"sy0\">#</span>deck <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>deal<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>deal<span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 13, "block": "<pre class=\"text highlighted_source\">next[last_]\u00a0:= Mod[214013 last + 2531011, 2^31];<br/>deal[n_]\u00a0:= <br/>  Module[{last = n, idx, <br/>    deck = StringJoin /@ <br/>      Tuples[{{\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", <br/>         \"Q\", \"K\"}, {\"C\", \"D\", \"H\", \"S\"}}], res = {}}, <br/>   While[deck\u00a0!= {}, last = next[last]; <br/>    idx = Mod[BitShiftRight[last, 16], Length[deck]] + 1; <br/>    deck = ReplacePart[deck, {idx -&gt; deck[[-1]], -1 -&gt; deck[[idx]]}]; <br/>    AppendTo[res, deck[[-1]]]; deck = deck[[;; -2]]]; res];<br/>format[deal_]\u00a0:= Grid[Partition[deal, 8, 8, {1, 4}, Null]];<br/>Print[format[deal[1]]];<br/>Print[format[deal[617]]];</pre>"}, {"lang": "Nim", "loc": 29, "block": "<pre class=\"text highlighted_source\">import sequtils, strutils, os<br/>\u00a0<br/>proc randomGenerator(seed: int): iterator: int =<br/>  var seed = seed<br/>  return iterator: int =<br/>    while true:<br/>      seed = (seed.int64 * 214013 + 2531011) and int32.high<br/>      yield seed shr 16<br/>\u00a0<br/>proc deal(seed): seq[int] =<br/>  const nc = 52<br/>  result = toSeq countdown(nc - 1, 0)<br/>  var rnd = randomGenerator seed<br/>  for i in 0 .. &lt;nc:<br/>    let r = rnd()<br/>    let j = (nc - 1) - r mod (nc - i)<br/>    swap result[i], result[j]<br/>\u00a0<br/>proc show(cards) =<br/>  var l = newSeq[string]()<br/>  for c in cards:<br/>    l.add \"A23456789TJQK\"[c div 4] &amp; \"CDHS\"[c mod 4]<br/>  for i in countup(0, cards.high, 8):<br/>    echo \" \", l[i..min(i+7, l.high)].join(\" \")<br/>\u00a0<br/>let seed = if paramCount() == 1: paramStr(1).parseInt else: 11982<br/>echo \"Hand \", seed<br/>let deck = deal seed<br/>show deck</pre>"}, {"lang": "Objeck", "loc": 70, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> FreeCell <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    Deal<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Deal<span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Deal<span class=\"br0\">(</span>seed <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    deck <span class=\"sy0\">:=</span> Deck<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"Game #{$seed}:<span class=\"es0\">\\n</span>{$deck}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Deck <span class=\"br0\">{</span><br/>  @cards <span class=\"sy0\">:</span> Card<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  New<span class=\"br0\">(</span>seed <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    r <span class=\"sy0\">:=</span> Random<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    @cards <span class=\"sy0\">:=</span> Card<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span><span class=\"nu0\">52</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      @cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Card<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">51</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">51</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      j <span class=\"sy0\">:=</span> <span class=\"nu0\">51</span> <span class=\"sy0\">-</span> r<span class=\"sy0\">-&gt;</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">52</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      tmp <span class=\"sy0\">:=</span> @cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> @cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> @cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span> @cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    buffer <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> @cards<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      buffer <span class=\"sy0\">+=</span> @cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      buffer <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">=</span> <span class=\"nu0\">7</span>\u00a0? <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> buffer<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Random <span class=\"br0\">{</span><br/>  @seed <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  New<span class=\"br0\">(</span>seed <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    @seed <span class=\"sy0\">:=</span> seed<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> Next<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    @seed <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>@seed <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> and Int<span class=\"sy0\">-&gt;</span><span class=\"me1\">MaxSize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> @seed <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Card <span class=\"br0\">{</span><br/>  @value <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>  @suit <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  New<span class=\"br0\">(</span>value <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    @value <span class=\"sy0\">:=</span> value <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> @suit <span class=\"sy0\">:=</span> value <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    suits <span class=\"sy0\">:=</span> <span class=\"st0\">\"\u2663\u2666\u2665\u2660\"</span><span class=\"sy0\">;</span> values <span class=\"sy0\">:=</span> <span class=\"st0\">\"A23456789TJQK\"</span><span class=\"sy0\">;</span>    <br/>    value <span class=\"sy0\">:=</span> values<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>@value<span class=\"br0\">)</span><span class=\"sy0\">;</span> suit <span class=\"sy0\">:=</span> suits<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>@suit<span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"{$value}{$suit}\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 89, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#define RMAX32 ((1U &lt;&lt; 31) - 1)</span><br/>\u00a0<br/><span class=\"co2\">//--------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> Rand <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span> initWithSeed<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>seed;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> next;<br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>nonatomic<span class=\"br0\">)</span> <span class=\"kw4\">long</span> seed;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Rand<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span> initWithSeed<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>seed <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        self.seed <span class=\"sy0\">=</span> seed;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> next <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>_seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>_seed <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> RMAX32<span class=\"br0\">)</span> &gt;&gt; <span class=\"nu0\">16</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"co2\">//--------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> Card <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span> initWithSequence<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>n;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span> initWithValue<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>v suit<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>s;<br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>nonatomic<span class=\"br0\">)</span> <span class=\"kw4\">int</span> value;<br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>nonatomic<span class=\"br0\">)</span> <span class=\"kw4\">int</span> suit;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Card<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span> initWithSequence<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>self initWithValue<span class=\"sy0\">:</span>n<span class=\"sy0\">/</span><span class=\"nu0\">4</span> suit<span class=\"sy0\">:</span>n<span class=\"sy0\">%</span>4<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span> initWithValue<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>v suit<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>s <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        _value <span class=\"sy0\">=</span> v;  _suit <span class=\"sy0\">=</span> s;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span> description <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span> <span class=\"kw4\">const</span> kSuits <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"\u2663\u2666\u2665\u2660\"</span>;<br/>    <span class=\"kw4\">static</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span> <span class=\"kw4\">const</span> kValues <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"A23456789TJQK\"</span>;<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithFormat<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"%C%C\"</span>,<br/>            <span class=\"br0\">[</span>kValues characterAtIndex<span class=\"sy0\">:</span>_value<span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span>kSuits characterAtIndex<span class=\"sy0\">:</span>_suit<span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"co2\">//--------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> Deck <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span> initWithSeed<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>seed;<br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>nonatomic, strong<span class=\"br0\">)</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>cards;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Deck<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span> initWithSeed<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>seed <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Rand <span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>Rand alloc<span class=\"br0\">]</span> initWithSeed<span class=\"sy0\">:</span>seed<span class=\"br0\">]</span>;<br/>        _cards <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> array<span class=\"br0\">]</span>;<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; <span class=\"nu0\">52</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span>_cards addObject<span class=\"sy0\">:</span><span class=\"br0\">[</span><span class=\"br0\">[</span>Card alloc<span class=\"br0\">]</span> initWithSequence<span class=\"sy0\">:</span><span class=\"nu0\">51</span> <span class=\"sy0\">-</span> i<span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; <span class=\"nu0\">51</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span>_cards exchangeObjectAtIndex<span class=\"sy0\">:</span>i withObjectAtIndex<span class=\"sy0\">:</span><span class=\"nu0\">51</span> <span class=\"sy0\">-</span> <span class=\"br0\">[</span>r next<span class=\"br0\">]</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">52</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span> description <span class=\"br0\">{</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> <span class=\"kw4\">string</span><span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; <span class=\"br0\">[</span>_cards count<span class=\"br0\">]</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>s appendString<span class=\"sy0\">:</span><span class=\"br0\">[</span>_cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span> description<span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>        <span class=\"br0\">[</span>s appendString<span class=\"sy0\">:</span>i<span class=\"sy0\">%</span>8<span class=\"sy0\">==</span><span class=\"nu0\">7</span>\u00a0? <span class=\"co3\">@</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"co3\">@</span><span class=\"st0\">\" \"</span><span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> s;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"co2\">//--------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    @autoreleasepool <span class=\"br0\">{</span><br/>        NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"Deck 1<span class=\"es0\">\\n</span>%@<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>Deck alloc<span class=\"br0\">]</span> initWithSeed<span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"Deck 617<span class=\"es0\">\\n</span>%@<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>Deck alloc<span class=\"br0\">]</span> initWithSeed<span class=\"sy0\">:</span><span class=\"nu0\">617</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 41, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> srnd x <span class=\"sy0\">=</span><br/>  <span class=\"co1\">(* since OCaml's built-in int type is at least 31 (note: not 32) bits wide,<br/>     and this problem takes mod 2^31, it is just enough if we treat it as<br/>     an unsigned integer, which means taking the logical right shift *)</span><br/>  <span class=\"kw1\">let</span> seed <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> x <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    seed <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>seed <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"kw1\">land</span> 0x7fffffff<span class=\"sy0\">;</span><br/>    <span class=\"sy0\">!</span>seed <span class=\"kw1\">lsr</span> <span class=\"nu0\">16</span><br/>\u00a0<br/><span class=\"kw1\">let</span> deal s <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> rnd <span class=\"sy0\">=</span> srnd s <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"nu0\">52</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> i<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> cards <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"nu0\">52</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> j <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">52</span> <span class=\"sy0\">-</span> j <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> i <span class=\"sy0\">=</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> n <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> this <span class=\"sy0\">=</span> t<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      t<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> t<span class=\"sy0\">.</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      this<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> show cards <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> suits <span class=\"sy0\">=</span> <span class=\"st0\">\"CDHS\"</span><br/>  <span class=\"kw1\">and</span> nums <span class=\"sy0\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iteri <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i card <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%c%c%c\"</span><br/>      nums<span class=\"sy0\">.</span><span class=\"br0\">[</span>card <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>      suits<span class=\"sy0\">.</span><span class=\"br0\">[</span>card <span class=\"kw1\">mod</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"kw1\">mod</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">7</span> <span class=\"kw1\">then</span> <span class=\"sy0\">'</span>\\n<span class=\"sy0\">'</span> <span class=\"kw1\">else</span> <span class=\"sy0\">'</span> <span class=\"sy0\">'</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> cards<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">11982</span><br/>  <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Deal\u00a0%d:\\n\"</span> s<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> cards <span class=\"sy0\">=</span> deal s <span class=\"kw1\">in</span><br/>  show cards</pre>"}, {"lang": "PARI/GP", "loc": 13, "block": "<pre class=\"parigp highlighted_source\">card<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"3\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"4\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"6\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"7\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"8\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"9\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"T\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"J\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Q\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"K\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"sy0\">\\</span><span class=\"nu1\">4</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"H\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"S\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"sy0\">%</span><span class=\"nu2\">4</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>nextrand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span>state<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu1\">214013</span><span class=\"sy0\">*</span>state<span class=\"sy0\">+</span><span class=\"nu1\">2531011</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">^</span><span class=\"nu1\">31</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;&gt;</span><span class=\"nu1\">16</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>deal<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>deck<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">52</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  local<span class=\"br0\">(</span>state<span class=\"sy0\">=</span>seed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>last<span class=\"sy0\">=</span><span class=\"nu1\">52</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    t<span class=\"sy0\">=</span>nextrand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>last<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print1</span><span class=\"br0\">(</span>card<span class=\"br0\">(</span>deck<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>last<span class=\"sy0\">%</span><span class=\"nu2\">8</span><span class=\"sy0\">==</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    deck<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"sy0\">=</span>deck<span class=\"br0\">[</span>last<span class=\"br0\">]</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 42, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/>\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> utf8<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> deal <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$rnd</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span> <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fffffff<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@d</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A23456789TJQK\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@d</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"st0\">\"$_$b\"</span><span class=\"sy0\">,</span> <span class=\"co2\">qw/\u2663 \u2666 \u2665 \u2660/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$idx</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#d</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$rnd</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"re0\">$idx</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"re0\">$idx</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">@d</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$hand_idx</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">11</span>_982<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$cards</span> <span class=\"sy0\">=</span> deal<span class=\"br0\">(</span><span class=\"re0\">$hand_idx</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$num_cards_in_height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">@$cards</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$string</span> <span class=\"sy0\">.=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a><span class=\"br0\">(</span><span class=\"re0\">@$cards</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/binmode.html\"><span class=\"kw3\">binmode</span></a> <span class=\"kw2\">STDOUT</span><span class=\"sy0\">,</span> <span class=\"st_h\">':encoding(utf-8)'</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Hand $hand_idx<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$string</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 22, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> dealgame <span class=\"br0\">(</span><span class=\"re0\">$game</span><span class=\"sy0\">-</span>number <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">sub</span> ms<span class=\"sy0\">-</span>lcg<span class=\"sy0\">-</span><span class=\"kw2\">method</span><span class=\"br0\">(</span><span class=\"re0\">$seed</span> <span class=\"sy0\">=</span> <span class=\"re0\">$game</span><span class=\"sy0\">-</span>number<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> <span class=\"re0\">$seed</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># lazy list of the random sequence</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@ms</span><span class=\"sy0\">-</span>lcg <span class=\"sy0\">=</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"re0\">&amp;ms</span><span class=\"sy0\">-</span>lcg<span class=\"sy0\">-</span><span class=\"kw2\">method</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*</span> <span class=\"sy0\">+&gt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">constant</span> CardBlock <span class=\"sy0\">=</span> <span class=\"st_h\">'\ud83c\udca0'</span><span class=\"sy0\">.</span><span class=\"me1\">ord</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@deck</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">for</span> flat<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span><span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">48</span><span class=\"sy0\">,</span><span class=\"nu0\">32</span><span class=\"sy0\">...</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$off</span> <span class=\"br0\">{</span><br/>        take chr CardBlock <span class=\"sy0\">+</span> <span class=\"re0\">$off</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@game</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">while</span> <span class=\"re0\">@deck</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"re0\">@ms</span><span class=\"sy0\">-</span>lcg<span class=\"sy0\">.</span><span class=\"kw3\">shift</span> <span class=\"sy0\">%</span> <span class=\"re0\">@deck</span><span class=\"sy0\">,</span> <span class=\"re0\">@deck</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">reverse</span><span class=\"sy0\">;</span><br/>        take <span class=\"re0\">@deck</span><span class=\"sy0\">.</span><span class=\"kw3\">pop</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Game #$game-number\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"re0\">@game</span><span class=\"sy0\">.</span><span class=\"kw3\">splice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span> <span class=\"kw3\">min</span> <span class=\"sy0\">+</span><span class=\"re0\">@game</span><span class=\"br0\">)</span> <span class=\"kw1\">while</span> <span class=\"re0\">@game</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>dealgame<span class=\"sy0\">;</span><br/>dealgame <span class=\"nu0\">617</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 41, "block": "<pre class=\"text highlighted_source\">atom seed<br/>\u00a0<br/>function xrnd()<br/>    seed = and_bits(seed*214013+2531011,#7FFFFFFF)<br/>    return floor(seed/power(2,16))<br/>end function<br/>\u00a0<br/>sequence cards = repeat(0,52)<br/>\u00a0<br/>procedure deal(integer game_num)<br/>    seed = game_num<br/>    for i=1 to 52 do<br/>        cards[i] = 52-i<br/>    end for<br/>    for i=1 to 51 do<br/>        integer j = 52-mod(xrnd(),53-i)<br/>        integer s = cards[i]<br/>        cards[i] = cards[j]<br/>        cards[j] = s<br/>    end for<br/>end procedure<br/>\u00a0<br/>constant suits = \"CDHS\",<br/>         ranks = \"A23456789TJQK\"<br/>\u00a0<br/>procedure show()<br/>    for idx=1 to 52 do<br/>        integer rank = floor(cards[idx]/4)+1<br/>        integer suit = mod(cards[idx],4)+1<br/>        integer eol = remainder(idx-1,13)=12<br/>        printf(1,\"%c%c%s\",{ranks[rank],suits[suit],iff(eol?\"\\n\":\" \")})<br/>    end for<br/>end procedure<br/>\u00a0<br/>integer game_num = 1<br/>--integer game_num=617<br/>    deal(game_num)<br/>    printf(1,\"hand\u00a0%d\\n\",{game_num})<br/>    show()<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 20, "block": "<pre class=\"text highlighted_source\">(setq *MsSeed 11982)<br/>\u00a0<br/>(de msRand ()<br/>   (&gt;&gt; 16<br/>      (setq *MsSeed<br/>         (&amp; (+ 2531011 (* 214013 *MsSeed)) `(dec (** 2 31))) ) ) )<br/>\u00a0<br/>(let L<br/>   (make<br/>      (for Num (range 13 1)<br/>         (for Suit '((32 . \"\u2660\") (31 . \"\u2665\") (31 . \"\u2666\") (32 . \"\u2663\"))<br/>            (link (cons (get '`(chop \"A23456789TJQK\") Num) Suit)) ) ) )<br/>   (for I 51<br/>      (xchg<br/>         (nth L I)<br/>         (nth L (- 52 (% (msRand) (- 53 I)))) ) )<br/>   (for C L<br/>      (prin \"  ^[[\" (cadr C) \"m\" (cddr C) \"^[[m\" (car C))<br/>      (at (0 . 8) (prinl)) )<br/>   (prinl) )</pre>"}, {"lang": "PureBasic", "loc": 47, "block": "<pre class=\"purebasic highlighted_source\">#MaxCardNum <span class=\"sy0\">=</span> <span class=\"nu0\">51</span> <span class=\"co1\">;zero-based count of cards in a deck</span><br/><span class=\"kw1\">Global</span> deckSize<br/><span class=\"kw1\">Global</span> <span class=\"kw1\">Dim</span> cards<span class=\"br0\">(</span>#MaxCardNum<span class=\"br0\">)</span> <span class=\"co1\">;card with highest index is at the top of deck</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> RNG<span class=\"br0\">(</span>seed.q <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> state.q<br/>  <span class=\"kw1\">If</span> seed <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>    state <span class=\"sy0\">=</span> seed<br/>  <span class=\"kw1\">Else</span> <br/>    state <span class=\"sy0\">=</span> <span class=\"br0\">(</span>state <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">ProcedureReturn</span> state <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> makeDeck<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, c<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #MaxCardNum: cards<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i: <span class=\"kw1\">Next</span><br/>\u00a0<br/>  RNG<span class=\"br0\">(</span>hand<span class=\"br0\">)</span> <span class=\"co1\">;set seed value</span><br/>  deckSize <span class=\"sy0\">=</span> #MaxCardNum<br/>  <span class=\"kw1\">While</span> deckSize<br/>    c <span class=\"sy0\">=</span> RNG<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>deckSize <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Swap</span> cards<span class=\"br0\">(</span>c<span class=\"br0\">)</span>, cards<span class=\"br0\">(</span>deckSize<span class=\"br0\">)</span><br/>    deckSize <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  deckSize <span class=\"sy0\">=</span> #MaxCardNum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> showDeck<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, c<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Hand #\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  makeDeck<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #MaxCardNum<br/>    c <span class=\"sy0\">=</span> cards<span class=\"br0\">(</span>#MaxCardNum <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span><span class=\"st0\">\"A23456789TJQK\"</span>, <span class=\"br0\">(</span>c <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span><span class=\"st0\">\"CDHS\"</span>,<span class=\"br0\">(</span>c <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> i <span class=\"sy0\">=</span> #MaxCardNum: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  showDeck<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  showDeck<span class=\"br0\">(</span><span class=\"nu0\">617</span><span class=\"br0\">)</span><br/>  showDeck<span class=\"br0\">(</span><span class=\"nu0\">11982</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 29, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">sys</span> <span class=\"kw1\">import</span> argv<br/>\u00a0<br/><span class=\"kw1\">def</span> randomGenerator<span class=\"br0\">(</span>seed<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    max_int32 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    seed <span class=\"sy0\">=</span> seed &amp; max_int32<br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        seed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seed * <span class=\"nu0\">214013</span> + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> &amp; max_int32<br/>        <span class=\"kw1\">yield</span> seed <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><br/>\u00a0<br/><span class=\"kw1\">def</span> deal<span class=\"br0\">(</span>seed<span class=\"br0\">)</span>:<br/>    nc <span class=\"sy0\">=</span> <span class=\"nu0\">52</span><br/>    cards <span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>nc - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    rnd <span class=\"sy0\">=</span> randomGenerator<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> r <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>nc<span class=\"br0\">)</span><span class=\"sy0\">,</span> rnd<span class=\"br0\">)</span>:<br/>        j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nc - <span class=\"nu0\">1</span><span class=\"br0\">)</span> - r\u00a0% <span class=\"br0\">(</span>nc - i<span class=\"br0\">)</span><br/>        cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> cards<br/>\u00a0<br/><span class=\"kw1\">def</span> show<span class=\"br0\">(</span>cards<span class=\"br0\">)</span>:<br/>    l <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"A23456789TJQK\"</span><span class=\"br0\">[</span>c / <span class=\"nu0\">4</span><span class=\"br0\">]</span> + <span class=\"st0\">\"CDHS\"</span><span class=\"br0\">[</span>c\u00a0% <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> cards<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>cards<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>l<span class=\"br0\">[</span>i\u00a0: i+<span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    seed <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>argv<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">else</span> <span class=\"nu0\">11982</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Hand\"</span><span class=\"sy0\">,</span> seed<br/>    deck <span class=\"sy0\">=</span> deal<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>    show<span class=\"br0\">(</span>deck<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 59, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(module Linear_congruential_generator racket<br/> \u00a0;; taken from http://rosettacode.org/wiki/Linear_congruential_generator#Racket<br/> \u00a0;; w/o BSD generator<br/>  (require racket/generator)<br/>  (provide ms-rand)  <br/>  (define (ms-update state_n)<br/>    (modulo (+ (* 214013 state_n) 2531011)<br/>            (expt 2 31)))  <br/>  (define ((rand update -&gt;rand) seed)<br/>    (generator () (let loop ([state_n seed])<br/>                    (define state_n+1 (update state_n))<br/>                    (yield (-&gt;rand state_n+1))<br/>                    (loop state_n+1))))  <br/>  (define ms-rand (rand ms-update (lambda (x) (quotient x (expt 2 16))))))<br/>\u00a0<br/>(require (submod \".\" Linear_congruential_generator))<br/>\u00a0<br/>;; Personally I prefer CDHS to the unicode characters (on an aesthetic basis,<br/>;; rather than anything else. Plus it helps match with the examples given at the<br/>;; head of the task.<br/>(define suits \"CDHS\")<br/>(define (initial-deck)<br/>  (for*/vector #:length 52<br/>    ((face \"A23456789TJQK\")<br/>     (suit suits))<br/>    (cons face suit)))<br/>\u00a0<br/>;; srfi/43 has one of these, but is quick enough to reimplement!<br/>(define (vector-swap! v i j)<br/>  (let ((t (vector-ref v i)))<br/>    (vector-set! v i (vector-ref v j))<br/>    (vector-set! v j t)))<br/>\u00a0<br/>(define (deal hand)<br/>  (define pack (initial-deck))<br/>  (define rnd (ms-rand hand))  <br/>  (define (deal-nth-card pack-sz card-no deal)<br/>    (vector-swap! pack card-no (sub1 pack-sz))<br/>    (cons (vector-ref pack (sub1 pack-sz)) deal))<br/>\u00a0<br/>  (let inner-deal ((pack-sz (vector-length pack)) (deal null))<br/>    (if (zero? pack-sz) (reverse deal)\u00a0;; we accumulated this backwards!<br/>        (inner-deal (sub1 pack-sz)<br/>                    (deal-nth-card pack-sz (modulo (rnd) pack-sz) deal)))))<br/>\u00a0<br/>(define (present-deal hand)<br/>  (printf \"Game #~a~%\" hand)<br/>  (let inner-present-deal ((pile 0) (deck (deal hand)))<br/>    (unless (null? deck)<br/>      (printf \"~a~a~a\" (caar deck) (cdar deck)<br/>              (if (or (null? (cdr deck)) (= 7 (modulo pile 8))) \"\\n\" \" \"))<br/>      (inner-present-deal (add1 pile) (cdr deck)))))<br/>\u00a0<br/>;; Run it so we get some output:<br/>(present-deal 1)<br/>(newline)<br/>(present-deal 617)</pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program deals cards for a specific  FreeCell solitaire  card game  (0 \u2500\u2500\u25ba 32767).*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">15</span>                                <span class=\"coMULTI\">/*ensure enough digits for the random #*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> game cols <span class=\"sy0\">.</span>                            <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> game==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> game==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> game=<span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*No game specified?  Then use default.*/</span><br/><span class=\"kw1\">if</span> cols==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> cols==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> cols=<span class=\"nu0\">8</span>             <span class=\"coMULTI\">/* \" cols     \"         \"   \"     \"    */</span><br/>state=game                                       <span class=\"coMULTI\">/*seed random # generator with game num*/</span><br/><span class=\"kw1\">if</span> <span class=\"nu0\">8</span>==<span class=\"st0\">'f8'</span>x  <span class=\"kw3\">then</span> suit= <span class=\"st0\">\"cdhs\"</span>                   <span class=\"coMULTI\">/*EBCDIC?   Then use letters for suits.*/</span><br/>             <span class=\"kw3\">else</span> suit= <span class=\"st0\">\"\u2663\u2666\u2665\u2660\"</span>                   <span class=\"coMULTI\">/* ASCII?     \"   \"  symbols  \"    \"   */</span><br/>rank= <span class=\"st0\">'A23456789tJQK'</span>                            <span class=\"coMULTI\">/*t  in the rank represents a ten (10).*/</span><br/>pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*used for indentation for the tableau.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'tableau for FreeCell game'</span> game, <span class=\"nu0\">50</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*show title for FreeCell game #*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2193]  @  is an array of all 52 cards.*/</span><br/>#=-<span class=\"nu0\">1</span>;  <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>rank<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*build the deck  first   by the rank. */</span><br/>         <span class=\"kw1\">do</span> s=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>suit<span class=\"br0\">)</span>;       #=#+<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*  \"    \"    \"  secondly  \"  \"  suit. */</span><br/>         @<span class=\"sy0\">.</span>#=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>rank, r,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>suit, s,<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*build the $ array one card at at time*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*s*/</span>                             <span class=\"coMULTI\">/* [\u2191]  first card is number  0 (zero).*/</span><br/>       <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span>                             <span class=\"coMULTI\">/* [\u2191]  build deck per FreeCell rules. */</span><br/>$=pad                                            <span class=\"coMULTI\">/*@: cards to be dealt, eight at a time*/</span><br/>       <span class=\"kw1\">do</span> cards=<span class=\"nu0\">51</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">52</span>                <span class=\"coMULTI\">/* [\u2193]  deal the cards for the tableau.*/</span><br/>      \u00a0?=rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"br0\">(</span>cards+<span class=\"nu0\">1</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*get next rand#;  card # is remainder.*/</span><br/>       $=$ @<span class=\"sy0\">.</span>?;                 @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"3b04067b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>cards      <span class=\"coMULTI\">/*swap two cards:  use random and last.*/</span><br/>       <span class=\"kw1\">if</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>==cols  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> $; $=pad <span class=\"coMULTI\">/*deal FreeCell cards for the tableau. */</span><br/>                               <span class=\"kw3\">end</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*cards*/</span>                           <span class=\"coMULTI\">/*normally, 8 cards are dealt to a row.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  residual cards may exist.      */</span><br/><span class=\"kw1\">if</span> $<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $                             <span class=\"coMULTI\">/*Any residual cards in the tableau\u00a0?  */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>rand:  state=<span class=\"br0\">(</span><span class=\"nu0\">214013</span><span class=\"sy0\">*</span>state + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">31</span>;  <span class=\"kw1\">return</span> state\u00a0% <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">16</span>   <span class=\"coMULTI\">/*FreeCell rand#*/</span></pre>"}, {"lang": "Ruby", "loc": 34, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\">#   games = ARGV converted to Integer</span><br/><span class=\"co1\">#   No arguments? Pick any of first 32000 games.</span><br/><span class=\"kw1\">begin</span><br/>  games = ARGV.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> <span class=\"kw3\">Integer</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">rescue</span> <span class=\"sy0\">=&gt;</span> err<br/>  <span class=\"re0\">$stderr</span>.<span class=\"kw3\">puts</span> err.<span class=\"me1\">inspect</span><br/>  <span class=\"re0\">$stderr</span>.<span class=\"kw3\">puts</span> <span class=\"st0\">\"Usage: #{__FILE__} number...\"</span><br/>  abort<br/><span class=\"kw1\">end</span><br/>games.<span class=\"me1\">empty</span>? <span class=\"kw1\">and</span> games = <span class=\"br0\">[</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">32000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Create original deck of 52 cards, not yet shuffled.</span><br/>orig_deck = <span class=\"sy0\">%</span>w<span class=\"br0\">{</span>A <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> T J Q K<span class=\"br0\">}</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"sy0\">%</span>w<span class=\"br0\">{</span>C D H S<span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:join<span class=\"br0\">)</span><br/>\u00a0<br/>games.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>seed<span class=\"sy0\">|</span><br/>  deck = orig_deck.<span class=\"me1\">dup</span><br/>\u00a0<br/>  <span class=\"co1\"># Shuffle deck with random index from linear congruential</span><br/>  <span class=\"co1\"># generator like Microsoft.</span><br/>  state = seed<br/>  <span class=\"nu0\">52</span>.<span class=\"me1\">downto</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>len<span class=\"sy0\">|</span><br/>    state = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> state<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fff_ffff<br/>    index = <span class=\"br0\">(</span>state <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len<br/>    last = len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    deck<span class=\"br0\">[</span>index<span class=\"br0\">]</span>, deck<span class=\"br0\">[</span>last<span class=\"br0\">]</span> = deck<span class=\"br0\">[</span>last<span class=\"br0\">]</span>, deck<span class=\"br0\">[</span>index<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  deck.<span class=\"me1\">reverse</span>!  <span class=\"co1\"># Shuffle did reverse deck. Do reverse again.</span><br/>\u00a0<br/>  <span class=\"co1\"># Deal cards.</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"Game ##{seed}\"</span><br/>  deck.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> row.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 33, "block": "<pre class=\"text highlighted_source\">projectDir$\t= \"a_project\"                                            ' project directory<br/>imageDir$ \t= DefaultDir$ + \"\\projects\\\" + projectDir$ + \"\\image\\\"   ' directory of deck images<br/>imagePath$\t= \"../\";projectDir$;\"/image/\"                            ' path of deck images<br/>\u00a0<br/>suite$ = \"C,D,H,S\"                                                       ' Club,Diamond,Heart,Spades<br/>card$  = \"A,2,3,4,5,6,7,8,9,T,J,Q,K\"                                     ' Cards Ace to King<br/>\u00a0<br/>dim n(55)                                                                ' make ordered deck <br/>for i = 1 to 52                                                          '  of 52 cards<br/> n(i) \t= i<br/>next i<br/>\u00a0<br/>for i = 1 to 52 * 3                                                      ' shuffle deck 3 times<br/>  i1    = int(rnd(1)*52) + 1<br/>  i2    = int(rnd(1)*52) + 1<br/>  h2    = n(i1)<br/>  n(i1) = n(i2)<br/>  n(i2) = h2<br/>next i<br/>\u00a0<br/>for yy = 1 to 8                                                        ' display 7 across and 8 down<br/>  for xx = 1 to 7<br/>    card = card + 1<br/>    s    = (n(card) mod 4)  + 1                                        ' determine suite<br/>    c    = (n(card) mod 13) + 1                                        ' determine card<br/>    cardId$ = word$(card$,c,\",\");word$(suite$,s,\",\");\".gif\"<br/>    html \"&lt;div style='position: relative; left:\";(xx -1) * 80;\"px; top:\";(yy -1) * 20;\"px; height:0px; width:0px;&gt;\"<br/>    html \"&lt;div style='width:100px; height:100px; border:solid 0px #000;'&gt;\"<br/>    html \"&lt;img src=\";imagePath$;cardId$;\" width=70px &gt;\"<br/>    html \"&lt;/div&gt;&lt;/div&gt;\"<br/>    if card = 52 then end                                              ' out of cards<br/>  next xx<br/>next yy</pre>"}, {"lang": "Rust", "loc": 49, "block": "<pre class=\"text highlighted_source\">// Code available at https://rosettacode.org/wiki/Linear_congruential_generator#Rust<br/>extern crate linear_congruential_generator;<br/>\u00a0<br/>use linear_congruential_generator::{MsLcg, Rng, SeedableRng};<br/>\u00a0<br/>// We can't use `rand::Rng::shuffle` because it uses the more uniform `rand::Rng::gen_range`<br/>// (`% range` is subject to modulo bias).  If an exact match of the old dealer is not needed,<br/>// `rand::Rng::shuffle` should be used.<br/>fn shuffle&lt;T&gt;(rng: &amp;mut MsLcg, deck: &amp;mut [T]) {<br/>    let len = deck.len() as u32;<br/>    for i in (1..len).rev() {<br/>        let j = rng.next_u32()\u00a0% (i + 1);<br/>        deck.swap(i as usize, j as usize);<br/>    }<br/>}<br/>\u00a0<br/>fn gen_deck() -&gt; Vec&lt;String&gt; {<br/>    const RANKS: [char; 13] = ['A','2','3','4','5','6','7','8','9','T','J','Q','K'];<br/>    const SUITS: [char; 4] = ['C', 'D', 'H', 'S'];<br/>\u00a0<br/>    let render_card = |card: usize| {<br/>        let (suit, rank) = (card\u00a0% 4, card / 4);<br/>        format!(\"{}{}\", RANKS[rank], SUITS[suit])<br/>    };<br/>\u00a0<br/>    (0..52).map(render_card).collect()<br/>}<br/>\u00a0<br/>fn deal_ms_fc_board(seed: u32) -&gt; Vec&lt;String&gt; {<br/>    let mut rng = MsLcg::from_seed(seed);<br/>    let mut deck = gen_deck();<br/>\u00a0<br/>    shuffle(&amp;mut rng, &amp;mut deck);<br/>    deck.reverse();<br/>\u00a0<br/>    deck.chunks(8).map(|row| row.join(\" \")).collect::&lt;Vec&lt;_&gt;&gt;()<br/>}<br/>\u00a0<br/>fn main() {<br/>    let seed = std::env::args()<br/>        .nth(1)<br/>        .and_then(|n| n.parse().ok())<br/>        .expect(\"A 32-bit seed is required\");<br/>\u00a0<br/>    for row in deal_ms_fc_board(seed) {<br/>        println!(\": {}\", row);<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 65, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"console.s7i\";<br/>\u00a0<br/>const string: suits is \"\u2663\u2666\u2665\u2660\";<br/>const string: nums is \"A23456789TJQK\";<br/>\u00a0<br/>var integer: randomSeed is 1;<br/>\u00a0<br/>const func integer: random is func<br/>  result<br/>    var integer: rand is 1;<br/>  begin<br/>    randomSeed\u00a0:= (randomSeed * 214013 + 2531011) mod 2 ** 31;<br/>    rand\u00a0:= randomSeed &gt;&gt; 16;<br/>  end func;<br/>\u00a0<br/>const proc: show (in array integer: cards) is func<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    for index range 1 to 52 do<br/>      write(\"  \" &lt;&amp; suits[succ(cards[index] rem 4)] &lt;&amp; nums[succ(cards[index] div 4)]);<br/>      if index rem 8 = 0 or index = 52 then<br/>        writeln;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func array integer: deal (in integer: gameNum) is func<br/>  result<br/>    var array integer: cards is 52 times 0;<br/>  local<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>    var integer: s is 0;<br/>  begin<br/>    randomSeed\u00a0:= gameNum;<br/>    for i range 1 to 52 do<br/>      cards[i]\u00a0:= 52 - i;<br/>    end for;<br/>    for i range 1 to 51 do<br/>      j\u00a0:= 52 - random mod (53 - i);<br/>      s\u00a0:= cards[i];<br/>      cards[i]\u00a0:= cards[j];<br/>      cards[j]\u00a0:= s;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: gameNum is 11982;<br/>    var array integer: cards is 0 times 0;<br/>  begin<br/>    OUT\u00a0:= STD_CONSOLE;<br/>    if length(argv(PROGRAM)) &gt;= 1 then<br/>      block<br/>        gameNum\u00a0:= integer parse (argv(PROGRAM)[1]);<br/>      exception<br/>        catch RANGE_ERROR: noop;<br/>      end block;<br/>    end if;<br/>    cards\u00a0:= deal(gameNum);<br/>    writeln(\"Hand \" &lt;&amp; gameNum);<br/>    show(cards);<br/>  end func;</pre>"}, {"lang": "Tcl", "loc": 31, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> rnd <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"sy0\">*</span>r seed<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"sy0\">$</span><span class=\"br0\">{</span><span class=\"sy0\">*</span>r<span class=\"br0\">}</span> r<br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"nu0\">214013</span> + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fffffff<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> show cards <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> suits <span class=\"br0\">{</span>\\u2663 \\u2666 \\u2665 \\u2660<span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> values <span class=\"br0\">{</span>A <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> T J Q K<span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cards</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"  <span class=\"es0\">\\0</span>33<span class=\"es0\">\\[</span>%dm%s<span class=\"es0\">\\0</span>33<span class=\"es0\">\\[</span>m%s\"</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">32</span>-<span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>4/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$suits</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$values</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> / <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">&amp;</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>==<span class=\"nu0\">7</span> || <span class=\"re0\">$i</span>==<span class=\"nu0\">51</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> deal <span class=\"br0\">{</span>seed<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> cards <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">51</span> - <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">51</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">51</span> - <span class=\"br0\">[</span>rnd<span class=\"br0\">]</span><span class=\"sy0\">%</span><span class=\"br0\">(</span><span class=\"nu0\">52</span>-<span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> tmp <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cards</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lset</span> cards <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cards</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lset</span> cards <span class=\"re0\">$j</span> <span class=\"re0\">$tmp</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$cards</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">scan</span> =<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"kw2\"><span class=\"re0\">$argv</span></span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>= =<span class=\"sy0\">%</span>d= s<span class=\"br0\">]</span> || <span class=\"re0\">$s</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> s <span class=\"nu0\">11982</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> cards <span class=\"br0\">[</span>deal <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Hand $s\"</span><br/>show <span class=\"re0\">$cards</span></pre>"}, {"lang": "UNIX Shell", "loc": 22, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">test</span> <span class=\"re4\">$#</span> <span class=\"re5\">-gt</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"kw1\">set</span> <span class=\"re5\">--</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span>RANDOM <span class=\"sy0\">%</span> <span class=\"nu0\">32000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> seed; <span class=\"kw1\">do</span><br/>\tprint Game <span class=\"re1\">$seed</span>:<br/>\u00a0<br/>\t<span class=\"co0\"># Shuffle deck.</span><br/>\t<span class=\"re2\">deck</span>=<span class=\"br0\">(</span><span class=\"br0\">{</span>A,<span class=\"br0\">{</span><span class=\"nu0\">2</span>..<span class=\"nu0\">9</span><span class=\"br0\">}</span>,T,J,Q,K<span class=\"br0\">}</span><span class=\"br0\">{</span>C,D,H,S<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">52</span>..<span class=\"nu0\">1</span><span class=\"br0\">}</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>seed = <span class=\"br0\">(</span><span class=\"nu0\">214013</span> <span class=\"sy0\">*</span> seed + <span class=\"nu0\">2531011</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fffffff<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>j = <span class=\"br0\">(</span>seed <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"re2\">t</span>=<span class=\"re1\">$deck</span><span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span><br/>\t\tdeck<span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span>=<span class=\"re1\">$deck</span><span class=\"br0\">[</span><span class=\"re1\">$j</span><span class=\"br0\">]</span><br/>\t\tdeck<span class=\"br0\">[</span><span class=\"re1\">$j</span><span class=\"br0\">]</span>=<span class=\"re1\">$t</span><br/>\t<span class=\"kw1\">done</span><br/>\u00a0<br/>\t<span class=\"co0\"># Deal cards.</span><br/>\tprint <span class=\"re5\">-n</span> <span class=\"st_h\">' '</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">52</span>..<span class=\"nu0\">1</span><span class=\"br0\">}</span>; <span class=\"kw1\">do</span><br/>\t\tprint <span class=\"re5\">-n</span> <span class=\"st_h\">' '</span><span class=\"re1\">$deck</span><span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> == <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> print <span class=\"re5\">-n</span> $<span class=\"st_h\">'\\n '</span><br/>\t<span class=\"kw1\">done</span><br/>\tprint<br/><span class=\"kw1\">done</span></pre>"}, {"lang": "XPL0", "loc": 24, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;                  \\intrinsic 'code' declarations<br/>string 0;                               \\use zero-terminated string convention<br/>int  RandState;<br/>\u00a0<br/>func Rand;                              \\Random number in range 0 to 32767<br/>[RandState:= (214013*RandState + 2531011) &amp; $7FFF_FFFF;<br/>return RandState &gt;&gt; 16;<br/>];<br/>\u00a0<br/>int  Card, Deck(52), Size;<br/>char Suit, Rank;<br/>[RandState:= IntIn(8);                  \\seed RNG with number from command line<br/>for Card:= 0 to 52-1 do Deck(Card):= Card; \\create array of 52 cards<br/>Rank:= \"A23456789TJQK\";<br/>Suit:= \"CDHS\";<br/>Size:= 52;<br/>repeat  Card:= rem(Rand/Size);          \\choose a random card<br/>        ChOut(0, Rank(Deck(Card)/4));   \\deal it by showing it<br/>        ChOut(0, Suit(rem(0)));<br/>        if rem(Size/8)=5 then CrLf(0) else ChOut(0, ^ );<br/>        Size:= Size-1;                  \\one less card in deck<br/>        Deck(Card):= Deck(Size);        \\replace dealt card with last card<br/>until   Size = 0;                       \\all cards have been dealt<br/>]</pre>"}, {"lang": "zkl", "loc": 18, "block": "<pre class=\"text highlighted_source\">var suits=T(0x1F0D1,0x1F0C1,0x1F0B1,0x1F0A1); //unicode \ud83c\udcd1,\ud83c\udcc1,\ud83c\udcb1,\ud83c\udca1<br/>\u00a0<br/>var seed=1; const RMAX32=(1).shiftLeft(31) - 1;<br/>fcn rnd{ (seed=((seed*214013 + 2531011).bitAnd(RMAX32))).shiftRight(16) }<br/>\u00a0<br/>fcn game(n){<br/>   seed=n;<br/>   deck:=(0).pump(52,List,'wrap(n){ if(n&gt;=44) n+=4; // I want JQK, not JCQ<br/>       (suits[n%4] + n/4).toString(8) }).copy();  // int--&gt;UTF-8<br/>   [52..1,-1].pump(Void,'wrap(len){ deck.swap(len-1,rnd()%len); });<br/>   deck.reverse();<br/>   println(\"Game #\",n);<br/>   foreach n in ([0..51,8]){ deck[n,8].concat(\" \").println(); }<br/>}<br/>\u00a0<br/>game(1);<br/>game(617);<br/>\u00a0</pre>"}]}