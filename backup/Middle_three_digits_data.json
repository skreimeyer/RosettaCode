{"task": "Middle_three_digits", "blocks": [{"lang": "Ada", "loc": 43, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Middle_Three_Digits <span class=\"kw1\">is</span><br/>\u00a0<br/>   Impossible: <span class=\"kw1\">exception</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Middle_String<span class=\"br0\">(</span>I: Integer; Middle_Size: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      S: <span class=\"kw3\">constant</span> String\u00a0:= Integer'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>      First: Natural\u00a0:= S'First;<br/>      Full_Size, Border: Natural;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> S<span class=\"br0\">(</span>First<span class=\"br0\">)</span> <span class=\"kw2\">not</span> <span class=\"kw3\">in</span> '<span class=\"nu0\">0</span>' .. '<span class=\"nu0\">9</span>' <span class=\"kw1\">loop</span> <span class=\"co1\">-- skip leading blanks and minus</span><br/>         First\u00a0:= First + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Full_Size\u00a0:= S'Last-First+<span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Full_Size &lt; Middle_Size<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span>Full_Size <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw3\">raise</span> Impossible;<br/>      <span class=\"kw1\">else</span><br/>         Border\u00a0:= <span class=\"br0\">(</span>Full_Size - Middle_Size<span class=\"br0\">)</span>/<span class=\"nu0\">2</span>;<br/>         <span class=\"kw1\">return</span> S<span class=\"br0\">(</span>First+Border .. <span class=\"me1\">First</span>+Border+Middle_Size-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Middle_String;<br/>\u00a0<br/>   Inputs: <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer\u00a0:=<br/>     <span class=\"br0\">(</span><span class=\"nu0\">123</span>, <span class=\"nu0\">12345</span>, <span class=\"nu0\">1234567</span>, <span class=\"nu0\">987654321</span>, <span class=\"nu0\">10001</span>, -<span class=\"nu0\">10001</span>, -<span class=\"nu0\">123</span>, -<span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, -<span class=\"nu0\">12345</span>,<br/>      <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span>, -<span class=\"nu0\">10</span>, <span class=\"nu0\">2002</span>, -<span class=\"nu0\">2002</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   Error_Message: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"number of digits must be &gt;= 3 and odd\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> IIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Inputs'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      IIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Inputs<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Width =&gt; <span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Middle_String<span class=\"br0\">(</span>Inputs<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">exception</span><br/>         <span class=\"kw3\">when</span> Impossible =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"****\"</span> &amp; Error_Message &amp; <span class=\"st0\">\"****\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Middle_Three_Digits;</pre>"}, {"lang": "Aime", "loc": 41, "block": "<pre class=\"text highlighted_source\">void<br/>m3(integer i)<br/>{<br/>    text s;<br/>\u00a0<br/>    s = itoa(i);<br/>    if (s[0] == '-') {<br/>        s = delete(s, 0);<br/>    }<br/>\u00a0<br/>    if (~s &lt; 3) {<br/>        v_integer(i);<br/>        v_text(\" has not enough digits\\n\");<br/>    } elif (~s &amp; 1) {<br/>        o_form(\"/w9/: ~\\n\", i, cut(s, ~s - 3 &gt;&gt; 1, 3));<br/>    } else {<br/>        v_integer(i);<br/>        v_text(\" has an even number of digits\\n\");<br/>    }<br/>}<br/>\u00a0<br/>void<br/>middle_3(...)<br/>{<br/>    integer i;<br/>\u00a0<br/>    i = 0;<br/>    while (i &lt; count()) {<br/>        m3($i);<br/>        i += 1;<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    middle_3(123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100,<br/>             -12345, 1, 2, -1, -10, 2002, -2002, 0);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 63, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># we define a UNION MODE so that our middle 3 digits PROC can #</span><br/><span class=\"coMULTI\"># return either an integer on success or a error message if   #</span><br/><span class=\"coMULTI\"># the middle 3 digits couldn't be extracted                   #</span><br/><span class=\"kw4\">MODE</span> EINT <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span> <span class=\"coMULTI\"># success value #</span><span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> <span class=\"coMULTI\"># error message #</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># PROC to return the middle 3 digits of an integer.           #</span><br/><span class=\"coMULTI\"># if this is not possible, an error message is returned       #</span><br/><span class=\"coMULTI\"># instead                                                     #</span><br/><span class=\"kw4\">PROC</span> middle 3 digits <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> number <span class=\"br0\">)</span> EINT<span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># convert the absolute value of the number to a string with the  #</span><br/>    <span class=\"coMULTI\"># minumum possible number characters                             #</span><br/>    <span class=\"kw3\">STRING</span> digits     <span class=\"sy1\">=</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> number<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span>    len        <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> digits<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span>   len <span class=\"sy1\">&lt;</span> 3<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># number has less than 3 digits #</span><br/>        <span class=\"coMULTI\"># return an error message       #</span><br/>        <span class=\"st0\">\"number must have at least three digits\"</span><br/>    <span class=\"kw2\">ELIF</span> <span class=\"br0\">(</span> len <span class=\"kw12\">MOD</span> 2 <span class=\"br0\">)</span> <span class=\"sy1\">=</span> 0<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># the number has an even number of digits #</span><br/>        <span class=\"coMULTI\"># return an error message                 #</span><br/>        <span class=\"st0\">\"number must have an odd number of digits\"</span><br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"coMULTI\"># the number is suitable for extraction of the middle 3 digits #</span><br/>        <span class=\"kw3\">INT</span> first digit pos <span class=\"sy1\">=</span> 1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> len <span class=\"sy1\">-</span> 3 <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> 2 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># the result is the integer value of the three digits          #</span><br/>        <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> digits<span class=\"br0\">[</span> first digit pos     <span class=\"br0\">]</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">*</span> 100 <span class=\"br0\">)</span><br/>        <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> digits<span class=\"br0\">[</span> first digit pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">*</span>  10 <span class=\"br0\">)</span><br/>        <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> digits<span class=\"br0\">[</span> first digit pos <span class=\"sy1\">+</span> 2 <span class=\"br0\">]</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span>       <span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># middle 3 digits #</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"coMULTI\"># test the middle 3 digits PROC #</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> test values <span class=\"sy1\">=</span> <span class=\"br0\">(</span>    123<span class=\"sy1\">,</span>  12345<span class=\"sy1\">,</span> 1234567<span class=\"sy1\">,</span> 987654321<br/>                        <span class=\"sy1\">,</span>  10001<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>10001<span class=\"sy1\">,</span>    <span class=\"sy1\">-</span>123<span class=\"sy1\">,</span>      <span class=\"sy1\">-</span>100<br/>                        <span class=\"sy1\">,</span>    100<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>12345<br/>                          <span class=\"coMULTI\"># the following values should fail #</span><br/>                        <span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>10<span class=\"sy1\">,</span> 2002<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2002<span class=\"sy1\">,</span> 0<br/>                        <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> test number <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> test values <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> test values<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">CASE</span> middle 3 digits<span class=\"br0\">(</span> test values<span class=\"br0\">[</span> test number <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">IN</span><br/>        <span class=\"br0\">(</span> <span class=\"kw3\">INT</span>     success value <span class=\"br0\">)</span><span class=\"sy1\">:</span>    <span class=\"coMULTI\"># got the middle 3 digits #</span><br/>            <span class=\"kw22\">printf</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> $ 11z<span class=\"sy1\">-</span>d<span class=\"sy1\">,</span> <span class=\"st0\">\"\u00a0: \"</span><span class=\"sy1\">,</span> 3d $<br/>                    <span class=\"sy1\">,</span> test values<span class=\"br0\">[</span> test number <span class=\"br0\">]</span><br/>                    <span class=\"sy1\">,</span> success value<br/>                    <span class=\"br0\">)</span><br/>                  <span class=\"br0\">)</span><br/>            <span class=\"sy1\">,</span><br/>        <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span>  error message  <span class=\"br0\">)</span><span class=\"sy1\">:</span>    <span class=\"coMULTI\"># got an error message   #</span><br/>            <span class=\"kw22\">printf</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> $ 11z<span class=\"sy1\">-</span>d<span class=\"sy1\">,</span> <span class=\"st0\">\"\u00a0: \"</span><span class=\"sy1\">,</span> n<span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> error message <span class=\"br0\">)</span>a $<br/>                    <span class=\"sy1\">,</span> test values<span class=\"br0\">[</span> test number <span class=\"br0\">]</span><br/>                    <span class=\"sy1\">,</span> error message<br/>                    <span class=\"br0\">)</span><br/>                  <span class=\"br0\">)</span><br/>        <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 48, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% record structure that will be used to return the middle 3 digits of a number  \u00a0%<br/>   \u00a0% if the middle three digits can't be determined, isOk will be false and message\u00a0%<br/>   \u00a0% will contain an error message                                                 \u00a0%<br/>   \u00a0% if the middle 3 digts can be determined, middle3 will contain the middle 3    \u00a0%<br/>   \u00a0% digits and isOk will be true                                                  \u00a0%<br/>    record MiddleThreeDigits ( integer middle3; logical isOk; string(80) message );<br/>\u00a0<br/>   \u00a0% finds the middle3 digits of a number or describes why they can't be found     \u00a0%<br/>    reference(MiddleThreeDigits) procedure findMiddleThreeDigits ( integer value number )\u00a0;<br/>        begin<br/>            integer n, digitCount, d;<br/>\u00a0<br/>            n         \u00a0:= abs( number );<br/>           \u00a0% count the number of digits the number has\u00a0%<br/>            digitCount\u00a0:= if n = 0 then 1 else 0;<br/>            d         \u00a0:= n;<br/>            while d &gt; 0 do begin<br/>                digitCount\u00a0:= digitCount + 1;<br/>                d         \u00a0:= d div 10<br/>            end while_d_gt_0\u00a0;<br/>            if      digitCount &lt; 3        then MiddleThreeDigits( 0, false, \"Number must have at least 3 digits\"       )<br/>            else if not odd( digitCount ) then MiddleThreeDigits( 0, false, \"Number must have an odd number of digits\" )<br/>            else begin<br/>               \u00a0% can find the middle three digits\u00a0%<br/>                integer m3;<br/>                m3\u00a0:= n;<br/>                for d\u00a0:= 1 until ( digitCount - 3 ) div 2 do m3\u00a0:= m3 div 10;<br/>                MiddleThreeDigits( m3 rem 1000, true, \"\" )<br/>            end<br/>        end findMiddleThreeDigits\u00a0;<br/>\u00a0<br/>   \u00a0% test the findMiddleThreeDigits procedure\u00a0%<br/>    for n\u00a0:= 123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345, 1, 2, -1, -10, 2002, -2002, 0 do begin<br/>        reference(MiddleThreeDigits) m3;<br/>        i_w\u00a0:= 10; s_w\u00a0:= 0;\u00a0% set output formating\u00a0%<br/>        m3\u00a0:= findMiddleThreeDigits( n );<br/>        write( n, \": \" );<br/>        if not isOk(m3) then writeon( message(m3) )<br/>        else begin<br/>           \u00a0% as we return the middle three digits as an integer, we must manually 0 pad\u00a0%<br/>            if middle3(m3) &lt; 100 then writeon( \"0\" );<br/>            if middle3(m3) &lt;  10 then writeon( \"0\" );<br/>            writeon( i_w\u00a0:= 1, middle3(m3) )<br/>        end<br/>    end for_n<br/>\u00a0<br/>end.</pre>"}, {"lang": "ATS", "loc": 122, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>int2digits(x: int): list0(int)<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>int2digits(x) =<br/>loop(x, list0_nil) where<br/>{<br/>//<br/>fun<br/>loop<br/>(<br/> x: int, res: list0(int)<br/>)\u00a0: list0(int) =<br/>  if x &gt; 0 then loop(x/10, list0_cons(x%10, res)) else res<br/>//<br/>} (* end of [int2digits] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>extern<br/>fun<br/>Middle_three_digits(x: int): void<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>Middle_three_digits<br/>  (x0) = let<br/>//<br/>val x1 =<br/>(<br/>if x0 &gt;= 0 then x0 else ~x0<br/>)\u00a0: int<br/>//<br/>fun<br/>skip<br/>(<br/>ds: list0(int), k: int<br/>)\u00a0: list0(int) =<br/>  if k &gt; 0 then skip(ds.tail(), k-1) else ds<br/>//<br/>val ds =<br/>  int2digits(x1)<br/>//<br/>val n0 = length(ds)<br/>//<br/>in<br/>//<br/>if<br/>(n0 &lt;= 2)<br/>then<br/>(<br/>println! (\"Middle-three-digits(\", x0, \"): Too small!\")<br/>)<br/>else<br/>(<br/>if<br/>(n0\u00a0% 2 = 0)<br/>then<br/>(<br/>println!<br/>(<br/>\"Middle-three-digits(\", x0, \"): Even number of digits!\"<br/>)<br/>)<br/>else let<br/>  val ds =<br/>    skip(ds, (n0-3)/2)<br/>  val-list0_cons(d1, ds) = ds<br/>  val-list0_cons(d2, ds) = ds<br/>  val-list0_cons(d3, ds) = ds<br/>in<br/>  println! (\"Middle-three-digits(\", x0, \"): \", d1, d2, d3) <br/>end // end of [else]<br/>)<br/>//<br/>end // end of [Middle_three_digits]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0() =<br/>{<br/>//<br/>val<br/>thePassing =<br/>g0ofg1<br/>(<br/>$list{int}<br/>(<br/>  123<br/>, 12345<br/>, 1234567<br/>, 987654321<br/>, 10001, ~10001<br/>, ~123, ~100, 100, ~12345<br/>)<br/>)<br/>val<br/>theFailing =<br/>g0ofg1($list{int}(1, 2, ~1, ~10, 2002, ~2002, 0))<br/>//<br/>val () = thePassing.foreach()(lam x =&gt; Middle_three_digits(x))<br/>val () = theFailing.foreach()(lam x =&gt; Middle_three_digits(x))<br/>//<br/>} (* end of [main0] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 13, "block": "<pre class=\"autohotkey highlighted_source\">Numbers<span class=\"sy0\">:=</span><span class=\"st0\">\"123,12345,1234567,987654321,10001,-10001,-123,-100,100,-12345,1,2,-1,-10,2002,-2002,0\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> Numbers<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> is not number<br/>\t\t<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> <span class=\"st0\">\"`t: Not a valid number`n\"</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>d<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span><span class=\"st0\">\"\\D\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> <span class=\"st0\">\"`t: Too short`n\"</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>d<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> <span class=\"st0\">\"`t: Not an odd number of digits`n\"</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> <span class=\"st0\">\"`t: \"</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"br0\">(</span>d<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">log</span></a></pre>"}, {"lang": "AWK", "loc": 29, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/bin/awk -f</span><br/><span class=\"co1\"># use as: awk -f middle_three_digits.awk</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\tn = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"123 12345 1234567 987654321 10001 -10001 -123 -100 100 -12345 1 2 -1 -10 2002 -2002 0\"</span>, arr<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy4\">!~</span> <span class=\"sy3\">/^-</span><span class=\"sy5\">?</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%10s\u00a0: invalid input: not a number<span class=\"es0\">\\n</span>\"</span>, arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">continue</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tnum = arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy5\">?</span> <span class=\"sy3\">-</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy5\">:</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\tlen = <span class=\"kw4\">length</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy2\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%10s\u00a0: invalid input: too few digits<span class=\"es0\">\\n</span>\"</span>, arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">continue</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%10s\u00a0: invalid input: even number of digits<span class=\"es0\">\\n</span>\"</span>, arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">continue</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%10s\u00a0:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"kw4\">substr</span><span class=\"br0\">(</span>num, len<span class=\"sy3\">/</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">100 DEF FN L(N) = LEN(STR$(INT(ABS(N))))<br/>110 DEF FN N(N) = VAL(MID$(STR$(INT(ABS(N))),(FN L(N)-1)/2,3))<br/>120 DEF FN EVEN(N) = INT(N/2) = N/2<br/>130 FOR I = 1 TO 20<br/>140     READ N<br/>150     PRINT N\":\",<br/>160     GOSUB 100\"MIDDLE THREE DIGITS<br/>170     PRINT R$<br/>180 NEXT<br/>190 END<br/>200 R$ = \"\"<br/>210 IF FN EVEN(FN L(N)) THEN R$ = \"?EVEN,\"<br/>220 IF FN L(N) &lt; 3 THEN R$ = R$ + \"ONLY \" + STR$(FN L(N)) + \" DIGIT\" + MID$(\"S\",FN L(N) - 1, 1)<br/>230 IF RIGHT$(R$, 1) = \",\" THEN R$ = LEFT$(R$, LEN(R$) - 1)\u00a0: RETURN<br/>240 IF LEFT$(R$, 1) = \"?\" THEN RETURN<br/>250 IF R$ &lt;&gt; \"\" THEN R$ = \"?\" + R$\u00a0: RETURN<br/>260 R$ = STR$(FN N(N))<br/>270 IF LEN(R$) = 1 THEN R$ = \"00\" + R$<br/>280 IF LEN(R$) = 2 THEN R$ = \"0\" + R$<br/>290 RETURN<br/>300 DATA123,12345,1234567,987654321,10001,-10001,-123,-100,100,-12345<br/>310 DATA1,2,-1,-10,2002,-2002,0<br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 46, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Initialization ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"numbers=123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345, 1, 2, -1, -10, 2002, -2002, 0\"<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== The Main Thing ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">N</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">numbers</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">middle3</span> <span class=\"sy0\">%%</span><span class=\"re3\">N</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==/The Main Thing ==</span><span class=\"sy0\">%</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== The Procedure ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">middle3</span><br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Making sure that str is positive ==</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">str</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 0 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a str*=-1<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Alternative <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> finding the string length ==</span><span class=\"sy0\">%</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== But this has a limit of 1000 characters ==</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> leng=0<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">str</span><span class=\"sy0\">!</span>\"==\"\" <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>. <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,1000<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">str:~%%.,1</span><span class=\"sy0\">!</span>\"==\"\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a leng+=1<br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">leng</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 3 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">%</span><span class=\"re3\">~1</span>:\t\t[ERROR] Input too small.<br/>\t\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\t<span class=\"sy0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"test2=leng <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 2,trimmer=<span class=\"sy0\">(</span>leng - 3<span class=\"sy0\">)</span> / 2\"<br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">test2</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">%</span><span class=\"re3\">~1</span>:\t\t[ERROR] Even number of digits.<br/>\t\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\t<span class=\"sy0\">)</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Passed the tests. Now, really find the middle 3 digits... ==</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">trimmer</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">%</span><span class=\"re3\">~1</span>:\t\t<span class=\"sy0\">!</span><span class=\"re2\">str</span><span class=\"sy0\">!</span><br/>\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">%</span><span class=\"re3\">~1</span>:\t\t<span class=\"sy0\">!</span><span class=\"re2\">str:~%<span class=\"re3\">trimmer</span><span class=\"sy0\">%</span>,-<span class=\"sy0\">%</span><span class=\"re3\">trimmer</span>%</span><span class=\"sy0\">!</span><br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==/The Procedure ==</span><span class=\"sy0\">%</span></pre>"}, {"lang": "Befunge", "loc": 8, "block": "<pre class=\"text highlighted_source\">&gt;&amp;&gt;:0`2*1-*0&gt;v<br/>v+*86%+55:p00&lt;<br/>&gt;\\55+/:00g1+\\|<br/>v3_v#*%2\\`2::&lt;<br/>-&gt;@&gt;0\".rorrE\"v<br/>2^,+55_,#!&gt;#:&lt;<br/>&gt;/&gt;\\#&lt;$#-:#1_v<br/>&gt;<a class=\"__cf_email__\" data-cfemail=\"a0ffe0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#&lt;,+55,,,$&lt;</pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">( ( middle3<br/>  =   x p<br/>    .     @(!arg:? [?p:? [(1/2*!p+-3/2)\u00a0%?x [(1/2*!p+3/2)\u00a0?)<br/>        &amp;\u00a0!x<br/>      |  \u00a0!arg<br/>          (\u00a0!p:&lt;3&amp;\"is too small\"<br/>          | \"has even number of digits\"<br/>          )<br/>  )<br/>&amp;     123 12345 1234567 987654321 10001 -10001 -123 -100 100<br/>      -12345 1 2 -1 -10 2002 -2002 0<br/> \u00a0:\u00a0?L<br/>&amp; whl'(!L:%?e\u00a0?L&amp;out$(middle3$!e))<br/>&amp; <br/>);<br/>\u00a0</pre>"}, {"lang": "Burlesque", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {123 12345 1234567 987654321 -10001 -123}{XX{~-}{L[3.&gt;}w!m]\\[}m[uN<br/>123<br/>234<br/>345<br/>654<br/>000<br/>123<br/>\u00a0</pre>"}, {"lang": "C", "loc": 33, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// we return a static buffer; caller wants it, caller copies it</span><br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> mid3<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">char</span> buf<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> l<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> <span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> <span class=\"sy0\">-</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tl <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>l <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tl <span class=\"sy0\">=</span> l <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tbuf<span class=\"br0\">[</span>l <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> buf <span class=\"sy0\">+</span> l<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"sy0\">-</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">1234567890</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>m<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>m <span class=\"sy0\">=</span> mid3<span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tm <span class=\"sy0\">=</span> <span class=\"st0\">\"error\"</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C_sharp", "loc": 13, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> text <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>text<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> text<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Error\"</span> <span class=\"sy0\">:</span> text<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"br0\">(</span>text<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 28, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> middleThreeDigits<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> number <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">to_string</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> length <span class=\"sy1\">=</span> number.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"less than three digits\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length <span class=\"sy2\">%</span> <span class=\"nu0\">2</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"even number of digits\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> number.<span class=\"me1\">substr</span><span class=\"br0\">(</span>length <span class=\"sy2\">/</span> <span class=\"nu0\">2</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> values <span class=\"br0\">{</span><span class=\"nu0\">123</span>, <span class=\"nu0\">12345</span>, <span class=\"nu0\">1234567</span>, <span class=\"nu0\">987654321</span>, <span class=\"nu0\">10001</span>,<br/>                 <span class=\"sy2\">-</span><span class=\"nu0\">10001</span>, <span class=\"sy2\">-</span><span class=\"nu0\">123</span>, <span class=\"sy2\">-</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"sy2\">-</span><span class=\"nu0\">12345</span>,<br/>                 <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"sy2\">-</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2002</span>, <span class=\"sy2\">-</span><span class=\"nu0\">2002</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;&amp;</span> v <span class=\"sy4\">:</span> values<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"middleThreeDigits(\"</span> <span class=\"sy1\">&lt;&lt;</span> v <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy1\">&lt;&lt;</span><br/>                     middleThreeDigits<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 18, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> middle3 <span class=\"br0\">[</span>v<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>no <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>abs v<span class=\"br0\">)</span><br/>        digits <span class=\"br0\">(</span><span class=\"kw1\">str</span> no<span class=\"br0\">)</span><br/>        len <span class=\"br0\">(</span><span class=\"kw1\">count</span> digits<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> len <span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0:<span class=\"me1\">too_short</span><br/>      <span class=\"br0\">(</span>even? len<span class=\"br0\">)</span>\u00a0:<span class=\"me1\">no_middle_in_even_no_of_digits</span><br/>     \u00a0:<span class=\"me1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>mid <span class=\"br0\">(</span><span class=\"sy0\">/</span> len <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                  start <span class=\"br0\">(</span><span class=\"sy0\">-</span> mid <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">3</span><br/>                           <span class=\"br0\">(</span>nthnext digits start<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> passes '<span class=\"br0\">(</span><span class=\"nu0\">123</span> <span class=\"nu0\">12345</span> <span class=\"nu0\">1234567</span> <span class=\"nu0\">987654321</span> <span class=\"nu0\">10001</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span> <span class=\"nu0\">100</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> fails '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span> <span class=\"nu0\">2002</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 91, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> middle3<span class=\"sy0\">.</span><br/>environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  num                 <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">88</span> num-too-small    <span class=\"kw3\">values</span> are -<span class=\"nu0\">99</span> <span class=\"kw3\">thru</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  num-disp            <span class=\"kw3\">pic</span> ---------<span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  div                 <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  <span class=\"kw4\">mod</span>                 <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  mod-disp            <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  digit-counter       <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  digit-div           <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">88</span>  no-more-digits  <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  digit-<span class=\"kw4\">mod</span>           <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">88</span>  is-even         <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  multiplier          <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  value-items<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">123</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">12345</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">10001</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> -<span class=\"nu0\">10001</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> -<span class=\"nu0\">123</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> -<span class=\"nu0\">100</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">100</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> -<span class=\"nu0\">12345</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> -<span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> -<span class=\"nu0\">10</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">2002</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> -<span class=\"nu0\">2002</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span>  <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  value-array <span class=\"kw3\">redefines</span> value-items<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  items   <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>  <span class=\"kw3\">occurs</span> <span class=\"nu0\">17</span> <span class=\"kw2\">times</span> <span class=\"kw3\">indexed</span> <span class=\"kw3\">by</span> item<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  result  <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">10</span>-<span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw3\">with</span> <span class=\"kw3\">test</span> <span class=\"kw3\">after</span> <span class=\"kw2\">varying</span> item <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> items<span class=\"br0\">(</span>item<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">move</span> items<span class=\"br0\">(</span>item<span class=\"br0\">)</span> <span class=\"kw2\">to</span> num<br/>        <span class=\"kw2\">move</span> items<span class=\"br0\">(</span>item<span class=\"br0\">)</span> <span class=\"kw2\">to</span> num-disp<br/>        <span class=\"kw2\">perform</span> <span class=\"nu0\">20</span>-<span class=\"kw1\">check</span><br/>        <span class=\"kw2\">display</span> num-disp <span class=\"st0\">\" --&gt; \"</span> result<br/>    end-<span class=\"kw2\">perform</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">20</span>-<span class=\"kw1\">check</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> num-too-small<br/>        <span class=\"kw2\">move</span> <span class=\"st0\">\"Number too small\"</span> <span class=\"kw2\">to</span> result<br/>        <span class=\"kw2\">exit</span> paragraph<br/>    end-<span class=\"kw1\">if</span><span class=\"sy0\">.</span><br/>\u00a0<br/>    <span class=\"kw2\">perform</span> <span class=\"nu0\">30</span>-count-digits<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">divide</span> digit-counter <span class=\"kw3\">by</span> <span class=\"nu0\">2</span> <span class=\"kw2\">giving</span> digit-div <span class=\"kw2\">remainder</span> digit-<span class=\"kw4\">mod</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> is-even<br/>        <span class=\"kw2\">move</span> <span class=\"st0\">\"Even number of digits\"</span> <span class=\"kw2\">to</span> result<br/>        <span class=\"kw2\">exit</span> paragraph<br/>    end-<span class=\"kw1\">if</span><span class=\"sy0\">.</span><br/>\u00a0<br/>    *&gt; <span class=\"kw1\">if</span> digit-counter <span class=\"kw3\">is</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> mul <span class=\"kw3\">by</span> <span class=\"nu0\">10</span><br/>    *&gt; <span class=\"kw1\">if</span> digit-counter <span class=\"kw3\">is</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> mul <span class=\"kw3\">by</span> <span class=\"nu0\">100</span><br/>    *&gt; <span class=\"kw1\">if</span> digit-counter <span class=\"kw3\">is</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> mul <span class=\"kw3\">by</span> <span class=\"nu0\">1000</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> digit-counter &gt; <span class=\"nu0\">3</span><br/>        <span class=\"kw2\">compute</span> multiplier <span class=\"kw3\">rounded</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\"> ** </span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>digit-counter<span class=\"sy0\"> - </span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\"> / </span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\"> + </span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>        <span class=\"kw2\">divide</span> num <span class=\"kw3\">by</span> multiplier <span class=\"kw2\">giving</span> num<br/>        <span class=\"kw2\">divide</span> num <span class=\"kw3\">by</span> <span class=\"nu0\">1000</span> <span class=\"kw2\">giving</span> div <span class=\"kw2\">remainder</span> <span class=\"kw4\">mod</span><br/>        <span class=\"kw2\">move</span> <span class=\"kw4\">mod</span> <span class=\"kw2\">to</span> mod-disp<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw2\">move</span> num <span class=\"kw2\">to</span> mod-disp<br/>    end-<span class=\"kw1\">if</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> mod-disp <span class=\"kw2\">to</span> result<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">exit</span> paragraph<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">30</span>-count-digits<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">zeroes</span> <span class=\"kw2\">to</span> digit-counter<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> num <span class=\"kw2\">to</span> digit-div<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw3\">with</span> <span class=\"kw3\">test</span> <span class=\"kw3\">before</span> <span class=\"kw2\">until</span> no-more-digits<br/>        <span class=\"kw2\">divide</span> digit-div <span class=\"kw3\">by</span> <span class=\"nu0\">10</span> <span class=\"kw2\">giving</span> digit-div <span class=\"kw2\">remainder</span> digit-<span class=\"kw4\">mod</span><br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> digit-counter<br/>    end-<span class=\"kw2\">perform</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">exit</span> paragraph<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 14, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mid3 <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">abs</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>hmd<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; how many digits</span><br/>    <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>give <span class=\"br0\">(</span>fmt <span class=\"sy0\">&amp;</span>optional x y<span class=\"br0\">)</span> <span class=\"br0\">(</span>return-from mid3 <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> fmt x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>need <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>give <span class=\"st0\">\"Need ~a digits, not ~d.\"</span> x hmd<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>nbr <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>give <span class=\"st0\">\"~3,'0d\"</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>give <span class=\"st0\">\"Zero is 1 digit\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> hmd <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>log a <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> hmd <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>need <span class=\"st0\">\"3+\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> hmd <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>nbr a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">evenp</span> hmd<span class=\"br0\">)</span> <span class=\"br0\">(</span>need <span class=\"st0\">\"odd number of\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>t <span class=\"br0\">(</span>nbr <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> a <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- hmd <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> middleThreeDigits<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isIntegral<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> s <span class=\"sy0\">=</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> n.<span class=\"me1\">text</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span> <span class=\"sy0\">:</span> n.<span class=\"me1\">text</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> len <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> len <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"Need odd and &gt;= 3 digits\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> mid <span class=\"sy0\">=</span> len <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s<span class=\"br0\">[</span>mid <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">mid</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> passing <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><span class=\"sy0\">,</span><br/>            <span class=\"sy0\">-</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"kw4\">long</span>.<span class=\"me1\">min</span><span class=\"sy0\">,</span> <span class=\"kw4\">long</span>.<span class=\"me1\">max</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> passing<span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"middleThreeDigits(%s):\u00a0%s\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> middleThreeDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> failing <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"kw4\">int</span>.<span class=\"me1\">min</span><span class=\"sy0\">,</span><span class=\"kw4\">int</span>.<span class=\"me1\">max</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> failing<span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"middleThreeDigits(%s):\u00a0%s\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> middleThreeDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 48, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import'dart:math';<br/>  int length(int x)<br/>  {<br/>    int i,y;<br/>  for(i=0;;i++)<br/>  {<br/>    y=pow(10,i);<br/>    if(x%y==x)<br/>      break;<br/>  }<br/>    return i;<br/>  }<br/> int middle(int x,int l)<br/>  {<br/> int a=(x/10)-((x%10)/10);<br/>  int b=a%(pow(10,l-2));<br/>  int l2=length(b);<br/>      if(l2==3)<br/>      {<br/>        return b;<br/>      }<br/>    if(l2!=3)<br/>      {<br/>        return middle(b,l2);<br/>      }<br/>  return 0;<br/>  }<br/>\u00a0<br/>\u00a0<br/>main()<br/>{<br/>  int x=-100,y;<br/>  if(x&lt;0)<br/> x=-x;<br/>  int l=length(x);<br/>  if(l.isEven||x&lt;100)<br/>  {print('error');}<br/>    if(l==3)<br/>  {print('$x');}<br/>\u00a0<br/>  if(l.isOdd&amp;&amp; x&gt;100)<br/>  {<br/>   y=middle(x,l);<br/>  print('$y');<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "DCL", "loc": 15, "block": "<pre class=\"text highlighted_source\">$ list = \"123,12345,1234567,987654321,10001,-10001,-123,-100,100,-12345,1,2,-1,-10,2002,-2002,0\"<br/>$ i = 0<br/>$ loop:<br/>$  number = f$element( i, \",\", list )<br/>$  if number .eqs. \",\" then $ exit<br/>$  abs_number = number - \"-\"<br/>$  len = f$length( abs_number )<br/>$  if len .lt. 3 .or. .not. len<br/>$  then<br/>$   write sys$output f$fao( \"!9SL: \", f$integer( number )), \"has no middle three\"<br/>$  else<br/>$   write sys$output f$fao( \"!9SL: \", f$integer( number )), f$extract( ( len - 3 ) / 2, 3, abs_number )<br/>$  endif<br/>$  i = i + 1<br/>$  goto loop</pre>"}, {"lang": "Eiffel", "loc": 63, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Test of middle_three_digits.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ttest_1, test_2<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\ttest_1 <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">123</span>, <span class=\"nu0\">12345</span>, <span class=\"nu0\">1234567</span>, <span class=\"nu0\">987654321</span>, <span class=\"nu0\">10001</span>, <span class=\"sy0\">-</span><span class=\"nu0\">10001</span>, <span class=\"sy0\">-</span><span class=\"nu0\">123</span>, <span class=\"sy0\">-</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"sy0\">&gt;&gt;</span><br/>\t\t\ttest_2 <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2002</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2002</span>, <span class=\"nu0\">0</span><span class=\"sy0\">&gt;&gt;</span><br/>\t\t\tacross<br/>\t\t\t\ttest_1 <span class=\"kw2\">as</span> t<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"The middle three digits of \"</span> <span class=\"sy0\">+</span> t.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" are: <span class=\"es0\">%T</span> \"</span><span class=\"br0\">)</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>middle_three_digits <span class=\"br0\">(</span>t.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tacross<br/>\t\t\t\ttest_2 <span class=\"kw2\">as</span> t<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"The middle three digits of \"</span> <span class=\"sy0\">+</span> t.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" are: <span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>middle_three_digits <span class=\"br0\">(</span>t.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tmiddle_three_digits <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t\t<span class=\"co1\">-- The middle three digits of 'n'.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tk, i<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tin<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> in.<span class=\"me1\">make_empty</span><br/>\t\t\tin <span class=\"sy0\">:=</span> n.<span class=\"me1\">out</span><br/>\t\t\t<span class=\"kw2\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\tin.<span class=\"me1\">prune</span> <span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw2\">if</span> in.<span class=\"me1\">count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"kw2\">then</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\" Not enough digits. \"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">elseif</span> in.<span class=\"me1\">count</span> \\\\ <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\" Even number of digits. \"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>in.<span class=\"me1\">count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\tk <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\tk <span class=\"sy0\">&gt;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>in.<span class=\"me1\">at</span> <span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\tk <span class=\"sy0\">:=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tlength_is_three<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw2\">or</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 29, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>middleThreeDigits = (:n)&lt;int&gt;<br/>[<br/>    literal s\u00a0:= n absolute; literal.<br/>    int len\u00a0:= s length.<br/>    if(len&lt;3)<br/>    [<br/>        InvalidArgumentException new:\"n must have 3 digits or more\"; raise<br/>    ];<br/>    if(len isEven)<br/>    [<br/>        InvalidArgumentException new:\"n must have an odd number of digits\"; raise<br/>    ].<br/>\u00a0<br/>    int mid\u00a0:= len / 2.<br/>\u00a0<br/>    ^ s Substring(mid-1,3).<br/>].<br/>\u00a0<br/>program =<br/>[<br/>    (123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345, 1, 2, -1, -10, 2002, -2002, 0)<br/>    forEach(:n)<br/>    [<br/>        console printLine(\"middleThreeDigits(\",n,\"):\",middleThreeDigits eval(n) | if(:e)(e message))<br/>    ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 30, "block": "<pre class=\"text highlighted_source\">defmodule Middle do<br/>  def three(num) do<br/>    n = num |&gt; abs |&gt; to_string<br/>\u00a0<br/>    case {n,String.length(n) &gt; 2,even?(n)} do<br/>      {n, true, false} -&gt;<br/>        cut(n)<br/>      {_, false, _} -&gt;<br/>        raise \"Number must have at least three digits\"<br/>      {_, _, true} -&gt;<br/>        raise \"Number must have an odd number of digits\"<br/>    end<br/>  end<br/>\u00a0<br/>  defp even?(n), do: rem(String.length(n),2) == 0<br/>  defp cut(n), do: String.slice(n,(div(String.length(n),2) - 1),3)<br/>end<br/>\u00a0<br/>valids = [123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345]<br/>Enum.each(valids, fn n -&gt;\u00a0:io.format \"~10w\u00a0: ~s~n\", [n, Middle.three(n)] end)<br/>\u00a0<br/>errors = [1, 2, -1, -10, 2002, -2002, 0]<br/>Enum.each(errors, fn n -&gt;<br/> \u00a0:io.format \"~10w\u00a0: \", [n]<br/>  try do<br/>    IO.puts Middle.three(n)<br/>  rescue<br/>    e -&gt; IO.puts e.message<br/>  end<br/>end)</pre>"}, {"lang": "Erlang", "loc": 40, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% </span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>middle_three_digits<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>  <br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">1234567</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">987654321</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\t<br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">10001</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">10001</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">123</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\t<br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">2002</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">2002</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/><span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span>  <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"too small<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">digits</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">K</span><span class=\"sy3\">=</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re5\">K</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"even number of digits<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\ttrue <span class=\"sy1\">-&gt;</span>\t <br/>\t\t<span class=\"re3\">loop</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span> <span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~3..0B~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span>  <span class=\"kw1\">when</span> <span class=\"re5\">X</span><span class=\"sy3\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">loop</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM MIDDLE<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>FUNCTION LUNG(N)<br/>   LUNG=LEN(STR$(INT(ABS(N))))+1<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION NCNT(N)<br/>    NCNT=VAL(MID$(STR$(INT(ABS(N))),(LUNG(N)-1)/2,3))<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION EVEN(N)<br/>    EVEN=INT(N/2)=N/2<br/>END FUNCTION<br/>\u00a0<br/>PROCEDURE NUMBER_EXAM(N-&gt;R$)<br/>    R$=\"\"   LG%=LUNG(N)-2<br/>    IF EVEN(LG%) THEN R$=\"?EVEN,\"  END IF<br/>    IF LG%&lt;3 THEN<br/>             R$=R$+\"ONLY\"+STR$(LG%)+\" DIGIT\"<br/>             IF LG%=1 THEN<br/>                 R$=R$+\"S\"<br/>             END IF<br/>    END IF<br/>    IF RIGHT$(R$,1)=\",\" THEN R$=LEFT$(R$,LEN(R$)-1)   EXIT PROCEDURE END IF<br/>    IF LEFT$(R$,1)=\"?\" THEN EXIT PROCEDURE END IF<br/>    IF R$&lt;&gt;\"\" THEN R$=\"?\"+R$   EXIT PROCEDURE END IF<br/>    R$=STR$(NCNT(N))<br/>    IF LEFT$(R$,1)=\" \" THEN R$=MID$(R$,2) END IF<br/>    IF LEN(R$)=1 THEN R$=\"00\"+R$  END IF<br/>    IF LEN(R$)=2 THEN R$=\"0\"+R$   END IF<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    DATA(123,12345,1234567,987654321,10001,-10001,-123,-100,100,-12345)<br/>    DATA(1,2,-1,-10,2002,-2002,0)<br/>    FOR I%=1 TO 17 DO<br/>        READ(N)<br/>        PRINT(N;\"  \",)<br/>        NUMBER_EXAM(N-&gt;R$)<br/>        PRINT(R$)<br/>    END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 26, "block": "<pre class=\"text highlighted_source\">USING: combinators formatting io kernel math math.parser<br/>sequences\u00a0;<br/>IN: rosetta-code.middle-three-digits<br/>\u00a0<br/>CONSTANT: test-values { 123 12345 1234567 987654321 10001 -10001<br/>    -123 -100 100 -12345 1 2 -1 -10 2002 -2002 0 }<br/>\u00a0<br/>: middle-three ( str -- str' ) [ <a class=\"__cf_email__\" data-cfemail=\"3855515c485751564c78\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ] keep<br/>    [ [ 1 - ] [ 2 + ] bi ] dip subseq\u00a0;<br/>\u00a0<br/>: too-short ( -- ) \"Number must have at least three digits.\"<br/>    print\u00a0;<br/>\u00a0<br/>: number-even ( -- ) \"Number must have an odd number of digits.\"<br/>    print\u00a0;<br/>\u00a0<br/>: process ( n -- )<br/>    abs number&gt;string {<br/>        { [ dup length 3 &lt; ] [ drop too-short ] }<br/>        { [ dup length even? ] [ drop number-even ] }<br/>        [ middle-three print ]<br/>    } cond\u00a0;<br/>\u00a0<br/>: main ( -- ) test-values [ dup \"%9d\u00a0: \" printf process ] each\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Forth", "loc": 4, "block": "<pre class=\"text highlighted_source\">: middle3          ( n1 -- a n2)<br/>  abs s&gt;d &lt;# #s #&gt; dup 2/ 0&lt;&gt; over 1 and 0&lt;&gt; and<br/>  if 2/ 1- chars + 3 else drop 0 then<br/>;</pre>"}, {"lang": "Fortran", "loc": 75, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Sat Jun  1 14:48:41</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make $a &amp;&amp; OMP_NUM_THREADS=2 $a &lt; unixdict.txt # some of the compilation options and redirection from unixdict.txt are vestigial.</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none f.f08 -o f</span><br/><span class=\"co1\">!                 123  123                 </span><br/><span class=\"co1\">!               12345  234                 </span><br/><span class=\"co1\">!             1234567  345                 </span><br/><span class=\"co1\">!           987654321  654                 </span><br/><span class=\"co1\">!               10001  000                 </span><br/><span class=\"co1\">!              -10001  000                 </span><br/><span class=\"co1\">!                -123  123                 </span><br/><span class=\"co1\">!                -100  100                 </span><br/><span class=\"co1\">!                 100  100                 </span><br/><span class=\"co1\">!              -12345  234                 </span><br/><span class=\"co1\">!                   1  Too short           </span><br/><span class=\"co1\">!                   2  Too short           </span><br/><span class=\"co1\">!                  -1  Too short           </span><br/><span class=\"co1\">!                 -10  Too short           </span><br/><span class=\"co1\">!                2002  Digit count too even</span><br/><span class=\"co1\">!               -2002  Digit count too even</span><br/><span class=\"co1\">!                   0  Too short           </span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Sat Jun  1 14:48:41</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">program</span> MiddleMuddle<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">itest</span>, idigits<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n<br/>  <span class=\"kw3\">data</span> itest<span class=\"sy0\">/</span><span class=\"nu0\">123</span>,<span class=\"nu0\">12345</span>,<span class=\"nu0\">1234567</span>,<span class=\"nu0\">987654321</span>,<span class=\"nu0\">10001</span>,<span class=\"sy0\">-</span><span class=\"nu0\">10001</span>,<span class=\"sy0\">-</span><span class=\"nu0\">123</span>,<span class=\"sy0\">-</span><span class=\"nu0\">100</span>,<span class=\"nu0\">100</span>,<span class=\"sy0\">-</span><span class=\"nu0\">12345</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">10</span>,<span class=\"nu0\">2002</span>,<span class=\"sy0\">-</span><span class=\"nu0\">2002</span>,<span class=\"nu0\">0</span><span class=\"sy0\">/</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>itest<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> antibase<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"kw4\">abs</span><span class=\"br0\">(</span>itest<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>, idigits, n<span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(i20,2x,a20)'</span><span class=\"br0\">)</span> itest<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, classifym3<span class=\"br0\">(</span>idigits, n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> itest<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> even<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    even <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>n,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> even<br/>\u00a0<br/>  <span class=\"kw1\">function</span> classifym3<span class=\"br0\">(</span>iarray, n<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">iarray</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>,m<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt; <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      s <span class=\"sy0\">=</span> <span class=\"st0\">'Too short'</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>even<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      s <span class=\"sy0\">=</span> <span class=\"st0\">'Digit count too even'</span><br/>    <span class=\"kw1\">else</span><br/>      m <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>      write<span class=\"br0\">(</span>s,<span class=\"st0\">'(3i1)'</span><span class=\"br0\">)</span><span class=\"br0\">(</span>iarray<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, i<span class=\"sy0\">=</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,m<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> classifym3<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> antibase<span class=\"br0\">(</span>base, m, <span class=\"kw4\">digits</span>, n<span class=\"br0\">)</span> <span class=\"co1\">! digits ordered by increasing significance</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">base</span>, m<br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>  <span class=\"co1\">! the number of digits</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw4\">digits</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">em</span><br/>    em <span class=\"sy0\">=</span> m<br/>    <span class=\"kw1\">do</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span><span class=\"kw4\">digits</span><span class=\"br0\">)</span><br/>      <span class=\"kw4\">digits</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>em, base<span class=\"br0\">)</span><br/>      em <span class=\"sy0\">=</span> em <span class=\"sy0\">/</span> base<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> em<span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">stop</span> <span class=\"st0\">'antibase ran out of space to store result'</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> antibase<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> MiddleMuddle<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 32, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> middleThreeDigits <span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> n = -n<br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">100</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span>  <span class=\"co1\">'' error code</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">1000</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">10000</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span> <br/>  <span class=\"kw1\">Dim</span> ns <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>ns<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span>  <span class=\"co1\">'' need to have an odd number of digits for there to be 3 middle</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>ns, <span class=\"kw1\">Len</span><span class=\"br0\">(</span>ns<span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> =&gt; _<br/><span class=\"br0\">{</span><span class=\"nu0\">123</span>, <span class=\"nu0\">12345</span>, <span class=\"nu0\">1234567</span>, <span class=\"nu0\">987654321</span>, <span class=\"nu0\">10001</span>, -<span class=\"nu0\">10001</span>, -<span class=\"nu0\">123</span>, -<span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, -<span class=\"nu0\">123451</span>, <span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span>, -<span class=\"nu0\">10</span>, <span class=\"nu0\">2002</span>, -<span class=\"nu0\">2002</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> result<br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The 3 middle digits of the following numbers are\u00a0: \"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">16</span><br/>  result = middleThreeDigits<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\" =&gt; \"</span>; <br/>  <span class=\"kw1\">If</span> result &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> result<br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Error: does not have 3 middle digits\"</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 24, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iList <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">123</span>, <span class=\"nu0\">12345</span>, <span class=\"nu0\">1234567</span>, <span class=\"nu0\">987654321</span>, <span class=\"nu0\">10001</span>,<br/> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span>, <span class=\"sy0\">-</span><span class=\"nu0\">123</span>, <span class=\"sy0\">-</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"sy0\">-</span><span class=\"nu0\">12345</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2002</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2002</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>    <span class=\"co1\">'Array of integers to process</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a>                                                 <span class=\"co1\">'Temp string</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a>                                                <span class=\"co1\">'Counter</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sAnswer <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span>                                         <span class=\"co1\">'Array, resons for failure or 'middle three digits'</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> iList.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a>                                        <span class=\"co1\">'Loop through the integers</span><br/>  sTemp <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/abs\"><span class=\"kw2\">Abs</span></a><span class=\"br0\">(</span>iList<span class=\"br0\">[</span>siCount<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                                  <span class=\"co1\">'Convert integer to positive and place in sTemp as a string</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                                            <span class=\"co1\">'If sTemp has less than 3 characters then..</span><br/>    sAnswer.<span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"st0\">\"This integer has less than 3 characters\"</span><span class=\"br0\">)</span>          <span class=\"co1\">'Place text in sAnswers</span><br/>  <a href=\"http://gambasdoc.org/help/lang/else\"><span class=\"kw1\">Else</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> Even<span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                                     <span class=\"co1\">'Else If sTemp is of even length then</span><br/>    sAnswer.<span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"st0\">\"This integer has an even length\"</span><span class=\"br0\">)</span>                  <span class=\"co1\">'Place text in sAnswers</span><br/>  <a href=\"http://gambasdoc.org/help/lang/else\"><span class=\"kw1\">Else</span></a>                                                              <span class=\"co1\">'Else..</span><br/>    sAnswer.<span class=\"me1\">Add</span><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sTemp, <a href=\"http://gambasdoc.org/help/lang/int\"><span class=\"kw2\">Int</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                 <span class=\"co1\">'Place the middle 3 digits in sAnswer</span><br/>  <a href=\"http://gambasdoc.org/help/lang/endif\"><span class=\"kw1\">Endif</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> iList.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a>                                        <span class=\"co1\">'Loop through the integers</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://www.google.com/search?hl=en&amp;q=space%24+site:http://gambasdoc.org/help/lang/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Space$</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>iList<span class=\"br0\">[</span>siCount<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <br/>    iList<span class=\"br0\">[</span>siCount<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy0\">&amp;</span> sAnswer<span class=\"br0\">[</span>siCount<span class=\"br0\">]</span>                       <span class=\"co1\">'Print out results</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 26, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> m3<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"errors\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    ErrorLT3  <span class=\"sy2\">=</span> errors<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span><span class=\"st0\">\"N of at least three digits required.\"</span><span class=\"sy1\">)</span><br/>    ErrorEven <span class=\"sy2\">=</span> errors<span class=\"sy3\">.</span><span class=\"me1\">New</span><span class=\"sy1\">(</span><span class=\"st0\">\"N with odd number of digits required.\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Digits<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">100</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> ErrorLT3<br/>    <span class=\"sy1\">}</span><br/>    s <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><span class=\"sy3\">%</span><span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> ErrorEven<br/>    <span class=\"sy1\">}</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy1\">[</span>m<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">:</span> m<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Gosu", "loc": 13, "block": "<pre class=\"text highlighted_source\">var valid = {123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345}<br/>valid.each(\\ num -&gt;print(middleThree(num)))<br/>\u00a0<br/>var errant = {1, 2, -1, -10, 2002, -2002, 0}<br/>errant.each(\\ num -&gt;print(middleThree(num)))<br/>\u00a0<br/>function middleThree(x: int)\u00a0: String {<br/>  var s = Math.abs(x) as String<br/>  if(s.length &lt; 3) return \"Error: ${x} has less than 3 digits\"<br/>  if(s.length\u00a0% 2 == 0) return \"Error: ${x} has an even number of digits\"<br/>  var start = (s.length / 2) - 1<br/>  return s.substring(start, start + 3)<br/>}</pre>"}, {"lang": "Groovy", "loc": 8, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> middleThree<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> text <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> text.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span>\u00a0: <span class=\"st0\">\"'$number' must be more than 3 numeric digits\"</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> text.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"st0\">\"'$number' must have an odd number of digits\"</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20start\"><span class=\"kw8\">start</span></a> <span class=\"sy0\">=</span> text.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    text<span class=\"br0\">[</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20start\"><span class=\"kw8\">start</span></a>..<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20start\"><span class=\"kw8\">start</span></a><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 35, "block": "<pre class=\"haskell highlighted_source\">mid3 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Either\"><span class=\"kw4\">Either</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>mid3 n<br/>  <span class=\"sy0\">|</span> m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span> <span class=\"sy0\">=</span> Left <span class=\"st0\">\"is too small\"</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> l <span class=\"sy0\">=</span> Left <span class=\"st0\">\"has an even number of digits\"</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> Right <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">3</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>l <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> s<br/>  <span class=\"kw1\">where</span><br/>    m <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> n<br/>    s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> m<br/>    l <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s<br/>\u00a0<br/>showMid3 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>showMid3 n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n <span class=\"sy0\">++</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:either\"><span class=\"kw3\">either</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a> <span class=\"br0\">(</span>mid3 n<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> showMid3<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span> <span class=\"nu0\">123</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><br/>    <span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><br/>    <span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span><br/>    <span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">100</span><br/>    <span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/>    <span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><br/>    <span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><br/>    <span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> n <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>a <span class=\"kw1\">do</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span>midM<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> midM<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><br/>   <span class=\"sy0\">/</span>m <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>   n <span class=\"sy0\">:=</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> n <span class=\"sy0\">?</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>n <span class=\"sy0\">&gt;=</span> m<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                 <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span>m<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">move</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"kw1\">else</span> <span class=\"st0\">\"wrong number of digits\"</span><br/>              <span class=\"kw1\">else</span> <span class=\"st0\">\"too short\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">asString=: \":\"<span class=\"nu0\">0</span>                <span class=\"co1\">NB. convert vals to strings</span><br/>getPfxSize=: [: -:@| <span class=\"nu0\">3</span> -~ #    <span class=\"co1\">NB. get size of prefix to drop before the 3 middle digits</span><br/>getMid3=: <span class=\"sy0\">(</span><span class=\"nu0\">3</span> {. getPfxSize }. ,&amp;<span class=\"st_h\">'err'</span><span class=\"sy0\">)</span>\u00a0:: <span class=\"sy0\">(</span><span class=\"st_h\">'err'</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span>  <span class=\"co1\">NB. get 3 middle digits or return 'err'</span><br/>getMiddle3=: <a class=\"__cf_email__\" data-cfemail=\"197e7c6d54707d2a59786a4a6d6b70777e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@:|</pre>"}, {"lang": "Java", "loc": 27, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MiddleThreeDigits <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span> passing <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">123</span>, <span class=\"nu0\">12345</span>, <span class=\"nu0\">1234567</span>, <span class=\"nu0\">987654321</span>, <span class=\"nu0\">10001</span>, <span class=\"sy0\">-</span><span class=\"nu0\">10001</span>,<br/>            <span class=\"sy0\">-</span><span class=\"nu0\">123</span>, <span class=\"sy0\">-</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"sy0\">-</span><span class=\"nu0\">12345</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">MIN_VALUE</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">MAX_VALUE</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> failing <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2002</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2002</span>, <span class=\"nu0\">0</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span>,<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MAX_VALUE</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> n <span class=\"sy0\">:</span> passing<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"middleThreeDigits(%s):\u00a0%s<span class=\"es0\">\\n</span>\"</span>, n, middleThreeDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">:</span> failing<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"middleThreeDigits(%s):\u00a0%s<span class=\"es0\">\\n</span>\"</span>, n, middleThreeDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> middleThreeDigits<span class=\"br0\">(</span>T n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>            s <span class=\"sy0\">=</span> s.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> len <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"Need odd and &gt;= 3 digits\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> mid <span class=\"sy0\">=</span> len <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> s.<span class=\"me1\">substring</span><span class=\"br0\">(</span>mid <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, mid <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> middleThree<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> n<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">+</span><span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">var</span> l<span class=\"sy0\">=</span>n.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>l<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy0\">||</span>l<span class=\"sy0\">%</span>2<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> Error<span class=\"br0\">(</span>x<span class=\"sy0\">+</span><span class=\"st0\">': Invalid length '</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>l<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> n.<span class=\"me1\">slice</span><span class=\"br0\">(</span>l<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>l<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"sy0\">,</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">try</span><span class=\"br0\">{</span>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>middleThree<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"kw1\">catch</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">{</span>console.<span class=\"me1\">error</span><span class=\"br0\">(</span>e.<span class=\"me1\">message</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 10, "block": "<pre class=\"text highlighted_source\">def middle3:<br/>  if . &lt;  0 then -. else . end<br/>  | tostring as $s<br/>  | ($s | length) as $n<br/>  | if $n&lt;3 or ($n\u00a0% 2) == 0 then \"invalid length: \\($n)\"<br/>    else (($n - 1) / 2) as $n |  $s[$n - 1\u00a0: $n + 2]<br/>    end\u00a0;<br/>\u00a0<br/>(123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345, 1, 2, -1, -10, 2002, -2002, 0)<br/>  | \"\\(.) =&gt; \\( .|middle3 )\"</pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">function middle3(n::Integer)<br/>    s = dec(abs(n))<br/>    l = length(s)<br/>    if iseven(l)<br/>        throw(ArgumentError(\"n must have an odd number of digits\"))<br/>    elseif l &lt; 3<br/>        throw(ArgumentError(\"n must have 3 digits or more\"))<br/>    end<br/>    mid = (l + 1) \u00f7 2<br/>    return s[mid-1:mid+1]<br/>end<br/>\u00a0<br/>for n = [123, 12345, 1234567, 987654321, 10001, -10001, -123,<br/>         -100, 100, -12345, 1, 2, -1, -10, 2002, -2002, 0]<br/>    @printf(\"%10d -&gt;\u00a0%s\\n\", n, try middle3(n) catch e e.msg end)<br/>end</pre>"}, {"lang": "Klong", "loc": 4, "block": "<pre class=\"text highlighted_source\">items::[123 12345 1234567 987654321 10001 -10001 -123 -100 100 -12345 1 2 -1 -10 2002 -2002 0]<br/>\u00a0<br/>mid3::{[d k];:[3&gt;k::#$#x;\"small\":|0=k!2;\"even\";(-d)_(d::_(k%2)-1)_$#x]}<br/>.p(mid3'items)</pre>"}, {"lang": "Kotlin", "loc": 16, "block": "<pre class=\"scala highlighted_source\">fun middleThree<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int<span class=\"sy0\">?</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> when <span class=\"br0\">{</span><br/>        s.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"co1\">// throw Exception(\"too short!\")</span><br/>        s.<span class=\"me1\">length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"co1\">// throw Exception(\"even number of digits\")</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s.<span class=\"me1\">length</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span> s.<span class=\"me1\">substring</span><span class=\"br0\">(</span>it, it + <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>middleThree<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// 234</span><br/>    println<span class=\"br0\">(</span>middleThree<span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// null</span><br/>    println<span class=\"br0\">(</span>middleThree<span class=\"br0\">(</span><span class=\"nu0\">1234567</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// 345</span><br/>    println<span class=\"br0\">(</span>middleThree<span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"co1\">// 123</span><br/>    println<span class=\"br0\">(</span>middleThree<span class=\"br0\">(</span><span class=\"nu0\">123555</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">//null</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 22, "block": "<pre class=\"text highlighted_source\">define middlethree(value::integer) =&gt; {<br/>\tlocal(<br/>\t\tpos_value\t= math_abs(#value),<br/>\t\tstringvalue\t= #pos_value -&gt; asstring,<br/>\t\tintlength\t= #stringvalue -&gt; size,<br/>\t\tmiddle\t\t= integer((#intlength + 1) / 2),<br/>\t\tprefix\t\t= string(#value) -&gt; padleading(15)&amp; + ': '<br/>\t)<br/>\u00a0<br/>\t#intlength &lt; 3\u00a0? return #prefix + 'Error: too few digits'<br/>\tnot(#intlength\u00a0% 2)\u00a0? return #prefix + 'Error: even number of digits'<br/>\u00a0<br/>\treturn #prefix + #stringvalue -&gt; sub(#middle -1, 3)<br/>\u00a0<br/>}<br/>'&lt;pre&gt;'<br/>with number in array(123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345, 1, 2, -1, -10, 2002, -2002, 0) do {^<br/>\u00a0<br/>\tmiddlethree(#number)<br/>\t'&lt;br /&gt;'<br/>^}<br/>'&lt;/pre&gt;'</pre>"}, {"lang": "Logo", "loc": 19, "block": "<pre class=\"text highlighted_source\">to middle3digits\u00a0:n<br/>  if [less?\u00a0:n 0] [make \"n minus\u00a0:n]<br/>  local \"len make \"len count\u00a0:n<br/>  if [less?\u00a0:len 3] [(throw \"error [Number must have at least 3 digits])]<br/>  if [equal? 0 modulo\u00a0:len 2] [(throw \"error [Number must have odd number of digits])]<br/>  while [greater? count\u00a0:n 3] [<br/>    make \"n butlast butfirst\u00a0:n<br/>  ]<br/>  output\u00a0:n<br/>end<br/>\u00a0<br/>foreach [123 12345 1234567 987654321 10001 -10001 -123 -100 100 -12345<br/>         1 2 -1 -10 2002 -2002 0] [<br/>    type sentence (word\u00a0? \": char 9) runresult [if [less? count\u00a0? 7] [char 9]]<br/>    make \"mid runresult [catch \"error [middle3digits\u00a0?]]<br/>    print ifelse [empty?\u00a0:mid] [item 2 error] [:mid]<br/>]<br/>\u00a0<br/>bye</pre>"}, {"lang": "Lua", "loc": 26, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> middle_three<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\tn <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>n<br/>\t<span class=\"kw1\">end</span><br/>\u00a0<br/>\tn <span class=\"sy0\">=</span> <span class=\"kw3\">tostring</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy0\">#</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"Error: the number of digits is even.\"</span><br/>\t<span class=\"kw1\">elseif</span> <span class=\"sy0\">#</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"Error: the number has less than 3 digits.\"</span><br/>\t<span class=\"kw1\">end</span><br/>\u00a0<br/>\t<span class=\"kw1\">local</span> l <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span><span class=\"sy0\">#</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> n<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>l<span class=\"sy0\">,</span> l<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- test</span><br/><span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>n <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw3\">print</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> middle_three<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 19, "block": "<pre class=\"text highlighted_source\">middleDigits\u00a0:= proc(n)<br/>\tlocal nList, start;<br/>\tnList\u00a0:= [seq(parse(i), i in convert (abs(n), string))];<br/>\tif numelems(nList) &lt; 3 then<br/>\t\tprintf (\"%9a: Error: Not enough digits.\", n);<br/>\telif numelems(nList) mod 2 = 0 then<br/>\t\tprintf (\"%9a: Error: Even number of digits.\", n);<br/>\telse<br/>\t\tstart\u00a0:= (numelems(nList)-1)/2;<br/>\t\tprintf(\"%9a:\u00a0%a%a%a\", n, op(nList[start..start+2]));<br/>\tend if;<br/>end proc:<br/>\u00a0<br/>a\u00a0:= [123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345,<br/>\t 1, 2, -1, -10, 2002, -2002, 0]:<br/>for i in a do<br/>\tmiddleDigits(i);<br/>\tprintf(\"\\n\");<br/>end do;</pre>"}, {"lang": "Mathematica", "loc": 11, "block": "<pre class=\"text highlighted_source\">middleThree[n_Integer]\u00a0:=<br/> Block[{digits = IntegerDigits[n], len},<br/>  len = Length[digits];<br/>  If[len &lt; 3 || EvenQ[len], \"number digits odd or less than 3\", <br/>   len = Ceiling[len/2]; <br/>   StringJoin @@ (ToString /@ digits[[len - 1\u00a0;; len + 1]])]]<br/>\u00a0<br/>testData = {123, 12345, 1234567, 987654321, 10001, -10001, -123, -100,<br/>    100, -12345, 1, 2, -1, -10, 2002, -2002, 0};<br/>\u00a0<br/>Column[middleThree /@ testData]</pre>"}, {"lang": "MATLAB / Octave", "loc": 15, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> s=middle_three_digits<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"co1\">% http://rosettacode.org/wiki/Middle_three_digits</span><br/>\u00a0<br/>s=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">if</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\ts=<span class=\"co2\">'*** error: number of digits must be odd ***'</span>;<br/>\t<span class=\"kw1\">return</span>;<br/><span class=\"kw1\">end</span>; <br/><span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span>&lt;<span class=\"nu0\">3</span>,<br/>\ts=<span class=\"co2\">'*** error: number of digits must not be smaller than 3 ***'</span>;<br/>\t<span class=\"kw1\">return</span>;<br/><span class=\"kw1\">end</span>;<br/>\u00a0<br/>s = s<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>+<span class=\"br0\">[</span>-<span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u041f0\tlg\t[x]\t3\t-\tx&gt;=0\t23\t\u0418\u041f0\t1\t0<br/>/\t[x]\t^\tlg\t[x]\t10^x\t\u041f1\t/\t{x}\t\u0418\u041f1<br/>*\t\u0411\u041f\t00\t1\t+\tx=0\t29\t\u0418\u041f0\t\u0421/\u041f\t0<br/>/</pre>"}, {"lang": "ML", "loc": 26, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/>\t<span class=\"kw1\">val</span> test_array <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"123\"</span>,<span class=\"st0\">\"12345\"</span>,<span class=\"st0\">\"1234567\"</span>,<span class=\"st0\">\"987654321\"</span>,<span class=\"st0\">\"10001\"</span>,<span class=\"st0\">\"~10001\"</span>,<span class=\"st0\">\"~123\"</span>,<span class=\"st0\">\"~100\"</span>,<span class=\"st0\">\"100\"</span>,<span class=\"st0\">\"~12345\"</span>,<span class=\"st0\">\"1\"</span>,<span class=\"st0\">\"2\"</span>,<span class=\"st0\">\"~1\"</span>,<span class=\"st0\">\"~10\"</span>,<span class=\"st0\">\"2002\"</span>,<span class=\"st0\">\"~2002\"</span>,<span class=\"st0\">\"0\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">fun</span> even <span class=\"br0\">(</span>x rem <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span> <span class=\"sy0\">|</span> _ <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">fun</span> middleThreeDigits<br/>\t\t\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, s, <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> s @ <span class=\"st0\">\" --&gt; too small\"</span> <br/>\t\t<span class=\"sy0\">|</span>\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, s, <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> s @ <span class=\"st0\">\" --&gt; has even digits\"</span><br/>\t\t<span class=\"sy0\">|</span>\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, s, <span class=\"nu0\">3</span> <span class=\"br0\">)</span> where <span class=\"br0\">(</span>len <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> s @ <span class=\"st0\">\" --&gt; \"</span> @ <span class=\"br0\">(</span>implode <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">|</span>\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, s, <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>middleThreeDigits <span class=\"br0\">(</span> sub <span class=\"br0\">(</span>t, <span class=\"nu0\">0</span>, <span class=\"br0\">(</span>len t<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, s, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t<span class=\"sy0\">|</span>\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, s, m<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> len <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span><br/>\t\t\t\t\t\t\tmiddleThreeDigits <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, s, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t  <span class=\"kw1\">else</span><br/>\t\t\t\t\t\t    <span class=\"kw1\">if</span> even ` len <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\t\t\t\t  middleThreeDigits <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, s, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\t\t  middleThreeDigits <span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, s, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\t\t<span class=\"sy0\">|</span>\ts\t<span class=\"sy0\">=</span> <span class=\"kw1\">if</span> sub <span class=\"br0\">(</span>s, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"~\"</span> <span class=\"kw1\">then</span><br/>\t\t\t\tmiddleThreeDigits <span class=\"br0\">(</span>sub <span class=\"br0\">(</span>explode s, <span class=\"nu0\">1</span>, len s<span class=\"br0\">)</span>, s, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tmiddleThreeDigits <span class=\"br0\">(</span>explode s, s, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">;</span><br/>\u00a0<br/>\tmap <span class=\"br0\">(</span>println o middleThreeDigits<span class=\"br0\">)</span> test_array<span class=\"sy0\">;</span></pre>"}, {"lang": "MUMPS", "loc": 11, "block": "<pre class=\"text highlighted_source\">/* MUMPS */<br/>MID3(N) \u00a0;                                                                       <br/>        N LEN,N2                                                                <br/>        S N2=$S(N&lt;0:-N,1:N)                                                     <br/>        I N2&lt;100 Q \"NUMBER TOO SMALL\"                                           <br/>        S LEN=$L(N2)                                                            <br/>        I LEN#2=0 Q \"EVEN NUMBER OF DIGITS\"                                     <br/>        Q $E(N2,LEN\\2,LEN\\2+2)<br/>\u00a0<br/>F I=123,12345,1234567,987654321,10001,-10001,-123,-100,100,-12345,1,2,-1,-10,2002,-2002,0 W\u00a0!,$J(I,10),\": \",$$MID3^MID3(I)                 <br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 47, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>sl = <span class=\"st0\">'123 12345 1234567 987654321 10001 -10001 -123 -100 100 -12345'</span> -<br/>     <span class=\"st0\">'1 2 -1 -10 2002 -2002 0'</span> -<br/>     <span class=\"st0\">'abc 1e3 -17e-3 4004.5 12345678 9876543210'</span> <span class=\"co1\">-- extras</span><br/>\u00a0<br/><span class=\"kw1\">parse</span> arg digsL digsR .<br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>digsL.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'w'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> digsL = <span class=\"nu0\">3</span><br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>digsR.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'w'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> digsR = digsL<br/><span class=\"kw1\">if</span> digsL <span class=\"sy0\">&gt;</span> digsR        <span class=\"kw3\">then</span> digsR = digsL<br/>\u00a0<br/><span class=\"kw1\">loop</span> dc = digsL to digsR<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Middle'</span> dc <span class=\"st0\">'characters'</span><br/>  <span class=\"kw1\">loop</span> nn = <span class=\"nu0\">1</span> to sl.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    val = sl.<span class=\"kw6\">word</span><span class=\"br0\">(</span>nn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> middleDigits<span class=\"br0\">(</span>dc, val<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> nn<br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw3\">end</span> dc<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method middle3Digits<span class=\"br0\">(</span>val<span class=\"br0\">)</span> <span class=\"kw2\">constant</span><br/>  <span class=\"kw1\">return</span> middleDigits<span class=\"br0\">(</span><span class=\"nu0\">3</span>, val<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method middleDigits<span class=\"br0\">(</span>digitCt, val<span class=\"br0\">)</span> <span class=\"kw2\">constant</span><br/>  text = val.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"st0\">':'</span><br/>  even = digitCt <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span> <span class=\"co1\">-- odd or even?</span><br/>  <span class=\"kw1\">select</span><br/>    <span class=\"kw3\">when</span> digitCt <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span>                       <span class=\"kw3\">then</span> text = <span class=\"st0\">'digit selection size must be &gt;= 1'</span><br/>    <span class=\"kw3\">when</span> <span class=\"sy0\">\\</span>val.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'w'</span><span class=\"br0\">)</span>                 <span class=\"kw3\">then</span> text = text <span class=\"st0\">'is not a whole number'</span><br/>    <span class=\"kw3\">when</span> val.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">length</span> <span class=\"sy0\">&lt;</span> digitCt         <span class=\"kw3\">then</span> text = text <span class=\"st0\">'has less than'</span> digitCt <span class=\"st0\">'digits'</span><br/>    <span class=\"kw3\">when</span> <span class=\"sy0\">\\</span>even <span class=\"sy0\">&amp;</span> val.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">length</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> text = text <span class=\"st0\">'does not have an odd number of digits'</span><br/>    <span class=\"kw3\">when</span> even  <span class=\"sy0\">&amp;</span> val.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">length</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> text = text <span class=\"st0\">'does not have an even number of digits'</span><br/>    <span class=\"kw3\">otherwise</span> <span class=\"kw1\">do</span><br/>      val = val.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      valL = val.<span class=\"me0\">length</span><br/>      cutP = <span class=\"br0\">(</span>valL - digitCt<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span><br/>      text = text val.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>cutP + <span class=\"nu0\">1</span>, digitCt<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">catch</span> NumberFormatException<br/>      text = val <span class=\"st0\">'is not numeric'</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> text<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 13, "block": "<pre class=\"newlisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>middle3 x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>even? <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#length\"><span class=\"kw1\">length</span></a> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"st0\">\"You entered \"</span> x <span class=\"st0\">\". I need an odd number of digits, not \"</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#length\"><span class=\"kw1\">length</span></a> x<span class=\"br0\">)</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#length\"><span class=\"kw1\">length</span></a> x<span class=\"br0\">)</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"st0\">\"You entered \"</span> x <span class=\"st0\">\". Sorry, but I need 3 or more digits.\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"st0\">\"The middle 3 digits of \"</span> x <span class=\"st0\">\" are \"</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">-</span> <span class=\"br0\">(</span><span class=\"sy1\">/</span> <span class=\"br0\">(</span><span class=\"sy1\">-</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#length\"><span class=\"kw1\">length</span></a> x<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#string\"><span class=\"kw1\">string</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#abs\"><span class=\"kw1\">abs</span></a> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#map\"><span class=\"kw1\">map</span></a> middle3 lst<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 16, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>proc middleThreeDigits(i): auto =<br/>  var s = $abs(i)<br/>  if s.len &lt; 3 or s.len mod 2 == 0:<br/>    raise newException(ValueError, \"Need odd and &gt;= 3 digits\")<br/>  let mid = s.len div 2<br/>  return s[mid-1..mid+1]<br/>\u00a0<br/>const passing = @[123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345]<br/>const failing = @[1, 2, -1, -10, 2002, -2002, 0]<br/>\u00a0<br/>for i in passing &amp; failing:<br/>  var answer = try: middleThreeDigits(i)<br/>    except ValueError: getCurrentExceptionMsg()<br/>  echo \"middleThreeDigits(\",i,\") returned: \",answer</pre>"}, {"lang": "Objeck", "loc": 14, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    text <span class=\"sy0\">:=</span> <span class=\"st0\">\"123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345, 1, 2, -1, -10, 2002, -2002, 0\"</span><span class=\"sy0\">;</span><br/>    ins <span class=\"sy0\">:=</span> text<span class=\"sy0\">-&gt;</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> ins<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      in <span class=\"sy0\">:=</span> ins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      in <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>in<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> in<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> '<span class=\"sy0\">-</span>'<span class=\"br0\">)</span>\u00a0? in<span class=\"sy0\">-&gt;</span><span class=\"me1\">SubString</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> in<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> in<span class=\"sy0\">;</span><br/>      IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">(</span>in<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">|</span> in<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"Error\"</span> <span class=\"sy0\">:</span> in<span class=\"sy0\">-&gt;</span><span class=\"me1\">SubString</span><span class=\"br0\">(</span><span class=\"br0\">(</span>in<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 25, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> even x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"kw1\">land</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">let</span> middle_three_digits x <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs\"><span class=\"kw3\">abs</span></a> x<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"need &gt;= 3 digits\"</span> <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">if</span> even n <span class=\"kw1\">then</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"need odd number of digits\"</span> <span class=\"kw1\">else</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>sub s <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw1\">let</span> passing <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">123</span><span class=\"sy0\">;</span> <span class=\"nu0\">12345</span><span class=\"sy0\">;</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">;</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">;</span> <span class=\"nu0\">10001</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> failing <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"nu0\">2002</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print x <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">try</span> <span class=\"br0\">(</span>middle_three_digits x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">with</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#EXCEPTIONFailure\"><span class=\"kw5\">Failure</span></a> e <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"failure: \"</span> <span class=\"sy0\">^</span> e<br/>  <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d:\u00a0%s\\n\"</span> x res<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"Should pass:\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter print passing<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"Should fail:\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter print failing<span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: middle3<br/>| s sz |<br/>   abs asString dup -&gt;s size -&gt;sz<br/>   sz 3 &lt;    ifTrue: [ \"Too short\" println return ]<br/>   sz isEven ifTrue: [ \"Not odd number of digits\" println return ]<br/>   sz 3 - 2 / 1+  dup 2 + s extract\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">middle<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span>digits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>#v<span class=\"sy0\">&gt;</span><span class=\"nu1\">2</span><span class=\"sy0\">&amp;&amp;</span>#v<span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">100</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span>#v<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu1\">10</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span>#v<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>v<span class=\"br0\">[</span>#v<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">+</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"no middle 3 digits\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>middle<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">123</span><span class=\"sy0\">,</span> <span class=\"nu1\">12345</span><span class=\"sy0\">,</span> <span class=\"nu1\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu1\">987654321</span><span class=\"sy0\">,</span> <span class=\"nu1\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu1\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu1\">123</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu1\">100</span><span class=\"sy0\">,</span> <span class=\"nu1\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu1\">12345</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span> <span class=\"nu1\">2002</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu1\">2002</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 37, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Midl3dig<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>  <span class=\"co2\">{$MODE Delphi}</span> <span class=\"co1\">//result /integer =&gt; Int32 aka longInt etc..</span><br/><span class=\"co2\">{$ELSE}</span><br/>  <span class=\"co2\">{$APPTYPE console}</span> <span class=\"co1\">// Delphi</span><br/><span class=\"co2\">{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span>   <span class=\"co1\">//IntToStr</span><br/><span class=\"kw1\">function</span> GetMid3dig<span class=\"br0\">(</span>i<span class=\"sy1\">:</span>NativeInt<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">Ansistring</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  n<span class=\"sy1\">,</span>l<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  setlength<span class=\"br0\">(</span>result<span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//n = |i| jumpless abs</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">-</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span>i&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"kw3\">AND</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//calculate digitcount</span><br/>  <span class=\"kw1\">IF</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    l <span class=\"sy1\">:</span><span class=\"sy3\">=</span> trunc<span class=\"br0\">(</span><span class=\"kw3\">ln</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"kw3\">ln</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span><br/>    l <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> l&lt;<span class=\"nu0\">3</span> <span class=\"kw1\">then</span> <span class=\"kw1\">Begin</span>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'got too few digits'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  EXIT<span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span><span class=\"br0\">(</span><span class=\"kw3\">ODD</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">Begin</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'got even number of digits'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> EXIT<span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> copy<span class=\"br0\">(</span>IntToStr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span>l <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  Test <span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">16</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> NativeInt <span class=\"sy3\">=</span><br/>    <span class=\"br0\">(</span> <span class=\"nu0\">123</span><span class=\"sy1\">,</span><span class=\"nu0\">12345</span><span class=\"sy1\">,</span><span class=\"nu0\">1234567</span><span class=\"sy1\">,</span><span class=\"nu0\">987654321</span><span class=\"sy1\">,</span><span class=\"nu0\">10001</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">10001</span><span class=\"sy1\">,</span><br/>    <span class=\"sy3\">-</span><span class=\"nu0\">123</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">12345</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">2002</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">2002</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>n <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>Test<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>Test<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Test<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>n<span class=\"sy1\">:</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"st0\">': '</span><span class=\"sy1\">,</span>GetMid3dig<span class=\"br0\">(</span>Test<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 26, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> middlethree <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$number</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$testnumber</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a> <span class=\"re0\">$number</span> <span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$error</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Middle 3 digits can't be shown\"</span> <span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$numberlength</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$testnumber</span> <span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$numberlength</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$error\u00a0: $number too short!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$numberlength</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$error\u00a0: even number of digits in $number!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$middle</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <span class=\"br0\">(</span> <span class=\"re0\">$numberlength</span>  <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Middle 3 digits of $number\u00a0: \"</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$testnumber</span> <span class=\"sy0\">,</span> <span class=\"re0\">$middle</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"\u00a0!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@numbers</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span> <span class=\"sy0\">,</span><br/>      <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> middlethree<span class=\"br0\">(</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"re0\">@numbers</span> <span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> middle<span class=\"sy0\">-</span>three<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">given</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">abs</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">when</span> <span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span>  <span class=\"br0\">{</span> <span class=\"st0\">\"$n is too short\"</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">when</span> <span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span> <span class=\"st0\">\"$n has an even number of digits\"</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">default</span>          <span class=\"br0\">{</span> <span class=\"st0\">\"The three middle digits of $n are: \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> middle<span class=\"sy0\">-</span>three<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span><br/>    <span class=\"nu0\">123</span> <span class=\"nu0\">12345</span> <span class=\"nu0\">1234567</span> <span class=\"nu0\">987654321</span> <span class=\"nu0\">10001</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span> <span class=\"nu0\">100</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><br/>    <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span> <span class=\"nu0\">2002</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span> <span class=\"nu0\">0</span><br/><span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 11, "block": "<pre class=\"text highlighted_source\">procedure mid3(integer i)<br/>    string s = sprintf(\"%d\",abs(i))<br/>    integer k = length(s)-3<br/>    printf(1,\"%10d:\u00a0%s\\n\",{i,iff(k&lt;0 or and_bits(k,1)?\"error\":s[k/2+1..k/2+3])})<br/>end procedure<br/>\u00a0<br/>constant tests = {123,12345,1234567,987654321,10001,-10001,-123,-100,100,-12345,<br/>                  1,2,-1,-10,2002,-2002,0}<br/>for i=1 to length(tests) do<br/>    mid3(tests[i])<br/>end for</pre>"}, {"lang": "PHP", "loc": 39, "block": "<pre class=\"php highlighted_source\"><span class=\"co1\">// 32-bit builds of PHP: Integers can be from -2147483648 to 2147483647</span><br/><span class=\"co1\">// 64-bit builds of PHP: Integers can be from -9223372036854775808 to 9223372036854775807</span><br/>\u00a0<br/><span class=\"kw2\">function</span> middlethree<span class=\"br0\">(</span><span class=\"re0\">$integer</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$int</span> \t<span class=\"sy0\">=</span> <span class=\"br0\">(</span>int<span class=\"br0\">)</span><a href=\"http://www.php.net/str_replace\"><span class=\"kw3\">str_replace</span></a><span class=\"br0\">(</span><span class=\"st_h\">'-'</span><span class=\"sy0\">,</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span><span class=\"re0\">$integer</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$length</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/is_int\"><span class=\"kw3\">is_int</span></a><span class=\"br0\">(</span><span class=\"re0\">$int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$length</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$middle</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/floor\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><span class=\"re0\">$length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$int</span><span class=\"sy0\">,</span><span class=\"re0\">$middle</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"st_h\">'The value must contain an odd amount of digits...'</span><span class=\"sy0\">;</span>\t<br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"st_h\">'The value must contain at least three digits...'</span><span class=\"sy0\">;</span>\t<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st_h\">'The value does not appear to be an integer...'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$numbers</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$numbers</span> <span class=\"kw1\">as</span> <span class=\"re0\">$nums</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">echo</span> <span class=\"re0\">$nums</span><span class=\"sy0\">.</span><span class=\"st_h\">'\u00a0: '</span><span class=\"sy0\">.</span>middlethree<span class=\"br0\">(</span><span class=\"re0\">$nums</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <span class=\"st_h\">'&lt;br&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de middle3digits (N)<br/>   (let (Lst (chop (abs N))  Len (length Lst))<br/>      (tab (10 -2 -30)<br/>         N<br/>         \":\"<br/>         (cond<br/>            ((&gt; 3 Len) \"not enough digits\")<br/>            ((bit? 1 Len)<br/>               (head 3 (nth Lst (/ Len 2))) )<br/>            (T \"even number of digits\") ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>middle: procedure options (main);      /* 29 October 2013 */<br/>   declare n fixed (15);<br/>   declare s character (25) varying;<br/>   declare in file input;<br/>\u00a0<br/>   open file (in) title ('/MIDDLE.DAT,type(text),recsize(100)');<br/>   on endfile (in) stop;<br/>\u00a0<br/>   do forever;<br/>      get file (in) list (n); put skip list (n);<br/>      n = abs(n);<br/>      s = trim(n);<br/>      if length(s) &lt; 3 then put list ('not possible');<br/>      else  if mod(length(s), 2) = 0 then put list ('not possible');<br/>      else<br/>         do;<br/>            do while (length(s) &gt; 3);<br/>               s = substr(s, 2, length(s)-2);<br/>            end;<br/>            put list ('The middle three digits are: ' || s);<br/>         end;<br/>   end;<br/>\u00a0<br/>end middle;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 24, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> middle3<span class=\"br0\">(</span><span class=\"re0\">$inp</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::abs<span class=\"br0\">(</span><span class=\"re0\">$inp</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"re0\">$leng</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$str\"</span>.length<br/>\u00a0<br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$leng</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">Write-host</span> $inp<span class=\"st0\">\":\t[ERROR] too short.\"</span><br/>\t\t<span class=\"kw3\">Return</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$leng</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">Write-host</span> $inp<span class=\"st0\">\":\t[ERROR] even number of digits.\"</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$trimmer</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$leng</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>\t\t<span class=\"re0\">$ans</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$str\"</span>.subString<span class=\"br0\">(</span><span class=\"re0\">$trimmer</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">Write-host</span> $inp<span class=\"st0\">\":\t$ans\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">Return</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$sample</span> <span class=\"sy0\">=</span> <span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"kw3\">in</span> <span class=\"re0\">$sample</span><span class=\"br0\">)</span><span class=\"br0\">{</span>middle3 <span class=\"re0\">$x</span><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 16, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>middle_3_digits<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"sy4\">,</span> <span class=\"br0\">[</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    verify_middle_3_able<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"sy4\">,</span> Digits<span class=\"br0\">)</span><span class=\"sy4\">,</span>    <br/>    append<span class=\"br0\">(</span>FrontDigits<span class=\"sy4\">,</span> <span class=\"br0\">[</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"sy5\">|</span> BackDigits<span class=\"br0\">]</span><span class=\"sy4\">,</span> Digits<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    same_length<span class=\"br0\">(</span>FrontDigits<span class=\"sy4\">,</span> BackDigits<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>verify_middle_3_able<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"sy4\">,</span> Digits<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    must_be<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    AbsNumber <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number_chars</span></a><span class=\"br0\">(</span>AbsNumber<span class=\"sy4\">,</span> Digits<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    length<span class=\"br0\">(</span>Digits<span class=\"sy4\">,</span> NumDigits<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"sy6\">&gt;</span> NumDigits         <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  domain_error<span class=\"br0\">(</span><span class=\"st_h\">'at least 3 digits'</span><span class=\"sy4\">,</span>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"br0\">)</span><br/>    <span class=\"sy4\">;</span> <span class=\"nu0\">0</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> NumDigits <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span>  <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  domain_error<span class=\"br0\">(</span><span class=\"st_h\">'odd number of digits'</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"br0\">)</span><br/>    <span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 35, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> middle_three_digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span>:<br/>\ts <span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tlength <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">assert</span> length <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">and</span> length\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Need odd and &gt;= 3 digits\"</span><br/>\tmid <span class=\"sy0\">=</span> length // <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">return</span> s<span class=\"br0\">[</span>mid-<span class=\"nu0\">1</span>:mid+<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> passing <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span> <span class=\"nu0\">12345</span><span class=\"sy0\">,</span> <span class=\"nu0\">1234567</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span><span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><span class=\"sy0\">,</span> -<span class=\"nu0\">10001</span><span class=\"sy0\">,</span> -<span class=\"nu0\">123</span><span class=\"sy0\">,</span> -<span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> -<span class=\"nu0\">12345</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> failing <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2002</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2002</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> passing + failing:<br/>\t<span class=\"kw1\">try</span>:<br/>\t\tanswer <span class=\"sy0\">=</span> middle_three_digits<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">except</span> <span class=\"kw2\">AssertionError</span> <span class=\"kw1\">as</span> error:<br/>\t\tanswer <span class=\"sy0\">=</span> error<br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"middle_three_digits(%s) returned:\u00a0%r\"</span>\u00a0% <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> answer<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'123'</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'234'</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">1234567</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'345'</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">987654321</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'654'</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">10001</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'000'</span><br/>middle_three_digits<span class=\"br0\">(</span>-<span class=\"nu0\">10001</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'000'</span><br/>middle_three_digits<span class=\"br0\">(</span>-<span class=\"nu0\">123</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'123'</span><br/>middle_three_digits<span class=\"br0\">(</span>-<span class=\"nu0\">100</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'100'</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'100'</span><br/>middle_three_digits<span class=\"br0\">(</span>-<span class=\"nu0\">12345</span><span class=\"br0\">)</span> returned: <span class=\"st0\">'234'</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> returned: <span class=\"kw2\">AssertionError</span><span class=\"br0\">(</span><span class=\"st0\">'Need odd and &gt;= 3 digits'</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> returned: <span class=\"kw2\">AssertionError</span><span class=\"br0\">(</span><span class=\"st0\">'Need odd and &gt;= 3 digits'</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><br/>middle_three_digits<span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> returned: <span class=\"kw2\">AssertionError</span><span class=\"br0\">(</span><span class=\"st0\">'Need odd and &gt;= 3 digits'</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><br/>middle_three_digits<span class=\"br0\">(</span>-<span class=\"nu0\">10</span><span class=\"br0\">)</span> returned: <span class=\"kw2\">AssertionError</span><span class=\"br0\">(</span><span class=\"st0\">'Need odd and &gt;= 3 digits'</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">2002</span><span class=\"br0\">)</span> returned: <span class=\"kw2\">AssertionError</span><span class=\"br0\">(</span><span class=\"st0\">'Need odd and &gt;= 3 digits'</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><br/>middle_three_digits<span class=\"br0\">(</span>-<span class=\"nu0\">2002</span><span class=\"br0\">)</span> returned: <span class=\"kw2\">AssertionError</span><span class=\"br0\">(</span><span class=\"st0\">'Need odd and &gt;= 3 digits'</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><br/>middle_three_digits<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> returned: <span class=\"kw2\">AssertionError</span><span class=\"br0\">(</span><span class=\"st0\">'Need odd and &gt;= 3 digits'</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"scheme highlighted_source\">#lang racket<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>middle x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">negative</span>? x<span class=\"br0\">)</span> <span class=\"br0\">(</span>middle <span class=\"br0\">(</span><span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"nu0\">100</span><span class=\"br0\">)</span>     <span class=\"st0\">\"error: number too small\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"kw1\">else</span> <br/>     <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">s</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">l</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">even?</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"st0\">\"error: number has even length\"</span><span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">define</span> i <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> <span class=\"kw1\">l</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                 <span class=\"br0\">(</span><span class=\"kw1\">substring</span> <span class=\"kw1\">s</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> middle <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">123</span> <span class=\"nu0\">12345</span> <span class=\"nu0\">1234567</span> <span class=\"nu0\">987654321</span> <span class=\"nu0\">10001</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span> <span class=\"nu0\">100</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> middle <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span> <span class=\"nu0\">2002</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "REXX", "loc": 28, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 03.02.2013 Walter Pachl<br/>* 19.04.2013 mid 3 is now a function returning the middle 3 digits<br/>*            or an error indication<br/>**********************************************************************/</span><br/>sl=<span class=\"st0\">'123 12345 1234567 987654321 10001 -10001 -123 -100 100 -12345'</span>,<br/>   <span class=\"st0\">'2 -1 -10 2002 -2002 0 abc 1e3 -17e-3'</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> sl<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span>                        <span class=\"coMULTI\">/* loop through test values   */</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> sl s sl                    <span class=\"coMULTI\">/* pick next value            */</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>s,<span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"st0\">'-&gt;'</span> mid3<span class=\"br0\">(</span>s<span class=\"br0\">)</span>          <span class=\"coMULTI\">/* test it                    */</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>mid3: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">arg</span> d                            <span class=\"coMULTI\">/* take the argument          */</span><br/><span class=\"kw1\">Select</span>                                 <span class=\"coMULTI\">/* first test for valid input */</span><br/>  <span class=\"kw3\">When</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">'NUM'</span>   <span class=\"kw3\">Then</span>  <span class=\"kw1\">Return</span> <span class=\"st0\">'not a number'</span><br/>  <span class=\"kw3\">When</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span>,<span class=\"kw6\">translate</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span>  <span class=\"kw1\">Return</span> <span class=\"st0\">'not just digits'</span><br/>  <span class=\"kw3\">When</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw6\">abs</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span>     <span class=\"kw3\">Then</span>  <span class=\"kw1\">Return</span> <span class=\"st0\">'less than 3 digits'</span><br/>  <span class=\"kw3\">When</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw6\">abs</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">2</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">1</span> <span class=\"kw3\">Then</span>  <span class=\"kw1\">Return</span> <span class=\"st0\">'not an odd number of digits'</span><br/>  <span class=\"kw3\">Otherwise</span> <span class=\"kw1\">Do</span>                         <span class=\"coMULTI\">/* input is ok                */</span><br/>    dx=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span>                          <span class=\"coMULTI\">/* get rid of optional sign   */</span><br/>    ld=<span class=\"kw6\">length</span><span class=\"br0\">(</span>dx<span class=\"br0\">)</span>                      <span class=\"coMULTI\">/* length of digit string     */</span><br/>    z=<span class=\"br0\">(</span>ld-<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>                         <span class=\"coMULTI\">/* number of digits to cut    */</span><br/>    res=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>dx,z+<span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/* get middle 3 digits        */</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> res</pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>n = 1234567<br/>middle(n)<br/>\u00a0<br/>func middle nr<br/>     mnr = floor(len(string(nr))/2)<br/>     lennr = len(string(nr))<br/>     if lennr = 3 see \"\" + nr + nl<br/>     but lennr &lt; 3 see \"Number must have at least three digits\"<br/>     but lennr%2=0 see \"Number must have an odd number of digits\"<br/>     else cnr = substr(string(nr),mnr,3) see cnr + nl ok <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 14, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> middle_three_digits<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>  <span class=\"co1\"># minus sign doesn't factor into digit count,</span><br/>  <span class=\"co1\"># and calling #abs acts as a duck-type assertion</span><br/>  num = num.<span class=\"me1\">abs</span><br/>\u00a0<br/>  <span class=\"co1\"># convert to string and find length</span><br/>  length = <span class=\"br0\">(</span>str = num.<span class=\"me1\">to_s</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><br/>\u00a0<br/>  <span class=\"co1\"># check validity</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"Number must have at least three digits\"</span> <span class=\"kw1\">if</span> length <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"Number must have an odd number of digits\"</span> <span class=\"kw1\">if</span> length.<span class=\"me1\">even</span>?<br/>\u00a0<br/>  <span class=\"kw2\">return</span> str<span class=\"br0\">[</span>length<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">to_i</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 30, "block": "<pre class=\"text highlighted_source\">fn middle_three_digits(x: i32) -&gt; Result&lt;String, String&gt; {<br/>    let s: String = x.abs().to_string();<br/>    let len = s.len();<br/>    if len &lt; 3 {<br/>        Err(\"Too short\".into())<br/>    } else if len\u00a0% 2 == 0 {<br/>        Err(\"Even number of digits\".into())<br/>    } else {<br/>        Ok(s[len/2 - 1 .. len/2 + 2].to_owned())<br/>    }<br/>}<br/>\u00a0<br/>fn print_result(x: i32) {<br/>    print!(\"middle_three_digits({}) returned: \", x);<br/>    match middle_three_digits(x) {<br/>        Ok(s) =&gt; println!(\"Success, {}\", s),<br/>        Err(s) =&gt; println!(\"Failure, {}\", s)<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let passing = [123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345];<br/>    let failing = [1, 2, -1, -10, 2002, -2002, 0];<br/>    for i in passing.iter() {<br/>        print_result(*i);<br/>    }<br/>    for i in failing.iter() {<br/>        print_result(*i);<br/>    }<br/>}</pre>"}, {"lang": "S-lang", "loc": 1, "block": "<pre>Educational Notes:\n1) Array-style string manipulations (e.g. as = as[[1:]] ) always use bytes,\n   not UTF-8 characters.  As digits and '-' are all ASCII, all is copacetic.\n2) The task doesn't require 64-bit integer support, but I added it, dependant\n   on whether the S-Lang library compile supports them, which it generally\n   does.  [Main exception would be the current downloadable/installable MS-Win\n   version of the Jed editor.]   \n3) S-Lang functions peel arguments off right-to-left, opposite of many\n   languages.  To align the order with other solutions, I enclosed the\n   parameters in a list.  One alternative would have been for m3() to call\n   _stk_reverse(_NARGS), then pop each arg directly off the stack.  Or of\n   course just list the numbers backwards.\n</pre>"}, {"lang": "Scala", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"coMULTI\">/** <br/> * Optionally return the middle three digits of an integer.<br/> *<br/> * @example List(123,12345,-789,1234,12) flatMap (middleThree(_)), returns: List(123, 234, 789)<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> middleThree<span class=\"br0\">(</span> s<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s.<span class=\"me1\">abs</span>.<span class=\"me1\">toString</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> v <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> v.<span class=\"me1\">length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>   <span class=\"sy0\">=&gt;</span> None   <span class=\"co1\">// Middle three is undefined for even lengths</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> v <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> v.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span>        <span class=\"sy0\">=&gt;</span> None<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> v                        <span class=\"sy0\">=&gt;</span> \t\t\t<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>v.<span class=\"me1\">length</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    Some<span class=\"br0\">(</span> v.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i,i+<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// A little test...</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> intVals <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">123</span>,<span class=\"nu0\">12345</span>,<span class=\"nu0\">1234567</span>,<span class=\"nu0\">987654321</span>,<span class=\"nu0\">10001</span>,-<span class=\"nu0\">10001</span>,-<span class=\"nu0\">123</span>,-<span class=\"nu0\">100</span>,<span class=\"nu0\">100</span>,-<span class=\"nu0\">12345</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,-<span class=\"nu0\">1</span>,-<span class=\"nu0\">10</span>,<span class=\"nu0\">2002</span>,-<span class=\"nu0\">2002</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>intVals map <span class=\"br0\">(</span>middleThree<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> map <span class=\"br0\">{</span> <br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"No middle three\"</span> <br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"%03d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span>  <span class=\"co1\">// Format the value, force leading zeroes </span><br/><span class=\"br0\">}</span> mkString<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 24, "block": "<pre class=\"text highlighted_source\">$include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: middle3 (in integer: number) is func<br/>  result<br/>    var string: middle3 is \"\";<br/>  begin<br/>    middle3\u00a0:= str(abs(number));<br/>    if not odd(length(middle3)) or length(middle3) &lt; 3 then<br/>      middle3\u00a0:= \"error\";<br/>    else<br/>      middle3\u00a0:= middle3[succ((length(middle3) - 3) div 2) len 3];<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: number is 0;<br/>    var string: mid3 is \"\";<br/>  begin<br/>    for number range [] (123, 12345, 1234567, 987654321, 10001, -10001, -123,<br/>                         -100, 100, -12345, 1, 2, -1, -10, 2002, -2002, 0) do<br/>      writeln(number &lt;&amp; \": \" &lt;&amp; middle3(number));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">func middle_three<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var l = n.<span class=\"me1\">len</span>;<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"#{n} is too short\"</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span>l.<span class=\"me1\">is_even</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"#{n} has an even number of digits\"</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"The three middle digits of #{n} are: \"</span> <span class=\"sy0\">+</span> n.<span class=\"me1\">digits</span>.<span class=\"me1\">ft</span><span class=\"br0\">(</span>l<span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, l<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var nums = <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><br/>    <span class=\"nu0\">123</span> <span class=\"nu0\">12345</span> <span class=\"nu0\">1234567</span> <span class=\"nu0\">987654321</span> <span class=\"nu0\">10001</span> <span class=\"sy0\">-</span><span class=\"nu0\">10001</span> <span class=\"sy0\">-</span><span class=\"nu0\">123</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span> <span class=\"nu0\">100</span> <span class=\"sy0\">-</span><span class=\"nu0\">12345</span><br/>    <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span> <span class=\"nu0\">2002</span> <span class=\"sy0\">-</span><span class=\"nu0\">2002</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">)</span>;<br/>nums.<span class=\"me1\">each</span> <span class=\"br0\">{</span> say middle_three<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span>;</pre>"}, {"lang": "SQL", "loc": 12, "block": "<pre class=\"sql highlighted_source\">;<span class=\"kw1\">WITH</span> <span class=\"kw1\">DATA</span> <br/>     <span class=\"kw1\">AS</span> <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"kw1\">CAST</span><span class=\"br0\">(</span>ABS<span class=\"br0\">(</span><span class=\"kw1\">NUMBER</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> NVARCHAR<span class=\"br0\">(</span><span class=\"kw1\">MAX</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      charNum<span class=\"sy0\">,</span> <br/>                <span class=\"kw1\">NUMBER</span><span class=\"sy0\">,</span> <br/>                LEN<span class=\"br0\">(</span><span class=\"kw1\">CAST</span><span class=\"br0\">(</span>ABS<span class=\"br0\">(</span><span class=\"kw1\">NUMBER</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> NVARCHAR<span class=\"br0\">(</span><span class=\"kw1\">MAX</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> LcharNum <br/>         <span class=\"kw1\">FROM</span>   TABLE1<span class=\"br0\">)</span> <br/><span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span> <br/>         <span class=\"kw1\">WHEN</span> <span class=\"br0\">(</span> LCHARNUM <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> <br/>                <span class=\"kw1\">AND</span> LCHARNUM\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span>CHARNUM<span class=\"sy0\">,</span> LCHARNUM <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <br/>         <span class=\"kw1\">ELSE</span> <span class=\"st0\">'Error!'</span> <br/>       <span class=\"kw1\">END</span>    Output<span class=\"sy0\">,</span> <br/>       <span class=\"kw1\">NUMBER</span> <span class=\"kw1\">INPUT</span> <br/><span class=\"kw1\">FROM</span>   <span class=\"kw1\">DATA</span> </pre>"}, {"lang": "Swift", "loc": 16, "block": "<pre class=\"text highlighted_source\">var num:Int = \\\\enter your number here<br/>if num&lt;0{num = -num}<br/>var numArray:[Int]=[]<br/>while num&gt;0{<br/>\tvar temp:Int=num%10<br/>\tnumArray.append(temp)<br/>\tnum=num/10<br/>}<br/>var i:Int=numArray.count<br/>if i&lt;3||i%2==0{<br/>\tprint(\"Invalid Input\")<br/>}<br/>else{<br/>\ti=i/2<br/>\tprint(\"\\(numArray[i+1]),\\(numArray[i]),\\(numArray[i-1])\")<br/>}</pre>"}, {"lang": "Tcl", "loc": 14, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> middleThree n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> idx <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$n</span><span class=\"br0\">]</span> - <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">error</span> <span class=\"st0\">\"no middle three digits: input is of even length\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">error</span> <span class=\"st0\">\"no middle three digits: insufficient digits\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> idx <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">string</span> range <span class=\"re0\">$n</span> <span class=\"re0\">$idx</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span>+<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 23, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> middle3digits <br/><span class=\"br0\">{</span> <br/>  <span class=\"kw3\">typeset</span> <span class=\"re5\">-i</span> <span class=\"re2\">n</span>=<span class=\"st0\">\"<span class=\"es3\">${1#-}</span>\"</span><br/>  <span class=\"kw3\">typeset</span> <span class=\"re5\">-i</span> <span class=\"re2\">l</span>=<span class=\"co1\">${#n}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> l <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">echo</span> <span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">2</span> <span class=\"st0\">\"$1 has less than 3 digits\"</span><br/>    <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">elif</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> l <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">echo</span> <span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">2</span> <span class=\"st0\">\"$1 has an even number of digits\"</span><br/>    <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">echo</span> <span class=\"co1\">${n:$((l/2-1)):3}</span><br/>    <span class=\"kw3\">return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co0\"># test</span><br/><span class=\"re2\">testdata</span>=<span class=\"br0\">(</span><span class=\"nu0\">123</span> <span class=\"nu0\">12345</span> <span class=\"nu0\">1234567</span> <span class=\"nu0\">987654321</span> <span class=\"nu0\">10001</span> <span class=\"re5\">-10001</span> <span class=\"re5\">-123</span> <span class=\"re5\">-100</span> <span class=\"nu0\">100</span> <span class=\"re5\">-12345</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"re5\">-1</span><br/>          <span class=\"re5\">-10</span> <span class=\"nu0\">2002</span> <span class=\"re5\">-2002</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"co1\">${testdata[@]}</span>; <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%10d: \"</span> <span class=\"re1\">$n</span><br/>  middle3digits <span class=\"st0\">\"<span class=\"es2\">$n</span>\"</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "VBA", "loc": 23, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main_Middle_three_digits()<br/><span class=\"kw4\">Dim</span> Numbers, i&amp;<br/>    Numbers = Array(123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, _<br/>    100, -12345, 1, 2, -1, -10, 2002, -2002, 0)<br/>    <span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> 16<br/>        Debug.<span class=\"kw4\">Print</span> Numbers(i) &amp; <span class=\"st0\">\" Return\u00a0: \"</span> &amp; Middle3digits(CStr(Numbers(i)))<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Middle3digits(strNb <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    <span class=\"kw3\">If</span> Left(strNb, 1) = <span class=\"st0\">\"-\"</span> <span class=\"kw3\">Then</span> strNb = Right(strNb, Len(strNb) - 1)<br/>    <span class=\"kw3\">If</span> Len(strNb) &lt; 3 <span class=\"kw3\">Then</span><br/>        Middle3digits = <span class=\"st0\">\"Error\u00a0! Number of digits must be &gt;= 3\"</span><br/>    <span class=\"kw3\">ElseIf</span> Len(strNb) <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>        Middle3digits = <span class=\"st0\">\"Error\u00a0! Number of digits must be odd\"</span><br/>    <span class=\"kw3\">Else</span><br/>        Middle3digits = Mid(strNb, 1 + (Len(strNb) - 3) / 2, 3)<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 21, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'http://rosettacode.org/wiki/Middle_three_digits<br/></span><br/><span class=\"kw2\">Function</span> mid3n(n)<br/>\t<span class=\"co1\">'Remove the number's sign.<br/></span>\tn = CStr(Abs(n))<br/>\t<span class=\"kw3\">If</span> Len(n) &lt; 3 <span class=\"kw3\">Or</span> Len(n) <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>\t\tmid3n = <span class=\"st0\">\"Invalid: Either the length of n &lt; 3 or an even number.\"</span><br/>\t<span class=\"kw3\">ElseIf</span> Round(Len(n)/2) &gt; Len(n)/2 <span class=\"kw3\">Then</span><br/>\t\tmid3n = Mid(n,Round(Len(n)/2)-1,3)<br/>\t<span class=\"kw3\">Else</span><br/>\t\tmid3n = Mid(n,Round(Len(n)/2),3)<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Calling the function.<br/></span>arrn = Array(123,12345,1234567,987654321,10001,-10001,-123,-100,100,-12345,_<br/>\t\t\t1,2,-1,-10,2002,-2002,0)<br/><span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> n <span class=\"kw3\">In</span> arrn<br/>\tWScript.StdOut.Write n &amp; <span class=\"st0\">\": \"</span> &amp; mid3n(n)<br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">Next</span></pre>"}, {"lang": "Vedit macro language", "loc": 29, "block": "<pre class=\"vedit highlighted_source\"><span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    #<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> Get_Num<span class=\"br0\">(</span><span class=\"st0\">\"Enter a number, or 0 to stop: \"</span><span class=\"sy0\">,</span> STATLINE<span class=\"br0\">)</span><br/>    Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"Input: \"</span><span class=\"br0\">)</span> Num_Ins<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    Call<span class=\"br0\">(</span><span class=\"st0\">\"MIDDLE_3_DIGITS\"</span><span class=\"br0\">)</span><br/>    Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"  Result: \"</span><span class=\"br0\">)</span> Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> Ins_Newline<br/>    Update<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">// Find middle 3 digits of a number</span><br/><span class=\"co1\">//  in: #1 = numeric value</span><br/><span class=\"co1\">// out: @10 = the result, or error text</span><br/><span class=\"co1\">//</span><br/><span class=\"sy0\">:</span>MIDDLE_3_DIGITS<span class=\"sy0\">:</span><br/>Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span><br/>Num_Ins<span class=\"br0\">(</span>abs<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">+</span>NOCR<span class=\"br0\">)</span>\t<span class=\"co1\">// the input value as string</span><br/>#<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> Cur_Col<span class=\"sy0\">-</span><span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">// #2 = number of digits</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Reg_Set<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Too few digits!\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>#<span class=\"nu0\">2</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tReg_Set<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Not odd number of digits!\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\tGoto_Pos<span class=\"br0\">(</span><span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\tReg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> Cur_Pos<span class=\"sy0\">,</span> Cur_Pos<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>Buf_Quit<span class=\"br0\">(</span>OK<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span> </pre>"}, {"lang": "Wart", "loc": 7, "block": "<pre class=\"text highlighted_source\">def (mid3 n)<br/>  withs (digits  (with outstring  # itoa<br/>                   (pr abs.n))<br/>         max  len.digits<br/>         mid  (int max/2))<br/>    if (and odd?.max (max &gt;= 3))<br/>      (digits mid-1 mid+2)</pre>"}, {"lang": "XPL0", "loc": 24, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\stdlib;<br/>\u00a0<br/>func Mid3Digits(I);     \\Return the middle three digits of I<br/>int  I;<br/>int  Len, Mid;<br/>char S(10);<br/>[ItoA(abs(I), S);<br/>Len:= StrLen(S);<br/>if Len&lt;3 or (Len&amp;1)=0 then return \"Must be 3, 5, 7 or 9 digits\";<br/>Mid:= Len/2;<br/>S:= S + Mid - 1;<br/>S(2):= S(2)\u00a0! $80;      \\terminate string<br/>return S;               \\WARNING: very temporary<br/>];<br/>\u00a0<br/>int  Passing, Failing, X;<br/>[Passing:= [123, 12345, 1234567, 987654321, 10001, -10001, -123, -100, 100, -12345];<br/> Failing:= [1, 2, -1, -10, 2002, -2002, 0];     \\WARNING: nasty trick<br/>for X:= 0 to 16 do<br/>    [Text(0, \"Middle three digits of \");  IntOut(0, Passing(X));<br/>     Text(0, \" returned: \");<br/>     Text(0, Mid3Digits(Passing(X)));  CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn middle(ns){<br/>   ns.apply(\"toString\").apply('-(\"-\"))<br/>   .apply(fcn(n){nl:=n.len(); <br/>      if(nl&lt;3 or nl.isEven) return(False);<br/>      n[(nl-3)/2,3]\u00a0: \"%03d\".fmt(_)<br/>   })<br/>}<br/>middle(T(123,12345,1234567,987654321,10001,-10001,-123,-100,100,-12345)).println()<br/>middle(T(1, 2, -1, -10, 2002, -2002, 0)).println();</pre>"}]}