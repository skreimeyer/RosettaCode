{"task": "Take_notes_on_the_command_line", "blocks": [{"lang": "Ada", "loc": 51, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Calendar</span>.<span class=\"me1\">Formatting</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Characters</span>.<span class=\"me1\">Latin_1</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_Line</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">IO_Exceptions</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Notes <span class=\"kw1\">is</span><br/>   Notes_Filename\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"notes.txt\"</span>;<br/>   Notes_File    \u00a0: Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">File_Type</span>;<br/>   Argument_Count\u00a0: Natural        \u00a0:= Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> Argument_Count = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Open</span><br/>           <span class=\"br0\">(</span>File =&gt; Notes_File,<br/>            Mode =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">In_File</span>,<br/>            Name =&gt; Notes_Filename<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">End_Of_File</span> <span class=\"br0\">(</span>File =&gt; Notes_File<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span>Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span> <span class=\"br0\">(</span>File =&gt; Notes_File<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">exception</span><br/>         <span class=\"kw3\">when</span> Ada.<span class=\"me1\">IO_Exceptions</span>.<span class=\"me1\">Name_Error</span> =&gt;<br/>            <span class=\"kw3\">null</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">begin</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Open</span><br/>           <span class=\"br0\">(</span>File =&gt; Notes_File,<br/>            Mode =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Append_File</span>,<br/>            Name =&gt; Notes_Filename<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">exception</span><br/>         <span class=\"kw3\">when</span> Ada.<span class=\"me1\">IO_Exceptions</span>.<span class=\"me1\">Name_Error</span> =&gt;<br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Create</span> <span class=\"br0\">(</span>File =&gt; Notes_File, Name =&gt; Notes_Filename<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><br/>        <span class=\"br0\">(</span>File =&gt; Notes_File,<br/>         Item =&gt; Ada.<span class=\"me1\">Calendar</span>.<span class=\"me1\">Formatting</span>.<span class=\"me1\">Image</span> <span class=\"br0\">(</span>Date =&gt; Ada.<span class=\"me1\">Calendar</span>.<span class=\"me1\">Clock</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>File =&gt; Notes_File, Item =&gt; Ada.<span class=\"me1\">Characters</span>.<span class=\"me1\">Latin_1</span>.<span class=\"me1\">HT</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Argument_Count</span> <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><br/>           <span class=\"br0\">(</span>File =&gt; Notes_File,<br/>            Item =&gt; Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span> <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> I /= Argument_Count <span class=\"kw1\">then</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>File =&gt; Notes_File, Item =&gt; ' '<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Flush</span> <span class=\"br0\">(</span>File =&gt; Notes_File<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">if</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Is_Open</span> <span class=\"br0\">(</span>File =&gt; Notes_File<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Close</span> <span class=\"br0\">(</span>File =&gt; Notes_File<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">end</span> Notes;</pre>"}, {"lang": "Aime", "loc": 31, "block": "<pre class=\"text highlighted_source\">#! /usr/local/bin/aime -a<br/>\u00a0<br/>if (argc() == 1) {<br/>    file f;<br/>    text s;<br/>\u00a0<br/>    f.open(\"NOTES.TXT\", OPEN_READONLY, 0);<br/>\u00a0<br/>    while (f.line(s)\u00a0!= -1) {<br/>        o_(s, \"\\n\");<br/>    }<br/>} else {<br/>    integer i;<br/>    date d;<br/>    file f;<br/>\u00a0<br/>    f.open(\"NOTES.TXT\", OPEN_APPEND | OPEN_CREATE | OPEN_WRITEONLY, 0644);<br/>\u00a0<br/>    d.now;<br/>\u00a0<br/>    f.form(\"/f4/-/f2/-/f2/ /f2/:/f2/:/f2/\\n\", d.year, d.y_month,<br/>           d.m_day, d.d_hour, d.h_minute, d.m_second);<br/>\u00a0<br/>    i = 0;<br/>    while ((i += 1) &lt; argc()) {<br/>        f.byte(i == 1\u00a0? '\\t'\u00a0: ' ');<br/>        f.text(argv(i));<br/>    }<br/>\u00a0<br/>    f.byte('\\n');<br/>}</pre>"}, {"lang": "AppleScript", "loc": 83, "block": "<pre class=\"applescript highlighted_source\">#!<span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>osascript<br/>\u00a0<br/><span class=\"co1\">-- format a number as a string with leading zero if needed</span><br/><span class=\"kw3\">to</span> format<span class=\"br0\">(</span>aNumber<span class=\"br0\">)</span><br/>  <span class=\"kw3\">set</span> resultString <span class=\"kw3\">to</span> aNumber <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>  <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> resultString <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw3\">set</span> resultString <span class=\"kw3\">to</span> <span class=\"st0\">\"0\"</span> <span class=\"sy0\">&amp;</span> resultString<br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>  <span class=\"kw3\">return</span> resultString<br/><span class=\"kw3\">end</span> format<br/>\u00a0<br/><span class=\"co1\">-- join a list with a delimiter</span><br/><span class=\"kw3\">to</span> concatenation <span class=\"kw3\">of</span> aList <span class=\"kw3\">given</span> delimiter:aDelimiter<br/>  <span class=\"kw3\">set</span> tid <span class=\"kw3\">to</span> AppleScript<span class=\"co2\">'</span>s <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><br/>  <span class=\"kw3\">set</span> AppleScript<span class=\"co2\">'</span>s <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span> aDelimiter <span class=\"br0\">}</span><br/>  <span class=\"kw3\">set</span> resultString <span class=\"kw3\">to</span> aList <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>  <span class=\"kw3\">set</span> AppleScript<span class=\"co2\">'</span>s <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> tid<br/>  <span class=\"kw3\">return</span> resultString<br/><span class=\"kw3\">end</span> join<br/>\u00a0<br/><span class=\"co1\">-- apply a handler to every item in a list, returning</span><br/><span class=\"co1\">-- a list of the results</span><br/><span class=\"kw3\">to</span> mapping <span class=\"kw3\">of</span> aList <span class=\"kw3\">given</span> function:aHandler<br/>  <span class=\"kw3\">set</span> resultList <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">global</span> h<br/>  <span class=\"kw3\">set</span> h <span class=\"kw3\">to</span> aHandler<br/>  <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> anItem <span class=\"kw3\">in</span> aList<br/>    <span class=\"kw3\">set</span> resultList <span class=\"kw3\">to</span> resultList <span class=\"sy0\">&amp;</span> h<span class=\"br0\">(</span>anItem<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>  <span class=\"kw3\">return</span> resultList<br/><span class=\"kw3\">end</span> mapping<br/>\u00a0<br/><span class=\"co1\">-- return an ISO-8601-formatted string representing the current date and time</span><br/><span class=\"co1\">-- in UTC</span><br/><span class=\"kw3\">to</span> iso8601<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span> year:y,   <span class=\"kw1\">month</span>:m,     day:d, \u00ac<br/>          <span class=\"kw1\">hours</span>:hr, <span class=\"kw1\">minutes</span>:min, seconds:sec <span class=\"br0\">}</span> <span class=\"kw3\">to</span> \u00ac<br/>          <span class=\"br0\">(</span>current date<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>time <span class=\"kw3\">to</span> GMT<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ymdList <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> mapping <span class=\"kw3\">of</span> <span class=\"br0\">{</span> y, m <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span>, d <span class=\"br0\">}</span> <span class=\"kw3\">given</span> function:format<br/>    <span class=\"kw3\">set</span> ymd <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> concatenation <span class=\"kw3\">of</span> ymdList <span class=\"kw3\">given</span> delimiter:<span class=\"st0\">\"-\"</span><br/>    <span class=\"kw3\">set</span> hmsList <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> mapping <span class=\"kw3\">of</span> <span class=\"br0\">{</span> hr, min, sec <span class=\"br0\">}</span> <span class=\"kw3\">given</span> function:format<br/>    <span class=\"kw3\">set</span> hms <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> concatenation <span class=\"kw3\">of</span> hmsList <span class=\"kw3\">given</span> delimiter:<span class=\"st0\">\":\"</span><br/>    <span class=\"kw3\">set</span> dateTime <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> concatenation <span class=\"kw3\">of</span> <span class=\"br0\">{</span>ymd, hms<span class=\"br0\">}</span> <span class=\"kw3\">given</span> delimiter:<span class=\"st0\">\"T\"</span><br/>    <span class=\"kw3\">return</span> dateTime <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"Z\"</span><br/><span class=\"kw3\">end</span> iso8601<br/>\u00a0<br/><span class=\"kw3\">to</span> <span class=\"kw1\">exists</span><span class=\"br0\">(</span>filePath<span class=\"br0\">)</span><br/>  <span class=\"kw3\">try</span><br/>    filePath <span class=\"kw2\">as</span> <span class=\"kw1\">alias</span><br/>    <span class=\"kw3\">return</span> <span class=\"kw1\">true</span><br/>  <span class=\"kw3\">on</span> <span class=\"kw3\">error</span><br/>    <span class=\"kw3\">return</span> <span class=\"kw1\">false</span><br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">exists</span><br/>\u00a0<br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span> argv<br/>  <span class=\"kw3\">set</span> curDir <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">do shell script</span> <span class=\"st0\">\"pwd\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">set</span> notesFile <span class=\"kw3\">to</span> <span class=\"kw1\">POSIX file</span> <span class=\"br0\">(</span>curDir <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"/NOTES.TXT\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> argv<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>    <span class=\"kw3\">if</span> <span class=\"kw1\">exists</span><span class=\"br0\">(</span>notesFile<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>       <span class=\"kw3\">set</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>linefeed<span class=\"br0\">}</span><br/>       <span class=\"kw3\">return</span> <span class=\"kw1\">paragraphs</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span>read notesFile<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">else</span><br/>       log <span class=\"st0\">\"No notes here.\"</span><br/>       <span class=\"kw3\">return</span> <br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>  <span class=\"kw3\">else</span><br/>    <span class=\"kw3\">try</span> <br/>      <span class=\"kw3\">set</span> fd <span class=\"kw3\">to</span> <span class=\"kw1\">open</span> for access notesFile <span class=\"kw3\">with</span> write permission<br/>      write <span class=\"br0\">(</span>iso8601<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> <span class=\"kw1\">tab</span><span class=\"br0\">)</span> <span class=\"kw3\">to</span> fd starting at eof<br/>      <span class=\"kw3\">set</span> AppleScript<span class=\"co2\">'</span>s <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"st0\">\" \"</span><span class=\"br0\">}</span><br/>      write <span class=\"br0\">(</span><span class=\"br0\">(</span>argv <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> linefeed<span class=\"br0\">)</span> <span class=\"kw3\">to</span> fd starting at eof<br/>      <span class=\"kw1\">close</span> access fd<br/>      <span class=\"kw3\">return</span> <span class=\"kw1\">true</span><br/>    <span class=\"kw3\">on</span> <span class=\"kw3\">error</span> errMsg <span class=\"kw1\">number</span> errNum<br/>      <span class=\"kw3\">try</span><br/>         <span class=\"kw1\">close</span> access fd<br/>      <span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/>      <span class=\"kw3\">return</span> <span class=\"st0\">\"unable to open  \"</span> <span class=\"sy0\">&amp;</span> notesFile <span class=\"sy0\">&amp;</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">&amp;</span> errMsg<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/>  <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span></pre>"}, {"lang": "AutoHotkey", "loc": 23, "block": "<pre class=\"autohotkey highlighted_source\">Notes <span class=\"sy0\">:=</span> <span class=\"st0\">\"Notes.txt\"</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">; no arguments</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">FileExist</span></a><span class=\"br0\">(</span>Notes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"sy0\">,</span> Content<span class=\"sy0\">,</span> <span class=\"re0\">%Notes%</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Content%</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">Else</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Notes%</span> does not exist<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Goto.htm\"><span class=\"kw3\">Goto</span></a><span class=\"sy0\">,</span> EOF<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; date and time, colon, newline (CRLF), tab</span><br/>Date <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_DD\"><span class=\"kw2\">A_DD</span></a> <span class=\"st0\">\"/\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_MM\"><span class=\"kw2\">A_MM</span></a> <span class=\"st0\">\"/\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_YYYY\"><span class=\"kw2\">A_YYYY</span></a><br/>Time <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Hour\"><span class=\"kw2\">A_Hour</span></a> <span class=\"st0\">\":\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Min\"><span class=\"kw2\">A_Min</span></a> <span class=\"st0\">\":\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Sec\"><span class=\"kw2\">A_Sec</span></a> <span class=\"st0\">\".\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_MSec\"><span class=\"kw2\">A_MSec</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Date%</span> <span class=\"re0\">%Time%</span>:`r`n<span class=\"re0\">%A_Tab%</span><span class=\"sy0\">,</span> <span class=\"re0\">%Notes%</span><br/>\u00a0<br/><span class=\"co1\">; command line parameters, trailing newline (CRLF)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0%0%<br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"re0\">%A_Index%</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"re0\">%Notes%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> `r`n<span class=\"sy0\">,</span> <span class=\"re0\">%Notes%</span><br/>\u00a0<br/>EOF:</pre>"}, {"lang": "AWK", "loc": 26, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f TAKE_NOTES.AWK [notes ... ]</span><br/><span class=\"co1\"># examples:</span><br/><span class=\"co1\">#   GAWK -f TAKE_NOTES.AWK Hello world</span><br/><span class=\"co1\">#   GAWK -f TAKE_NOTES.AWK A \"B C\" D</span><br/><span class=\"co1\">#   GAWK -f TAKE_NOTES.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    log_name = <span class=\"st0\">\"NOTES.TXT\"</span><br/>    <span class=\"br0\">(</span><span class=\"kw3\">ARGC</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> show_log<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy5\">:</span> update_log<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> show_log<span class=\"br0\">(</span>  rec<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw5\">getline</span> rec <span class=\"sy2\">&lt;</span>log_name <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,rec<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> update_log<span class=\"br0\">(</span>  i,q<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span>strftime<span class=\"br0\">(</span><span class=\"st0\">\"%Y-%m-%d\u00a0%H:%M:%S\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy2\">&gt;&gt;</span>log_name<br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span> <span class=\"sy2\">&gt;&gt;</span>log_name<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>ARGC<span class=\"sy3\">-</span><span class=\"nu0\">1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      q = <span class=\"br0\">(</span><span class=\"kw3\">ARGV</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/</span> <span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\"\"</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s%s%s \"</span>,q,<span class=\"kw3\">ARGV</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>,q<span class=\"br0\">)</span> <span class=\"sy2\">&gt;&gt;</span>log_name<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"sy2\">&gt;&gt;</span>log_name<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 16, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckcommand%24.shtml\"><span class=\"kw3\">COMMAND$</span></a><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckopen.shtml\"><span class=\"kw3\">OPEN</span></a> <span class=\"st0\">\"notes.txt\"</span> <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckappend.shtml\"><span class=\"kw3\">APPEND</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"re2\">#1</span><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckdate%24.shtml\"><span class=\"kw3\">DATE$</span></a><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcktime%24.shtml\"><span class=\"kw3\">TIME$</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"re2\">#1</span><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckchr%24.shtml\"><span class=\"kw3\">CHR$</span></a><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>; <a href=\"http://www.qbasicnews.com/qboho/qckcommand%24.shtml\"><span class=\"kw3\">COMMAND$</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a><br/><span class=\"kw1\">ELSE</span><br/>    d$ <span class=\"sy0\">=</span> DIR$<span class=\"br0\">(</span><span class=\"st0\">\"notes.txt\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>d$<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckopen.shtml\"><span class=\"kw3\">OPEN</span></a> d$ <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">WHILE</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckeof.shtml\"><span class=\"kw3\">EOF</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckline.shtml\"><span class=\"kw3\">LINE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"re2\">#1</span><span class=\"sy0\">,</span> i$<br/>            <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> i$<br/>        <span class=\"kw1\">WEND</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span></pre>"}, {"lang": "Batch File", "loc": 7, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span><span class=\"sy0\">@</span>==<span class=\"sy0\">@</span> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/exist.html\"><span class=\"kw2\">exist</span></a> notes.txt more notes.txt<br/>    <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">date</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">time</span><span class=\"sy0\">%</span>:<span class=\"sy0\">&gt;&gt;</span>notes.txt<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \t<span class=\"sy0\">%</span><span class=\"re3\">*</span><span class=\"sy0\">&gt;&gt;</span>notes.txt</pre>"}, {"lang": "BBC BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">      REM!Exefile C:\\NOTES.EXE, encrypt, console<br/>      REM!Embed<br/>      LF = 10<br/>\u00a0<br/>      SYS \"GetStdHandle\", -10 TO @hfile%(1)<br/>      SYS \"GetStdHandle\", -11 TO @hfile%(2)<br/>      SYS \"SetConsoleMode\", @hfile%(1), 0<br/>      *INPUT 13<br/>      *OUTPUT 14<br/>      ON ERROR PRINT REPORT$\u00a0: QUIT ERR<br/>\u00a0<br/>      notes% = OPENUP(@dir$ + \"NOTES.TXT\")<br/>      IF notes% = 0 notes% = OPENOUT(@dir$ + \"NOTES.TXT\")<br/>      IF notes% = 0 PRINT \"Cannot open or create NOTES.TXT\"\u00a0: QUIT 1<br/>\u00a0<br/>      IF @cmd$ = \"\" THEN<br/>        WHILE NOT EOF#notes%<br/>          INPUT #notes%, text$<br/>          IF ASC(text$) = LF text$ = MID$(text$,2)<br/>          PRINT text$<br/>        ENDWHILE<br/>      ELSE<br/>        PTR#notes% = EXT#notes%<br/>        PRINT #notes%,TIME$\u00a0: BPUT#notes%,LF<br/>        PRINT #notes%,CHR$(9) + @cmd$\u00a0: BPUT#notes%,LF<br/>      ENDIF<br/>\u00a0<br/>      CLOSE #notes%<br/>      QUIT</pre>"}, {"lang": "C", "loc": 31, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define note_file \"NOTES.TXT\"</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tFILE <span class=\"sy0\">*</span>note <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\ttime_t tm<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>note <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>note_file<span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgetc.html\"><span class=\"kw3\">fgetc</span></a><span class=\"br0\">(</span>note<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> EOF<span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>note <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>note_file<span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ttm <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ctime.html\"><span class=\"kw3\">ctime</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>tm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* skip the newline */</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputc.html\"><span class=\"kw3\">fputc</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">?*</span>p<span class=\"sy0\">:</span><span class=\"st0\">'<span class=\"es1\">\\t</span>'</span><span class=\"sy0\">,</span> note<span class=\"br0\">)</span><span class=\"sy0\">,</span> p<span class=\"sy0\">++;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> argc<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>note<span class=\"sy0\">,</span> <span class=\"st0\">\"%s%c\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">-</span> argc <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>note<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>note<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 37, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;ctime&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co2\">#define note_file \"NOTES.TXT\"</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argc<span class=\"sy1\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tofstream Notes<span class=\"br0\">(</span>note_file, ios<span class=\"sy4\">::</span><span class=\"me2\">app</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw4\">time_t</span> timer <span class=\"sy1\">=</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"kw2\">NULL</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>Notes.<span class=\"me1\">is_open</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tNotes <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw3\">asctime</span><span class=\"br0\">(</span><span class=\"kw3\">localtime</span><span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>timer<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\t</span>'</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>argc<span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t\t\t\tNotes <span class=\"sy1\">&lt;&lt;</span> argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span><br/>\t\t\tNotes <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t\t\tNotes.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tifstream Notes<span class=\"br0\">(</span>note_file, ios<span class=\"sy4\">::</span><span class=\"me2\">in</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tstring line<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>Notes.<span class=\"me1\">is_open</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>Notes.<span class=\"me1\">eof</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tgetline<span class=\"br0\">(</span>Notes, line<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> line <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tNotes.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 33, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">internal</span> <span class=\"kw4\">class</span> Program<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> FileName <span class=\"sy0\">=</span> <span class=\"st0\">\"NOTES.TXT\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> txt <span class=\"sy0\">=</span> File<span class=\"sy0\">.</span><span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span>FileName<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> sb <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> s <span class=\"kw1\">in</span> args<span class=\"br0\">)</span><br/>          sb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>File<span class=\"sy0\">.</span><span class=\"me1\">Exists</span><span class=\"br0\">(</span>FileName<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          File<span class=\"sy0\">.</span><span class=\"me1\">AppendAllText</span><span class=\"br0\">(</span>FileName, sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>          File<span class=\"sy0\">.</span><span class=\"me1\">WriteAllText</span><span class=\"br0\">(</span>FileName, sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosettacode<span class=\"sy0\">.</span>notes<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">use</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">only</span> <span class=\"br0\">[</span>join<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> notes <span class=\"br0\">[</span>notes<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>seq notes<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>spit<br/>     <span class=\"st0\">\"NOTES.txt\"</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span>java<span class=\"sy0\">.</span>util<span class=\"sy0\">.</span>Date<span class=\"sy0\">.</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><br/>          <span class=\"br0\">(</span>join <span class=\"st0\">\" \"</span> notes<span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    \u00a0:<span class=\"me1\">append</span> true<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span>slurp <span class=\"st0\">\"NOTES.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>notes <span class=\"sy0\">*</span>command<span class=\"sy0\">-</span>line<span class=\"sy0\">-</span>args<span class=\"sy0\">*</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 78, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> NOTES<span class=\"sy0\">.</span><br/>\u00a0<br/>       ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">INPUT-OUTPUT</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">FILE-CONTROL</span><span class=\"sy0\">.</span><br/>           <span class=\"kw3\">SELECT</span> <span class=\"kw3\">OPTIONAL</span> notes <span class=\"kw3\">ASSIGN</span> <span class=\"kw2\">TO</span> <span class=\"st0\">\"NOTES.TXT\"</span><br/>               <span class=\"kw3\">ORGANIZATION</span> <span class=\"kw3\">LINE</span> <span class=\"kw3\">SEQUENTIAL</span><br/>               <span class=\"kw3\">FILE</span> <span class=\"kw3\">STATUS</span> note-<span class=\"kw3\">status</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">FILE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">FD</span>  notes<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  note-<span class=\"kw3\">record</span>       <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  note-<span class=\"kw3\">status</span>       <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">88</span>  notes-ok      <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span> <span class=\"kw3\">THRU</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  date-now<span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  current-year  <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  current-month <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  current-<span class=\"kw3\">day</span>   <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  time-now<span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  current-hour  <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  current-<span class=\"kw4\">min</span>   <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  current-sec   <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  args              <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DECLARATIVES</span><span class=\"sy0\">.</span><br/>       note-<span class=\"kw3\">error</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw3\">USE</span> <span class=\"kw3\">AFTER</span> <span class=\"kw3\">STANDARD</span> <span class=\"kw3\">ERROR</span> <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">ON</span> notes<span class=\"sy0\">.</span><br/>\u00a0<br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Error using NOTES.TXT. Error code: \"</span> note-<span class=\"kw3\">status</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">DECLARATIVES</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">ACCEPT</span> args <span class=\"kw3\">FROM</span> COMMAND-<span class=\"kw3\">LINE</span><br/>\u00a0<br/><span class=\"co1\">*          *&gt; If there are no args, display contents of NOTES.TXT.</span><br/>           <span class=\"kw1\">IF</span> args <span class=\"sy0\">=</span> <span class=\"kw3\">SPACES</span><br/>               <span class=\"kw2\">OPEN</span> <span class=\"kw3\">INPUT</span> notes<br/>\u00a0<br/>               <span class=\"kw2\">PERFORM</span> FOREVER<br/><span class=\"co1\">*                  *&gt; READ has no syntax highlighting, but END-READ does.</span><br/><span class=\"co1\">*                  *&gt; Go figure.</span><br/>                   READ notes <br/>                       <span class=\"kw3\">AT</span> <span class=\"kw3\">END</span><br/>                           <span class=\"kw2\">EXIT</span> <span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>                       <span class=\"kw3\">NOT</span> <span class=\"kw3\">AT</span> <span class=\"kw3\">END</span><br/>                           <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">FUNCTION</span> TRIM<span class=\"br0\">(</span>note-<span class=\"kw3\">record</span><span class=\"br0\">)</span><br/>                   <span class=\"kw3\">END-READ</span><br/>               END-<span class=\"kw2\">PERFORM</span><br/>           <span class=\"kw3\">ELSE</span><br/>               <span class=\"kw2\">OPEN</span> <span class=\"kw3\">EXTEND</span> notes<br/>\u00a0<br/><span class=\"co1\">*              *&gt; Write date and time to file.       </span><br/>               <span class=\"kw2\">ACCEPT</span> date-now <span class=\"kw3\">FROM</span> <span class=\"kw3\">DATE</span> YYYYMMDD<br/>               <span class=\"kw2\">ACCEPT</span> time-now <span class=\"kw3\">FROM</span> <span class=\"kw3\">TIME</span><br/>               <span class=\"kw3\">STRING</span> current-year <span class=\"st0\">\"-\"</span> current-month <span class=\"st0\">\"-\"</span> current-<span class=\"kw3\">day</span><br/>                   <span class=\"st0\">\" \"</span> current-hour <span class=\"st0\">\":\"</span> current-<span class=\"kw4\">min</span> <span class=\"st0\">\":\"</span> current-sec<br/>                   <span class=\"kw2\">INTO</span> note-<span class=\"kw3\">record</span><br/>               <span class=\"kw3\">WRITE</span> note-<span class=\"kw3\">record</span><br/>\u00a0<br/><span class=\"co1\">*              *&gt; Write arguments to file as they were passed.</span><br/>               <span class=\"kw3\">STRING</span> X<span class=\"st0\">\"09\"</span><span class=\"sy0\">,</span> args <span class=\"kw2\">INTO</span> note-<span class=\"kw3\">record</span><br/>               <span class=\"kw3\">WRITE</span> note-<span class=\"kw3\">record</span><br/>           END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>           <span class=\"kw2\">CLOSE</span> notes<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 22, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defparameter *notes* <span class=\"st0\">\"NOTES.TXT\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> format-date-time <span class=\"br0\">(</span>stream<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>second minute hour date month year<span class=\"br0\">)</span> <span class=\"br0\">(</span>get-decoded-time<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format stream <span class=\"st0\">\"~D-~2,'0D-~2,'0D ~2,'0D:~2,'0D:~2,'0D\"</span><br/>            year month date hour minute second<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> notes <span class=\"br0\">(</span>args<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> args<br/>      <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s *notes* <span class=\"sy0\">:</span><span class=\"me1\">direction</span> <span class=\"sy0\">:</span><span class=\"me1\">output</span><br/>                                 <span class=\"sy0\">:</span><span class=\"me1\">if-exists</span> <span class=\"sy0\">:</span><span class=\"kw1\">append</span><br/>                                 <span class=\"sy0\">:</span><span class=\"me1\">if-does-not-exist</span> <span class=\"sy0\">:</span><span class=\"me1\">create</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>format-date-time s<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>format s <span class=\"st0\">\"~&amp;~A~{~A~^ ~}~%\"</span> #\\Tab args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s *notes* <span class=\"sy0\">:</span><span class=\"me1\">if-does-not-exist</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">when</span> s<br/>          <span class=\"br0\">(</span>loop for line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line s <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>                while line<br/>                <span class=\"kw1\">do</span> <span class=\"br0\">(</span>write-line line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>notes <span class=\"br0\">(</span>uiop<span class=\"sy0\">:</span><span class=\"me1\">command-line-arguments</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"me1\">datetime</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> filename <span class=\"sy0\">=</span> <span class=\"st0\">\"NOTES.TXT\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>filename.<span class=\"me1\">exists</span> <span class=\"sy0\">&amp;&amp;</span> filename.<span class=\"me1\">isFile</span><span class=\"br0\">)</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> filename.<span class=\"me1\">File</span>.<span class=\"me1\">byLine</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> f <span class=\"sy0\">=</span> File<span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">\"a+\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        f.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span>DateTime<span class=\"br0\">)</span>Clock.<span class=\"me1\">currTime</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        f.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>%-(%s\u00a0%)\"</span><span class=\"sy0\">,</span> args.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 42, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> notes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Classes<span class=\"sy1\">,</span><br/>  SysUtils<span class=\"sy1\">,</span><br/>  IOUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  FILENAME <span class=\"sy3\">=</span> <span class=\"st0\">'NOTES.TXT'</span><span class=\"sy1\">;</span><br/>  TAB <span class=\"sy3\">=</span> <span class=\"re1\">#9</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  sw<span class=\"sy1\">:</span> TStreamWriter<span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> ParamCount <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> TFile<span class=\"sy1\">.</span><span class=\"me1\">Exists</span><span class=\"br0\">(</span>FILENAME<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">write</span><span class=\"br0\">(</span>TFile<span class=\"sy1\">.</span><span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span>FILENAME<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> TFile<span class=\"sy1\">.</span><span class=\"me1\">Exists</span><span class=\"br0\">(</span>FILENAME<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      sw <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TFile<span class=\"sy1\">.</span><span class=\"me1\">AppendText</span><span class=\"br0\">(</span>FILENAME<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      sw <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TFile<span class=\"sy1\">.</span><span class=\"me1\">CreateText</span><span class=\"br0\">(</span>FILENAME<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    sw<span class=\"sy1\">.</span><span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"kw3\">FormatDateTime</span><span class=\"br0\">(</span><span class=\"st0\">'yyyy-mm-dd hh:nn'</span><span class=\"sy1\">,</span>Now<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    sw<span class=\"sy1\">.</span><span class=\"kw1\">Write</span><span class=\"br0\">(</span>TAB<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> ParamCount <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      sw<span class=\"sy1\">.</span><span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"kw3\">ParamStr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> i &lt; ParamCount <span class=\"kw1\">then</span><br/>        sw<span class=\"sy1\">.</span><span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    sw<span class=\"sy1\">.</span><span class=\"me1\">WriteLine</span><span class=\"sy1\">;</span><br/>    sw<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 17, "block": "<pre class=\"e highlighted_source\"><span class=\"co1\">#!/usr/bin/env rune</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> f <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>file<span class=\"sy0\">:</span>notes.<span class=\"me1\">txt</span><span class=\"sy0\">&gt;</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> date <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/makeCommand\"><span class=\"kw7\">makeCommand</span></a><span class=\"br0\">(</span><span class=\"st0\">\"date\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/interp\"><span class=\"kw7\">interp</span></a>.<span class=\"me1\">getArgs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>f.<span class=\"me1\">exists</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> line <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> f <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> noteArgs <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> w <span class=\"sy0\">:=</span> f.<span class=\"me1\">textWriter</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><span class=\"br0\">)</span><br/>        w.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span>date<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span>.<span class=\"me1\">rjoin</span><span class=\"br0\">(</span>noteArgs<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        w.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">defmodule Take_notes do<br/>  @filename \"NOTES.TXT\"<br/>\u00a0<br/>  def main( [] ), do: display_notes<br/>  def main( arguments ), do: save_notes( arguments )<br/>\u00a0<br/>  def display_notes, do: IO.puts File.read!(@filename)<br/>\u00a0<br/>  def save_notes( arguments ) do<br/>    notes = \"#{inspect\u00a0:calendar.local_time}\\n\\t\" &lt;&gt; Enum.join(arguments, \" \")<br/>    File.open!(@filename, [:append], fn(file) -&gt; IO.puts(file, notes) end)<br/>  end<br/>end<br/>\u00a0<br/>Take_notes.main(System.argv)</pre>"}, {"lang": "Erlang", "loc": 26, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/>#<span class=\"sy3\">!</span> <span class=\"sy3\">/</span>usr<span class=\"sy3\">/</span>bin<span class=\"sy3\">/</span>env escript<br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span> <span class=\"re5\">Arguments</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">display_notes</span><span class=\"br0\">(</span> <span class=\"re5\">Arguments</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">save_notes</span><span class=\"br0\">(</span> <span class=\"re5\">Arguments</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">display_notes</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~s\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">binary_to_list</span><span class=\"br0\">(</span><span class=\"re3\">file_contents</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">display_notes</span><span class=\"br0\">(</span> <span class=\"re5\">_Arguments</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">file</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"NOTES.TXT\"</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">file_contents</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">file_contents</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">read_file</span><span class=\"br0\">(</span><span class=\"re3\">file</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">file_contents</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Binary</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Binary</span><span class=\"sy1\">;</span><br/><span class=\"re3\">file_contents</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>error<span class=\"sy1\">,</span> <span class=\"re5\">_Error</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"sy2\">&lt;&lt;&gt;&gt;</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">save_notes</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/><span class=\"re3\">save_notes</span><span class=\"br0\">(</span> <span class=\"re5\">Arguments</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Date</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/calendar.html\"><span class=\"kw5\">calendar</span></a>:<span class=\"re3\">local_time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Notes</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Date</span> <span class=\"sy3\">++</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> | <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"~s \"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Arguments</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Existing_contents</span> <span class=\"sy3\">=</span> <span class=\"re3\">file_contents</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">write_file</span><span class=\"br0\">(</span> <span class=\"re3\">file</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Existing_contents</span><span class=\"sy1\">,</span> <span class=\"re5\">Notes</span><span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 32, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> cmd <span class=\"sy1\">=</span> <span class=\"kw2\">command_line</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">constant</span> filename <span class=\"sy1\">=</span> <span class=\"st0\">\"notes.txt\"</span><br/><span class=\"kw2\">integer</span> fn<br/><span class=\"kw2\">object</span> line<br/><span class=\"kw2\">sequence</span> date_time<br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span> &lt; <span class=\"nu0\">3</span> <span class=\"kw1\">then</span><br/>    fn <span class=\"sy1\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span>filename<span class=\"sy2\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> fn\u00a0!<span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            line <span class=\"sy1\">=</span> <span class=\"kw2\">gets</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">exit</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>            <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>line<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>        <span class=\"kw2\">close</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">else</span><br/>    fn <span class=\"sy1\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span>filename<span class=\"sy2\">,</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <span class=\"co1\">-- if such file doesn't exist it will be created</span><br/>    date_time <span class=\"sy1\">=</span> <span class=\"kw2\">date</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    date_time <span class=\"sy1\">=</span> date_time<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">]</span><br/>    date_time<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+=</span> <span class=\"nu0\">1900</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span>fn<span class=\"sy2\">,</span><span class=\"st0\">\"%d-%02d-%02d\u00a0%d:%02d:%02d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>date_time<span class=\"br0\">)</span><br/>    line <span class=\"sy1\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        line <span class=\"sy1\">&amp;=</span> cmd<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">' '</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    line<span class=\"br0\">[</span>$<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span>fn<span class=\"sy2\">,</span>line<span class=\"br0\">)</span><br/>    <span class=\"kw2\">close</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span></pre>"}, {"lang": "F#", "loc": 23, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<span class=\"sy0\">;;</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> file_path <span class=\"sy0\">=</span> <span class=\"st0\">\"notes.txt\"</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> show_notes <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">try</span><br/>        printfn <span class=\"st0\">\"%s\"</span> <span class=\"sy0\">&lt;|</span> File.<span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span>file_path<span class=\"br0\">)</span><br/>    <span class=\"kw1\">with</span> <br/>        _ <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"Take some notes first!\"</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> take_note <span class=\"br0\">(</span>note\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> now <span class=\"sy0\">=</span> DateTime.<span class=\"me1\">Now</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> <br/>    <span class=\"kw1\">let</span> note <span class=\"sy0\">=</span> sprintf <span class=\"st0\">\"%s<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>%s\"</span> now note <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">use</span> file_stream <span class=\"sy0\">=</span> File.<span class=\"me1\">AppendText</span> file_path <span class=\"kw1\">in</span> <span class=\"co3\">(* 'use' closes file_stream automatically when control leaves the scope *)</span><br/>        file_stream.<span class=\"me1\">WriteLine</span> note<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">length</span> args <span class=\"kw1\">with</span><br/>        | <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> show_notes<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        | _ <span class=\"sy0\">-&gt;</span> take_note <span class=\"sy0\">&lt;|</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\" \"</span> args<span class=\"sy0\">;</span><br/>    <span class=\"nu0\">0</span><span class=\"sy0\">;;</span></pre>"}, {"lang": "Factor", "loc": 13, "block": "<pre class=\"text highlighted_source\">#! /usr/bin/env factor<br/>USING: kernel calendar calendar.format io io.encodings.utf8 io.files<br/>sequences command-line namespaces\u00a0;<br/>\u00a0<br/>command-line get [<br/>    \"notes.txt\" utf8 file-contents print<br/>] [<br/>    \" \" join \"\\t\" prepend<br/>    \"notes.txt\" utf8 [<br/>        now timestamp&gt;ymdhms print<br/>        print flush<br/>    ] with-file-appender<br/>] if-empty</pre>"}, {"lang": "Fantom", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Notes<br/>{<br/>  public static Void main (Str[] args)<br/>  {<br/>    notesFile\u00a0:= File(`notes.txt`) // the backticks make a URI<br/>    if (args.isEmpty)<br/>    {<br/>      if (notesFile.exists) <br/>      {<br/>        notesFile.eachLine |line| { echo (line) }<br/>      }<br/>    }<br/>    else<br/>    {<br/>      // notice the following uses a block so the 'printLine/close' <br/>      // operations are all applied to the same output stream for notesFile<br/>      notesFile.out(true) // 'true' to append to file <br/>      { <br/>        printLine ( DateTime.now.toLocale(\"DD-MM-YY hh:mm:ss\").toStr )<br/>        printLine ( \"\\t\" + args.join(\" \") )<br/>        close<br/>      }<br/>    }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 44, "block": "<pre class=\"text highlighted_source\">vocabulary note-words<br/>get-current also note-words definitions<br/>\u00a0<br/>\\ -- notes.txt <br/>variable file<br/>: open       s\" notes.txt\" r/w open-file if<br/>             s\" notes.txt\" r/w create-file throw then file\u00a0!\u00a0;<br/>: appending  file @ file-size throw file @ reposition-file throw\u00a0;<br/>: write      file @ write-file throw\u00a0;<br/>: close      file @ close-file throw\u00a0;<br/>\u00a0<br/>\\ -- SwiftForth console workaround<br/>9 constant TAB<br/>: type ( c-addr u -- )<br/>  bounds\u00a0?do<br/>    i <a class=\"__cf_email__\" data-cfemail=\"4e2d0e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> dup TAB = if drop 8 spaces else emit then<br/>  loop\u00a0;<br/>\u00a0<br/>\\ -- dump notes.txt<br/>create buf 4096 allot<br/>: dump ( -- )<br/>  cr begin buf 4096 file @ read-file throw dup while<br/>    buf swap type<br/>  repeat drop\u00a0;<br/>\u00a0<br/>\\ -- time and date<br/>: time   @time (time)\u00a0;<br/>: date   @date (date)\u00a0;<br/>\u00a0<br/>\\ -- add note<br/>: cr     s\\\" \\n\" write\u00a0;<br/>: tab    s\\\" \\t\" write\u00a0;<br/>: space  s\"  \" write\u00a0;<br/>: add-note ( c-addr u -- ) appending<br/>  date write space time write cr<br/>  tab ( note ) write cr\u00a0;<br/>\u00a0<br/>set-current <br/>\u00a0<br/>\\ -- note<br/>: note ( \"note\" -- )<br/>  open 0 parse dup if add-note<br/>  else 2drop dump then close\u00a0;<br/>previous</pre>"}, {"lang": "Gambas", "loc": 23, "block": "<pre class=\"gambas highlighted_source\"><span class=\"co1\">'Note that the 1st item in 'Args' is the file name as on the command line './CLIOnly.gambas'</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sContents <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a>                                                     <span class=\"co1\">'To store the file contents</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sArgs <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Args.<span class=\"me1\">All</span>                                            <span class=\"co1\">'To store all the Command line Arguments</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/not\"><span class=\"kw5\">Not</span></a> <a href=\"http://gambasdoc.org/help/lang/exist\"><span class=\"kw2\">Exist</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"NOTES.TXT\"</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                                 <span class=\"co1\">'If NOTES.TXT doesn't already exist in the current directory then..</span><br/>  <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Save</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"NOTES.TXT\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>                                   <span class=\"co1\">'a new NOTES.TXT file should be created.</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"New file 'NOTES.TXT' created.\"</span>                                     <span class=\"co1\">'A meassge</span><br/><a href=\"http://gambasdoc.org/help/lang/endif\"><span class=\"kw1\">Endif</span></a><br/>\u00a0<br/>sContents <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Load</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"NOTES.TXT\"</span><span class=\"br0\">)</span>                             <span class=\"co1\">'Get the contents of the file</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> Args.<span class=\"me1\">count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>                                                      <span class=\"co1\">'If NOTES has arguments (other than the file name)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sContents                                                           <span class=\"co1\">'Print the file contents</span><br/><a href=\"http://gambasdoc.org/help/lang/else\"><span class=\"kw1\">Else</span></a><br/>  sContents <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/format\"><span class=\"kw2\">Format</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/now\"><span class=\"kw2\">Now</span></a>, <span class=\"st0\">\"dddd dd mmmm, yyyy, hh:nn:ss\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> gb.<span class=\"me1\">NewLine</span> <span class=\"sy0\">&amp;</span>   <span class=\"co1\">'The current date and time are appended to the local NOTES.TXT followed by a newline and..</span><br/>     gb.<span class=\"me1\">Tab</span> <span class=\"sy0\">&amp;</span> sArgs.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> gb.<span class=\"me1\">NewLine</span>                                  <span class=\"co1\">'Then all the arguments, joined with spaces, prepended with a tab, and appended with a trailing newline</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sContents                                                           <span class=\"co1\">'Displays the current contents of the local NOTES.TXT</span><br/>  <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Save</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"NOTES.TXT\"</span>, sContents<span class=\"br0\">)</span>                            <span class=\"co1\">'Write contents to NOTES.TXT</span><br/><a href=\"http://gambasdoc.org/help/lang/endif\"><span class=\"kw1\">Endif</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 49, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"io\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/>\t<span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> addNote<span class=\"sy1\">(</span>fn <span class=\"kw4\">string</span><span class=\"sy1\">,</span> note <span class=\"kw4\">string</span><span class=\"sy1\">)</span> error <span class=\"sy1\">{</span><br/>\tf<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>OpenFile<span class=\"sy1\">(</span>fn<span class=\"sy1\">,</span> os<span class=\"sy3\">.</span>O_RDWR<span class=\"sy3\">|</span>os<span class=\"sy3\">.</span>O_APPEND<span class=\"sy3\">|</span>os<span class=\"sy3\">.</span>O_CREATE<span class=\"sy1\">,</span> <span class=\"nu0\">0666</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> err<br/>\t<span class=\"sy1\">}</span><br/>\t_<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> fmt<span class=\"sy3\">.</span>Fprint<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Format<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>RFC1123<span class=\"sy1\">),</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\t</span>\"</span><span class=\"sy1\">,</span> note<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"co1\">// To be extra careful with errors from Close():</span><br/>\t<span class=\"kw1\">if</span> cErr <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\terr <span class=\"sy2\">=</span> cErr<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> err<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> showNotes<span class=\"sy1\">(</span>w <a href=\"http://golang.org/search?q=io.Writer\"><span class=\"kw5\">io.<span class=\"me1\">Writer</span></span></a><span class=\"sy1\">,</span> fn <span class=\"kw4\">string</span><span class=\"sy1\">)</span> error <span class=\"sy1\">{</span><br/>\tf<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Open<span class=\"sy1\">(</span>fn<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> os<span class=\"sy3\">.</span>IsNotExist<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">nil</span> <span class=\"co1\">// don't report \"no such file\"</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">return</span> err<br/>\t<span class=\"sy1\">}</span><br/>\t_<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> io<span class=\"sy3\">.</span>Copy<span class=\"sy1\">(</span>w<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>\tf<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\t<span class=\"kw1\">return</span> err<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> fn <span class=\"sy2\">=</span> <span class=\"st0\">\"NOTES.TXT\"</span><br/>\t<span class=\"kw1\">var</span> err error<br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\terr <span class=\"sy2\">=</span> addNote<span class=\"sy1\">(</span>fn<span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">))</span><br/>\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\terr <span class=\"sy2\">=</span> showNotes<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdout<span class=\"sy1\">,</span> fn<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Fprintln<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stderr<span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>\t\tos<span class=\"sy3\">.</span>Exit<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> notes <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=File&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">'./notes.txt'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    notes <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"${new Date().format('YYYY-MM-dd HH:mm:ss')}<span class=\"es0\">\\t</span>${args.join(' ')}<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> notes.<span class=\"me1\">text</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Time <span class=\"br0\">(</span>getClockTime<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  args <span class=\"sy0\">&lt;-</span> getArgs<br/>  <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> args<br/>    <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:catch\"><span class=\"kw3\">catch</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> <span class=\"st0\">\"notes.txt\"</span> <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>\\<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">do</span> ct <span class=\"sy0\">&lt;-</span> getClockTime<br/>         <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:appendFile\"><span class=\"kw3\">appendFile</span></a> <span class=\"st0\">\"notes.txt\"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> ct <span class=\"sy0\">++</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> args <span class=\"sy0\">++</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span></pre>"}, {"lang": "HicEst", "loc": 20, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">SYSTEM</span><span class=\"br0\">(</span>RUN<span class=\"br0\">)</span> <span class=\"co1\">! start this script in RUN-mode</span><br/>\u00a0<br/><span class=\"kw1\">CHARACTER</span> notes<span class=\"sy1\">=</span><span class=\"st0\">\"Notes.txt\"</span><span class=\"sy1\">,</span> txt<span class=\"sy1\">*</span><span class=\"nu0\">1000</span><br/>\u00a0<br/><span class=\"co1\">! Remove file name from the global variable $CMD_LINE:</span><br/><span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span><span class=\"kw1\">$CMD_LINE</span><span class=\"sy1\">,</span> Mark1<span class=\"sy1\">,</span> Right<span class=\"sy1\">=</span><span class=\"st0\">\".hic \"</span><span class=\"sy1\">,</span> Right<span class=\"sy1\">=</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> Mark2<span class=\"sy1\">,</span> Delete<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">IF</span><span class=\"br0\">(</span><span class=\"kw1\">$CMD_LINE</span> <span class=\"sy1\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>  <span class=\"kw1\">READ</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>notes<span class=\"sy1\">,</span> LENgth<span class=\"sy1\">=</span>Lnotes<span class=\"br0\">)</span><br/>  <span class=\"kw1\">IF</span><span class=\"br0\">(</span> Lnotes <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">WINDOW</span><span class=\"br0\">(</span>WINdowhandle<span class=\"sy1\">=</span>hdl<span class=\"sy1\">,</span> TItle<span class=\"sy1\">=</span>notes<span class=\"br0\">)</span><br/>    <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"sy1\">=</span><span class=\"st0\">\"?Y\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Finished\u00a0?\"</span><br/>  <span class=\"kw1\">ENDIF</span><br/><span class=\"kw1\">ELSE</span><br/>  <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>txt<span class=\"sy1\">,</span> Format<span class=\"sy1\">=</span><span class=\"st0\">\"UWWW CCYY-MM-DD HH:mm:SS, A\"</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy2\">$</span>CRLF<span class=\"sy1\">//</span><span class=\"sy2\">$</span>TAB<span class=\"sy1\">//</span>TRIM<span class=\"br0\">(</span><span class=\"kw1\">$CMD_LINE</span><span class=\"br0\">)</span><span class=\"sy1\">//</span><span class=\"sy2\">$</span>CRLF<br/>  <span class=\"kw1\">OPEN</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>notes<span class=\"sy1\">,</span> APPend<span class=\"br0\">)</span><br/>  <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>notes<span class=\"sy1\">,</span> CLoSe<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> txt<br/><span class=\"kw1\">ENDIF</span><br/>\u00a0<br/><span class=\"kw1\">ALARM</span><span class=\"br0\">(</span><span class=\"nu0\">999</span><span class=\"br0\">)</span> <span class=\"co1\">! quit HicEst immediately</span></pre>"}, {"lang": "Icon and Unicon", "loc": 22, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> write_out_notes <span class=\"br0\">(</span>filename<span class=\"br0\">)</span><br/>  file <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span> <span class=\"br0\">(</span>filename<span class=\"sy1\">,</span> <span class=\"st0\">\"rt\"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span> <span class=\"br0\">(</span><span class=\"st0\">\"no notes file yet\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>file<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> add_to_notes <span class=\"br0\">(</span>filename<span class=\"sy1\">,</span> strs<span class=\"br0\">)</span><br/>  file <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span> <span class=\"br0\">(</span>filename<span class=\"sy1\">,</span> <span class=\"st0\">\"at\"</span><span class=\"br0\">)</span>  <span class=\"sy1\">|</span> <span class=\"co1\"># append to file if it exists</span><br/>          <span class=\"kw4\">open</span> <span class=\"br0\">(</span>filename<span class=\"sy1\">,</span> <span class=\"st0\">\"cat\"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"co1\"># create the file if not there</span><br/>          <span class=\"kw4\">stop</span> <span class=\"br0\">(</span><span class=\"st0\">\"unable to open \"</span> <span class=\"sy1\">||</span> filename<span class=\"br0\">)</span><br/>  <span class=\"kw4\">writes</span> <span class=\"br0\">(</span>file<span class=\"sy1\">,</span> <span class=\"kw4\">ctime</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">now</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span>file<span class=\"sy1\">,</span> <span class=\"sy1\">!</span>strs <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>file<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>  notes_file <span class=\"sy1\">:=</span> <span class=\"st0\">\"notes.txt\"</span><br/>  <span class=\"kw1\">if</span> <span class=\"sy1\">*</span><span class=\"kw4\">args</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <br/>    <span class=\"kw1\">then</span> write_out_notes <span class=\"br0\">(</span>notes_file<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> add_to_notes <span class=\"br0\">(</span>notes_file<span class=\"sy1\">,</span> <span class=\"kw4\">args</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 13, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'files strings'</span><br/>\u00a0<br/>notes=: monad define<br/> <span class=\"kw1\">if.</span> #<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>   now=. LF ,~ <span class=\"nu0\">6</span>!:<span class=\"nu0\">0</span> <span class=\"st_h\">'hh:mm:ss DD/MM/YYYY'</span><br/>   <span class=\"st_h\">'notes.txt'</span> fappend~ now, LF ,~ TAB, <span class=\"st_h\">' '</span> joinstring <span class=\"kw2\">y</span><br/> <span class=\"kw1\">elseif.</span> -. <span class=\"nu0\">_1</span> -: txt=. fread <span class=\"st_h\">'notes.txt'</span> <span class=\"kw1\">do.</span><br/>   smoutput txt<br/> <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>notes <span class=\"nu0\">2</span>}.ARGV<br/>exit <span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 21, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.channels.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Date</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TakeNotes <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintStream</span></a> ps <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintStream</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afileoutputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileOutputStream</span></a><span class=\"br0\">(</span><span class=\"st0\">\"notes.txt\"</span>, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ps.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adate+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Date</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ps.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> args.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                ps.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> args<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ps.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ps.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            FileChannel fc <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afileinputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileInputStream</span></a><span class=\"br0\">(</span><span class=\"st0\">\"notes.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">getChannel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            fc.<span class=\"me1\">transferTo</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, fc.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, Channels.<span class=\"me1\">newChannel</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            fc.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 26, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> notes <span class=\"sy0\">=</span> <span class=\"st0\">'NOTES.TXT'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> args <span class=\"sy0\">=</span> WScript.<span class=\"me1\">Arguments</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> fso <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ActiveXObject<span class=\"br0\">(</span><span class=\"st0\">\"Scripting.FileSystemObject\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> ForReading <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> ForWriting <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> ForAppending <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fso.<span class=\"me1\">FileExists</span><span class=\"br0\">(</span>notes<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> f <span class=\"sy0\">=</span> fso.<span class=\"me1\">OpenTextFile</span><span class=\"br0\">(</span>notes<span class=\"sy0\">,</span> ForReading<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        WScript.<span class=\"me1\">Echo</span><span class=\"br0\">(</span>f.<span class=\"me1\">ReadAll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        f.<span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> f <span class=\"sy0\">=</span> fso.<span class=\"me1\">OpenTextFile</span><span class=\"br0\">(</span>notes<span class=\"sy0\">,</span> ForAppending<span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> d <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Date</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    f.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>d.<span class=\"me1\">toLocaleString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    f.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// note that WScript.Arguments is not an array, it is a \"collection\"</span><br/>    <span class=\"co1\">// it does not have a join() method.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> args.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        f.<span class=\"me1\">Write</span><span class=\"br0\">(</span>args<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    f.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    f.<span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Date</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">text</span>.<span class=\"me1\">SimpleDateFormat</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"NOTES.TXT\"</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// create file if it doesn't exist already</span><br/>    f.<span class=\"me1\">createNewFile</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>f.<span class=\"me1\">readText</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> df <span class=\"sy0\">=</span> SimpleDateFormat<span class=\"br0\">(</span><span class=\"st0\">\"yyyy/MM/dd HH:mm:ss\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dt <span class=\"sy0\">=</span> df.<span class=\"me1\">format</span><span class=\"br0\">(</span>Date<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> notes <span class=\"sy0\">=</span> <span class=\"st0\">\"$dt<span class=\"es1\">\\n</span><span class=\"es1\">\\t</span>${args.joinToString(\"</span> <span class=\"st0\">\")}<span class=\"es1\">\\n</span>\"</span><br/>        f.<span class=\"me1\">appendText</span><span class=\"br0\">(</span>notes<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 28, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>local(<br/>\targuments\t= $argv -&gt; asarray,<br/>\tnotesfile\t= file('notes.txt')<br/>)<br/>\u00a0<br/>#arguments -&gt; removefirst<br/>\u00a0<br/>if(#arguments -&gt; size) =&gt; {<br/>\u00a0<br/>\t#notesfile -&gt; openappend<br/>\t#notesfile -&gt; dowithclose =&gt; {<br/>\t\t#notesfile -&gt; writestring(date -&gt; format(`YYYY-MM-dd HH:mm:SS`) + '\\n')<br/>\t\t#notesfile -&gt; writestring('\\t' + #arguments -&gt; join(', ') + '\\n')<br/>\t}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>else<br/>\t#notesfile -&gt; exists\u00a0? stdout(#notesfile -&gt; readstring)<br/>}&lt;lang&gt;<br/>\u00a0<br/>Called with:<br/>&lt;lang Lasso&gt;./notes \"Rosetta was here\" R\u00e4ksm\u00f6rg\u00e5s<br/>./notes First Second Last<br/>./notes<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 21, "block": "<pre class=\"lua highlighted_source\">filename <span class=\"sy0\">=</span> <span class=\"st0\">\"NOTES.TXT\"</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"sy0\">#</span>arg <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    fp <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span> filename<span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> fp <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span> fp<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"br0\">(</span> <span class=\"st0\">\"*all*\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        fp<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">else</span><br/>    fp <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span> filename<span class=\"sy0\">,</span> <span class=\"st0\">\"a+\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    fp<span class=\"sy0\">:</span><span class=\"kw3\">write</span><span class=\"br0\">(</span> <span class=\"kw3\">os.date</span><span class=\"br0\">(</span> <span class=\"st0\">\"%x\u00a0%X<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    fp<span class=\"sy0\">:</span><span class=\"kw3\">write</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>arg <span class=\"kw1\">do</span><br/>\tfp<span class=\"sy0\">:</span><span class=\"kw3\">write</span><span class=\"br0\">(</span> arg<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    fp<span class=\"sy0\">:</span><span class=\"kw3\">write</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    fp<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">If[Length[$CommandLine &lt; 11], str = OpenRead[\"NOTES.TXT\"]; <br/> Print[ReadString[str, EndOfFile]]; Close[str], <br/> str = OpenAppend[\"NOTES.TXT\"]; WriteLine[str, DateString[]]; <br/> WriteLine[str, \"\\t\" &lt;&gt; StringRiffle[$CommandLine[[11\u00a0;;]]]]; <br/> Close[str]]</pre>"}, {"lang": "MATLAB / Octave", "loc": 26, "block": "<pre class=\"matlab highlighted_source\"> <span class=\"kw1\">function</span> notes<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">)</span><br/>    <span class=\"co1\">% NOTES can be used for taking notes </span><br/>    <span class=\"co1\">% usage:</span><br/>    <span class=\"co1\">%    notes    displays the content of the file NOTES.TXT</span><br/>    <span class=\"co1\">%    notes arg1 arg2 ... </span><br/>    <span class=\"co1\">%             add the current date, time and arg# to NOTES.TXT</span><br/>    <span class=\"co1\">%</span><br/>\u00a0<br/>    filename = <span class=\"co2\">'NOTES.TXT'</span>; <br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nargin.html\"><span class=\"kw2\">nargin</span></a>==<span class=\"nu0\">0</span><br/>\tfid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span>filename,<span class=\"co2\">'rt'</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">if</span> fid&lt;<span class=\"nu0\">0</span>, <span class=\"kw1\">return</span>; <span class=\"kw1\">end</span>; <br/>\t<span class=\"kw1\">while</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feof.html\"><span class=\"kw2\">feof</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%s\\n'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fgetl.html\"><span class=\"kw2\">fgetl</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">end</span>; <br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">else</span><br/>        fid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span>filename,<span class=\"co2\">'a+'</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">if</span> fid&lt;<span class=\"nu0\">0</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span><span class=\"co2\">'cannot open\u00a0%s\\n'</span>,filename<span class=\"br0\">)</span>; <span class=\"kw1\">end</span>; <br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid, <span class=\"co2\">'%s\\n\\t%s'</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/datestr.html\"><span class=\"kw2\">datestr</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/now.html\"><span class=\"kw2\">now</span></a><span class=\"br0\">)</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">for</span> k=<span class=\"nu0\">2</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">)</span><br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid, <span class=\"co2\">',\u00a0%s'</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span>k<span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">end</span>; <br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span>fid,<span class=\"co2\">'\\n'</span><span class=\"br0\">)</span>;<br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span>;    </pre>"}, {"lang": "Mercury", "loc": 61, "block": "<pre class=\"text highlighted_source\">:- module notes.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module list, time.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    io.command_line_arguments(Args,\u00a0!IO),<br/>    ( if Args = [] then print_notes(!IO) else add_note(Args,\u00a0!IO) ).<br/>\u00a0<br/>:- pred print_notes(io::di, io::uo) is det.<br/>\u00a0<br/>print_notes(!IO)\u00a0:-<br/>   io.open_input(notes_filename, InputRes,\u00a0!IO),<br/>   (<br/>        InputRes = ok(Input),<br/>        io.input_stream_foldl_io(Input, io.write_char, WriteRes,\u00a0!IO),<br/>        (<br/>            WriteRes = ok<br/>       \u00a0;<br/>            WriteRes = error(WriteError),<br/>            print_io_error(WriteError,\u00a0!IO)<br/>        ),<br/>        io.close_input(Input,\u00a0!IO)<br/>  \u00a0;<br/>        InputRes = error(_InputError)<br/>   ).<br/>\u00a0<br/>:- pred add_note(list(string)::in, io::di, io::uo) is det.<br/>\u00a0<br/>add_note(Words,\u00a0!IO)\u00a0:-<br/>   io.open_append(notes_filename, OutputRes,\u00a0!IO),<br/>   (<br/>       OutputRes = ok(Output),<br/>       time(Time,\u00a0!IO),<br/>       io.write_string(Output, ctime(Time),\u00a0!IO),<br/>       io.write_char(Output, '\\t',\u00a0!IO),<br/>       io.write_list(Output, Words, \" \", io.write_string,\u00a0!IO),<br/>       io.nl(Output,\u00a0!IO),<br/>       io.close_output(Output,\u00a0!IO)<br/>  \u00a0;<br/>       OutputRes = error(OutputError),<br/>       print_io_error(OutputError,\u00a0!IO)<br/>   ).<br/>\u00a0<br/>:- pred print_io_error(io.error::in, io::di, io::uo) is det.<br/>\u00a0<br/>print_io_error(Error,\u00a0!IO)\u00a0:-<br/>   io.stderr_stream(Stderr,\u00a0!IO),<br/>   io.write_string(Stderr, io.error_message(Error),\u00a0!IO),<br/>   io.set_exit_status(1,\u00a0!IO).<br/>\u00a0<br/>:- func notes_filename = string.<br/>\u00a0<br/>notes_filename = \"NOTES.TXT\".<br/>\u00a0<br/>:- end_module notes.</pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\">import os, times, strutils<br/>\u00a0<br/>if paramCount() == 0:<br/>  try: stdout.write readFile(\"notes.txt\")<br/>  except IOError: discard<br/>else:<br/>  var f = open(\"notes.txt\", fmAppend)<br/>  f.writeln getTime()<br/>  f.writeln \"\\t\", commandLineParams().join(\" \")<br/>  f.close()</pre>"}, {"lang": "OCaml", "loc": 31, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#!</span> <span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env ocaml<br/><span class=\"sy0\">#</span>load <span class=\"st0\">\"unix.cma\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> notes_file <span class=\"sy0\">=</span> <span class=\"st0\">\"notes.txt\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> take_notes<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> gmt <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>gmtime <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>time<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> date <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>sprintf <span class=\"st0\">\"%d-%02d-%02d\u00a0%02d:%02d:%02d\"</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">1900</span> <span class=\"sy0\">+</span> gmt<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>tm_year<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> gmt<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>tm_mon<span class=\"br0\">)</span> gmt<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>tm_mday<br/>      gmt<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>tm_hour gmt<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>tm_min gmt<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>tm_sec<br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> oc <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_out_gen\"><span class=\"kw3\">open_out_gen</span></a> <span class=\"br0\">[</span>Open_append<span class=\"sy0\">;</span> Open_creat<span class=\"sy0\">;</span> Open_text<span class=\"br0\">]</span> 0o644 notes_file <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALoutput_string\"><span class=\"kw3\">output_string</span></a> oc <span class=\"br0\">(</span>date <span class=\"sy0\">^</span> <span class=\"st0\">\"\\t\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALoutput_string\"><span class=\"kw3\">output_string</span></a> oc <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>tl<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>to_list <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALoutput_string\"><span class=\"kw3\">output_string</span></a> oc <span class=\"st0\">\"\\n\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> dump_notes<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>file_exists notes_file<span class=\"br0\">)</span><br/>  <span class=\"kw1\">then</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprerr_endline\"><span class=\"kw3\">prerr_endline</span></a> <span class=\"st0\">\"no local notes found\"</span><span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALexit\"><span class=\"kw3\">exit</span></a> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> notes_file <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">try</span> <span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> ic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span> <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">then</span> dump_notes<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span> take_notes<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oz", "loc": 34, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">functor</span><br/><span class=\"kw1\">import</span><br/>   Application<br/>   Open<br/>   OS<br/>   System<br/><span class=\"kw1\">define</span><br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">TimeStamp</span><span class=\"br0\">}</span><br/>      N = <span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>localTime<span class=\"br0\">}</span><br/>   <span class=\"kw1\">in</span><br/>      <span class=\"br0\">(</span>1900<span class=\"sy0\">+</span>N<span class=\"sy0\">.</span>year<span class=\"br0\">)</span><span class=\"sy0\">#</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">#</span><span class=\"br0\">(</span>1<span class=\"sy0\">+</span>N<span class=\"sy0\">.</span>mon<span class=\"br0\">)</span><span class=\"sy0\">#</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">#</span>N<span class=\"sy0\">.</span>mDay<span class=\"sy0\">#</span><span class=\"st0\">\", \"</span><span class=\"sy0\">#</span>N<span class=\"sy0\">.</span>hour<span class=\"sy0\">#</span><span class=\"st0\">\":\"</span><span class=\"sy0\">#</span>N<span class=\"sy0\">.</span>min<span class=\"sy0\">#</span><span class=\"st0\">\":\"</span><span class=\"sy0\">#</span>N<span class=\"sy0\">.</span>sec<br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Join</span> X<span class=\"sy0\">|</span>Xr Sep<span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span>FoldL Xr <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Z X<span class=\"br0\">}</span> Z<span class=\"sy0\">#</span>Sep<span class=\"sy0\">#</span>X <span class=\"kw1\">end</span> X<span class=\"br0\">}</span><br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">case</span> <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>getArgs plain<span class=\"br0\">}</span><br/>   <span class=\"kw1\">of</span> nil <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">try</span><br/>         F = <span class=\"br0\">{</span>New Open<span class=\"sy0\">.</span>file init<span class=\"br0\">(</span>name:<span class=\"st0\">\"notes.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">in</span><br/>         <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo <span class=\"br0\">{</span>F read<span class=\"br0\">(</span>list:$ size:all<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>F close<span class=\"br0\">}</span><br/>      <span class=\"kw1\">catch</span> _ <span class=\"kw1\">then</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">end</span>      <br/>   <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> Args <span class=\"kw1\">then</span><br/>      F = <span class=\"br0\">{</span>New Open<span class=\"sy0\">.</span>file init<span class=\"br0\">(</span>name:<span class=\"st0\">\"notes.txt\"</span> flags:<span class=\"br0\">[</span>write text create append<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>   <span class=\"kw1\">in</span><br/>      <span class=\"br0\">{</span>F write<span class=\"br0\">(</span>vs:<span class=\"br0\">{</span>TimeStamp<span class=\"br0\">}</span><span class=\"sy0\">#</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span>F write<span class=\"br0\">(</span>vs:<span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">#</span><span class=\"br0\">{</span>Join Args <span class=\"st0\">\" \"</span><span class=\"br0\">}</span><span class=\"sy0\">#</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span>F close<span class=\"br0\">}</span><br/>   <span class=\"kw1\">end</span><br/>   <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>exit 0<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Pascal", "loc": 40, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"co2\">{$mode delphi}</span><br/><span class=\"kw1\">PROGRAM</span> notes<span class=\"sy1\">;</span><br/><span class=\"co1\">// Notes: a time-stamped command line notebook</span><br/><span class=\"co1\">// usage: &gt;notes \"note\"&lt; or &gt;notes&lt; to display contents  </span><br/><span class=\"kw1\">USES</span> Classes<span class=\"sy1\">,</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>\tNote  <span class=\"sy1\">:</span> TStringList<span class=\"sy1\">;</span><br/>\tFname <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span> <span class=\"sy3\">=</span> <span class=\"st0\">'Notes.txt'</span><span class=\"sy1\">;</span><br/>\tDtime <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\tNtext <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\tc     <span class=\"sy1\">:</span> Cardinal<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\tDTime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FormatDateTime<span class=\"br0\">(</span><span class=\"st0\">'YYYY-MM-DD-hhnn'</span><span class=\"sy1\">,</span>Now<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tNote  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">WITH</span> Note <span class=\"kw1\">DO</span> <span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">TRY</span><br/>\t\t\tLoadFromFile<span class=\"br0\">(</span>Fname<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">EXCEPT</span><br/>\t\t\tAdd<span class=\"br0\">(</span>DTime<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\tNText <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Notes.txt created.'</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"co1\">// command line args present:</span><br/>\t\t<span class=\"co1\">// add note with date &amp; time</span><br/>\t\t<span class=\"kw1\">IF</span> ParamStr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"st0\">''</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">BEGIN</span><br/>\t\t\tNText <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ParamStr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\tAdd<span class=\"br0\">(</span>DTime<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\tAdd<span class=\"br0\">(</span>NText<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\tSaveToFile<span class=\"br0\">(</span>Fname<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"co1\">// command line args absent:</span><br/>\t\t<span class=\"co1\">// display contents of notebook</span><br/>\t\t<span class=\"kw1\">END</span> <span class=\"kw1\">ELSE</span><br/>\t\t\t<span class=\"kw1\">FOR</span> c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> Count<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t\t\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>Note<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tFree<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$file</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'notes.txt'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a> NOTES<span class=\"sy0\">,</span> <span class=\"st_h\">'&gt;&gt;'</span><span class=\"sy0\">,</span> <span class=\"re0\">$file</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Can't append to file $file: $!\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> NOTES <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <a href=\"http://perldoc.perl.org/functions/localtime.html\"><span class=\"kw3\">localtime</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>@ARGV<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a> NOTES<span class=\"sy0\">,</span> <span class=\"st_h\">'&lt;'</span><span class=\"sy0\">,</span> <span class=\"re0\">$file</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Can't read file $file: $!\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re4\">&lt;NOTES&gt;</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> NOTES<span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$file</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'notes.txt'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> MAIN<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> slurp<span class=\"br0\">(</span><span class=\"re0\">$file</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> MAIN<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"re0\">@note</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$fh</span> <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"re0\">$file</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$fh</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">:</span> DateTime<span class=\"sy0\">.</span><span class=\"me1\">now</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@note</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$fh</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">constant cmd = command_line()<br/>constant filename = \"notes.txt\"<br/>integer fn<br/>object line<br/>if length(cmd)&lt;3 then<br/>    fn = open(filename,\"r\")<br/>    if fn!=-1 then<br/>        while 1 do<br/>            line = gets(fn)<br/>            if atom(line) then exit end if<br/>            puts(1,line)<br/>        end while<br/>        close(fn)<br/>    end if<br/>else<br/>    fn = open(filename,\"a\") -- if such file doesn't exist it will be created<br/>    printf(fn,\"%d-%02d-%02d\u00a0%d:%02d:%02d\\n\",date())<br/>    printf(fn,\"\\t%s\\n\",join(cmd[3..$]))<br/>    close(fn)<br/>end if</pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/picolisp /usr/lib/picolisp/lib.l<br/>\u00a0<br/>(load \"@lib/misc.l\")<br/>(if (argv)<br/>   (out \"+notes.txt\" (prinl (stamp) \"^J^I\" (glue \" \" @)))<br/>   (and (info \"notes.txt\") (in \"notes.txt\" (echo))) )<br/>(bye)</pre>"}, {"lang": "PL/I", "loc": 37, "block": "<pre class=\"text highlighted_source\">NOTES: procedure (text) options (main); /* 8 April 2014 */<br/>   declare text character (100) varying;<br/>   declare note_file file;<br/>\u00a0<br/>   on undefinedfile(note_file) go to file_does_not_exist;<br/>   open file (note_file) title ('/NOTES.TXT,recsize(100),type(text)');<br/>   revert error;<br/>\u00a0<br/>   if text = '' then<br/>      do;<br/>         on endfile (note_file) stop;<br/>\u00a0<br/>         do forever;<br/>            get file (note_file) edit (text) (L);<br/>            put skip list (text);<br/>         end;<br/>      end;<br/>   close file (note_file);<br/>   open file (note_file) output title ('/NOTES.TXT,recsize(100),type(text),append(y)');<br/>\u00a0<br/>   put file (note_file) skip list (DATETIME('DDMmmYYYY'), TIME());<br/>   put file (note_file) skip list (text);<br/>   put file (note_file) skip;<br/>\u00a0<br/>   put skip list ('Appended ' || text || ' to file');<br/>\u00a0<br/>   return;<br/>\u00a0<br/>file_does_not_exist:<br/>   revert undefinedfile (note_file);<br/>   close file (note_file);<br/>   open file (note_file) output title ('/NOTES.TXT,recsize(100),type(text)');<br/>   put file (note_file) skip list (DATETIME('DDMmmYYYY'), TIME());<br/>   put file (note_file) skip list (text);<br/>   put file (note_file) skip;<br/>   put skip list ('The file, NOTES.TXT, has been created');<br/>end NOTES;</pre>"}, {"lang": "PowerShell", "loc": 9, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$notes</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"notes.txt\"</span><br/><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$args</span></a><span class=\"br0\">)</span>.length <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"kw1\">Test-Path</span> <span class=\"re0\">$notes</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Get-Content</span> <span class=\"re0\">$notes</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">Get-Date</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Content</span> <span class=\"re0\">$notes</span><br/>    <span class=\"st0\">\"<span class=\"es0\">`t</span>\"</span> <span class=\"sy0\">+</span> <a href=\"about:blank\"><span class=\"kw6\">$args</span></a> <span class=\"sy0\">-</span>join <span class=\"st0\">\" \"</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Content</span> <span class=\"re0\">$notes</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 24, "block": "<pre class=\"purebasic highlighted_source\">#FileName<span class=\"sy0\">=</span><span class=\"st0\">\"notes.txt\"</span><br/><span class=\"kw1\">Define</span> argc<span class=\"sy0\">=</span><span class=\"kw2\">CountProgramParameters</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> argc<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,#FileName<span class=\"br0\">)</span><br/>      <span class=\"kw1\">While</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                    <span class=\"co1\">; No new notes, so present the old</span><br/>      <span class=\"kw1\">Wend</span><br/>      <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Else</span> <span class=\"co1\">; e.g. we have some arguments</span><br/>    <span class=\"kw1\">Define</span> d$<span class=\"sy0\">=</span><span class=\"kw2\">FormatDate</span><span class=\"br0\">(</span><span class=\"st0\">\"%yyyy-%mm-%dd\u00a0%hh:%ii:%ss\"</span>,<span class=\"kw2\">date</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">OpenFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,#FileName<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Define</span> args$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>      <span class=\"kw1\">While</span> argc<br/>        args$<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span><span class=\"kw2\">ProgramParameter</span><span class=\"br0\">(</span><span class=\"br0\">)</span>             <span class=\"co1\">; Read all arguments</span><br/>        argc<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Wend</span><br/>      <span class=\"kw2\">FileSeek</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"kw2\">Lof</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                         <span class=\"co1\">; Go to the end of this file</span><br/>      <span class=\"kw2\">WriteStringN</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,d$<span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span>#TAB$<span class=\"sy0\">+</span>args$<span class=\"br0\">)</span>      <span class=\"co1\">; Append date &amp; note</span><br/>      <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 12, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><span class=\"sy0\">,</span> <span class=\"kw3\">datetime</span><span class=\"sy0\">,</span> <span class=\"kw3\">shutil</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>    <span class=\"kw1\">try</span>:<br/>        <span class=\"kw1\">with</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">'notes.txt'</span><span class=\"sy0\">,</span> <span class=\"st0\">'r'</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> f:<br/>            <span class=\"kw3\">shutil</span>.<span class=\"me1\">copyfileobj</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"kw3\">sys</span>.<span class=\"me1\">stdout</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">except</span> <span class=\"kw2\">IOError</span>:<br/>        <span class=\"kw1\">pass</span><br/><span class=\"kw1\">else</span>:<br/>    <span class=\"kw1\">with</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">'notes.txt'</span><span class=\"sy0\">,</span> <span class=\"st0\">'a'</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> f:<br/>        f.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"kw3\">datetime</span>.<span class=\"kw3\">datetime</span>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">isoformat</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\n</span>\"</span>\u00a0% <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "PHP", "loc": 12, "block": "<pre class=\"php highlighted_source\">\u00a0<br/>#!/usr/bin/php<br/><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$argc</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.php.net/file_put_contents\"><span class=\"kw3\">file_put_contents</span></a><span class=\"br0\">(</span><br/>        <span class=\"st_h\">'notes.txt'</span><span class=\"sy0\">,</span> <br/>        <a href=\"http://www.php.net/date\"><span class=\"kw3\">date</span></a><span class=\"br0\">(</span><span class=\"st_h\">'r'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\t</span>\"</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array_slice\"><span class=\"kw3\">array_slice</span></a><span class=\"br0\">(</span><span class=\"re0\">$argv</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        FILE_APPEND<br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"sy0\">@</span><a href=\"http://www.php.net/readfile\"><span class=\"kw3\">readfile</span></a><span class=\"br0\">(</span><span class=\"st_h\">'notes.txt'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 12, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/env Rscript --default-packages=methods<br/>\u00a0<br/>args &lt;- commandArgs(trailingOnly=TRUE)<br/>\u00a0<br/>if (length(args) == 0) {<br/>  conn &lt;- file(\"notes.txt\", 'r')<br/>  cat(readLines(conn), sep=\"\\n\")<br/>} else {<br/>  conn &lt;- file(\"notes.txt\", 'a')<br/>  cat(file=conn, date(), \"\\n\\t\", paste(args, collapse=\" \"), \"\\n\", sep=\"\")<br/>}<br/>close(conn)</pre>"}, {"lang": "Racket", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#!/usr/bin/env racket<br/>#lang racket<br/>(define file \"NOTES.TXT\")<br/>(require racket/date)<br/>(command-line #:args notes<br/>  (if (null? notes)<br/>    (if (file-exists? file)<br/>      (call-with-input-file* file<br/>        (\u03bb(i) (copy-port i (current-output-port))))<br/>      (raise-user-error 'notes \"missing ~a file\" file))<br/>    (call-with-output-file* file #:exists 'append<br/>      (\u03bb(o) (fprintf o \"~a\\n\\t~a\\n\"<br/>                     (date-&gt;string (current-date) #t)<br/>                     (string-join notes))))))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 12, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>   Title: \"Notes\"<br/>   URL: http://rosettacode.org/wiki/Take_notes_on_the_command_line<br/>]</span><br/>\u00a0<br/>notes: <span class=\"sy0\">%</span>notes.txt<br/>\u00a0<br/><span class=\"kw2\">either</span> <span class=\"kw2\">any</span> <span class=\"br0\">[</span><span class=\"kw3\">none?</span> args: system<span class=\"sy0\">/</span>script<span class=\"sy0\">/</span>args  <span class=\"kw3\">empty?</span> args<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>   <span class=\"kw2\">if</span> <span class=\"kw3\">exists?</span> notes <span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"kw3\">read</span> notes<span class=\"br0\">]</span><br/><span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>   <span class=\"kw3\">write</span><span class=\"sy0\">/</span>binary<span class=\"sy0\">/</span><span class=\"kw3\">append</span> notes <span class=\"kw3\">rejoin</span> <span class=\"br0\">[</span><span class=\"kw3\">now</span> lf tab args lf<span class=\"br0\">]</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 15, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  implements the  \"NOTES\"  command  (append text to a file from the C.L.).*/</span><br/>timestamp=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">date</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">11</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"kw6\">date</span><span class=\"br0\">(</span><span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*create a (current) date &amp; time stamp.*/</span><br/>nFID = <span class=\"st0\">'NOTES.TXT'</span>                               <span class=\"coMULTI\">/*the  fileID  of the  \"notes\"  file.  */</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"st0\">'f2'</span>x==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> tab=<span class=\"st0\">\"05\"</span>x                      <span class=\"coMULTI\">/*this is an EBCDIC system.            */</span><br/>             <span class=\"kw3\">else</span> tab=<span class=\"st0\">\"09\"</span>x                      <span class=\"coMULTI\">/*  \"   \"  \"  ASCII    \"               */</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>nFID<span class=\"br0\">)</span>          <span class=\"coMULTI\">/*No arguments?  Then display the file.*/</span><br/>                  <span class=\"kw1\">say</span> <span class=\"kw2\">linein</span><span class=\"br0\">(</span>Nfid<span class=\"br0\">)</span>               <span class=\"coMULTI\">/*display  a  line of file \u2500\u2500\u25ba screen. */</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span><br/>             <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>                  <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> nFID,timestamp    <span class=\"coMULTI\">/*append the timestamp to \"notes\" file.*/</span><br/>                  <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> nFID,tab<span class=\"sy0\">||</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*   \"    \"     text    \"    \"      \"  */</span><br/>                  <span class=\"kw3\">end</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">notes = <span class=\"st0\">'NOTES.TXT'</span><br/><span class=\"kw1\">if</span> ARGV.<span class=\"me1\">empty</span>?<br/>  <span class=\"kw4\">File</span>.<span class=\"me1\">copy_stream</span><span class=\"br0\">(</span>notes, <span class=\"re0\">$stdout</span><span class=\"br0\">)</span> <span class=\"kw1\">rescue</span> <span class=\"kw2\">nil</span><br/><span class=\"kw1\">else</span><br/>  <span class=\"kw4\">File</span>.<span class=\"kw3\">open</span><span class=\"br0\">(</span>notes, <span class=\"st0\">'a'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>file<span class=\"sy0\">|</span> file.<span class=\"kw3\">puts</span> <span class=\"st0\">\"%s<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"kw4\">Time</span>.<span class=\"me1\">now</span>, ARGV.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 44, "block": "<pre class=\"text highlighted_source\">extern crate chrono;<br/>\u00a0<br/>use std::fs::OpenOptions;<br/>use std::io::{self, BufReader, BufWriter};<br/>use std::io::prelude::*;<br/>use std::env;<br/>\u00a0<br/>const FILENAME: &amp;str = \"NOTES.TXT\";<br/>\u00a0<br/>fn show_notes() -&gt; Result&lt;(), io::Error&gt; {<br/>    let file = OpenOptions::new()<br/>        .read(true)<br/>        .create(true) // create the file if not found<br/>        .write(true) // necessary to create the file<br/>        .open(FILENAME)?;<br/>    let mut buf_reader = BufReader::new(file);<br/>    let mut contents = String::new();<br/>    buf_reader.read_to_string(&amp;mut contents)?;<br/>    println!(\"{}\", contents);<br/>    Ok(())<br/>}<br/>\u00a0<br/>fn add_to_notes(note: &amp;str) -&gt; Result&lt;(), io::Error&gt; {<br/>    let file = OpenOptions::new()<br/>        .append(true) // disables overwriting, writes to the end of the file<br/>        .create(true)<br/>        .open(FILENAME)?;<br/>    let mut buf_writer = BufWriter::new(file);<br/>\u00a0<br/>    let date_and_time = chrono::Local::now();<br/>    writeln!(buf_writer, \"{}\", date_and_time)?;<br/>\u00a0<br/>    writeln!(buf_writer, \"\\t{}\", note)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let note = env::args().skip(1).collect::&lt;Vec&lt;_&gt;&gt;();<br/>\u00a0<br/>    if note.is_empty() {<br/>        show_notes().expect(\"failed to print NOTES.TXT\");<br/>    } else {<br/>        add_to_notes(&amp;note.join(\" \")).expect(\"failed to write to NOTES.TXT\");<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"br0\">{</span> FileNotFoundException, FileOutputStream, PrintStream <span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">time</span>.<span class=\"me1\">LocalDateTime</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TakeNotes <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> notesFileName <span class=\"sy0\">=</span> <span class=\"st0\">\"notes.txt\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ps <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> PrintStream<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> FileOutputStream<span class=\"br0\">(</span>notesFileName, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    ps.<span class=\"me1\">println</span><span class=\"br0\">(</span>LocalDateTime.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + args.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\t</span>\"</span>, <span class=\"st0\">\" \"</span>, <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    ps.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>    io.<span class=\"me1\">Source</span>.<span class=\"me1\">fromFile</span><span class=\"br0\">(</span>notesFileName<span class=\"br0\">)</span>.<span class=\"me1\">getLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>println<span class=\"br0\">)</span> <br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> e<span class=\"sy0\">:</span> FileNotFoundException <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>e.<span class=\"me1\">getLocalizedMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> e<span class=\"sy0\">:</span> Throwable <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"Some other exception type:\"</span><span class=\"br0\">)</span><br/>      e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 20, "block": "<pre class=\"scheme highlighted_source\">#lang racket<br/><span class=\"br0\">(</span>require racket<span class=\"sy0\">/</span>date<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>notes<span class=\"sy0\">*</span> <span class=\"st0\">\"NOTES.TXT\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>a <span class=\"br0\">(</span>vector<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>current<span class=\"sy0\">-</span>command<span class=\"sy0\">-</span>line<span class=\"sy0\">-</span>arguments<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">(</span>empty? a<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>with<span class=\"sy0\">-</span>handlers <span class=\"br0\">(</span><span class=\"br0\">[</span>exn:fail? void<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">call-with-input-file</span> <span class=\"sy0\">*</span>notes<span class=\"sy0\">*</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>fi<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>copy<span class=\"sy0\">-</span>port fi <span class=\"br0\">(</span><span class=\"kw1\">current-output-port</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"kw1\">else</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">call-with-output-file</span> <span class=\"sy0\">*</span>notes<span class=\"sy0\">*</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>fo<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>ln <span class=\"br0\">(</span>apply <span class=\"kw1\">string-append</span> <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>between a <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">[</span>dt <span class=\"br0\">(</span>date<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>current<span class=\"sy0\">-</span>date<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>fprintf fo <span class=\"st0\">\"~a~n<span class=\"es0\">\\t</span>~a~n\"</span> dt ln<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       #:mode 'text #:exists '<span class=\"kw1\">append</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 23, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>$ include \"getf.s7i\";<br/>$ include \"time.s7i\";<br/>\u00a0<br/>const string: noteFileName is \"NOTES.TXT\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var file: note is STD_NULL;<br/>  begin<br/>    if length(argv(PROGRAM)) = 0 then<br/>      # write NOTES.TXT<br/>      write(getf(noteFileName));<br/>    else<br/>      # Write date &amp; time to NOTES.TXT, and then arguments<br/>      note\u00a0:= open(noteFileName, \"a\");<br/>      if note &lt;&gt; STD_NULL then<br/>        writeln(note, truncToSecond(time(NOW)));<br/>        writeln(note, \"\\t\" &lt;&amp; join(argv(PROGRAM), \" \"));<br/>        close(note);<br/>      end if;<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">var file = <span class=\"sy0\">%</span>f<span class=\"st0\">'notes.txt'</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>ARGV.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var fh = file.<span class=\"me1\">open_a</span><br/>    fh.<span class=\"me1\">say</span><span class=\"br0\">(</span><span class=\"kw4\">Time</span>.<span class=\"me1\">local</span>.<span class=\"me1\">ctime</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> ARGV.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    fh.<span class=\"me1\">close</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    var fh = file.<span class=\"me1\">open_r</span><br/>    fh <span class=\"sy0\">&amp;&amp;</span> fh.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SNOBOL4", "loc": 12, "block": "<pre class=\"text highlighted_source\">#! /usr/local/bin/snobol4 -b<br/>\ta = 2\u00a0;* skip '-b' parameter<br/>\tnotefile = \"notes.txt\"<br/>while \targs = args host(2,a = a + 1) \" \"\t\t:s(while)<br/>\tident(args)\t:f(append)<br/>noparms\tinput(.notes,io_findunit(),,notefile)\t\t:s(display)f(end)<br/>display\toutput = notes\t\t\t\t\t:s(display)<br/>\tendfile(notes)\t\t\t\t\t:(end)<br/>append\toutput(.notes,io_findunit(),\"A\",notefile)\t:f(end)<br/>\tnotes = date()<br/>\tnotes = char(9) args<br/>end</pre>"}, {"lang": "Swift", "loc": 41, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let args = Process.arguments<br/>let manager = NSFileManager()<br/>let currentPath = manager.currentDirectoryPath<br/>var err:NSError?<br/>\u00a0<br/>// Create file if it doesn't exist<br/>if\u00a0!manager.fileExistsAtPath(currentPath + \"/notes.txt\") {<br/>    println(\"notes.txt doesn't exist\")<br/>    manager.createFileAtPath(currentPath + \"/notes.txt\", contents: nil, attributes: nil)<br/>}<br/>\u00a0<br/>// handler is what is used to write to the file<br/>let handler = NSFileHandle(forUpdatingAtPath: currentPath + \"/notes.txt\")<br/>\u00a0<br/>// Print the file if there are no args<br/>if args.count == 1 {<br/>    let str = NSString(contentsOfFile: currentPath + \"/notes.txt\", encoding: NSUTF8StringEncoding, error: &amp;err)<br/>    println(str!)<br/>    exit(0)<br/>}<br/>\u00a0<br/>let time = NSDate()<br/>let format = NSDateFormatter()<br/>let timeData = (format.stringFromDate(time) + \"\\n\").dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)<br/>format.dateFormat = \"yyyy.MM.dd 'at' HH:mm:ss zzz\"<br/>\u00a0<br/>// We're writing to the end of the file<br/>handler?.seekToEndOfFile()<br/>handler?.writeData(timeData!)<br/>\u00a0<br/>var str = \"\\t\"<br/>for i in 1..&lt;args.count {<br/>    str += args[i] + \" \"<br/>}<br/>\u00a0<br/>str += \"\\n\"<br/>\u00a0<br/>let strData = str.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)<br/>handler?.writeData(strData!)</pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Make it easier to change the name of the notes file</span><br/><span class=\"kw1\">set</span> notefile notes.txt<br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"kw2\"><span class=\"re0\">$argc</span></span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Write a message to the file</span><br/>    <span class=\"kw1\">set</span> msg <span class=\"br0\">[</span><span class=\"kw2\">clock</span> <span class=\"kw2\">format</span> <span class=\"br0\">[</span><span class=\"kw2\">clock</span> seconds<span class=\"br0\">]</span><span class=\"br0\">]</span>\\n\\t<span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"kw2\"><span class=\"re0\">$argv</span></span> <span class=\"st0\">\" \"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$notefile</span> a<span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"re0\">$f</span> <span class=\"re0\">$msg</span><br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Print the contents of the file</span><br/>    <span class=\"kw1\">catch</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$notefile</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">fcopy</span> <span class=\"re0\">$f</span> stdout<br/>\t<span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 8, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#</span><br/><span class=\"re2\">NOTES</span>=<span class=\"re1\">$HOME</span><span class=\"sy0\">/</span>notes.txt<br/><span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re4\">$#</span> <span class=\"re5\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>\u00a0; <span class=\"kw1\">then</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-r</span>  <span class=\"re1\">$NOTES</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">more</span> <span class=\"re1\">$NOTES</span><br/><span class=\"kw1\">else</span><br/>  <span class=\"kw2\">date</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"re1\">$NOTES</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"  $*\"</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"re1\">$NOTES</span><br/><span class=\"kw1\">fi</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 19, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">IO</span><br/>\u00a0<br/><span class=\"kw1\">Module</span> Notes<br/>    <span class=\"kw1\">Function</span> Main<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> cmdArgs<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">Try</span><br/>            <span class=\"kw1\">If</span> cmdArgs<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">Using</span> sr <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> StreamReader<span class=\"br0\">(</span><span class=\"st0\">\"NOTES.TXT\"</span><span class=\"br0\">)</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sr<span class=\"sy0\">.</span><span class=\"me1\">ReadToEnd</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">Using</span><br/>            <span class=\"kw1\">Else</span><br/>                <span class=\"kw1\">Using</span> sw <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> StreamWriter<span class=\"br0\">(</span><span class=\"st0\">\"NOTES.TXT\"</span>, <span class=\"kw1\">True</span><span class=\"br0\">)</span><br/>                    sw<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw2\">Date</span><span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    sw<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}{1}\"</span>, ControlChars<span class=\"sy0\">.</span><span class=\"me1\">Tab</span>, <span class=\"kw2\">String</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=JOIN+site:msdn.microsoft.com\"><span class=\"kw7\">Join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, cmdArgs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">Using</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Catch</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">Try</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">const notesName=\"NOTES.TXT\";<br/>args:=vm.arglist;<br/>if (not args) <br/>   { try{ File(notesName).read(*).text.print(); } catch{println(\"no file\")} }<br/>else{<br/>   f:=File(notesName,\"a+\");<br/>   f.writeln(Time.Date.ctime(),\"\\n\\t\",args.concat(\" \"));<br/>   f.close();<br/>}</pre>"}]}