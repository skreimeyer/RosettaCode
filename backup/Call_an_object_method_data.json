{"task": "Call_an_object_method", "blocks": [{"lang": "ActionScript", "loc": 5, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"co1\">// Static</span><br/>MyClass.<span class=\"me1\">method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">// Instance</span><br/>myInstance.<span class=\"me1\">method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 8, "block": "<pre class=\"ada highlighted_source\">   <span class=\"kw3\">package</span> My_Class <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">type</span> Object <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">private</span>;<br/>      <span class=\"kw3\">procedure</span> Primitive<span class=\"br0\">(</span>Self: Object<span class=\"br0\">)</span>; <span class=\"co1\">-- primitive subprogram</span><br/>      <span class=\"kw3\">procedure</span> Dynamic<span class=\"br0\">(</span>Self: Object'Class<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">procedure</span> Static;<br/>   <span class=\"kw3\">private</span><br/>      <span class=\"kw3\">type</span> Object <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">null</span> <span class=\"kw3\">record</span>;<br/>   <span class=\"kw1\">end</span> My_Class;</pre>"}, {"lang": "Apex", "loc": 5, "block": "<pre class=\"java highlighted_source\"><span class=\"co1\">// Static</span><br/>MyClass.<span class=\"me1\">method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Instance</span><br/>myInstance.<span class=\"me1\">method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "AutoHotkey", "loc": 10, "block": "<pre class=\"ahk highlighted_source\">class myClass<br/><span class=\"br0\">{</span><br/>\tMethod<span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% SomeParameter<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>myClass<span class=\"sy0\">.</span>method<span class=\"br0\">(</span><span class=\"st0\">\"hi\"</span><span class=\"br0\">)</span><br/>myInstance <span class=\"sy0\">:=</span> new myClass<br/>myInstance<span class=\"sy0\">.</span>Method<span class=\"br0\">(</span><span class=\"st0\">\"bye\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Bracmat", "loc": 13, "block": "<pre class=\"text highlighted_source\">( ( myClass<br/>  =   (name=aClass)<br/>      ( Method<br/>      = .out$(str$(\"Output from \"\u00a0!(its.name) \": \"\u00a0!arg))<br/>      )<br/>      (new=.!arg:?(its.name))<br/>  )<br/>&amp; (myClass.Method)$\"Example of calling a 'class' method\"<br/>&amp; new$(myClass,object1):?MyObject<br/>&amp; (MyObject..Method)$\"Example of calling an instance method\"<br/>&amp;\u00a0!MyObject:?Alias<br/>&amp; (Alias..Method)$\"Example of calling an instance method from an alias\"<br/>);</pre>"}, {"lang": "ChucK", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>MyClass myClassObject;<br/>myClassObject.myFunction(some parameter);<br/>\u00a0</pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// Static</span><br/>MyClass<span class=\"sy4\">::</span><span class=\"me2\">method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// Instance</span><br/>myInstance.<span class=\"me1\">method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// Pointer</span><br/>MyPointer<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>method<span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0</pre>"}, {"lang": "C_sharp", "loc": 5, "block": "<pre class=\"csharp highlighted_source\"><span class=\"co1\">// Static</span><br/>MyClass<span class=\"sy0\">.</span><span class=\"me1\">Method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Instance</span><br/>myInstance<span class=\"sy0\">.</span><span class=\"me1\">Method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>Long<span class=\"sy0\">/</span>toHexString <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"co1\">; use forward slash for static methods</span><br/><span class=\"br0\">(</span>System<span class=\"sy0\">/</span>currentTimeMillis<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">.</span>equals <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"co1\">; use dot operator to call instance methods</span><br/><span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>equals <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; alternative style</span></pre>"}, {"lang": "COBOL", "loc": 7, "block": "<pre class=\"cobol highlighted_source\"><span class=\"co1\">*&gt; INVOKE</span><br/>INVOKE FooClass <span class=\"st0\">\"someMethod\"</span> RETURNING bar        *&gt; Factory object<br/>INVOKE foo-instance <span class=\"st0\">\"anotherMethod\"</span> RETURNING bar *&gt; Instance object<br/>\u00a0<br/><span class=\"co1\">*&gt; Inline method invocation</span><br/><span class=\"kw2\">MOVE</span> FooClass::<span class=\"st0\">\"someMethod\"</span> <span class=\"kw2\">TO</span> bar        *&gt; Factory object<br/><span class=\"kw2\">MOVE</span> foo-instance::<span class=\"st0\">\"anotherMethod\"</span> <span class=\"kw2\">TO</span> bar *&gt; Instance object</pre>"}, {"lang": "CoffeeScript", "loc": 9, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"kw3\">class</span> Foo<br/>    <span class=\"sy0\">@</span>staticMethod<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'Bar'</span><br/>\u00a0<br/>    instanceMethod<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'Baz'</span><br/>\u00a0<br/>foo = <span class=\"kw3\">new</span> Foo<br/>\u00a0<br/>foo.<span class=\"me1\">instanceMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">#=&gt; 'Baz'</span><br/>Foo.<span class=\"me1\">staticMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">#=&gt; 'Bar'</span></pre>"}, {"lang": "Common Lisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defclass my-class <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>x<br/>    <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> get-x  <span class=\"co1\">;; getter function</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">x</span>      <span class=\"co1\">;; arg name </span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;; initial value</span><br/>\u00a0<br/><span class=\"co1\">;; declaring a public class method</span><br/><span class=\"br0\">(</span>defmethod square-x <span class=\"br0\">(</span><span class=\"br0\">(</span>class-instance my-class<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* <span class=\"br0\">(</span>get-x class-instance<span class=\"br0\">)</span> <span class=\"br0\">(</span>get-x class-instance<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; create an instance of my-class</span><br/><span class=\"br0\">(</span>defvar *instance*<br/>  <span class=\"br0\">(</span>make-instance 'my-class <span class=\"sy0\">:</span><span class=\"me1\">x</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"Value of x: ~a~%\"</span> <span class=\"br0\">(</span>get-x *instance*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"Value of x^2: ~a~%\"</span> <span class=\"br0\">(</span>square-x *instance*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 37, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">struct</span> Cat <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> staticMethod<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> dynamicMethod<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Never virtual.</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"Mew!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Dog <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> staticMethod<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> dynamicMethod<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Virtual method.</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"Woof!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Static methods calls:</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>Cat.<span class=\"me1\">staticMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>Dog.<span class=\"me1\">staticMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Cat c<span class=\"sy0\">;</span> <span class=\"co1\">// This is a value on the stack.</span><br/>    Dog d<span class=\"sy0\">;</span> <span class=\"co1\">// This is just a reference, set to null.</span><br/>\u00a0<br/>    <span class=\"co1\">// Other static method calls, discouraged:</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>c.<span class=\"me1\">staticMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>d.<span class=\"me1\">staticMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Instance method calls:</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>c.<span class=\"me1\">dynamicMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Mew!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    d <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Dog<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>d.<span class=\"me1\">dynamicMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Woof!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\">someObject.<span class=\"me1\">someMethod</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span></pre>"}, {"lang": "Elena", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    console printLine(\"Hello\",\" \",\"World!\").<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>defmodule ObjectCall do<br/>  def new() do<br/>    spawn_link(fn -&gt; loop end)<br/>  end<br/>\u00a0<br/>  defp loop do<br/>    receive do<br/>      {:concat, {caller, [str1, str2]}} -&gt;<br/>        result = str1 &lt;&gt; str2<br/>        send caller, {:ok, result}<br/>        loop<br/>    end<br/>  end<br/>\u00a0<br/>  def concat(obj, str1, str2) do<br/>    send obj, {:concat, {self(), [str1, str2]}}<br/>\u00a0<br/>    receive do<br/>      {:ok, result} -&gt;<br/>        result<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>obj = ObjectCall.new()<br/>\u00a0<br/>IO.puts(obj |&gt; ObjectCall.concat(\"Hello \", \"World!\"))<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 40, "block": "<pre class=\"text highlighted_source\">include lib/compare.4th<br/>include 4pp/lib/foos.4pp<br/>\u00a0<br/>[ASSERT]                               \\ enable assertions<br/>\u00a0<br/>:: Cat<br/>   class<br/>     method: dynamicCat                \\ virtual method<br/>   end-class {<br/>\u00a0<br/>   \u00a0:static staticCat { 2 }\u00a0;          \\ static method<br/>   \u00a0:method { s\" Mew!\" }\u00a0; defines dynamicCat<br/>  }                                    \\ for unrelated classes,<br/>;                                      \\ method names have to differ<br/>\u00a0<br/>:: Dog<br/>   class<br/>     method: dynamicDog                \\ virtual method<br/>   end-class {<br/>\u00a0<br/>   \u00a0:static staticDog { 5 }\u00a0;<br/>   \u00a0:method { s\" Woof!\" }\u00a0; defines dynamicDog<br/>  }                                    \\ for unrelated classes,<br/>;                                      \\ method names have to differ<br/>\u00a0<br/>static Cat c                           \\ create two static objects<br/>static Dog d<br/>\u00a0<br/>: main<br/>  assert( class -&gt; staticCat 2 = )     \\ check for valid method return<br/>  assert( class -&gt; staticDog 5 = )     \\ of a static method<br/>\u00a0<br/>  assert( c -&gt; staticCat 2 = )         \\ check for valid method return<br/>  assert( d -&gt; staticDog 5 = )         \\ of a static method<br/>\u00a0<br/>  assert( c =&gt; dynamicCat s\" Mew!\"  compare 0= )<br/>  assert( d =&gt; dynamicDog s\" Woof!\" compare 0= )<br/>;                                      \\ same for dynamic methods<br/>\u00a0<br/>main</pre>"}, {"lang": "Fortran", "loc": 17, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">! type declaration</span><br/><span class=\"kw3\">type</span> my_type<br/> <span class=\"kw1\">contains</span><br/><span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">method1</span><br/><span class=\"kw1\">procedure</span>, pass, <span class=\"kw3\">pointer</span> <span class=\"sy0\">::</span> <span class=\"me2\">method2</span><br/><span class=\"kw1\">end</span> <span class=\"kw3\">type</span> my_type<br/>\u00a0<br/><span class=\"co1\">! declare object of type my_type</span><br/><span class=\"kw3\">type</span><span class=\"br0\">(</span>my_type<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">mytype_object</span><br/>\u00a0<br/><span class=\"co1\">!static call</span><br/> <span class=\"kw1\">call</span> mytype_object<span class=\"sy0\">%</span>method1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">! call method1 defined as subroutine</span><br/><span class=\"co1\">!instance?</span><br/> mytype_object<span class=\"sy0\">%</span>method2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">! call method2 defined as function</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 26, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> MyType<br/>  <span class=\"kw1\">Public</span>:<br/>    <span class=\"kw1\">Declare</span> <span class=\"kw1\">Sub</span> InstanceMethod<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Declare</span> <span class=\"kw1\">Static</span> <span class=\"kw1\">Sub</span> StaticMethod<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Private</span>:<br/>    dummy_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"co1\">' types cannot be empty in FB</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> MyType.<span class=\"me1\">InstanceMethod</span><span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> s<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Static</span> <span class=\"kw1\">Sub</span> MyType.<span class=\"me1\">StaticMethod</span><span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> s<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> t <span class=\"kw1\">As</span> MyType<br/>t.<span class=\"me1\">InstanceMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello world!\"</span><span class=\"br0\">)</span><br/>MyType.<span class=\"me1\">Staticmethod</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello static world!\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit the program\"</span><br/><span class=\"kw1\">Sleep</span> <br/>\u00a0</pre>"}, {"lang": "Go", "loc": 29, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">type</span> Foo <span class=\"kw4\">int</span> <span class=\"co1\">// some custom type</span><br/>\u00a0<br/><span class=\"co1\">// method on the type itself; can be called on that type or its pointer</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self Foo<span class=\"sy1\">)</span> ValueMethod<span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// method on the pointer to the type; can be called on pointers</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self <span class=\"sy3\">*</span>Foo<span class=\"sy1\">)</span> PointerMethod<span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <span class=\"sy1\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">var</span> myValue Foo<br/><span class=\"kw1\">var</span> myPointer <span class=\"sy3\">*</span>Foo <span class=\"sy2\">=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>Foo<span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// Calling value method on value</span><br/>myValue<span class=\"sy3\">.</span><span class=\"me1\">ValueMethod</span><span class=\"sy1\">(</span>someParameter<span class=\"sy1\">)</span><br/><span class=\"co1\">// Calling pointer method on pointer</span><br/>myPointer<span class=\"sy3\">.</span><span class=\"me1\">PointerMethod</span><span class=\"sy1\">(</span>someParameter<span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// Value methods can always be called on pointers</span><br/><span class=\"co1\">// equivalent to (*myPointer).ValueMethod(someParameter)</span><br/>myPointer<span class=\"sy3\">.</span><span class=\"me1\">ValueMethod</span><span class=\"sy1\">(</span>someParameter<span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// In a special case, pointer methods can be called on values that are addressable (i.e. lvalues)</span><br/><span class=\"co1\">// equivalent to (&amp;myValue).PointerMethod(someParameter)</span><br/>myValue<span class=\"sy3\">.</span><span class=\"me1\">PointerMethod</span><span class=\"sy1\">(</span>someParameter<span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// You can get the method out of the type as a function, and then explicitly call it on the object</span><br/>Foo<span class=\"sy3\">.</span><span class=\"me1\">ValueMethod</span><span class=\"sy1\">(</span>myValue<span class=\"sy1\">,</span> someParameter<span class=\"sy1\">)</span><br/><span class=\"sy1\">(</span><span class=\"sy3\">*</span>Foo<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">PointerMethod</span><span class=\"sy1\">(</span>myPointer<span class=\"sy1\">,</span> someParameter<span class=\"sy1\">)</span><br/><span class=\"sy1\">(</span><span class=\"sy3\">*</span>Foo<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">ValueMethod</span><span class=\"sy1\">(</span>myPointer<span class=\"sy1\">,</span> someParameter<span class=\"sy1\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 23, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   bar <span class=\"sy0\">:=</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\"># create instance</span><br/>   bar<span class=\"sy0\">.</span><span class=\"me1\">m2</span><span class=\"br0\">(</span><span class=\"br0\">)</span>      <span class=\"co1\"># call method m2 with self=bar, an implicit first parameter</span><br/>\u00a0<br/>   foo_m1<span class=\"br0\">(</span> <span class=\"sy0\">,</span> <span class=\"st0\">\"param1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"param2\"</span><span class=\"br0\">)</span>  <span class=\"co1\"># equivalent of static class method, first (self) parameter is null</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> foo<span class=\"br0\">(</span>cp1<span class=\"sy0\">,</span>cp2<span class=\"br0\">)</span><br/>   <span class=\"kw1\">method</span> m1<span class=\"br0\">(</span>m1p1<span class=\"sy0\">,</span>m1p2<span class=\"br0\">)</span><br/>      <span class=\"kw2\">local</span> ml1<br/>      <span class=\"kw2\">static</span> ms1<br/>      ml1 <span class=\"sy0\">:=</span> m1p1<br/>      <span class=\"co1\"># do something</span><br/>      <span class=\"kw1\">return</span><br/>   <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">method</span> m2<span class=\"br0\">(</span>m2p1<span class=\"br0\">)</span><br/>      <span class=\"co1\"># do something else</span><br/>      <span class=\"kw1\">return</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">initially</span> <br/>   L <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>cp1<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">methodName_className_ parameters</pre>"}, {"lang": "Java", "loc": 1, "block": "<pre class=\"java highlighted_source\">ClassWithStaticMethod.<span class=\"me1\">staticMethodName</span><span class=\"br0\">(</span>argument1, argument2<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//for methods with no arguments, use empty parentheses</span></pre>"}, {"lang": "JavaScript", "loc": 1, "block": "<pre class=\"javascript highlighted_source\">x.<span class=\"me1\">y</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Kotlin", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MyClass <span class=\"br0\">{</span><br/>    fun instanceMethod<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\u00a0<br/>    companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        fun staticMethod<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mc <span class=\"sy0\">=</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    mc.<span class=\"me1\">instanceMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello instance world!\"</span><span class=\"br0\">)</span><br/>    MyClass.<span class=\"me1\">staticMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello static world!\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 94, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defmodule aquarium<br/> <span class=\"br0\">(</span>export all<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fish-class <span class=\"br0\">(</span>species<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"<br/>  This is the constructor that will be used most often, only requiring that<br/>  one pass a 'species' string.<br/>\u00a0<br/>  When the children are not defined, simply use an empty list.<br/>  \"</span><br/>  <span class=\"br0\">(</span>fish-class species <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fish-class <span class=\"br0\">(</span>species children<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"<br/>  This contructor is mostly useful as a way of abstracting out the id<br/>  generation from the larger constructor. Nothing else uses fish-class/2<br/>  besides fish-class/1, so it's not strictly necessary.<br/>\u00a0<br/>  When the id isn't know, generate one.<br/>  \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>binary <span class=\"br0\">(</span>id <span class=\"br0\">(</span>size <span class=\"nu0\">128</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">crypto</span> rand_bytes <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>formatted-id <span class=\"br0\">(</span><span class=\"kw1\">car</span><br/>                         <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">io_lib</span> format<br/>                           '<span class=\"st0\">\"~32.16.0b\"</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> id<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>fish-class species children formatted-id<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fish-class <span class=\"br0\">(</span>species children id<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"<br/>  This is the constructor used internally, once the children and fish id are<br/>  known.<br/>  \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>move-verb '<span class=\"st0\">\"swam\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>method-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">case</span> method-<span class=\"kw1\">name</span><br/>        <span class=\"br0\">(</span>'id<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span> id<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>'species<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span> species<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>'children<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span> children<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>'info<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">io</span> format<br/>              '<span class=\"st0\">\"id: ~p~nspecies: ~p~nchildren: ~p~n\"</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>get-id self<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>get-species self<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>get-children self<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>'move<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self distance<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">io</span> format<br/>              '<span class=\"st0\">\"The ~s ~s ~p feet!~n\"</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">list</span> species move-verb distance<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>'reproduce<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>child <span class=\"br0\">(</span>fish-class species<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>child-id <span class=\"br0\">(</span>get-id child<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>children-ids <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">lists</span> <span class=\"kw1\">append</span><br/>                                   <span class=\"br0\">(</span><span class=\"kw1\">list</span> children <span class=\"br0\">(</span><span class=\"kw1\">list</span> child-id<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>parent-id <span class=\"br0\">(</span>get-id self<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>parent <span class=\"br0\">(</span>fish-class species children-ids parent-id<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">list</span> parent child<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>'children-count<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">erlang</span> <span class=\"kw1\">length</span> children<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-method <span class=\"br0\">(</span>object method-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"<br/>  This is a generic function, used to call into the given object (class<br/>  instance).<br/>  \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> object method-<span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; define object methods</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-id <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'id<span class=\"br0\">)</span> object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-species <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'species<span class=\"br0\">)</span> object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-info <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'info<span class=\"br0\">)</span> object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> move <span class=\"br0\">(</span>object distance<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'move<span class=\"br0\">)</span> object distance<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> reproduce <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'reproduce<span class=\"br0\">)</span> object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-children <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'children<span class=\"br0\">)</span> object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-children-count <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'children-count<span class=\"br0\">)</span> object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 6, "block": "<pre class=\"text highlighted_source\">-- call static method<br/>script(\"MyClass\").foo()<br/>\u00a0<br/>-- call instance method<br/>obj = script(\"MyClass\").new()<br/>obj.foo()</pre>"}, {"lang": "Logtalk", "loc": 12, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"co1\">% avoid infinite metaclass regression by</span><br/><span class=\"co1\">% making the metaclass an instance of itself</span><br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(metaclass,<br/>    <span class=\"kw3\">instantiates</span>(metaclass)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(me<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    me(<span class=\"re0\">Me</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">self</span>(<span class=\"re0\">Me</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> object <span class=\"sy0\">=</span> <span class=\"br0\">{</span> name <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><span class=\"sy0\">,</span> func <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>self<span class=\"sy0\">.</span>name<span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">}</span><br/>\u00a0<br/>object<span class=\"sy0\">:</span>func<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">-- with\u00a0: sugar</span><br/>object<span class=\"sy0\">.</span>func<span class=\"br0\">(</span>object<span class=\"br0\">)</span> <span class=\"co1\">-- without\u00a0: sugar</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      \\\\ A class definition is a function which return a Group<br/>      \\\\ We can make groups and we can alter them using Group statement<br/>      \\\\ Groups may have other groups inside<br/>\u00a0<br/>      Group Alfa {<br/>      Private:<br/>            myvalue=100<br/>      Public:<br/>            Group SetValue {<br/>                  Set (x) {<br/>                        Link parent myvalue to m<br/>                        m&lt;=x<br/>                  }<br/>            }<br/>            Module MyMethod {<br/>                 Read x<br/>                 Print x*.myvalue <br/>            }<br/>      }<br/>\u00a0<br/>      Alfa.MyMethod 5 '500<br/>      Alfa.MyMethod\u00a0%x=200   ' 20000<br/>      \\\\ we can copy Alfa to Z<br/>      Z=Alfa<br/>      Z.MyMethod 5<br/>      Z.SetValue=300<br/>      Z.MyMethod 5 ' 1500     <br/>      Alfa.MyMethod 5    ' 500<br/>      Dim A(10)<br/>      A(3)=Z<br/>      A(3).MyMethod 5 '1500<br/>      A(3).SetValue=200<br/>      A(3).MyMethod 5 '1000<br/>      \\\\ get a pointer of group in A(3)<br/>      k-&gt;A(3)<br/>      k=&gt;SetValue=100<br/>      A(3).MyMethod 5 '500<br/>      \\\\ k get pointer to Alfa<br/>      k-&gt;Alfa<br/>      k=&gt;SetValue=500<br/>      Alfa.MyMethod 5 '2500<br/>      k-&gt;Z<br/>      k=&gt;MyMethod 5 ' 1500<br/>      Z.SetValue=100<br/>      k=&gt;MyMethod 5 ' 500<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\"># Static<br/>Method( obj, other, arg );</pre>"}, {"lang": "Nemerle", "loc": 5, "block": "<pre class=\"text highlighted_source\">// Static<br/>MyClass.Method(someParameter);<br/>\u00a0<br/>// Instance<br/>myInstance.Method(someParameter);</pre>"}, {"lang": "NetRexx", "loc": 1, "block": "<pre class=\"netrexx highlighted_source\">SomeClass.<span class=\"me0\">staticMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">var x = @[1, 2, 3]<br/>add(x, 4)<br/>x.add(5)</pre>"}, {"lang": "OASYS Assembler", "loc": 1, "block": "<pre class=\"text highlighted_source\">+&amp;GO</pre>"}, {"lang": "Objeck", "loc": 3, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>ClassName<span class=\"sy0\">-&gt;</span><span class=\"me1\">some_function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># call class function</span><br/>instance<span class=\"sy0\">-&gt;</span><span class=\"me1\">some_method</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># call instance method</span></pre>"}, {"lang": "Object Pascal", "loc": 6, "block": "<pre class=\"pascal highlighted_source\"><span class=\"co1\">// Static (known in Pascal as class method)</span><br/>MyClass<span class=\"sy1\">.</span><span class=\"me1\">method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// Instance</span><br/>myInstance<span class=\"sy1\">.</span><span class=\"me1\">method</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 14, "block": "<pre class=\"objc highlighted_source\"><span class=\"co2\">// Class</span><br/><span class=\"br0\">[</span>MyClass method<span class=\"sy0\">:</span>someParameter<span class=\"br0\">]</span>;<br/><span class=\"co2\">// or equivalently:</span><br/><span class=\"kw4\">id</span> foo <span class=\"sy0\">=</span> <span class=\"br0\">[</span>MyClass class<span class=\"br0\">]</span>;<br/><span class=\"br0\">[</span>foo method<span class=\"sy0\">:</span>someParameter<span class=\"br0\">]</span>;<br/>\u00a0<br/><span class=\"co2\">// Instance</span><br/><span class=\"br0\">[</span>myInstance method<span class=\"sy0\">:</span>someParameter<span class=\"br0\">]</span>;<br/>\u00a0<br/><span class=\"co2\">// Method with multiple arguments</span><br/><span class=\"br0\">[</span>myInstance methodWithRed<span class=\"sy0\">:</span>arg1 green<span class=\"sy0\">:</span>arg2 blue<span class=\"sy0\">:</span>arg3<span class=\"br0\">]</span>;<br/>\u00a0<br/><span class=\"co2\">// Method with no arguments</span><br/><span class=\"br0\">[</span>myInstance method<span class=\"br0\">]</span>;</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\">my_obj<span class=\"sy0\">#</span>my_meth params</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">1.2 sqrt</pre>"}, {"lang": "ooRexx", "loc": 30, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"kw1\">say</span> <span class=\"st0\">\"pi:\"</span> <span class=\"sy0\">.</span>circle~pi<br/>c=<span class=\"sy0\">.</span>circle~new<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"c~area:\"</span> c~area<br/><span class=\"kw1\">Do</span> r=<span class=\"nu0\">2</span> <span class=\"kw2\">To</span> <span class=\"nu0\">10</span><br/> c<span class=\"sy0\">.</span>r=<span class=\"sy0\">.</span>circle~new<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/> <span class=\"kw3\">End</span><br/><span class=\"kw1\">say</span> <span class=\"sy0\">.</span>circle~instances<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"st0\">'circles were created'</span><br/>\u00a0<br/>::class circle<br/>::method pi class <span class=\"co1\">-- a class method</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">3.14159265358979323</span><br/>\u00a0<br/>::method instances class <span class=\"co1\">-- another class method</span><br/>  <span class=\"kw1\">expose</span> in<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> a<br/>  <span class=\"kw1\">If</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">'NUM'</span> <span class=\"kw3\">Then</span> in=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">If</span> a<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>    in+=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span> in<br/>\u00a0<br/>::method init<br/>  <span class=\"kw1\">expose</span> radius<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> radius<br/>  self~class~instances<span class=\"br0\">(</span><span class=\"st0\">'x'</span><span class=\"br0\">)</span><br/>\u00a0<br/>::method area     <span class=\"co1\">-- an instance method</span><br/>  <span class=\"kw1\">expose</span> radius<br/>  <span class=\"kw1\">Say</span> self~class<br/>  <span class=\"kw1\">Say</span> self<br/>  <span class=\"kw1\">return</span> self~class~pi <span class=\"sy0\">*</span> radius <span class=\"sy0\">*</span> radius        </pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># Class method</span><br/>MyClass<span class=\"sy0\">-&gt;</span><span class=\"me1\">classMethod</span><span class=\"br0\">(</span><span class=\"re0\">$someParameter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># Equivalently using a class name</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$foo</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'MyClass'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$foo</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">classMethod</span><span class=\"br0\">(</span><span class=\"re0\">$someParameter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Instance method</span><br/><span class=\"re0\">$myInstance</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re0\">$someParameter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Calling a method with no parameters</span><br/><span class=\"re0\">$myInstance</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">anotherMethod</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Class and instance method calls are made behind the scenes by getting the function from</span><br/><span class=\"co1\"># the package and calling it on the class name or object reference explicitly</span><br/>MyClass<span class=\"sy0\">::</span><span class=\"me2\">classMethod</span><span class=\"br0\">(</span><span class=\"st_h\">'MyClass'</span><span class=\"sy0\">,</span> <span class=\"re0\">$someParameter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>MyClass<span class=\"sy0\">::</span><span class=\"me2\">method</span><span class=\"br0\">(</span><span class=\"re0\">$myInstance</span><span class=\"sy0\">,</span> <span class=\"re0\">$someParameter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 27, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Thing <span class=\"br0\">{</span> <br/>  <span class=\"kw2\">method</span> regular<span class=\"sy0\">-</span>example<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st_h\">'I haz a method'</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">multi</span> <span class=\"kw2\">method</span> multi<span class=\"sy0\">-</span>example<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st_h\">'No arguments given'</span> <span class=\"br0\">}</span><br/>  <span class=\"kw2\">multi</span> <span class=\"kw2\">method</span> multi<span class=\"sy0\">-</span>example<span class=\"br0\">(</span>Str <span class=\"re0\">$foo</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st_h\">'String given'</span> <span class=\"br0\">}</span><br/>  <span class=\"kw2\">multi</span> <span class=\"kw2\">method</span> multi<span class=\"sy0\">-</span>example<span class=\"br0\">(</span>Int <span class=\"re0\">$foo</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st_h\">'Integer given'</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># 'new' is actually a method, not a special keyword:</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$thing</span> <span class=\"sy0\">=</span> Thing<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># No arguments: parentheses are optional</span><br/><span class=\"re0\">$thing</span><span class=\"sy0\">.</span><span class=\"me1\">regular</span><span class=\"sy0\">-</span>example<span class=\"sy0\">;</span><br/><span class=\"re0\">$thing</span><span class=\"sy0\">.</span><span class=\"me1\">regular</span><span class=\"sy0\">-</span>example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$thing</span><span class=\"sy0\">.</span><span class=\"me1\">multi</span><span class=\"sy0\">-</span>example<span class=\"sy0\">;</span><br/><span class=\"re0\">$thing</span><span class=\"sy0\">.</span><span class=\"me1\">multi</span><span class=\"sy0\">-</span>example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Arguments: parentheses or colon required</span><br/><span class=\"re0\">$thing</span><span class=\"sy0\">.</span><span class=\"me1\">multi</span><span class=\"sy0\">-</span>example<span class=\"br0\">(</span><span class=\"st0\">\"This is a string\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$thing</span><span class=\"sy0\">.</span><span class=\"me1\">multi</span><span class=\"sy0\">-</span>example<span class=\"sy0\">:</span> <span class=\"st0\">\"This is a string\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$thing</span><span class=\"sy0\">.</span><span class=\"me1\">multi</span><span class=\"sy0\">-</span>example<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$thing</span><span class=\"sy0\">.</span><span class=\"me1\">multi</span><span class=\"sy0\">-</span>example<span class=\"sy0\">:</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Indirect (reverse order) method call syntax: colon required</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$foo</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Thing<span class=\"sy0\">:</span> <span class=\"sy0\">;</span><br/>multi<span class=\"sy0\">-</span>example <span class=\"re0\">$thing</span><span class=\"sy0\">:</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PHP", "loc": 9, "block": "<pre class=\"php highlighted_source\"><span class=\"co1\">// Static method</span><br/>MyClass<span class=\"sy0\">::</span><span class=\"me2\">method</span><span class=\"br0\">(</span><span class=\"re0\">$someParameter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// In PHP 5.3+, static method can be called on a string of the class name</span><br/><span class=\"re0\">$foo</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'MyClass'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$foo</span><span class=\"sy0\">::</span><span class=\"me2\">method</span><span class=\"br0\">(</span><span class=\"re0\">$someParameter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// Instance method</span><br/><span class=\"re0\">$myInstance</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re0\">$someParameter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(foo&gt; MyClass)<br/>(foo&gt; MyObject)</pre>"}, {"lang": "Pike", "loc": 4, "block": "<pre class=\"pike highlighted_source\">obj<span class=\"sy0\">-</span>&gt;method<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>obj<span class=\"br0\">[</span><span class=\"st0\">\"method\"</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>call_function<span class=\"br0\">(</span>obj<span class=\"sy0\">-</span>&gt;method<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>call_function<span class=\"br0\">(</span>obj<span class=\"br0\">[</span><span class=\"st0\">\"method\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/SQL", "loc": 27, "block": "<pre class=\"plsql highlighted_source\"><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TYPE\"><span class=\"kw1\">TYPE</span></a> myClass <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AS\"><span class=\"kw1\">AS</span></a> OBJECT <span class=\"br0\">(</span><br/>    <span class=\"co1\">-- A class needs at least one member even though we don't use it</span><br/>    dummy <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">,</span><br/>    STATIC <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> static_method <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a><span class=\"sy0\">,</span><br/>    MEMBER <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> instance_method <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TYPE\"><span class=\"kw1\">TYPE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BODY\"><span class=\"kw1\">BODY</span></a> myClass <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AS\"><span class=\"kw1\">AS</span></a><br/>    STATIC <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> static_method <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <span class=\"st0\">'Called myClass.static_method'</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> static_method<span class=\"sy0\">;</span><br/>\u00a0<br/>    MEMBER <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> instance_method <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <span class=\"st0\">'Called myClass.instance_method'</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> instance_method<span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DECLARE\"><span class=\"kw1\">DECLARE</span></a><br/>    myInstance myClass<span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>    myInstance <span class=\"sy0\">:=</span> myClass<span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DBMS_OUTPUT\"><span class=\"kw3\">DBMS_OUTPUT</span></a><span class=\"sy0\">.</span>put_line<span class=\"br0\">(</span> myClass<span class=\"sy0\">.</span>static_method<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DBMS_OUTPUT\"><span class=\"kw3\">DBMS_OUTPUT</span></a><span class=\"sy0\">.</span>put_line<span class=\"br0\">(</span> myInstance<span class=\"sy0\">.</span>instance_method<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;/</span></pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$Date</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Get-Date</span><br/><span class=\"re0\">$Date</span>.AddDays<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/><span class=\"br0\">[</span>System.Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Processing", "loc": 21, "block": "<pre class=\"text highlighted_source\">// define a rudimentary class<br/>class HelloWorld<br/>{<br/>    public static void sayHello()<br/>    {<br/>        println(\"Hello, world!\");<br/>    }<br/>    public void sayGoodbye()<br/>    {<br/>        println(\"Goodbye, cruel world!\");<br/>    }<br/>}<br/>\u00a0<br/>// call the class method<br/>HelloWorld.sayHello();<br/>\u00a0<br/>// create an instance of the class<br/>HelloWorld hello = new HelloWorld();<br/>\u00a0<br/>// and call the instance method<br/>hello.sayGoodbye();</pre>"}, {"lang": "Python", "loc": 24, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> MyClass<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>\t<span class=\"sy0\">@</span><span class=\"kw2\">classmethod</span><br/>\t<span class=\"kw1\">def</span> myClassMethod<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">pass</span><br/>\t<span class=\"sy0\">@</span><span class=\"kw2\">staticmethod</span><br/>\t<span class=\"kw1\">def</span> myStaticMethod<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">pass</span><br/>\t<span class=\"kw1\">def</span> myMethod<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">42</span> + x<br/>\u00a0<br/>myInstance <span class=\"sy0\">=</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Instance method</span><br/>myInstance.<span class=\"me1\">myMethod</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><br/><span class=\"co1\"># A method can also be retrieved as an attribute from the class, and then explicitly called on an instance:</span><br/>MyClass.<span class=\"me1\">myMethod</span><span class=\"br0\">(</span>myInstance<span class=\"sy0\">,</span> someParameter<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Class or static methods</span><br/>MyClass.<span class=\"me1\">myClassMethod</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><br/>MyClass.<span class=\"me1\">myStaticMethod</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><br/><span class=\"co1\"># You can also call class or static methods on an instance, which will simply call it on the instance's class</span><br/>myInstance.<span class=\"me1\">myClassMethod</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span><br/>myInstance.<span class=\"me1\">myStaticMethod</span><span class=\"br0\">(</span>someParameter<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">#lang racket/gui<br/>\u00a0<br/>(define timer (new timer%))<br/>(send timer start 100)</pre>"}, {"lang": "Ring", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>new point { print() }<br/>Class Point<br/>        x = 10  y = 20  z = 30<br/>        func print see x + nl + y + nl + z + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 16, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Class method</span><br/>MyClass.<span class=\"me1\">some_method</span><span class=\"br0\">(</span>some_parameter<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Class may be computed at runtime</span><br/>foo = MyClass<br/>foo.<span class=\"me1\">some_method</span><span class=\"br0\">(</span>some_parameter<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Instance method</span><br/>my_instance.<span class=\"me1\">method</span><span class=\"br0\">(</span>some_parameter<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># The parentheses are optional</span><br/>my_instance.<span class=\"me1\">method</span> some_parameter<br/>\u00a0<br/><span class=\"co1\"># Calling a method with no parameters</span><br/>my_instance.<span class=\"me1\">another_method</span></pre>"}, {"lang": "Rust", "loc": 31, "block": "<pre class=\"text highlighted_source\">struct Foo;<br/>\u00a0<br/>impl Foo {<br/>    // implementation of an instance method for struct Foo<br/>    // returning the answer to life<br/>    fn get_the_answer_to_life(&amp;self) -&gt; i32 {<br/>        42<br/>    }<br/>\u00a0<br/>    // implementation of a static method for struct Foo<br/>    // returning a new instance object<br/>    fn new() -&gt; Foo {<br/>        println!(\"Hello, world!\");<br/>        Foo // returning the new Foo object<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    // create the instance object foo,<br/>    // by calling the static method new of struct Foo<br/>    let foo = Foo::new();<br/>\u00a0<br/>    // get the answer to life <br/>    // by calling the instance method of object foo<br/>    println!(\"The answer to life is {}.\", foo.get_the_answer_to_life());<br/>\u00a0<br/>    // Note that in Rust, methods still work on references to the object.<br/>    // Rust will automatically do the appropriate dereferencing to get the method to work:<br/>    let lots_of_references = &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;foo;<br/>    println!(\"The answer to life is still {}.\" lots_of_references.get_the_answer_to_life());<br/>}</pre>"}, {"lang": "Scala", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><span class=\"coMULTI\">/* This class implicitly includes a constructor which accepts an Int and<br/> *  creates \"val variable1: Int\" with that value.<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MyClass<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> memberVal<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Acts like a getter, getter automatically generated.</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> variable2 <span class=\"sy0\">=</span> <span class=\"st0\">\"asdf\"</span> <span class=\"co1\">// Another instance variable; a public mutable this time</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">// An auxilliary constructor that instantiates with a default value</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> HelloObject <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span> <span class=\"co1\">// Not private, so getter auto-generated</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Demonstrate use of our example class.<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Call<span class=\"sy0\">_</span>an<span class=\"sy0\">_</span>object<span class=\"sy0\">_</span>method <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> MyClass<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> MyClass<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>HelloObject.<span class=\"me1\">s</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span> <span class=\"co1\">// \"Hello\" by object getterHelloObject</span><br/>  assert<span class=\"br0\">(</span>m.<span class=\"me1\">memberVal</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>n.<span class=\"me1\">memberVal</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Successfully completed without error.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> MyClass <span class=\"br0\">{</span><br/>    method foo<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"br0\">{</span> say arg <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var arg = <span class=\"nu0\">42</span>;<br/>\u00a0<br/><span class=\"co1\"># Call a class method</span><br/>MyClass.<span class=\"me1\">foo</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\"># Alternatively, using an expression for the method name</span><br/>MyClass.<span class=\"br0\">(</span><span class=\"re3\">:foo</span><span class=\"br0\">)</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\"># Create an instance</span><br/>var instance = MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\"># Instance method</span><br/>instance.<span class=\"me1\">foo</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\"># Alternatively, by using an expression for the method name</span><br/>instance.<span class=\"br0\">(</span><span class=\"re3\">:foo</span><span class=\"br0\">)</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\"># Alternatively, by asking for a method</span><br/>instance.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:foo</span><span class=\"br0\">)</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 17, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"coMULTI\">\" Class \"</span><br/><span class=\"re0\">MyClass</span> selector: <span class=\"re5\">someArgument</span> .<br/><span class=\"coMULTI\">\" or equivalently \"</span><br/><span class=\"re6\">foo</span> <span class=\"sy0\">:=</span> <span class=\"re0\">MyClass</span> .<br/><span class=\"re5\">foo</span> selector: <span class=\"re5\">someArgument</span>.<br/>\u00a0<br/><span class=\"coMULTI\">\" Instance \"</span><br/>myInstance selector: <span class=\"re5\">someArgument</span>.<br/>\u00a0<br/><span class=\"coMULTI\">\" Message with multiple arguments \"</span><br/>myInstance fooWithRed:<span class=\"re5\">arg1</span> green:<span class=\"re5\">arg2</span> blue:<span class=\"re5\">arg3</span> .<br/>\u00a0<br/><span class=\"coMULTI\">\" Message with no arguments \"</span><br/>myInstance selector.<br/>\u00a0<br/><span class=\"coMULTI\">\" Binary (operator) message\"</span><br/>myInstance + <span class=\"re5\">argument</span> .</pre>"}, {"lang": "Swift", "loc": 11, "block": "<pre class=\"text highlighted_source\">// Class<br/>MyClass.method(someParameter)<br/>// or equivalently:<br/>let foo = MyClass.self<br/>foo.method(someParameter)<br/>\u00a0<br/>// Instance<br/>myInstance.method(someParameter)<br/>\u00a0<br/>// Method with multiple arguments<br/>myInstance.method(red:arg1, green:arg2, blue:arg3)</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/><span class=\"co1\"># \"Static\" (on class object)</span><br/>MyClass mthd someParameter<br/>\u00a0<br/><span class=\"co1\"># Instance</span><br/><span class=\"re0\">$myInstance</span> mthd someParameter</pre>"}, {"lang": "Ursa", "loc": 5, "block": "<pre class=\"text highlighted_source\"># create an instance of the built-in file class<br/>decl file f<br/>\u00a0<br/># call the file.open method<br/>f.open \"filename.txt\"</pre>"}, {"lang": "VBA", "loc": 14, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Method_1(<span class=\"kw4\">Optional</span> myStr <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/><span class=\"kw4\">Dim</span> strTemp <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    <span class=\"kw3\">If</span> myStr &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span> strTemp = myStr<br/>    Debug.<span class=\"kw4\">Print</span> strTemp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw4\">Static</span> <span class=\"kw2\">Sub</span> Method_2(<span class=\"kw4\">Optional</span> myStr <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/><span class=\"kw4\">Dim</span> strTemp <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    <span class=\"kw3\">If</span> myStr &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span> strTemp = myStr<br/>    Debug.<span class=\"kw4\">Print</span> strTemp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "XLISP", "loc": 23, "block": "<pre class=\"text highlighted_source\">(DEFINE-CLASS MY-CLASS)<br/>\u00a0<br/>(DEFINE-CLASS-METHOD (MY-CLASS 'DO-SOMETHING-WITH SOME-PARAMETER)<br/>    (DISPLAY \"I am the class -- \")<br/>    (DISPLAY SELF)<br/>    (NEWLINE)<br/>    (DISPLAY \"You sent me the parameter \")<br/>    (DISPLAY SOME-PARAMETER)<br/>    (NEWLINE))<br/>\u00a0<br/>(DEFINE-METHOD (MY-CLASS 'DO-SOMETHING-WITH SOME-PARAMETER)<br/>    (DISPLAY \"I am an instance of the class --  \")<br/>    (DISPLAY SELF)<br/>    (NEWLINE)<br/>    (DISPLAY \"You sent me the parameter \")<br/>    (DISPLAY SOME-PARAMETER)<br/>    (NEWLINE))<br/>\u00a0<br/>(MY-CLASS 'DO-SOMETHING-WITH 'FOO)<br/>\u00a0<br/>(DEFINE MY-INSTANCE (MY-CLASS 'NEW))<br/>\u00a0<br/>(MY-INSTANCE 'DO-SOMETHING-WITH 'BAR)</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">class C{var v; fcn f{v}}<br/>C.f() // call function f in class C<br/>C.v=5; c2:=C();    // create new instance of C<br/>println(C.f(),\" \",c2.f()) //--&gt;5 Void<br/>C.f.isStatic //--&gt; False<br/>\u00a0<br/>class [static] D{var v=123; fcn f{v}}<br/>D.f(); D().f(); // both return 123<br/>D.f.isStatic //--&gt;False<br/>\u00a0<br/>class E{var v; fcn f{}} E.f.isStatic //--&gt;True</pre>"}]}