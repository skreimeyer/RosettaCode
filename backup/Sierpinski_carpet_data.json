{"task": "Sierpinski_carpet", "blocks": [{"lang": "Ada", "loc": 76, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Sierpinski_Carpet <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Index_Type <span class=\"kw1\">is</span> Integer <span class=\"kw3\">range</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">81</span>;<br/>   <span class=\"kw3\">type</span> Pattern_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Index_Type <span class=\"kw3\">range</span> &lt;&gt;, Index_Type <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>   Pattern\u00a0: Pattern_Array<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">81</span>,<span class=\"nu0\">1</span>..<span class=\"nu0\">81</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">Others</span> =&gt;<span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; true<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">procedure</span> Clear_Center<span class=\"br0\">(</span>P\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Pattern_Array; X1\u00a0: Index_Type; X2\u00a0: Index_Type;<br/>         Y1\u00a0: Index_Type; Y2\u00a0: Index_Type<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Xfirst\u00a0: Index_Type;<br/>      Xlast \u00a0: Index_Type;<br/>      Yfirst\u00a0: Index_Type;<br/>      Ylast \u00a0: Index_Type;<br/>      Diff  \u00a0: Integer;<br/>   <span class=\"kw1\">begin</span><br/>      Xfirst\u00a0:=<span class=\"br0\">(</span>X2 - X1 + <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">3</span> + X1;<br/>      Diff\u00a0:= Xfirst - X1;<br/>      Xlast \u00a0:= Xfirst + Diff;<br/>      Yfirst\u00a0:= <span class=\"br0\">(</span>Y2 - Y1<span class=\"br0\">)</span> / <span class=\"nu0\">3</span> + Y1;<br/>      YLast \u00a0:= YFirst + Diff;<br/>\u00a0<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> XFirst..<span class=\"me1\">XLast</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> YFirst..<span class=\"me1\">YLast</span> <span class=\"kw1\">loop</span><br/>            P<span class=\"br0\">(</span>I, J<span class=\"br0\">)</span>\u00a0:= False;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Clear_Center;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>P\u00a0: Pattern_Array<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> P'<span class=\"kw3\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> P'<span class=\"kw3\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">if</span> P<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>               Put<span class=\"br0\">(</span>'*'<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">else</span><br/>               Put<span class=\"br0\">(</span>' '<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Divide_Square<span class=\"br0\">(</span>P\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Pattern_Array; Order\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Factor\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>      X1, X2\u00a0: Index_Type;<br/>      Y1, Y2 \u00a0: Index_Type;<br/>      Division\u00a0: Index_Type;<br/>      Num_Sections\u00a0: Index_Type;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> Factor &lt; Order <span class=\"kw1\">loop</span><br/>         Num_Sections\u00a0:= <span class=\"nu0\">3</span>**Factor;<br/>         Factor\u00a0:= Factor + <span class=\"nu0\">1</span>;<br/>         X1 \u00a0:= P'First;<br/>         Division  \u00a0:= P'Last / Num_Sections;<br/>         X2\u00a0:= Division;<br/>         Y1\u00a0:= X1;<br/>         Y2\u00a0:= X2;<br/>         <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">loop</span><br/>               Clear_Center<span class=\"br0\">(</span>P, X1, X2, Y1, Y2<span class=\"br0\">)</span>;<br/>               <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> X2 = P'Last;<br/>               X1\u00a0:= X2;<br/>               X2\u00a0:= X2 + Division;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Y2 = P'Last;<br/>            Y1\u00a0:= Y2;<br/>            Y2\u00a0:= Y2 + Division;<br/>            X1\u00a0:= P'First;<br/>            X2\u00a0:= Division;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Divide_Square;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Divide_Square<span class=\"br0\">(</span>Pattern, <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   Print<span class=\"br0\">(</span>Pattern<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Sierpinski_Carpet;</pre>"}, {"lang": "ALGOL 68", "loc": 29, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> in carpet <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> in x<span class=\"sy1\">,</span> in y<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw3\">INT</span> x <span class=\"sy1\">:=</span> in x<span class=\"sy1\">,</span> y <span class=\"sy1\">:=</span> in y<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">BOOL</span> out<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> x <span class=\"sy1\">=</span> 0 <span class=\"kw16\">OR</span> y <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>            out <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span> <span class=\"kw2\">GO TO</span> stop iteration<br/>        <span class=\"kw2\">ELIF</span> x <span class=\"kw12\">MOD</span> 3 <span class=\"sy1\">=</span> 1 <span class=\"kw16\">AND</span> y <span class=\"kw12\">MOD</span> 3 <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span><br/>            out <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span> <span class=\"kw2\">GO TO</span> stop iteration<br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        x <span class=\"sy1\">%:=</span> 3<span class=\"sy1\">;</span><br/>        y <span class=\"sy1\">%:=</span> 3<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    stop iteration<span class=\"sy1\">:</span> out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> carpet <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 3 <span class=\"sy1\">**</span> n <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> 3 <span class=\"sy1\">**</span> n <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> in carpet<span class=\"br0\">(</span>i<span class=\"sy1\">-</span>1<span class=\"sy1\">,</span> j<span class=\"sy1\">-</span>1<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>                <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"* \"</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">ELSE</span><br/>                <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>carpet<span class=\"br0\">(</span>3<span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 123, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- CARPET MODEL --------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- sierpinskiCarpet\u00a0:: Int -&gt; [[Bool]]</span><br/><span class=\"kw3\">on</span> sierpinskiCarpet<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- rowStates\u00a0:: Int -&gt; [Bool]</span><br/>    <span class=\"kw3\">script</span> rowStates<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x, _, xs<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"co1\">-- cellState\u00a0:: Int -&gt; Bool</span><br/>            <span class=\"kw3\">script</span> cellState<br/>\u00a0<br/>                <span class=\"co1\">-- inCarpet\u00a0:: Int -&gt; Int -&gt; Bool</span><br/>                <span class=\"kw3\">on</span> inCarpet<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>                    <span class=\"kw3\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">or</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>                        <span class=\"kw1\">true</span><br/>                    <span class=\"kw3\">else</span><br/>                        <span class=\"kw2\">not</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"kw2\">mod</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> \u00ac<br/>                            <span class=\"br0\">(</span>y <span class=\"kw2\">mod</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> \u00ac<br/>                            inCarpet<span class=\"br0\">(</span>x <span class=\"kw2\">div</span> <span class=\"nu0\">3</span>, y <span class=\"kw2\">div</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>                <span class=\"kw3\">end</span> inCarpet<br/>\u00a0<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                    inCarpet<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span>cellState, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>rowStates, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">^</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> sierpinskiCarpet<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"co1\">-- Carpets of orders 1, 2, 3</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> strCarpets <span class=\"kw3\">to</span> \u00ac<br/>        intercalate<span class=\"br0\">(</span>linefeed <span class=\"sy0\">&amp;</span> linefeed, \u00ac<br/>            map<span class=\"br0\">(</span>showCarpet, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\"><span class=\"kw3\">set</span> <span class=\"kw2\">the</span> clipboard to</span> strCarpets<br/>\u00a0<br/>    <span class=\"kw3\">return</span> strCarpets<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- CARPET DISPLAY ------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- showCarpet\u00a0:: Int -&gt; String</span><br/><span class=\"kw3\">on</span> showCarpet<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- showRow\u00a0:: [Bool] -&gt; String</span><br/>    <span class=\"kw3\">script</span> showRow<br/>        <span class=\"co1\">-- showBool\u00a0:: Bool -&gt; String</span><br/>        <span class=\"kw3\">script</span> showBool<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>bool<span class=\"br0\">)</span><br/>                <span class=\"kw3\">if</span> bool <span class=\"kw3\">then</span><br/>                    character <span class=\"kw1\">id</span> <span class=\"nu0\">9608</span><br/>                <span class=\"kw3\">else</span><br/>                    <span class=\"st0\">\" \"</span><br/>                <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>            intercalate<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, map<span class=\"br0\">(</span><span class=\"kw3\">my</span> showBool, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    intercalate<span class=\"br0\">(</span>linefeed, map<span class=\"br0\">(</span>showRow, sierpinskiCarpet<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> showCarpet<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "Applesoft BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\"> 100 HGR<br/> 110 POKE 49234,0<br/> 120 DEF  FN M(X) = X -  INT (D * 3) *  INT (X /  INT (D * 3))<br/> 130 DE = 4<br/> 140 DI = 3 ^ DE * 3<br/> 150 FOR I = 0 TO DI - 1<br/> 160      FOR J = 0 TO DI - 1<br/> 170          FOR D = DI / 3 TO 0 STEP 0<br/> 180              IF  INT ( FN M(I) / D) = 1 AND  INT ( FN M(J) / D) = 1 THEN 200BREAK<br/> 190              D =  INT (D / 3): NEXT D<br/> 200          HCOLOR= 3 * (D = 0)<br/> 210          HPLOT J,I<br/> 220      NEXT J<br/> 230 NEXT I</pre>"}, {"lang": "Asymptote", "loc": 50, "block": "<pre class=\"asymptote highlighted_source\"><span class=\"kw2\">path</span> across<span class=\"br0\">(</span><span class=\"kw2\">path</span> p, <span class=\"kw2\">real</span> node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span><br/>        <span class=\"kw2\">point</span><span class=\"br0\">(</span>p, node <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw2\">point</span><span class=\"br0\">(</span>p, node <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"kw2\">point</span><span class=\"br0\">(</span>p, node<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">path</span> corner_subquad<span class=\"br0\">(</span><span class=\"kw2\">path</span> p, <span class=\"kw2\">real</span> node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span><br/>        <span class=\"kw2\">point</span><span class=\"br0\">(</span>p, node<span class=\"br0\">)</span> <span class=\"sy2\">--</span><br/>        <span class=\"kw2\">point</span><span class=\"br0\">(</span>p, node <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy2\">--</span><br/>        across<span class=\"br0\">(</span>p, node<span class=\"br0\">)</span> <span class=\"sy2\">--</span><br/>        <span class=\"kw2\">point</span><span class=\"br0\">(</span>p, node <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy2\">--</span><br/>        <span class=\"kw1\">cycle</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">path</span> noncorner_subquad<span class=\"br0\">(</span><span class=\"kw2\">path</span> p, <span class=\"kw2\">real</span> node1, <span class=\"kw2\">real</span> node2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span><br/>        <span class=\"kw2\">point</span><span class=\"br0\">(</span>p, node1 <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy2\">--</span><br/>        across<span class=\"br0\">(</span>p, node1<span class=\"br0\">)</span> <span class=\"sy2\">--</span><br/>        across<span class=\"br0\">(</span>p, node2<span class=\"br0\">)</span> <span class=\"sy2\">--</span><br/>        <span class=\"kw2\">point</span><span class=\"br0\">(</span>p, node2 <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy2\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy2\">--</span><br/>        <span class=\"kw1\">cycle</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">void</span> carpet<span class=\"br0\">(</span><span class=\"kw2\">path</span> p, <span class=\"kw2\">int</span> order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>order <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">fill</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">real</span> node <span class=\"sy4\">:</span> <span class=\"kw3\">sequence</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            carpet<span class=\"br0\">(</span>corner_subquad<span class=\"br0\">(</span>p, node<span class=\"br0\">)</span>, order <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            carpet<span class=\"br0\">(</span>noncorner_subquad<span class=\"br0\">(</span>p, node, node <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, order <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">path</span> q <span class=\"sy1\">=</span><br/>   <span class=\"co1\">// A square</span><br/>   <span class=\"kw4\">unitsquare</span><br/>   <span class=\"co1\">// An oblong rhombus</span><br/>   <span class=\"co1\">// (0, 0) -- (5, 3) -- (0, 6) -- (-5, 3) -- cycle</span><br/>   <span class=\"co1\">// A trapezoid</span><br/>   <span class=\"co1\">// (0, 0) -- (4, 2) -- (6, 2) -- (10, 0) -- cycle</span><br/>   <span class=\"co1\">// A less regular quadrilateral</span><br/>   <span class=\"co1\">// (0, 0) -- (4, 1) -- (9, -4) -- (1, -1) -- cycle</span><br/>   <span class=\"co1\">// A concave shape</span><br/>   <span class=\"co1\">// (0, 0) -- (5, 3) -- (10, 0) -- (5, 1) -- cycle</span><br/>   <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw3\">size</span><span class=\"br0\">(</span><span class=\"nu0\">9</span> <span class=\"kw4\">inches</span>, <span class=\"nu0\">6</span> <span class=\"kw4\">inches</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>carpet<span class=\"br0\">(</span>q, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre>"}, {"lang": "AutoHotkey", "loc": 20, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">4</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Carpet<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>Carpet<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"nu0\">3</span><span class=\"sy0\">**</span>n <span class=\"br0\">{</span><br/>      x <span class=\"sy0\">:=</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"nu0\">3</span><span class=\"sy0\">**</span>n<br/>         t <span class=\"sy0\">.=</span> Dot<span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      t <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">Return</span> t<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Dot<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">While</span> x<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> y<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>y<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">Return</span> <span class=\"st0\">\" \"</span><br/>      <span class=\"kw1\">Else</span> x <span class=\"sy0\">//=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> y <span class=\"sy0\">//=</span> <span class=\"nu0\">3</span><br/>   <span class=\"kw1\">Return</span> <span class=\"st0\">\".\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 64, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># WSC.AWK - Waclaw Sierpinski's carpet contributed by Dan Nielsen</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># syntax: GAWK -f WSC.AWK [-v o={a|A}{b|B}] [-v X=anychar] iterations</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#   -v o=ab default</span><br/><span class=\"co1\">#      a|A  loose weave | tight weave</span><br/><span class=\"co1\">#      b|B  don't show | show how the carpet is built</span><br/><span class=\"co1\">#   -v X=?  Carpet is built with X's. The character assigned to X replaces all X's.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#   iterations</span><br/><span class=\"co1\">#      The number of iterations. The default is 0 which produces one carpet.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># what is the difference between a loose weave and a tight weave:</span><br/><span class=\"co1\">#   loose                tight</span><br/><span class=\"co1\">#   X X X X X X X X X    XXXXXXXXX</span><br/><span class=\"co1\">#   X   X X   X X   X    X XX XX X</span><br/><span class=\"co1\">#   X X X X X X X X X    XXXXXXXXX</span><br/><span class=\"co1\">#   X X X       X X X    XXX   XXX</span><br/><span class=\"co1\">#   X   X       X   X    X X   X X</span><br/><span class=\"co1\">#   X X X       X X X    XXX   XXX</span><br/><span class=\"co1\">#   X X X X X X X X X    XXXXXXXXX</span><br/><span class=\"co1\">#   X   X X   X X   X    X XX XX X</span><br/><span class=\"co1\">#   X X X X X X X X X    XXXXXXXXX</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># examples:</span><br/><span class=\"co1\">#   GAWK -f WSC.AWK 2</span><br/><span class=\"co1\">#   GAWK -f WSC.AWK -v o=Ab -v X=# 2</span><br/><span class=\"co1\">#   GAWK -f WSC.AWK -v o=Ab -v X=\\xDB 2</span><br/><span class=\"co1\">#</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    optns = <span class=\"br0\">(</span>o <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"ab\"</span> <span class=\"sy5\">:</span> o<br/>    n = <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">0</span> <span class=\"co1\"># iterations</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    seed = <span class=\"br0\">(</span>optns <span class=\"sy4\">~</span> <span class=\"sy3\">/</span>A<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"XXX,X X,XXX\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\"X X X ,X   X ,X X X \"</span> <span class=\"co1\"># tight/loose weave</span><br/>    leng = row = <span class=\"kw4\">split</span><span class=\"br0\">(</span>seed,A,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"co1\"># seed the array</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># build carpet</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>a=<span class=\"nu0\">1</span>; a<span class=\"sy2\">&lt;=</span><span class=\"nu0\">3</span>; a<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        row = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>b=<span class=\"nu0\">1</span>; b<span class=\"sy2\">&lt;=</span><span class=\"nu0\">3</span>; b<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span>c=<span class=\"nu0\">1</span>; c<span class=\"sy2\">&lt;=</span>leng; c<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            row<span class=\"sy3\">++</span><br/>            tmp = <span class=\"br0\">(</span>a <span class=\"sy2\">==</span> <span class=\"nu0\">2</span> <span class=\"sy1\">&amp;&amp;</span> b <span class=\"sy2\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%*s\"</span>,<span class=\"kw4\">length</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy5\">:</span> A<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>            B<span class=\"br0\">[</span>row<span class=\"br0\">]</span> = B<span class=\"br0\">[</span>row<span class=\"br0\">]</span> tmp<br/>          <span class=\"br0\">}</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>optns <span class=\"sy4\">~</span> <span class=\"sy3\">/</span>B<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># show how the carpet is built</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>max_row <span class=\"sy2\">&lt;</span> row<span class=\"sy3\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> max_row = row <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>r=<span class=\"nu0\">1</span>; r<span class=\"sy2\">&lt;=</span>max_row; r<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"i=%d row=%02d a=%d b=%d '%s'<span class=\"es0\">\\n</span>\"</span>,i,r,a,b,B<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      leng = row<br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j<span class=\"sy2\">&lt;=</span>row; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> A<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = B<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"co1\"># re-seed the array</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> B<span class=\"br0\">)</span> <span class=\"br0\">{</span> delete B<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"co1\"># delete work array</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j<span class=\"sy2\">&lt;=</span>row; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># print carpet</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>X <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span>X<span class=\"sy3\">/</span>,<span class=\"kw4\">substr</span><span class=\"br0\">(</span>X,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span> <span class=\"sy3\">+</span>$<span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">      Order% = 3<br/>      side% = 3^Order%<br/>      VDU 23,22,8*side%;8*side%;64,64,16,128<br/>      FOR Y% = 0 TO side%-1<br/>        FOR X% = 0 TO side%-1<br/>          IF FNincarpet(X%,Y%) PLOT X%*16,Y%*16+15<br/>        NEXT<br/>      NEXT Y%<br/>      REPEAT WAIT 1\u00a0: UNTIL FALSE<br/>      END<br/>\u00a0<br/>      DEF FNincarpet(X%,Y%)<br/>      REPEAT<br/>        IF X% MOD 3 = 1 IF Y% MOD 3 = 1 THEN = FALSE<br/>        X% DIV= 3<br/>        Y% DIV= 3<br/>      UNTIL X%=0 AND Y%=0<br/>      = TRUE</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">311&gt;*#3\\&gt;#-:#1_$:00p00g-#@_010p0&gt;:20p10g30v<br/>&gt;p&gt;40p\"#\"30g40g*!#v_$48*30g3%1-v^ &gt;$55+,1v&gt;<br/>0 ^p03/3g03/3g04$_v#!*!-1%3g04!&lt;^_^#- g00 &lt;<br/>^3g01p02:<a class=\"__cf_email__\" data-cfemail=\"34044404056b74\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#-g&gt;#0,#02#:0#+g#11#g+#0:#&lt;^</pre>"}, {"lang": "C", "loc": 21, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> dim<span class=\"sy0\">,</span> d<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> depth <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> dim <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> depth<span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> dim <span class=\"sy0\">*=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> dim<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> dim<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>d <span class=\"sy0\">=</span> dim <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> d<span class=\"sy0\">;</span> d <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>j <span class=\"sy0\">%</span> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>d <span class=\"sy0\">?</span> <span class=\"st0\">\"  \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"##\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 124, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">738</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> Sierpinski<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> draw<span class=\"br0\">(</span> HDC wdc, <span class=\"kw4\">int</span> wid, <span class=\"kw4\">int</span> hei, <span class=\"kw4\">int</span> ord <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_wdc <span class=\"sy1\">=</span> wdc<span class=\"sy4\">;</span><br/>        _ord <span class=\"sy1\">=</span> wid <span class=\"sy2\">/</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">pow</span><span class=\"br0\">(</span> <span class=\"nu16\">3.0</span>, ord <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tdrawIt<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, wid, hei <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setHWND<span class=\"br0\">(</span> HWND hwnd <span class=\"br0\">)</span> <span class=\"br0\">{</span> _hwnd <span class=\"sy1\">=</span> hwnd<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> drawIt<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> wid, <span class=\"kw4\">int</span> hei <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> wid <span class=\"sy1\">&lt;</span> _ord <span class=\"sy3\">||</span> hei <span class=\"sy1\">&lt;</span> _ord <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> w <span class=\"sy1\">=</span> wid <span class=\"sy2\">/</span> <span class=\"nu0\">3</span>, h <span class=\"sy1\">=</span> hei <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>\tRECT rc<span class=\"sy4\">;</span><br/>\tSetRect<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>rc, x <span class=\"sy2\">+</span> w, y <span class=\"sy2\">+</span> h, x <span class=\"sy2\">+</span> w <span class=\"sy2\">+</span> w, y <span class=\"sy2\">+</span> h <span class=\"sy2\">+</span> h <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tFillRect<span class=\"br0\">(</span> _wdc, <span class=\"sy3\">&amp;</span>rc, <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>HBRUSH<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> GetStockObject<span class=\"br0\">(</span> BLACK_BRUSH <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> a<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> b <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> b<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> b <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\t\tdrawIt<span class=\"br0\">(</span> x <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> w, y <span class=\"sy2\">+</span> a <span class=\"sy2\">*</span> h, w, h <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HWND     _hwnd<span class=\"sy4\">;</span><br/>    HDC      _wdc<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>      _ord<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> wnd<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    wnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> _inst <span class=\"sy1\">=</span> <span class=\"kw3\">this</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> wnd<span class=\"sy4\">::</span><span class=\"me2\">Run</span><span class=\"br0\">(</span> HINSTANCE hInst <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_hInst <span class=\"sy1\">=</span> hInst<span class=\"sy4\">;</span><br/>\t_hwnd <span class=\"sy1\">=</span> InitAll<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t_carpet.<span class=\"me1\">setHWND</span><span class=\"br0\">(</span> _hwnd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tShowWindow<span class=\"br0\">(</span> _hwnd, SW_SHOW <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tUpdateWindow<span class=\"br0\">(</span> _hwnd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tMSG msg<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> msg <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> msg.<span class=\"me1\">message</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> WM_QUIT <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> PeekMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, PM_REMOVE <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tTranslateMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tDispatchMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> UnregisterClass<span class=\"br0\">(</span> <span class=\"st0\">\"_SIERPINSKI_\"</span>, _hInst <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> wnd<span class=\"sy4\">::</span><span class=\"me2\">doPaint</span><span class=\"br0\">(</span> HDC dc <span class=\"br0\">)</span> <span class=\"br0\">{</span> _carpet.<span class=\"me1\">draw</span><span class=\"br0\">(</span> dc, BMP_SIZE, BMP_SIZE, <span class=\"nu0\">5</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> WINAPI wnd<span class=\"sy4\">::</span><span class=\"me2\">WndProc</span><span class=\"br0\">(</span> HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> msg <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> WM_DESTROY<span class=\"sy4\">:</span> PostQuitMessage<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> WM_PAINT<span class=\"sy4\">:</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tPAINTSTRUCT ps<span class=\"sy4\">;</span><br/>\t\tHDC dc <span class=\"sy1\">=</span> BeginPaint<span class=\"br0\">(</span> hWnd, <span class=\"sy3\">&amp;</span>ps <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t_inst<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>doPaint<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\t\tEndPaint<span class=\"br0\">(</span> hWnd, <span class=\"sy3\">&amp;</span>ps <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span>\t\t<br/>\t    <span class=\"kw1\">default</span><span class=\"sy4\">:</span><br/>\t        <span class=\"kw1\">return</span> DefWindowProc<span class=\"br0\">(</span> hWnd, msg, wParam, lParam <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HWND InitAll<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tWNDCLASSEX wcex<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>wcex, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> wcex <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">cbSize</span>\t       <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> WNDCLASSEX <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">style</span>\t       <span class=\"sy1\">=</span> CS_HREDRAW <span class=\"sy3\">|</span> CS_VREDRAW<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">lpfnWndProc</span>   <span class=\"sy1\">=</span> <span class=\"br0\">(</span> WNDPROC <span class=\"br0\">)</span>WndProc<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hInstance</span>     <span class=\"sy1\">=</span> _hInst<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hCursor</span>       <span class=\"sy1\">=</span> LoadCursor<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span>, IDC_ARROW <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hbrBackground</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> HBRUSH <span class=\"br0\">)</span><span class=\"br0\">(</span> COLOR_WINDOW <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">lpszClassName</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"_SIERPINSKI_\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tRegisterClassEx<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>wcex <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tRECT rc <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, BMP_SIZE, BMP_SIZE <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\tAdjustWindowRect<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>rc, WS_SYSMENU <span class=\"sy3\">|</span> WS_CAPTION, FALSE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> w <span class=\"sy1\">=</span> rc.<span class=\"me1\">right</span> <span class=\"sy2\">-</span> rc.<span class=\"me1\">left</span>,<br/>\t    h <span class=\"sy1\">=</span> rc.<span class=\"me1\">bottom</span> <span class=\"sy2\">-</span> rc.<span class=\"me1\">top</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> CreateWindow<span class=\"br0\">(</span> <span class=\"st0\">\"_SIERPINSKI_\"</span>, <span class=\"st0\">\".: Sierpinski carpet -- PJorente\u00a0:.\"</span>, WS_SYSMENU, CW_USEDEFAULT, <span class=\"nu0\">0</span>, w, h, <span class=\"kw2\">NULL</span>, <span class=\"kw2\">NULL</span>, _hInst, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> wnd<span class=\"sy2\">*</span> _inst<span class=\"sy4\">;</span><br/>    HINSTANCE  _hInst<span class=\"sy4\">;</span><br/>    HWND       _hwnd<span class=\"sy4\">;</span><br/>    Sierpinski _carpet<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>wnd<span class=\"sy2\">*</span> wnd<span class=\"sy4\">::</span>_inst <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> APIENTRY _tWinMain<span class=\"br0\">(</span> HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, <span class=\"kw4\">int</span> nCmdShow <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    wnd myWnd<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> myWnd.<span class=\"me1\">Run</span><span class=\"br0\">(</span> hInstance <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> NextCarpet<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> carpet<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> carpet<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> x<span class=\"br0\">)</span><br/>                     <span class=\"sy0\">.</span><span class=\"me1\">Concat</span><span class=\"br0\">(</span>carpet<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">+</span> x<span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span><span class=\"st0\">'#'</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"sy0\">.</span><span class=\"me1\">Concat</span><span class=\"br0\">(</span>carpet<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> SierpinskiCarpet<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"st0\">\"#\"</span> <span class=\"br0\">}</span>, <span class=\"br0\">(</span>carpet, _<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> NextCarpet<span class=\"br0\">(</span>carpet<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> s <span class=\"kw1\">in</span> SierpinskiCarpet<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 20, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> example<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>math\u00a0:<span class=\"me1\">as</span> math<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> in<span class=\"sy0\">-</span>carpet? <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>x x, y y<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span>              true<br/>     <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>mod x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>mod y <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> false<br/>    \u00a0:<span class=\"me1\">else</span>                                 <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>quot x <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>quot y <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> carpet <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">interpose</span><br/>\t  \\newline<br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span>math<span class=\"sy0\">/</span>expt <span class=\"nu0\">3</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>y <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span>math<span class=\"sy0\">/</span>expt <span class=\"nu0\">3</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>carpet? x y<span class=\"br0\">)</span> <span class=\"st0\">\"*\"</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>carpet <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-carpet <span class=\"br0\">(</span>order<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>size <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">3</span> order<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>trinary <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"~3,vR\"</span> order x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>ones <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> a #\\<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> b #\\<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop for i below size <span class=\"kw1\">do</span><br/>        <span class=\"br0\">(</span>fresh-line<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>loop for j below size <span class=\"kw1\">do</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>some #'ones <span class=\"br0\">(</span>trinary i<span class=\"br0\">)</span> <span class=\"br0\">(</span>trinary j<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                   <span class=\"st0\">\" \"</span> <br/>                   <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> sierpinskiCarpet<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"#\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> _<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> p <span class=\"sy0\">=</span> r.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">~</span> a <span class=\"sy0\">~</span> a<span class=\"br0\">}</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        r <span class=\"sy0\">=</span> p <span class=\"sy0\">~</span> r.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">~</span> a.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> a<span class=\"br0\">}</span>.<span class=\"me1\">array</span> <span class=\"sy0\">~</span> p<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> r.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">3</span>.<span class=\"me1\">sierpinskiCarpet</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DWScript", "loc": 28, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> InCarpet<span class=\"br0\">(</span>x<span class=\"sy1\">,</span> y <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x&lt;&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>y&lt;&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>y <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw3\">Exit</span><span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>      y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> y <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Carpet<span class=\"br0\">(</span>n <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> p <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Round</span><span class=\"br0\">(</span><span class=\"kw3\">IntPower</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> p<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> p<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> InCarpet<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Print<span class=\"br0\">(</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">else</span> Print<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      PrintLn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>Carpet<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 19, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> inCarpet<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> x<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">%%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">%%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><br/>        <span class=\"br0\">}</span><br/>        x <span class=\"sy0\">//=</span> <span class=\"nu0\">3</span><br/>        y <span class=\"sy0\">//=</span> <span class=\"nu0\">3</span><br/>    <span class=\"br0\">}</span><br/>    return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> carpet<span class=\"br0\">(</span>order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> y <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span>order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span>order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span>inCarpet<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>.<span class=\"me1\">pick</span><span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 16, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def sierpinski_carpet(n), do: sierpinski_carpet(n, [\"#\"])<br/>\u00a0<br/>  def sierpinski_carpet(0, carpet), do: carpet<br/>  def sierpinski_carpet(n, carpet) do<br/>    new_carpet = Enum.map(carpet, fn x -&gt; x &lt;&gt; x &lt;&gt; x end) ++<br/>                 Enum.map(carpet, fn x -&gt; x &lt;&gt; String.replace(x, \"#\", \" \") &lt;&gt; x end) ++<br/>                 Enum.map(carpet, fn x -&gt; x &lt;&gt; x &lt;&gt; x end)<br/>    sierpinski_carpet(n-1, new_carpet)<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(0..3, fn n -&gt;<br/>  IO.puts \"\\nN=#{n}\"<br/>  Enum.each(RC.sierpinski_carpet(n), fn line -&gt; IO.puts line end)<br/>end)</pre>"}, {"lang": "Erlang", "loc": 20, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>carpet<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">sierpinski_carpet</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sierpinski_carpet</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>: <span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>: <span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">carpet</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"kw3\">trunc</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"kw3\">trunc</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>\t<br/>\u00a0<br/><span class=\"re3\">carpet</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">if</span> <br/>\t\t<span class=\"re5\">X</span><span class=\"sy3\">=:=</span><span class=\"nu0\">0</span> <span class=\"sy1\">;</span> <span class=\"re5\">Y</span><span class=\"sy3\">=:=</span><span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <br/>\t\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy3\">=:=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">Y</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span><span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span>\t<br/>\t\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\ttrue <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re3\">carpet</span><span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"kw2\">div</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"kw2\">div</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>\t<br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>PROGRAM SIERP_CARPET<br/>\u00a0<br/>! for rosettacode.org<br/>\u00a0<br/>!$INTEGER<br/>\u00a0<br/>BEGIN<br/> OPEN(\"O\",1,\"OUT.PRN\")<br/> PRINT(CHR$(12);)\u00a0!CLS<br/> DEPTH=3<br/> DIMM=1<br/>\u00a0<br/> FOR I=0 TO DEPTH-1 DO<br/>   DIMM=DIMM*3<br/> END FOR<br/>\u00a0<br/> FOR I=0 TO DIMM-1 DO<br/>   FOR J=0 TO DIMM-1 DO<br/>     D=DIMM DIV 3<br/>     REPEAT<br/>        EXIT IF ((I MOD (D*3)) DIV D=1 AND (J MOD (D*3)) DIV D=1)<br/>        D=D DIV 3<br/>     UNTIL NOT(D&gt;0)<br/>     IF D&gt;0 THEN PRINT(#1,\"  \";)  ELSE PRINT(#1,\"##\";) END IF<br/>   END FOR<br/>   PRINT(#1,)<br/> END FOR<br/>\u00a0! PRINT(#1,CHR$(12);) for printer only!<br/> CLOSE(1)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 28, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>math.e<br/>\u00a0<br/><span class=\"kw2\">integer</span> order <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"kw1\">function</span> InCarpet<span class=\"br0\">(</span><span class=\"kw2\">atom</span> x<span class=\"sy2\">,</span> <span class=\"kw2\">atom</span> y<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">elsif</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>mod<span class=\"br0\">(</span>x<span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>mod<span class=\"br0\">(</span>y<span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t\tx <span class=\"sy1\">/=</span> <span class=\"nu0\">3</span><br/>\t\ty <span class=\"sy1\">/=</span> <span class=\"nu0\">3</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw2\">power</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span>order<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw2\">power</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span>order<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> InCarpet<span class=\"br0\">(</span>i<span class=\"sy2\">,</span>j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 16, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> blank x <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a><span class=\"br0\">(</span><span class=\"st0\">' '</span>, <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">length</span> x<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> nextCarpet carpet <span class=\"sy0\">=</span> <br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> x<span class=\"br0\">)</span> carpet @<br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> <span class=\"br0\">(</span>blank x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">)</span> carpet @<br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> x<span class=\"br0\">)</span> carpet<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> sierpinskiCarpet n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux n carpet <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> carpet<br/>             <span class=\"kw1\">else</span> aux <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>nextCarpet carpet<span class=\"br0\">)</span><br/>  aux n <span class=\"br0\">[</span><span class=\"st0\">\"#\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printfn <span class=\"st0\">\"%s\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sierpinskiCarpet <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Fan", "loc": 40, "block": "<pre class=\"text highlighted_source\">**<br/>** Generates a square Sierpinski gasket<br/>**<br/>class SierpinskiCarpet<br/>{<br/>  public static Bool inCarpet(Int x, Int y){<br/>    while(x!=0 &amp;&amp; y!=0){<br/>      if (x\u00a0% 3 == 1 &amp;&amp; y\u00a0% 3 == 1)<br/>        return false;<br/>      x /= 3;<br/>      y /= 3;<br/>    }<br/>    return true;<br/>  }<br/>\u00a0<br/>  static Int pow(Int n, Int exp)<br/>  {<br/>    rslt\u00a0:= 1<br/>    exp.times { rslt *= n }<br/>    return rslt<br/>  }<br/>\u00a0<br/>  public static Void carpet(Int n){<br/>    for(i\u00a0:= 0; i &lt; pow(3, n); i++){<br/>      buf\u00a0:= StrBuf()<br/>      for(j\u00a0:= 0; j &lt; pow(3, n); j++){<br/>        if( inCarpet(i, j))<br/>          buf.add(\"*\");<br/>        else<br/>          buf.add(\" \");<br/>      }<br/>      echo(buf);<br/>    }<br/>  }<br/>\u00a0<br/>  Void main()<br/>  {<br/>    carpet(4)<br/>  }<br/>}</pre>"}, {"lang": "Forth", "loc": 16, "block": "<pre class=\"text highlighted_source\">\\ Generates a square Sierpinski gasket<br/>: 1? over 3 mod 1 =\u00a0;                  ( n1 n2 -- n1 n2 f)<br/>: 3/ 3 / swap\u00a0;                        ( n1 n2 -- n2/3 n1)<br/>                                       \\ is this cell in the carpet?<br/>: incarpet                             ( n1 n2 -- f)<br/>  begin over over or while 1? 1? and if 2drop false exit then 3/ 3/ repeat<br/>  2drop true                           \\ return true if in the carpet<br/>;<br/>                                       \\ draw a carpet of n size<br/>: carpet                               ( n --)<br/>  1 swap 0\u00a0?do 3 * loop dup            \\ calculate power of 3<br/>  0\u00a0?do dup 0\u00a0?do i j incarpet if [char] # else bl then emit loop cr loop<br/>  drop                                 \\ evaluate every cell in the carpet<br/>;<br/>\u00a0<br/>cr 4 carpet</pre>"}, {"lang": "Fortran", "loc": 42, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Sierpinski_carpet<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> carpet<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> In_carpet<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">in_carpet</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>, y<br/>\u00a0<br/>  x <span class=\"sy0\">=</span> a\u00a0; y <span class=\"sy0\">=</span> b<br/>  <span class=\"kw1\">do</span> <br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      In_carpet <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>x, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>y, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      In_carpet <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    x <span class=\"sy0\">=</span> x <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><br/>    y <span class=\"sy0\">=</span> y <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> Carpet<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"sy0\">**</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"sy0\">**</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>In_carpet<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"#\"</span><br/>      <span class=\"kw1\">else</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> Carpet<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Sierpinski_carpet</pre>"}, {"lang": "Gnuplot", "loc": 13, "block": "<pre class=\"gnuplot highlighted_source\">\u00a0<br/><span class=\"co1\">## SCff.gp 1/14/17 aev</span><br/><span class=\"co1\">## Plotting Sierpinski carpet fractal.</span><br/><span class=\"co1\">## dat-files are PARI/GP generated output files: </span><br/><span class=\"co1\">## http://rosettacode.org/wiki/Sierpinski_carpet#PARI.2FGP</span><br/><span class=\"co1\">#cd 'C:\\gnupData'</span><br/>\u00a0<br/><span class=\"co1\">##SC5</span><br/><span class=\"re0\">clr =</span> <span class=\"st0\">'\"green\"'</span><br/><span class=\"re0\">filename =</span> <span class=\"st0\">\"SC5gp1\"</span><br/><span class=\"re0\">ttl =</span> <span class=\"st0\">\"Sierpinski carpet fractal, v.#1\"</span><br/><span class=\"kw1\">load</span> <span class=\"st0\">\"plotff.gp\"</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 28, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/>    <span class=\"st0\">\"unicode/utf8\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> order <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><br/><span class=\"kw1\">var</span> grain <span class=\"sy2\">=</span> <span class=\"st0\">\"#\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    carpet <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span>grain<span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> order &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> order<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// repeat expression allows for multiple character</span><br/>        <span class=\"co1\">// grain and for multi-byte UTF-8 characters.</span><br/>        hole <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Repeat</span><span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> utf8<span class=\"sy3\">.</span>RuneCountInString<span class=\"sy1\">(</span>carpet<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]))</span><br/>        middle <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>carpet<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> carpet <span class=\"sy1\">{</span><br/>            middle<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s <span class=\"sy3\">+</span> hole <span class=\"sy3\">+</span> s<br/>            carpet<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        carpet <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>append<span class=\"sy1\">(</span>carpet<span class=\"sy1\">,</span> middle<span class=\"sy4\">...</span><span class=\"sy1\">),</span> carpet<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> carpet <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 19, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> base3 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> i <span class=\"sy0\">-&gt;</span> i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sierpinskiCarpet <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> order <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?as_q=StringBuffer&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">StringBuffer</span></a> sb <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=StringBuffer&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">StringBuffer</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> positions <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span>order<span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> digits <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span><span class=\"br0\">[</span>order,<span class=\"nu0\">1</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    positions.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> i3 <span class=\"sy0\">=</span> base3<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20padLeft\"><span class=\"kw6\">padLeft</span></a><span class=\"br0\">(</span>order, <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>\u00a0<br/>        positions.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> j <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> j3 <span class=\"sy0\">=</span> base3<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20padLeft\"><span class=\"kw6\">padLeft</span></a><span class=\"br0\">(</span>order, <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>\u00a0<br/>            sb <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>digits.<span class=\"me1\">any</span><span class=\"br0\">{</span> i3<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">&amp;&amp;</span> j3<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"br0\">}</span> <span class=\"sy0\">?</span> <span class=\"st0\">'  '</span>\u00a0: order.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20padRight\"><span class=\"kw6\">padRight</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        sb <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><br/>    <span class=\"br0\">}</span><br/>    sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 16, "block": "<pre class=\"haskell highlighted_source\">inCarpet <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>inCarpet <span class=\"nu0\">0</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> True<br/>inCarpet <span class=\"sy0\">_</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> True<br/>inCarpet x y <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>xr <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>yr <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> inCarpet xq yq<br/>  <span class=\"kw1\">where</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>xq<span class=\"sy0\">,</span> xr<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>yq<span class=\"sy0\">,</span> yr<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod\"><span class=\"kw3\">divMod</span></a>` <span class=\"nu0\">3</span><span class=\"sy0\">,</span> y `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod\"><span class=\"kw3\">divMod</span></a>` <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>carpet <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>carpet n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a><br/>            <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a><br/>              <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> inCarpet x y <span class=\"kw1\">then</span> <span class=\"st0\">'#'</span> <span class=\"kw1\">else</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span><span class=\"sy0\">^</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>             <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a><span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span><span class=\"sy0\">^</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>printCarpet <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printCarpet <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> carpet</pre>"}, {"lang": "Icon and Unicon", "loc": 24, "block": "<pre class=\"icon highlighted_source\"><span class=\"sy2\">$</span><span class=\"kw6\">define</span> FILLER <span class=\"st0\">\"*\"</span>  <span class=\"co1\"># the filler character</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>\u00a0<br/>   width <span class=\"sy1\">:=</span> <span class=\"nu0\">3</span> <span class=\"sy1\">^</span> <span class=\"br0\">(</span> order <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Carpet order= \"</span><span class=\"sy1\">,</span>order<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> <span class=\"sy1\">!</span><span class=\"br0\">(</span>canvas <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>width<span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>        <span class=\"co1\"># prime the canvas</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> y <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"sy1\">&amp;</span> x <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"kw1\">do</span>               <span class=\"co1\"># traverse it</span><br/>      <span class=\"kw1\">if</span> IsFilled<span class=\"br0\">(</span>x<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>y<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> canvas<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> FILLER       <span class=\"co1\"># fill</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"sy1\">&amp;</span> y <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"kw1\">do</span> <br/>      <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"br0\">(</span>y<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span>canvas<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>                 <span class=\"co1\"># print</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> IsFilled<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span>                      <span class=\"co1\">#  succeed if x,y should be filled</span><br/>   <span class=\"kw1\">while</span>  x <span class=\"sy1\">~=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&amp;</span> y <span class=\"sy1\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> x <span class=\"sy1\">%</span> <span class=\"nu0\">3</span> <span class=\"sy1\">=</span> y <span class=\"sy1\">%</span>3 <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>      x <span class=\"sy1\">/:=</span> <span class=\"nu0\">3</span><br/>      y <span class=\"sy1\">/:=</span><span class=\"nu0\">3</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 13, "block": "<pre class=\"io highlighted_source\">sierpinskiCarpet\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>n,<br/>    carpet\u00a0:= <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"st0\">\"@\"</span><span class=\"br0\">)</span><br/>    n repeat<span class=\"br0\">(</span><br/>        next\u00a0:= <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        carpet <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>s, next append<span class=\"br0\">(</span>s .. s .. s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        carpet <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>s, next append<span class=\"br0\">(</span>s .. <span class=\"br0\">(</span>s asMutable replaceSeq<span class=\"br0\">(</span><span class=\"st0\">\"@\"</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> .. s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        carpet <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>s, next append<span class=\"br0\">(</span>s .. s .. s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        carpet = next<br/>    <span class=\"br0\">)</span><br/>    carpet join<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>sierpinskiCarpet<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> println</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">N=:<span class=\"nu0\">3</span><br/><span class=\"sy0\">(</span>a:<span class=\"sy0\">(</span>&lt;<span class=\"nu0\">1</span>;<span class=\"nu0\">1</span><span class=\"sy0\">)</span>}<span class=\"nu0\">3</span> <span class=\"nu0\">3</span>$&lt;<span class=\"sy0\">)</span>^:N<span class=\"st_h\">'   '</span></pre>"}, {"lang": "Java", "loc": 19, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> inCarpet<span class=\"br0\">(</span><span class=\"kw4\">long</span> x, <span class=\"kw4\">long</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x<span class=\"sy0\">!=</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> y<span class=\"sy0\">!=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        x <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        y <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> carpet<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> power <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> power<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> power<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>inCarpet<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"*\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 72, "block": "<pre class=\"html4strict highlighted_source\"><span class=\"sc0\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/html.html\"><span class=\"kw2\">html</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/head.html\"><span class=\"kw2\">head</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/meta.html\"><span class=\"kw2\">meta</span></a> <span class=\"kw3\">http-equiv</span><span class=\"sy0\">=</span><span class=\"st0\">\"Content-Type\"</span> <span class=\"kw3\">content</span><span class=\"sy0\">=</span><span class=\"st0\">\"text/html;charset=utf-8\"</span>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/title.html\"><span class=\"kw2\">title</span></a>&gt;</span>Sierpinski Carpet<span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/title.html\"><span class=\"kw2\">title</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/script.html\"><span class=\"kw2\">script</span></a> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">'text/javascript'</span>&gt;</span><br/>\u00a0<br/>var black_char = \"#\";<br/>var white_char = \" \";<br/>\u00a0<br/>var SierpinskiCarpet = function(size) {<br/>    this.carpet = [black_char];<br/>    for (var i = 1; i <span class=\"sc2\">&lt;<span class=\"sy0\">=</span> <span class=\"kw3\">size</span>; i++<span class=\"br0\">)</span> <span class=\"br0\">{</span></span><br/><span class=\"sc2\">        this.carpet <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.concat<span class=\"br0\">(</span></span><br/><span class=\"sc2\">            this.carpet.map<span class=\"br0\">(</span>this.sier_top<span class=\"br0\">)</span>,</span><br/><span class=\"sc2\">            this.carpet.map<span class=\"br0\">(</span>this.sier_middle<span class=\"br0\">)</span>,</span><br/><span class=\"sc2\">            this.carpet.map<span class=\"br0\">(</span>this.sier_top<span class=\"br0\">)</span></span><br/><span class=\"sc2\">        <span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">    <span class=\"br0\">}</span></span><br/><span class=\"sc2\"><span class=\"br0\">}</span></span><br/>\u00a0<br/><span class=\"sc2\">SierpinskiCarpet.prototype.sier_top <span class=\"sy0\">=</span> function<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span></span><br/><span class=\"sc2\">    var str <span class=\"sy0\">=</span> new String<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">    return new String<span class=\"br0\">(</span>str+str+str<span class=\"br0\">)</span>;</span><br/><span class=\"sc2\"><span class=\"br0\">}</span></span><br/>\u00a0<br/><span class=\"sc2\">SierpinskiCarpet.prototype.sier_middle <span class=\"sy0\">=</span> function <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span></span><br/><span class=\"sc2\">    var str <span class=\"sy0\">=</span> new String<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">    var spacer <span class=\"sy0\">=</span> str.replace<span class=\"br0\">(</span>new RegExp<span class=\"br0\">(</span>black_char, <span class=\"st0\">'g'</span><span class=\"br0\">)</span>, white_char<span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">    return new String<span class=\"br0\">(</span>str+spacer+str<span class=\"br0\">)</span>;</span><br/><span class=\"sc2\"><span class=\"br0\">}</span></span><br/>\u00a0<br/><span class=\"sc2\">SierpinskiCarpet.prototype.to_string <span class=\"sy0\">=</span> function<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span></span><br/><span class=\"sc2\">    return this.carpet.join<span class=\"br0\">(</span><span class=\"st0\">\"\\n\"</span><span class=\"br0\">)</span></span><br/><span class=\"sc2\"><span class=\"br0\">}</span></span><br/>\u00a0<br/><span class=\"sc2\">SierpinskiCarpet.prototype.to_html <span class=\"sy0\">=</span> function<span class=\"br0\">(</span><span class=\"kw3\">target</span><span class=\"br0\">)</span> <span class=\"br0\">{</span></span><br/><span class=\"sc2\">    var table <span class=\"sy0\">=</span> document.createElement<span class=\"br0\">(</span><span class=\"st0\">'table'</span><span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">    <span class=\"kw3\">for</span> <span class=\"br0\">(</span>var i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; this.carpet.length; i++<span class=\"br0\">)</span> <span class=\"br0\">{</span></span><br/><span class=\"sc2\">        var row <span class=\"sy0\">=</span> document.createElement<span class=\"br0\">(</span><span class=\"st0\">'tr'</span><span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">        <span class=\"kw3\">for</span> <span class=\"br0\">(</span>var j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; j &lt; this.carpet<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.length; j++<span class=\"br0\">)</span> <span class=\"br0\">{</span></span><br/><span class=\"sc2\">            var cell <span class=\"sy0\">=</span> document.createElement<span class=\"br0\">(</span><span class=\"st0\">'td'</span><span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">            cell.setAttribute<span class=\"br0\">(</span><span class=\"st0\">'class'</span>, this.carpet<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> black_char\u00a0? <span class=\"st0\">'black'</span>\u00a0: <span class=\"st0\">'white'</span><span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">            cell.appendChild<span class=\"br0\">(</span>document.createTextNode<span class=\"br0\">(</span><span class=\"st0\">'\\u00a0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">            row.appendChild<span class=\"br0\">(</span>cell<span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">        <span class=\"br0\">}</span></span><br/><span class=\"sc2\">        table.appendChild<span class=\"br0\">(</span>row<span class=\"br0\">)</span>;</span><br/><span class=\"sc2\">    <span class=\"br0\">}</span></span><br/><span class=\"sc2\">    <span class=\"kw3\">target</span>.appendChild<span class=\"br0\">(</span>table<span class=\"br0\">)</span>;</span><br/><span class=\"sc2\"><span class=\"br0\">}</span></span><br/>\u00a0<br/><span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/script.html\"><span class=\"kw2\">script</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/style.html\"><span class=\"kw2\">style</span></a> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">'text/css'</span>&gt;</span><br/>    table {border-collapse: collapse;}<br/>    td {width: 1em;}<br/>    .black {background-color: black;}<br/>    .white {background-color: white;}<br/><span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/style.html\"><span class=\"kw2\">style</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/head.html\"><span class=\"kw2\">head</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/body.html\"><span class=\"kw2\">body</span></a>&gt;</span><br/>\u00a0<br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/pre.html\"><span class=\"kw2\">pre</span></a> <span class=\"kw3\">id</span><span class=\"sy0\">=</span><span class=\"st0\">'to_string'</span> <span class=\"kw3\">style</span><span class=\"sy0\">=</span><span class=\"st0\">'float:left; margin-right:0.25in'</span>&gt;&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/pre.html\"><span class=\"kw2\">pre</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/div.html\"><span class=\"kw2\">div</span></a> <span class=\"kw3\">id</span><span class=\"sy0\">=</span><span class=\"st0\">'to_html'</span>&gt;&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/div.html\"><span class=\"kw2\">div</span></a>&gt;</span><br/>\u00a0<br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/script.html\"><span class=\"kw2\">script</span></a> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">'text/javascript'</span>&gt;</span><br/>    var sc = new SierpinskiCarpet(3);<br/>    document.getElementById('to_string').appendChild(document.createTextNode(sc.to_string()));<br/>    sc.to_html(document.getElementById('to_html'));<br/><span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/script.html\"><span class=\"kw2\">script</span></a>&gt;</span><br/>\u00a0<br/><span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/body.html\"><span class=\"kw2\">body</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/html.html\"><span class=\"kw2\">html</span></a>&gt;</span></pre>"}, {"lang": "Kotlin", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun inCarpet<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> xx <span class=\"sy0\">=</span> x<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> yy <span class=\"sy0\">=</span> y<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>xx <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> yy <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>xx <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> yy <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        xx /<span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>        yy /<span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun carpet<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> power <span class=\"sy0\">=</span> Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">3.0</span>, n.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until power<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until power<span class=\"br0\">)</span> print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>inCarpet<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"*\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> carpet<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "jq", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def inCarpet(x; y):<br/>  x as $x | y as $y |<br/>  if $x == -1 or $y == -1 then \"\\n\"<br/>  elif $x == 0 or $y == 0 then \"*\"<br/>  elif ($x\u00a0% 3) == 1 and ($y\u00a0% 3) == 1 then \" \"<br/>  else inCarpet($x/3 | floor; $y/3 | floor)<br/>  end;<br/>\u00a0<br/>def ipow(n): <br/>  . as $in | reduce range(0;n) as $i (1; . * $in);<br/>\u00a0<br/>def carpet(n):<br/>  (3|ipow(n)) as $power <br/>  | [ inCarpet( range(0; $power)\u00a0; range(0; $power), -1 )] <br/>  | join(\"\")\u00a0; <br/>\u00a0<br/>\u00a0<br/>carpet(3)</pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">function sierpinski(n::Integer, token::AbstractString=\"*\")<br/>    x = fill(token, 1, 1)<br/>    for _ in 1:n<br/>        t = fill(\" \", size(x))<br/>        x = [x x x; x t x; x x x]<br/>    end<br/>    return x<br/>end<br/>\u00a0<br/>function printsierpinski(m::Matrix)<br/>    for r in 1:size(m, 1)<br/>        println(join(m[r,\u00a0:]))<br/>    end<br/>end<br/>\u00a0<br/>sierpinski(2, \"#\") |&gt; printsierpinski</pre>"}, {"lang": "Liberty BASIC", "loc": 45, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">NoMainWin</span><br/><span class=\"kw3\">WindowWidth</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">508</span><br/><span class=\"kw3\">WindowHeight</span> <span class=\"sy0\">=</span> <span class=\"nu0\">575</span><br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"Sierpinski Carpets\"</span> <span class=\"kw1\">For</span> Graphics_nsb_nf <span class=\"kw1\">As</span> <span class=\"sy0\">#</span>g<br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"Down; TrapClose [halt]\"</span><br/>\u00a0<br/><span class=\"co1\">'labels</span><br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"Place  90  15;\\Order 0\"</span><br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"Place 340  15;\\Order 1\"</span><br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"Place  90 286;\\Order 2\"</span><br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"Place 340 286;\\Order 3\"</span><br/><span class=\"co1\">'carpets</span><br/><span class=\"kw1\">Call</span> carpet   <span class=\"nu0\">5</span><span class=\"sy0\">,</span>  <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">243</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">Call</span> carpet <span class=\"nu0\">253</span><span class=\"sy0\">,</span>  <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">243</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">Call</span> carpet   <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">293</span><span class=\"sy0\">,</span> <span class=\"nu0\">243</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">Call</span> carpet <span class=\"nu0\">253</span><span class=\"sy0\">,</span> <span class=\"nu0\">293</span><span class=\"sy0\">,</span> <span class=\"nu0\">243</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"Flush\"</span><br/><span class=\"kw1\">Wait</span><br/>\u00a0<br/><span class=\"br0\">[</span>halt<span class=\"br0\">]</span><br/><span class=\"kw1\">Close</span> <span class=\"sy0\">#</span>g<br/><span class=\"kw1\">End</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> carpet x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> size<span class=\"sy0\">,</span> order<br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Color 0 0 128; BackColor 0 0 128\"</span><br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Place \"</span>;x;<span class=\"st0\">\" \"</span>;y<br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"BoxFilled \"</span>;x<span class=\"sy0\">+</span>size<span class=\"sy0\">-</span><span class=\"nu0\">1</span>;<span class=\"st0\">\" \"</span>;y<span class=\"sy0\">+</span>size<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Color white; BackColor white\"</span><br/>    side <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span>size<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    newX <span class=\"sy0\">=</span> x<span class=\"sy0\">+</span>side<br/>    newY <span class=\"sy0\">=</span> y<span class=\"sy0\">+</span>side<br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Place \"</span>;newX;<span class=\"st0\">\" \"</span>;newY<br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"BoxFilled \"</span>;newX<span class=\"sy0\">+</span>side<span class=\"sy0\">-</span><span class=\"nu0\">1</span>;<span class=\"st0\">\" \"</span>;newY<span class=\"sy0\">+</span>side<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    order <span class=\"sy0\">=</span> order <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> order <span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Call</span> carpet newX<span class=\"sy0\">-</span>side<span class=\"sy0\">,</span> newY<span class=\"sy0\">-</span>side<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> side<span class=\"sy0\">,</span> order<br/>        <span class=\"kw1\">Call</span> carpet newX<span class=\"sy0\">,</span>      newY<span class=\"sy0\">-</span>side<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> side<span class=\"sy0\">,</span> order<br/>        <span class=\"kw1\">Call</span> carpet newX<span class=\"sy0\">+</span>side<span class=\"sy0\">,</span> newY<span class=\"sy0\">-</span>side<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> side<span class=\"sy0\">,</span> order<br/>        <span class=\"kw1\">Call</span> carpet newX<span class=\"sy0\">+</span>side<span class=\"sy0\">,</span> newY<span class=\"sy0\">,</span>        side<span class=\"sy0\">,</span> order<br/>        <span class=\"kw1\">Call</span> carpet newX<span class=\"sy0\">+</span>side<span class=\"sy0\">,</span> newY<span class=\"sy0\">+</span>side<span class=\"sy0\">,</span>   side<span class=\"sy0\">,</span> order<br/>        <span class=\"kw1\">Call</span> carpet newX<span class=\"sy0\">,</span>      newY<span class=\"sy0\">+</span>side<span class=\"sy0\">,</span>   side<span class=\"sy0\">,</span> order<br/>        <span class=\"kw1\">Call</span> carpet newX<span class=\"sy0\">-</span>side<span class=\"sy0\">,</span> newY<span class=\"sy0\">+</span>side<span class=\"sy0\">,</span>   side<span class=\"sy0\">,</span> order<br/>        <span class=\"kw1\">Call</span> carpet newX<span class=\"sy0\">-</span>side<span class=\"sy0\">,</span> newY<span class=\"sy0\">,</span>        side<span class=\"sy0\">,</span> order<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span></pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">full={{1,1,1},{1,0,1},{1,1,1}}<br/>empty={{0,0,0},{0,0,0},{0,0,0}}<br/>n=3;<br/>Grid[Nest[ArrayFlatten[#/.{0-&gt;empty,1-&gt;full}]&amp;,{{1}},n]//.{0-&gt;\" \",1-&gt;\"#\"}]</pre>"}, {"lang": "MATLAB", "loc": 6, "block": "<pre class=\"matlab highlighted_source\">n = <span class=\"nu0\">3</span>;<br/>c = string<span class=\"br0\">(</span><span class=\"co2\">'#'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>\u00a0: n<br/>  c = <span class=\"br0\">[</span>c + c + c, c + c.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">'#'</span>, <span class=\"co2\">' '</span><span class=\"br0\">)</span> + c, c + c + c<span class=\"br0\">]</span>;<br/><span class=\"kw1\">end</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>c.<span class=\"me1\">join</span><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "NetRexx", "loc": 47, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">1000</span><br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  DARK_SHADE = <span class=\"st0\">'\\u2593'</span><br/>  <span class=\"kw1\">parse</span> arg ordr filr .<br/>  <span class=\"kw1\">if</span> ordr = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> ordr = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> ordr = <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">if</span> filr = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> filr = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> filler = DARK_SHADE<br/>  <span class=\"kw3\">else</span>                           filler = filr<br/>  drawSierpinskiCarpet<span class=\"br0\">(</span>ordr, filler<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method drawSierpinskiCarpet<span class=\"br0\">(</span>ordr, filler = Rexx <span class=\"st0\">'@'</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span><br/>  x = long<br/>  y = long<br/>  powr = <span class=\"nu0\">3</span> <span class=\"sy0\">**</span> ordr<br/>  <span class=\"kw1\">loop</span> x = <span class=\"nu0\">0</span> to powr - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> y = <span class=\"nu0\">0</span> to powr - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> isSierpinskiCarpetCellFilled<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"kw3\">then</span> cell = filler<br/>      <span class=\"kw3\">else</span>                                       cell = <span class=\"st0\">' '</span><br/>      <span class=\"kw1\">say</span> cell<span class=\"st0\">'\\-'</span><br/>      <span class=\"kw3\">end</span> y<br/>      <span class=\"kw1\">say</span><br/>    <span class=\"kw3\">end</span> x<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method isSierpinskiCarpetCellFilled<span class=\"br0\">(</span>x = long, y = long<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> boolean<br/>  isTrue  = boolean <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  isFalse = <span class=\"sy0\">\\</span>isTrue<br/>  isFilled = isTrue<br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> edge while x <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> y <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">if</span> x <span class=\"sy0\">//</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> y <span class=\"sy0\">//</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      isFilled = isFalse<br/>      <span class=\"kw1\">leave</span> edge<br/>      <span class=\"kw3\">end</span><br/>    x = x\u00a0% <span class=\"nu0\">3</span><br/>    y = y\u00a0% <span class=\"nu0\">3</span><br/>    <span class=\"kw3\">end</span> edge<br/>  <span class=\"kw1\">return</span> isFilled<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 32, "block": "<pre class=\"text highlighted_source\">proc `^`*(base: int, exp: int): int =<br/>  var (base, exp) = (base, exp)<br/>  result = 1<br/>\u00a0<br/>  while exp\u00a0!= 0:<br/>    if (exp and 1)\u00a0!= 0:<br/>      result *= base<br/>    exp = exp shr 1<br/>    base *= base<br/>\u00a0<br/>proc inCarpet(x, y): bool =<br/>  var x = x<br/>  var y = y<br/>  while true:<br/>    if x == 0 or y == 0:<br/>      return true<br/>    if x mod 3 == 1 and y mod 3 == 1:<br/>      return false<br/>\u00a0<br/>    x = x div 3<br/>    y = y div 3<br/>\u00a0<br/>proc carpet(n) =<br/>  for i in 0 .. &lt;(3^n):<br/>    for j in 0 .. &lt;(3^n):<br/>      if inCarpet(i, j):<br/>        stdout.write \"* \"<br/>      else:<br/>        stdout.write \"  \"<br/>    echo \"\"<br/>\u00a0<br/>carpet(3)</pre>"}, {"lang": "Objeck", "loc": 29, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> SierpinskiCarpet <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    Carpet<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> InCarpet<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> y <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>x<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> y<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> y <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      x <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>      y <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Carpet<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    power <span class=\"sy0\">:=</span> <span class=\"nu0\">3.0</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Power</span><span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> power<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> power<span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        c <span class=\"sy0\">:=</span> InCarpet<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span>\u00a0? '<span class=\"sy0\">*</span>' <span class=\"sy0\">:</span> ' '<span class=\"sy0\">;</span><br/>        c<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 18, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> in_carpet x y <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">true</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> x <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span><br/>  <span class=\"kw1\">else</span> in_carpet <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>y <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">(* I define my own operator for integer exponentiation *)</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> <span class=\"br0\">(</span><span class=\"sy0\">^:</span><span class=\"br0\">)</span> a b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> b <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> a <span class=\"sy0\">^:</span> <span class=\"br0\">(</span>b <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> x <span class=\"sy0\">*</span> x<br/>  <span class=\"kw1\">else</span> a <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">^:</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> carpet n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">^:</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">^:</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> <span class=\"br0\">(</span><span class=\"kw1\">if</span> in_carpet i j <span class=\"kw1\">then</span> <span class=\"sy0\">'*'</span> <span class=\"kw1\">else</span> <span class=\"sy0\">'</span> <span class=\"sy0\">'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "Oforth", "loc": 15, "block": "<pre class=\"text highlighted_source\">: carpet(n) <br/>| dim i j k |<br/>   3 n pow -&gt;dim<br/>\u00a0<br/>   0 dim 1 - for: i [<br/>      0 dim 1 - for: j [<br/>          dim 3 / -&gt;k<br/>          while(k) [ <br/>             i k 3 * mod k / 1 == j k 3 * mod k / 1 == and ifTrue: [ break ]<br/>             k 3 / -&gt;k<br/>             ]<br/>          k ifTrue: [ \" \" ] else: [ \"#\" ] print<br/>          ]<br/>      printcr<br/>      ]\u00a0;</pre>"}, {"lang": "Order", "loc": 39, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8in_carpet ORDER_PP_FN( \\<br/>8fn(8X, 8Y, \\<br/>    8if(8or(8is_0(8X), 8is_0(8Y)), \\<br/>        8true, \\<br/>        8let((8Q, 8quotient(8X, 3)) \\<br/>             (8R, 8remainder(8X, 3)) \\<br/>             (8S, 8quotient(8Y, 3)) \\<br/>             (8T, 8remainder(8Y, 3)), \\<br/>             8and(8not(8and(8equal(8R, 1), 8equal(8T, 1))), \\<br/>                  8in_carpet(8Q, 8S))))) )</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8carpet ORDER_PP_FN( \\<br/>8fn(8N, \\<br/>    8lets((8R, 8seq_iota(0, 8pow(3, 8N))) \\<br/>          (8G, 8seq_map(8fn(8Y, 8seq_map(8fn(8X, 8pair(8X, 8Y)), \\<br/>                                         8R)), \\<br/>                        8R)), \\<br/>           8seq_map(8fn(8S, 8seq_map(8fn(8P, 8apply(8in_carpet, 8P)), \\<br/>                                     8S)), \\<br/>                    8G))) )</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8carpet_to_string ORDER_PP_FN( \\<br/>8fn(8C, \\<br/>    8seq_fold( \\<br/>      8fn(8R, 8S, \\<br/>          8adjoin(8R, \\<br/>                  8seq_fold(8fn(8P, 8B, 8adjoin(8P, 8if(8B, 8(\"#\"), 8(\" \")))), \\<br/>                            8nil, 8S), \\<br/>                  8(\"\\n\"))), \\<br/>      8nil, 8C)) )</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>ORDER_PP<span class=\"br0\">(</span> 8carpet_to_string<span class=\"br0\">(</span>8carpet<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Oz", "loc": 22, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% A carpet is a list of lines.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NextCarpet</span> Carpet<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Flatten<br/>      <span class=\"br0\">[</span><span class=\"br0\">{</span>Map Carpet XXX<span class=\"br0\">}</span><br/>       <span class=\"br0\">{</span>Map Carpet X_X<span class=\"br0\">}</span><br/>       <span class=\"br0\">{</span>Map Carpet XXX<span class=\"br0\">}</span><br/>      <span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">XXX</span> X<span class=\"br0\">}</span> X<span class=\"sy0\">#</span>X<span class=\"sy0\">#</span>X <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">X_X</span> X<span class=\"br0\">}</span> X<span class=\"sy0\">#</span><span class=\"br0\">{</span>Spaces <span class=\"br0\">{</span>VirtualString<span class=\"sy0\">.</span>length X<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">#</span>X <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Spaces</span> N<span class=\"br0\">}</span> <span class=\"kw1\">if</span> N <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> nil <span class=\"kw1\">else</span> <span class=\"re3\">&amp; </span><span class=\"sy0\">|</span><span class=\"br0\">{</span>Spaces N<span class=\"sy0\">-</span>1<span class=\"br0\">}</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> lazy <span class=\"br0\">{</span><span class=\"re1\">Iterate</span> F X<span class=\"br0\">}</span><br/>     X<span class=\"sy0\">|</span><span class=\"br0\">{</span>Iterate F <span class=\"br0\">{</span>F X<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  SierpinskiCarpets = <span class=\"br0\">{</span>Iterate NextCarpet <span class=\"br0\">[</span><span class=\"st0\">\"#\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"co1\">%% print all lines of the Sierpinski carpet of order 3</span><br/>  <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>Nth SierpinskiCarpets 4<span class=\"br0\">}</span> System<span class=\"sy0\">.</span>showInfo<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 33, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Improved simple plotting using matrix mat (color and scaling added). </span><br/><span class=\"co1\">\\\\ Matrix should be filled with 0/1. 7/6/16 aev</span><br/>iPlotmat<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span>clr<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>xz<span class=\"sy0\">=</span>#mat<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>yz<span class=\"sy0\">=</span>#mat<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>vx<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>vy<span class=\"sy0\">=</span>vx<span class=\"sy0\">,</span>xmin<span class=\"sy0\">,</span>xmax<span class=\"sy0\">,</span>ymin<span class=\"sy0\">,</span>ymax<span class=\"sy0\">,</span>c<span class=\"sy0\">=</span><span class=\"nu2\">0.625</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>yz<span class=\"sy0\">,</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>xz<span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>mat<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span><span class=\"sy0\">,</span> <span class=\"kw1\">listput</span><span class=\"br0\">(</span>vx<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">listput</span><span class=\"br0\">(</span>vy<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  xmin<span class=\"sy0\">=</span>listmin<span class=\"br0\">(</span>vx<span class=\"br0\">)</span><span class=\"sy0\">;</span> xmax<span class=\"sy0\">=</span>listmax<span class=\"br0\">(</span>vx<span class=\"br0\">)</span><span class=\"sy0\">;</span> ymin<span class=\"sy0\">=</span>listmin<span class=\"br0\">(</span>vy<span class=\"br0\">)</span><span class=\"sy0\">;</span> ymax<span class=\"sy0\">=</span>listmax<span class=\"br0\">(</span>vy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">plotinit</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">plotcolor</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>clr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">plotscale</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> xmin<span class=\"sy0\">,</span>xmax<span class=\"sy0\">,</span>ymin<span class=\"sy0\">,</span>ymax<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">plotpoints</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">Vec</span><span class=\"br0\">(</span>vx<span class=\"br0\">)</span><span class=\"sy0\">*</span>c<span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>vy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">plotdraw</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>xmin<span class=\"sy0\">,</span>ymin<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** matrix: \"</span><span class=\"sy0\">,</span>xz<span class=\"sy0\">,</span><span class=\"st0\">\"x\"</span><span class=\"sy0\">,</span>yz<span class=\"sy0\">,</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span>#vy<span class=\"sy0\">,</span><span class=\"st0\">\" DOTS\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">\\\\ iPlotV2(): Improved plotting from a file written by the wrtmat(). (color added)</span><br/><span class=\"co1\">\\\\ Saving possibly huge generation time if re-plotting needed.</span><br/>iPlotV2<span class=\"br0\">(</span>fn<span class=\"sy0\">,</span> clr<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>nf<span class=\"sy0\">,</span>vx<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>vy<span class=\"sy0\">=</span>vx<span class=\"sy0\">,</span>Vr<span class=\"sy0\">,</span>xmin<span class=\"sy0\">,</span>xmax<span class=\"sy0\">,</span>ymin<span class=\"sy0\">,</span>ymax<span class=\"sy0\">,</span>c<span class=\"sy0\">=</span><span class=\"nu2\">0.625</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  F<span class=\"sy0\">=</span>readstr<span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"sy0\">;</span> nf<span class=\"sy0\">=</span>#F<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Plotting from: \"</span><span class=\"sy0\">,</span> fn<span class=\"sy0\">,</span> <span class=\"st0\">\" - \"</span><span class=\"sy0\">,</span> nf<span class=\"sy0\">,</span> <span class=\"st0\">\" DOTS\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>nf<span class=\"sy0\">,</span> Vr<span class=\"sy0\">=</span>stok<span class=\"br0\">(</span>F<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">listput</span><span class=\"br0\">(</span>vx<span class=\"sy0\">,</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>Vr<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">listput</span><span class=\"br0\">(</span>vy<span class=\"sy0\">,</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>Vr<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  xmin<span class=\"sy0\">=</span>listmin<span class=\"br0\">(</span>vx<span class=\"br0\">)</span><span class=\"sy0\">;</span> xmax<span class=\"sy0\">=</span>listmax<span class=\"br0\">(</span>vx<span class=\"br0\">)</span><span class=\"sy0\">;</span> ymin<span class=\"sy0\">=</span>listmin<span class=\"br0\">(</span>vy<span class=\"br0\">)</span><span class=\"sy0\">;</span> ymax<span class=\"sy0\">=</span>listmax<span class=\"br0\">(</span>vy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">plotinit</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">plotcolor</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>clr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">plotscale</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> xmin<span class=\"sy0\">,</span>xmax<span class=\"sy0\">,</span>ymin<span class=\"sy0\">,</span>ymax<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/>  <span class=\"kw1\">plotpoints</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">Vec</span><span class=\"br0\">(</span>vx<span class=\"br0\">)</span><span class=\"sy0\">*</span>c<span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>vy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">plotdraw</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>xmin<span class=\"sy0\">,</span>ymin<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">\\\\ Are x,y inside Sierpinski carpet? (1-yes, 0-no) 6/10/16 aev  </span><br/>inSC<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>x<span class=\"sy0\">||!</span>y<span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span><span class=\"nu2\">3</span><span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">&amp;&amp;</span>y<span class=\"sy0\">%</span><span class=\"nu2\">3</span><span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    x<span class=\"sy0\">\\=</span><span class=\"nu1\">3</span><span class=\"sy0\">;</span> y<span class=\"sy0\">\\=</span><span class=\"nu1\">3</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\wend</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 51, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> SierpinskiCarpet<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> In_carpet<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">var</span><br/>    x<span class=\"sy1\">,</span> y<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">begin</span> <br/>    x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"sy1\">;</span><br/>    y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">true</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>y <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        In_carpet <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">else</span> <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>x <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>y <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">begin</span><br/>          In_carpet <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>          <span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>      y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> y <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Carpet<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span><span class=\"sy3\">**</span>n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span><span class=\"sy3\">**</span>n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> In_carpet<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>          <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Carpet<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@c</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'##'</span><span class=\"sy0\">;</span> <br/><span class=\"re0\">@c</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span> x <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"re0\">@c</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span> x <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">@c</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span> x <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"re0\">@c</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@c</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 27, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> carpet<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'#'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@c</span> <span class=\"br0\">{</span><br/>       <span class=\"br0\">[</span> <br/>        <span class=\"sy0\">|</span><span class=\"re0\">@c</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re0\">$_</span> <span class=\"kw1\">x</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>        <span class=\"sy0\">|</span><span class=\"re0\">@c</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">~</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"kw3\">trans</span><span class=\"br0\">(</span><span class=\"st_h\">'#'</span><span class=\"sy0\">=&gt;</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"sy0\">|</span><span class=\"re0\">@c</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re0\">$_</span> <span class=\"kw1\">x</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <br/>       <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> carpet<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Same as above, structured as an array bound to a sequence, with a separate sub for clarity.</span><br/><span class=\"kw2\">sub</span> weave <span class=\"br0\">(</span> <span class=\"re0\">@c</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"br0\">[</span><br/>    <span class=\"sy0\">|</span><span class=\"re0\">@c</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"kw1\">x</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">|</span><span class=\"re0\">@c</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">~</span> <span class=\"sy0\">.</span><span class=\"kw3\">trans</span><span class=\"br0\">(</span> <span class=\"st_h\">'#'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">' '</span> <span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">|</span><span class=\"re0\">@c</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"kw1\">x</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@carpet</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"st_h\">'#'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;weave</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">:</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">@carpet</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Output of both versions matches task example.</span></pre>"}, {"lang": "Phix", "loc": 19, "block": "<pre class=\"text highlighted_source\">constant order = 4<br/>\u00a0<br/>function InCarpet(atom x, atom y)<br/>    while x!=0 and y!=0 do<br/>        if floor(mod(x,3))=1 and floor(mod(y,3))=1 then<br/>            return ' '<br/>        end if<br/>        x /= 3<br/>        y /= 3<br/>    end while<br/>    return '#'<br/>end function<br/>\u00a0<br/>for i=0 to power(3,order)-1 do<br/>    for j=0 to power(3,order)-1 do<br/>        puts(1,InCarpet(i,j))<br/>    end for<br/>    puts(1,'\\n')<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(de carpet (N)<br/>   (let Carpet '(\"#\")<br/>      (do N<br/>         (setq Carpet<br/>            (conc<br/>               (mapcar '((S) (pack S S S)) Carpet)<br/>               (mapcar<br/>                  '((S) (pack S (replace (chop S) \"#\" \" \") S))<br/>                  Carpet )<br/>               (mapcar '((S) (pack S S S)) Carpet) ) ) ) ) )<br/>\u00a0<br/>(mapc prinl (carpet 3))</pre>"}, {"lang": "PL/I", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Sierpinski carpet */<br/>\u00a0<br/>Sierpinski_carpet: procedure options (main); /* 28 January 2013 */<br/>\u00a0<br/>  call carpet(3);<br/>\u00a0<br/>In_carpet: procedure (a, b) returns (bit(1));<br/>  declare (a, b) fixed binary nonassignable;<br/>  declare (x, y) fixed binary;<br/>  declare (true value ('1'b), false value ('0'b)) bit (1);<br/>\u00a0<br/>   x = a\u00a0; y = b;<br/>   do forever; <br/>      if x = 0 | y = 0 then<br/>         return (true);<br/>      else if mod(x, 3) = 1 &amp; mod(y, 3) = 1 then<br/>         return (false);<br/>      x = x / 3;<br/>      y = y / 3;<br/>   end;<br/>end in_carpet;<br/>\u00a0<br/>Carpet: procedure (n);<br/>  declare n fixed binary nonassignable;<br/>  declare (i, j) fixed binary;<br/>\u00a0<br/>  do i = 0 to 3**n - 1;<br/>     do j = 0 to 3**n - 1;<br/>        if In_carpet(i, j) then<br/>           put edit ('#') (a);<br/>        else<br/>           put edit (' ') (a);<br/>     end;<br/>     put skip;<br/>  end;<br/>end Carpet;<br/>end Sierpinski_carpet;<br/>\u00a0</pre>"}, {"lang": "PostScript", "loc": 20, "block": "<pre class=\"text highlighted_source\">%!PS-Adobe-3.0<br/>%%BoundingBox 0 0 300 300<br/>\u00a0<br/>/r { moveto 0 -1 1 0 0 1 3 { rlineto } repeat closepath fill } def<br/>/serp { gsave<br/>        3 1 roll translate<br/>        1 3 div dup scale<br/>        1 1 r<br/>        dup 1 sub dup 0 eq not {<br/>                0 0 0 1 0 2 1 0 1 2 2 0 2 1 2 2 17 -1 roll 8 { serp } repeat<br/>        } if pop<br/>        grestore<br/>} def<br/>\u00a0<br/>300 300 scale 0 0 r 1 setgray<br/>\u00a0<br/>0 0 5 serp<br/>\u00a0<br/>pop showpage<br/>%%EOF</pre>"}, {"lang": "PowerShell", "loc": 17, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Draw<span class=\"sy0\">-</span>SierpinskiCarpet <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$Carpet</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span> <span class=\"st0\">'#'</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$S</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Row</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$S</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"re0\">$Carpet</span><span class=\"br0\">[</span><span class=\"re0\">$Row</span><span class=\"sy0\">+</span><span class=\"re0\">$S</span><span class=\"sy0\">+</span><span class=\"re0\">$S</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Carpet</span><span class=\"br0\">[</span><span class=\"re0\">$Row</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><br/>            <span class=\"re0\">$Carpet</span><span class=\"br0\">[</span><span class=\"re0\">$Row</span><span class=\"sy0\">+</span><span class=\"re0\">$S</span><span class=\"br0\">]</span>    <span class=\"sy0\">=</span> <span class=\"re0\">$Carpet</span><span class=\"br0\">[</span><span class=\"re0\">$Row</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">*</span> <span class=\"re0\">$Carpet</span><span class=\"br0\">[</span><span class=\"re0\">$Row</span><span class=\"br0\">]</span>.Length <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Carpet</span><span class=\"br0\">[</span><span class=\"re0\">$Row</span><span class=\"br0\">]</span><br/>            <span class=\"re0\">$Carpet</span><span class=\"br0\">[</span><span class=\"re0\">$Row</span><span class=\"br0\">]</span>       <span class=\"sy0\">=</span> <span class=\"re0\">$Carpet</span><span class=\"br0\">[</span><span class=\"re0\">$Row</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"re0\">$Carpet</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>Draw<span class=\"sy0\">-</span>SierpinskiCarpet <span class=\"nu0\">3</span></pre>"}, {"lang": "PureBasic", "loc": 23, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> in_carpet<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> x<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">And</span> y<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">If</span> x<span class=\"sy0\">%</span>3<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">And</span> y<span class=\"sy0\">%</span>3<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #False<br/>    <span class=\"kw1\">EndIf</span><br/>    y<span class=\"sy0\">/</span><span class=\"nu0\">3</span>: x<span class=\"sy0\">/</span><span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Wend</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> carpet<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i, j, l<span class=\"sy0\">=</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> l<br/>    <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> l<br/>      <span class=\"kw1\">If</span> in_carpet<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><br/>        <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Else</span><br/>        <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> in_carpet<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">if</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>        <span class=\"kw1\">elif</span> x\u00a0% <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> y\u00a0% <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/>        x /<span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>        y /<span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw1\">def</span> carpet<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> ** n<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> ** n<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> in_carpet<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">print</span> <span class=\"st0\">'*'</span><span class=\"sy0\">,</span><br/>            <span class=\"kw1\">else</span>:<br/>                <span class=\"kw1\">print</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span><br/>        <span class=\"kw1\">print</span></pre>"}, {"lang": "R", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## Are x,y inside Sierpinski carpet (and where)? (1-yes, 0-no)<br/>inSC &lt;- function(x, y) {<br/>  while(TRUE) {<br/>    if(!x||!y) {return(1)}<br/>    if(x%%3==1&amp;&amp;y%%3==1) {return(0)}<br/>    x=x%/%3; y=y%/%3;<br/>  } return(0);<br/>}<br/>## Plotting Sierpinski carpet fractal. aev 4/1/17<br/>## ord - order, fn - file name, ttl - plot title, clr - color<br/>pSierpinskiC &lt;- function(ord, fn=\"\", ttl=\"\", clr=\"navy\") {<br/>  m=640; abbr=\"SCR\"; dftt=\"Sierpinski carpet fractal\";<br/>  n=3^ord-1; M &lt;- matrix(c(0), ncol=n, nrow=n, byrow=TRUE);<br/>  cat(\" *** START\", abbr, date(), \"\\n\");<br/>  if(fn==\"\") {pf=paste0(abbr,\"o\", ord)} else {pf=paste0(fn, \".png\")};<br/>  if(ttl!=\"\") {dftt=ttl}; ttl=paste0(dftt,\", order \", ord);<br/>  cat(\" *** Plot file:\", pf,\".png\", \"title:\", ttl, \"\\n\");<br/>  for(i in 0:n) {<br/>    for(j in 0:n) {if(inSC(i,j)) {M[i,j]=1}<br/>  }}<br/>  plotmat(M, pf, clr, ttl);<br/>  cat(\" *** END\", abbr, date(), \"\\n\");<br/>}  <br/>## Executing:<br/>pSierpinskiC(5);<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program draws any order Sierpinski carpet (order 20 would be \u2248 3.4Gx3.4G carpet).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N char <span class=\"sy0\">.</span>                               <span class=\"coMULTI\">/*get the  order  of the carpet.       */</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span>  N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">3</span>                    <span class=\"coMULTI\">/*if none specified, then assume  3.   */</span><br/><span class=\"kw1\">if</span> char==<span class=\"st0\">''</span>          <span class=\"kw3\">then</span> char=<span class=\"st0\">\"*\"</span>               <span class=\"coMULTI\">/*use the default of an asterisk  (*). */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span>==<span class=\"nu0\">2</span>   <span class=\"kw3\">then</span> char=<span class=\"kw6\">x2c</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*it was specified in hexadecimal char.*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span>==<span class=\"nu0\">3</span>   <span class=\"kw3\">then</span> char=<span class=\"kw6\">d2c</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span>         <span class=\"coMULTI\">/* \"  \"      \"      \" decimal character*/</span><br/>width=linesize<span class=\"br0\">(</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*the width of the terminal screen.    */</span><br/><span class=\"kw1\">if</span> N<span class=\"sy0\">&gt;</span><span class=\"nu0\">18</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">100</span>                 <span class=\"coMULTI\">/*just in case the user went  ka\u2500razy. */</span><br/>nnn=<span class=\"nu0\">3</span><span class=\"sy0\">**</span>N                                         <span class=\"coMULTI\">/* [\u2193]  NNN  is the  cube of  N.       */</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span>   j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> nnn;   z=                        <span class=\"coMULTI\">/*Z:    is the line to be displayed.   */</span><br/>    <span class=\"kw1\">do</span> k=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> nnn;   jj=j;   kk=k;   x=char<br/>      <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>  jj<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"sy0\">&amp;</span>  kk<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>               <span class=\"coMULTI\">/*one symbol for a  not (\u00ac)  is a   \\  */</span><br/>      <span class=\"kw1\">if</span> jj<span class=\"sy0\">//</span><span class=\"nu0\">3</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> kk<span class=\"sy0\">//</span><span class=\"nu0\">3</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>     <span class=\"coMULTI\">/*in REXX:    //  \u2261  division remainder*/</span><br/>                                          x=<span class=\"st0\">' '</span>  <span class=\"coMULTI\">/*use a blank for this display line.   */</span><br/>                                          <span class=\"kw1\">leave</span>  <span class=\"coMULTI\">/*LEAVE   terminates this   DO  WHILE. */</span><br/>                                          <span class=\"kw3\">end</span><br/>      jj=jj%3;      kk=kk%3                      <span class=\"coMULTI\">/*in REXX:    \u00a0%  \u2261  integer division. */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span><br/>\u00a0<br/>    z=z <span class=\"sy0\">||</span> x                                     <span class=\"coMULTI\">/*xChar  is either  black  or  white.  */</span><br/>    <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*k*/</span>                                <span class=\"coMULTI\">/* [\u2191]    \"    \"      \"     \"  blank.  */</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>width  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> z                 <span class=\"coMULTI\">/*display the line if it fits on screen*/</span><br/>  <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> <span class=\"st0\">'Sierpinski.'</span>N, z                 <span class=\"coMULTI\">/*also, write the line to a (disk) file*/</span><br/>  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*j*/</span>                                <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (carpet n)<br/>  (if (zero? n)<br/>    '(\"#\")<br/>    (let* ([prev   (carpet (sub1 n))]<br/>           [spaces (regexp-replace* #rx\"#\" (car prev) \" \")])<br/>      (append (map (\u03bb(x) (~a x x x)) prev)<br/>              (map (\u03bb(x) (~a x spaces x)) prev)<br/>              (map (\u03bb(x) (~a x x x)) prev)))))<br/>(for-each displayln (carpet 3))<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 58, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"guilib.ring\"<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                   etwindowtitle(\"drawing using qpainter\")<br/>                   setgeometry(100,100,500,500)<br/>               label1 = new qlabel(win1) {<br/>                        setgeometry(10,10,400,400)<br/>                        settext(\"\")<br/>               }<br/>               new qpushbutton(win1) {<br/>                   setgeometry(200,450,100,30)<br/>                   settext(\"draw\")<br/>                   setclickevent(\"draw()\")<br/>               }<br/>               show()<br/>         }<br/>         exec()<br/>         }<br/>\u00a0<br/>func draw<br/>     p1 = new qpicture()<br/>          color = new qcolor() {<br/>          setrgb(0,0,255,255)<br/>     }<br/>     pen = new qpen() {<br/>           setcolor(color)<br/>           setwidth(1)<br/>     }<br/>     new qpainter() {<br/>         begin(p1)<br/>         setpen(pen)<br/>\u00a0<br/>         order = 3<br/>         side = pow(3,order)<br/>         for y = 0 to side-1<br/>             for x = 0 to side-1<br/>                 if carpet(self,x,y)<br/>                    drawpoint(x*16,y*16+15) <br/>                    drawpoint(x*16+1,y*16+16)<br/>                    drawpoint(x*16+2,y*16+17) ok<br/>             next<br/>         next<br/>\u00a0<br/>         endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>\u00a0<br/>        func carpet myObj,x,y<br/>             myObj{while x!=0 and y!=0<br/>                         if x\u00a0% 3 = 1 if y\u00a0% 3 = 1 return false ok ok<br/>                         x = floor(x/3)<br/>                         y = floor(y/3)<br/>                   end <br/>                   return true}<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> sierpinski_carpet<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  carpet = <span class=\"br0\">[</span><span class=\"st0\">\"#\"</span><span class=\"br0\">]</span><br/>  n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>    carpet = carpet.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> x<span class=\"br0\">}</span> <span class=\"sy0\">+</span><br/>             carpet.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">+</span> x.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">\"#\"</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">}</span> <span class=\"sy0\">+</span><br/>             carpet.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> x<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>  carpet<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"nu0\">4</span>.<span class=\"me1\">times</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>N=#{i}\"</span>, sierpinski_carpet<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> nextCarpet<span class=\"br0\">(</span>carpet<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>  carpet.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x + x + x<span class=\"br0\">)</span> <span class=\"sy0\">:::</span><br/>  carpet.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x + x.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'#'</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span> + x<span class=\"br0\">)</span> <span class=\"sy0\">:::</span><br/>  carpet.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x + x + x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sierpinskiCarpets<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Iterator.<span class=\"me1\">iterate</span><span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>nextCarpet<span class=\"br0\">)</span> drop n next<span class=\"br0\">)</span> foreach println</pre>"}, {"lang": "Scheme", "loc": 15, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>carpet n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>carpet? x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              #t<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> y <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              #f<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>              <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>carpet? <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> x <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> y <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> i <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">3</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> j <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> j <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">3</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>carpet? i j<span class=\"br0\">)</span><br/>                   #\\<span class=\"sy0\">*</span><br/>                   #\\space<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 37, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: inCarpet (in var integer: x, in var integer: y) is func<br/>  result<br/>    var boolean: result is TRUE;<br/>  begin<br/>    while result and x &lt;&gt; 0 and y &lt;&gt; 0 do<br/>      if x rem 3 = 1 and y rem 3 = 1 then<br/>        result\u00a0:= FALSE;<br/>      else<br/>        x\u00a0:= x div 3;<br/>        y\u00a0:= y div 3;<br/>      end if;<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: carpet (in integer: n) is func<br/>  local<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>  begin<br/>    for i range 0 to pred(3 ** n) do<br/>      for j range 0 to pred(3 ** n) do<br/>        if inCarpet(i, j) then<br/>          write(\"#\");<br/>        else<br/>          write(\" \");<br/>        end if;<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    carpet(3);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">var c = <span class=\"br0\">[</span><span class=\"st0\">'##'</span><span class=\"br0\">]</span><br/><span class=\"nu0\">3</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>    c = <span class=\"br0\">(</span>c.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span>             <span class=\"sy0\">+</span><br/>         c.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">+</span> <span class=\"st0\">' '</span><span class=\"sy0\">*</span>x.<span class=\"me1\">len</span> <span class=\"sy0\">+</span> x <span class=\"br0\">}</span> <span class=\"sy0\">+</span><br/>         c.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>say c.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\"> 10 LET O=3<br/> 20 LET S=3**O<br/> 30 FOR I=0 TO S-1<br/> 40 FOR J=0 TO S-1<br/> 50 LET X=J<br/> 60 LET Y=I<br/> 70 GOSUB 120<br/> 80 IF C THEN PLOT J,I<br/> 90 NEXT J<br/>100 NEXT I<br/>110 GOTO 190<br/>120 LET C=0<br/>130 IF X-INT (X/3)*3=1 AND Y-INT (Y/3)*3=1 THEN RETURN<br/>140 LET X=INT (X/3)<br/>150 LET Y=INT (Y/3)<br/>160 IF X&gt;0 OR Y&gt;0 THEN GOTO 130<br/>170 LET C=1<br/>180 RETURN</pre>"}, {"lang": "Swift", "loc": 17, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>func sierpinski_carpet(n:Int) -&gt; String {<br/>    func middle(str:String) -&gt; String {<br/>        let spacer = str.stringByReplacingOccurrencesOfString(\"#\", withString:\" \", options:nil, range:nil)<br/>        return str + spacer + str<br/>    }<br/>\u00a0<br/>    var carpet = [\"#\"]<br/>    for i in 1...n {<br/>        let a = carpet.map{$0 + $0 + $0}<br/>        let b = carpet.map(middle)<br/>        carpet = a + b + a<br/>    }<br/>    return \"\\n\".join(carpet)<br/>}<br/>\u00a0<br/>println(sierpinski_carpet(3))</pre>"}, {"lang": "Tcl", "loc": 22, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> map <span class=\"br0\">{</span>lambda <span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> elem <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$elem</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> sierpinski_carpet n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> carpet <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"st0\">\"#\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> carpet <span class=\"br0\">[</span><span class=\"kw2\">concat</span> \\<br/>            <span class=\"br0\">[</span>map <span class=\"br0\">{</span>x <span class=\"br0\">{</span><span class=\"kw2\">subst</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"re0\">$x</span><span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$carpet</span><span class=\"br0\">]</span> \\<br/>            <span class=\"br0\">[</span>map <span class=\"br0\">{</span>x <span class=\"br0\">{</span><span class=\"kw2\">subst</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"st0\">\"#\"</span> <span class=\"st0\">\" \"</span><span class=\"br0\">}</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$carpet</span><span class=\"br0\">]</span> \\<br/>            <span class=\"br0\">[</span>map <span class=\"br0\">{</span>x <span class=\"br0\">{</span><span class=\"kw2\">subst</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"re0\">$x</span><span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$carpet</span><span class=\"br0\">]</span> \\<br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$carpet</span> \\n<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>sierpinski_carpet <span class=\"nu0\">3</span><span class=\"br0\">]</span></pre>"}, {"lang": "uBasic/4tH", "loc": 29, "block": "<pre class=\"text highlighted_source\">Input \"Carpet order: \";n<br/>\u00a0<br/>l = (3^n) - 1<br/>For i = 0 To l<br/>  For j = 0 To l<br/>    Push i,j<br/>    Gosub 100<br/>    If Pop() Then<br/>      Print \"#\";<br/>    Else<br/>      Print \" \";<br/>    EndIf<br/>  Next<br/>  Print<br/>Next<br/>End<br/>\u00a0<br/>100 y = Pop(): x = Pop()\u00a0: Push 1<br/>\u00a0<br/>    Do While (x &gt; 0) * (y &gt; 0)<br/>      If (x\u00a0% 3 = 1) * (y\u00a0% 3 = 1) Then<br/>         Push (Pop() - 1)<br/>         Break<br/>      EndIf<br/>      y = y / 3<br/>      x = x / 3<br/>    Loop<br/>\u00a0<br/>    Return</pre>"}, {"lang": "UNIX Shell", "loc": 11, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/bash</span><br/>\u00a0<br/>sierpinski_carpet<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> <span class=\"re2\">n</span>=<span class=\"st0\">\"<span class=\"es3\">${1:-3}</span>\"</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">carpet</span>=<span class=\"st0\">\"<span class=\"es3\">${2:-#}</span>\"</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> n-- <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>       <span class=\"kw3\">local</span> <span class=\"re2\">center</span>=<span class=\"st0\">\"<span class=\"es3\">${carpet//#/ }</span>\"</span><br/>       <span class=\"re2\">carpet</span>=<span class=\"st0\">\"<span class=\"es4\">$(paste -d ' ' &lt;(echo \"$carpet\"$'\\n'\"$carpet\"$'\\n'\"$carpet\")</span>  &lt;(echo \"</span><span class=\"re1\">$carpet</span><span class=\"st0\">\"$'<span class=\"es1\">\\n</span>'\"</span><span class=\"re1\">$center</span><span class=\"st0\">\"$'<span class=\"es1\">\\n</span>'\"</span><span class=\"re1\">$carpet</span><span class=\"st0\">\")  &lt;(echo \"</span><span class=\"re1\">$carpet</span><span class=\"st0\">\"$'<span class=\"es1\">\\n</span>'\"</span><span class=\"re1\">$carpet</span><span class=\"st0\">\"$'<span class=\"es1\">\\n</span>'\"</span><span class=\"re1\">$carpet</span><span class=\"st0\">\"))\"</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$carpet</span>\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>carpet = ~&amp;a^?\\&lt;&lt;&amp;&gt;&gt;! (-*&lt;7,5,7&gt;; *=DS ~&amp;K7+ ~&amp;B**DS*=rlDS)^|R/~&amp; predecessor<br/>\u00a0<br/>#show+<br/>\u00a0<br/>test = mat0 ~&amp;?(`#!,`\u00a0!)*** carpet* &lt;0,1,2,3&gt;</pre>"}, {"lang": "VBScript", "loc": 32, "block": "<pre class=\"text highlighted_source\">Function InCarpet(i,j)<br/>\tIf i &gt; 0 And j &gt; 0 Then<br/>\t\tDo While i &gt; 0 And j &gt; 0<br/>\t\t\tIf i Mod 3 = 1 And j Mod 3 = 1 Then<br/>\t\t\t\tInCarpet = \" \"<br/>\t\t\t\tExit Do<br/>\t\t\tElse<br/>\t\t\t\tInCarpet = \"#\"<br/>\t\t\tEnd If<br/>\t\t\t\ti = Int(i / 3)<br/>\t\t\t\tj = Int(j / 3)<br/>\t\tLoop<br/>\tElse<br/>\t\tInCarpet = \"#\"<br/>\tEnd If<br/>End Function<br/>\u00a0<br/>Function Carpet(n)<br/>\tk = 3^n - 1<br/>\tx2 = 0<br/>\ty2 = 0<br/>\tFor y = 0 To k<br/>\t\tFor x = 0 To k<br/>\t\t\tx2 = x<br/>\t\t\ty2 = y<br/>\t\t\tWScript.StdOut.Write InCarpet(x2,y2)<br/>\t\tNext<br/>\t\tWScript.StdOut.WriteBlankLines(1)<br/>\tNext<br/>End Function<br/>\u00a0<br/>Carpet(WScript.Arguments(0))</pre>"}, {"lang": "X86 Assembly", "loc": 160, "block": "<pre class=\"asm highlighted_source\"><span class=\"co1\">;x86-64 assembly code for Microsoft Windows</span><br/><span class=\"co1\">;Tested in windows 7 Enterprise Service Pack 1 64 bit</span><br/><span class=\"co1\">;With the AMD FX(tm)-6300 processor</span><br/><span class=\"co1\">;Assembled with NASM version 2.11.06 </span><br/><span class=\"co1\">;Linked to C library with gcc version 4.9.2 (x86_64-win32-seh-rev1, Built by MinGW-W64 project)</span><br/>\u00a0<br/><span class=\"co1\">;Assembled and linked with the following commands:</span><br/><span class=\"co1\">;nasm -f win64 &lt;filename&gt;.asm -o &lt;filename&gt;.obj</span><br/><span class=\"co1\">;gcc &lt;filename&gt;.obj -o &lt;filename&gt;</span><br/>\u00a0<br/><span class=\"co1\">;Takes magnitude of Sierpinski Carpet as command line argument.</span><br/>\u00a0<br/><span class=\"kw5\">extern</span> atoi<span class=\"sy1\">,</span>puts<span class=\"sy1\">,</span>putchar<span class=\"sy1\">,</span>exit<br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"kw5\">.data</span><br/>errmsg_noarg<span class=\"sy1\">:</span> <span class=\"kw5\">db</span> <span class=\"st0\">\"Magnitude of Sierpinski Carpet was not specified.\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/>errmsg_argnumber<span class=\"sy1\">:</span> <span class=\"kw5\">db</span> <span class=\"st0\">\"There should be no more than one argument.\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"kw5\">.bss</span><br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"kw5\">.text</span><br/><span class=\"kw5\">global</span> main<br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"co1\">;check for argument</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">jle</span> err_noarg<br/>\u00a0<br/><span class=\"co1\">;ensure that only one argument was entered</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">jg</span> err_argnumber<br/>\u00a0<br/><span class=\"co1\">;column in rsi</span><br/><span class=\"co1\">;row in rdi</span><br/><span class=\"co1\">;x in r8</span><br/><span class=\"co1\">;y in r9</span><br/><span class=\"co1\">;width in r13</span><br/><span class=\"co1\">;magic number in r14</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r14</span><span class=\"sy1\">,</span><span class=\"nu0\">2863311531</span><br/>\u00a0<br/><span class=\"co1\">;get magnitude in rbx from first arg</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw4\">rdx</span> <span class=\"sy1\">+</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><br/><span class=\"kw1\">call</span> atoi<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/>\u00a0<br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">jz</span> magnitude_zero <br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;determine dimensions of square</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/>\u00a0<br/>find_width<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">lea</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw4\">rax</span> <span class=\"sy1\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">dec</span> <span class=\"kw4\">rbx</span><br/><span class=\"kw1\">jg</span> find_width<br/>\u00a0<br/><span class=\"kw1\">sub</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r13</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/>\u00a0<br/>\u00a0<br/>next_row<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rsi</span><span class=\"sy1\">,</span><span class=\"kw4\">r13</span><br/>\u00a0<br/>fill_row<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"co1\">;x in r8, y in r9</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r8</span><span class=\"sy1\">,</span><span class=\"kw4\">rsi</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r9</span><span class=\"sy1\">,</span><span class=\"kw4\">rdi</span><br/>\u00a0<br/>is_filled<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"co1\">;if(x%3==1 &amp;&amp; y%3==1)</span><br/><span class=\"co1\">;x%3 in rbx</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"kw4\">r8</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span><span class=\"kw4\">r8</span><br/><span class=\"kw1\">mul</span> <span class=\"kw4\">r14</span><br/><span class=\"kw1\">shr</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"nu0\">33</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r8</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/><span class=\"kw1\">lea</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw4\">rax</span> <span class=\"sy1\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/><span class=\"kw1\">sub</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/>\u00a0<br/><span class=\"co1\">;y%3 in rcx</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"kw4\">r9</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"kw4\">r9</span><br/><span class=\"kw1\">mul</span> <span class=\"kw4\">r14</span><br/><span class=\"kw1\">shr</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"nu0\">33</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">r9</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/><span class=\"kw1\">lea</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw4\">rax</span> <span class=\"sy1\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/><span class=\"kw1\">sub</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"kw4\">rax</span><br/>\u00a0<br/><span class=\"co1\">;x%3==1 &amp;&amp; y%3==1</span><br/><span class=\"kw1\">xor</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">xor</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">or</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span><span class=\"kw4\">rcx</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"st0\">' '</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">jz</span> dont_fill<br/>\u00a0<br/><span class=\"co1\">;x&gt;0 || y&gt;0</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"kw4\">r8</span><br/><span class=\"kw1\">or</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"kw4\">r9</span><br/><span class=\"kw1\">cmp</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">jg</span> is_filled<br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"st0\">'#'</span><br/>dont_fill<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">call</span> putchar<br/>\u00a0<br/><span class=\"kw1\">dec</span> <span class=\"kw4\">rsi</span><br/><span class=\"kw1\">jge</span> fill_row<br/>\u00a0<br/><span class=\"co1\">;put newline at the end of each row</span><br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">0xa</span><br/><span class=\"kw1\">call</span> putchar<br/>\u00a0<br/><span class=\"kw1\">dec</span> <span class=\"kw4\">rdi</span><br/><span class=\"kw1\">jge</span> next_row<br/>\u00a0<br/><span class=\"kw1\">xor</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"kw4\">rcx</span><br/><span class=\"kw1\">call</span> exit<br/>\u00a0<br/>magnitude_zero<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"st0\">'#'</span><br/><span class=\"kw1\">call</span> putchar<br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">0xa</span><br/><span class=\"kw1\">call</span> putchar<br/>\u00a0<br/><span class=\"kw1\">xor</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"kw4\">rcx</span><br/><span class=\"kw1\">call</span> exit<br/>\u00a0<br/><span class=\"co1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br/><span class=\"co1\">;error message</span><br/>\u00a0<br/>err_noarg<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span>errmsg_noarg<br/><span class=\"kw1\">call</span> puts<br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">call</span> exit<br/>\u00a0<br/>\u00a0<br/>err_argnumber<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span>errmsg_argnumber<br/><span class=\"kw1\">call</span> puts<br/>\u00a0<br/><span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">call</span> exit</pre>"}, {"lang": "XPL0", "loc": 19, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>proc DrawPat(X0, Y0, S);        \\Draw 3x3 pattern with hole in middle<br/>int  X0, Y0, S;                 \\coordinate of upper-left corner, size<br/>int  X, Y;<br/>[for Y:= 0 to 2 do<br/>    for X:= 0 to 2 do<br/>        if X#1 or Y#1 then      \\don't draw middle pattern<br/>           [if S&gt;1 then         \\recurse<br/>                DrawPat(X*S+X0, Y*S+Y0, S/3)<br/>           else Point(X+X0, Y+Y0, 4\\red\\);<br/>           ];<br/>];<br/>\u00a0<br/>[SetVid($13);                   \\set 320x200 graphic video mode<br/>DrawPat(0, 0, 3*3*3);           \\draw Sierpinski carpet<br/>if ChIn(1) then [];             \\wait for keystroke<br/>SetVid($3);                     \\restore normal text mode<br/>]</pre>"}, {"lang": "Yabasic", "loc": 49, "block": "<pre class=\"text highlighted_source\">sub sp$(n)<br/>\tlocal i, s$<br/>\u00a0<br/>\tfor i = 1 to n<br/>\t\ts$ = s$ + \" \"<br/>\tnext i<br/>\treturn s$<br/>end sub<br/>\u00a0<br/>sub replace$(s$, cf$, cr$)<br/>\tlocal i, p<br/>\u00a0<br/>\tdo<br/>\t\ti = instr(s$, cf$, p)<br/>\t\tif not i break<br/>\t\tmid$(s$, i, 1) = cr$<br/>\t\tp = i<br/>\tloop<br/>\treturn s$<br/>end sub<br/>\u00a0<br/>sub foreach$(carpet$, p$, m)<br/>\tlocal n, i, t$(1)<br/>\u00a0<br/>\tn = token(carpet$, t$(), \",\")<br/>\u00a0<br/>\tfor i = 1 to n<br/>\t\tswitch(m)<br/>\t\tcase 0:\tp$ = p$ + \",\" + t$(i) + t$(i) + t$(i)\u00a0: break<br/>\t\tcase 1: p$ = p$ + \",\" + t$(i) + sp$(len(t$(i))) + t$(i)\u00a0: break<br/>\t\tdefault: error \"Method not found!\"\u00a0: break<br/>\t\tend switch<br/>\tnext i<br/>\treturn p$<br/>end sub<br/>\u00a0<br/>sub sierpinskiCarpet$(n)<br/>    local carpet$, next$, i<br/>\u00a0<br/>    carpet$ = \"@\"<br/>    for i = 1 to n<br/>        next$ = foreach$(carpet$, \"\")<br/>        next$ = foreach$(carpet$, next$, 1)<br/>        carpet$ = foreach$(carpet$, next$)<br/>    next i<br/>    return carpet$<br/>end sub<br/>\u00a0<br/>print replace$(sierpinskiCarpet$(3), \",\", \"\\n\")</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn drawPat(x0,y0,s,img){  // Draw 3x3 pattern with hole in middle<br/>   foreach y,x in (3,3){<br/>      if(x.isEven or y.isEven){\t// don't draw middle pattern<br/>\t if(s&gt;1) self.fcn(x*s + x0, y*s + y0, s/3, img);\t// recurse<br/>\t else img[x + x0, y + y0]=0xff0000; // red<br/>      }<br/>   }<br/>}</pre>"}]}