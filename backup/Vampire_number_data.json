{"task": "Vampire_number", "blocks": [{"lang": "AutoHotkey", "loc": 74, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"co1\">; used to improve performance</span><br/><span class=\"co1\">; (you can make it much faster by removing the informative tooltips)</span><br/>\u00a0<br/><span class=\"co1\">;********************</span><br/><span class=\"co1\">; CONFIG</span><br/><span class=\"co1\">;********************</span><br/>StartingNumber <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span><br/>NumberLimit <span class=\"sy0\">:=</span> <span class=\"nu0\">126030</span><br/>CounterLimit <span class=\"sy0\">:=</span> <span class=\"nu0\">25</span> <span class=\"co1\">; calculations stop when one of these limits is reached</span><br/>AdditionalNumbers <span class=\"sy0\">:=</span> <span class=\"st0\">\"16758243290880,24959017348650,14593825548650\"</span><br/><span class=\"co1\">;********************</span><br/>\u00a0<br/>CurrentCounter <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> CurrentNumber <span class=\"sy0\">:=</span> StartingNumber<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span><span class=\"nu0\">75</span><span class=\"br0\">)</span> <span class=\"co1\">; informative tooltip (every 75 calculations, to avoid slowing down)</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/ToolTip.htm\"><span class=\"kw3\">ToolTip</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Checking numbers...`nNumber: \"</span> CurrentNumber<br/>            <span class=\"sy0\">.</span> <span class=\"st0\">\"/\"</span> NumberLimit <span class=\"st0\">\"`nFound: \"</span> CurrentCounter <span class=\"st0\">\"/\"</span> CounterLimit<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> CurrentCounter <span class=\"sy0\">&gt;=</span> CounterLimit <span class=\"br0\">)</span> || <span class=\"br0\">(</span> CurrentNumber <span class=\"sy0\">&gt;=</span> NumberLimit <span class=\"br0\">)</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>CurrentNumber<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        CurrentNumber <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> CurrentResult <span class=\"sy0\">:=</span> GetFangs<span class=\"br0\">(</span>CurrentNumber<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><br/>        Output <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> CurrentNumber <span class=\"st0\">\":`t\"</span> CurrentResult<span class=\"sy0\">,</span> CurrentCounter<span class=\"sy0\">++</span><br/>    CurrentNumber<span class=\"sy0\">++</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ToolTip.htm\"><span class=\"kw3\">ToolTip</span></a> <span class=\"co1\">; hide informative tooltip</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Output<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">; show output (first part)</span><br/>\u00a0<br/>Output <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> AdditionalNumbers<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\",\"</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/ToolTip.htm\"><span class=\"kw3\">ToolTip</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Getting fangs for \"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\" ...\"</span> <span class=\"co1\">; informative tooltip</span><br/>    Output <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\":`n`t\"</span> GetFangs<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ToolTip.htm\"><span class=\"kw3\">ToolTip</span></a> <span class=\"co1\">; hide informative tooltip</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Output<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">; show output (second part - additional numbers)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/><span class=\"co1\">;----------------------------------------------------------------------------------</span><br/>\u00a0<br/>CharSorter<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">Input</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; required by GetFangs()</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">Input</span></a><br/>        Output <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\"`n\"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> Output<br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> Output<span class=\"sy0\">,</span> Output<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,,</span> All<br/>    <span class=\"kw1\">Return</span> Output<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;----------------------------------------------------------------------------------</span><br/>\u00a0<br/>GetFangs<span class=\"br0\">(</span>CurrentNumber<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; requires CharSorter()</span><br/>    ResultIndex <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>    Length <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>CurrentNumber<span class=\"br0\">)</span><br/>    Power <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>Length<span class=\"sy0\">//</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>Length<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span>\u00a0!Power<br/>        <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span><br/>    NumberLimit <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sqrt</span></a><span class=\"br0\">(</span>CurrentNumber<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Lower <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">**</span> Power<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% NumberLimit <span class=\"sy0\">-</span> Lower <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>CurrentNumber<span class=\"sy0\">,</span>Lower<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            FactorTwo <span class=\"sy0\">:=</span> CurrentNumber<span class=\"sy0\">//</span>Lower<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>Lower<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>FactorTwo<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span><br/>            Check <span class=\"sy0\">:=</span> CharSorter<span class=\"br0\">(</span> Lower <span class=\"sy0\">.</span> FactorTwo <span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CharSorter<span class=\"br0\">(</span>CurrentNumber<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Check<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>Lower<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>FactorTwo<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                Output <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n`t[\"</span> Lower <span class=\"st0\">\",\"</span> FactorTwo <span class=\"st0\">\"]\"</span><br/>        <span class=\"br0\">}</span><br/>        Lower<span class=\"sy0\">++</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Output<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"co1\">; 3 = 1 + length of \"`n`t\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Bracmat", "loc": 61, "block": "<pre class=\"text highlighted_source\">( ( vampire<br/>  =   N len R fangsList<br/>    .  \u00a0!arg:@(?N:? [?len)<br/>      &amp; 1/2*!len:~/:?len<br/>      &amp; ( R<br/>        =     len numpart left right allowed fangs rdigits<br/>            , tried digit untried head tail found<br/>          .  \u00a0!arg:(?len.?left.?numpart.?allowed)<br/>            &amp;\u00a0:?found<br/>            &amp; (  \u00a0!len:&gt;0<br/>                &amp; ( @(\u00a0!numpart<br/>                    \u00a0:  \u00a0?tried<br/>                         ( #%@?digit<br/>                         &amp;\u00a0!allowed:?head\u00a0!digit\u00a0?tail<br/>                         &amp;\u00a0!head\u00a0!tail:?allowed<br/>                         )<br/>                         (\u00a0?untried<br/>                         &amp;     R<br/>                             $ (\u00a0!len+-1<br/>                               . 10*!left+!digit<br/>                               . str$(!tried\u00a0!untried)<br/>                               . 0 1 2 3 4 5 6 7 8 9<br/>                               )<br/>                          \u00a0:\u00a0?fangs<br/>                         &amp;\u00a0!found\u00a0!fangs:?found<br/>                         &amp; ~<br/>                         )<br/>                     )<br/>                  |\u00a0!found<br/>                  )<br/>              |  \u00a0!N*!left^-1:~/?right:~&lt;!left:?rdigits<br/>                &amp; (!left*1/10:/|!right*1/10:/)<br/>                &amp; ( @(\u00a0!numpart<br/>                    \u00a0:  \u00a0?<br/>                         ( #%@?digit\u00a0?<br/>                         &amp; @(!rdigits:?head\u00a0!digit\u00a0?tail)<br/>                         &amp; str$(!head\u00a0!tail):?rdigits<br/>                         &amp; ~<br/>                         )<br/>                     )<br/>                  |\u00a0!rdigits:&amp;(!left,!right)<br/>                  )<br/>              )<br/>        )<br/>      &amp;   R$(!len.0.!N.1 2 3 4 5 6 7 8 9)<br/>       \u00a0: ( <br/>          |  \u00a0?fangsList<br/>            &amp; out$(!N\u00a0!fangsList)<br/>            &amp; 1+!count:?count<br/>          )<br/>  )<br/>&amp; 0:?count<br/>&amp; 10:?i<br/>&amp; 16758243290880 24959017348650 14593825548650:?bignums<br/>&amp;   whl<br/>  ' ( ( vampire$!i&amp;1+!i:?i<br/>      |\u00a0!i*10:?i<br/>      )<br/>    &amp; (!count:&lt;25|!bignums:%?i\u00a0?bignums)<br/>    )<br/>);</pre>"}, {"lang": "C", "loc": 82, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">uint64_t</span> xint<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> ull<span class=\"sy0\">;</span><br/>\u00a0<br/>xint tens<span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> xint max<span class=\"br0\">(</span>xint a<span class=\"sy0\">,</span> xint b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">?</span> a <span class=\"sy0\">:</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">inline</span> xint min<span class=\"br0\">(</span>xint a<span class=\"sy0\">,</span> xint b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy0\">&lt;</span> b <span class=\"sy0\">?</span> a <span class=\"sy0\">:</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> ndigits<span class=\"br0\">(</span>xint x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> n<span class=\"sy0\">++,</span> x <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> xint dtally<span class=\"br0\">(</span>xint x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\txint t <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> t <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> x <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> t<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> fangs<span class=\"br0\">(</span>xint x<span class=\"sy0\">,</span> xint <span class=\"sy0\">*</span>f<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> nd <span class=\"sy0\">=</span> ndigits<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>nd <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tnd <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\txint lo<span class=\"sy0\">,</span> hi<span class=\"sy0\">;</span><br/>\tlo <span class=\"sy0\">=</span> max<span class=\"br0\">(</span>tens<span class=\"br0\">[</span>nd<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> tens<span class=\"br0\">[</span>nd<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>tens<span class=\"br0\">[</span>nd<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\thi <span class=\"sy0\">=</span> min<span class=\"br0\">(</span>x <span class=\"sy0\">/</span> lo<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\txint a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> t <span class=\"sy0\">=</span> dtally<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> lo<span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> hi<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tb <span class=\"sy0\">=</span> x <span class=\"sy0\">/</span> a<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> b <span class=\"sy0\">==</span> x <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>b<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> t <span class=\"sy0\">==</span> dtally<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> dtally<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tf<span class=\"br0\">[</span>n<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_fangs<span class=\"br0\">(</span>xint x<span class=\"sy0\">,</span> xint <span class=\"sy0\">*</span>f<span class=\"sy0\">,</span> xint cnt<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%llu\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ull<span class=\"br0\">)</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cnt<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" =\u00a0%llu x\u00a0%llu\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ull<span class=\"br0\">)</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ull<span class=\"br0\">)</span><span class=\"br0\">(</span>x <span class=\"sy0\">/</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"sy0\">;</span><br/>\txint x<span class=\"sy0\">,</span> f<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> bigs<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>16758243290880ULL<span class=\"sy0\">,</span> 24959017348650ULL<span class=\"sy0\">,</span> 14593825548650ULL<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\ttens<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\ttens<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tens<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> fangs<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2d: \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">++</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tshow_fangs<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> bigs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> fangs<span class=\"br0\">(</span>bigs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tshow_fangs<span class=\"br0\">(</span>bigs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%llu is not vampiric<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ull<span class=\"br0\">)</span>bigs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 90, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaVampireNumber<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> i, j, n<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">ulong</span> x<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> f <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> bigs <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> 16758243290880UL, 24959017348650UL, 14593825548650UL, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"br0\">]</span> tens <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            tens<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                tens<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tens<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> fangs<span class=\"br0\">(</span>x, f, tens<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>n <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                show_fangs<span class=\"br0\">(</span>x, f, j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> bigs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> fangs<span class=\"br0\">(</span>bigs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, f, tens<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    show_fangs<span class=\"br0\">(</span>bigs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, f, j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>bigs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is not vampiric.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> show_fangs<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> x, <span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"br0\">]</span> f, <span class=\"kw4\">int</span> cnt<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>            <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cnt<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" =\u00a0\"</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" * \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> fangs<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> x, <span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"br0\">]</span> f, <span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"br0\">]</span> tens<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> nd <span class=\"sy0\">=</span> ndigits<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nd <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            nd <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">ulong</span> lo, hi<span class=\"sy0\">;</span><br/>            lo <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Max</span><span class=\"br0\">(</span>tens<span class=\"br0\">[</span>nd <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> tens<span class=\"br0\">[</span>nd<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>tens<span class=\"br0\">[</span>nd<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hi <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>x <span class=\"sy0\">/</span> lo, <span class=\"br0\">(</span><span class=\"kw4\">ulong</span><span class=\"br0\">)</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">ulong</span> a, b, t <span class=\"sy0\">=</span> dtally<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> lo<span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> hi<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                b <span class=\"sy0\">=</span> x <span class=\"sy0\">/</span> a<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> b <span class=\"sy0\">==</span> x <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>b <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> t <span class=\"sy0\">==</span> dtally<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> dtally<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    f<span class=\"br0\">[</span>n<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">ulong</span> dtally<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> x<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">ulong</span> t <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                t <span class=\"sy0\">+=</span> 1UL <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                x <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> t<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> ndigits<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> x<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                n<span class=\"sy0\">++;</span><br/>                x <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 75, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isVampireNumber<span class=\"br0\">(</span> <span class=\"kw4\">long</span> number, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span>, <span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span> solution <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> numberstream <span class=\"sy4\">;</span><br/>   numberstream <span class=\"sy1\">&lt;&lt;</span> number <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> numberstring<span class=\"br0\">(</span> numberstream.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">sort</span> <span class=\"br0\">(</span> numberstring.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , numberstring.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> fanglength <span class=\"sy1\">=</span> numberstring.<span class=\"me1\">length</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">long</span> start <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span> , fanglength <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">long</span> end <span class=\"sy1\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">long</span> i <span class=\"sy1\">=</span> start <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> end <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> number <span class=\"sy2\">%</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t <span class=\"kw4\">long</span> quotient <span class=\"sy1\">=</span> number <span class=\"sy2\">/</span> i <span class=\"sy4\">;</span><br/>\t <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy2\">%</span> <span class=\"nu0\">10</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span> quotient <span class=\"sy2\">%</span> <span class=\"nu0\">10</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\t    <span class=\"kw1\">continue</span> <span class=\"sy4\">;</span><br/>\t numberstream.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <span class=\"co1\">//clear the number stream</span><br/>\t numberstream <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> quotient <span class=\"sy4\">;</span><br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">string</span> divisorstring <span class=\"br0\">(</span> numberstream.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>         std<span class=\"sy4\">::</span><span class=\"me2\">sort</span> <span class=\"br0\">(</span> divisorstring.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , divisorstring.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t <span class=\"kw1\">if</span> <span class=\"br0\">(</span> divisorstring <span class=\"sy1\">==</span> numberstring <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span> , <span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span> divisors <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> i, quotient <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t    solution.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> divisors <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"sy3\">!</span>solution.<span class=\"me1\">empty</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printOut<span class=\"br0\">(</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span>, <span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span> solution <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"[ \"</span> <span class=\"sy1\">&lt;&lt;</span> solution.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" , \"</span> <span class=\"sy1\">&lt;&lt;</span> solution.<span class=\"me1\">second</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" ]\"</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">int</span> vampireNumbersFound <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span> , <span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> solutions <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">double</span> i <span class=\"sy1\">=</span> <span class=\"nu16\">1.0</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> vampireNumbersFound <span class=\"sy1\">&lt;</span> <span class=\"nu0\">25</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">long</span> start <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span> , i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw4\">long</span> end <span class=\"sy1\">=</span> start <span class=\"sy2\">*</span> <span class=\"nu0\">10</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">long</span> num <span class=\"sy1\">=</span> start <span class=\"sy4\">;</span> num <span class=\"sy1\">&lt;</span> end <span class=\"sy4\">;</span> num<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isVampireNumber<span class=\"br0\">(</span> num , solutions <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            vampireNumbersFound<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>\t    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> vampireNumbersFound <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0:\"</span> <span class=\"sy1\">&lt;&lt;</span> num <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is a vampire number! These are the fangs:<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>\t    std<span class=\"sy4\">::</span><span class=\"me2\">for_each</span><span class=\"br0\">(</span> solutions.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , solutions.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , printOut <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>_______________\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>\t    solutions.<span class=\"me1\">clear</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span>\t    <br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> vampireNumbersFound <span class=\"sy1\">==</span> <span class=\"nu0\">25</span> <span class=\"br0\">)</span> <br/>\t       <span class=\"kw1\">break</span> <span class=\"sy4\">;</span><br/>\t <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      i <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu16\">2.0</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span> testnumbers <span class=\"sy4\">;</span><br/>   testnumbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"nu0\">16758243290880</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   testnumbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"nu0\">24959017348650</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   testnumbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"nu0\">14593825548650</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> svl <span class=\"sy1\">=</span> testnumbers.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <br/>\t svl <span class=\"sy3\">!</span><span class=\"sy1\">=</span> testnumbers.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> svl<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isVampireNumber<span class=\"br0\">(</span> <span class=\"sy2\">*</span>svl , solutions <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>svl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is a vampire number! The fangs:<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">for_each</span><span class=\"br0\">(</span> solutions.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , solutions.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , printOut <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>\t solutions.<span class=\"me1\">clear</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>svl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is not a vampire number!\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 23, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> factor<span class=\"sy0\">-</span>pairs <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sqrt n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>mod n x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>x <span class=\"br0\">(</span>quot n x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fangs <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>dlen <span class=\"br0\">(</span>comp <span class=\"kw1\">count</span> <span class=\"kw1\">str</span><span class=\"br0\">)</span><br/>        half <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>dlen n<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        halves? #<span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> half <span class=\"br0\">(</span><span class=\"kw1\">map</span> dlen <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        digits  #<span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>halves? <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>digits <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>factor<span class=\"sy0\">-</span>pairs n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> vampiric? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>fangs <span class=\"br0\">(</span>fangs n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> fangs<span class=\"br0\">)</span> nil <span class=\"br0\">[</span>n fangs<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">25</span> <span class=\"br0\">(</span>keep vampiric? <span class=\"br0\">(</span><span class=\"kw1\">range</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>prn n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">[</span><span class=\"nu0\">16758243290880</span>, <span class=\"nu0\">24959017348650</span>, <span class=\"nu0\">14593825548650</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>vampiric? n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> n <span class=\"st0\">\" is not vampiric.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 61, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> trailing-<span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Is the lowest digit of `number' a 0\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> number <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> integer-digits <span class=\"br0\">(</span><span class=\"kw1\">integer</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return the number of digits of the `integer'\"</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>integerp <span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>write-to-string <span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> paired-factors <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return a list of pairs that are factors of `number'\"</span><br/>  <span class=\"br0\">(</span>loop<br/>    <span class=\"sy0\">:</span><span class=\"me1\">for</span> candidate <span class=\"sy0\">:</span><span class=\"me1\">from</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span><span class=\"me1\">upto</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> number<span class=\"br0\">)</span><br/>    <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod number candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">:</span><span class=\"me1\">collect</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> candidate <span class=\"br0\">(</span>/ number candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> vampirep <span class=\"br0\">(</span>candidate <span class=\"sy0\">&amp;</span>aux<br/>                             <span class=\"br0\">(</span>digits-of-candidate <span class=\"br0\">(</span>integer-digits candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span>half-the-digits-of-candidate <span class=\"br0\">(</span>/ digits-of-candidate<br/>                                                              <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Is the `candidate' a vampire number?\"</span><br/>  <span class=\"br0\">(</span>remove-<span class=\"kw1\">if</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>pair<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>remove-<span class=\"kw1\">if</span> #'<span class=\"kw1\">null</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'trailing-<span class=\"kw1\">zerop</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>             <span class=\"br0\">(</span>remove-if-<span class=\"kw1\">not</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>pair<span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>copy-seq <span class=\"br0\">(</span>write-to-string candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                               #'char<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><br/>                                         <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>copy-seq <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"~A~A\"</span> <span class=\"br0\">(</span>first pair<span class=\"br0\">)</span> <span class=\"br0\">(</span>second pair<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                               #'char<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>remove-if-<span class=\"kw1\">not</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>pair<span class=\"br0\">)</span><br/>                                               <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"br0\">(</span>integer-digits <span class=\"br0\">(</span>first pair<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                                         half-the-digits-of-candidate<span class=\"br0\">)</span><br/>                                                    <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"br0\">(</span>integer-digits <span class=\"br0\">(</span>second pair<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                                         half-the-digits-of-candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                           <span class=\"br0\">(</span>paired-factors candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-vampire <span class=\"br0\">(</span>candidate fangs <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>stream t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format stream<br/>          <span class=\"st0\">\"The number ~A is a vampire number with fangs: ~{ ~{~A~^, ~}~^; ~}~%\"</span><br/>          candidate<br/>          fangs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Print the first 25 vampire numbers</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop<br/>  <span class=\"sy0\">:</span><span class=\"me1\">with</span> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">:</span><span class=\"me1\">for</span> candidate <span class=\"sy0\">:</span><span class=\"me1\">from</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">:</span><span class=\"me1\">until</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> count <span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">:</span><span class=\"me1\">for</span> fangs <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>vampirep candidate<span class=\"br0\">)</span><br/>  <span class=\"sy0\">:</span><span class=\"kw1\">do</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">when</span> fangs<br/>       <span class=\"br0\">(</span>print-vampire candidate fangs<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>incf count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Check if 16758243290880, 24959017348650, 14593825548650 are vampire numbers</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>candidate '<span class=\"br0\">(</span><span class=\"nu0\">16758243290880</span> <span class=\"nu0\">24959017348650</span> <span class=\"nu0\">14593825548650</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fangs <span class=\"br0\">(</span>vampirep candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> fangs<br/>      <span class=\"br0\">(</span>print-vampire candidate fangs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> fangs<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> pairs <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>n <span class=\"sy0\">^^</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// n.isqrt</span><br/>                 .<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> n <span class=\"sy0\">/</span> x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> dLen <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">long</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x.<span class=\"me1\">text</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> half <span class=\"sy0\">=</span> dLen<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> halvesQ <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>u <span class=\"sy0\">=&gt;</span> dLen<span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"sy0\">==</span> half<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> digits <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> dtext<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> dn <span class=\"sy0\">=</span> n.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">dchar</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> tuple<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> pairs.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> halvesQ<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> dn <span class=\"sy0\">==</span> digits<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>v<span class=\"sy0\">;</span> <span class=\"kw4\">int</span>.<span class=\"me1\">max</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>fangs.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> <span class=\"sy0\">!</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">empty</span> <span class=\"br0\">}</span><br/>                .<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span>.<span class=\"me1\">chain</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">16758243290880</span><span class=\"sy0\">,</span> <span class=\"nu0\">24959017348650</span><span class=\"sy0\">,</span><br/>                                 <span class=\"nu0\">14593825548650</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>fangs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%d: (%(%(%s\u00a0%)) (%))\"</span><span class=\"sy0\">,</span> v<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 113, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tfang_check <span class=\"br0\">(</span>original, fang1, fang2<span class=\"sy0\">:</span> INTEGER_64<span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Are 'fang1' and 'fang2' correct fangs of the 'original' number?</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\toriginal_positive<span class=\"sy0\">:</span> original <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tfangs_positive<span class=\"sy0\">:</span> fang1 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> fang2 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\toriginal_length<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tfang, ori<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t\tsort_ori, sort_fang<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+sorted_two_way_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">SORTED_TWO_WAY_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> sort_ori.<span class=\"me1\">make</span><br/>\t\t\t<span class=\"kw2\">create</span> sort_fang.<span class=\"me1\">make</span><br/>\t\t\t<span class=\"kw2\">create</span> ori.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw2\">create</span> fang.<span class=\"me1\">make_empty</span><br/>\t\t\toriginal_length <span class=\"sy0\">:=</span> original.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">if</span> fang1.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">/=</span> original_length <span class=\"kw2\">or</span> fang2.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">/=</span> <span class=\"br0\">(</span>original_length<span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t<span class=\"kw2\">elseif</span> fang1.<span class=\"me1\">out</span>.<span class=\"me1\">ends_with</span> <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> fang2.<span class=\"me1\">out</span>.<span class=\"me1\">ends_with</span> <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\tacross<br/>\t\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> original.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"kw2\">as</span> c<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tsort_ori.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>original.<span class=\"me1\">out</span> <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tacross<br/>\t\t\t\t\tsort_ori <span class=\"kw2\">as</span> o<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tori.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>o.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tacross<br/>\t\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> fang1.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"kw2\">as</span> c<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tsort_fang.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>fang1.<span class=\"me1\">out</span> <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\tsort_fang.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>fang2.<span class=\"me1\">out</span> <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tacross<br/>\t\t\t\t\tsort_fang <span class=\"kw2\">as</span> f<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tfang.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>f.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> fang.<span class=\"me1\">same_string</span> <span class=\"br0\">(</span>ori<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tfangs_right_length<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span> <span class=\"kw2\">implies</span> original.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> fang1.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> <span class=\"sy0\">+</span> fang2.<span class=\"me1\">out</span>.<span class=\"me1\">count</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tmake<br/>                <span class=\"co1\">-- Uses fang_check to find vampire nubmers.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, numbers<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tfang1, fang2<span class=\"sy0\">:</span> INTEGER_64<br/>\t\t\tnum<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span>INTEGER_64<span class=\"br0\">]</span><br/>\t\t\tmath<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double_math&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE_MATH</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> math<br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1000</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tnumbers <span class=\"sy0\">&gt;</span> <span class=\"nu0\">25</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> i.<span class=\"me1\">out</span>.<span class=\"me1\">count</span> \\\\ <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\t\tfang1 <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span><br/>\t\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\t\tfang1 <span class=\"sy0\">&gt;=</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>i \\\\ fang1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t\tfang2 <span class=\"sy0\">:=</span> i <span class=\"sy0\">//</span> fang1<br/>\t\t\t\t\t\t\t<span class=\"kw2\">if</span> i \\\\ <span class=\"nu0\">9</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>fang1 <span class=\"sy0\">+</span> fang2<span class=\"br0\">)</span> \\\\ <span class=\"nu0\">9</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t\t\t<span class=\"kw2\">if</span> fang1 <span class=\"sy0\">*</span> fang2 <span class=\"sy0\">=</span> i <span class=\"kw2\">and</span> fang1 <span class=\"sy0\">&lt;=</span> fang2 <span class=\"kw2\">and</span> <span class=\"kw2\">then</span> fang_check <span class=\"br0\">(</span>i, fang1, fang2<span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t\t\t\tnumbers <span class=\"sy0\">:=</span> numbers <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>i.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> fang1.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> fang2.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\t\tfang1 <span class=\"sy0\">:=</span> fang1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tnum <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">16758243290880</span>, <span class=\"nu0\">24959017348650</span>, <span class=\"nu0\">14593825548650</span><span class=\"sy0\">&gt;&gt;</span><br/>\t\t\tacross<br/>\t\t\t\tnum <span class=\"kw2\">as</span> n<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\tfang1 <span class=\"sy0\">:=</span> <span class=\"nu0\">1000000</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\tfang1 <span class=\"sy0\">&gt;=</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>n.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">item</span> \\\\ fang1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tfang2 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>n.<span class=\"me1\">item</span> <span class=\"sy0\">//</span> fang1<span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw2\">if</span> fang1 <span class=\"sy0\">*</span> fang2 <span class=\"sy0\">=</span> n.<span class=\"me1\">item</span> <span class=\"kw2\">and</span> fang1 <span class=\"sy0\">&lt;=</span> fang2 <span class=\"kw2\">and</span> <span class=\"kw2\">then</span> fang_check <span class=\"br0\">(</span>n.<span class=\"me1\">item</span>, fang1, fang2<span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>n.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> fang1.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> fang2.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\tfang1 <span class=\"sy0\">:=</span> fang1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 42, "block": "<pre class=\"text highlighted_source\">defmodule Vampire do<br/>  def factor_pairs(n) do<br/>    first = trunc(n /\u00a0:math.pow(10, div(char_len(n), 2)))<br/>    last  =\u00a0:math.sqrt(n) |&gt; round<br/>    for i &lt;- first .. last, rem(n, i) == 0, do: {i, div(n, i)}<br/>  end<br/>\u00a0<br/>  def vampire_factors(n) do<br/>    if rem(char_len(n), 2) == 1 do<br/>      []<br/>    else<br/>      half = div(length(to_char_list(n)), 2)<br/>      sorted = Enum.sort(String.codepoints(\"#{n}\"))<br/>      Enum.filter(factor_pairs(n), fn {a, b} -&gt;<br/>        char_len(a) == half &amp;&amp; char_len(b) == half &amp;&amp;<br/>        Enum.count([a, b], fn x -&gt; rem(x, 10) == 0 end)\u00a0!= 2 &amp;&amp;<br/>        Enum.sort(String.codepoints(\"#{a}#{b}\")) == sorted<br/>      end)<br/>    end<br/>  end<br/>\u00a0<br/>  defp char_len(n), do: length(to_char_list(n))<br/>\u00a0<br/>  def task do<br/>    Enum.reduce_while(Stream.iterate(1, &amp;(&amp;1+1)), 1, fn n, acc -&gt;<br/>      case vampire_factors(n) do<br/>        [] -&gt; {:cont, acc}<br/>        vf -&gt; IO.puts \"#{n}:\\t#{inspect vf}\"<br/>              if acc &lt; 25, do: {:cont, acc+1}, else: {:halt, acc+1}<br/>      end<br/>    end)<br/>    IO.puts \"\"<br/>    Enum.each([16758243290880, 24959017348650, 14593825548650], fn n -&gt;<br/>      case vampire_factors(n) do<br/>        [] -&gt; IO.puts \"#{n} is not a vampire number!\"<br/>        vf -&gt; IO.puts \"#{n}:\\t#{inspect vf}\"<br/>      end<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>Vampire.task</pre>"}, {"lang": "Factor", "loc": 44, "block": "<pre class=\"text highlighted_source\">USING: combinators.short-circuit fry io kernel lists lists.lazy math<br/>math.combinatorics math.functions math.primes.factors math.statistics<br/>math.text.utils prettyprint sequences sets\u00a0;<br/>IN: rosetta-code.vampire-number<br/>\u00a0<br/>: digits ( n -- m )<br/>    log10 floor &gt;integer 1 +\u00a0;<br/>\u00a0<br/>: same-digits? ( n n1 n2 --\u00a0? )<br/>    [ 1 digit-groups ] <a class=\"__cf_email__\" data-cfemail=\"ef9b9d86af\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> append [ histogram ] <a class=\"__cf_email__\" data-cfemail=\"10727950\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =\u00a0;    <br/>\u00a0<br/>: half-len-factors ( n -- seq )<br/>    [ divisors ] [ digits ] bi 2/ '[ digits _ = ] filter\u00a0;<br/>\u00a0<br/>: same-digit-factors ( n -- seq )<br/>    dup half-len-factors 2 &lt;combinations&gt; [ first2 same-digits? ] with filter\u00a0;<br/>\u00a0<br/>: under-two-trailing-zeros? ( seq --\u00a0? )<br/>    [ 10 mod ] map [ 0 = ] count 2 &lt;\u00a0;<br/>\u00a0<br/>: tentative-fangs ( n -- seq )<br/>    same-digit-factors [ under-two-trailing-zeros? ] filter\u00a0;<br/>\u00a0<br/>: fangs ( n -- seq )<br/>    [ tentative-fangs ] [ ] bi '[ product _ = ] filter\u00a0;<br/>\u00a0<br/>: vampire? ( n --\u00a0? )<br/>    { [ digits even? ] [ fangs empty? not ] } 1&amp;&amp;\u00a0;<br/>\u00a0<br/>: first25 ( -- seq )<br/>    25 0 lfrom [ vampire? ] lfilter ltake list&gt;array\u00a0;<br/>\u00a0<br/>: .vamp-with-fangs ( n -- )<br/>    [ pprint bl ] [ fangs [ pprint bl ] each ] bi nl\u00a0;<br/>\u00a0<br/>: part1 ( -- )<br/>    first25 [ .vamp-with-fangs ] each\u00a0;<br/>\u00a0<br/>: part2 ( -- ) { 16758243290880 24959017348650 14593825548650 }<br/>    [ dup vampire? [ .vamp-with-fangs ] [ drop ] if ] each\u00a0;<br/>\u00a0<br/>: main ( -- ) part1 part2\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "FreeBASIC", "loc": 106, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">'Vampire numbers.</span><br/><span class=\"co1\">'FreeBASIC version 24. Windows</span><br/><span class=\"co1\">'Vampire.bas</span><br/><span class=\"kw1\">Function</span> WithinString<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span>,f <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>    var m=<span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,p=<span class=\"kw1\">Str</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> z <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/>        var i=<span class=\"kw1\">Instr</span><span class=\"br0\">(</span>m,<span class=\"kw1\">Chr</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>z<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> i <span class=\"kw1\">Then</span><br/>            m=<span class=\"kw1\">Mid</span><span class=\"br0\">(</span>m,<span class=\"nu0\">1</span>,i-<span class=\"nu0\">1</span><span class=\"br0\">)</span>+<span class=\"kw1\">Mid</span><span class=\"br0\">(</span>m,i+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Else</span><br/>            <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> z<br/>    <span class=\"kw1\">Return</span> -<span class=\"nu0\">1</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> AllFactors<span class=\"br0\">(</span>N <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span>,factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> Sn=<span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> half=<span class=\"kw1\">Len</span><span class=\"br0\">(</span>sn<span class=\"br0\">)</span>\\<span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Redim</span> factors<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"co2\">#macro bsort(array)</span><br/>    <span class=\"kw1\">For</span> p1 <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Ubound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">For</span> p2 <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  = p1 + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Ubound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span>  <br/>            <span class=\"kw1\">If</span> array<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>&gt;array<span class=\"br0\">(</span>p2<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Swap</span> array<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>,array<span class=\"br0\">(</span>p2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span> p2<br/>    <span class=\"kw1\">Next</span> p1<br/>    <span class=\"co2\">#endmacro</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span> c<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>       <br/>        <span class=\"kw1\">If</span> N <span class=\"kw1\">Mod</span> i=<span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>=half <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">If</span> WithinString<span class=\"br0\">(</span>N,i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                    c=c+<span class=\"nu0\">1</span><br/>                    <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> factors<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> c<span class=\"br0\">)</span><br/>                    factors<span class=\"br0\">(</span>c<span class=\"br0\">)</span>=i<br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">If</span> N &lt;&gt; i*i <span class=\"kw1\">Then</span> <br/>                <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>n\\i<span class=\"br0\">)</span><span class=\"br0\">)</span>=half <span class=\"kw1\">Then</span><br/>                    <span class=\"kw1\">If</span> WithinString<span class=\"br0\">(</span>N,n\\i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                        c=c+<span class=\"nu0\">1</span><br/>                        <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> factors<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> c<span class=\"br0\">)</span><br/>                        factors<span class=\"br0\">(</span>c<span class=\"br0\">)</span>=n\\i<br/>                    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span> <br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span> <br/>    <span class=\"kw1\">Next</span> i<br/>    bsort<span class=\"br0\">(</span>factors<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> VampireNumbers<span class=\"br0\">(</span>N <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> flag<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span> LastFactor<br/>    <span class=\"kw1\">Redim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span> Factor<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    AllFactors<span class=\"br0\">(</span>N,Factor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> p1 <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Ubound</span><span class=\"br0\">(</span>Factor<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> p2 <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Ubound</span><span class=\"br0\">(</span>Factor<span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> Factor<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>*Factor<span class=\"br0\">(</span>p2<span class=\"br0\">)</span>=n <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">If</span> Factor<span class=\"br0\">(</span>p1<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span>&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> Factor<span class=\"br0\">(</span>p2<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span> &lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <br/>                    <span class=\"kw1\">If</span> WithinString<span class=\"br0\">(</span>n,valulng<span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>Factor<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"kw1\">Str</span><span class=\"br0\">(</span>Factor<span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                        <span class=\"kw1\">If</span> LastFactor=Factor<span class=\"br0\">(</span>p2<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span>,<span class=\"kw1\">For</span><br/>                        flag=<span class=\"nu0\">1</span><br/>                        <span class=\"kw1\">Print</span> n;<span class=\"st0\">\": [\"</span>;Factor<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>;<span class=\"st0\">\",\"</span>;Factor<span class=\"br0\">(</span>p2<span class=\"br0\">)</span>;<span class=\"st0\">\"]\"</span><br/>                        LastFactor=Factor<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span> p2<br/>    <span class=\"kw1\">Next</span> p1<br/>    <span class=\"kw1\">If</span> flag <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> -<span class=\"nu0\">1</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">'============== IMPLEMENT ==============================</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"First 28 Vampire numbers\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Number: [fangs]\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ulongint</span> n=<span class=\"nu0\">1000</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> count<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> t1,t2<br/>t1=<span class=\"kw1\">Timer</span><br/><span class=\"kw1\">Do</span><br/>    n=n+<span class=\"nu0\">1</span><br/>    Var s=<span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span>&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> n=n*<span class=\"nu0\">10</span><br/>    <span class=\"kw1\">If</span> vampireNumbers<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> count=count+<span class=\"nu0\">1</span><br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> count=<span class=\"nu0\">27</span> <br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Individual tests:\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"co1\">'individual tests</span><br/>n=16758243290880ull<br/><span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> vampirenumbers<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> n;<span class=\"st0\">\": [returns no fangs]\"</span><br/><span class=\"kw1\">Print</span><br/>n=24959017348650ull<br/><span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> vampirenumbers<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> n;<span class=\"st0\">\": [returns no fangs]\"</span><br/><span class=\"kw1\">print</span><br/>n=14593825548650ull<br/><span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> vampirenumbers<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> n;<span class=\"st0\">\": [returns no fangs]\"</span><br/>t2=<span class=\"kw1\">Timer</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Completed in \"</span>;<br/><span class=\"kw1\">Print</span> t2-t1;<span class=\"st0\">\" Seconds\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 91, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span> <br/>    <span class=\"st0\">\"math\"</span> <br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> max<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"kw4\">uint64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> a &gt; b <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> a<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> b<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> min<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"kw4\">uint64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> a &lt; b <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> a<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> b <br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ndigits<span class=\"sy1\">(</span>x <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> x &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x <span class=\"sy2\">/=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>        n<span class=\"sy2\">++</span> <br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> dtally<span class=\"sy1\">(</span>x <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>t <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> x &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x <span class=\"sy2\">/=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>        t <span class=\"sy2\">+=</span> <span class=\"nu0\">1</span> &lt;&lt; <span class=\"sy1\">(</span>x <span class=\"sy3\">%</span> <span class=\"nu0\">10</span> <span class=\"sy3\">*</span> <span class=\"nu0\">6</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> tens <span class=\"sy1\">[</span><span class=\"nu0\">20</span><span class=\"sy1\">]</span><span class=\"kw4\">uint64</span><br/>\u00a0<br/><span class=\"kw4\">func</span> init<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    tens<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">20</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        tens<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> tens<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">*</span> <span class=\"nu0\">10</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> fangs<span class=\"sy1\">(</span>x <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>f <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    nd <span class=\"sy2\">:=</span> ndigits<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> nd&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    nd <span class=\"sy2\">/=</span> <span class=\"nu0\">2</span><br/>    lo <span class=\"sy2\">:=</span> max<span class=\"sy1\">(</span>tens<span class=\"sy1\">[</span>nd<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> <span class=\"sy1\">(</span>x<span class=\"sy3\">+</span>tens<span class=\"sy1\">[</span>nd<span class=\"sy1\">]</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"sy1\">(</span>tens<span class=\"sy1\">[</span>nd<span class=\"sy1\">]</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>    hi <span class=\"sy2\">:=</span> min<span class=\"sy1\">(</span>x<span class=\"sy3\">/</span>lo<span class=\"sy1\">,</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>x<span class=\"sy1\">))))</span><br/>    t <span class=\"sy2\">:=</span> dtally<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> a <span class=\"sy2\">:=</span> lo<span class=\"sy1\">;</span> a &lt;<span class=\"sy2\">=</span> hi<span class=\"sy1\">;</span> a<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        b <span class=\"sy2\">:=</span> x <span class=\"sy3\">/</span> a<br/>        <span class=\"kw1\">if</span> a<span class=\"sy3\">*</span>b <span class=\"sy3\">==</span> x &amp;&amp;<br/>            <span class=\"sy1\">(</span>a<span class=\"sy3\">%</span><span class=\"nu0\">10</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> b<span class=\"sy3\">%</span><span class=\"nu0\">10</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">)</span> &amp;&amp;<br/>            t <span class=\"sy3\">==</span> dtally<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><span class=\"sy3\">+</span>dtally<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            f <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> a<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> showFangs<span class=\"sy1\">(</span>x <span class=\"kw4\">uint64</span><span class=\"sy1\">,</span> f <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>f<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> a <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> f <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\" =\"</span><span class=\"sy1\">,</span> a<span class=\"sy1\">,</span> <span class=\"st0\">\"\u00d7\"</span><span class=\"sy1\">,</span> x<span class=\"sy3\">/</span>a<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> x<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">),</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> n &lt; <span class=\"nu0\">26</span><span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> f <span class=\"sy2\">:=</span> fangs<span class=\"sy1\">(</span>x<span class=\"sy1\">);</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>f<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            n<span class=\"sy2\">++</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%2d: \"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>            showFangs<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span><span class=\"sy1\">{</span><span class=\"nu0\">16758243290880</span><span class=\"sy1\">,</span> <span class=\"nu0\">24959017348650</span><span class=\"sy1\">,</span> <span class=\"nu0\">14593825548650</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> f <span class=\"sy2\">:=</span> fangs<span class=\"sy1\">(</span>x<span class=\"sy1\">);</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>f<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            showFangs<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> <span class=\"st0\">\"is not vampiric\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 49, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sort<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span>&amp;<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- VAMPIRE NUMBERS ------------------------------------------------------------</span><br/>vampires <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>vampires <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> fangs<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>fangs <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>fangs n<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> w <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isfang <span class=\"br0\">(</span>integerFactors n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    ndigit <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>    ndigit <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    ndigit n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> ndigit <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> n <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    w <span class=\"sy0\">=</span> ndigit n<br/>    xmin <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> w <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    xmax <span class=\"sy0\">=</span> xmin <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><br/>    isfang x <span class=\"sy0\">=</span><br/>      x <span class=\"sy0\">&gt;</span> xmin <span class=\"sy0\">&amp;&amp;</span><br/>      x <span class=\"sy0\">&lt;</span> y <span class=\"sy0\">&amp;&amp;</span><br/>      y <span class=\"sy0\">&lt;</span> xmax <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">-- same length</span><br/>      <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> x <span class=\"nu0\">10</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> y <span class=\"nu0\">10</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">-- not zero-ended</span><br/>      sort <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> sort <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y<span class=\"br0\">)</span><br/>      <span class=\"kw1\">where</span><br/>        y <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> n x<br/>\u00a0<br/><span class=\"co1\">-- FACTORS --------------------------------------------------------------------</span><br/>integerFactors <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>integerFactors n<br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>    lows <span class=\"sy0\">++</span><br/>    <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> n <span class=\"sy0\">&lt;$&gt;</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> intSquared <span class=\"sy0\">==</span> n <span class=\"co1\">-- A perfect square,</span><br/>        <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> <span class=\"co1\">-- and cofactor of square root would be redundant.</span><br/>        <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> lows<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span>intSquared<span class=\"sy0\">,</span> lows<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>&amp; <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a> n<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:enumFromTo\"><span class=\"kw3\">enumFromTo</span></a> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floor\"><span class=\"kw3\">floor</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a><br/>    <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span><span class=\"br0\">)</span> fangs<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">25</span> vampires <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"nu0\">16758243290880</span><span class=\"sy0\">,</span> <span class=\"nu0\">24959017348650</span><span class=\"sy0\">,</span> <span class=\"nu0\">14593825548650</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 26, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"First 25 vampire numbers and their fangs:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> fangs <span class=\"sy0\">:=</span> vampire<span class=\"br0\">(</span>n <span class=\"sy0\">:=</span> <span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu0\">25</span> <span class=\"kw1\">do</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\":\"</span><span class=\"sy0\">,</span>fangs<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Other numbers:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> n <span class=\"sy0\">:=</span> <span class=\"nu0\">16758243290880</span> <span class=\"sy0\">|</span> <span class=\"nu0\">24959017348650</span> <span class=\"sy0\">|</span> <span class=\"nu0\">14593825548650</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\": \"</span><span class=\"sy0\">,</span>vampire<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"toothless\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> vampire<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    ns <span class=\"sy0\">:=</span> <span class=\"kw4\">string</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>ns <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>fangs <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||:=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">||</span>fangCheck<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>ns<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> f1 <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> n<span class=\"sy0\">/</span>f1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>fangs <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> fangs<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> fangCheck<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n2<span class=\"sy0\">,</span> f1<span class=\"sy0\">,</span> f2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> f1<span class=\"sy0\">*</span>f2 <span class=\"sy0\">~=</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>    <span class=\"kw1\">if</span> n2 <span class=\"sy0\">~=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>f1<span class=\"sy0\">|</span>f2<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f1<span class=\"sy0\">|</span>f2<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">if</span> csort<span class=\"br0\">(</span>f1<span class=\"sy0\">||</span>f2<span class=\"br0\">)</span> <span class=\"sy0\">==</span> csort<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"(\"</span><span class=\"sy0\">||</span>f1<span class=\"sy0\">||</span><span class=\"st0\">\",\"</span><span class=\"sy0\">||</span>f2<span class=\"sy0\">||</span><span class=\"st0\">\")\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> csort<span class=\"br0\">(</span>s<span class=\"br0\">)</span>  <span class=\"co1\"># Adapted from csort(s) in Icon IPL</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>s1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> c <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span><span class=\"kw4\">cset</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">every</span> <span class=\"kw4\">find</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"kw1\">do</span> s1 <span class=\"sy0\">||:=</span> c<br/>    <span class=\"kw1\">return</span> s1<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 42, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>Filter=: <span class=\"sy0\">(</span>#~`<span class=\"sy0\">)(</span>`:<span class=\"nu0\">6</span><span class=\"sy0\">)</span><br/>odd =: <span class=\"nu0\">2</span>&amp;|<br/>even =: <a class=\"__cf_email__\" data-cfemail=\"735e5d33\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:odd<br/>factors =: [: <span class=\"sy0\">(</span>[: /:~ [: */\"<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>[: x: [<span class=\"sy0\">)</span> ^\"<span class=\"nu0\">1</span> [: &gt; [: , [: { [: &lt;@:<a class=\"__cf_email__\" data-cfemail=\"6e07402e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;: ]<span class=\"sy0\">)</span>/ <span class=\"nu0\">__</span> q: ]<br/>digits =: <span class=\"nu0\">10</span>&amp;<span class=\"sy0\">(</span>#.inv<span class=\"sy0\">)</span><br/>tally =: #\u00a0: [:<br/>half =: -:\u00a0: [:<br/>even_number_of_digits =: <a class=\"__cf_email__\" data-cfemail=\"99fceffcf7d9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<a class=\"__cf_email__\" data-cfemail=\"0b7f6a6767724b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:digits<br/>same_digits =: <a class=\"__cf_email__\" data-cfemail=\"e1858886889592a1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:[ -:&amp;<span class=\"sy0\">(</span>/:~<span class=\"sy0\">)</span> ,&amp;digits/@:]<br/>assert <span class=\"nu0\">1</span> -: <span class=\"nu0\">1234</span> same_digits <span class=\"nu0\">23</span> <span class=\"nu0\">14</span><br/>assert <span class=\"nu0\">0</span> -: <span class=\"nu0\">1234</span> same_digits <span class=\"nu0\">23</span> <span class=\"nu0\">140</span><br/>half_the_digits =: <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"066e676a6046\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<a class=\"__cf_email__\" data-cfemail=\"2155404d4d5861\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<a class=\"__cf_email__\" data-cfemail=\"fd99949a94898ebd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:[ = <a class=\"__cf_email__\" data-cfemail=\"dda9bcb1b1a49d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:digits&amp;&gt;@:]<span class=\"sy0\">)</span> # ]<br/>factors_with_half_the_digits =: half_the_digits factors<br/>large =: <span class=\"sy0\">(</span>&gt; &lt;<a class=\"__cf_email__\" data-cfemail=\"cbe58b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:%:<span class=\"sy0\">)</span>~ # ]<br/>candidates =: large factors_with_half_the_digits<br/>one_trailing_zero_permitted =: <span class=\"sy0\">(</span><span class=\"nu0\">0</span> &lt; [: tally <span class=\"nu0\">0</span> -.~ <span class=\"nu0\">10</span>&amp;|<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span> Filter<br/>pairs =: <span class=\"sy0\">(</span>% ,. ]<span class=\"sy0\">)</span> <a class=\"__cf_email__\" data-cfemail=\"4c23222913383e2d252025222b1336293e23133c293e2125383829280c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:candidates<br/>fangs =: <span class=\"sy0\">(</span>same_digits\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span> # ]<span class=\"sy0\">)</span> pairs<br/>\u00a0<br/>   A=:<span class=\"sy0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <a class=\"__cf_email__\" data-cfemail=\"cae7e48a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:-: $<span class=\"sy0\">)</span>&amp;&gt;Filter&lt;@fangs\"<span class=\"nu0\">0</span>]<span class=\"nu0\">1000</span>+i.<span class=\"nu0\">1e4</span><br/>   B=:<span class=\"sy0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <a class=\"__cf_email__\" data-cfemail=\"123f3c52\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:-: $<span class=\"sy0\">)</span>&amp;&gt;Filter&lt;@fangs\"<span class=\"nu0\">0</span>]<span class=\"nu0\">100000</span>+i.<span class=\"nu0\">25501</span><br/>   <span class=\"sy0\">(</span>,: */@:{.&amp;.&gt;<span class=\"sy0\">)</span>A,B<br/>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">21</span> <span class=\"nu0\">60</span>\u2502<span class=\"nu0\">15</span> <span class=\"nu0\">93</span>\u2502<span class=\"nu0\">35</span> <span class=\"nu0\">41</span>\u2502<span class=\"nu0\">30</span> <span class=\"nu0\">51</span>\u2502<span class=\"nu0\">21</span> <span class=\"nu0\">87</span>\u2502<span class=\"nu0\">27</span> <span class=\"nu0\">81</span>\u2502<span class=\"nu0\">80</span> <span class=\"nu0\">86</span>\u2502<span class=\"nu0\">201</span> <span class=\"nu0\">510</span>\u2502<span class=\"nu0\">260</span> <span class=\"nu0\">401</span>\u2502<span class=\"nu0\">210</span> <span class=\"nu0\">501</span>\u2502<span class=\"nu0\">204</span> <span class=\"nu0\">516</span>\u2502<span class=\"nu0\">150</span> <span class=\"nu0\">705</span>\u2502<span class=\"nu0\">135</span> <span class=\"nu0\">801</span>\u2502<span class=\"nu0\">158</span> <span class=\"nu0\">701</span>\u2502<span class=\"nu0\">152</span> <span class=\"nu0\">761</span>\u2502<span class=\"nu0\">161</span> <span class=\"nu0\">725</span>\u2502<span class=\"nu0\">167</span> <span class=\"nu0\">701</span>\u2502<span class=\"nu0\">141</span> <span class=\"nu0\">840</span>\u2502<span class=\"nu0\">201</span> <span class=\"nu0\">600</span>\u2502<span class=\"nu0\">231</span> <span class=\"nu0\">534</span>\u2502<span class=\"nu0\">281</span> <span class=\"nu0\">443</span>\u2502<span class=\"nu0\">152</span> <span class=\"nu0\">824</span>\u2502<span class=\"nu0\">231</span> <span class=\"nu0\">543</span>\u2502<span class=\"nu0\">246</span> <span class=\"nu0\">510</span>\u2502<span class=\"nu0\">251</span> <span class=\"nu0\">500</span>\u2502<br/>\u2502     \u2502     \u2502     \u2502     \u2502     \u2502     \u2502     \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502       \u2502<span class=\"nu0\">204</span> <span class=\"nu0\">615</span>\u2502       \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1260</span> \u2502<span class=\"nu0\">1395</span> \u2502<span class=\"nu0\">1435</span> \u2502<span class=\"nu0\">1530</span> \u2502<span class=\"nu0\">1827</span> \u2502<span class=\"nu0\">2187</span> \u2502<span class=\"nu0\">6880</span> \u2502<span class=\"nu0\">102510</span> \u2502<span class=\"nu0\">104260</span> \u2502<span class=\"nu0\">105210</span> \u2502<span class=\"nu0\">105264</span> \u2502<span class=\"nu0\">105750</span> \u2502<span class=\"nu0\">108135</span> \u2502<span class=\"nu0\">110758</span> \u2502<span class=\"nu0\">115672</span> \u2502<span class=\"nu0\">116725</span> \u2502<span class=\"nu0\">117067</span> \u2502<span class=\"nu0\">118440</span> \u2502<span class=\"nu0\">120600</span> \u2502<span class=\"nu0\">123354</span> \u2502<span class=\"nu0\">124483</span> \u2502<span class=\"nu0\">125248</span> \u2502<span class=\"nu0\">125433</span> \u2502<span class=\"nu0\">125460</span> \u2502<span class=\"nu0\">125500</span> \u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>\u00a0<br/>   &lt;@fangs\"<span class=\"nu0\">0</span>[] <span class=\"nu0\">16758243290880</span> <span class=\"nu0\">24959017348650</span> <span class=\"nu0\">14593825548650</span><br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">2817360</span> <span class=\"nu0\">5948208</span>\u2502<span class=\"nu0\">4230765</span> <span class=\"nu0\">5899410</span>\u2502  \u2502<br/>\u2502<span class=\"nu0\">2751840</span> <span class=\"nu0\">6089832</span>\u2502<span class=\"nu0\">4129587</span> <span class=\"nu0\">6043950</span>\u2502  \u2502<br/>\u2502<span class=\"nu0\">2123856</span> <span class=\"nu0\">7890480</span>\u2502<span class=\"nu0\">4125870</span> <span class=\"nu0\">6049395</span>\u2502  \u2502<br/>\u2502<span class=\"nu0\">1982736</span> <span class=\"nu0\">8452080</span>\u2502<span class=\"nu0\">2949705</span> <span class=\"nu0\">8461530</span>\u2502  \u2502<br/>\u2502               \u2502<span class=\"nu0\">2947050</span> <span class=\"nu0\">8469153</span>\u2502  \u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518<br/>\u00a0<br/>   fangs f.  <span class=\"co1\">NB. &lt;laugh&gt;</span><br/><span class=\"sy0\">((</span><span class=\"nu0\">10</span>&amp;<span class=\"sy0\">(</span>#.^:<span class=\"nu0\">_1</span><span class=\"sy0\">)</span>@:[ -:&amp;<span class=\"sy0\">(</span>/:~<span class=\"sy0\">)</span> ,&amp;<span class=\"sy0\">(</span><span class=\"nu0\">10</span>&amp;<span class=\"sy0\">(</span>#.^:<span class=\"nu0\">_1</span><span class=\"sy0\">))</span>/@:]<span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span> # ]<span class=\"sy0\">)</span> <span class=\"sy0\">((</span>% ,. ]<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>#~ <span class=\"sy0\">(</span><span class=\"nu0\">0</span> &lt; [: #\u00a0:[: <span class=\"nu0\">0</span> -.~ <span class=\"nu0\">10</span>&amp;|<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>@:<span class=\"sy0\">(((</span>&gt; &lt;<a class=\"__cf_email__\" data-cfemail=\"517f11\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:%:<span class=\"sy0\">)</span>~ # ]<span class=\"sy0\">)</span> <span class=\"sy0\">(((</span>-:\u00a0:[:@:<span class=\"sy0\">(</span>#\u00a0:[:<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span><span class=\"nu0\">10</span>&amp;<span class=\"sy0\">(</span>#.^:<span class=\"nu0\">_1</span><span class=\"sy0\">))</span>@:[ = #\u00a0:[:@:<span class=\"sy0\">(</span><span class=\"nu0\">10</span>&amp;<span class=\"sy0\">(</span>#.^:<span class=\"nu0\">_1</span><span class=\"sy0\">))</span>&amp;&gt;@:]<span class=\"sy0\">)</span> # ]<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>[: <span class=\"sy0\">(</span>[: /:~ [: */\"<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>[: x: [<span class=\"sy0\">)</span> ^\"<span class=\"nu0\">1</span> [: &gt; [: , [: { [: &lt;@:<a class=\"__cf_email__\" data-cfemail=\"c6afe886\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;: ]<span class=\"sy0\">)</span>/ <span class=\"nu0\">__</span> q: ]<span class=\"sy0\">))))</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 48, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.HashSet</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> VampireNumbers<span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span> numDigits<span class=\"br0\">(</span><span class=\"kw3\">long</span> num<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw2\">return</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> fangCheck<span class=\"br0\">(</span><span class=\"kw3\">long</span> orig, <span class=\"kw3\">long</span> fang1, <span class=\"kw3\">long</span> fang2<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>fang1<span class=\"br0\">)</span>.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>fang2<span class=\"br0\">)</span>.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">int</span> origLen = numDigits<span class=\"br0\">(</span>orig<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>numDigits<span class=\"br0\">(</span>fang1<span class=\"br0\">)</span> <span class=\"sy0\">!</span>= origLen / <span class=\"nu0\">2</span> || numDigits<span class=\"br0\">(</span>fang2<span class=\"br0\">)</span> <span class=\"sy0\">!</span>= origLen / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> origBytes = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>orig<span class=\"br0\">)</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> fangBytes = <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>fang1<span class=\"br0\">)</span> + <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>fang2<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>origBytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>fangBytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">return</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>origBytes, fangBytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashSet.html\"><span class=\"kw46\">HashSet</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a><span class=\"sy0\">&gt;</span> vamps = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashSet.html\"><span class=\"kw46\">HashSet</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">long</span> i = <span class=\"nu0\">10</span><span class=\"sy0\">;</span> vamps.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">25</span><span class=\"sy0\">;</span> i++ <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>numDigits<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>i = i <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> - <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw2\">continue</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">long</span> fang1 = <span class=\"nu0\">2</span><span class=\"sy0\">;</span> fang1 <span class=\"sy0\">&lt;</span>= <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"sy0\">;</span> fang1++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> fang1 == <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <span class=\"kw3\">long</span> fang2 = i / fang1<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span><span class=\"br0\">(</span>fangCheck<span class=\"br0\">(</span>i, fang1, fang2<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> fang1 <span class=\"sy0\">&lt;</span>= fang2<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        vamps.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>i + <span class=\"st0\">\": [\"</span> + fang1 + <span class=\"st0\">\", \"</span> + fang2 +<span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> nums = <span class=\"br0\">{</span>16758243290880L, 24959017348650L, 14593825548650L<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a> i\u00a0: nums<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">long</span> fang1 = <span class=\"nu0\">2</span><span class=\"sy0\">;</span> fang1 <span class=\"sy0\">&lt;</span>= <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"sy0\">;</span> fang1++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> fang1 == <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <span class=\"kw3\">long</span> fang2 = i / fang1<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span><span class=\"br0\">(</span>fangCheck<span class=\"br0\">(</span>i, fang1, fang2<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> fang1 <span class=\"sy0\">&lt;</span>= fang2<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>i + <span class=\"st0\">\": [\"</span> + fang1 + <span class=\"st0\">\", \"</span> + fang2 +<span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function divisors{T&lt;:Integer}(n::T)<br/>   \u00a0!isprime(n) || return [one(T), n]<br/>    d = [one(T)]<br/>    for (k, v) in factor(n)<br/>        e = T[k^i for i in 1:v]<br/>        append!(d, vec([i*j for i in d, j in e]))<br/>    end<br/>    sort(d)<br/>end<br/>\u00a0<br/>function vampirefangs{T&lt;:Integer}(n::T)<br/>    fangs = T[]<br/>    isvampire = false<br/>    vdcnt = ndigits(n)<br/>    fdcnt = vdcnt&gt;&gt;1<br/>    iseven(vdcnt) || return (isvampire, fangs)<br/>   \u00a0!isprime(n) || return (isvampire, fangs)<br/>    vdigs = sort(digits(n))<br/>    d = divisors(n)<br/>    len = length(d)<br/>    len = iseven(len)\u00a0? len&gt;&gt;1\u00a0: len&gt;&gt;1 + 1<br/>    for f in d[1:len]<br/>        ndigits(f) == fdcnt || continue<br/>        g = div(n, f)<br/>        f%10!=0 || g%10!=0 || continue<br/>        sort([digits(f), digits(g)]) == vdigs || continue<br/>        isvampire = true<br/>        append!(fangs, [f, g])<br/>    end<br/>    if isvampire<br/>        fangs = reshape(fangs, (2,length(fangs)&gt;&gt;1))'<br/>    end<br/>    return (isvampire, fangs)<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 96, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Fangs<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fang1<span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> 0L, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fang2<span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> 0L<span class=\"br0\">)</span><br/>\u00a0<br/>fun pow10<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Can't be negative\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pow <span class=\"sy0\">=</span> 1L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> pow <span class=\"sy0\">*=</span> 10L<br/>        pow<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun countDigits<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> 0L -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Can't be negative\"</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">==</span> 0L -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> 0L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            count++<br/>            nn /<span class=\"sy0\">=</span> 10L<br/>        <span class=\"br0\">}</span><br/>        count<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun hasTrailingZero<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> 0L -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Can't be negative\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> n <span class=\"sy0\">%</span> 10L <span class=\"sy0\">==</span> 0L<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun sortedString<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ca <span class=\"sy0\">=</span> s.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ca.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> String<span class=\"br0\">(</span>ca<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun isVampiric<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long, fl<span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Fangs<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> 0L<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> countDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>len <span class=\"sy0\">%</span> 2L <span class=\"sy0\">==</span> 1L<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hlen <span class=\"sy0\">=</span> len / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> first <span class=\"sy0\">=</span> pow10<span class=\"br0\">(</span>hlen - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> last <span class=\"sy0\">=</span> 10L <span class=\"sy0\">*</span> first<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j<span class=\"sy0\">:</span> Long<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> cd<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ss <span class=\"sy0\">=</span> sortedString<span class=\"br0\">(</span>n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in first until last<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">!=</span> 0L<span class=\"br0\">)</span> continue<br/>        j <span class=\"sy0\">=</span> n / i<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> fl.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>        cd <span class=\"sy0\">=</span> countDigits<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cd <span class=\"sy0\">&gt;</span> hlen<span class=\"br0\">)</span> continue<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cd <span class=\"sy0\">&lt;</span> hlen<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> fl.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ss <span class=\"sy0\">!=</span> sortedString<span class=\"br0\">(</span>i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + j.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> continue<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>hasTrailingZero<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> hasTrailingZero<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            fl.<span class=\"me1\">add</span><span class=\"br0\">(</span>Fangs<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> fl.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun showFangs<span class=\"br0\">(</span>fangsList<span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Fangs<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>fang1, fang2<span class=\"br0\">)</span> in fangsList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s +<span class=\"sy0\">=</span> <span class=\"st0\">\" = $fang1 x $fang2\"</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> s<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The first 25 vampire numbers and their fangs are:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n<span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fl <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Fangs<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isVampiric<span class=\"br0\">(</span>n, fl<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            count++<br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(count)}\u00a0: $n<span class=\"es1\">\\t</span>${showFangs(fl)}\"</span><span class=\"br0\">)</span><br/>            fl.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span> break<br/>        <span class=\"br0\">}</span><br/>        n++<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> va <span class=\"sy0\">=</span> longArrayOf<span class=\"br0\">(</span>16758243290880L, 24959017348650L, 14593825548650L<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>v in va<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isVampiric<span class=\"br0\">(</span>v, fl<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"$v<span class=\"es1\">\\t</span>${showFangs(fl)}\"</span><span class=\"br0\">)</span><br/>            fl.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"$v<span class=\"es1\">\\t</span> = not vampiric\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 27, "block": "<pre class=\"text highlighted_source\">ClearAll[VampireQ]<br/>VampireQ[num_Integer]\u00a0:= Module[{poss, divs},<br/>  divs = Select[Divisors[num], # &lt;= Sqrt[num] &amp;];<br/>  poss = {#, num/#} &amp; /@ divs;<br/>  If[Length[poss] &gt; 0,<br/>   poss = Select[poss, Mod[#, 10] =!= {0, 0} &amp;];<br/>   If[Length[poss] &gt; 0,<br/>    poss = Select[poss, Length[IntegerDigits[First[#]]] == Length[IntegerDigits[Last[#]]] &amp;];<br/>    If[Length[poss] &gt; 0,<br/>     poss = Select[poss, Sort[IntegerDigits[num]] == Sort[Join @@ (IntegerDigits /@ #)] &amp;];<br/>     If[Length[poss] &gt; 0<br/>      ,<br/>      Sow[{num, poss}];<br/>      True<br/>      ,<br/>      False<br/>     ]<br/>    ,<br/>    False<br/>    ]<br/>   ,<br/>   False<br/>   ]<br/>  ,<br/>  False<br/> ]<br/>]</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">fang<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span>digits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>#v<span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">fordiv</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>#Str<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">==</span>#v<span class=\"sy0\">/</span><span class=\"nu1\">2</span> <span class=\"sy0\">&amp;&amp;</span> #Str<span class=\"br0\">(</span>n<span class=\"sy0\">/</span>d<span class=\"br0\">)</span><span class=\"sy0\">==</span>#v<span class=\"sy0\">/</span><span class=\"nu1\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>digits<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">,</span>digits<span class=\"br0\">(</span>n<span class=\"sy0\">/</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>d<span class=\"sy0\">%</span><span class=\"nu2\">10</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n<span class=\"sy0\">/</span>d<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>d<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">&gt;</span>n<span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">listput</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">Vec</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><br/>k<span class=\"sy0\">=</span><span class=\"nu1\">25</span><span class=\"sy0\">;</span><span class=\"kw1\">forstep</span><span class=\"br0\">(</span>d<span class=\"sy0\">=</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>d<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span>d<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>f<span class=\"sy0\">=</span>fang<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#f<span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"st0\">\" \"</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"st0\">\" \"</span>n<span class=\"sy0\">/</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span>#f <span class=\"sy0\">&amp;&amp;</span> k<span class=\"sy0\">--==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">16758243290880</span><span class=\"sy0\">,</span> <span class=\"nu1\">24959017348650</span><span class=\"sy0\">,</span> <span class=\"nu1\">14593825548650</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>f<span class=\"sy0\">=</span>fang<span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#f<span class=\"sy0\">,</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"st0\">\" \"</span>f<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"st0\">\" \"</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">/</span>f<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 33, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>say<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fangs <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$vampire</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$length</span>  <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <span class=\"re0\">$vampire</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$fang_length</span> <span class=\"sy0\">=</span> <span class=\"re0\">$length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$from</span>        <span class=\"sy0\">=</span> <span class=\"st_h\">'1'</span> <span class=\"sy0\">.</span> <span class=\"st_h\">'0'</span> x <span class=\"br0\">(</span><span class=\"re0\">$fang_length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$to</span>          <span class=\"sy0\">=</span> <span class=\"st_h\">'9'</span> x <span class=\"re0\">$fang_length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sorted</span>      <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"re0\">$vampire</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@fangs</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$f1</span> <span class=\"br0\">(</span><span class=\"re0\">$from</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a> <span class=\"re0\">$vampire</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$vampire</span> <span class=\"sy0\">%</span> <span class=\"re0\">$f1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$f2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$vampire</span> <span class=\"sy0\">/</span> <span class=\"re0\">$f1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$sorted</span> <span class=\"kw1\">ne</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"re0\">$f1</span> <span class=\"sy0\">.</span> <span class=\"re0\">$f2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"st_h\">'0'</span> <span class=\"kw1\">eq</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$f1</span><span class=\"sy0\">,</span> <span class=\"re0\">$f2</span><span class=\"sy0\">;</span> <span class=\"co1\"># Needed for the 26th number.</span><br/>        <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@fangs</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$f1</span><span class=\"sy0\">,</span> <span class=\"re0\">$f2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@fangs</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$i</span>     <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$i</span><span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@f</span> <span class=\"sy0\">=</span> fangs<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$count</span><span class=\"sy0\">++,</span> say <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$count. $i:\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"st0\">\"[@$_]\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@f</span> <span class=\"kw1\">if</span> <span class=\"re0\">@f</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"st0\">\"[@$_]\"</span><span class=\"sy0\">,</span> fangs<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">16758243290880</span><span class=\"sy0\">,</span> <span class=\"nu0\">24959017348650</span><span class=\"sy0\">,</span> <span class=\"nu0\">14593825548650</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 37, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> is_vampire <span class=\"br0\">(</span>Int <span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$digits</span> <span class=\"sy0\">=</span> <span class=\"re0\">$num</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@fangs</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> vfactors<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$this</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$that</span> <span class=\"sy0\">=</span> <span class=\"re0\">$num</span> <span class=\"kw1\">div</span> <span class=\"re0\">$this</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@fangs</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"st0\">\"$this x $that\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <br/>            <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$this</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$that</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <br/>            <span class=\"br0\">(</span><span class=\"re0\">$this</span> <span class=\"sy0\">~</span> <span class=\"re0\">$that</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$digits</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@fangs</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">@vampires</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">floor</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@fangs</span> <span class=\"sy0\">=</span> is_vampire<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    take <span class=\"st0\">\"$n: { @fangs.join(', ') }\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">@fangs</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>First 25 Vampire Numbers:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">@vampires</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Individual tests:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">16758243290880</span><span class=\"sy0\">,</span> <span class=\"nu0\">24959017348650</span><span class=\"sy0\">,</span> <span class=\"nu0\">14593825548650</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"$_: \"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@fangs</span> <span class=\"sy0\">=</span> is_vampire<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">@fangs</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"br0\">{</span><br/>         <span class=\"kw3\">say</span> <span class=\"re0\">@fangs</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>         <span class=\"kw3\">say</span> <span class=\"st_h\">'is not a vampire number.'</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> vfactors <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%%</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"sy0\">.</span><span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">floor</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"sy0\">.</span><span class=\"kw3\">ceiling</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 62, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">DisableDebugger</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> CheckVamp<span class=\"br0\">(</span>CheckNum<span class=\"br0\">)</span><br/>  c<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: i<span class=\"sy0\">=</span>CheckNum\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\nCheck number: \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+~</span><span class=\"st0\">\"\\n\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Gosub</span> VampireLoop\u00a0: <span class=\"kw1\">If</span> c<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" is not vampiric.\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i Factor<span class=\"br0\">(</span>number.i,counter.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> number<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">And</span> number<span class=\"sy0\">&gt;=</span>counter<span class=\"sy0\">*</span>counter <span class=\"kw1\">And</span> number<span class=\"sy0\">%</span>counter<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">ProcedureReturn</span> counter<br/>  <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b IsVampire<span class=\"br0\">(</span>f1.i,f2.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> a.s<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>f1<span class=\"sy0\">*</span>f2<span class=\"br0\">)</span>,<br/>         b.s<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>f1<span class=\"br0\">)</span>,<br/>         c.s<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>f2<span class=\"br0\">)</span>,<br/>         d.s<span class=\"sy0\">=</span>b<span class=\"sy0\">+</span>c,<br/>         i.i<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">While</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>      i<span class=\"sy0\">=</span><span class=\"kw2\">FindString</span><span class=\"br0\">(</span>d,<span class=\"kw2\">Left</span><span class=\"br0\">(</span>a,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> i<br/>        a<span class=\"sy0\">=</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>a,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        d<span class=\"sy0\">=</span><span class=\"kw2\">RemoveString</span><span class=\"br0\">(</span>d,<span class=\"kw2\">Mid</span><span class=\"br0\">(</span>d,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,#PB_String_NoCase,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">ProcedureReturn</span> #False        <br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #False<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Vampire number\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Define</span> i.i,<br/>       j.i,<br/>       m.i,<br/>       c.i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The first 25 Vampire numbers...\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">While</span> c<span class=\"sy0\">&lt;</span><span class=\"nu0\">25</span>\u00a0: i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">Gosub</span> VampireLoop\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>CheckVamp<span class=\"br0\">(</span><span class=\"nu0\">16758243290880</span><span class=\"br0\">)</span>\u00a0: CheckVamp<span class=\"br0\">(</span><span class=\"nu0\">24959017348650</span><span class=\"br0\">)</span>\u00a0: CheckVamp<span class=\"br0\">(</span><span class=\"nu0\">14593825548650</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span><br/>\u00a0<br/>VampireLoop:<br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> Factor<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>      m<span class=\"sy0\">=</span>i<span class=\"sy0\">/</span>j<br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw1\">Continue</span><br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">If</span> IsVampire<span class=\"br0\">(</span>m,j<span class=\"br0\">)</span><br/>      c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>,<span class=\"nu0\">3</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\". \"</span><span class=\"sy0\">+</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>,<span class=\"nu0\">10</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\": [\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\", \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span>    <br/>  <span class=\"kw1\">Next</span>  <br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Python", "loc": 77, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> division<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">operator</span> <span class=\"kw1\">import</span> mul<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<br/><span class=\"kw1\">from</span> functools <span class=\"kw1\">import</span> <span class=\"kw2\">reduce</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> fac<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>    return the prime factors for n<br/>    &gt;&gt;&gt; fac(600)<br/>    [5, 5, 3, 2, 2, 2]<br/>    &gt;&gt;&gt; fac(1000)<br/>    [5, 5, 5, 2, 2, 2]<br/>    &gt;&gt;&gt;  <br/>    '''</span><br/>    step <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> x: <span class=\"nu0\">1</span> + x*<span class=\"nu0\">4</span> - <span class=\"br0\">(</span>x//<span class=\"nu0\">2</span><span class=\"br0\">)</span>*<span class=\"nu0\">2</span><br/>    maxq <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    q <span class=\"sy0\">=</span> n\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"nu0\">3</span> <br/>    <span class=\"kw1\">while</span> q <span class=\"sy0\">&lt;=</span> maxq <span class=\"kw1\">and</span> n\u00a0% q <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:<br/>        q <span class=\"sy0\">=</span> step<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    res <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> q <span class=\"sy0\">&lt;=</span> maxq:<br/>        res.<span class=\"me1\">extend</span><span class=\"br0\">(</span>fac<span class=\"br0\">(</span>n//q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        res.<span class=\"me1\">extend</span><span class=\"br0\">(</span>fac<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">else</span>: res<span class=\"sy0\">=</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> res<br/>\u00a0<br/><span class=\"kw1\">def</span> fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>    return the prime factors and their multiplicities for n<br/>    &gt;&gt;&gt; fact(600)<br/>    [(2, 3), (3, 1), (5, 2)]<br/>    &gt;&gt;&gt; fact(1000)<br/>    [(2, 3), (5, 3)]<br/>    &gt;&gt;&gt; <br/>    '''</span><br/>    res <span class=\"sy0\">=</span> fac<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> res.<span class=\"me1\">count</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> divisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Returns all the divisors of n'</span><br/>    factors <span class=\"sy0\">=</span> fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span>   <span class=\"co1\"># [(primefactor, multiplicity), ...]</span><br/>    primes<span class=\"sy0\">,</span> maxpowers <span class=\"sy0\">=</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*factors<span class=\"br0\">)</span><br/>    powerranges <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>m+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> m <span class=\"kw1\">in</span> maxpowers<span class=\"br0\">)</span><br/>    powers <span class=\"sy0\">=</span> product<span class=\"br0\">(</span>*powerranges<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><br/>        <span class=\"kw2\">reduce</span><span class=\"br0\">(</span>mul<span class=\"sy0\">,</span><br/>               <span class=\"br0\">(</span>prime**power <span class=\"kw1\">for</span> prime<span class=\"sy0\">,</span> power <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>primes<span class=\"sy0\">,</span> powergroup<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> powergroup <span class=\"kw1\">in</span> powers<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> vampire<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    fangsets <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span> <span class=\"kw2\">frozenset</span><span class=\"br0\">(</span><span class=\"br0\">[</span>d<span class=\"sy0\">,</span> n//d<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> divisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>.<br/>                        <span class=\"kw1\">and</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> + <span class=\"kw2\">str</span><span class=\"br0\">(</span>n//d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n//d<span class=\"br0\">)</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"kw2\">tuple</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>fangs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> fangs <span class=\"kw1\">in</span> fangsets<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'First 25 vampire numbers'</span><span class=\"br0\">)</span><br/>    count <span class=\"sy0\">=</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> count <span class=\"sy0\">&lt;</span><span class=\"nu0\">25</span>:<br/>        n +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        fangpairs <span class=\"sy0\">=</span> vampire<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> fangpairs:<br/>            count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%i:\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> fangpairs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Specific checks for fangpairs'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">16758243290880</span><span class=\"sy0\">,</span> <span class=\"nu0\">24959017348650</span><span class=\"sy0\">,</span> <span class=\"nu0\">14593825548650</span><span class=\"br0\">)</span>:<br/>        fangpairs <span class=\"sy0\">=</span> vampire<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%i:\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> fangpairs<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 34, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>;; chock full of fun... including divisors<br/>(require math/number-theory)<br/>\u00a0<br/>;; predicate to tell if n is a vampire number<br/>(define (sub-vampire?-and-fangs n)<br/>  (define digit-count-n (add1 (order-of-magnitude n)))<br/>  (define (string-sort-characters s) (sort (string-&gt;list s) char&lt;?))<br/>  (define digits-in-order-n (string-sort-characters (number-&gt;string n)))<br/>  (define (fangs-of-n? d e)<br/>    (and (&lt;= d e)\u00a0; avoid duplication<br/>         (= (add1 (order-of-magnitude d)) (add1 (order-of-magnitude e)) (/ digit-count-n 2))<br/>         (not (= 0 (modulo d 10) (modulo e 10)))<br/>         (equal? digits-in-order-n<br/>                 (string-sort-characters (string-append (number-&gt;string d) (number-&gt;string e))))))<br/>\u00a0<br/>  (let* ((fangses (for*/list ((d (in-list (divisors n))) #:when (fangs-of-n? d (/ n d)))<br/>                    (list d (/ n d)))))<br/>    (and (not (null? fangses)) (cons n fangses))))<br/>\u00a0<br/>(define (vampire?-and-fangs n)<br/>  (and (odd? (order-of-magnitude n))\u00a0; even number of digits - else not even worth looking!<br/>       (sub-vampire?-and-fangs n)))<br/>\u00a0<br/>(displayln \"First 25 vampire numbers:\")<br/>(for ((vmp (sequence-filter identity (sequence-map vampire?-and-fangs (in-naturals 1))))<br/>      (cnt (in-range 1 (add1 25))))<br/>  (printf \"#~a ~a~%\" cnt vmp))<br/>\u00a0<br/>(displayln \"Test the big numbers:\")<br/>(displayln (vampire?-and-fangs 16758243290880))<br/>(displayln (vampire?-and-fangs 24959017348650))<br/>(displayln (vampire?-and-fangs 14593825548650))</pre>"}, {"lang": "REXX", "loc": 40, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays  N  vampire numbers,  or  verifies  if  a number is vampiric.   */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>                                <span class=\"coMULTI\">/*be able to handle gihugic numbers.   */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>;   <span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">25</span>    <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>!<span class=\"sy0\">.</span>0=<span class=\"nu0\">1260</span>;  \u00a0!<span class=\"sy0\">.</span>1=<span class=\"nu0\">11453481</span>;  \u00a0!<span class=\"sy0\">.</span>2=<span class=\"nu0\">115672</span>;  \u00a0!<span class=\"sy0\">.</span>3=<span class=\"nu0\">124483</span>;  \u00a0!<span class=\"sy0\">.</span>4=<span class=\"nu0\">105264</span>      <span class=\"coMULTI\">/*lowest #, dig.*/</span><br/>!<span class=\"sy0\">.</span>5=<span class=\"nu0\">1395</span>;  \u00a0!<span class=\"sy0\">.</span>6=<span class=\"nu0\">126846</span>;    \u00a0!<span class=\"sy0\">.</span>7=<span class=\"nu0\">1827</span>;    \u00a0!<span class=\"sy0\">.</span>8=<span class=\"nu0\">110758</span>;  \u00a0!<span class=\"sy0\">.</span>9=<span class=\"nu0\">156289</span>      <span class=\"coMULTI\">/*   \"   \"   \"  */</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*num. of vampire numbers found, so far*/</span><br/><span class=\"kw1\">if</span> N<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> j=<span class=\"nu0\">1260</span>  <span class=\"kw2\">until</span>  # <span class=\"sy0\">&gt;</span>= N             <span class=\"coMULTI\">/*search until N vampire numbers found.*/</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   j=j<span class=\"sy0\">*</span><span class=\"nu0\">10</span> - <span class=\"nu0\">1</span>;    <span class=\"kw1\">iterate</span>;     <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*adjust J*/</span><br/>            _=<span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">if</span> j<span class=\"sy0\">&lt;</span>!<span class=\"sy0\">.</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*is number tenable based on last dig? */</span><br/>            f=vampire<span class=\"br0\">(</span>j<span class=\"br0\">)</span>; <span class=\"kw1\">if</span> f==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*Are fangs null?   Yes, not vampire.  */</span><br/>            #=# + <span class=\"nu0\">1</span>                              <span class=\"coMULTI\">/*bump the vampire count, Vlad.        */</span><br/>            <span class=\"kw1\">say</span> <span class=\"st0\">'vampire number'</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>#,<span class=\"kw6\">length</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"is: \"</span> j<span class=\"st0\">',  fangs='</span> f<br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                          <span class=\"coMULTI\">/* [\u2191]  process a range of numbers.    */</span><br/>       <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;  N=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>;       f=vampire<span class=\"br0\">(</span>N<span class=\"br0\">)</span>    <span class=\"coMULTI\">/* [\u2193]  process a number; obtain fangs.*/</span><br/>            <span class=\"kw1\">if</span> f==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>       N      <span class=\"st0\">\" isn't a vampire number.\"</span><br/>                      <span class=\"kw3\">else</span> <span class=\"kw1\">say</span>       N      <span class=\"st0\">\" is a vampire number, fangs=\"</span>    f<br/>            <span class=\"kw3\">end</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>vampire: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?,, $<span class=\"sy0\">.</span> a bot;           L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>?<span class=\"br0\">)</span>;             w=L\u00a0% <span class=\"nu0\">2</span><br/>         <span class=\"kw1\">if</span> L<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">''</span>                 <span class=\"coMULTI\">/*Is  L  an odd length?  Then \u00acvampire.*/</span><br/>                     <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L;       _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>?,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;    $<span class=\"sy0\">.</span>_=$<span class=\"sy0\">.</span>_ <span class=\"sy0\">||</span> _;     <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>                     <span class=\"kw1\">do</span> m=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">10</span>;      bot=bot <span class=\"sy0\">||</span> $<span class=\"sy0\">.</span>m;                       <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*m*/</span><br/>         top=<span class=\"kw6\">left</span><span class=\"br0\">(</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span>bot<span class=\"br0\">)</span>, w<span class=\"br0\">)</span>;      bot=<span class=\"kw6\">left</span><span class=\"br0\">(</span>bot, w<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*determine limits of search*/</span><br/>         inc=?<span class=\"sy0\">//</span><span class=\"nu0\">2</span> + <span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*? is odd? INC=2. No? INC=1*/</span><br/>         beg=<span class=\"kw6\">max</span><span class=\"br0\">(</span>bot, <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>w-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;         <span class=\"kw1\">if</span> inc=<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span>  beg<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> beg=beg + <span class=\"nu0\">1</span><br/>                                                            <span class=\"coMULTI\">/* [\u2191]  odd  BEG  if odd INC*/</span><br/>                   <span class=\"kw1\">do</span> d=beg  <span class=\"kw2\">to</span>  <span class=\"kw6\">min</span><span class=\"br0\">(</span>top, <span class=\"nu0\">10</span><span class=\"sy0\">**</span>w - <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw2\">by</span> inc<br/>                   <span class=\"kw1\">if</span>\u00a0? <span class=\"sy0\">//</span> d <span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>          <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>     <span class=\"coMULTI\">/*?  not \u00f7 by D?  Then skip,*/</span><br/>                   q=?\u00a0% d;      <span class=\"kw1\">if</span> d<span class=\"sy0\">&gt;</span>q    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>     <span class=\"coMULTI\">/*is   D &gt; Q      Then skip.*/</span><br/>                   <span class=\"kw1\">if</span> q<span class=\"sy0\">*</span>d<span class=\"sy0\">//</span><span class=\"nu0\">9</span> <span class=\"sy0\">\\</span>== <span class=\"br0\">(</span>q+d<span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">9</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>     <span class=\"coMULTI\">/*modulo 9 congruence test. */</span><br/>                   <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span>    <span class=\"sy0\">\\</span>==w    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>     <span class=\"coMULTI\">/*Len of Q ^= W?  Then skip.*/</span><br/>                   <span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>q, <span class=\"nu0\">1</span><span class=\"br0\">)</span>   ==<span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>d, <span class=\"nu0\">1</span><span class=\"br0\">)</span> ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                   dq=d <span class=\"sy0\">||</span> q<br/>                   t=?;                 <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  L;        p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>dq, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, t<span class=\"br0\">)</span><br/>                                        <span class=\"kw1\">if</span> p==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> d;         t=<span class=\"kw6\">delstr</span><span class=\"br0\">(</span>t, p, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>                   a=a  <span class=\"st0\">'['</span>d<span class=\"st0\">\"\u2219\"</span>q<span class=\"st0\">']'</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*d*/</span><br/>         <span class=\"kw1\">return</span> a</pre>"}, {"lang": "Ring", "loc": 81, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Vampire number<br/>\u00a0<br/>for p = 10 to 127000<br/>     vampire(p)<br/>next<br/>\u00a0<br/>func vampire(listnum)<br/>        sum = 0<br/>        flag = 1<br/>        list = list(len(string(listnum)))<br/>        total = newlist(len(list),2)<br/>       for n = 1 to len(string(listnum))<br/>            liststr = string(listnum)<br/>            list[n] = liststr[n]<br/>       next<br/>\u00a0<br/>       for perm = 1 to fact(len(list))<br/>            numstr = substr(list2str(list), nl, \"\")<br/>            num1 = number(left(numstr,len(numstr)/2))<br/>            num2 = number(right(numstr,len(numstr)/2))<br/>            if (listnum = num1 * num2)<br/>                for n = 1 to len(total)<br/>                     if (num1 = total[n][2] and num2 = total[n][1]) or<br/>                         (num1 = total[n][1] and num2 = total[n][2])<br/>                         flag = 0<br/>                     ok<br/>               next<br/>               if flag = 1<br/>                   sum = sum + 1<br/>                   total[sum][1] = num1<br/>                   total[sum][2] = num2                <br/>                   see \"\" + listnum + \": [\" + num1 + \",\" + num2 + \"]\" + nl<br/>                ok<br/>             ok<br/>            nextPermutation(list)<br/>       next<br/>\u00a0<br/>func nextPermutation(a)<br/>     elementcount = len(a)<br/>     if elementcount &lt; 1 then return ok<br/>     pos = elementcount-1<br/>     while a[pos] &gt;= a[pos+1] <br/>           pos -= 1<br/>           if pos &lt;= 0 permutationReverse(a, 1, elementcount)<br/>              return ok<br/>     end<br/>     last = elementcount<br/>     while a[last] &lt;= a[pos]<br/>           last -= 1<br/>     end<br/>     temp = a[pos]<br/>     a[pos] = a[last]<br/>     a[last] = temp<br/>     permutationReverse(a, pos+1, elementcount)<br/>\u00a0<br/> func permutationReverse a, first, last<br/>      while first &lt; last<br/>            temp = a[first]<br/>            a[first] = a[last]<br/>            a[last] = temp<br/>            first += 1<br/>            last -= 1<br/>      end<br/>\u00a0<br/>func fact(nr)<br/>        if nr = 1 <br/>           return 1 <br/>        else<br/>           return nr * fact(nr-1)<br/>        ok<br/>\u00a0<br/>func newlist(x,y)<br/>        if isstring(x) x=0+x ok<br/>        if isstring(y) y=0+y ok<br/>        alist = list(x)<br/>        for t in alist<br/>              t = list(y)<br/>        next<br/>        return alist<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 31, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> factor_pairs n<br/>  first = n <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span>n.<span class=\"me1\">to_s</span>.<span class=\"me1\">size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>first .. <span class=\"me1\">n</span> <span class=\"sy0\">**</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"br0\">[</span>i, n <span class=\"sy0\">/</span> i<span class=\"br0\">]</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> i == <span class=\"nu0\">0</span> <span class=\"br0\">}</span>.<span class=\"me1\">compact</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> vampire_factors n<br/>  <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> n.<span class=\"me1\">to_s</span>.<span class=\"me1\">size</span>.<span class=\"me1\">odd</span>?<br/>  half = n.<span class=\"me1\">to_s</span>.<span class=\"me1\">size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  factor_pairs<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"kw3\">select</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>a, b<span class=\"sy0\">|</span><br/>    a.<span class=\"me1\">to_s</span>.<span class=\"me1\">size</span> == half <span class=\"sy0\">&amp;&amp;</span> b.<span class=\"me1\">to_s</span>.<span class=\"me1\">size</span> == half <span class=\"sy0\">&amp;&amp;</span><br/>    <span class=\"br0\">[</span>a, b<span class=\"br0\">]</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x<span class=\"sy0\">%</span>10 == <span class=\"nu0\">0</span><span class=\"br0\">}</span>\u00a0!= <span class=\"nu0\">2</span>          <span class=\"sy0\">&amp;&amp;</span><br/>    <span class=\"st0\">\"#{a}#{b}\"</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">sort</span> == n.<span class=\"me1\">to_s</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">sort</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>i = vamps = <span class=\"nu0\">0</span><br/><span class=\"kw1\">until</span> vamps == <span class=\"nu0\">25</span><br/>  vf = vampire_factors<span class=\"br0\">(</span>i <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">unless</span> vf.<span class=\"me1\">empty</span>?<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{i}:<span class=\"es0\">\\t</span>#{vf}\"</span><br/>    vamps <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">16758243290880</span>, <span class=\"nu0\">24959017348650</span>, <span class=\"nu0\">14593825548650</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>vf = vampire_factors n<span class=\"br0\">)</span>.<span class=\"me1\">empty</span>?<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{n} is not a vampire number!\"</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{n}:<span class=\"es0\">\\t</span>#{vf}\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 50, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Stream.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> math.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span>.<span class=\"me1\">ListBuffer</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> VampireNumbers <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> elapsed<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Long <span class=\"sy0\">=</span> f <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> System.<span class=\"me1\">currentTimeMillis</span><span class=\"sy0\">;</span> f<span class=\"sy0\">;</span> <span class=\"br0\">(</span>System.<span class=\"me1\">currentTimeMillis</span> - s<span class=\"br0\">)</span>/<span class=\"nu0\">1000</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sexp <span class=\"sy0\">=</span> from<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>   <span class=\"co1\">// stream of integer: 1,3,5,7, ...</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rs<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> Stream<span class=\"br0\">[</span>Pair<span class=\"br0\">[</span>Long,Long<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> exps <span class=\"sy0\">=&gt;</span> Pair<span class=\"br0\">(</span>pow<span class=\"br0\">(</span><span class=\"nu0\">10</span>,exps.<span class=\"me1\">head</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span>,<span class=\"br0\">(</span>pow<span class=\"br0\">(</span><span class=\"nu0\">10</span>,exps.<span class=\"me1\">head</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">)</span><span class=\"sy0\">#::</span>rs<span class=\"br0\">(</span>exps.<span class=\"me1\">tail</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> srs <span class=\"sy0\">=</span> rs<span class=\"br0\">(</span>sexp<span class=\"br0\">)</span>   <span class=\"co1\">// stream of ranges: [10..99], [1000..9999], [100000..999999], ...</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cs<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Pair<span class=\"br0\">[</span>Long,Long<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> Stream<span class=\"br0\">[</span>Long<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>rs.<span class=\"me1\">head</span>.<span class=\"sy0\">_</span>1 to rs.<span class=\"me1\">head</span>.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span>.<span class=\"me1\">toStream</span><span class=\"sy0\">#:::</span>cs<span class=\"br0\">(</span>rs.<span class=\"me1\">tail</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> scs <span class=\"sy0\">=</span> cs<span class=\"br0\">(</span>srs<span class=\"br0\">)</span>   <span class=\"co1\">// stream of candidates: 10,11,..,99,1000,1001,..,9999, ...</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> it <span class=\"sy0\">=</span> scs.<span class=\"me1\">iterator</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> checkVN<span class=\"sy0\">:</span> Long <span class=\"sy0\">=&gt;</span> Pair<span class=\"br0\">[</span>Long,Seq<span class=\"br0\">[</span>Pair<span class=\"br0\">[</span>Long,Long<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> check<span class=\"sy0\">:</span> Pair<span class=\"br0\">[</span>Long,Long<span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> Pair<span class=\"br0\">[</span>Long,Long<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len<span class=\"sy0\">:</span> Long <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> n.<span class=\"me1\">toString</span>.<span class=\"me1\">size</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> p<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">%</span>10<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span><span class=\"br0\">(</span>b<span class=\"sy0\">%</span>10<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> Pair<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>len<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> len<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> Pair<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n.<span class=\"me1\">toString</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">diff</span><span class=\"br0\">(</span>a.<span class=\"me1\">toString</span>.<span class=\"me1\">toList</span>++b.<span class=\"me1\">toString</span>.<span class=\"me1\">toList</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span>Nil<span class=\"br0\">)</span> Pair<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> p<br/>    <span class=\"br0\">}</span><br/>    Pair<span class=\"br0\">(</span>n,<span class=\"br0\">(</span>pow<span class=\"br0\">(</span><span class=\"nu0\">10</span>,log10<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span>+<span class=\"nu0\">1</span> to sqrt<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">{</span>i<span class=\"sy0\">=&gt;</span>n<span class=\"sy0\">%</span>i<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>     .<span class=\"me1\">map</span> <span class=\"br0\">{</span>fac <span class=\"sy0\">=&gt;</span>Pair<span class=\"br0\">(</span>fac,n/fac<span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span>p <span class=\"sy0\">=&gt;</span> check<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"sy0\">_</span>1 <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> et <span class=\"sy0\">=</span> elapsed <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lb <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ListBuffer<span class=\"br0\">[</span>Pair<span class=\"br0\">[</span>Long,Seq<span class=\"br0\">[</span>Pair<span class=\"br0\">[</span>Long,Long<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>lb.<span class=\"me1\">size</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span><span class=\"br0\">(</span>it.<span class=\"me1\">hasNext</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      checkVN<span class=\"br0\">(</span>it.<span class=\"me1\">next</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>n, Seq<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> p          <span class=\"sy0\">=&gt;</span> lb +<span class=\"sy0\">=</span> p<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    lb.<span class=\"me1\">toList</span>.<span class=\"me1\">zipWithIndex</span>.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span>p <span class=\"sy0\">=&gt;</span><br/>      println<span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2+<span class=\"nu0\">1</span>+<span class=\"st0\">\": \"</span>+p.<span class=\"sy0\">_</span>1.<span class=\"sy0\">_</span>1+<span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>1.<span class=\"sy0\">_</span>2<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span><span class=\"st0\">\" = \"</span>+x.<span class=\"sy0\">_</span>1+<span class=\"st0\">\" x \"</span>+x.<span class=\"sy0\">_</span>2+y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<br/>\u00a0<br/>    List<span class=\"br0\">(</span>16758243290880L, 24959017348650L, 14593825548650L<span class=\"br0\">)</span><br/>      .<span class=\"me1\">map</span> <span class=\"br0\">{</span>checkVN<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      .<span class=\"me1\">foreach</span> <span class=\"br0\">{</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>n, Seq<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>n+<span class=\"st0\">\" is not vampiric\"</span><span class=\"br0\">)</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> p <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>1+<span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2<span class=\"sy0\">:</span>\\<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span><span class=\"st0\">\" = \"</span>+x.<span class=\"sy0\">_</span>1+<span class=\"st0\">\" x \"</span>+x.<span class=\"sy0\">_</span>2+y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span>+<span class=\"st0\">\"elapsed time: \"</span>+et+<span class=\"st0\">\" seconds\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 39, "block": "<pre class=\"ruby highlighted_source\">func is_vampire <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> n.<span class=\"me1\">ilog10</span>.<span class=\"me1\">is_even</span><br/>\u00a0<br/>    var l1 = n.<span class=\"me1\">isqrt</span>.<span class=\"me1\">ilog10</span>.<span class=\"me1\">ipow10</span><br/>    var l2 = n.<span class=\"me1\">isqrt</span><br/>\u00a0<br/>    var s = n.<span class=\"me1\">digits</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">join</span><br/>\u00a0<br/>    gather <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">divisors</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>d<span class=\"sy0\">|</span><br/>\u00a0<br/>            d <span class=\"sy0\">&lt;</span> l1 <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>            d <span class=\"sy0\">&gt;</span> l2 <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">break</span><br/>\u00a0<br/>            var t = n<span class=\"sy0\">/</span>d<br/>\u00a0<br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d<span class=\"sy0\">%%</span>10 <span class=\"sy0\">&amp;&amp;</span> t<span class=\"sy0\">%%</span>10<span class=\"br0\">)</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"st0\">\"#{d}#{t}\"</span>.<span class=\"me1\">sort</span>\u00a0!= s<span class=\"br0\">)</span><br/>\u00a0<br/>            take<span class=\"br0\">(</span><span class=\"br0\">[</span>d, t<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"First 25 Vampire Numbers:\"</span><br/>\u00a0<br/>with <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>var n = <span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">25</span>; <span class=\"sy0\">++</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var fangs = is_vampire<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d.\u00a0%6s\u00a0:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, i<span class=\"sy0\">++</span>, n, fangs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> fangs<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>Individual tests:\"</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">16758243290880</span>, <span class=\"nu0\">24959017348650</span>, <span class=\"nu0\">14593825548650</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    var fangs = is_vampire<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    say <span class=\"st0\">\"#{n}: #{fangs\u00a0? fangs.join(', ')\u00a0: 'is not a vampire number'}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> factorPairs <span class=\"br0\">{</span>n <span class=\"br0\">{</span>from <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">1</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$from</span><span class=\"sy0\">&lt;</span>=<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> from <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$from</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>=sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span><span class=\"re0\">$i</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> result <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span>/<span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> vampireFactors <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">%</span>2<span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">set</span> half <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$n</span><span class=\"br0\">]</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> digits <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$n</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">[</span>factorPairs <span class=\"re0\">$n</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"re0\">$half</span>/<span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><br/>\t    <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$a</span><span class=\"br0\">]</span>==<span class=\"re0\">$half</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$b</span><span class=\"br0\">]</span>==<span class=\"re0\">$half</span> <span class=\"sy0\">&amp;&amp;</span><br/>\t    <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">%</span>10 || <span class=\"re0\">$b</span><span class=\"sy0\">%</span>10<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$digits</span> eq <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$a</span><span class=\"re0\">$b</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">fcn fangs(N){ //--&gt;if Vampire number: (N,(a,b,c,...)), where a*x==N<br/>   var [const] tens=[0 .. 18].pump(List,(10.0).pow,\"toInt\");<br/>\u00a0<br/>   (half:=N.numDigits)\u00a0: if (_.isOdd) return(T);;<br/>   half/=2; digits:=N.toString().sort();<br/>   lo:=tens[half-1].max((N+tens[half])/(tens[half]));<br/>   hi:=(N/lo).min(N.toFloat().sqrt());<br/>   fs:=[lo .. hi].filter('wrap(n){<br/>      N%n==0 and (n%10!=0 or (N/n)%10!=0) and<br/>      (n.toString()+(N/n).toString()).sort()==digits<br/>   });<br/>   fs and T(N,fs) or T;<br/>}</pre>"}]}