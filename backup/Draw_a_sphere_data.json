{"task": "Draw_a_sphere", "blocks": [{"lang": "Ada", "loc": 30, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Glib;                <span class=\"kw3\">use</span> Glib;<br/><span class=\"kw3\">with</span> Cairo;               <span class=\"kw3\">use</span> Cairo;<br/><span class=\"kw3\">with</span> Cairo.<span class=\"me1\">Png</span>;           <span class=\"kw3\">use</span> Cairo.<span class=\"me1\">Png</span>;<br/><span class=\"kw3\">with</span> Cairo.<span class=\"me1\">Pattern</span>;       <span class=\"kw3\">use</span> Cairo.<span class=\"me1\">Pattern</span>;<br/><span class=\"kw3\">with</span> Cairo.<span class=\"me1\">Image_Surface</span>; <span class=\"kw3\">use</span> Cairo.<span class=\"me1\">Image_Surface</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Sphere <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Dub <span class=\"kw1\">is</span> Glib.<span class=\"me1\">Gdouble</span>;<br/>\u00a0<br/>   Surface   \u00a0: Cairo_Surface;<br/>   Cr        \u00a0: Cairo_Context;<br/>   Pat       \u00a0: Cairo_Pattern;<br/>   Status_Out\u00a0: Cairo_Status;<br/>   M_Pi      \u00a0: <span class=\"kw3\">constant</span> Dub\u00a0:= Dub <span class=\"br0\">(</span>Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Pi</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Surface\u00a0:= Create <span class=\"br0\">(</span>Cairo_Format_ARGB32, <span class=\"nu0\">512</span>, <span class=\"nu0\">512</span><span class=\"br0\">)</span>;<br/>   Cr     \u00a0:= Create <span class=\"br0\">(</span>Surface<span class=\"br0\">)</span>;<br/>   Pat    \u00a0:=<br/>      Cairo.<span class=\"me1\">Pattern</span>.<span class=\"me1\">Create_Radial</span> <span class=\"br0\">(</span><span class=\"nu0\">230.4</span>, <span class=\"nu0\">204.8</span>, <span class=\"nu0\">51.1</span>, <span class=\"nu0\">204.8</span>, <span class=\"nu0\">204.8</span>, <span class=\"nu0\">256.0</span><span class=\"br0\">)</span>;<br/>   Cairo.<span class=\"me1\">Pattern</span>.<span class=\"me1\">Add_Color_Stop_Rgba</span> <span class=\"br0\">(</span>Pat, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>;<br/>   Cairo.<span class=\"me1\">Pattern</span>.<span class=\"me1\">Add_Color_Stop_Rgba</span> <span class=\"br0\">(</span>Pat, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>;<br/>   Cairo.<span class=\"me1\">Set_Source</span> <span class=\"br0\">(</span>Cr, Pat<span class=\"br0\">)</span>;<br/>   Cairo.<span class=\"me1\">Arc</span> <span class=\"br0\">(</span>Cr, <span class=\"nu0\">256.0</span>, <span class=\"nu0\">256.0</span>, <span class=\"nu0\">153.6</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">2.0</span> * M_Pi<span class=\"br0\">)</span>;<br/>   Cairo.<span class=\"me1\">Fill</span> <span class=\"br0\">(</span>Cr<span class=\"br0\">)</span>;<br/>   Cairo.<span class=\"me1\">Pattern</span>.<span class=\"me1\">Destroy</span> <span class=\"br0\">(</span>Pat<span class=\"br0\">)</span>;<br/>   Status_Out\u00a0:= Write_To_Png <span class=\"br0\">(</span>Surface, <span class=\"st0\">\"SphereAda.png\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">pragma</span> Assert <span class=\"br0\">(</span>Status_Out = Cairo_Status_Success<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Sphere;</pre>"}, {"lang": "Arendelle", "loc": 1, "block": "<pre>[ #j , \n   [ #i , \n      { ( #x - 19 ) ^ 2 + \n        ( #y - 14 ) ^ 2 &lt; 125 , p \n      } r\n   ] [ #i , l ] d\n]</pre>"}, {"lang": "ATS", "loc": 103, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(*<br/>** Solution to Draw_a_sphere.dats<br/>*)<br/>\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_define.hats\" // defines some names<br/>#include<br/>\"share/atspre_staload.hats\" // for targeting C<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\" // for ...<br/>#include<br/>\"share/HATS/atslib_staload_libats_libc.hats\" // for libc<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>extern<br/>fun<br/>Draw_a_sphere<br/>(<br/>  R: double, k: double, ambient: double<br/>)\u00a0: void // end of [Draw_a_sphere]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>Draw_a_sphere<br/>(<br/>  R: double, k: double, ambient: double<br/>) = let<br/>    fun normalize(v0: double, v1: double, v2: double): (double, double, double) = let<br/>        val len = sqrt(v0*v0+v1*v1+v2*v2)<br/>    in<br/>        (v0/len, v1/len, v2/len)<br/>    end // end of [normalize]<br/>\u00a0<br/>    fun dot(v0: double, v1: double, v2: double, x0: double, x1: double, x2: double): double = let<br/>        val d = v0*x0+v1*x1+v2*x2<br/>        val sgn = gcompare_val_val&lt;double&gt; (d, 0.0)<br/>    in<br/>        if sgn &lt; 0 then ~d else 0.0<br/>    end // end of [dot]<br/>\u00a0<br/>    fun print_char(i: int): void =<br/>        if i = 0 then print!(\".\") else<br/>        if i = 1 then print!(\":\") else<br/>        if i = 2 then print!(\"!\") else<br/>        if i = 3 then print!(\"*\") else<br/>        if i = 4 then print!(\"o\") else<br/>        if i = 5 then print!(\"e\") else<br/>        if i = 6 then print!(\"&amp;\") else<br/>        if i = 7 then print!(\"#\") else<br/>        if i = 8 then print!(\"%\") else<br/>        if i = 9 then print!(\"@\") else print!(\" \")<br/>\u00a0<br/>    val i_start = floor(~R)<br/>    val i_end = ceil(R)<br/>    val j_start = floor(~2 * R)<br/>    val j_end = ceil(2 * R)<br/>    val (l0, l1, l2) = normalize(30.0, 30.0, ~50.0)<br/>\u00a0<br/>    fun loopj(j: int, j_end: int, x: double): void = let<br/>        val y = j / 2.0 + 0.5;<br/>        val sgn = gcompare_val_val&lt;double&gt; (x*x + y*y, R*R)<br/>        val (v0, v1, v2) = normalize(x, y, sqrt(R*R - x*x - y*y))<br/>        val b = pow(dot(l0, l1, l2, v0, v1, v2), k) + ambient<br/>        val intensity = 9.0 - 9.0*b<br/>        val sgn2 = gcompare_val_val&lt;double&gt; (intensity, 0.0)<br/>        val sgn3 = gcompare_val_val&lt;double&gt; (intensity, 9.0)<br/>    in<br/>    (   if sgn &gt; 0 then print_char(10) else <br/>        if sgn2 &lt; 0 then print_char(0) else<br/>        if sgn3 &gt;= 0 then print_char(8) else<br/>        print_char(g0float2int(intensity));<br/>        if j &lt; j_end then loopj(j+1, j_end, x)<br/>    )<br/>    end // end of [loopj]<br/>\u00a0<br/>    fun loopi(i: int, i_end: int, j: int, j_end: int): void = let<br/>        val x = i + 0.5<br/>        val () = loopj(j, j_end, x)<br/>        val () = println!()<br/>    in<br/>        if i &lt; i_end then loopi(i+1, i_end, j, j_end)<br/>    end // end of [loopi]<br/>\u00a0<br/>in<br/>    loopi(g0float2int(i_start), g0float2int(i_end), g0float2int(j_start), g0float2int(j_end))<br/>end<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0() = () where<br/>{<br/>  val () = DrawSphere(20.0, 4.0, .1)<br/>  val () = DrawSphere(10.0, 2.0, .4)<br/>} (* end of [main0] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 57, "block": "<pre class=\"ahk highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a><span class=\"sy0\">,</span> Force<br/>\u00a0<br/><span class=\"co1\">; Uncomment if Gdip.ahk is not in your standard library</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_Include.htm\"><span class=\"kw5\">#Include</span></a><span class=\"sy0\">,</span> Gdip<span class=\"sy0\">.</span>ahk<br/>\u00a0<br/><span class=\"co1\">; Settings</span><br/>X <span class=\"sy0\">:=</span> <span class=\"nu0\">200</span><span class=\"sy0\">,</span> Y <span class=\"sy0\">:=</span> <span class=\"nu0\">200</span><span class=\"sy0\">,</span> Width <span class=\"sy0\">:=</span> <span class=\"nu0\">200</span><span class=\"sy0\">,</span> Height <span class=\"sy0\">:=</span> <span class=\"nu0\">200</span> <span class=\"co1\">; Location and size of sphere</span><br/>rotation <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">30</span> <span class=\"co1\">; degrees</span><br/>ARGB <span class=\"sy0\">:=</span> 0xFFFF0000 <span class=\"co1\">; Color=Solid Red</span><br/>\u00a0<br/><span class=\"kw1\">If</span>\u00a0!pToken <span class=\"sy0\">:=</span> Gdip_Startup<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; Start gdi+</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> gdiplus error!<span class=\"sy0\">,</span> Gdiplus failed to start<span class=\"sy0\">.</span> Please ensure you have gdiplus on your system<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/OnExit.htm\"><span class=\"kw3\">OnExit</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Exit.htm\"><span class=\"kw3\">Exit</span></a><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>Caption <span class=\"sy0\">+</span>E0x80000 <span class=\"sy0\">+</span>LastFound <span class=\"sy0\">+</span>AlwaysOnTop <span class=\"sy0\">+</span>ToolWindow <span class=\"sy0\">+</span>OwnDialogs <span class=\"co1\">; Create GUI</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,</span> NA <span class=\"co1\">; Show GUI</span><br/>hwnd1 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">WinExist</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; Get a handle to this window we have created in order to update it later</span><br/>hbm <span class=\"sy0\">:=</span> CreateDIBSection<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScreenWidth\"><span class=\"kw2\">A_ScreenWidth</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScreenHeight\"><span class=\"kw2\">A_ScreenHeight</span></a><span class=\"br0\">)</span> <span class=\"co1\">; Create a gdi bitmap drawing area</span><br/>hdc <span class=\"sy0\">:=</span> CreateCompatibleDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; Get a device context compatible with the screen</span><br/>obm <span class=\"sy0\">:=</span> SelectObject<span class=\"br0\">(</span>hdc<span class=\"sy0\">,</span> hbm<span class=\"br0\">)</span> <span class=\"co1\">; Select the bitmap into the device context</span><br/>pGraphics <span class=\"sy0\">:=</span> Gdip_GraphicsFromHDC<span class=\"br0\">(</span>hdc<span class=\"br0\">)</span> <span class=\"co1\">; Get a pointer to the graphics of the bitmap, for use with drawing functions</span><br/>Gdip_SetSmoothingMode<span class=\"br0\">(</span>pGraphics<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"co1\">; Set the smoothing mode to antialias = 4 to make shapes appear smother</span><br/>\u00a0<br/>Gdip_TranslateWorldTransform<span class=\"br0\">(</span>pGraphics<span class=\"sy0\">,</span> X<span class=\"sy0\">,</span> Y<span class=\"br0\">)</span><br/>Gdip_RotateWorldTransform<span class=\"br0\">(</span>pGraphics<span class=\"sy0\">,</span> rotation<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Base ellipse</span><br/>pBrush <span class=\"sy0\">:=</span> Gdip_CreateLineBrushFromRect<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> Width<span class=\"sy0\">,</span> Height<span class=\"sy0\">,</span> ARGB<span class=\"sy0\">,</span> 0xFF000000<span class=\"br0\">)</span><br/>Gdip_FillEllipse<span class=\"br0\">(</span>pGraphics<span class=\"sy0\">,</span> pBrush<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> Width<span class=\"sy0\">,</span> Height<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; First highlight ellipse</span><br/>pBrush <span class=\"sy0\">:=</span> Gdip_CreateLineBrushFromRect<span class=\"br0\">(</span>Width<span class=\"sy0\">*</span><span class=\"nu0\">0.1</span><span class=\"sy0\">,</span> Height<span class=\"sy0\">*</span><span class=\"nu0\">0.01</span><span class=\"sy0\">,</span> Width<span class=\"sy0\">*</span><span class=\"nu0\">0.8</span><span class=\"sy0\">,</span> Height<span class=\"sy0\">*</span><span class=\"nu0\">0.6</span><span class=\"sy0\">,</span> 0x33FFFFFF<span class=\"sy0\">,</span> 0x00FFFFFF<span class=\"br0\">)</span><br/>Gdip_FillEllipse<span class=\"br0\">(</span>pGraphics<span class=\"sy0\">,</span> pBrush<span class=\"sy0\">,</span> Width<span class=\"sy0\">*</span><span class=\"nu0\">0.1</span><span class=\"sy0\">,</span> Height<span class=\"sy0\">*</span><span class=\"nu0\">0.01</span><span class=\"sy0\">,</span> Width<span class=\"sy0\">*</span><span class=\"nu0\">0.8</span><span class=\"sy0\">,</span> Height<span class=\"sy0\">*</span><span class=\"nu0\">0.6</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Second highlight ellipse</span><br/>pBrush <span class=\"sy0\">:=</span> Gdip_CreateLineBrushFromRect<span class=\"br0\">(</span>Width<span class=\"sy0\">*</span><span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> Height<span class=\"sy0\">*</span><span class=\"nu0\">0.02</span><span class=\"sy0\">,</span> Width<span class=\"sy0\">*</span><span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> Height<span class=\"sy0\">*</span><span class=\"nu0\">0.2</span><span class=\"sy0\">,</span> 0xBBFFFFFF<span class=\"sy0\">,</span> 0x00FFFFFF<span class=\"br0\">)</span><br/>Gdip_FillEllipse<span class=\"br0\">(</span>pGraphics<span class=\"sy0\">,</span> pBrush<span class=\"sy0\">,</span> Width<span class=\"sy0\">*</span><span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> Height<span class=\"sy0\">*</span><span class=\"nu0\">0.02</span><span class=\"sy0\">,</span> Width<span class=\"sy0\">*</span><span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> Height<span class=\"sy0\">*</span><span class=\"nu0\">0.2</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>UpdateLayeredWindow<span class=\"br0\">(</span>hwnd1<span class=\"sy0\">,</span> hdc<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScreenWidth\"><span class=\"kw2\">A_ScreenWidth</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScreenHeight\"><span class=\"kw2\">A_ScreenHeight</span></a><span class=\"br0\">)</span><br/>SelectObject<span class=\"br0\">(</span>hdc<span class=\"sy0\">,</span> obm<span class=\"br0\">)</span> <span class=\"co1\">; Select the object back into the hdc</span><br/>Gdip_DeletePath<span class=\"br0\">(</span>Path<span class=\"br0\">)</span><br/>Gdip_DeleteBrush<span class=\"br0\">(</span>pBrush<span class=\"br0\">)</span><br/>DeleteObject<span class=\"br0\">(</span>hbm<span class=\"br0\">)</span> <span class=\"co1\">; Now the bitmap may be deleted</span><br/>DeleteDC<span class=\"br0\">(</span>hdc<span class=\"br0\">)</span> <span class=\"co1\">; Also the device context related to the bitmap may be deleted</span><br/>Gdip_DeleteGraphics<span class=\"br0\">(</span>G<span class=\"br0\">)</span> <span class=\"co1\">; The graphics may now be deleted</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Exit.htm\"><span class=\"kw3\">Exit</span></a>:<br/><span class=\"co1\">; gdi+ may now be shutdown on exiting the program</span><br/>Gdip_Shutdown<span class=\"br0\">(</span>pToken<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">clg<br/>color white<br/>rect 0,0,graphwidth, graphheight<br/>For n = 1 to 100<br/>color rgb(2*n,2*n,2*n)<br/>circle 150-2*n/3,150-n/2,150-n<br/>next n</pre>"}, {"lang": "Batch File", "loc": 40, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off <br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>mode <a href=\"http://www.ss64.com/nt/con.html\"><span class=\"kw4\">con</span></a> cols=80<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a r=220,cent=340,r2=r/2<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"spaces=                                   \"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"block1=MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"block2=#########\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"block3=XXXXXXXXX\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"block4=ooooooooo\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"block5=?????????\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"block6=*********\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"block7=~~~~~~~~~\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"block8=---------\"<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> wy=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> linea=<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>                           Batch-File ASCII Ball<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>. <br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">y</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>-<span class=\"sy0\">%</span><span class=\"re3\">r</span><span class=\"sy0\">%</span>,10,<span class=\"sy0\">%</span><span class=\"re3\">r</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>   <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"w1=r*r-<span class=\"sy0\">%%</span><span class=\"re3\">y</span>*<span class=\"sy0\">%%</span><span class=\"re3\">y</span>\"<br/>   <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:sqrt2 w1 w1 <br/>   <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"w1=14*w1/10,wy=<span class=\"sy0\">(</span>cent-w1<span class=\"sy0\">)</span>,cnt=0,sp=wy/10,centre=cent/10-sp\"<br/>   <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"linea=<span class=\"sy0\">%%</span><span class=\"re3\">spaces:~0,!<span class=\"re2\">sp</span><span class=\"sy0\">!</span><span class=\"sy0\">%%</span><span class=\"sy0\">%%</span><span class=\"re3\">block1:~0,</span><span class=\"sy0\">!</span><span class=\"re2\">centre</span>!</span><span class=\"sy0\">%%</span><br/>   <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a wy=0,sum=0<br/>   <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>30 80 120 150 170 185 195 200<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>        <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"cnt+=1,wy2=<span class=\"sy0\">(%%</span><span class=\"re3\">i</span>+r2<span class=\"sy0\">)</span>*w1/r,ww=<span class=\"sy0\">(</span>wy2+5<span class=\"sy0\">)</span>/10-sum,wy=wy2,sum+=ww\" <br/>        <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> miblock=<span class=\"sy0\">%%</span><span class=\"re3\">block!<span class=\"re2\">cnt</span>!</span><span class=\"sy0\">%%</span> <br/>        <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"Linea=<span class=\"sy0\">%%</span><span class=\"re3\">linea</span><span class=\"sy0\">%%</span><span class=\"sy0\">%%</span><span class=\"re3\">miblock:~0,!<span class=\"re2\">ww</span>!</span><span class=\"sy0\">%%</span>\"   <br/>   <span class=\"sy0\">)</span>  <br/>   <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(!</span><span class=\"re2\">linea</span><span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.  <br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <br/>\u00a0<br/>:<span class=\"re0\">sqrt2</span>   [num] calculates integer square root . By AAcini<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"s=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">~1</span></span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /A \"x=s/<span class=\"sy0\">(</span>11*1024<span class=\"sy0\">)</span>+40,x=<span class=\"sy0\">(</span>s/x+x<span class=\"sy0\">)&gt;&gt;</span>1,x=<span class=\"sy0\">(</span>s/x+x<span class=\"sy0\">)&gt;&gt;</span>1,x=<span class=\"sy0\">(</span>s/x+x<span class=\"sy0\">)&gt;&gt;</span>1,x=<span class=\"sy0\">(</span>s/x+x<span class=\"sy0\">)&gt;&gt;</span>1,x=<span class=\"sy0\">(</span>s/x+x<span class=\"sy0\">)&gt;&gt;</span>1,x+=<span class=\"sy0\">(</span>s-x*x<span class=\"sy0\">)&gt;&gt;</span>31<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">~2</span>=<span class=\"sy0\">%</span><span class=\"re3\">x</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b</pre>"}, {"lang": "Befunge", "loc": 8, "block": "<pre class=\"text highlighted_source\">45*65*65*\"2\"30p20p10p::00p2*40p4*5vv&lt;<br/>&gt;60p140g-&gt;:::*00g50g*60g40g-:*-\\-v0&gt;1<br/>^<a class=\"__cf_email__\" data-cfemail=\"104f50\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#`\\g0&lt;|`\\g04:+1, &lt;*84$$_v#`\\0:&lt;&gt;p^<br/>&gt;v&gt;g2+:5^$&gt;g:*++*/7g^&gt;*:9$#&lt;\"~\"/:\"~\"v<br/>g:^06,+55&lt;^03*&lt;v09p07%\"~\"p09/\"~\"p08%&lt;<br/>^&gt;#0 *#12#&lt;0g:^&gt;+::\"~~\"90g*80g+*70gv|<br/>g-10g*+:9**00gv|!*`\\2\\`-20::/2-\\/\\+&lt;&gt;<br/>%#&amp;eo*!:..^g05&lt;&gt;$030g-*9/\\20g*+60g40^</pre>"}, {"lang": "Brlcad", "loc": 3, "block": "<pre class=\"text highlighted_source\">opendb balls.g y            # Create a database to hold our shapes<br/>units cm                     # Set the unit of measure<br/>in ball.s sph 0 0 0 3  # Create a sphere of radius 3 cm named ball.s with its centre at 0,0,0 </pre>"}, {"lang": "C", "loc": 57, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>shades <span class=\"sy0\">=</span> <span class=\"st0\">\".:!*oe&amp;#%@\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> light<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">50</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> normalize<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> dot<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>x<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span>d <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> draw_sphere<span class=\"br0\">(</span><span class=\"kw4\">double</span> R<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> k<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> ambient<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> intensity<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> b<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> vec<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/floor.html\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ceil.html\"><span class=\"kw3\">ceil</span></a><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu18\">.5</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/floor.html\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R<span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ceil.html\"><span class=\"kw3\">ceil</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R<span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        y <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>. <span class=\"sy0\">+</span> <span class=\"nu18\">.5</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">&lt;=</span> R <span class=\"sy0\">*</span> R<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                vec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>                                vec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>                                vec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>R <span class=\"sy0\">*</span> R <span class=\"sy0\">-</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">-</span> y <span class=\"sy0\">*</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                normalize<span class=\"br0\">(</span>vec<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                b <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>dot<span class=\"br0\">(</span>light<span class=\"sy0\">,</span> vec<span class=\"br0\">)</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"sy0\">+</span> ambient<span class=\"sy0\">;</span><br/>                                intensity <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>shades<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>intensity <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> intensity <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>intensity <span class=\"sy0\">&gt;=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>shades<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                        intensity <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>shades<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>shades<span class=\"br0\">[</span>intensity<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>                                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        normalize<span class=\"br0\">(</span>light<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        draw_sphere<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu18\">.1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        draw_sphere<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu18\">.4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 51, "block": "<pre class=\"java highlighted_source\">using <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace Sphere <span class=\"br0\">{</span><br/>    internal <span class=\"kw1\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> string Shades <span class=\"sy0\">=</span> <span class=\"st0\">\".:!*oe%&amp;#@\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> readonly <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Light <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"sy0\">-</span><span class=\"nu0\">50</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Normalize<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> len <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span><br/>            v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span><br/>            v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> Dot<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> x, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span>d <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> DrawSphere<span class=\"br0\">(</span><span class=\"kw4\">double</span> r, <span class=\"kw4\">double</span> k, <span class=\"kw4\">double</span> ambient<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            var vec <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span>var i <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">Floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">Ceiling</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> .5<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span>var j <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">Floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">Ceiling</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> j<span class=\"sy0\">/</span><span class=\"nu0\">2.0</span> <span class=\"sy0\">+</span> .5<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span>y <span class=\"sy0\">&lt;=</span> r<span class=\"sy0\">*</span>r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        vec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>                        vec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>                        vec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>r<span class=\"sy0\">*</span>r <span class=\"sy0\">-</span> x<span class=\"sy0\">*</span>x <span class=\"sy0\">-</span> y<span class=\"sy0\">*</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        Normalize<span class=\"br0\">(</span>vec<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">Pow</span><span class=\"br0\">(</span>Dot<span class=\"br0\">(</span>Light, vec<span class=\"br0\">)</span>, k<span class=\"br0\">)</span> <span class=\"sy0\">+</span> ambient<span class=\"sy0\">;</span><br/>                        <span class=\"kw4\">int</span> intensity <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                                            <span class=\"sy0\">?</span> Shades.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>                                            <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">Max</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> b<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>Shades.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span>Shades<span class=\"br0\">[</span>intensity<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">else</span><br/>                        Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Normalize<span class=\"br0\">(</span>Light<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            DrawSphere<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">4</span>, .1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            DrawSphere<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2</span>, .4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console.<span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 22, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>use 'quil<span class=\"sy0\">.</span>core<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> w <span class=\"nu0\">500</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> h <span class=\"nu0\">400</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> setup <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>background <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> draw <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>push<span class=\"sy0\">-</span>matrix<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>translate <span class=\"nu0\">250</span> <span class=\"nu0\">200</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>sphere <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>pop<span class=\"sy0\">-</span>matrix<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defsketch main<br/> \u00a0:<span class=\"me1\">title</span> <span class=\"st0\">\"sphere\"</span><br/> \u00a0:<span class=\"me1\">setup</span> setup<br/> \u00a0:<span class=\"me1\">size</span> <span class=\"br0\">[</span>w h<span class=\"br0\">]</span><br/> \u00a0:<span class=\"me1\">draw</span> draw<br/> \u00a0:<span class=\"me1\">renderer</span>\u00a0:<span class=\"me1\">opengl</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 40, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> V3 <span class=\"sy0\">=</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">immutable</span> light <span class=\"sy0\">=</span> normalize<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu16\">30.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">30.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">50.0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>V3 normalize<span class=\"br0\">(</span>V3 v<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @nogc <span class=\"br0\">{</span><br/>    v<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> dotProduct<span class=\"br0\">(</span>v<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu16\">0.5</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> dot<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> V3 x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> V3 y<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> dotProduct<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span>d <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> drawSphere<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">double</span> R<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> k<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> ambient<span class=\"br0\">)</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> shades <span class=\"sy0\">=</span> <span class=\"st0\">\".:!*oe&amp;#%@\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>floor<span class=\"br0\">(</span><span class=\"sy0\">-</span>R<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>ceil<span class=\"br0\">(</span>R<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu16\">0.5</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>floor<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R<span class=\"br0\">)</span> <span class=\"sy0\">..</span><br/>                              <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>ceil<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>. <span class=\"sy0\">+</span> <span class=\"nu16\">0.5</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> y <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> R <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">immutable</span> vec <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"br0\">(</span>R<span class=\"sy0\">^^</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> x<span class=\"sy0\">^^</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> y<span class=\"sy0\">^^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu16\">0.5</span><span class=\"br0\">]</span><br/>                                .<span class=\"me1\">normalize</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> dot<span class=\"br0\">(</span>light<span class=\"sy0\">,</span> vec<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> k <span class=\"sy0\">+</span> ambient<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> intensity <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>shades.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                intensity <span class=\"sy0\">=</span> min<span class=\"br0\">(</span>shades.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> max<span class=\"br0\">(</span>intensity<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                shades<span class=\"br0\">[</span>intensity<span class=\"br0\">]</span>.<span class=\"me1\">putchar</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>                <span class=\"st0\">' '</span>.<span class=\"me1\">putchar</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span>.<span class=\"me1\">putchar</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    drawSphere<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    drawSphere<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 72, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> DrawASphere<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span><br/>  Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TDouble3  <span class=\"sy3\">=</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/>  TChar10 <span class=\"sy3\">=</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Char</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  shades<span class=\"sy1\">:</span> TChar10 <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"sy1\">,</span> <span class=\"st0\">':'</span><span class=\"sy1\">,</span> <span class=\"st0\">'!'</span><span class=\"sy1\">,</span> <span class=\"st0\">'*'</span><span class=\"sy1\">,</span> <span class=\"st0\">'o'</span><span class=\"sy1\">,</span> <span class=\"st0\">'e'</span><span class=\"sy1\">,</span> <span class=\"st0\">'&amp;'</span><span class=\"sy1\">,</span> <span class=\"st0\">'#'</span><span class=\"sy1\">,</span> <span class=\"st0\">'%'</span><span class=\"sy1\">,</span> <span class=\"st0\">'@'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  light<span class=\"sy1\">:</span> TDouble3 <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">50</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">procedure</span> normalize<span class=\"br0\">(</span><span class=\"kw1\">var</span> v<span class=\"sy1\">:</span> TDouble3<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    len<span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    len<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">/</span> len<span class=\"sy1\">;</span><br/>    v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">/</span> len<span class=\"sy1\">;</span><br/>    v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy3\">/</span> len<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> dot<span class=\"br0\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">:</span> TDouble3<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> IfThen<span class=\"br0\">(</span>Result &lt; <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span>Result<span class=\"sy1\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">procedure</span> drawSphere<span class=\"br0\">(</span>R<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> ambient<span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    vec<span class=\"sy1\">:</span> TDouble3<span class=\"sy1\">;</span><br/>    x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/>    i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span><br/>    intensity<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Floor</span><span class=\"br0\">(</span><span class=\"sy3\">-</span>R<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">0.5</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> j<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Floor</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>R<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Ceil</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> R<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        y<span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">/</span> <span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"nu0\">0.5</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy3\">*</span> x <span class=\"sy3\">+</span> y <span class=\"sy3\">*</span> y &lt;<span class=\"sy3\">=</span> R <span class=\"sy3\">*</span> R<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">begin</span><br/>          vec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> x<span class=\"sy1\">;</span><br/>          vec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> y<span class=\"sy1\">;</span><br/>          vec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>R <span class=\"sy3\">*</span> R <span class=\"sy3\">-</span> x <span class=\"sy3\">*</span> x <span class=\"sy3\">-</span> y <span class=\"sy3\">*</span> y<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          normalize<span class=\"br0\">(</span>vec<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          b<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Power</span><span class=\"br0\">(</span>dot<span class=\"br0\">(</span>light<span class=\"sy1\">,</span> vec<span class=\"br0\">)</span><span class=\"sy1\">,</span> k<span class=\"br0\">)</span> <span class=\"sy3\">+</span> ambient<span class=\"sy1\">;</span><br/>          intensity<span class=\"sy1\">:</span><span class=\"sy3\">=</span> IfThen<span class=\"br0\">(</span>b &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span><br/>                             <span class=\"kw3\">Length</span><span class=\"br0\">(</span>shades<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span><br/>                             <span class=\"kw3\">Trunc</span><span class=\"br0\">(</span><span class=\"kw3\">max</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy3\">-</span> b<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>shades<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          <span class=\"kw1\">Write</span><span class=\"br0\">(</span>shades<span class=\"br0\">[</span>intensity<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">else</span><br/>          <span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      Writeln<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  normalize<span class=\"br0\">(</span>light<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  drawSphere<span class=\"br0\">(</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  drawSphere<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "DWScript", "loc": 57, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">type</span><br/>   TFloat3  <span class=\"sy3\">=</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> Float<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>   light <span class=\"sy1\">:</span> TFloat3 <span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">50</span> <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> normalize<span class=\"br0\">(</span><span class=\"kw1\">var</span> v <span class=\"sy1\">:</span> TFloat3<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   len<span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    len <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">/=</span> len<span class=\"sy1\">;</span><br/>    v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">/=</span> len<span class=\"sy1\">;</span><br/>    v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy3\">/=</span> len<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> dot<span class=\"br0\">(</span>x<span class=\"sy1\">,</span> y <span class=\"sy1\">:</span> TFloat3<span class=\"br0\">)</span> <span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> Result&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>       Result<span class=\"sy1\">:</span><span class=\"sy3\">=-</span>Result<br/>    <span class=\"kw1\">else</span> Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> drawSphere<span class=\"br0\">(</span>R<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> ambient <span class=\"sy1\">:</span> Float<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   vec <span class=\"sy1\">:</span> TFloat3<span class=\"sy1\">;</span><br/>   x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> b <span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/>   i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> size<span class=\"sy1\">,</span> intensity <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   size<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw3\">Trunc</span><span class=\"br0\">(</span><span class=\"kw3\">Ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"kw3\">Floor</span><span class=\"br0\">(</span><span class=\"sy3\">-</span>R<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   PrintLn<span class=\"br0\">(</span><span class=\"st0\">'P2'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   PrintLn<span class=\"br0\">(</span><span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"st0\">' '</span><span class=\"sy3\">+</span><span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   PrintLn<span class=\"br0\">(</span><span class=\"st0\">'255'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Floor</span><span class=\"br0\">(</span><span class=\"sy3\">-</span>R<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">0.5</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Floor</span><span class=\"br0\">(</span><span class=\"sy3\">-</span>R<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>         y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">+</span> <span class=\"nu0\">0.5</span><span class=\"sy1\">;</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy3\">*</span> x <span class=\"sy3\">+</span> y <span class=\"sy3\">*</span> y &lt;<span class=\"sy3\">=</span> R <span class=\"sy3\">*</span> R<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>            vec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x<span class=\"sy1\">;</span><br/>            vec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> y<span class=\"sy1\">;</span><br/>            vec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>R <span class=\"sy3\">*</span> R <span class=\"sy3\">-</span> x <span class=\"sy3\">*</span> x <span class=\"sy3\">-</span> y <span class=\"sy3\">*</span> y<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            normalize<span class=\"br0\">(</span>vec<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Power</span><span class=\"br0\">(</span>dot<span class=\"br0\">(</span>light<span class=\"sy1\">,</span> vec<span class=\"br0\">)</span><span class=\"sy1\">,</span> k<span class=\"br0\">)</span> <span class=\"sy3\">+</span> ambient<span class=\"sy1\">;</span><br/>            intensity <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ClampInt<span class=\"br0\">(</span> <span class=\"kw3\">Round</span><span class=\"br0\">(</span>b<span class=\"sy3\">*</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            Print<span class=\"br0\">(</span>intensity<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            Print<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> Print<span class=\"br0\">(</span><span class=\"st0\">'0 '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      PrintLn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>normalize<span class=\"br0\">(</span>light<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>drawSphere<span class=\"br0\">(</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 55, "block": "<pre class=\"text highlighted_source\">PROGRAM SPHERE<br/>\u00a0<br/>CONST SHADES$=\".:!*oe&amp;#%@\"<br/>\u00a0<br/>DIM LIGHT[2],X[2],Y[2],V[2],VEC[2]<br/>\u00a0<br/>PROCEDURE DOT(X[],Y[]-&gt;D)<br/>        D=X[0]*Y[0]+X[1]*Y[1]+X[2]*Y[2]<br/>        IF D&lt;0 THEN D=-D ELSE D=0 END IF<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE NORMALIZE(V[]-&gt;V[])<br/>        LUNG=SQR(V[0]*V[0]+V[1]*V[1]+V[2]*V[2])<br/>        V[0]=V[0]/LUNG<br/>        V[1]=V[1]/LUNG<br/>        V[2]=V[2]/LUNG<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE PDRAW(R,K,AMBIENT)<br/>        FOR I=INT(-R) TO INT(R) DO<br/>                X=I+0.5<br/>                FOR J=INT(-2*R) TO INT(2*R) DO<br/>                        Y=J/2+0.5<br/>                        IF (X*X+Y*Y&lt;=R*R) THEN<br/>                                VEC[0]=X<br/>                                VEC[1]=Y<br/>                                VEC[2]=SQR(R*R-X*X-Y*Y)<br/>                                NORMALIZE(VEC[]-&gt;VEC[])<br/>                                DOT(LIGHT[],VEC[]-&gt;D)<br/>                                B=D^K+AMBIENT<br/>                                INTENSITY%=(1-B)*(LEN(SHADES$)-1)<br/>                                IF (INTENSITY%&lt;0) THEN INTENSITY%=0 END IF<br/>                                IF (INTENSITY%&gt;=LEN(SHADES$)-1) THEN<br/>                                        INTENSITY%=LEN(SHADES$)-2<br/>                                END IF<br/>                                PRINT(#1,MID$(SHADES$,INTENSITY%+1,1);)<br/>                           ELSE<br/>                                PRINT(#1,(\" \");)<br/>                        END IF<br/>                END FOR<br/>                PRINT(#1,)<br/>        END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    LIGHT[]=(30,30,-50)<br/>    OPEN(\"O\",1,\"SPHERE.PRN\")<br/>       NORMALIZE(LIGHT[]-&gt;LIGHT[])<br/>       PDRAW(10,2,0.4)<br/>\u00a0<br/>       PRINT(#1,STRING$(79,\"=\"))<br/>       PDRAW(20,4,0.1)<br/>    CLOSE(1)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 76, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"Tlbx agl.incl\"<br/>include \"Tlbx glut.incl\"<br/>\u00a0<br/>output file \"Rotating Sphere\"<br/>\u00a0<br/>local fn SphereDraw<br/>'~'1<br/>begin globals<br/>dim as double \u00a0sRotation // 'static' var<br/>end globals<br/>\u00a0<br/>// Speed of rotation<br/>sRotation += 2.9<br/>glMatrixMode( _GLMODELVIEW )<br/>\u00a0<br/>glLoadIdentity()<br/>\u00a0<br/>// Position parameters: x axis, y axis, z axis<br/>// Set to center of screen:<br/>glTranslated( 0.0, 0.0, 0.0 )<br/>\u00a0<br/>// Rotation (wobble) parameters: angle, x, y<br/>glRotated( sRotation, -0.45, -0.8, -0.6 )<br/>\u00a0<br/>// Set color of sphere's wireframe<br/>glColor3d( 1.0, 0.0, 0.3 )<br/>\u00a0<br/>// Set width of sphere's wireframe lines<br/>glLineWidth( 1.5 )<br/>\u00a0<br/>// Apply above to GLUT's built-in sphere wireframe<br/>// Size &amp; frame parameters: radius, slices, stack<br/>fn glutWireSphere( 0.8, 25, 25 )<br/>\u00a0<br/>end fn<br/>\u00a0<br/>// main program<br/>dim as GLint \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0attrib(2)<br/>dim as CGrafPtr \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port<br/>dim as AGLPixelFormat \u00a0fmt<br/>dim as AGLContext \u00a0\u00a0\u00a0\u00a0\u00a0glContext<br/>dim as EventRecord \u00a0\u00a0\u00a0\u00a0ev<br/>dim as GLboolean \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yesOK<br/>\u00a0<br/>// Make a window<br/>window 1, @\"Rotating Sphere\", (0,0) - (500,500)<br/>\u00a0<br/>// Minimal setup of OpenGL<br/>attrib(0) = _AGLRGBA<br/>attrib(1) = _AGLDOUBLEBUFFER<br/>attrib(2) = _AGLNONE<br/>\u00a0<br/>fmt = fn aglChoosePixelFormat( 0, 0, attrib(0) )<br/>glContext = fn aglCreateContext( fmt, 0 )<br/>aglDestroyPixelFormat( fmt )<br/>\u00a0<br/>// Set the FB window as port for drawing<br/>port = window( _wndPort )<br/>yesOK = fn aglSetDrawable( glContext, port )<br/>yesOK = fn aglSetCurrentContext( glContext )<br/>\u00a0<br/>// Background color: red, green, blue, alpha<br/>glClearColor( 0.0, 0.0, 0.0, 0.0 )<br/>\u00a0<br/>// 60/s HandleEvents Trigger<br/>poke long event - 8, 1<br/>do<br/>// Clear window<br/>glClear( _GLCOLORBUFFERBIT )<br/>// Run animation<br/>fn SphereDraw<br/>aglSwapBuffers( glContext )<br/>HandleEvents<br/>until gFBquit<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 68, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"image\"</span><br/>    <span class=\"st0\">\"image/color\"</span><br/>    <span class=\"st0\">\"image/png\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> vector <span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><span class=\"kw4\">float64</span><br/>\u00a0<br/><span class=\"kw4\">func</span> normalize<span class=\"sy1\">(</span>v <span class=\"sy3\">*</span>vector<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    invLen <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>dot<span class=\"sy1\">(</span>v<span class=\"sy1\">,</span> v<span class=\"sy1\">))</span><br/>    v<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">*=</span> invLen<br/>    v<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">*=</span> invLen<br/>    v<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">*=</span> invLen<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> dot<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"sy3\">*</span>vector<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> x<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">*</span>y<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> x<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">*</span>y<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> x<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"sy3\">*</span>y<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> drawSphere<span class=\"sy1\">(</span>r <span class=\"kw4\">int</span><span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> amb <span class=\"kw4\">float64</span><span class=\"sy1\">,</span> dir <span class=\"sy3\">*</span>vector<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>image<span class=\"sy3\">.</span>Gray <span class=\"sy1\">{</span><br/>    w<span class=\"sy1\">,</span> h <span class=\"sy2\">:=</span> r<span class=\"sy3\">*</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> r<span class=\"sy3\">*</span><span class=\"nu0\">3</span><br/>    img <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewGray<span class=\"sy1\">(</span>image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"sy3\">-</span>w<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span>h<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> w<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> h<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/>    vec <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>vector<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span>r<span class=\"sy1\">;</span> x &lt; r<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span>r<span class=\"sy1\">;</span> y &lt; r<span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> z <span class=\"sy2\">:=</span> r<span class=\"sy3\">*</span>r <span class=\"sy3\">-</span> x<span class=\"sy3\">*</span>x <span class=\"sy3\">-</span> y<span class=\"sy3\">*</span>y<span class=\"sy1\">;</span> z &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                vec<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><br/>                vec<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>y<span class=\"sy1\">)</span><br/>                vec<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>z<span class=\"sy1\">))</span><br/>                normalize<span class=\"sy1\">(</span>vec<span class=\"sy1\">)</span><br/>                s <span class=\"sy2\">:=</span> dot<span class=\"sy1\">(</span>dir<span class=\"sy1\">,</span> vec<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> s &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    s <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                <span class=\"sy1\">}</span><br/>                lum <span class=\"sy2\">:=</span> <span class=\"nu0\">255</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> k<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> amb<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"sy1\">(</span><span class=\"nu0\">1</span> <span class=\"sy3\">+</span> amb<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> lum &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    lum <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> lum &gt; <span class=\"nu0\">255</span> <span class=\"sy1\">{</span><br/>                    lum <span class=\"sy2\">=</span> <span class=\"nu0\">255</span><br/>                <span class=\"sy1\">}</span><br/>                img<span class=\"sy3\">.</span>SetGray<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">{</span><span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>lum<span class=\"sy1\">)})</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> img<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    dir <span class=\"sy2\">:=</span> &amp;vector<span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"nu0\">50</span><span class=\"sy1\">}</span><br/>    normalize<span class=\"sy1\">(</span>dir<span class=\"sy1\">)</span><br/>    img <span class=\"sy2\">:=</span> drawSphere<span class=\"sy1\">(</span><span class=\"nu0\">200</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"sy3\">.</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> dir<span class=\"sy1\">)</span><br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"st0\">\"sphere.png\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> png<span class=\"sy3\">.</span>Encode<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> img<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "HTML", "loc": 48, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Rendering<span class=\"sy0\">.</span>OpenGL<span class=\"sy0\">.</span>GL<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>UI<span class=\"sy0\">.</span>GLUT<span class=\"sy0\">.</span>Objects<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>UI<span class=\"sy0\">.</span>GLUT<br/>\u00a0<br/>setProjection <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>setProjection <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  matrixMode <span class=\"sy0\">$=</span> Projection<br/>  ortho <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>grey1<span class=\"sy0\">,</span>grey9<span class=\"sy0\">,</span>red<span class=\"sy0\">,</span>white <span class=\"sy0\">::</span> Color4 GLfloat<br/>grey1 <span class=\"sy0\">=</span> Color4 <span class=\"nu0\">0.1</span> <span class=\"nu0\">0.1</span> <span class=\"nu0\">0.1</span> <span class=\"nu0\">1</span><br/>grey9 <span class=\"sy0\">=</span> Color4 <span class=\"nu0\">0.9</span> <span class=\"nu0\">0.9</span> <span class=\"nu0\">0.9</span> <span class=\"nu0\">1</span><br/>red   <span class=\"sy0\">=</span> Color4 <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span><br/>white <span class=\"sy0\">=</span> Color4 <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span><br/>\u00a0<br/>setLights <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>setLights <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> Light <span class=\"nu0\">0</span><br/>  ambient  l <span class=\"sy0\">$=</span> grey1<br/>  diffuse  l <span class=\"sy0\">$=</span> white<br/>  specular l <span class=\"sy0\">$=</span> white<br/>  position l <span class=\"sy0\">$=</span> Vertex4 <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">::</span> GLfloat<span class=\"br0\">)</span><br/>  light    l <span class=\"sy0\">$=</span> Enabled<br/>  lighting   <span class=\"sy0\">$=</span> Enabled<br/>\u00a0<br/>setMaterial <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>setMaterial <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  materialAmbient   Front <span class=\"sy0\">$=</span> grey1<br/>  materialDiffuse   Front <span class=\"sy0\">$=</span> red<br/>  materialSpecular  Front <span class=\"sy0\">$=</span> grey9<br/>  materialShininess Front <span class=\"sy0\">$=</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span> <span class=\"sy0\">::</span> GLfloat<span class=\"br0\">)</span><br/>\u00a0<br/>display <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>display <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  clear <span class=\"br0\">[</span>ColorBuffer<span class=\"br0\">]</span><br/>  renderObject Solid <span class=\"sy0\">$</span> Sphere<span class=\"st0\">' 0.8 64 64<br/>  swapBuffers<br/>\u00a0<br/>main\u00a0:: IO()<br/>main = do<br/>  _ &lt;- getArgsAndInitialize<br/>  _ &lt;- createWindow \"Sphere\"<br/>  clearColor $= Color4 0.0 0.0 0.0 0.0<br/>  setProjection<br/>  setLights<br/>  setMaterial<br/>  displayCallback $= display<br/>  mainLoop</span></pre>"}, {"lang": "Haskell", "loc": 48, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Rendering<span class=\"sy0\">.</span>OpenGL<span class=\"sy0\">.</span>GL<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>UI<span class=\"sy0\">.</span>GLUT<span class=\"sy0\">.</span>Objects<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>UI<span class=\"sy0\">.</span>GLUT<br/>\u00a0<br/>setProjection <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>setProjection <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  matrixMode <span class=\"sy0\">$=</span> Projection<br/>  ortho <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>grey1<span class=\"sy0\">,</span>grey9<span class=\"sy0\">,</span>red<span class=\"sy0\">,</span>white <span class=\"sy0\">::</span> Color4 GLfloat<br/>grey1 <span class=\"sy0\">=</span> Color4 <span class=\"nu0\">0.1</span> <span class=\"nu0\">0.1</span> <span class=\"nu0\">0.1</span> <span class=\"nu0\">1</span><br/>grey9 <span class=\"sy0\">=</span> Color4 <span class=\"nu0\">0.9</span> <span class=\"nu0\">0.9</span> <span class=\"nu0\">0.9</span> <span class=\"nu0\">1</span><br/>red   <span class=\"sy0\">=</span> Color4 <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span><br/>white <span class=\"sy0\">=</span> Color4 <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span><br/>\u00a0<br/>setLights <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>setLights <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> Light <span class=\"nu0\">0</span><br/>  ambient  l <span class=\"sy0\">$=</span> grey1<br/>  diffuse  l <span class=\"sy0\">$=</span> white<br/>  specular l <span class=\"sy0\">$=</span> white<br/>  position l <span class=\"sy0\">$=</span> Vertex4 <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">::</span> GLfloat<span class=\"br0\">)</span><br/>  light    l <span class=\"sy0\">$=</span> Enabled<br/>  lighting   <span class=\"sy0\">$=</span> Enabled<br/>\u00a0<br/>setMaterial <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>setMaterial <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  materialAmbient   Front <span class=\"sy0\">$=</span> grey1<br/>  materialDiffuse   Front <span class=\"sy0\">$=</span> red<br/>  materialSpecular  Front <span class=\"sy0\">$=</span> grey9<br/>  materialShininess Front <span class=\"sy0\">$=</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span> <span class=\"sy0\">::</span> GLfloat<span class=\"br0\">)</span><br/>\u00a0<br/>display <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>display <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  clear <span class=\"br0\">[</span>ColorBuffer<span class=\"br0\">]</span><br/>  renderObject Solid <span class=\"sy0\">$</span> Sphere<span class=\"st0\">' 0.8 64 64<br/>  swapBuffers<br/>\u00a0<br/>main\u00a0:: IO()<br/>main = do<br/>  _ &lt;- getArgsAndInitialize<br/>  _ &lt;- createWindow \"Sphere\"<br/>  clearColor $= Color4 0.0 0.0 0.0 0.0<br/>  setProjection<br/>  setLights<br/>  setMaterial<br/>  displayCallback $= display<br/>  mainLoop</span></pre>"}, {"lang": "Icon and Unicon", "loc": 7, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>W <span class=\"sy0\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"Demo\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"gl\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"size=400,400\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bg=black\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"can't open window!\"</span><span class=\"br0\">)</span><br/><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span>W<span class=\"sy0\">,</span> <span class=\"st0\">\"slices=40\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rings=40\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"light0=on, ambient white; diffuse gold; specular gold; position 5, 0, 0\"</span> <span class=\"br0\">)</span><br/><span class=\"kw5\">Fg</span><span class=\"br0\">(</span>W<span class=\"sy0\">,</span> <span class=\"st0\">\"emission blue\"</span><span class=\"br0\">)</span><br/><span class=\"kw5\">DrawSphere</span><span class=\"br0\">(</span>W<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw5\">Event</span><span class=\"br0\">(</span>W<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre>Studio\n &gt; Demos...\n  &gt; opengl simple... [ok]\n    &gt; sphere [Run]\n</pre>"}, {"lang": "Java", "loc": 43, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Sphere<span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> shades <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">'.'</span>, <span class=\"st0\">':'</span>, <span class=\"st0\">'!'</span>, <span class=\"st0\">'*'</span>, <span class=\"st0\">'o'</span>, <span class=\"st0\">'e'</span>, <span class=\"st0\">'&amp;'</span>, <span class=\"st0\">'#'</span>, <span class=\"st0\">'%'</span>, <span class=\"st0\">'@'</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> light <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"sy0\">-</span><span class=\"nu0\">50</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> normalize<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> v<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> len <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> len<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> dot<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> x, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span>d <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> drawSphere<span class=\"br0\">(</span><span class=\"kw4\">double</span> R, <span class=\"kw4\">double</span> k, <span class=\"kw4\">double</span> ambient<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> vec <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> .5<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R<span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R<span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>. <span class=\"sy0\">+</span> .5<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">&lt;=</span> R <span class=\"sy0\">*</span> R<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    vec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>                    vec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>                    vec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>R <span class=\"sy0\">*</span> R <span class=\"sy0\">-</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">-</span> y <span class=\"sy0\">*</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    normalize<span class=\"br0\">(</span>vec<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>dot<span class=\"br0\">(</span>light, vec<span class=\"br0\">)</span>, k<span class=\"br0\">)</span> <span class=\"sy0\">+</span> ambient<span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> intensity <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>                                shades.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span><br/>                                <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>shades.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>shades<span class=\"br0\">[</span>intensity<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        normalize<span class=\"br0\">(</span>light<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawSphere<span class=\"br0\">(</span><span class=\"nu0\">20</span>, <span class=\"nu0\">4</span>, .1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawSphere<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2</span>, .4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 62, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&lt;!</span>DOCTYPE html<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>html<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>head<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>meta charset<span class=\"sy0\">=</span><span class=\"st0\">\"utf-8\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>title<span class=\"sy0\">&gt;</span>Draw a sphere<span class=\"sy0\">&lt;/</span>title<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>script<span class=\"sy0\">&gt;</span><br/><span class=\"kw1\">var</span> light<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span><span class=\"nu0\">30</span><span class=\"sy0\">,-</span><span class=\"nu0\">50</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>gR<span class=\"sy0\">,</span>gk<span class=\"sy0\">,</span>gambient<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> normalize<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> len<span class=\"sy0\">=</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/=</span>len<span class=\"sy0\">;</span><br/>\tv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">/=</span>len<span class=\"sy0\">;</span><br/>\tv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">/=</span>len<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> dot<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> d<span class=\"sy0\">=</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> d<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy0\">?-</span>d<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> draw_sphere<span class=\"br0\">(</span>R<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>ambient<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>intensity<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>vec<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>cvs<span class=\"sy0\">,</span>ctx<span class=\"sy0\">,</span>imgdata<span class=\"sy0\">,</span>idx<span class=\"sy0\">;</span><br/>\tcvs<span class=\"sy0\">=</span>document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">\"c\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tctx<span class=\"sy0\">=</span>cvs.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">\"2d\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcvs.<span class=\"me1\">width</span><span class=\"sy0\">=</span>cvs.<span class=\"me1\">height</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\timgdata<span class=\"sy0\">=</span>ctx.<span class=\"me1\">createImageData</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tidx<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span><span class=\"kw4\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tx<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span>.5<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;=</span><span class=\"kw4\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\ty<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span>.5<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"sy0\">+</span>y<span class=\"sy0\">*</span>y<span class=\"sy0\">&lt;=</span>R<span class=\"sy0\">*</span>R<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tvec<span class=\"sy0\">=</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>R<span class=\"sy0\">*</span>R<span class=\"sy0\">-</span>x<span class=\"sy0\">*</span>x<span class=\"sy0\">-</span>y<span class=\"sy0\">*</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tvec<span class=\"sy0\">=</span>normalize<span class=\"br0\">(</span>vec<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tb<span class=\"sy0\">=</span><span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>dot<span class=\"br0\">(</span>light<span class=\"sy0\">,</span>vec<span class=\"br0\">)</span><span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"sy0\">+</span>ambient<span class=\"sy0\">;</span><br/>\t\t\t\tintensity<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>b<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">256</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>intensity<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>intensity<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>intensity<span class=\"sy0\">&gt;=</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>intensity<span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\t\t\t\timgdata.<span class=\"me1\">data</span><span class=\"br0\">[</span>idx<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>imgdata.<span class=\"me1\">data</span><span class=\"br0\">[</span>idx<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"sy0\">-</span>~~<span class=\"br0\">(</span>intensity<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//RG</span><br/>\t\t\t\timgdata.<span class=\"me1\">data</span><span class=\"br0\">[</span>idx<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>imgdata.<span class=\"me1\">data</span><span class=\"br0\">[</span>idx<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"sy0\">;</span> <span class=\"co1\">//BA</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\timgdata.<span class=\"me1\">data</span><span class=\"br0\">[</span>idx<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>imgdata.<span class=\"me1\">data</span><span class=\"br0\">[</span>idx<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>imgdata.<span class=\"me1\">data</span><span class=\"br0\">[</span>idx<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>imgdata.<span class=\"me1\">data</span><span class=\"br0\">[</span>idx<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">255</span><span class=\"sy0\">;</span> <span class=\"co1\">//RGBA</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tctx.<span class=\"me1\">putImageData</span><span class=\"br0\">(</span>imgdata<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>light<span class=\"sy0\">=</span>normalize<span class=\"br0\">(</span>light<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>head<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>body onload<span class=\"sy0\">=</span><span class=\"st0\">\"gR=200;gk=4;gambient=.2;draw_sphere(gR,gk,gambient)\"</span><span class=\"sy0\">&gt;</span><br/>R<span class=\"sy0\">=&lt;</span>input type<span class=\"sy0\">=</span><span class=\"st0\">\"range\"</span> id<span class=\"sy0\">=</span><span class=\"st0\">\"R\"</span> name<span class=\"sy0\">=</span><span class=\"st0\">\"R\"</span> min<span class=\"sy0\">=</span><span class=\"st0\">\"5\"</span> max<span class=\"sy0\">=</span><span class=\"st0\">\"500\"</span> value<span class=\"sy0\">=</span><span class=\"st0\">\"200\"</span> step<span class=\"sy0\">=</span><span class=\"st0\">\"5\"</span> onchange<span class=\"sy0\">=</span><span class=\"st0\">\"document.getElementById('lR').innerHTML=gR=parseFloat(this.value);draw_sphere(gR,gk,gambient)\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>label <span class=\"kw1\">for</span><span class=\"sy0\">=</span><span class=\"st0\">\"R\"</span> id<span class=\"sy0\">=</span><span class=\"st0\">\"lR\"</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">200</span><span class=\"sy0\">&lt;/</span>label<span class=\"sy0\">&gt;&lt;</span>br<span class=\"sy0\">&gt;</span><br/>k<span class=\"sy0\">=&lt;</span>input type<span class=\"sy0\">=</span><span class=\"st0\">\"range\"</span> id<span class=\"sy0\">=</span><span class=\"st0\">\"k\"</span> name<span class=\"sy0\">=</span><span class=\"st0\">\"k\"</span> min<span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span> max<span class=\"sy0\">=</span><span class=\"st0\">\"10\"</span> value<span class=\"sy0\">=</span><span class=\"st0\">\"4\"</span> step<span class=\"sy0\">=</span><span class=\"st0\">\".25\"</span> onchange<span class=\"sy0\">=</span><span class=\"st0\">\"document.getElementById('lk').innerHTML=gk=parseFloat(this.value);draw_sphere(gR,gk,gambient)\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>label <span class=\"kw1\">for</span><span class=\"sy0\">=</span><span class=\"st0\">\"k\"</span> id<span class=\"sy0\">=</span><span class=\"st0\">\"lk\"</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">4</span><span class=\"sy0\">&lt;/</span>label<span class=\"sy0\">&gt;&lt;</span>br<span class=\"sy0\">&gt;</span><br/>ambient<span class=\"sy0\">=&lt;</span>input type<span class=\"sy0\">=</span><span class=\"st0\">\"range\"</span> id<span class=\"sy0\">=</span><span class=\"st0\">\"ambient\"</span> name<span class=\"sy0\">=</span><span class=\"st0\">\"ambient\"</span> min<span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span> max<span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span> value<span class=\"sy0\">=</span><span class=\"st0\">\".2\"</span> step<span class=\"sy0\">=</span><span class=\"st0\">\".05\"</span> onchange<span class=\"sy0\">=</span><span class=\"st0\">\"document.getElementById('lambient').innerHTML=gambient=parseFloat(this.value);draw_sphere(gR,gk,gambient)\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>label <span class=\"kw1\">for</span><span class=\"sy0\">=</span><span class=\"st0\">\"ambient\"</span> id<span class=\"sy0\">=</span><span class=\"st0\">\"lambient\"</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0.2</span><span class=\"sy0\">&lt;/</span>label<span class=\"sy0\">&gt;&lt;</span>br<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>canvas id<span class=\"sy0\">=</span><span class=\"st0\">\"c\"</span><span class=\"sy0\">&gt;</span>Unsupportive browser...<span class=\"sy0\">&lt;/</span>canvas<span class=\"sy0\">&gt;&lt;</span>br<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>body<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>html<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "jq", "loc": 19, "block": "<pre class=\"text highlighted_source\">def svg:<br/>  \"&lt;svg width='100%' height='100%' version='1.1'<br/>    xmlns='http://www.w3.org/2000/svg'<br/>    xmlns:xlink='http://www.w3.org/1999/xlink'&gt;\"\u00a0;<br/>\u00a0<br/># A radial gradient to make a circle look like a sphere.<br/># \"colors\" should be [startColor, intermediateColor, endColor] <br/># or null for [\"white\", \"teal\", \"black\"]<br/>def sphericalGradient(id; colors):<br/>  \"&lt;defs&gt;<br/>        &lt;radialGradient id = '\\(id)' cx = '30%' cy = '30%' r = '100%' fx='10%' fy='10%' &gt;<br/>            &lt;stop stop-color = '\\(colors[0]//\"white\")' offset =   '0%'/&gt;<br/>            &lt;stop stop-color = '\\(colors[1]//\"teal\")'  offset =  '50%'/&gt;<br/>            &lt;stop stop-color = '\\(colors[1]//\"black\")' offset = '100%'/&gt;<br/>        &lt;/radialGradient&gt;<br/>    &lt;/defs&gt;\"\u00a0;<br/>\u00a0<br/>def sphere(cx; cy; r; gradientId):<br/>   \"&lt;circle fill='url(#\\(gradientId))' cx='\\(cx)' cy='\\(cy)' r='\\(r)' /&gt;\"\u00a0;</pre>"}, {"lang": "Julia", "loc": 29, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>function draw_sphere(r, k, ambient, light)<br/>    shades = ('.', ':', '!', '*', 'o', 'e', '&amp;', '#', '%', '@')<br/>    for i in floor(Int, -r):ceil(Int, r)<br/>        x = i + 0.5<br/>        line = IOBuffer()<br/>        for j in floor(Int, -2r):ceil(2r)<br/>            y = j / 2 + 0.5<br/>            if x ^ 2 + y ^ 2 \u2264 r ^ 2<br/>                v = normalize([x, y, sqrt(r ^ 2 - x ^ 2 - y ^ 2)])<br/>                b = dot(light, v) ^ k + ambient<br/>                intensity = ceil(Int, (1 - b) * (length(shades) - 1))<br/>                if intensity &lt; 1<br/>                    intensity = 1 end<br/>                if intensity &gt; length(shades)<br/>                    intensity = length(shades) end<br/>                print(shades[intensity])<br/>            else<br/>                print(' ')<br/>            end<br/>        end<br/>        println()<br/>    end<br/>end<br/>\u00a0<br/>light = normalize([30, 30, -50])<br/>draw_sphere(20, 4, 0.1, light)<br/>draw_sphere(10, 2, 0.4, light)</pre>"}, {"lang": "Kotlin", "loc": 47, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> shades <span class=\"sy0\">=</span> <span class=\"st0\">\".:!*oe&amp;#%@\"</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> light  <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">30.0</span>, <span class=\"nu0\">30.0</span>, -<span class=\"nu0\">50.0</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun normalize<span class=\"br0\">(</span>v<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> + v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> /<span class=\"sy0\">=</span> len<span class=\"sy0\">;</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> /<span class=\"sy0\">=</span> len<span class=\"sy0\">;</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> /<span class=\"sy0\">=</span> len<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun dot<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> DoubleArray, y<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> + x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>   <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> -d <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0.0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun drawSphere<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Double, k<span class=\"sy0\">:</span> Double, ambient<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> vec <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> intensity<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b <span class=\"sy0\">:</span> Double<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x<span class=\"sy0\">:</span> Double<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y<span class=\"sy0\">:</span> Double<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>-r<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> .. <span class=\"me1\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        x <span class=\"sy0\">=</span> i + <span class=\"nu0\">0.5</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>-<span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> r<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> .. <span class=\"me1\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> r<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            y <span class=\"sy0\">=</span> j / <span class=\"nu0\">2.0</span> + <span class=\"nu0\">0.5</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x + y <span class=\"sy0\">*</span> y <span class=\"sy0\">&lt;=</span> r <span class=\"sy0\">*</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                vec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<br/>                vec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y<br/>                vec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> r - x <span class=\"sy0\">*</span> x - y <span class=\"sy0\">*</span> y<span class=\"br0\">)</span> <br/>                normalize<span class=\"br0\">(</span>vec<span class=\"br0\">)</span><br/>                b <span class=\"sy0\">=</span> Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>dot<span class=\"br0\">(</span>light, vec<span class=\"br0\">)</span>, k<span class=\"br0\">)</span> + ambient <br/>                intensity <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span> - b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>shades.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>intensity <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> intensity <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>intensity <span class=\"sy0\">&gt;=</span> shades.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> intensity <span class=\"sy0\">=</span> shades.<span class=\"me1\">length</span> - <span class=\"nu0\">2</span>                 <br/>                print<span class=\"br0\">(</span>shades<span class=\"br0\">[</span>intensity<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> print<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    normalize<span class=\"br0\">(</span>light<span class=\"br0\">)</span><br/>    drawSphere<span class=\"br0\">(</span><span class=\"nu0\">20.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">0.1</span><span class=\"br0\">)</span><br/>    drawSphere<span class=\"br0\">(</span><span class=\"nu0\">10.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">0.4</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 16, "block": "<pre class=\"text highlighted_source\">----------------------------------------<br/>-- Draw a circle<br/>-- @param {image} img<br/>-- @param {integer} x<br/>-- @param {integer} y<br/>-- @param {integer} r<br/>-- @param {integer} lineSize<br/>-- @param {color} drawColor<br/>----------------------------------------<br/>on circle (img, x, y, r, lineSize, drawColor)<br/>  props = [:]<br/>  props[#shapeType] = #oval<br/>  props[#lineSize] = lineSize<br/>  props[#color] = drawColor<br/>  img.draw(x-r, y-r, x+r, y+r, props)<br/>end</pre>"}, {"lang": "Logo", "loc": 5, "block": "<pre class=\"text highlighted_source\">to sphere\u00a0:r<br/>cs perspective ht\u00a0;making the room ready to use<br/>repeat 180 [polystart circle\u00a0:r polyend down 1]<br/>polyview<br/>end</pre>"}, {"lang": "Lua", "loc": 37, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">require</span> <span class=\"br0\">(</span><span class=\"st0\">\"math\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>shades <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"st0\">':'</span><span class=\"sy0\">,</span> <span class=\"st0\">'!'</span><span class=\"sy0\">,</span> <span class=\"st0\">'*'</span><span class=\"sy0\">,</span> <span class=\"st0\">'o'</span><span class=\"sy0\">,</span> <span class=\"st0\">'e'</span><span class=\"sy0\">,</span> <span class=\"st0\">'&amp;'</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"sy0\">,</span> <span class=\"st0\">'%'</span><span class=\"sy0\">,</span> <span class=\"st0\">'@'</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> normalize <span class=\"br0\">(</span>vec<span class=\"br0\">)</span><br/>    len <span class=\"sy0\">=</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>vec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> vec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> vec<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">{</span>vec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>len<span class=\"sy0\">,</span> vec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>len<span class=\"sy0\">,</span> vec<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>len<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>light <span class=\"sy0\">=</span> normalize<span class=\"br0\">{</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">50</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> dot <span class=\"br0\">(</span>vec1<span class=\"sy0\">,</span> vec2<span class=\"br0\">)</span><br/>    d <span class=\"sy0\">=</span> vec1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>vec2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> vec1<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>vec2<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> vec1<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>vec2<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> <span class=\"sy0\">-</span>d <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> draw_sphere <span class=\"br0\">(</span>radius<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> ambient<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>radius<span class=\"br0\">)</span><span class=\"sy0\">,-</span><span class=\"kw3\">math.floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>radius<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        x <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">.5</span><br/>        <span class=\"kw1\">local</span> line <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>radius<span class=\"br0\">)</span><span class=\"sy0\">,-</span><span class=\"kw3\">math.floor</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>radius<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            y <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">.5</span><br/>            <span class=\"kw1\">if</span> x<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> radius<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>                vec <span class=\"sy0\">=</span> normalize<span class=\"br0\">{</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>radius<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> x<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> y<span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>                b <span class=\"sy0\">=</span> dot<span class=\"br0\">(</span>light<span class=\"sy0\">,</span>vec<span class=\"br0\">)</span> <span class=\"sy0\">^</span> k <span class=\"sy0\">+</span> ambient<br/>                intensity <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"sy0\">#</span>shades<span class=\"br0\">)</span><br/>                line <span class=\"sy0\">=</span> line <span class=\"sy0\">..</span> <span class=\"br0\">(</span>shades<span class=\"br0\">[</span>intensity<span class=\"br0\">]</span> <span class=\"kw2\">or</span> shades<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span><br/>                line <span class=\"sy0\">=</span> line <span class=\"sy0\">..</span> <span class=\"st0\">' '</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw3\">print</span> <span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>draw_sphere <span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.1</span><span class=\"br0\">)</span><br/>draw_sphere <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">plots[display](plottools[sphere](), axes = none, style = surface);</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">Graphics3D[Sphere[{0,0,0},1]]</pre>"}, {"lang": "MATLAB", "loc": 1, "block": "<pre class=\"matlab highlighted_source\"><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/figure.html\"><span class=\"kw2\">figure</span></a>; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sphere.html\"><span class=\"kw2\">sphere</span></a></pre>"}, {"lang": "Maxima", "loc": 11, "block": "<pre class=\"text highlighted_source\">/* Two solutions */<br/>plot3d(1, [theta, 0,\u00a0%pi], [phi, 0, 2 *\u00a0%pi],<br/>[transform_xy, spherical_to_xyz], [grid, 30, 60],<br/>[box, false], [legend, false])$<br/>\u00a0<br/>load(draw)$<br/>draw3d(xu_grid=30, yv_grid=60, surface_hide=true,<br/>   parametric_surface(cos(phi)*sin(theta),<br/>                      sin(phi)*sin(theta),<br/>                      cos(theta),<br/>                      theta, 0,\u00a0%pi, phi, 0, 2 *\u00a0%pi))$</pre>"}, {"lang": "Nim", "loc": 31, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>type Point = tuple[x,y,z: float]<br/>\u00a0<br/>const shades = \".:!*oe&amp;#%@\"<br/>\u00a0<br/>proc normalize(x, y, z: float): Point =<br/>  let len = sqrt(x*x + y*y + z*z)<br/>  (x / len, y / len, z / len)<br/>\u00a0<br/>proc dot(a, b: Point): float =<br/>  result = max(0, - a.x*b.x - a.y*b.y - a.z*b.z)<br/>\u00a0<br/>let light = normalize(30.0, 30.0, -50.0)<br/>\u00a0<br/>proc drawSphere(r, k, ambient) =<br/>  for i in -r .. r:<br/>    let x = i.float + 0.5<br/>    for j in -2*r .. 2*r:<br/>      let y = j.float / 2.0 + 0.5<br/>      if x*x + y*y &lt;= float r*r:<br/>        let<br/>          v = normalize(x, y, sqrt(float(r*r) - x*x - y*y))<br/>          b = pow(dot(light, v), k) + ambient<br/>          i = clamp(int((1.0 - b) * shades.high.float), 0, shades.high)<br/>        stdout.write shades[i]<br/>      else: stdout.write ' '<br/>    stdout.write \"\\n\"<br/>\u00a0<br/>drawSphere 20, 4.0, 0.1<br/>drawSphere 10, 2.0, 0.4</pre>"}, {"lang": "Openscad", "loc": 2, "block": "<pre class=\"text highlighted_source\">// This will produce a sphere of radius 5<br/>sphere(5);</pre>"}, {"lang": "Pascal", "loc": 51, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">|=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\"># must be odd</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$light</span> <span class=\"sy0\">=</span> Vector<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">normalized</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"P2<span class=\"es0\">\\n</span>$x $y<span class=\"es0\">\\n</span>$depth<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$ambient</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$r</span> <span class=\"sy0\">..</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$r</span> <span class=\"sy0\">..</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$y2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$pixel</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y2</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$r2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> Vector<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$r2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">normalized</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$I</span> <span class=\"sy0\">=</span> <span class=\"re0\">$light</span> <span class=\"sy0\">.</span> <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"re0\">$ambient</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$I</span> <span class=\"sy0\">=</span> <span class=\"re0\">$I</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"re0\">$I</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"re0\">$I</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$pixel</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$I</span> <span class=\"sy0\">*</span> <span class=\"re0\">$depth</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$pixel</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"re0\">$r</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Vector <span class=\"br0\">{</span><br/>    <span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'Array'</span> <span class=\"sy0\">?</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span> <span class=\"co5\">@_</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> normalized <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$norm</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span> <span class=\"sy0\">.</span> <span class=\"re0\">$this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">/</span><span class=\"re0\">$norm</span><span class=\"sy0\">,</span> <span class=\"re0\">@$this</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">use</span> overload <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"sy0\">.</span><span class=\"br0\">}</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">@$a</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"Vector:[%s]\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 51, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">|=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\"># must be odd</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$light</span> <span class=\"sy0\">=</span> Vector<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">normalized</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"P2<span class=\"es0\">\\n</span>$x $y<span class=\"es0\">\\n</span>$depth<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$ambient</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$r</span> <span class=\"sy0\">..</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$r</span> <span class=\"sy0\">..</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$y2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$pixel</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y2</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$r2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> Vector<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$r2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">normalized</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$I</span> <span class=\"sy0\">=</span> <span class=\"re0\">$light</span> <span class=\"sy0\">.</span> <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"re0\">$ambient</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$I</span> <span class=\"sy0\">=</span> <span class=\"re0\">$I</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"re0\">$I</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"re0\">$I</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$pixel</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$I</span> <span class=\"sy0\">*</span> <span class=\"re0\">$depth</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$pixel</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"re0\">$r</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Vector <span class=\"br0\">{</span><br/>    <span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'Array'</span> <span class=\"sy0\">?</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span> <span class=\"co5\">@_</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> normalized <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$norm</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span> <span class=\"sy0\">.</span> <span class=\"re0\">$this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">/</span><span class=\"re0\">$norm</span><span class=\"sy0\">,</span> <span class=\"re0\">@$this</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">use</span> overload <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"sy0\">.</span><span class=\"br0\">}</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">@$a</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"Vector:[%s]\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 35, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">+|=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\"># must be odd</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@light</span> <span class=\"sy0\">=</span> <span class=\"kw3\">normalize</span><span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$outfile</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'sphere-perl6.pgm'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>   <br/>    spurt <span class=\"re0\">$outfile</span><span class=\"sy0\">,</span> <span class=\"st0\">\"P5<span class=\"es0\">\\n</span>$x $y<span class=\"es0\">\\n</span>$depth<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># .pgm header</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$out</span> <span class=\"sy0\">=</span> open<span class=\"br0\">(</span> <span class=\"re0\">$outfile</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">:</span>bin <span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"$!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$out</span><span class=\"sy0\">.</span><span class=\"me1\">write</span><span class=\"br0\">(</span> Blob<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>draw_sphere<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span>9<span class=\"sy0\">,</span> <span class=\"sy0\">.</span>2<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$out</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw3\">normalize</span> <span class=\"br0\">(</span><span class=\"re0\">@vec</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"re0\">@vec</span>\u00a0\u00bb<span class=\"sy0\">/</span>\u00bb <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@vec</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00ab\u00a0<span class=\"re0\">@vec</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> dot <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"sy0\">,</span> <span class=\"re0\">@y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00ab\u00a0<span class=\"re0\">@y</span><span class=\"br0\">)</span> <span class=\"kw3\">max</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> draw_sphere <span class=\"br0\">(</span> <span class=\"re0\">$rad</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"re0\">$ambient</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@pixels</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$rad</span> <span class=\"sy0\">*</span> <span class=\"re0\">$rad</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@range</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$rad</span> <span class=\"sy0\">..</span> <span class=\"re0\">$rad</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> flat <span class=\"re0\">@range</span> <span class=\"kw1\">X</span> <span class=\"re0\">@range</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$x2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$y2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$r2</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">@vector</span> <span class=\"sy0\">=</span> <span class=\"kw3\">normalize</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$r2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$intensity</span> <span class=\"sy0\">=</span> dot<span class=\"br0\">(</span><span class=\"re0\">@light</span><span class=\"sy0\">,</span> <span class=\"re0\">@vector</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"re0\">$k</span> <span class=\"sy0\">+</span> <span class=\"re0\">$ambient</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$pixel</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw3\">max</span> <span class=\"br0\">(</span><span class=\"re0\">$intensity</span> <span class=\"sy0\">*</span> <span class=\"re0\">$depth</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"br0\">)</span> <span class=\"kw3\">min</span> <span class=\"re0\">$depth</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@pixels</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"re0\">$pixel</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">@pixels</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@pixels</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 77, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Draw_a_sphere.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>function dot(sequence x, sequence y)<br/>    return sum(sq_mul(x,y))<br/>end function<br/>\u00a0<br/>function normalize(sequence v)<br/>    atom len = sqrt(dot(v, v))<br/>    if len=0 then return {0,0,0} end if<br/>    return sq_mul(v,1/len)<br/>end function<br/>\u00a0<br/>procedure drawSphere(integer width, height, atom k, atom amb, sequence direction)<br/>integer r = floor((min(width,height)-20)/2)<br/>integer cx = floor(width/2)<br/>integer cy = floor(height/2)<br/>integer lum<br/>    for x=-r to r do<br/>        for y=-r to r do<br/>            integer z = r*r-x*x-y*y<br/>            if z&gt;=0 then<br/>                atom s = dot(direction, normalize({x,y,sqrt(z)}))<br/>                lum = and_bits(#FF,255*(power(iff(s&lt;0?0:s),k)+amb)/(1+amb))<br/>                lum += lum*#100+lum*#10000<br/>                cdCanvasPixel(cddbuffer, x+cx, y+cy, lum)<br/>            end if<br/>        end for<br/>    end for<br/>end procedure<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>integer {width, height} = IupGetIntInt(canvas, \"DRAWSIZE\")<br/>    cdCanvasActivate(cddbuffer)<br/>    cdCanvasClear(cddbuffer) <br/>    drawSphere(width,height,1.5,0.2,normalize({-30,-30,50}))<br/>    cdCanvasFlush(cddbuffer)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    cdCanvasSetBackground(cddbuffer, CD_BLACK)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"340x340\") -- initial size<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>\u00a0<br/>    dlg = IupDialog(canvas)<br/>    IupSetAttribute(dlg, \"TITLE\", \"Draw a sphere\")<br/>    IupSetCallback(dlg, \"K_ANY\",     Icallback(\"esc_close\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    IupMap(dlg)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", NULL) -- release the minimum limitation<br/>    IupShowXY(dlg,IUP_CENTER,IUP_CENTER)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "PicoLisp", "loc": 26, "block": "<pre class=\"text highlighted_source\">(load \"@lib/openGl.l\")<br/>\u00a0<br/>(glutInit)<br/>(glutInitDisplayMode (| GLUT_RGBA GLUT_DOUBLE GLUT_ALPHA GLUT_DEPTH))<br/>(glutInitWindowSize 400 400)<br/>(glutCreateWindow \"Sphere\")<br/>\u00a0<br/>(glEnable GL_LIGHTING)<br/>(glEnable GL_LIGHT0)<br/>(glLightiv GL_LIGHT0 GL_POSITION (10 10 -10 0))<br/>\u00a0<br/>(glEnable GL_COLOR_MATERIAL)<br/>(glColorMaterial GL_FRONT_AND_BACK GL_AMBIENT_AND_DIFFUSE)<br/>\u00a0<br/>(glClearColor 0.3 0.3 0.5 0)<br/>(glColor4f 0.0 0.8 0.0 1.0)<br/>\u00a0<br/>(displayPrg<br/>   (glClear (| GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))<br/>   (glutSolidSphere 0.9 40 32)<br/>   (glFlush)<br/>   (glutSwapBuffers) )<br/>\u00a0<br/># Exit upon mouse click<br/>(mouseFunc '((Btn State X Y) (bye)))<br/>(glutMainLoop)</pre>"}, {"lang": "PostScript", "loc": 24, "block": "<pre class=\"text highlighted_source\">%!PS-Adobe-3.0<br/>%%BoundingBox 0 0 300 300<br/>\u00a0<br/>150 150 translate 0 0 130 0 360 arc<br/>\u00a0<br/>/Pattern setcolorspace<br/>&lt;&lt;      /PatternType    2<br/>        /Shading &lt;&lt;     <br/>                /ShadingType    3<br/>                /ColorSpace     /DeviceRGB<br/>                /Coords         [-60 60 0 0 0 100]<br/>                /Function &lt;&lt;    <br/>                        /FunctionType   2<br/>                        /Domain         [0 1]<br/>                        /C0             [1 1 1]<br/>                        /C1             [0 0 0]<br/>                        /N              2<br/>                &gt;&gt;<br/>        &gt;&gt;<br/>&gt;&gt; matrix makepattern setcolor fill<br/>\u00a0<br/>showpage<br/>%%EOF<br/>\u00a0</pre>"}, {"lang": "POV-Ray", "loc": 17, "block": "<pre class=\"povray highlighted_source\">\u00a0<br/><span class=\"kw4\">camera</span> <span class=\"br0\">{</span> <span class=\"kw1\">location</span>  <span class=\"sy0\">&lt;</span><span class=\"nu0\">0.0</span> , <span class=\"sy0\">.</span>8 ,<span class=\"sy0\">-</span><span class=\"nu0\">3.0</span><span class=\"sy0\">&gt;</span> <span class=\"kw1\">look_at</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">light_source</span><span class=\"br0\">{</span><span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span>,<span class=\"nu0\">3</span>,<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">&gt;</span> <span class=\"kw1\">color</span> <span class=\"kw1\">rgb</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">sky_sphere</span> <span class=\"br0\">{</span> <span class=\"kw4\">pigment</span><span class=\"br0\">{</span> <span class=\"kw1\">gradient</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"kw4\">color_map</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">color</span> <span class=\"kw1\">rgb</span> <span class=\"sy0\">&lt;.</span>2,<span class=\"sy0\">.</span>1,<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">.</span>5 <span class=\"kw1\">color</span> <span class=\"kw1\">rgb</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">scale</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">plane</span> <span class=\"br0\">{</span><span class=\"kw3\">y</span>,<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw4\">pigment</span> <span class=\"br0\">{</span> <span class=\"kw1\">hexagon</span> <span class=\"kw1\">color</span> <span class=\"kw1\">rgb</span> <span class=\"sy0\">.</span>7 <span class=\"kw1\">color</span> <span class=\"kw1\">rgb</span> <span class=\"sy0\">.</span>5 <span class=\"kw1\">color</span> <span class=\"kw1\">rgb</span> <span class=\"sy0\">.</span>6 <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">sphere</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><br/>  <span class=\"kw4\">texture</span> <span class=\"br0\">{</span> <br/>    <span class=\"kw4\">pigment</span><span class=\"br0\">{</span> <span class=\"kw1\">color</span> <span class=\"kw1\">rgbft</span> <span class=\"sy0\">&lt;.</span>8,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"sy0\">.</span>4,<span class=\"sy0\">.</span>4<span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span> <br/>    <span class=\"kw4\">finish</span> <span class=\"br0\">{</span> <span class=\"kw1\">phong</span> <span class=\"nu0\">1</span> <span class=\"kw1\">reflection</span> <span class=\"br0\">{</span><span class=\"nu0\">0.40</span> <span class=\"kw1\">metallic</span> <span class=\"nu0\">0.5</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span> <br/>  <span class=\"kw4\">interior</span> <span class=\"br0\">{</span> <span class=\"kw1\">ior</span> <span class=\"nu0\">1.5</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span>  <br/>\u00a0</pre>"}, {"lang": "Processing", "loc": 11, "block": "<pre class=\"text highlighted_source\">void setup() {<br/>  size(500,500,P3D);<br/>  background(200);<br/>}<br/>\u00a0<br/>void draw() {<br/>  stroke(200);<br/>  translate(250,250);<br/>  lights();<br/>  sphere(100);<br/>}</pre>"}, {"lang": "Python", "loc": 32, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/>\u00a0<br/>shades <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span><span class=\"st0\">':'</span><span class=\"sy0\">,</span><span class=\"st0\">'!'</span><span class=\"sy0\">,</span><span class=\"st0\">'*'</span><span class=\"sy0\">,</span><span class=\"st0\">'o'</span><span class=\"sy0\">,</span><span class=\"st0\">'e'</span><span class=\"sy0\">,</span><span class=\"st0\">'&amp;'</span><span class=\"sy0\">,</span><span class=\"st0\">'#'</span><span class=\"sy0\">,</span><span class=\"st0\">'%'</span><span class=\"sy0\">,</span><span class=\"st0\">'@'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> normalize<span class=\"br0\">(</span>v<span class=\"br0\">)</span>:<br/>\t<span class=\"kw2\">len</span> <span class=\"sy0\">=</span> <span class=\"kw3\">math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>**<span class=\"nu0\">2</span> + v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>**<span class=\"nu0\">2</span> + v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>**<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>/<span class=\"kw2\">len</span><span class=\"sy0\">,</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>/<span class=\"kw2\">len</span><span class=\"sy0\">,</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>/<span class=\"kw2\">len</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> dot<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>:<br/>\td <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>*y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>*y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> + x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>*y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">return</span> -d <span class=\"kw1\">if</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">def</span> draw_sphere<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> ambient<span class=\"sy0\">,</span> light<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>-r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>\t\tx <span class=\"sy0\">=</span> i + <span class=\"nu0\">0.5</span><br/>\t\tline <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>-<span class=\"nu0\">2</span>*r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>*r<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>\t\t\ty <span class=\"sy0\">=</span> j/<span class=\"nu0\">2</span> + <span class=\"nu0\">0.5</span><br/>\t\t\t<span class=\"kw1\">if</span> x*x + y*y <span class=\"sy0\">&lt;=</span> r*r:<br/>\t\t\t\tvec <span class=\"sy0\">=</span> normalize<span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"kw3\">math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>r*r - x*x - y*y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tb <span class=\"sy0\">=</span> dot<span class=\"br0\">(</span>light<span class=\"sy0\">,</span>vec<span class=\"br0\">)</span>**k + ambient<br/>\t\t\t\tintensity <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>-b<span class=\"br0\">)</span>*<span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>shades<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tline +<span class=\"sy0\">=</span> shades<span class=\"br0\">[</span>intensity<span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> intensity <span class=\"sy0\">&lt;</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>shades<span class=\"br0\">)</span> <span class=\"kw1\">else</span> shades<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t\tline +<span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">print</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>\u00a0<br/>light <span class=\"sy0\">=</span> normalize<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span>-<span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>draw_sphere<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">0.1</span><span class=\"sy0\">,</span> light<span class=\"br0\">)</span><br/>draw_sphere<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">0.4</span><span class=\"sy0\">,</span> light<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang typed/racket<br/>\u00a0<br/>(require plot/typed)<br/>(plot3d (polar3d (\u03bb (\u03b8 \u03c1) 1)) #:altitude 25)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 38, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program expresses a  lighted sphere  with  simple characters  used for shading.  */</span><br/><span class=\"kw1\">call</span> drawSphere  <span class=\"nu0\">19</span>,  <span class=\"nu0\">4</span>,   <span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>                  <span class=\"coMULTI\">/*draw a sphere with a radius of  19.  */</span><br/><span class=\"kw1\">call</span> drawSphere  <span class=\"nu0\">10</span>,  <span class=\"nu0\">2</span>,   <span class=\"nu0\">4</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>                  <span class=\"coMULTI\">/*  \"  \"    \"     \"  \"    \"    \"  ten. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>ceil:  <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  _=<span class=\"kw6\">trunc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;                     <span class=\"kw1\">return</span> _ + <span class=\"br0\">(</span>x<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">\\</span>=_<span class=\"br0\">)</span><br/>floor: <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  _=<span class=\"kw6\">trunc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;                     <span class=\"kw1\">return</span> _ - <span class=\"br0\">(</span>x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">\\</span>=_<span class=\"br0\">)</span><br/>norm:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $a $b $c;        _=sqrt<span class=\"br0\">(</span>$a<span class=\"sy0\">**</span><span class=\"nu0\">2</span> + $b<span class=\"sy0\">**</span><span class=\"nu0\">2</span> + $c<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;  <span class=\"kw1\">return</span>  $a<span class=\"sy0\">/</span>_  $b<span class=\"sy0\">/</span>_  $c<span class=\"sy0\">/</span>_<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>drawSphere: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> r, k, ambient              <span class=\"coMULTI\">/*get the arguments from CL*/</span><br/>       <span class=\"kw1\">if</span> <span class=\"nu0\">5</span>==<span class=\"st0\">'f5'</span>x  <span class=\"kw3\">then</span> shading= <span class=\"st0\">\".:!*oe&amp;#%@\"</span>               <span class=\"coMULTI\">/* EBCDIC dithering chars. */</span><br/>                    <span class=\"kw3\">else</span> shading= <span class=\"st0\">\"\u00b7:!\u00b0<a class=\"__cf_email__\" data-cfemail=\"cea1ab8e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u2591\u2592\u2593\"</span>               <span class=\"coMULTI\">/* ASCII      \"       \"    */</span><br/>       lightSource= <span class=\"st0\">'30  30  -50'</span>                            <span class=\"coMULTI\">/*position of light source.*/</span><br/>       <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  norm<span class=\"br0\">(</span>lightSource<span class=\"br0\">)</span>   <span class=\"kw2\">with</span>   s1 s2 s3      <span class=\"coMULTI\">/*normalize light source.  */</span><br/>       shadeLen=<span class=\"kw6\">length</span><span class=\"br0\">(</span>shading<span class=\"br0\">)</span> - <span class=\"nu0\">1</span>;    rr=r<span class=\"sy0\">**</span><span class=\"nu0\">2</span>;      r2=r+r <span class=\"coMULTI\">/*handy\u2500dandy variables.   */</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span>   i=floor<span class=\"br0\">(</span> -r<span class=\"br0\">)</span>  <span class=\"kw2\">to</span> ceil<span class=\"br0\">(</span> r<span class=\"br0\">)</span>;   x=i       + <span class=\"sy0\">.</span>5;        xx=x<span class=\"sy0\">**</span><span class=\"nu0\">2</span>;            $=<br/>           <span class=\"kw1\">do</span> j=floor<span class=\"br0\">(</span>-r2<span class=\"br0\">)</span>  <span class=\"kw2\">to</span> ceil<span class=\"br0\">(</span>r2<span class=\"br0\">)</span>;   y=j <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5  + <span class=\"sy0\">.</span>5;        yy=y<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>           <span class=\"kw1\">if</span> xx+yy<span class=\"sy0\">&lt;</span>=rr  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                             <span class=\"coMULTI\">/*is point within sphere\u00a0? */</span><br/>                              <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  norm<span class=\"br0\">(</span>x  y  sqrt<span class=\"br0\">(</span>rr-xx-yy<span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"kw2\">with</span>   v1  v2  v3<br/>                              dot=s1<span class=\"sy0\">*</span>v1  +  s2<span class=\"sy0\">*</span>v2  +  s3<span class=\"sy0\">*</span>v3  <span class=\"coMULTI\">/*the dot product of the Vs*/</span><br/>                              <span class=\"kw1\">if</span> dot<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> dot=<span class=\"nu0\">0</span>           <span class=\"coMULTI\">/*if positive, make it zero*/</span>     <span class=\"coMULTI\">/*\u25c4\u25a0\u25a0\u25a0\u25a0 same as:  dot=max(0, dot) */</span><br/>                              b=-dot<span class=\"sy0\">**</span>k  +  ambient          <span class=\"coMULTI\">/*calculate the brightness.*/</span><br/>                              <span class=\"kw1\">if</span> b<span class=\"sy0\">&lt;</span>=<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> brite=shadeLen<br/>                                        <span class=\"kw3\">else</span> brite=<span class=\"kw6\">max</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>-b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> shadeLen,  <span class=\"nu0\">0</span><span class=\"br0\">)</span> \u00a0% <span class=\"nu0\">1</span><br/>                              $=<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>shading, brite + <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                              <span class=\"kw3\">end</span>                            <span class=\"coMULTI\">/* [\u2191]  build display line.*/</span><br/>                         <span class=\"kw3\">else</span> $=$<span class=\"st0\">' '</span>                         <span class=\"coMULTI\">/*append a blank to line.  */</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                       <span class=\"coMULTI\">/*[\u2193] strip trailing blanks*/</span><br/>         <span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$, <span class=\"st0\">'T'</span><span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*show a line of the sphere*/</span><br/>         <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*i*/</span>                                       <span class=\"coMULTI\">/* [\u2191]  display the sphere.*/</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt:  <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;   d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">\"E\"</span> _ <span class=\"sy0\">.</span>;    g=g<span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_%2<br/>       h=d+<span class=\"nu0\">6</span>;       <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;              h=h%2+<span class=\"nu0\">1</span>;        <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>                    <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k; g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d;                    <span class=\"kw1\">return</span> g<span class=\"sy0\">/</span><span class=\"nu0\">1</span></pre>"}, {"lang": "Ruby", "loc": 28, "block": "<pre class=\"ruby highlighted_source\">Shoes.<span class=\"me1\">app</span> <span class=\"re3\">:width</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">500</span>, <span class=\"re3\">:height</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">500</span>, <span class=\"re3\">:resizable</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">false</span> <span class=\"kw1\">do</span><br/>  image <span class=\"nu0\">400</span>, <span class=\"nu0\">470</span>, <span class=\"re3\">:top</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">30</span>, <span class=\"re3\">:left</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">50</span> <span class=\"kw1\">do</span><br/>    nostroke<br/>    fill <span class=\"st0\">\"#127\"</span><br/>    image <span class=\"re3\">:top</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">230</span>, <span class=\"re3\">:left</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>      oval <span class=\"nu0\">70</span>, <span class=\"nu0\">130</span>, <span class=\"nu0\">260</span>, <span class=\"nu0\">40</span><br/>      blur <span class=\"nu0\">30</span><br/>    <span class=\"kw1\">end</span><br/>    oval <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">380</span>, <span class=\"nu0\">380</span><br/>    image <span class=\"re3\">:top</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span>, <span class=\"re3\">:left</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>      fill <span class=\"st0\">\"#46D\"</span><br/>      oval <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">338</span>, <span class=\"nu0\">338</span><br/>      blur <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">end</span><br/>    fill gradient<span class=\"br0\">(</span>rgb<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.7</span><span class=\"br0\">)</span>, rgb<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    oval <span class=\"nu0\">80</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">240</span>, <span class=\"nu0\">176</span><br/>    image <span class=\"re3\">:top</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span>, <span class=\"re3\">:left</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>      fill <span class=\"st0\">\"#79F\"</span><br/>      oval <span class=\"nu0\">134</span>, <span class=\"nu0\">134</span>, <span class=\"nu0\">130</span>, <span class=\"nu0\">130</span><br/>      blur <span class=\"nu0\">40</span><br/>    <span class=\"kw1\">end</span><br/>    image <span class=\"re3\">:top</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">150</span>, <span class=\"re3\">:left</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">40</span>, <span class=\"re3\">:width</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">320</span>, <span class=\"re3\">:height</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">260</span> <span class=\"kw1\">do</span><br/>      fill gradient<span class=\"br0\">(</span>rgb<span class=\"br0\">(</span><span class=\"nu0\">0.7</span>, <span class=\"nu0\">0.9</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, rgb<span class=\"br0\">(</span><span class=\"nu0\">0.7</span>, <span class=\"nu0\">0.9</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      oval <span class=\"nu0\">60</span>, <span class=\"nu0\">60</span>, <span class=\"nu0\">200</span>, <span class=\"nu0\">136</span><br/>      blur <span class=\"nu0\">20</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 34, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Sphere <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>shades, light<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Seq<span class=\"br0\">(</span><span class=\"st0\">'.'</span>, <span class=\"st0\">':'</span>, <span class=\"st0\">'!'</span>, <span class=\"st0\">'*'</span>, <span class=\"st0\">'o'</span>, <span class=\"st0\">'e'</span>, <span class=\"st0\">'&amp;'</span>, <span class=\"st0\">'#'</span>, <span class=\"st0\">'%'</span>, <span class=\"st0\">'@'</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span>30d, 30d, -50d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawSphere<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Double, k<span class=\"sy0\">:</span> Double, ambient<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> dot<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span>, y<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> x.<span class=\"me1\">head</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">head</span> + x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> y<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + x.<span class=\"me1\">last</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">last</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> -d <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> 0D<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>-r<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span> to math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"sy0\">;</span> x <span class=\"sy0\">=</span> i + .5<span class=\"br0\">)</span><br/>      println<span class=\"br0\">(</span><br/>        <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>- math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>-<span class=\"nu0\">2</span> <span class=\"sy0\">*</span> r<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span> to math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> r<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> j / <span class=\"nu0\">2.0</span> + .5<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x + y <span class=\"sy0\">*</span> y <span class=\"sy0\">&lt;=</span> r <span class=\"sy0\">*</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> intensity<span class=\"br0\">(</span>vec<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>dot<span class=\"br0\">(</span>light, vec<span class=\"br0\">)</span>, k<span class=\"br0\">)</span> + ambient<br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> shades.<span class=\"me1\">length</span> - <span class=\"nu0\">2</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> math.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> - b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>shades.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            shades<span class=\"br0\">(</span>intensity<span class=\"br0\">(</span>normalize<span class=\"br0\">(</span>Array<span class=\"br0\">(</span>x, y, scala.<span class=\"me1\">math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> r - x <span class=\"sy0\">*</span> x - y <span class=\"sy0\">*</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> normalize<span class=\"br0\">(</span>v<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>v.<span class=\"me1\">head</span> <span class=\"sy0\">*</span> v.<span class=\"me1\">head</span> + v<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> v<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + v.<span class=\"me1\">last</span> <span class=\"sy0\">*</span> v.<span class=\"me1\">last</span><span class=\"br0\">)</span><br/>    v.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> / len<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  normalize<span class=\"br0\">(</span>light<span class=\"br0\">)</span>.<span class=\"me1\">copyToArray</span><span class=\"br0\">(</span>light<span class=\"br0\">)</span><br/>  drawSphere<span class=\"br0\">(</span><span class=\"nu0\">20</span>, <span class=\"nu0\">4</span>, .1<span class=\"br0\">)</span><br/>  drawSphere<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2</span>, .4<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 33, "block": "<pre class=\"ruby highlighted_source\">func normalize <span class=\"br0\">(</span>vec<span class=\"br0\">)</span>  <span class=\"br0\">{</span> vec\u00a0\u00bb<span class=\"sy0\">/</span>\u00bb <span class=\"br0\">(</span>vec\u00a0\u00bb<span class=\"sy0\">*</span>\u00ab\u00a0vec <span class=\"sy0\">-&gt;</span> sum.<span class=\"me1\">sqrt</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>func dot       <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>x\u00a0\u00bb<span class=\"sy0\">*</span>\u00ab\u00a0y <span class=\"sy0\">-&gt;</span> sum<span class=\"br0\">)</span> <span class=\"st0\">`max`</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var x = var y = <span class=\"nu0\">255</span><br/>x <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> x.<span class=\"me1\">is_even</span>    <span class=\"co1\"># must be odd</span><br/>\u00a0<br/>var light = normalize<span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><br/>var depth = <span class=\"nu0\">255</span><br/>\u00a0<br/>func draw_sphere<span class=\"br0\">(</span>rad, k, ambient<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var pixels = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    var r2 = <span class=\"br0\">(</span>rad <span class=\"sy0\">*</span> rad<span class=\"br0\">)</span><br/>    var range = <span class=\"br0\">(</span><span class=\"sy0\">-</span>rad .. <span class=\"me1\">rad</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> x,y <span class=\"kw1\">in</span> <span class=\"br0\">(</span>range ~X range<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>var x2 = x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>var y2 = y<span class=\"sy0\">*</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> r2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            var vector = normalize<span class=\"br0\">(</span><span class=\"br0\">[</span>x, y, <span class=\"br0\">(</span>r2 <span class=\"sy0\">-</span> x2 <span class=\"sy0\">-</span> y2<span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            var intensity = <span class=\"br0\">(</span>dot<span class=\"br0\">(</span>light, vector<span class=\"br0\">)</span><span class=\"sy0\">**</span>k <span class=\"sy0\">+</span> ambient<span class=\"br0\">)</span><br/>            var pixel = <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"st0\">`max`</span> <span class=\"br0\">(</span>intensity<span class=\"sy0\">*</span>depth <span class=\"sy0\">-&gt;</span> int<span class=\"br0\">)</span> <span class=\"st0\">`min`</span> depth<span class=\"br0\">)</span><br/>            pixels <span class=\"sy0\">&lt;&lt;</span> pixel<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            pixels <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> pixels<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var outfile = <span class=\"sy0\">%</span>f<span class=\"st0\">'sphere-sidef.pgm'</span><br/>var out = outfile.<span class=\"kw3\">open</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;:raw'</span><span class=\"br0\">)</span><br/>\u00a0<br/>out.<span class=\"me1\">say</span><span class=\"br0\">(</span><span class=\"st0\">\"P5<span class=\"es0\">\\n</span>#{x} #{y}<span class=\"es0\">\\n</span>#{depth}\"</span><span class=\"br0\">)</span>    <span class=\"co1\"># .pgm header</span><br/>out.<span class=\"kw3\">print</span><span class=\"br0\">(</span>draw_sphere<span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>, .9, .2<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">chr</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">)</span><br/>out.<span class=\"me1\">close</span></pre>"}, {"lang": "Smalltalk", "loc": 65, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re0\">Point3D</span> <span class=\"sy0\">:=</span><br/>   <span class=\"re0\">Point</span> subclass:<span class=\"re1\">#Point3D</span><br/>        instanceVariableNames:<span class=\"st0\">'z'</span><br/>        classVariableNames:<span class=\"st0\">''</span><br/>        poolDictionaries:<span class=\"st0\">''</span><br/>        category:<span class=\"st0\">''</span><br/>        inEnvironment:<span class=\"kw1\">nil</span>.<br/>\u00a0<br/><span class=\"re0\">Point3D</span> compile:<span class=\"st0\">'z ^ z'</span>.<br/><span class=\"re0\">Point3D</span> compile:<span class=\"st0\">'z:v z\u00a0:= v'</span>.<br/>\u00a0<br/><span class=\"re5\">normalize</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">v</span> | |invLen| <br/>    <span class=\"re6\">invLen</span> <span class=\"sy0\">:=</span> <span class=\"re5\">1</span> / <span class=\"br0\">(</span><span class=\"re5\">dot</span> value:<span class=\"re5\">v</span> value:<span class=\"re5\">v</span><span class=\"br0\">)</span> sqrt.<br/>    <span class=\"re5\">v</span> x: <span class=\"re5\">v</span> x * <span class=\"re5\">invLen</span>.<br/>    <span class=\"re5\">v</span> y: <span class=\"re5\">v</span> y * <span class=\"re5\">invLen</span>.<br/>    <span class=\"re5\">v</span> z: <span class=\"re5\">v</span> z * <span class=\"re5\">invLen</span>.<br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">dot</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span> |<br/>    <span class=\"br0\">(</span><span class=\"re5\">a</span> x * <span class=\"re5\">b</span> x<span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"re5\">a</span> y * <span class=\"re5\">b</span> y<span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"re5\">a</span> z * <span class=\"re5\">b</span> z<span class=\"br0\">)</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">drawSphere</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">r</span>\u00a0:<span class=\"re5\">k</span>\u00a0:<span class=\"re5\">amb</span>\u00a0:<span class=\"re5\">dir</span> |<br/>    |w h imh vec img|<br/>\u00a0<br/>    <span class=\"re6\">w</span> <span class=\"sy0\">:=</span> <span class=\"re5\">r</span>*<span class=\"re5\">4</span>. <span class=\"re5\">h</span> <span class=\"sy0\">:=</span> <span class=\"re5\">r</span>*<span class=\"re5\">3</span>.<br/>    <span class=\"re5\">img</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Image</span> width:<span class=\"re5\">w</span> height:<span class=\"re5\">h</span> depth:<span class=\"re5\">8</span>.<br/>    <span class=\"re5\">img</span> photometric:<span class=\"re1\">#blackIs0</span>; createPixelStore.<br/>    <span class=\"re5\">vec</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Point3D</span> new.<br/>    <span class=\"re5\">0</span>-<span class=\"re5\">r</span> to:<span class=\"re5\">r</span> do:<span class=\"br0\">[</span>:<span class=\"re5\">x</span> |<br/>        <span class=\"nu0\">0</span>-<span class=\"re5\">r</span> to:<span class=\"re5\">r</span> do:<span class=\"br0\">[</span>:<span class=\"re5\">y</span> |<br/>            |z s lum|<br/>            <span class=\"br0\">(</span><span class=\"re5\">z</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">r</span>*<span class=\"re5\">r</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"re5\">x</span>*<span class=\"re5\">x</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"re5\">y</span>*<span class=\"re5\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"re5\">0</span> ifTrue:<span class=\"br0\">[</span><br/>                <span class=\"re5\">vec</span> x: <span class=\"re5\">x</span>.<br/>                <span class=\"re5\">vec</span> y: <span class=\"re5\">y</span>.<br/>                <span class=\"re5\">vec</span> z: <span class=\"re5\">z</span> sqrt.<br/>                <span class=\"re5\">normalize</span> value:<span class=\"re5\">vec</span>.<br/>                <span class=\"re5\">s</span> <span class=\"sy0\">:=</span> <span class=\"re5\">dot</span> value:<span class=\"re5\">dir</span> value:<span class=\"re5\">vec</span>.<br/>                <span class=\"re5\">s</span> &lt; <span class=\"nu0\">0</span> ifTrue:<span class=\"br0\">[</span> <span class=\"re5\">s</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span> <span class=\"br0\">]</span>.<br/>                <span class=\"re5\">lum</span> <span class=\"sy0\">:=</span> <span class=\"re5\">255</span> * <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">s</span> raisedTo: <span class=\"re5\">k</span><span class=\"br0\">)</span> + <span class=\"re5\">amb</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span><span class=\"re5\">1</span> + <span class=\"re5\">amb</span><span class=\"br0\">)</span>.<br/>                <span class=\"re5\">lum</span> &lt; <span class=\"nu0\">0</span> ifTrue:<span class=\"br0\">[</span><br/>                    <span class=\"re5\">lum</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span><br/>                <span class=\"br0\">]</span> ifFalse:<span class=\"br0\">[</span> <span class=\"re5\">lum</span> &gt; <span class=\"nu0\">255</span> ifTrue:<span class=\"br0\">[</span><br/>                    <span class=\"re5\">lum</span> <span class=\"sy0\">:=</span> <span class=\"re5\">255</span><br/>                <span class=\"br0\">]</span><span class=\"br0\">]</span>.<br/>                <span class=\"re5\">img</span> atX:<span class=\"br0\">(</span><span class=\"re5\">x</span>+<span class=\"br0\">(</span><span class=\"re5\">w</span>//<span class=\"re5\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> y:<span class=\"br0\">(</span><span class=\"re5\">y</span>+<span class=\"br0\">(</span><span class=\"re5\">h</span>//<span class=\"re5\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> put:<span class=\"br0\">(</span><span class=\"re0\">Color</span> greyByte:<span class=\"re5\">lum</span><span class=\"br0\">)</span>.<br/>            <span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span>.<br/>    <span class=\"re5\">img</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">main</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><br/>    |<span class=\"re3\">dir img</span>|<br/>\u00a0<br/>    <span class=\"re6\">dir</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Point3D</span> new x:-<span class=\"re5\">30</span>; y:-<span class=\"re5\">30</span>; z:<span class=\"re5\">50</span>; yourself.<br/>    <span class=\"re5\">normalize</span> value:<span class=\"re5\">dir</span>.<br/>    <span class=\"re5\">img</span> <span class=\"sy0\">:=</span> <span class=\"re5\">drawSphere</span> value: <span class=\"re5\">100</span> value: <span class=\"re5\">1</span>.<span class=\"re5\">5</span> value: <span class=\"re5\">0</span>.<span class=\"re5\">2</span> value: <span class=\"re5\">dir</span>.<br/>    <span class=\"re5\">img</span> displayOn:<span class=\"br0\">(</span><span class=\"re0\">View</span> new extent:<span class=\"re5\">400</span>@400; openAndWait<span class=\"br0\">)</span>.<br/>    <span class=\"re5\">img</span> saveOn:<span class=\"st0\">'sphere.png'</span>.<br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">main</span> value.<br/>\u00a0</pre>"}, {"lang": "SVG", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Sphere: UIView{<br/>\u00a0<br/>  override func drawRect(rect: CGRect)<br/>  {<br/>    let context = UIGraphicsGetCurrentContext()<br/>    let locations: [CGFloat] = [0.0, 1.0]<br/>\u00a0<br/>    let colors = [UIColor.whiteColor().CGColor,<br/>      UIColor.blueColor().CGColor]<br/>\u00a0<br/>    let colorspace = CGColorSpaceCreateDeviceRGB()<br/>\u00a0<br/>    let gradient = CGGradientCreateWithColors(colorspace,<br/>      colors, locations)<br/>\u00a0<br/>    var startPoint = CGPoint()<br/>    var endPoint = CGPoint()<br/>    startPoint.x = self.center.x - (self.frame.width * 0.1)<br/>    startPoint.y = self.center.y - (self.frame.width * 0.15)<br/>    endPoint.x = self.center.x<br/>    endPoint.y = self.center.y<br/>    let startRadius: CGFloat = 0<br/>    let endRadius: CGFloat = self.frame.width * 0.38<br/>\u00a0<br/>    CGContextDrawRadialGradient (context, gradient, startPoint,<br/>      startRadius, endPoint, endRadius,<br/>      0)<br/>  }<br/>}<br/>\u00a0<br/>var s = Sphere(frame: CGRectMake(0, 0, 200, 200))<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Sphere: UIView{<br/>\u00a0<br/>  override func drawRect(rect: CGRect)<br/>  {<br/>    let context = UIGraphicsGetCurrentContext()<br/>    let locations: [CGFloat] = [0.0, 1.0]<br/>\u00a0<br/>    let colors = [UIColor.whiteColor().CGColor,<br/>      UIColor.blueColor().CGColor]<br/>\u00a0<br/>    let colorspace = CGColorSpaceCreateDeviceRGB()<br/>\u00a0<br/>    let gradient = CGGradientCreateWithColors(colorspace,<br/>      colors, locations)<br/>\u00a0<br/>    var startPoint = CGPoint()<br/>    var endPoint = CGPoint()<br/>    startPoint.x = self.center.x - (self.frame.width * 0.1)<br/>    startPoint.y = self.center.y - (self.frame.width * 0.15)<br/>    endPoint.x = self.center.x<br/>    endPoint.y = self.center.y<br/>    let startRadius: CGFloat = 0<br/>    let endRadius: CGFloat = self.frame.width * 0.38<br/>\u00a0<br/>    CGContextDrawRadialGradient (context, gradient, startPoint,<br/>      startRadius, endPoint, endRadius,<br/>      0)<br/>  }<br/>}<br/>\u00a0<br/>var s = Sphere(frame: CGRectMake(0, 0, 200, 200))<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 9, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> grey <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">format</span> <span class=\"st0\">\"#%2.2x%2.2x%2.2x\"</span> <span class=\"re0\">$n</span> <span class=\"re0\">$n</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>\u00a0<br/>pack <span class=\"br0\">[</span>canvas .c -height <span class=\"nu0\">400</span> -width <span class=\"nu0\">640</span> -background white<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">255</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">set</span> h <span class=\"br0\">[</span>grey <span class=\"re0\">$i</span><span class=\"br0\">]</span> <br/>  .c create arc <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span>+<span class=\"re0\">$i</span>/<span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">50</span>+<span class=\"re0\">$i</span>/<span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">400</span>-<span class=\"re0\">$i</span>/<span class=\"nu0\">1.5</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">350</span>-<span class=\"re0\">$i</span>/<span class=\"nu0\">1.5</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>                 -start <span class=\"nu0\">0</span> -extent <span class=\"nu0\">359</span> -fill <span class=\"re0\">$h</span> -outline <span class=\"re0\">$h</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Plain TeX", "loc": 8, "block": "<pre class=\"text highlighted_source\">\\documentclass{article}<br/>\\usepackage{tikz}<br/>\\usetikzlibrary{shadings}<br/>\\begin{document}<br/>\\begin{tikzpicture}<br/>  \\shade[ball color=black] (0,0) circle (4);<br/>\\end{tikzpicture}<br/>\\end{document}</pre>"}, {"lang": "VBScript", "loc": 51, "block": "<pre class=\"vb highlighted_source\">shades = Array(<span class=\"st0\">\".\"</span>, <span class=\"st0\">\":\"</span>, <span class=\"st0\">\"!\"</span>, <span class=\"st0\">\"*\"</span>, <span class=\"st0\">\"o\"</span>, <span class=\"st0\">\"e\"</span>, <span class=\"st0\">\"&amp;\"</span>, <span class=\"st0\">\"#\"</span>, <span class=\"st0\">\"%\"</span>, <span class=\"st0\">\"@\"</span>)<br/>light = Array(30, 30, -50)<br/>\u00a0<br/><span class=\"kw2\">Sub</span> Normalize(v)<br/>   length = Sqr(v(0)*v(0) + v(1)*v(1) + v(2)*v(2))<br/>   v(0) = v(0)/length\u00a0: v(1) = v(1)/length\u00a0: v(2) = v(2)/length<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Dot(x, y)<br/>   d = x(0)*y(0) + x(1)*y(1) + x(2)*y(2)<br/>   <span class=\"kw3\">If</span> d &lt; 0 <span class=\"kw3\">Then</span> Dot = -d <span class=\"kw3\">Else</span> Dot = 0 <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'floor function is the Int function<br/></span><span class=\"co1\">'ceil function implementation<br/></span><span class=\"kw2\">Function</span> Ceil(x)<br/>    Ceil = Int(x)<br/>    <span class=\"kw3\">If</span> Ceil &lt;&gt; x <span class=\"kw3\">Then</span> Ceil = Ceil + 1 <span class=\"kw3\">End</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> DrawSphere(R, k, ambient)<br/>   <span class=\"kw4\">Dim</span> i, j, intensity, inten, b, x, y<br/>   <span class=\"kw4\">Dim</span> vec(3)<br/>   <span class=\"kw3\">For</span> i = Int(-R) <span class=\"kw3\">to</span> Ceil(R)<br/>      x = i + 0.5<br/>      <span class=\"kw4\">line</span> = <span class=\"st0\">\"\"</span><br/>      <span class=\"kw3\">For</span> j = Int(-2*R) <span class=\"kw3\">to</span> Ceil(2*R)<br/>         y = j / 2 + 0.5<br/>         <span class=\"kw3\">If</span> x * x + y * y &lt;= R*R <span class=\"kw3\">Then</span><br/>            vec(0) = x<br/>            vec(1) = y<br/>            vec(2) = Sqr(R * R - x * x - y * y)<br/>            Normalize vec<br/>            b = dot(light, vec)^k + ambient<br/>            intensity = Int((1 - b) * <span class=\"kw4\">UBound</span>(shades))<br/>            <span class=\"kw3\">If</span> intensity &lt; 0 <span class=\"kw3\">Then</span> intensity = 0 <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">If</span> intensity &gt;= <span class=\"kw4\">UBound</span>(shades) <span class=\"kw3\">Then</span><br/>               intensity = <span class=\"kw4\">UBound</span>(shades)<br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw4\">line</span> = <span class=\"kw4\">line</span> &amp; shades(intensity)<br/>         <span class=\"kw3\">Else</span><br/>            <span class=\"kw4\">line</span> = <span class=\"kw4\">line</span> &amp; <span class=\"st0\">\" \"</span><br/>         <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>      <span class=\"kw3\">Next</span><br/>      WScript.StdOut.WriteLine <span class=\"kw4\">line</span><br/>   <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/>Normalize light<br/>DrawSphere 20, 4, 0.1<br/>DrawSphere 10,2,0.4</pre>"}, {"lang": "XPL0", "loc": 18, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>def     R=100, R2=R*R;          \\radius, in pixels; radius squared<br/>def     X0=640/2, Y0=480/2;     \\coordinates of center of screen<br/>int     X, Y, Z, C, D2;         \\coords, color, distance from center squared<br/>[SetVid($112);                  \\set 640x480x24 graphics mode<br/>for Y:= -R to +R do             \\for all the coordinates near the circle<br/>    for X:= -R to +R do         \\ which is under the sphere<br/>        [D2:= X*X + Y*Y;        <br/>        C:= 0;                  \\default color is black<br/>        if D2 &lt;= R2 then        \\coordinate is inside circle under sphere<br/>            [Z:= sqrt(R2-D2);   \\height of point on surface of sphere above X,Y<br/>            C:= Z-(X+Y)/2+130;  \\color is proportional; offset X and Y, and<br/>            ];                  \\ shift color to upper limit of its range<br/>        Point(X+X0, Y+Y0, C&lt;&lt;8+C); \\green + blue = cyan<br/>       ];<br/>repeat until KeyHit;            \\wait for keystroke<br/>SetVid($03);                    \\restore normal text mode<br/>]</pre>"}, {"lang": "Yabasic", "loc": 14, "block": "<pre class=\"text highlighted_source\">ancho = 640\u00a0: alto = 480<br/>open window 640,480<br/>backcolor 16,16,16<br/>clear window<br/>sphera()<br/>\u00a0<br/>sub sphera()<br/>\tlocal n<br/>\u00a0<br/>\tfor n = 1 to 100<br/>\t\tcolor 2*n, 2*n, 2*n<br/>\t\tfill circle ancho/2-2*n/3, alto/2-n/2, 150-n<br/>\tnext n<br/>end sub</pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">img:=PPM(640,480);<br/>R:=100; R2:=R*R;           //radius, in pixels; radius squared<br/>X0:=640/2; Y0:=480/2;      //coordinates of center of screen<br/>foreach Y in ([-R..R]){    //for all the coordinates near the circle<br/>   foreach X in ([-R..R]){ // which is under the sphere<br/>      D2:=X*X + Y*Y;        <br/>      C:=0;                //default color is black<br/>      if(D2&lt;=R2){          //coordinate is inside circle under sphere<br/>\t Z:=(R2-D2).toFloat().sqrt();//height of point on surface of sphere above X,Y<br/>\t C=0x82+Z-(X+Y)/2; //color is proportional; offset X and Y, and<br/>      }                    // shift color to upper limit of its range<br/>      img[X+X0,Y+Y0]=C.shiftLeft(8)+C; //green + blue = cyan<br/>   }<br/>}<br/>img.write(File(\"foo.ppm\",\"wb\"));</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 52, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">1</span> <span class=\"co3\">REM fast</span><br/><span class=\"nu0\">50</span> <span class=\"co3\">REM spheer with hidden lines and rotation</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">CLS</span> <br/><span class=\"nu0\">110</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"sphere with lenght&amp;wide-circles\"</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"_______________________________\"</span><span class=\"co1\">''</span><br/><span class=\"nu0\">200</span> INPUT <span class=\"st0\">\"rotate x-as:\"</span>;a<br/><span class=\"nu0\">210</span> INPUT <span class=\"st0\">\"rotate y-as:\"</span>;b<br/><span class=\"nu0\">220</span> INPUT <span class=\"st0\">\"rotate z-as:\"</span>;c<br/><span class=\"nu0\">225</span> INPUT <span class=\"st0\">\"distance lines(10-45):\"</span>;d<br/><span class=\"nu0\">230</span> <span class=\"kw1\">LET</span> u=<span class=\"nu0\">128</span>: <span class=\"kw1\">LET</span> v=<span class=\"nu0\">87</span>: <span class=\"kw1\">LET</span> r=<span class=\"nu0\">87</span>: <span class=\"kw1\">LET</span> bm=<span class=\"kw1\">PI</span>/<span class=\"nu0\">180</span>: <span class=\"kw1\">LET</span> h=.5<br/><span class=\"nu0\">240</span> <span class=\"kw1\">LET</span> s1=<span class=\"kw3\">SIN</span> <span class=\"br0\">(</span>a*bm<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> s2=<span class=\"kw3\">SIN</span> <span class=\"br0\">(</span>b*bm<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> s3=<span class=\"kw3\">SIN</span> <span class=\"br0\">(</span>c*bm<span class=\"br0\">)</span><br/><span class=\"nu0\">250</span> <span class=\"kw1\">LET</span> c1=<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>a*bm<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> c2=<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>b*bm<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> c3=<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>c*bm<span class=\"br0\">)</span><br/><span class=\"nu0\">260</span> <span class=\"co3\">REM calc rotate matrix</span><br/><span class=\"nu0\">270</span> <span class=\"kw1\">LET</span> ax=c2*c3: <span class=\"kw1\">LET</span> ay=-c2*s3: <span class=\"kw1\">LET</span> az=s2<br/><span class=\"nu0\">280</span> <span class=\"kw1\">LET</span> bx=c1*s3+s1*s2*c3<br/><span class=\"nu0\">290</span> <span class=\"kw1\">LET</span> by=c1*c3-s1*s2*s3: <span class=\"kw1\">LET</span> bz=-s1*c2<br/><span class=\"nu0\">300</span> <span class=\"kw1\">LET</span> cx=s1*s3-c1*s2*c3<br/><span class=\"nu0\">310</span> <span class=\"kw1\">LET</span> cy=s1*c3+c1*s2*s3: <span class=\"kw1\">LET</span> cz=c1*c2<br/><span class=\"nu0\">400</span> <span class=\"co3\">REM draw outer</span><br/><span class=\"nu0\">410</span> <span class=\"kw1\">CLS</span>\u00a0: <span class=\"kw1\">CIRCLE</span> u,v,r<br/><span class=\"nu0\">500</span> <span class=\"co3\">REM draw lenght-circle</span><br/><span class=\"nu0\">510</span> <span class=\"kw1\">FOR</span> l=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">180</span>-d <span class=\"kw4\">STEP</span> d<br/><span class=\"nu0\">515</span> <span class=\"kw1\">LET</span> f1=<span class=\"nu0\">0</span><br/><span class=\"nu0\">520</span> <span class=\"kw1\">FOR</span> p=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">360</span> <span class=\"kw4\">STEP</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">530</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"co3\">REM xx,yy,zz calc</span><br/><span class=\"nu0\">540</span> <span class=\"kw1\">IF</span> yy&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> f2=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> f1=<span class=\"nu0\">0</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">580</span><br/><span class=\"nu0\">550</span> <span class=\"kw1\">LET</span> xb=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>u+xx+h<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> yb=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>v+zz+h<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> f2=<span class=\"nu0\">1</span><br/><span class=\"nu0\">560</span> <span class=\"kw1\">IF</span> f1=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> x1=xb: <span class=\"kw1\">LET</span> y1=yb: <span class=\"kw1\">LET</span> f1=<span class=\"nu0\">1</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">580</span><br/><span class=\"nu0\">570</span> <span class=\"kw1\">PLOT</span> x1,y1: <span class=\"kw1\">DRAW</span> xb-x1,yb-y1: <span class=\"kw1\">LET</span> x1=xb: <span class=\"kw1\">LET</span> y1=yb: <span class=\"kw1\">LET</span> f1=f2<br/><span class=\"nu0\">580</span> <span class=\"kw1\">NEXT</span> p<br/><span class=\"nu0\">590</span> <span class=\"kw1\">NEXT</span> l<br/><span class=\"nu0\">600</span> <span class=\"co3\">REM draw wide-circle</span><br/><span class=\"nu0\">610</span> <span class=\"kw1\">FOR</span> p=-<span class=\"nu0\">90</span>+d <span class=\"kw1\">TO</span> <span class=\"nu0\">90</span>-d <span class=\"kw4\">STEP</span> d<br/><span class=\"nu0\">615</span> <span class=\"kw1\">LET</span> f1=<span class=\"nu0\">0</span><br/><span class=\"nu0\">620</span> <span class=\"kw1\">FOR</span> l=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">360</span> <span class=\"kw4\">STEP</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">630</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"co3\">REM xx,yy,zz</span><br/><span class=\"nu0\">640</span> <span class=\"kw1\">IF</span> yy&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> f2=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> f1=<span class=\"nu0\">0</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">680</span><br/><span class=\"nu0\">650</span> <span class=\"kw1\">LET</span> xb=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>u+xx+h<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> yb=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>v+zz+h<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> f2=<span class=\"nu0\">1</span><br/><span class=\"nu0\">660</span> <span class=\"kw1\">IF</span> f1=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> x1=xb: <span class=\"kw1\">LET</span> y1=yb: <span class=\"kw1\">LET</span> f1=<span class=\"nu0\">1</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">680</span><br/><span class=\"nu0\">670</span> <span class=\"kw1\">PLOT</span> x1,y1: <span class=\"kw1\">DRAW</span> xb-x1,yb-y1: <span class=\"kw1\">LET</span> x1=xb: <span class=\"kw1\">LET</span> y1=yb: <span class=\"kw1\">LET</span> f1=f2<br/><span class=\"nu0\">680</span> <span class=\"kw1\">NEXT</span> l<br/><span class=\"nu0\">690</span> <span class=\"kw1\">NEXT</span> p<br/><span class=\"nu0\">700</span> <span class=\"kw1\">PRINT</span> <span class=\"co2\">#0;\"...press any key...\": PAUSE 0: RUN </span><br/><span class=\"nu0\">999</span> <span class=\"co3\">REM sfere-coordinates&gt;&gt;&gt;Cartesis Coordinate</span><br/><span class=\"nu0\">1000</span> <span class=\"kw1\">LET</span> x=r*<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>p*bm<span class=\"br0\">)</span>*<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>l*bm<span class=\"br0\">)</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> y=r*<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>p*bm<span class=\"br0\">)</span>*<span class=\"kw3\">SIN</span> <span class=\"br0\">(</span>l*bm<span class=\"br0\">)</span><br/><span class=\"nu0\">1020</span> <span class=\"kw1\">LET</span> z=r*<span class=\"kw3\">SIN</span> <span class=\"br0\">(</span>p*bm<span class=\"br0\">)</span><br/><span class=\"nu0\">1030</span> <span class=\"co3\">REM p(x,y,z) rotate to p(xx,yy,zz)</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">LET</span> xx=ax*x+ay*y+az*z<br/><span class=\"nu0\">1050</span> <span class=\"kw1\">LET</span> yy=bx*x+by*y+bz*z<br/><span class=\"nu0\">1060</span> <span class=\"kw1\">LET</span> zz=cx*x+cy*y+cz*z<br/><span class=\"nu0\">1070</span> <span class=\"kw1\">RETURN</span></pre>"}]}