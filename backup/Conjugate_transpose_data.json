{"task": "Conjugate_transpose", "blocks": [{"lang": "Ada", "loc": 47, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Complex_Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Complex_Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Complex_Types</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Complex_Types</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Complex_Arrays</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Complex_Arrays</span>;<br/><span class=\"kw3\">procedure</span> ConTrans <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> CM <span class=\"kw1\">is</span> Complex_Matrix;<br/>   S2O2\u00a0: <span class=\"kw3\">constant</span> Float\u00a0:= <span class=\"nu0\">0.7071067811865</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print <span class=\"br0\">(</span>mat\u00a0: CM<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> row <span class=\"kw3\">in</span> mat'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span> <span class=\"kw1\">for</span> col <span class=\"kw3\">in</span> mat'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         Put<span class=\"br0\">(</span>mat<span class=\"br0\">(</span>row,col<span class=\"br0\">)</span>, Exp=&gt;<span class=\"nu0\">0</span>, Aft=&gt;<span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; New_Line; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> almostzero<span class=\"br0\">(</span>mat\u00a0: CM; tol\u00a0: Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> row <span class=\"kw3\">in</span> mat'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span> <span class=\"kw1\">for</span> col <span class=\"kw3\">in</span> mat'<span class=\"kw3\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>mat<span class=\"br0\">(</span>row,col<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; tol <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> False; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> True;<br/>   <span class=\"kw1\">end</span> almostzero;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Examine <span class=\"br0\">(</span>mat\u00a0: CM<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      CT\u00a0: CM\u00a0:= Conjugate <span class=\"br0\">(</span>Transpose<span class=\"br0\">(</span>mat<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      isherm, isnorm, isunit\u00a0: Boolean;<br/>   <span class=\"kw1\">begin</span><br/>      isherm\u00a0:= almostzero<span class=\"br0\">(</span>mat-CT, 1.0e-6<span class=\"br0\">)</span>;<br/>      isnorm\u00a0:= almostzero<span class=\"br0\">(</span>mat*CT-CT*mat, 1.0e-6<span class=\"br0\">)</span>;<br/>      isunit\u00a0:= almostzero<span class=\"br0\">(</span>CT-Inverse<span class=\"br0\">(</span>mat<span class=\"br0\">)</span>, 1.0e-6<span class=\"br0\">)</span>;<br/>      Print<span class=\"br0\">(</span>mat<span class=\"br0\">)</span>;<br/>      Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Conjugate transpose:\"</span><span class=\"br0\">)</span>; Print<span class=\"br0\">(</span>CT<span class=\"br0\">)</span>;<br/>      Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Hermitian?: \"</span> &amp; isherm'Img<span class=\"br0\">)</span>;<br/>      Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Normal?: \"</span> &amp; isnorm'Img<span class=\"br0\">)</span>;<br/>      Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Unitary?: \"</span> &amp; isunit'Img<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Examine;<br/>\u00a0<br/>   hmat\u00a0: CM\u00a0:= <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">2.0</span>+<span class=\"nu0\">1.0</span>*i<span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">2.0</span>-<span class=\"nu0\">1.0</span>*i, <span class=\"nu0\">1.0</span>+<span class=\"nu0\">0.0</span>*i<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   nmat\u00a0: CM\u00a0:= <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">1.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">0.0</span>+<span class=\"nu0\">0.0</span>*i<span class=\"br0\">)</span>,<br/>                 <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">1.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">1.0</span>+<span class=\"nu0\">0.0</span>*i<span class=\"br0\">)</span>,<br/>                 <span class=\"br0\">(</span><span class=\"nu0\">1.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">0.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">1.0</span>+<span class=\"nu0\">0.0</span>*i<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   umat\u00a0: CM\u00a0:= <span class=\"br0\">(</span><span class=\"br0\">(</span>S2O2+<span class=\"nu0\">0.0</span>*i, S2O2+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">0.0</span>+<span class=\"nu0\">0.0</span>*i<span class=\"br0\">)</span>,<br/>                 <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>+S2O2*i, <span class=\"nu0\">0.0</span>-S2O2*i, <span class=\"nu0\">0.0</span>+<span class=\"nu0\">0.0</span>*i<span class=\"br0\">)</span>,<br/>                 <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">0.0</span>+<span class=\"nu0\">0.0</span>*i, <span class=\"nu0\">0.0</span>+<span class=\"nu0\">1.0</span>*i<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"hmat:\"</span><span class=\"br0\">)</span>; Examine<span class=\"br0\">(</span>hmat<span class=\"br0\">)</span>; New_Line;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"nmat:\"</span><span class=\"br0\">)</span>; Examine<span class=\"br0\">(</span>nmat<span class=\"br0\">)</span>; New_Line;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"umat:\"</span><span class=\"br0\">)</span>; Examine<span class=\"br0\">(</span>umat<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> ConTrans;</pre>"}, {"lang": "C", "loc": 181, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* Uses C99 specified complex.h, complex datatype has to be defined and operation provided if used on non-C99 compilers */</span><br/>\u00a0<br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;complex.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> rows<span class=\"sy0\">,</span> cols<span class=\"sy0\">;</span><br/>  complex <span class=\"sy0\">**</span>z<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> matrix<span class=\"sy0\">;</span><br/>\u00a0<br/>matrix<br/>transpose <span class=\"br0\">(</span>matrix a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>  matrix b<span class=\"sy0\">;</span><br/>\u00a0<br/>  b.<span class=\"me1\">rows</span> <span class=\"sy0\">=</span> a.<span class=\"me1\">cols</span><span class=\"sy0\">;</span><br/>  b.<span class=\"me1\">cols</span> <span class=\"sy0\">=</span> a.<span class=\"me1\">rows</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  b.<span class=\"me1\">z</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a> <span class=\"br0\">(</span>b.<span class=\"me1\">rows</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>complex <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">rows</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      b.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a> <span class=\"br0\">(</span>b.<span class=\"me1\">cols</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>complex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">cols</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          b.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/conj.html\"><span class=\"kw3\">conj</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">z</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>isHermitian <span class=\"br0\">(</span>matrix a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>  matrix b <span class=\"sy0\">=</span> transpose <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b.<span class=\"me1\">rows</span> <span class=\"sy0\">==</span> a.<span class=\"me1\">rows</span> <span class=\"sy0\">&amp;&amp;</span> b.<span class=\"me1\">cols</span> <span class=\"sy0\">==</span> a.<span class=\"me1\">cols</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">rows</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">cols</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> a.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>matrix<br/>multiply <span class=\"br0\">(</span>matrix a<span class=\"sy0\">,</span> matrix b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  matrix c<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a.<span class=\"me1\">cols</span> <span class=\"sy0\">==</span> b.<span class=\"me1\">rows</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      c.<span class=\"me1\">rows</span> <span class=\"sy0\">=</span> a.<span class=\"me1\">rows</span><span class=\"sy0\">;</span><br/>      c.<span class=\"me1\">cols</span> <span class=\"sy0\">=</span> b.<span class=\"me1\">cols</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      c.<span class=\"me1\">z</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a> <span class=\"br0\">(</span>c.<span class=\"me1\">rows</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>complex <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> c.<span class=\"me1\">rows</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          c.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a> <span class=\"br0\">(</span>c.<span class=\"me1\">cols</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>complex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          c.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span> <span class=\"sy0\">*</span> I<span class=\"sy0\">;</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">cols</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>              c.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> a.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b.<span class=\"me1\">z</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>isNormal <span class=\"br0\">(</span>matrix a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>  matrix a_ah<span class=\"sy0\">,</span> ah_a<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a.<span class=\"me1\">rows</span> <span class=\"sy0\">!=</span> a.<span class=\"me1\">cols</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  a_ah <span class=\"sy0\">=</span> multiply <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> transpose <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  ah_a <span class=\"sy0\">=</span> multiply <span class=\"br0\">(</span>transpose <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">rows</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">cols</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a_ah.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> ah_a.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>isUnitary <span class=\"br0\">(</span>matrix a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  matrix b<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isNormal <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      b <span class=\"sy0\">=</span> multiply <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> transpose<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">rows</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">cols</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j <span class=\"sy0\">&amp;&amp;</span> b.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> j <span class=\"sy0\">&amp;&amp;</span> b.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span><br/>main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  complex z <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> I<span class=\"sy0\">;</span><br/>  matrix a<span class=\"sy0\">,</span> aT<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"Enter rows and columns\u00a0:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"%d%d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>a.<span class=\"me1\">rows</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>a.<span class=\"me1\">cols</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  a.<span class=\"me1\">z</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">rows</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>complex <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"Randomly Generated Complex Matrix A is\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">rows</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      a.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">cols</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>complex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">cols</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          a.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> I<span class=\"sy0\">;</span><br/>          <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>%f +\u00a0%fi\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/creal.html\"><span class=\"kw3\">creal</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cimag.html\"><span class=\"kw3\">cimag</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  aT <span class=\"sy0\">=</span> transpose <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Transpose of Complex Matrix A is\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> aT.<span class=\"me1\">rows</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      aT.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a> <span class=\"br0\">(</span>aT.<span class=\"me1\">cols</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span>complex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> aT.<span class=\"me1\">cols</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          aT.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> I<span class=\"sy0\">;</span><br/>          <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>%f +\u00a0%fi\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/creal.html\"><span class=\"kw3\">creal</span></a> <span class=\"br0\">(</span>aT.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cimag.html\"><span class=\"kw3\">cimag</span></a> <span class=\"br0\">(</span>aT.<span class=\"me1\">z</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Complex Matrix A\u00a0%s hermitian\"</span><span class=\"sy0\">,</span><br/>          isHermitian <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"is\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"is not\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Complex Matrix A\u00a0%s unitary\"</span><span class=\"sy0\">,</span><br/>          isUnitary <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"is\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"is not\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Complex Matrix A\u00a0%s normal\"</span><span class=\"sy0\">,</span><br/>          isNormal <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"is\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"is not\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 32, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> matrix-multiply <span class=\"br0\">(</span>m1 m2<span class=\"br0\">)</span><br/> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">mapcar</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rest column<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'+ <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'* row column<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> m2<span class=\"br0\">)</span><span class=\"br0\">)</span> m1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> identity-p <span class=\"br0\">(</span>m <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>tolerance 1e-6<span class=\"br0\">)</span><span class=\"br0\">)</span><br/> <span class=\"st0\">\"Is m an identity matrix?\"</span><br/>  <span class=\"br0\">(</span>loop for row in m<br/>    for r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> then <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ r<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>loop for col in row<br/>        for c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> then <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ c<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> r c<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span>- col <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> tolerance<span class=\"br0\">)</span> <span class=\"br0\">(</span>return-from identity-p <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> col<span class=\"br0\">)</span> tolerance<span class=\"br0\">)</span> <span class=\"br0\">(</span>return-from identity-p <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  T <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> conjugate-transpose <span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'conjugate r<span class=\"br0\">)</span><span class=\"br0\">)</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> hermitian-p <span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>equalp m <span class=\"br0\">(</span>conjugate-transpose m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> normal-p <span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>m* <span class=\"br0\">(</span>conjugate-transpose m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>equalp <span class=\"br0\">(</span>matrix-multiply m m*<span class=\"br0\">)</span> <span class=\"br0\">(</span>matrix-multiply m* m<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> unitary-p <span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>identity-p <span class=\"br0\">(</span>matrix-multiply m <span class=\"br0\">(</span>conjugate-transpose m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 107, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">complex</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">numeric</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> conjugateTranspose<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">,</span> m.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> nr<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> m<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> nc<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> row<span class=\"br0\">)</span><br/>            r<span class=\"br0\">[</span>nc<span class=\"br0\">]</span><span class=\"br0\">[</span>nr<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c.<span class=\"me1\">conj</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isRectangular<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> M<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> M.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> M<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matMul<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> B<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>A.<span class=\"me1\">isRectangular</span> <span class=\"sy0\">&amp;&amp;</span> B.<span class=\"me1\">isRectangular</span> <span class=\"sy0\">&amp;&amp;</span><br/>           <span class=\"sy0\">!</span>A.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>B.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> B.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>A.<span class=\"me1\">length</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> aux <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span>B.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">B</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> k<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> B<span class=\"br0\">)</span><br/>            aux<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> ai<span class=\"sy0\">;</span> A<span class=\"br0\">)</span><br/>            result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dotProduct<span class=\"br0\">(</span>ai<span class=\"sy0\">,</span> aux<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Check any number of complex matrices for equality within</span><br/><span class=\"co2\">/// some bits of mantissa.</span><br/><span class=\"kw4\">bool</span> areEqual<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Complex<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matrices<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> nBits<span class=\"sy0\">=</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">bool</span> allSame<span class=\"br0\">(</span>U<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> U<span class=\"br0\">[</span><span class=\"br0\">]</span> v<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">==</span> v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> allNearSame<span class=\"br0\">(</span><span class=\"kw2\">in</span> Complex<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> v<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> v0 <span class=\"sy0\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">Complex</span><span class=\"sy0\">!</span>T<span class=\"sy0\">;</span> <span class=\"co1\">// To avoid another cast.</span><br/>        <span class=\"kw1\">return</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> feqrel<span class=\"br0\">(</span>v0.<span class=\"me1\">re</span><span class=\"sy0\">,</span> c.<span class=\"me1\">re</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> nBits <span class=\"sy0\">&amp;&amp;</span><br/>                                   feqrel<span class=\"br0\">(</span>v0.<span class=\"me1\">im</span><span class=\"sy0\">,</span> c.<span class=\"me1\">im</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> nBits<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> x <span class=\"sy0\">=</span> matrices.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>m <span class=\"sy0\">=&gt;</span> m.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>allSame<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> y <span class=\"sy0\">=</span> matrices.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>m <span class=\"sy0\">=&gt;</span> m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>allSame<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> s<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> t<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">y</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>allNearSame<span class=\"br0\">(</span>matrices.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>m <span class=\"sy0\">=&gt;</span> m<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isHermitian<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Complex<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Complex<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ct<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">]</span>.<span class=\"me1\">areEqual</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isNormal<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Complex<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Complex<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ct<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>matMul<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"sy0\">,</span> matMul<span class=\"br0\">(</span>ct<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">areEqual</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> complexIdentitymatrix<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> side<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> side.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> side.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> complex<span class=\"br0\">(</span>r <span class=\"sy0\">==</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isUnitary<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Complex<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Complex<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ct<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> mct <span class=\"sy0\">=</span> matMul<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> ident <span class=\"sy0\">=</span> mct.<span class=\"me1\">length</span>.<span class=\"me1\">complexIdentitymatrix</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>mct<span class=\"sy0\">,</span> matMul<span class=\"br0\">(</span>ct<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"sy0\">,</span> ident<span class=\"br0\">]</span>.<span class=\"me1\">areEqual</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> C <span class=\"sy0\">=</span> complex<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">^^</span> <span class=\"nu16\">0.5</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu16\">3.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                       <span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                      <span class=\"br0\">[</span><span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                       <span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                       <span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                      <span class=\"br0\">[</span><span class=\"br0\">[</span>C<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>    <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>   <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                       <span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span>   C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span>   C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                       <span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> mat<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">enum</span> mFormat <span class=\"sy0\">=</span> <span class=\"st0\">\"[%([%(%1.3f,\u00a0%)],<span class=\"es1\">\\n</span>\u00a0%)]]\"</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"Matrix:<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span> mFormat<span class=\"sy0\">,</span> mat<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> ct <span class=\"sy0\">=</span> conjugateTranspose<span class=\"br0\">(</span>mat<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"st0\">\"Its conjugate transpose:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span>mFormat<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"Hermitian?\u00a0%s.\"</span><span class=\"sy0\">,</span> isHermitian<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"Normal?   \u00a0%s.\"</span><span class=\"sy0\">,</span> isNormal<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"Unitary?  \u00a0%s.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> isUnitary<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Factor", "loc": 14, "block": "<pre class=\"text highlighted_source\">USING: kernel math.functions math.matrices sequences\u00a0;<br/>IN: rosetta.hermitian<br/>\u00a0<br/>: conj-t ( matrix -- conjugate-transpose )<br/>    flip [ [ conjugate ] map ] map\u00a0;<br/>\u00a0<br/>: hermitian-matrix? ( matrix --\u00a0? )<br/>    dup conj-t =\u00a0;<br/>\u00a0<br/>: normal-matrix? ( matrix --\u00a0? )<br/>    dup conj-t [ m. ] [ swap m. ] 2bi =\u00a0;<br/>\u00a0<br/>: unitary-matrix? ( matrix --\u00a0? )<br/>    [ dup conj-t m. ] [ length identity-matrix ] bi =\u00a0;</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none f.f08 -o f</pre>"}, {"lang": "Go", "loc": 112, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/cmplx\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// a type to represent matrices</span><br/><span class=\"kw1\">type</span> matrix <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    ele  <span class=\"sy1\">[]</span><span class=\"kw4\">complex128</span><br/>    cols <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// conjugate transpose, implemented here as a method on the matrix type.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>matrix<span class=\"sy1\">)</span> conjTranspose<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>matrix <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> &amp;matrix<span class=\"sy1\">{</span><span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>ele<span class=\"sy1\">)),</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>ele<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> m<span class=\"sy3\">.</span>cols<span class=\"sy1\">}</span><br/>    rx <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy3\">.</span>ele <span class=\"sy1\">{</span><br/>        r<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>rx<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">cmplx</span><span class=\"sy3\">.</span>Conj<span class=\"sy1\">(</span>e<span class=\"sy1\">)</span><br/>        rx <span class=\"sy2\">+=</span> r<span class=\"sy3\">.</span>cols<br/>        <span class=\"kw1\">if</span> rx &gt;<span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>ele<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            rx <span class=\"sy2\">-=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>ele<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// program to demonstrate capabilites on example matricies</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    show<span class=\"sy1\">(</span><span class=\"st0\">\"h\"</span><span class=\"sy1\">,</span> matrixFromRows<span class=\"sy1\">([][]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1i</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">2</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1i</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}}))</span><br/>\u00a0<br/>    show<span class=\"sy1\">(</span><span class=\"st0\">\"n\"</span><span class=\"sy1\">,</span> matrixFromRows<span class=\"sy1\">([][]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}}))</span><br/>\u00a0<br/>    show<span class=\"sy1\">(</span><span class=\"st0\">\"u\"</span><span class=\"sy1\">,</span> matrixFromRows<span class=\"sy1\">([][]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span>math<span class=\"sy3\">.</span>Sqrt2 <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Sqrt2 <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span>math<span class=\"sy3\">.</span>Sqrt2 <span class=\"sy3\">/</span> <span class=\"sy3\">-</span><span class=\"nu0\">2i</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Sqrt2 <span class=\"sy3\">/</span> <span class=\"nu0\">2i</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1i</span><span class=\"sy1\">}}))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> show<span class=\"sy1\">(</span>name <span class=\"kw4\">string</span><span class=\"sy1\">,</span> m <span class=\"sy3\">*</span>matrix<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    m<span class=\"sy3\">.</span><span class=\"kw3\">print</span><span class=\"sy1\">(</span>name<span class=\"sy1\">)</span><br/>    ct <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>conjTranspose<span class=\"sy1\">()</span><br/>    ct<span class=\"sy3\">.</span><span class=\"kw3\">print</span><span class=\"sy1\">(</span>name <span class=\"sy3\">+</span> <span class=\"st0\">\"_ct\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Hermitian:\"</span><span class=\"sy1\">,</span> m<span class=\"sy3\">.</span>equal<span class=\"sy1\">(</span>ct<span class=\"sy1\">,</span> 1e<span class=\"sy3\">-</span><span class=\"nu0\">14</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    mct <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>mult<span class=\"sy1\">(</span>ct<span class=\"sy1\">)</span><br/>    ctm <span class=\"sy2\">:=</span> ct<span class=\"sy3\">.</span>mult<span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Normal:\"</span><span class=\"sy1\">,</span> mct<span class=\"sy3\">.</span>equal<span class=\"sy1\">(</span>ctm<span class=\"sy1\">,</span> 1e<span class=\"sy3\">-</span><span class=\"nu0\">14</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> eye<span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>cols<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Unitary:\"</span><span class=\"sy1\">,</span> mct<span class=\"sy3\">.</span>equal<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> 1e<span class=\"sy3\">-</span><span class=\"nu0\">14</span><span class=\"sy1\">)</span> &amp;&amp; ctm<span class=\"sy3\">.</span>equal<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> 1e<span class=\"sy3\">-</span><span class=\"nu0\">14</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// two constructors</span><br/><span class=\"kw4\">func</span> matrixFromRows<span class=\"sy1\">(</span>rows <span class=\"sy1\">[][]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>matrix <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> &amp;matrix<span class=\"sy1\">{</span><span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rows<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>rows<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])),</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rows<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])}</span><br/>    <span class=\"kw1\">for</span> rx<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rows <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>rx<span class=\"sy3\">*</span>m<span class=\"sy3\">.</span>cols<span class=\"sy1\">:(</span>rx<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>m<span class=\"sy3\">.</span>cols<span class=\"sy1\">],</span> row<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> eye<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>matrix <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> &amp;matrix<span class=\"sy1\">{</span><span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">,</span> n<span class=\"sy3\">*</span>n<span class=\"sy1\">),</span> n<span class=\"sy1\">}</span><br/>    n<span class=\"sy2\">++</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>ele<span class=\"sy1\">);</span> x <span class=\"sy2\">+=</span> n <span class=\"sy1\">{</span><br/>        r<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// print method outputs matrix to stdout</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m <span class=\"sy3\">*</span>matrix<span class=\"sy1\">)</span> <span class=\"kw3\">print</span><span class=\"sy1\">(</span>heading <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> heading<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> e &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>ele<span class=\"sy1\">);</span> e <span class=\"sy2\">+=</span> m<span class=\"sy3\">.</span>cols <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%6.3f \"</span><span class=\"sy1\">,</span> m<span class=\"sy3\">.</span><span class=\"me1\">ele</span><span class=\"sy1\">[</span>e<span class=\"sy1\">:</span>e<span class=\"sy3\">+</span>m<span class=\"sy3\">.</span><span class=\"me1\">cols</span><span class=\"sy1\">])</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// equal method uses \u03b5 to allow for floating point error.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a <span class=\"sy3\">*</span>matrix<span class=\"sy1\">)</span> equal<span class=\"sy1\">(</span>b <span class=\"sy3\">*</span>matrix<span class=\"sy1\">,</span> \u03b5 <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> x<span class=\"sy1\">,</span> aEle <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a<span class=\"sy3\">.</span>ele <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span><span class=\"kw3\">real</span><span class=\"sy1\">(</span>aEle<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"kw3\">real</span><span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>x<span class=\"sy1\">]))</span> &gt; math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span><span class=\"kw3\">real</span><span class=\"sy1\">(</span>aEle<span class=\"sy1\">))</span><span class=\"sy3\">*</span>\u03b5 <span class=\"sy3\">||</span><br/>            math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span><span class=\"kw3\">imag</span><span class=\"sy1\">(</span>aEle<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"kw3\">imag</span><span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>x<span class=\"sy1\">]))</span> &gt; math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span><span class=\"kw3\">imag</span><span class=\"sy1\">(</span>aEle<span class=\"sy1\">))</span><span class=\"sy3\">*</span>\u03b5 <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// mult method taken from matrix multiply task</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m1 <span class=\"sy3\">*</span>matrix<span class=\"sy1\">)</span> mult<span class=\"sy1\">(</span>m2 <span class=\"sy3\">*</span>matrix<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>m3 <span class=\"sy3\">*</span>matrix<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    m3 <span class=\"sy2\">=</span> &amp;matrix<span class=\"sy1\">{</span><span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">,</span> <span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>m1<span class=\"sy3\">.</span>ele<span class=\"sy1\">)</span><span class=\"sy3\">/</span>m1<span class=\"sy3\">.</span>cols<span class=\"sy1\">)</span><span class=\"sy3\">*</span>m2<span class=\"sy3\">.</span>cols<span class=\"sy1\">),</span> m2<span class=\"sy3\">.</span>cols<span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> m1c0<span class=\"sy1\">,</span> m3x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> m1c0 &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m1<span class=\"sy3\">.</span>ele<span class=\"sy1\">);</span> m1c0 <span class=\"sy2\">+=</span> m1<span class=\"sy3\">.</span>cols <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> m2r0 <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> m2r0 &lt; m2<span class=\"sy3\">.</span>cols<span class=\"sy1\">;</span> m2r0<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> m1x<span class=\"sy1\">,</span> m2x <span class=\"sy2\">:=</span> m1c0<span class=\"sy1\">,</span> m2r0<span class=\"sy1\">;</span> m2x &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m2<span class=\"sy3\">.</span>ele<span class=\"sy1\">);</span> m2x <span class=\"sy2\">+=</span> m2<span class=\"sy3\">.</span>cols <span class=\"sy1\">{</span><br/>                m3<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>m3x<span class=\"sy1\">]</span> <span class=\"sy2\">+=</span> m1<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>m1x<span class=\"sy1\">]</span> <span class=\"sy3\">*</span> m2<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>m2x<span class=\"sy1\">]</span><br/>                m1x<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>            m3x<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> m3<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 45, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>transpose<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Complex<br/>\u00a0<br/><span class=\"kw1\">type</span> Matrix a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\a <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Matrix:\"</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> a<br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Conjugate Transpose:\"</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>conjTranspose a<span class=\"br0\">)</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Hermitian? \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>isHermitianMatrix a<span class=\"br0\">)</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Normal? \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>isNormalMatrix a<span class=\"br0\">)</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Unitary? \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>isUnitaryMatrix a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>       <span class=\"nu0\">2</span>:<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">2</span>:<span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>   <span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\u00a0<br/>          <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\u00a0<br/>          <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>:<span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>:<span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>     <span class=\"nu0\">0</span>   <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">0</span>:<span class=\"sy0\">+</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span>:<span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span>   <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>           <span class=\"nu0\">0</span><span class=\"sy0\">,</span>               <span class=\"nu0\">0</span>:<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Matrix <span class=\"br0\">(</span>Complex <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>isHermitianMatrix<span class=\"sy0\">,</span> isNormalMatrix<span class=\"sy0\">,</span> isUnitaryMatrix <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span class=\"kw4\">RealFloat</span></a> a <span class=\"sy0\">=&gt;</span> Matrix <span class=\"br0\">(</span>Complex a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isHermitianMatrix a <span class=\"sy0\">=</span> a `approxEqualMatrix` conjTranspose a<br/>isNormalMatrix a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a `mmul` conjTranspose a<span class=\"br0\">)</span> `approxEqualMatrix` <span class=\"br0\">(</span>conjTranspose a `mmul` a<span class=\"br0\">)</span><br/>isUnitaryMatrix a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a `mmul` conjTranspose a<span class=\"br0\">)</span> `approxEqualMatrix` ident <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> a<span class=\"br0\">)</span><br/>\u00a0<br/>approxEqualMatrix <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Matrix <span class=\"br0\">(</span>Complex a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Matrix <span class=\"br0\">(</span>Complex a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>approxEqualMatrix a b <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> a <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> b <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:and\"><span class=\"kw3\">and</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> approxEqualComplex <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">where</span> approxEqualComplex <span class=\"br0\">(</span>rx\u00a0:<span class=\"sy0\">+</span> ix<span class=\"br0\">)</span> <span class=\"br0\">(</span>ry\u00a0:<span class=\"sy0\">+</span> iy<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"br0\">(</span>rx <span class=\"sy0\">-</span> ry<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> eps <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"br0\">(</span>ix <span class=\"sy0\">-</span> iy<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> eps<br/>          eps <span class=\"sy0\">=</span> 1e<span class=\"sy0\">-</span>14<br/>\u00a0<br/>mmul <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> Matrix a <span class=\"sy0\">-&gt;</span> Matrix a <span class=\"sy0\">-&gt;</span> Matrix a<br/>mmul a b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> row column<span class=\"br0\">)</span> <span class=\"sy0\">|</span> column <span class=\"sy0\">&lt;-</span> transpose b<span class=\"br0\">]</span> <span class=\"sy0\">|</span> row <span class=\"sy0\">&lt;-</span> a<span class=\"br0\">]</span><br/>\u00a0<br/>ident <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Matrix a<br/>ident size <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a> a b <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a> b a <span class=\"sy0\">|</span> a <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>size<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> b <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>size<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>conjTranspose <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> Matrix <span class=\"br0\">(</span>Complex a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Matrix <span class=\"br0\">(</span>Complex a<span class=\"br0\">)</span><br/>conjTranspose <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> conjugate<span class=\"br0\">)</span> <span class=\"sy0\">.</span> transpose</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   ct =: <a class=\"__cf_email__\" data-cfemail=\"dff49f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>|:                      <span class=\"co1\">NB.  Conjugate transpose (ct A is A_ct)</span></pre>"}, {"lang": "jq", "loc": 6, "block": "<pre class=\"text highlighted_source\"># transpose/0 expects its input to be a rectangular matrix<br/># (an array of equal-length arrays):<br/>def transpose:<br/>  if (.[0] | length) == 0 then []<br/>  else [map(.[0])] + (map(.[1:]) | transpose)<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">A'</pre>"}, {"lang": "Kotlin", "loc": 125, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias C <span class=\"sy0\">=</span> Complex<br/>typealias Vector <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>C<span class=\"sy0\">&gt;</span><br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>Vector<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Complex<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> real<span class=\"sy0\">:</span> Double, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> imag<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    operator fun plus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Complex<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">real</span> + other.<span class=\"me1\">real</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">imag</span> + other.<span class=\"me1\">imag</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun times<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Complex<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">real</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">real</span> - <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">imag</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">imag</span>,<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">real</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">imag</span> + <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">imag</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">real</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun conj<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">real</span>, -<a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">imag</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* tolerable equality allowing for rounding of Doubles */</span><br/>    infix fun teq<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">real</span> - other.<span class=\"me1\">real</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> 1e-14 <span class=\"sy0\">&amp;&amp;</span><br/>        Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">imag</span> - other.<span class=\"me1\">imag</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> 1e-14<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>.3f<span class=\"st0\">\".format(real)} \"</span> + when <span class=\"br0\">{</span><br/>        imag <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.0</span>   -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"+ ${\"</span><span class=\"sy0\">%</span>.3f<span class=\"st0\">\".format(imag)}i\"</span><br/>        imag <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"+ 0.000i\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>         -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"- ${\"</span><span class=\"sy0\">%</span>.3f<span class=\"st0\">\".format(-imag)}i\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">conjTranspose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Matrix<span class=\"br0\">(</span>cols<span class=\"br0\">)</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> Vector<span class=\"br0\">(</span>rows<span class=\"br0\">)</span> <span class=\"br0\">{</span> j -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">conj</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>operator fun Matrix.<span class=\"me1\">times</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows2 <span class=\"sy0\">=</span> other.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols2 <span class=\"sy0\">=</span> other<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    require<span class=\"br0\">(</span>cols1 <span class=\"sy0\">==</span> rows2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>rows1<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>cols2<span class=\"br0\">)</span> <span class=\"br0\">{</span> C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until rows1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until cols2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until rows2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> other<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* tolerable matrix equality using the same concept as for complex numbers */</span><br/>infix fun Matrix.<span class=\"me1\">teq</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span> <span class=\"sy0\">!=</span> other.<span class=\"me1\">size</span> || <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span> <span class=\"sy0\">!=</span> other<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> teq other<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">isHermitian</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> teq <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">conjTranspose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">isNormal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ct <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">conjTranspose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">*</span> ct<span class=\"br0\">)</span> teq <span class=\"br0\">(</span>ct <span class=\"sy0\">*</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">isUnitary</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ct <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">conjTranspose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prod <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">*</span> ct<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ident <span class=\"sy0\">=</span> identityMatrix<span class=\"br0\">(</span>prod.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prod2 <span class=\"sy0\">=</span> ct <span class=\"sy0\">*</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>prod teq ident<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>prod2 teq ident<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until cols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> cols - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\",  \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun identityMatrix<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ident <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> ident<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> C<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> ident<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> matrices <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        arrayOf<span class=\"br0\">(</span><br/>            arrayOf<span class=\"br0\">(</span>C<span class=\"br0\">(</span><span class=\"nu0\">3.0</span>,  <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>C<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, -<span class=\"nu0\">1.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span>,<br/>        arrayOf<span class=\"br0\">(</span><br/>            arrayOf<span class=\"br0\">(</span>C<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>C<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span>,<br/>        arrayOf<span class=\"br0\">(</span><br/>            arrayOf<span class=\"br0\">(</span>C<span class=\"br0\">(</span>x,   <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span>x,   <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>,  -x<span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>,   x<span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, C<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in matrices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Matrix:\"</span><span class=\"br0\">)</span><br/>        m.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mct <span class=\"sy0\">=</span> m.<span class=\"me1\">conjTranspose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Conjugate transpose:\"</span><span class=\"br0\">)</span><br/>        mct.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Hermitian? ${mct.isHermitian()}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Normal?    ${mct.isNormal()}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Unitary?   ${mct.isUnitary()}<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">M:=&lt;&lt;3|2+I&gt;,&lt;2-I|1&gt;&gt;:<br/>\u00a0<br/>with(LinearAlgebra):<br/>IsNormal:=A-&gt;EqualEntries(A^%H.A,A.A^%H):<br/>\u00a0<br/>M^%H;<br/>HermitianTranspose(M);<br/>type(M,'Matrix'(hermitian));<br/>IsNormal(M);<br/>IsUnitary(M);</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 17, "block": "<pre class=\"text highlighted_source\">NormalMatrixQ[a_List?MatrixQ]\u00a0:= Module[{b = <a class=\"__cf_email__\" data-cfemail=\"296a4647435c4e485d4c697d5b48475a59465a4c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@a},a.b === b.a]<br/>UnitaryQ[m_List?MatrixQ]\u00a0:= (<a class=\"__cf_email__\" data-cfemail=\"d093bfbebaa5b7b1a4b59084a2b1bea3a0bfa3b5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@m.m == <a class=\"__cf_email__\" data-cfemail=\"5a133e3f342e332e23173b2e2833221a163f343d2e32\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@m)<br/>\u00a0<br/>m = {{1, 2I, 3}, {3+4I, 5, I}};<br/>m //MatrixForm<br/>-&gt;<br/>(1\t2I\t3<br/>3+4I\t5\tI)<br/>\u00a0<br/>ConjugateTranspose[m] //MatrixForm<br/>-&gt;<br/>(1\t3-4I<br/>-2I\t5<br/>3\t-I)<br/>\u00a0<br/>{<a class=\"__cf_email__\" data-cfemail=\"d59db0a7b8bca1bcb4bb98b4a1a7bcad8495\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#, <a class=\"__cf_email__\" data-cfemail=\"266849544b474a6b4752544f5e7766\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#, <a class=\"__cf_email__\" data-cfemail=\"d88db6b1acb9aaa18998\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#}&amp;@m<br/>-&gt; {False, False, False}</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"text highlighted_source\">conjtranspose(M)=conj(M~)<br/>isHermitian(M)=M==conj(M~)<br/>isnormal(M)=my(H=conj(M~));H*M==M*H<br/>isunitary(M)=M*conj(M~)==1</pre>"}, {"lang": "Perl", "loc": 84, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> English<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">MatrixReal</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@examples</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>example1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> example2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> example3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"br0\">(</span><span class=\"re0\">@examples</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Starting matrix:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> cmat_as_string<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m_ct</span> <span class=\"sy0\">=</span> conjugate_transpose<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Its conjugate transpose:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> cmat_as_string<span class=\"br0\">(</span><span class=\"re0\">$m_ct</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Is Hermitian? \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>cmats_are_equal<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span> <span class=\"re0\">$m_ct</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'TRUE'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'FALSE'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$product</span> <span class=\"sy0\">=</span> <span class=\"re0\">$m_ct</span> <span class=\"sy0\">*</span> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Is normal? \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>cmats_are_equal<span class=\"br0\">(</span><span class=\"re0\">$product</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span> <span class=\"sy0\">*</span> <span class=\"re0\">$m_ct</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'TRUE'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'FALSE'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$I</span> <span class=\"sy0\">=</span> identity<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">dim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Is unitary? \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>cmats_are_equal<span class=\"br0\">(</span><span class=\"re0\">$product</span><span class=\"sy0\">,</span> <span class=\"re0\">$I</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'TRUE'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'FALSE'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> cmats_are_equal <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$m1</span><span class=\"sy0\">,</span> <span class=\"re0\">$m2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ARG</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max_norm</span> <span class=\"sy0\">=</span> 1<span class=\"sy0\">.</span>0e<span class=\"sy0\">-</span>7<span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$m1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$m2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$max_norm</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Math::MatrixReal overloads abs().</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Note that Math::Complex and Math::MatrixReal both overload '~', for</span><br/><span class=\"co1\"># complex conjugates and matrix transpositions respectively.</span><br/><span class=\"kw2\">sub</span> conjugate_transpose <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m_T</span> <span class=\"sy0\">=</span> <span class=\"sy0\">~</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$m_T</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/each.html\"><span class=\"kw3\">each</span></a><span class=\"br0\">(</span><span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"sy0\">~</span> <span class=\"re0\">$ARG</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> cmat_as_string <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n_rows</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">dim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@row_strings</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">}</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"sy0\">,</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">row</span><span class=\"br0\">(</span><span class=\"re0\">$ARG</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">as_list</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>                          <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n_rows</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@row_strings</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> identity <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Math<span class=\"sy0\">::</span><span class=\"me2\">MatrixReal</span><span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">one</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> example1 <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Math<span class=\"sy0\">::</span><span class=\"me2\">MatrixReal</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> example2 <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Math<span class=\"sy0\">::</span><span class=\"me2\">MatrixReal</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> example3 <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Math<span class=\"sy0\">::</span><span class=\"me2\">MatrixReal</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0.70710677</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0.70710677</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">0.70710677</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.70710677</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">assign</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 52, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">for</span> <span class=\"br0\">[</span> <span class=\"co1\"># Test Matrices</span><br/>       <span class=\"br0\">[</span>   <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"kw3\">i</span><span class=\"sy0\">,</span> 2i<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"kw3\">i</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span>2i<span class=\"sy0\">,</span>  <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">0.707</span> <span class=\"sy0\">,</span>    <span class=\"nu0\">0.707</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">[</span>0<span class=\"sy0\">.</span>707i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">-</span>0<span class=\"sy0\">.</span>707i<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">0</span>     <span class=\"sy0\">,</span>        <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"kw3\">i</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/>    <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@m</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Matrix:\"</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@m</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;say</span><span class=\"sy0\">-</span>it<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@t</span> <span class=\"sy0\">=</span> <span class=\"re0\">@m</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">conj</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;mat</span><span class=\"sy0\">-</span><span class=\"kw3\">trans</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Transpose:\"</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@t</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;say</span><span class=\"sy0\">-</span>it<span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"Is\u00a0Hermitian?<span class=\"es0\">\\t</span>{is-Hermitian(@m, @t)}\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"Is Normal?<span class=\"es0\">\\t</span>{is-Normal(@m, @t)}\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"Is Unitary?<span class=\"es0\">\\t</span>{is-Unitary(@m, @t)}\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is<span class=\"sy0\">-</span>Hermitian <span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"sy0\">,</span> <span class=\"re0\">@t</span><span class=\"sy0\">,</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    so <span class=\"re0\">@m</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Complex</span> eqv <span class=\"re0\">@t</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Complex</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is<span class=\"sy0\">-</span>Normal <span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"sy0\">,</span> <span class=\"re0\">@t</span><span class=\"sy0\">,</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    so mat<span class=\"sy0\">-</span>mult<span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"sy0\">,</span> <span class=\"re0\">@t</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Complex</span> eqv mat<span class=\"sy0\">-</span>mult<span class=\"br0\">(</span><span class=\"re0\">@t</span><span class=\"sy0\">,</span> <span class=\"re0\">@m</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Complex</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is<span class=\"sy0\">-</span>Unitary <span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"sy0\">,</span> <span class=\"re0\">@t</span><span class=\"sy0\">,</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    so mat<span class=\"sy0\">-</span>mult<span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"sy0\">,</span> <span class=\"re0\">@t</span><span class=\"sy0\">,</span> 1e<span class=\"sy0\">-</span>3<span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Complex</span> eqv mat<span class=\"sy0\">-</span>ident<span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"re0\">@m</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Complex</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mat<span class=\"sy0\">-</span><span class=\"kw3\">trans</span> <span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"sy0\">*;</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mat<span class=\"sy0\">-</span>ident <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> flat <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$_</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mat<span class=\"sy0\">-</span>mult <span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">@b</span><span class=\"sy0\">,</span> \\\u03b5 <span class=\"sy0\">=</span> 1e<span class=\"sy0\">-</span>15<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@p</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@a</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@p</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@b</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@p</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"sy0\">.=</span><span class=\"kw3\">round</span><span class=\"br0\">(</span>\u03b5<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># avoid floating point math errors</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">@p</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> say<span class=\"sy0\">-</span>it <span class=\"br0\">(</span><span class=\"re0\">@array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%9s\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">@array</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 120, "block": "<pre class=\"text highlighted_source\">enum REAL, IMAG<br/>\u00a0<br/>type complex(sequence s)<br/>    return length(s)=2 and atom(s[REAL]) and atom(s[IMAG])<br/>end type<br/>\u00a0<br/>function c_add(complex a, complex b)<br/>    return sq_add(a,b)<br/>end function<br/>\u00a0<br/>function c_mul(complex a, complex b)<br/>    return {a[REAL] * b[REAL] - a[IMAG] * b[IMAG],<br/>            a[REAL] * b[IMAG] + a[IMAG] * b[REAL]}<br/>end function<br/>\u00a0<br/>function c_conj(complex a)<br/>    return {a[REAL],-a[IMAG]}<br/>end function<br/>\u00a0<br/>function c_print(complex a)<br/>    if a[IMAG]=0 then return sprintf(\"%g\",a[REAL]) end if<br/>    return sprintf(\"%g%+gi\",a)<br/>end function<br/>\u00a0<br/>procedure m_print(sequence a)<br/>    integer l = length(a)<br/>    for i=1 to l do<br/>        for j=1 to l do<br/>            a[i][j] = c_print(a[i][j])<br/>        end for<br/>        a[i] = \"[\"&amp;join(a[i],\",\")&amp;\"]\"<br/>    end for<br/>    puts(1,join(a,\"\\n\")&amp;\"\\n\")<br/>end procedure<br/>\u00a0<br/>\u00a0<br/>function conjugate_transpose(sequence a)<br/>    sequence res = a<br/>    integer l = length(a)<br/>    for i=1 to l do<br/>        for j=1 to l do<br/>          res[i][j] = c_conj(a[j][i])<br/>        end for<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function m_unitary(sequence act)<br/>-- note: a was normal and act = a*ct already<br/>    integer l = length(act)<br/>    for i=1 to l do<br/>        for j=1 to l do<br/>            atom {re,im} = act[i,j]<br/>            -- round to nearest billionth<br/>            -- (powers of 2 help the FPU out)<br/>            re = round(re,1024*1024*1024)<br/>            im = round(im,1024*1024*1024)<br/>            if im!=0<br/>            or (i=j and re!=1)<br/>            or (i!=j and re!=0) then<br/>                return 0<br/>            end if<br/>        end for<br/>    end for<br/>    return 1<br/>end function<br/>\u00a0<br/>function m_mul(sequence a, sequence b)<br/>    sequence res = sq_mul(a,0)<br/>    integer l = length(a)<br/>    for i=1 to l do<br/>        for j=1 to l do<br/>            for k=1 to l do<br/>                res[i][j] = c_add(res[i][j],c_mul(a[i][k],b[k][j]))<br/>            end for<br/>        end for<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>procedure test(sequence a)<br/>sequence ct = conjugate_transpose(a)<br/>    printf(1,\"Original matrix:\\n\")<br/>    m_print(a)<br/>    printf(1,\"Conjugate transpose:\\n\")<br/>    m_print(ct)<br/>    -- note: rounding similar to that in m_unitary may be rqd (in a similar <br/>    --       loop in a new m_equal function) on these two equality tests, <br/>    --       but as it is, all tests pass with the builtin = operator.<br/>    printf(1,\"Hermitian?:\u00a0%s\\n\",{iff(a=ct?\"TRUE\":\"FALSE\")}) -- (this one)<br/>    sequence act = m_mul(a,ct), cta = m_mul(ct,a)<br/>    bool normal = act=cta                                   -- (&amp;this one)<br/>    printf(1,\"Normal?:\u00a0%s\\n\",{iff(normal?\"TRUE\":\"FALSE\")})<br/>    printf(1,\"Unitary?:\u00a0%s\\n\\n\",{iff(normal and m_unitary(act)?\"TRUE\":\"FALSE\")})<br/>end procedure<br/>\u00a0<br/>constant x = sqrt(2)/2<br/>\u00a0<br/>constant tests = {{{{3, 0},{2,1}},<br/>                   {{2,-1},{1,0}}},<br/>\u00a0<br/>                  {{{ 1, 0},{ 1, 1},{ 0, 2}},<br/>                   {{ 1,-1},{ 5, 0},{-3, 0}},<br/>                   {{ 0,-2},{-3, 0},{ 0, 0}}},<br/>\u00a0<br/>                  {{{0.5,+0.5},{0.5,-0.5}},<br/>                   {{0.5,-0.5},{0.5,+0.5}}},<br/>\u00a0<br/>                  {{{ 1, 0},{ 1, 0},{ 0, 0}},<br/>                   {{ 0, 0},{ 1, 0},{ 1, 0}},<br/>                   {{ 1, 0},{ 0, 0},{ 1, 0}}},<br/>\u00a0<br/>                  {{{x, 0},{x, 0},{0, 0}},<br/>                   {{0,-x},{0, x},{0, 0}},<br/>                   {{0, 0},{0, 0},{0, 1}}},<br/>\u00a0<br/>                  {{{2,7},{9,-5}},<br/>                   {{3,4},{8,-6}}}}<br/>\u00a0<br/>for i=1 to length(tests) do test(tests[i]) end for</pre>"}, {"lang": "PL/I", "loc": 51, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>test: procedure options (main); /* 1 October 2012 */<br/>   declare n fixed binary;<br/>\u00a0<br/>   put ('Conjugate a complex square matrix.');<br/>   put skip list ('What is the order of the matrix?:');<br/>   get (n);<br/>   begin;<br/>      declare (M, MH, MM, MM_MMH, MM_MHM, IDENTITY)(n,n) fixed complex;<br/>      declare i fixed binary;<br/>\u00a0<br/>      IDENTITY = 0; do i = 1 to n; IDENTITY(I,I) = 1; end;<br/>      put skip list ('Please type the matrix:');<br/>      get list (M);<br/>      do i = 1 to n;<br/>         put skip list (M(i,*));<br/>      end;<br/>      do i = 1 to n;<br/>         MH(i,*) = conjg(M(*,i));<br/>      end;<br/>      put skip list ('The conjugate transpose is:');<br/>      do i = 1 to n;<br/>         put skip list (MH(i,*));<br/>      end;<br/>      if all(M=MH) then<br/>         put skip list ('Matrix is Hermitian');<br/>      call MMULT(M, MH, MM_MMH);<br/>      call MMULT(MH, M, MM_MHM);<br/>\u00a0<br/>      if all(MM_MMH = MM_MHM) then<br/>         put skip list ('Matrix is Normal');<br/>\u00a0<br/>      if all(ABS(MM_MMH - IDENTITY) &lt; 0.0001) then<br/>         put skip list ('Matrix is unitary');<br/>      if all(ABS(MM_MHM - IDENTITY) &lt; 0.0001) then<br/>         put skip list ('Matrix is unitary');<br/>   end;<br/>\u00a0<br/>MMULT: procedure (M, MH, MM);<br/>   declare (M, MH, MM)(*,*) fixed complex;<br/>   declare (i, j, n) fixed binary;<br/>\u00a0<br/>   n = hbound(M,1);<br/>   do i = 1 to n;<br/>      do j = 1 to n;<br/>         MM(i,j) = sum(M(i,*) * MH(*,j) );<br/>      end;<br/>   end;<br/>end MMULT;<br/>end test;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 78, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> conjugate<span class=\"sy0\">-</span>transpose<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>            <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.count<span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw1\">measure-object</span> <span class=\"kw5\">-Minimum</span><span class=\"br0\">)</span>.Minimum <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$arr</span> <span class=\"sy0\"><a class=\"__cf_email__\" data-cfemail=\"d9e499\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::Conjugate<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span>    <br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$row</span> <span class=\"kw3\">in</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::Conjugate<span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$row</span> <span class=\"kw3\">in</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::Conjugate<span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$arr</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> multarrays<span class=\"sy0\">-</span>complex<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::new<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>    <br/>            <span class=\"re0\">$c</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>                <span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span><span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::new<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::Add<span class=\"br0\">(</span><span class=\"re0\">$sum</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::Multiply<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>                <span class=\"re0\">$sum</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$c</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> identity<span class=\"sy0\">-</span>complex<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$array</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::new<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><br/>            <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::new<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>  <br/>        <span class=\"re0\">$array</span> <br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> are<span class=\"kw4\">-eq</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw4\">-not</span> <span class=\"br0\">(</span><span class=\"kw1\">Compare-Object</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span> <span class=\"kw5\">-SyncWindow</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> show<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$a</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span> <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"st0\">\"$($a[$_])\"</span><span class=\"br0\">}</span><span class=\"kw3\">else</span><span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> complex<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>System.Numerics.complex<span class=\"br0\">]</span>::new<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$id2</span> <span class=\"sy0\">=</span> identity<span class=\"sy0\">-</span>complex <span class=\"nu0\">2</span><br/><span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">(</span>complex <span class=\"nu0\">2</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>complex <span class=\"nu0\">9</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,@</span><span class=\"br0\">(</span><span class=\"br0\">(</span>complex <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>complex <span class=\"nu0\">8</span> <span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"re0\">$hm</span> <span class=\"sy0\">=</span> conjugate<span class=\"sy0\">-</span>transpose <span class=\"re0\">$m</span><br/><span class=\"re0\">$mhm</span> <span class=\"sy0\">=</span> multarrays<span class=\"sy0\">-</span>complex <span class=\"re0\">$m</span> <span class=\"re0\">$hm</span><br/><span class=\"re0\">$hmm</span> <span class=\"sy0\">=</span> multarrays<span class=\"sy0\">-</span>complex <span class=\"re0\">$hm</span> <span class=\"re0\">$m</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>m =\"</span><br/>show <span class=\"re0\">$m</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>hm = conjugate-transpose <span class=\"es0\">`$</span>m =\"</span><br/>show <span class=\"re0\">$hm</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>m * <span class=\"es0\">`$</span>hm =\"</span><br/>show <span class=\"re0\">$mhm</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"<span class=\"es0\">`$</span>hm * <span class=\"es0\">`$</span>m =\"</span><br/>show <span class=\"re0\">$hmm</span><br/><span class=\"st0\">\"\"</span><br/><span class=\"st0\">\"Hermitian? <span class=\"es0\">`$</span>m = $(are-eq $m $hm)\"</span><br/><span class=\"st0\">\"Normal? <span class=\"es0\">`$</span>m = $(are-eq $mhm $hmm)\"</span><br/><span class=\"st0\">\"Unitary? <span class=\"es0\">`$</span>m = $((are-eq $id2 $hmm) -and (are-eq $id2 $mhm))\"</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 72, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> conjugate_transpose<span class=\"br0\">(</span>m<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">tuple</span><span class=\"br0\">(</span><span class=\"kw2\">tuple</span><span class=\"br0\">(</span>n.<span class=\"me1\">conjugate</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mmul<span class=\"br0\">(</span> ma<span class=\"sy0\">,</span> mb<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">tuple</span><span class=\"br0\">(</span><span class=\"kw2\">tuple</span><span class=\"br0\">(</span><span class=\"kw2\">sum</span><span class=\"br0\">(</span> ea*eb <span class=\"kw1\">for</span> ea<span class=\"sy0\">,</span>eb <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*mb<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> ma<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mi<span class=\"br0\">(</span>size<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Complex Identity matrix'</span><br/>    sz <span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>    m <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> + 0j <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> sz<span class=\"br0\">]</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> sz<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span>:<br/>        m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + 0j<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">tuple</span><span class=\"br0\">(</span><span class=\"kw2\">tuple</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> m<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> __allsame<span class=\"br0\">(</span>vector<span class=\"br0\">)</span>:<br/>    first<span class=\"sy0\">,</span> rest <span class=\"sy0\">=</span> vector<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> vector<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> first <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> rest<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> __allnearsame<span class=\"br0\">(</span>vector<span class=\"sy0\">,</span> eps<span class=\"sy0\">=</span><span class=\"nu0\">1e-14</span><span class=\"br0\">)</span>:<br/>    first<span class=\"sy0\">,</span> rest <span class=\"sy0\">=</span> vector<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> vector<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>first.<span class=\"me1\">real</span> - i.<span class=\"me1\">real</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> eps <span class=\"kw1\">and</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>first.<span class=\"me1\">imag</span> - i.<span class=\"me1\">imag</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> eps<br/>               <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> rest<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> isequal<span class=\"br0\">(</span>matrices<span class=\"sy0\">,</span> eps<span class=\"sy0\">=</span><span class=\"nu0\">1e-14</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Check any number of matrices for equality within eps'</span><br/>    x <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"kw1\">for</span> m <span class=\"kw1\">in</span> matrices<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> __allsame<span class=\"br0\">(</span>x<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    y <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> m <span class=\"kw1\">in</span> matrices<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> __allsame<span class=\"br0\">(</span>y<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> t <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> __allnearsame<span class=\"br0\">(</span><span class=\"br0\">[</span>m<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"kw1\">for</span> m <span class=\"kw1\">in</span> matrices<span class=\"br0\">]</span><span class=\"sy0\">,</span> eps<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> ishermitian<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> isequal<span class=\"br0\">(</span><span class=\"br0\">[</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> isnormal<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> isequal<span class=\"br0\">(</span><span class=\"br0\">[</span>mmul<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"sy0\">,</span> mmul<span class=\"br0\">(</span>ct<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> isunitary<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span>:<br/>    mct<span class=\"sy0\">,</span> ctm <span class=\"sy0\">=</span> mmul<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"sy0\">,</span> mmul<span class=\"br0\">(</span>ct<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/>    mctx<span class=\"sy0\">,</span> mcty<span class=\"sy0\">,</span> cmx<span class=\"sy0\">,</span> ctmy <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>mct<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>mct<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>ctm<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>ctm<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    ident <span class=\"sy0\">=</span> mi<span class=\"br0\">(</span>mctx<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> isequal<span class=\"br0\">(</span><span class=\"br0\">[</span>mct<span class=\"sy0\">,</span> ctm<span class=\"sy0\">,</span> ident<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> printm<span class=\"br0\">(</span>comment<span class=\"sy0\">,</span> m<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>comment<span class=\"br0\">)</span><br/>    fields <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'%g%+gj'</span>\u00a0% <span class=\"br0\">(</span>f.<span class=\"me1\">real</span><span class=\"sy0\">,</span> f.<span class=\"me1\">imag</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> row<span class=\"br0\">]</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> m<span class=\"br0\">]</span><br/>    width <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> fields<span class=\"br0\">)</span><br/>    lines <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%*s'</span>\u00a0% <span class=\"br0\">(</span>width<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> fields<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> matrix <span class=\"kw1\">in</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">3.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">2.000</span>+1.000j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">2.000</span>-1.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">1.000</span>+0.000j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">1.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">1.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">0.000</span>+0.000j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">0.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">1.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">1.000</span>+0.000j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">1.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">0.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">1.000</span>+0.000j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span>**<span class=\"nu0\">0.5</span>/<span class=\"nu0\">2</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">2</span>**<span class=\"nu0\">0.5</span>/<span class=\"nu0\">2</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">0.000</span>+0.000j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">0.000</span>+<span class=\"nu0\">2</span>**<span class=\"nu0\">0.5</span>/2j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">0.000</span>-<span class=\"nu0\">2</span>**<span class=\"nu0\">0.5</span>/2j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">0.000</span>+0.000j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">0.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">0.000</span>+0.000j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>+<span class=\"nu0\">0.000</span>+1.000j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>:<br/>        printm<span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Matrix:'</span><span class=\"sy0\">,</span> matrix<span class=\"br0\">)</span><br/>        ct <span class=\"sy0\">=</span> conjugate_transpose<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>        printm<span class=\"br0\">(</span><span class=\"st0\">'Its conjugate transpose:'</span><span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Hermitian?\u00a0%s.'</span>\u00a0% ishermitian<span class=\"br0\">(</span>matrix<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Normal?   \u00a0%s.'</span>\u00a0% isnormal<span class=\"br0\">(</span>matrix<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Unitary?  \u00a0%s.'</span>\u00a0% isunitary<span class=\"br0\">(</span>matrix<span class=\"sy0\">,</span> ct<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(define H matrix-hermitian)<br/>\u00a0<br/>(define (normal? M)<br/>  (define MH (H M))<br/>  (equal? (matrix* MH M) <br/>          (matrix* M MH)))<br/>\u00a0<br/>(define (unitary? M)<br/>  (define MH (H M))<br/>  (and (matrix-identity? (matrix* MH M))<br/>       (matrix-identity? (matrix* M MH))))<br/>\u00a0<br/>(define (hermitian? M)<br/>  (equal? (H M) M))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 83, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program performs a  conjugate transpose  on a  complex  square matrix.           */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N elements;  <span class=\"kw1\">if</span> N==<span class=\"st0\">''</span><span class=\"sy0\">|</span>N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">3</span> <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>k=<span class=\"nu0\">0</span>;                <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N<br/>                      <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  k=k+<span class=\"nu0\">1</span>;  M<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>elements,k<span class=\"br0\">)</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*c*/</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/><span class=\"kw1\">call</span> showCmat <span class=\"st0\">'M'</span>        ,N                      <span class=\"coMULTI\">/*display a nicely formatted matrix.   */</span><br/>identity<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;                       <span class=\"kw1\">do</span> d=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;   identity<span class=\"sy0\">.</span>d<span class=\"sy0\">.</span>d=<span class=\"nu0\">1</span>;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*d*/</span><br/><span class=\"kw1\">call</span> conjCmat <span class=\"st0\">'MH'</span>, <span class=\"st0\">\"M\"</span>  ,N                      <span class=\"coMULTI\">/*conjugate the  M  matrix  \u2500\u2500\u2500\u25ba  MH   */</span><br/><span class=\"kw1\">call</span> showCmat <span class=\"st0\">'MH'</span>       ,N                      <span class=\"coMULTI\">/*display a nicely formatted matrix.   */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'M is Hermitian:  '</span>    <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'no yes'</span>,isHermitian<span class=\"br0\">(</span><span class=\"st0\">'M'</span>,<span class=\"st0\">\"MH\"</span>,N<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> multCmat <span class=\"st0\">'M'</span>,  <span class=\"st0\">'MH'</span>, <span class=\"st0\">'MMH'</span>,  N              <span class=\"coMULTI\">/*multiple the two matrices together.  */</span><br/><span class=\"kw1\">call</span> multCmat <span class=\"st0\">'MH'</span>, <span class=\"st0\">'M'</span>,  <span class=\"st0\">'MHM'</span>,  N              <span class=\"coMULTI\">/*    \"     \"   \"      \"        \"      */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  M is Normal:   '</span>           <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'no yes'</span>, isHermitian<span class=\"br0\">(</span><span class=\"st0\">'MMH'</span>, <span class=\"st0\">\"MHM\"</span>, N<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  M is Unary:    '</span>           <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'no yes'</span>,     isUnary<span class=\"br0\">(</span><span class=\"st0\">'M'</span>,   N<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'MMH is Unary:    '</span>           <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'no yes'</span>,     isUnary<span class=\"br0\">(</span><span class=\"st0\">'MMH'</span>, N<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'MHM is Unary:    '</span>           <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'no yes'</span>,     isUnary<span class=\"br0\">(</span><span class=\"st0\">'MHM'</span>, N<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cP:       <span class=\"kw1\">procedure</span>; <span class=\"kw1\">arg</span> <span class=\"st0\">','</span> c;        <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>c, , <span class=\"st0\">'IJ'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>rP:       <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> r <span class=\"st0\">','</span>;  <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span> r <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*\u25c4\u2500\u2500maybe return a 0 \u2191    */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>conjCmat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> matX,matY,rows <span class=\"nu0\">1</span> cols;          <span class=\"kw1\">call</span> normCmat matY, rows<br/>                      <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;   _=<br/>                        <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols;   v=<span class=\"kw2\">value</span><span class=\"br0\">(</span>matY<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span><br/>                        rP=rP<span class=\"br0\">(</span>v<span class=\"br0\">)</span>;    cP=-cP<span class=\"br0\">(</span>v<span class=\"br0\">)</span>;     <span class=\"kw1\">call</span> <span class=\"kw2\">value</span>  matX<span class=\"st0\">'.'</span>c<span class=\"st0\">\".\"</span>r, rP<span class=\"st0\">','</span>cP<br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                      <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isHermitian: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> matX,matY,rows <span class=\"nu0\">1</span> cols;       <span class=\"kw1\">call</span> normCmat matX, rows<br/>                                                    <span class=\"kw1\">call</span> normCmat matY, rows<br/>                      <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;  _=<br/>                        <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols<br/>                        <span class=\"kw1\">if</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>matX<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span> <span class=\"sy0\">\\</span>= <span class=\"kw2\">value</span><span class=\"br0\">(</span>matY<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                      <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>             <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isUnary: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> matX,rows <span class=\"nu0\">1</span> cols<br/>                      <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;    _=<br/>                        <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols;    z=<span class=\"kw2\">value</span><span class=\"br0\">(</span>matX<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span>;    rP=rP<span class=\"br0\">(</span>z<span class=\"br0\">)</span>;  cP=cP<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>rP<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> + cP<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span>r==c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= <span class=\"sy0\">.</span>0001  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                      <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>multCmat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> matA,matB,matT,rows <span class=\"nu0\">1</span> cols;            <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> matT<span class=\"st0\">'.'</span>, <span class=\"nu0\">0</span><br/>                      <span class=\"kw1\">do</span>     r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;  _=<br/>                        <span class=\"kw1\">do</span>   c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols<br/>                          <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols;  T=<span class=\"kw2\">value</span><span class=\"br0\">(</span>matT<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span>;   Tr=rP<span class=\"br0\">(</span>T<span class=\"br0\">)</span>;   Tc=cP<span class=\"br0\">(</span>T<span class=\"br0\">)</span><br/>                                             A=<span class=\"kw2\">value</span><span class=\"br0\">(</span>matA<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>k<span class=\"br0\">)</span>;   Ar=rP<span class=\"br0\">(</span>A<span class=\"br0\">)</span>;   Ac=cP<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>                                             B=<span class=\"kw2\">value</span><span class=\"br0\">(</span>matB<span class=\"st0\">'.'</span>k<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span>;   Br=rP<span class=\"br0\">(</span>B<span class=\"br0\">)</span>;   Bc=cP<span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/>                          Pr=Ar<span class=\"sy0\">*</span>Br - Ac<span class=\"sy0\">*</span>Bc;  Pc=Ac<span class=\"sy0\">*</span>Br + Ar<span class=\"sy0\">*</span>Bc;        Tr=Tr+Pr;   Tc=Tc+Pc<br/>                          <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> matT<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c,Tr<span class=\"st0\">','</span>Tc<br/>                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                        <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*c*/</span><br/>                      <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*r*/</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>normCmat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> matN,rows <span class=\"nu0\">1</span> cols<br/>                      <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> rows;  _=<br/>                        <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> cols;  v=<span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw2\">value</span><span class=\"br0\">(</span>matN<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span>, , <span class=\"st0\">\"IiJj\"</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">parse</span> <span class=\"kw2\">upper</span>  <span class=\"kw2\">var</span>  v  real  <span class=\"st0\">','</span>  cplx<br/>                        <span class=\"kw1\">if</span> real<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> real=real<span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/>                        <span class=\"kw1\">if</span> cplx<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> cplx=cplx<span class=\"sy0\">/</span><span class=\"nu0\">1</span>;       <span class=\"kw1\">if</span> cplx=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> cplx=<br/>                        <span class=\"kw1\">if</span> cplx<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> cplx=cplx<span class=\"st0\">\"j\"</span><br/>                        <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> matN<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c, <span class=\"kw6\">strip</span><span class=\"br0\">(</span>real<span class=\"st0\">','</span>cplx, <span class=\"st0\">\"T\"</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                      <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showCmat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> matX,rows,cols;    <span class=\"kw1\">if</span> cols==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> cols=rows;          @@=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'matrix'</span> matX, <span class=\"nu0\">79</span>, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>;      <span class=\"kw1\">call</span> normCmat matX, rows, cols<br/>                      <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> rows;  _=<br/>                        <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> cols;  _=_ @@ <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw2\">value</span><span class=\"br0\">(</span>matX<span class=\"st0\">'.'</span>r<span class=\"st0\">\".\"</span>c<span class=\"br0\">)</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*c*/</span><br/>                      <span class=\"kw1\">say</span> _<br/>                      <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>          <span class=\"kw1\">say</span>; <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;   d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>;   h=d+<span class=\"nu0\">6</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;  g=g <span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>      m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>;  <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;     m<span class=\"sy0\">.</span>j=h;              h=h%2+<span class=\"nu0\">1</span>;       <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>             <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k; g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span>; <span class=\"kw1\">return</span> g</pre>"}, {"lang": "Ruby", "loc": 25, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'matrix'</span><br/>\u00a0<br/><span class=\"co1\"># Start with some matrix.</span><br/>i = <span class=\"kw4\">Complex</span>::I<br/>matrix = <span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"br0\">[</span>i, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>                <span class=\"br0\">[</span><span class=\"nu0\">0</span>, i, <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>                <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Find the conjugate transpose.</span><br/><span class=\"co1\">#   Matrix#conjugate appeared in Ruby 1.9.2.</span><br/>conjt = matrix.<span class=\"me1\">conj</span>.<span class=\"me1\">t</span>           <span class=\"co1\"># aliases for matrix.conjugate.tranpose</span><br/><span class=\"kw3\">print</span> <span class=\"st0\">'conjugate tranpose: '</span>; <span class=\"kw3\">puts</span> conjt<br/>\u00a0<br/><span class=\"kw1\">if</span> matrix.<span class=\"me1\">square</span>?<br/>  <span class=\"co1\"># These predicates appeared in Ruby 1.9.3.</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">'Hermitian? '</span>; <span class=\"kw3\">puts</span> matrix.<span class=\"me1\">hermitian</span>?<br/>  <span class=\"kw3\">print</span> <span class=\"st0\">'   normal? '</span>; <span class=\"kw3\">puts</span> matrix.<span class=\"me1\">normal</span>?<br/>  <span class=\"kw3\">print</span> <span class=\"st0\">'  unitary? '</span>; <span class=\"kw3\">puts</span> matrix.<span class=\"me1\">unitary</span>?<br/><span class=\"kw1\">else</span><br/>  <span class=\"co1\"># Matrix is not square. These predicates would</span><br/>  <span class=\"co1\"># raise ExceptionForMatrix::ErrDimensionMismatch.</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">'Hermitian? false'</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">'   normal? false'</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">'  unitary? false'</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 81, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>extern crate num; // crate for complex numbers<br/>\u00a0<br/>use num::complex::Complex;<br/>use std::ops::Mul;<br/>use std::fmt;<br/>\u00a0<br/>\u00a0<br/>#[derive(Debug, PartialEq)]<br/>struct Matrix&lt;f32&gt; {<br/>    grid: [[Complex&lt;f32&gt;; 2]; 2], // used to represent matrix<br/>}<br/>\u00a0<br/>\u00a0<br/>impl Matrix&lt;f32&gt; { // implements a method call for calculating the conjugate transpose<br/>    fn conjugate_transpose(&amp;self) -&gt; Matrix&lt;f32&gt; {<br/>        Matrix {grid: [[self.grid[0][0].conj(), self.grid[1][0].conj()],<br/>        [self.grid[0][1].conj(), self.grid[1][1].conj()]]}<br/>    }<br/>}<br/>\u00a0<br/>impl Mul for Matrix&lt;f32&gt; { // implements '*' (multiplication) for the matrix<br/>    type Output = Matrix&lt;f32&gt;;<br/>\u00a0<br/>    fn mul(self, other: Matrix&lt;f32&gt;) -&gt; Matrix&lt;f32&gt; {<br/>        Matrix {grid: [[self.grid[0][0]*other.grid[0][0] + self.grid[0][1]*other.grid[1][0],<br/>            self.grid[0][0]*other.grid[0][1] + self.grid[0][1]*other.grid[1][1]],<br/>            [self.grid[1][0]*other.grid[0][0] + self.grid[1][1]*other.grid[1][0],<br/>            self.grid[1][0]*other.grid[1][0] + self.grid[1][1]*other.grid[1][1]]]}<br/>    }<br/>}<br/>\u00a0<br/>impl Copy for Matrix&lt;f32&gt; {} // implemented to prevent 'moved value' errors in if statements below<br/>impl Clone for Matrix&lt;f32&gt; {<br/>    fn clone(&amp;self) -&gt; Matrix&lt;f32&gt; {<br/>        *self<br/>    }<br/>}<br/>\u00a0<br/>impl fmt::Display for Matrix&lt;f32&gt; { // implemented to make output nicer<br/>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {<br/>        write!(f, \"({}, {})\\n({}, {})\", self.grid[0][0], self.grid[0][1], self.grid[1][0], self.grid[1][1])<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let a = Matrix {grid: [[Complex::new(3.0, 0.0), Complex::new(2.0, 1.0)],<br/>        [Complex::new(2.0, -1.0), Complex::new(1.0, 0.0)]]};<br/>\u00a0<br/>    let b = Matrix {grid: [[Complex::new(0.5, 0.5), Complex::new(0.5, -0.5)],<br/>        [Complex::new(0.5, -0.5), Complex::new(0.5, 0.5)]]};<br/>\u00a0<br/>    test_type(a);<br/>    test_type(b);<br/>}<br/>\u00a0<br/>fn test_type(mat: Matrix&lt;f32&gt;) {<br/>    let identity = Matrix {grid: [[Complex::new(1.0, 0.0), Complex::new(0.0, 0.0)],<br/>        [Complex::new(0.0, 0.0), Complex::new(1.0, 0.0)]]};<br/>    let mat_conj = mat.conjugate_transpose();<br/>\u00a0<br/>    println!(\"Matrix: \\n{}\\nConjugate transpose: \\n{}\", mat, mat_conj);<br/>\u00a0<br/>    if mat == mat_conj {<br/>        println!(\"Hermitian?: TRUE\");<br/>    } else {<br/>        println!(\"Hermitian?: FALSE\");<br/>    }<br/>\u00a0<br/>    if mat*mat_conj == mat_conj*mat {<br/>        println!(\"Normal?: TRUE\");<br/>    } else {<br/>        println!(\"Normal?: FALSE\");<br/>    }<br/>\u00a0<br/>    if mat*mat_conj == identity {<br/>        println!(\"Unitary?: TRUE\");<br/>    } else {<br/>        println!(\"Unitary?: FALSE\");<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 77, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ConjugateTranspose <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Complex<span class=\"br0\">(</span>re<span class=\"sy0\">:</span> Double, im<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> conjugate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Complex <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re, -im<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> +<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re + other.<span class=\"me1\">re</span>, im + other.<span class=\"me1\">im</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">*</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re <span class=\"sy0\">*</span> other.<span class=\"me1\">re</span> - im <span class=\"sy0\">*</span> other.<span class=\"me1\">im</span>, re <span class=\"sy0\">*</span> other.<span class=\"me1\">im</span> + im <span class=\"sy0\">*</span> other.<span class=\"me1\">re</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>im <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s<span class=\"st0\">\"${re}${im}i\"</span><br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        s<span class=\"st0\">\"${re}+${im}i\"</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Matrix<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> entries<span class=\"sy0\">:</span> Vector<span class=\"br0\">[</span>Vector<span class=\"br0\">[</span>Complex<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">*</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Matrix<span class=\"br0\">(</span><br/>        Vector.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>entries.<span class=\"me1\">size</span>, other.<span class=\"me1\">entries</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>r, c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rightRow <span class=\"sy0\">=</span> entries<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> leftCol <span class=\"sy0\">=</span> other.<span class=\"me1\">entries</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          rightRow.<span class=\"me1\">zip</span><span class=\"br0\">(</span>leftCol<span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">*</span> y <span class=\"br0\">}</span> <span class=\"co1\">// multiply pair-wise</span><br/>            .<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Complex<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x + y <span class=\"br0\">}</span> <span class=\"co1\">// sum over all</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> conjugateTranspose<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Matrix<span class=\"br0\">(</span><br/>        Vector.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>entries<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span>, entries.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>r, c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> entries<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">conjugate</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isHermitian<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">==</span> conjugateTranspose<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isNormal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ct <span class=\"sy0\">=</span> conjugateTranspose<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">*</span> ct <span class=\"sy0\">==</span> ct <span class=\"sy0\">*</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isIdentity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> entriesWithIndexes <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until entries.<span class=\"me1\">size</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until entries<span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">(</span>r, c, entries<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      entriesWithIndexes.<span class=\"me1\">forall</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>r, c, x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          x <span class=\"sy0\">==</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>          x <span class=\"sy0\">==</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isUnitary<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">*</span> conjugateTranspose<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">isIdentity</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      entries.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span> + <span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span>, <span class=\"st0\">\",\"</span>, <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"[<span class=\"es1\">\\n</span>\"</span>, <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span>, <span class=\"st0\">\"<span class=\"es1\">\\n</span>]\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Matrix<span class=\"br0\">(</span><br/>      Vector.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Complex<span class=\"br0\">(</span>Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> - <span class=\"nu0\">1.0</span>, Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> - <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Matrix: \"</span> + m<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Conjugate Transpose: \"</span> + m.<span class=\"me1\">conjugateTranspose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Hermitian: \"</span> + m.<span class=\"me1\">isHermitian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Normal: \"</span> + m.<span class=\"me1\">isNormal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Unitary: \"</span> + m.<span class=\"me1\">isUnitary</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 66, "block": "<pre class=\"ruby highlighted_source\">func is_Hermitian <span class=\"br0\">(</span><span class=\"kw3\">Array</span> m, <span class=\"kw3\">Array</span> t<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Bool <span class=\"br0\">{</span> m == t <span class=\"br0\">}</span><br/>\u00a0<br/>func mat_mult <span class=\"br0\">(</span><span class=\"kw3\">Array</span> a, <span class=\"kw3\">Array</span> b, Number \u03b5 = <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"kw3\">p</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> r, c <span class=\"kw1\">in</span> <span class=\"br0\">(</span>^a ~X ^b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"br0\">(</span>^b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">p</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">+</span>= <span class=\"br0\">(</span>a<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> round!<span class=\"br0\">(</span>\u03b5<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw3\">p</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func mat_trans <span class=\"br0\">(</span><span class=\"kw3\">Array</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var r = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i,j <span class=\"kw1\">in</span> <span class=\"br0\">(</span>^m ~X ^m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        r<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> = m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func mat_ident <span class=\"br0\">(</span>Number n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ^n <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        <span class=\"br0\">[</span>i.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>..., <span class=\"nu0\">1</span>, <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>...<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func is_Normal <span class=\"br0\">(</span><span class=\"kw3\">Array</span> m, <span class=\"kw3\">Array</span> t<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Bool <span class=\"br0\">{</span><br/>    mat_mult<span class=\"br0\">(</span>m, t<span class=\"br0\">)</span> == mat_mult<span class=\"br0\">(</span>t, m<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func is_Unitary <span class=\"br0\">(</span><span class=\"kw3\">Array</span> m, <span class=\"kw3\">Array</span> t<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Bool <span class=\"br0\">{</span><br/>    mat_mult<span class=\"br0\">(</span>m, t<span class=\"br0\">)</span> == mat_ident<span class=\"br0\">(</span>m.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func say_it <span class=\"br0\">(</span><span class=\"kw3\">Array</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>b<span class=\"sy0\">|</span><br/>        b.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"st0\">\"%9s\"</span> <span class=\"sy0\">%</span> _ <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">say</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><br/>       <span class=\"br0\">[</span>   <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"sy0\">+</span>1i, 2i<span class=\"br0\">]</span>,<br/>       <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>1i,    <span class=\"nu0\">5</span>, <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>,<br/>       <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span>2i,   <span class=\"sy0\">-</span><span class=\"nu0\">3</span>,  <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>       <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>       <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">0.707</span> ,   <span class=\"nu0\">0.707</span>,  <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>       <span class=\"br0\">[</span>0.707i, <span class=\"sy0\">-</span>0.707i,  <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>       <span class=\"br0\">[</span><span class=\"nu0\">0</span>     ,       <span class=\"nu0\">0</span>,  1i<span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>m<span class=\"sy0\">|</span><br/>    say <span class=\"st0\">\"<span class=\"es0\">\\n</span>Matrix:\"</span><br/>    say_it<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>    var t = mat_trans<span class=\"br0\">(</span>m.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">conj</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    say <span class=\"st0\">\"<span class=\"es0\">\\n</span>Transpose:\"</span><br/>    say_it<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    say <span class=\"st0\">\"Is Hermitian?<span class=\"es0\">\\t</span>#{is_Hermitian(m, t)}\"</span><br/>    say <span class=\"st0\">\"Is Normal?<span class=\"es0\">\\t</span>#{is_Normal(m, t)}\"</span><br/>    say <span class=\"st0\">\"Is Unitary?<span class=\"es0\">\\t</span>#{is_Unitary(m, t)}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sparkling", "loc": 101, "block": "<pre class=\"text highlighted_source\"># Computes conjugate transpose of M<br/>let conjTransp = function conjTransp(M) {<br/>\treturn map(range(sizeof M[0]), function(row) {<br/>\t\treturn map(range(sizeof M), function(col) {<br/>\t\t\treturn cplx_conj(M[col][row]);<br/>\t\t});<br/>\t});<br/>};<br/>\u00a0<br/># Helper for cplxMatMul<br/>let cplxVecScalarMul = function cplxVecScalarMul(A, B, row, col) {<br/>\tvar M = { \"re\": 0.0, \"im\": 0.0 };<br/>\tlet N = sizeof A;<br/>\tfor (var i = 0; i &lt; N; i++) {<br/>\t\tlet P = cplx_mul(A[row][i], B[i][col]);<br/>\t\tM = cplx_add(M, P);<br/>\t}<br/>\treturn M;<br/>};<br/>\u00a0<br/># Multiplies matrices A and B<br/># A and B are assumed to be square and of the same size,<br/># this condition is not checked.<br/>let cplxMatMul = function cplxMatMul(A, B) {<br/>\tvar R = {};<br/>\tlet N = sizeof A;<br/>\tfor (var row = 0; row &lt; N; row++) {<br/>\t\tR[row] = {};<br/>\t\tfor (var col = 0; col &lt; N; col++) {<br/>\t\t\tR[row][col] = cplxVecScalarMul(A, B, row, col);<br/>\t\t}<br/>\t}<br/>\treturn R;<br/>};<br/>\u00a0<br/># Helper for creating an array representing a complex number<br/># given its textual representation<br/>let _ = function makeComplex(str) {<br/>\tlet sep = indexof(str, \"+\", 1);<br/>\tif sep &lt; 0 {<br/>\t\tsep = indexof(str, \"-\", 1);<br/>\t}<br/>\tlet reStr = substrto(str, sep);<br/>\tlet imStr = substrfrom(str, sep);<br/>\treturn { \"re\": tofloat(reStr), \"im\": tofloat(imStr) };<br/>};<br/>\u00a0<br/># Formats a complex matrix<br/>let printCplxMat = function printCplxMat(M) {<br/>\tforeach(M, function(i, row) {<br/>\t\tforeach(row, function(j, elem) {<br/>\t\t\tprintf(\"   \u00a0%.2f%+.2fi\", elem.re, elem.im);<br/>\t\t});<br/>\t\tprint();<br/>\t});<br/>};<br/>\u00a0<br/># A Hermitian matrix<br/>let H = {<br/>\t{ _(\"3+0i\"), _(\"2+1i\") },<br/>\t{ _(\"2-1i\"), _(\"0+0i\") }<br/>};<br/>\u00a0<br/># A normal matrix<br/>let N = {<br/>\t{ _(\"1+0i\"), _(\"1+0i\"), _(\"0+0i\") },<br/>\t{ _(\"0+0i\"), _(\"1+0i\"), _(\"1+0i\") },<br/>\t{ _(\"1+0i\"), _(\"0+0i\"), _(\"1+0i\") }<br/>};<br/>\u00a0<br/># A unitary matrix<br/>let U = {<br/>\t{ _(\"0.70710678118+0i\"), _(\"0.70710678118+0i\"), _(\"0+0i\") },<br/>\t{ _(\"0-0.70710678118i\"), _(\"0+0.70710678118i\"), _(\"0+0i\") },<br/>\t{ _(\"0+0i\"),             _(\"0+0i\"),             _(\"0+1i\") }<br/>};<br/>\u00a0<br/>\u00a0<br/>print(\"Hermitian matrix:\\nH = \");<br/>printCplxMat(H);<br/>print(\"H* = \");<br/>printCplxMat(conjTransp(H));<br/>print();<br/>\u00a0<br/>print(\"Normal matrix:\\nN = \");<br/>printCplxMat(N);<br/>print(\"N* = \");<br/>printCplxMat(conjTransp(N));<br/>print(\"N* x N = \");<br/>printCplxMat(cplxMatMul(conjTransp(N), N));<br/>print(\"N x N* = \");<br/>printCplxMat(cplxMatMul(N, conjTransp(N)));<br/>print();<br/>\u00a0<br/>print(\"Unitary matrix:\\nU = \");<br/>printCplxMat(U);<br/>print(\"U* = \");<br/>printCplxMat(conjTransp(U));<br/>print(\"U x U* = \");<br/>printCplxMat(cplxMatMul(U, conjTransp(U)));<br/>print();</pre>"}, {"lang": "Tcl", "loc": 57, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"me1\">matrix</span><br/><span class=\"kw2\">package</span> require math::<span class=\"me1\">complexnumbers</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> complexMatrix.equal <span class=\"br0\">{</span>m1 m2 <span class=\"br0\">{</span>epsilon 1e-14<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$m1</span> rows<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"br0\">[</span><span class=\"re0\">$m2</span> rows<span class=\"br0\">]</span> || <span class=\"br0\">[</span><span class=\"re0\">$m1</span> columns<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"br0\">[</span><span class=\"re0\">$m2</span> columns<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Compute the magnitude of the difference between two complex numbers</span><br/>    <span class=\"kw1\">set</span> ceq <span class=\"br0\">[</span><span class=\"kw2\">list</span> apply <span class=\"br0\">{</span><span class=\"br0\">{</span>epsilon a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>mod <span class=\"br0\">[</span>- <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$epsilon</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>\u00a0::<span class=\"me1\">math</span>::<span class=\"me1\">complexnumbers</span><span class=\"br0\">}</span> <span class=\"re0\">$epsilon</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"br0\">[</span><span class=\"re0\">$m1</span> columns<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span><span class=\"sy0\">&lt;</span><span class=\"br0\">[</span><span class=\"re0\">$m1</span> rows<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$ceq</span> <span class=\"br0\">[</span><span class=\"re0\">$m1</span> get cell <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"re0\">$m2</span> get cell <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> complexMatrix.multiply <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$a</span> columns<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"br0\">[</span><span class=\"re0\">$b</span> rows<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"incompatible sizes\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Simplest to use a lambda in the complex NS</span><br/>    <span class=\"kw1\">set</span> cpm <span class=\"br0\">{</span><span class=\"br0\">{</span>sum a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t+ <span class=\"re0\">$sum</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span>\u00a0::<span class=\"me1\">math</span>::<span class=\"me1\">complexnumbers</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> c0 <span class=\"br0\">[</span>math::<span class=\"me1\">complexnumbers</span>::<span class=\"me1\">complex</span> <span class=\"nu0\">0.0</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>   <span class=\"co1\"># Complex zero</span><br/>    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span>struct::<span class=\"me1\">matrix</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$c</span> add columns <span class=\"br0\">[</span><span class=\"re0\">$b</span> columns<span class=\"br0\">]</span><br/>    <span class=\"re0\">$c</span> add rows <span class=\"br0\">[</span><span class=\"re0\">$a</span> rows<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"re0\">$a</span> rows<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"re0\">$b</span> columns<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> sum <span class=\"re0\">$c0</span><br/>\t    <span class=\"kw1\">foreach</span> rv <span class=\"br0\">[</span><span class=\"re0\">$a</span> get row <span class=\"re0\">$i</span><span class=\"br0\">]</span> cv <span class=\"br0\">[</span><span class=\"re0\">$b</span> get column <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> sum <span class=\"br0\">[</span>apply <span class=\"re0\">$cpm</span> <span class=\"re0\">$sum</span> <span class=\"re0\">$rv</span> <span class=\"re0\">$cv</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>\t    <span class=\"re0\">$c</span> <span class=\"kw1\">set</span> cell <span class=\"re0\">$j</span> <span class=\"re0\">$i</span> <span class=\"re0\">$sum</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$c</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> complexMatrix.conjugateTranspose <span class=\"br0\">{</span>matrix<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> mat <span class=\"br0\">[</span>struct::<span class=\"me1\">matrix</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$mat</span> = <span class=\"re0\">$matrix</span><br/>    <span class=\"re0\">$mat</span> transpose<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> c <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"re0\">$mat</span> columns<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> c<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> r <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"re0\">$mat</span> rows<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> r<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> val <span class=\"br0\">[</span><span class=\"re0\">$mat</span> get cell <span class=\"re0\">$c</span> <span class=\"re0\">$r</span><span class=\"br0\">]</span><br/>\t    <span class=\"re0\">$mat</span> <span class=\"kw1\">set</span> cell <span class=\"re0\">$c</span> <span class=\"re0\">$r</span> <span class=\"br0\">[</span>math::<span class=\"me1\">complexnumbers</span>::<span class=\"me1\">conj</span> <span class=\"re0\">$val</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$mat</span><br/><span class=\"br0\">}</span></pre>"}]}