{"task": "First_class_environments", "blocks": [{"lang": "BBC BASIC", "loc": 46, "block": "<pre class=\"text highlighted_source\">      DIM @environ$(12)<br/>      @% = 4\u00a0: REM Column width<br/>\u00a0<br/>      REM Initialise:<br/>      FOR E% = 1 TO 12<br/>        PROCsetenvironment(@environ$(E%))<br/>        seq% = E%<br/>        cnt% = 0<br/>        @environ$(E%) = FNgetenvironment<br/>      NEXT<br/>\u00a0<br/>      REM Run hailstone sequences:<br/>      REPEAT<br/>        T% = 0<br/>        FOR E% = 1 TO 12<br/>          PROCsetenvironment(@environ$(E%))<br/>          PRINT seq%\u00a0;<br/>          IF seq% &lt;&gt; 1 THEN<br/>            T% += 1<br/>            cnt% += 1<br/>            IF seq% AND 1 seq% = 3 * seq% + 1 ELSE seq% DIV= 2<br/>          ENDIF<br/>          @environ$(E%) = FNgetenvironment<br/>        NEXT<br/>        PRINT<br/>      UNTIL T% = 0<br/>\u00a0<br/>      REM Print counts:<br/>      PRINT \"Counts:\"<br/>      FOR E% = 1 TO 12<br/>        PROCsetenvironment(@environ$(E%))<br/>        PRINT cnt%\u00a0;<br/>        @environ$(E%) = FNgetenvironment<br/>      NEXT<br/>      PRINT<br/>      END<br/>\u00a0<br/>      DEF FNgetenvironment<br/>      LOCAL e$\u00a0: e$ = STRING$(216, CHR$0)<br/>      SYS \"RtlMoveMemory\",\u00a0!^e$, ^@%+108, 216<br/>      = e$<br/>\u00a0<br/>      DEF PROCsetenvironment(e$)<br/>      IF LEN(e$) &lt; 216 e$ = STRING$(216, CHR$0)<br/>      SYS \"RtlMoveMemory\", ^@%+108,\u00a0!^e$, 216<br/>      ENDPROC</pre>"}, {"lang": "Bracmat", "loc": 34, "block": "<pre class=\"text highlighted_source\">(  (environment=(cnt=0) (seq=))<br/>&amp;\u00a0:?environments<br/>&amp; 13:?seq<br/>&amp;   whl<br/>  ' (\u00a0!seq+-1:&gt;0:?seq<br/>    &amp; new$environment:?env<br/>    &amp;\u00a0!seq:?(env..seq)<br/>    &amp;\u00a0!env\u00a0!environments:?environments<br/>    )<br/>&amp; out$(Before\u00a0!environments)<br/>&amp;   whl<br/>  ' (\u00a0!environments:? (=? (seq=&gt;1)\u00a0?)\u00a0?<br/>    &amp;\u00a0!environments:?envs<br/>    &amp;   whl<br/>      ' (\u00a0!envs:(=?env)\u00a0?envs<br/>        &amp;   (   <br/>              ' ( $env<br/>                  ( <br/>                  =   <br/>                    .     put$(!(its.seq) \\t)<br/>                        &amp;\u00a0!(its.seq):1<br/>                      |   1+!(its.cnt):?(its.cnt)<br/>                        &amp; 1/2*!(its.seq):~/?(its.seq)<br/>                      | 3*!(its.seq)+1:?(its.seq)<br/>                  )<br/>                )<br/>            . <br/>            )<br/>          $ <br/>        )<br/>    &amp; out$<br/>    )<br/>&amp; out$(After\u00a0!environments)<br/>)</pre>"}, {"lang": "C", "loc": 36, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define JOBS 12</span><br/><span class=\"co2\">#define jobs(a) for (switch_to(a = 0); a &lt; JOBS ||\u00a0!printf(\"\\n\"); switch_to(++a))</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">int</span> seq<span class=\"sy0\">,</span> cnt<span class=\"sy0\">;</span> <span class=\"br0\">}</span> env_t<span class=\"sy0\">;</span><br/>\u00a0<br/>env_t env<span class=\"br0\">[</span>JOBS<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>seq<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>cnt<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> hail<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"% 4d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>seq<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>seq <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">++*</span>cnt<span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">*</span>seq <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>seq <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>seq <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"sy0\">*</span>seq <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> switch_to<span class=\"br0\">(</span><span class=\"kw4\">int</span> id<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tseq <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>env<span class=\"br0\">[</span>id<span class=\"br0\">]</span>.<span class=\"me1\">seq</span><span class=\"sy0\">;</span><br/>\tcnt <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>env<span class=\"br0\">[</span>id<span class=\"br0\">]</span>.<span class=\"me1\">cnt</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tjobs<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> env<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">seq</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>again<span class=\"sy0\">:</span>\tjobs<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> hail<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\tjobs<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">*</span>seq<span class=\"br0\">)</span> <span class=\"kw1\">goto</span> again<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"COUNTS:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tjobs<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"% 4d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>cnt<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 28, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Prop <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> data<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">ref</span> opDispatch<span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> data<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> code <span class=\"sy0\">=</span> <span class=\"st_h\">`<br/>writef(\"% 4d\", e.seq);<br/>if (e.seq\u00a0!= 1) {<br/>    e.cnt++;<br/>    e.seq = (e.seq &amp; 1)\u00a0? 3 * e.seq + 1\u00a0: e.seq / 2;<br/>}`</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> envs <span class=\"sy0\">=</span> <span class=\"nu0\">12</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> Prop<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"cnt\"</span><span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seq\"</span><span class=\"sy0\">:</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>envs.<span class=\"me1\">any</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>env <span class=\"sy0\">=&gt;</span> env.<span class=\"me1\">seq</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>e<span class=\"sy0\">;</span> envs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">mixin</span><span class=\"br0\">(</span>code<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Counts:<span class=\"es1\">\\n</span>%(% 4d%)\"</span><span class=\"sy0\">,</span> envs.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>env <span class=\"sy0\">=&gt;</span> env.<span class=\"me1\">cnt</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 20, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>bump<span class=\"sy0\">-</span>value<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> value <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> count <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> value <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">even?</span> value<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> value <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">3</span> value<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>env<span class=\"sy0\">-</span>show name envs <span class=\"br0\">)</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">write</span> name<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>env envs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"%4a\"</span> <span class=\"br0\">(</span>eval name env<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>writeln<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task <span class=\"br0\">(</span>envnum <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> envs <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i envnum<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>environment<span class=\"sy0\">-</span>new `<span class=\"br0\">(</span><span class=\"br0\">(</span>value ,<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>count <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>env<span class=\"sy0\">-</span>show 'value envs<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>while<br/>\t<span class=\"br0\">(</span>any  <span class=\"br0\">(</span>curry  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span> n env<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>eval n env<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> 'value<span class=\"br0\">)</span> envs<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>env envs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>eval '<span class=\"br0\">(</span>bump<span class=\"sy0\">-</span>value<span class=\"br0\">)</span> env<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>env<span class=\"sy0\">-</span>show 'value envs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>env<span class=\"sy0\">-</span>show 'count envs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>Note that using the Process Dictionary: \nDestroys referencial transparency \nMakes debugging difficult \nSurvives Catch/Throw\n</pre>"}, {"lang": "Go", "loc": 59, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">const</span> jobs <span class=\"sy2\">=</span> <span class=\"nu0\">12</span><br/>\u00a0<br/><span class=\"kw1\">type</span> environment <span class=\"kw4\">struct</span><span class=\"sy1\">{</span> seq<span class=\"sy1\">,</span> cnt <span class=\"kw4\">int</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    env      <span class=\"sy1\">[</span>jobs<span class=\"sy1\">]</span>environment<br/>    seq<span class=\"sy1\">,</span> cnt <span class=\"sy3\">*</span><span class=\"kw4\">int</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> hail<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"% 4d\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">*</span>seq<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>seq <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">(</span><span class=\"sy3\">*</span>cnt<span class=\"sy1\">)</span><span class=\"sy2\">++</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>seq&amp;<span class=\"nu0\">1</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"sy3\">*</span>seq <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>seq<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        <span class=\"sy3\">*</span>seq <span class=\"sy2\">/=</span> <span class=\"nu0\">2</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> switchTo<span class=\"sy1\">(</span>id <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    seq <span class=\"sy2\">=</span> &amp;env<span class=\"sy1\">[</span>id<span class=\"sy1\">]</span><span class=\"sy3\">.</span>seq<br/>    cnt <span class=\"sy2\">=</span> &amp;env<span class=\"sy1\">[</span>id<span class=\"sy1\">]</span><span class=\"sy3\">.</span>cnt<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; jobs<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        switchTo<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        env<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>seq <span class=\"sy2\">=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>again<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; jobs<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        switchTo<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        hail<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; jobs<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        switchTo<span class=\"sy1\">(</span>j<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>seq <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">goto</span> again<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"COUNTS:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; jobs<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        switchTo<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"% 4d\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">*</span>cnt<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 24, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>environment <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> hailenv<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">12</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># setup environments </span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"Sequences:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span>e <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>environment<span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">sequence</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">every</span> hailstep<span class=\"br0\">(</span><span class=\"sy1\">!</span>environment<span class=\"br0\">)</span> <br/>      printf<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Counts:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> printf<span class=\"br0\">(</span><span class=\"st0\">\"%4d \"</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>environment<span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">count</span><span class=\"br0\">)</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">record</span> hailenv<span class=\"br0\">(</span>sequence<span class=\"sy1\">,</span>count<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> hailstep<span class=\"br0\">(</span>env<span class=\"br0\">)</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"%4d \"</span><span class=\"sy1\">,</span>env<span class=\"sy1\">.</span><span class=\"me1\">sequence</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> env<span class=\"sy1\">.</span><span class=\"me1\">sequence</span> <span class=\"sy1\">~=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        env<span class=\"sy1\">.</span><span class=\"me1\">count</span> <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> env<span class=\"sy1\">.</span><span class=\"me1\">sequence</span> <span class=\"sy1\">%</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> env<span class=\"sy1\">.</span><span class=\"me1\">sequence</span> <span class=\"sy1\">/:=</span> <span class=\"nu0\">2</span> <br/>        <span class=\"kw1\">else</span> env<span class=\"sy1\">.</span><span class=\"me1\">sequence</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">3</span> <span class=\"sy1\">*</span> env<span class=\"sy1\">.</span><span class=\"me1\">sequence</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">hailstone n<br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> n <span class=\"sy0\">=</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> n  <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "J", "loc": 35, "block": "<pre class=\"j highlighted_source\">coclass <span class=\"st_h\">'hailstone'</span><br/>\u00a0<br/>step=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"co1\">NB. and determine next element in hailstone sequence</span><br/>  if.<span class=\"nu0\">1</span>=N <span class=\"kw1\">do.</span> N return.<span class=\"kw1\">end.</span><br/>    <span class=\"co1\">NB. count how many times this has run when N was not 1</span><br/>    STEP=:STEP+<span class=\"nu0\">1</span><br/>  if.<span class=\"nu0\">0</span>=<span class=\"nu0\">2</span>|N <span class=\"kw1\">do.</span><br/>    N=: N%<span class=\"nu0\">2</span><br/>  <span class=\"kw1\">else.</span><br/>    N=: <span class=\"nu0\">1</span> + <span class=\"nu0\">3</span>*N<br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>create=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  STEP=: <span class=\"nu0\">0</span><br/>  N=: <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>current=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  N__y<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>run1=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  step__y<span class=\"st_h\">''</span><br/>  STEP__y<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>run=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  old=: <span class=\"st_h\">''</span><br/>  <span class=\"kw1\">while.</span> -. old -: state=: run1\"<span class=\"nu0\">0</span> <span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>    smoutput <span class=\"nu0\">4j0</span> \": current\"<span class=\"nu0\">0</span> <span class=\"kw2\">y</span><br/>    old=: state<br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>    { \"value\": &lt;HAILSTONE&gt;, \"count\": &lt;COUNT&gt; }\n</pre>"}, {"lang": "Kotlin", "loc": 56, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Environment<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> seq<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> JOBS <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> envs <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>JOBS<span class=\"br0\">)</span> <span class=\"br0\">{</span> Environment<span class=\"br0\">(</span>it + <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> seq <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>     <span class=\"co1\">// 'seq' for current environment</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>   <span class=\"co1\">// 'count' for current environment </span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> currId <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"co1\">// index of current environment</span><br/>\u00a0<br/>fun switchTo<span class=\"br0\">(</span>id<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>id <span class=\"sy0\">!=</span> currId<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        envs<span class=\"br0\">[</span>currId<span class=\"br0\">]</span>.<span class=\"me1\">seq</span> <span class=\"sy0\">=</span> seq<br/>        envs<span class=\"br0\">[</span>currId<span class=\"br0\">]</span>.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> count<br/>        currId <span class=\"sy0\">=</span> id<br/>    <span class=\"br0\">}</span> <br/>    seq <span class=\"sy0\">=</span> envs<span class=\"br0\">[</span>id<span class=\"br0\">]</span>.<span class=\"me1\">seq</span><br/>    count <span class=\"sy0\">=</span> envs<span class=\"br0\">[</span>id<span class=\"br0\">]</span>.<span class=\"me1\">count</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun hailstone<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>seq<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>seq <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>    count++<br/>    seq <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>seq <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> seq + <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> seq / <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> allDone get<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a in <span class=\"nu0\">0</span> until JOBS<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        switchTo<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>seq <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun code<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a in <span class=\"nu0\">0</span> until JOBS<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            switchTo<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            hailstone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>allDone<span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>COUNTS:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a in <span class=\"nu0\">0</span> until JOBS<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        switchTo<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    code<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 35, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> envs <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span> <span class=\"kw1\">do</span><br/>    <span class=\"co1\">-- fallback to the global environment for io and math</span><br/>    envs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> i <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> __index <span class=\"sy0\">=</span> <span class=\"kw3\">_G</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> code <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><br/><span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"% 4d\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> n <span class=\"sy0\">~=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw4\">true</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> finished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> env <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>envs<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> env<span class=\"sy0\">.</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> finished <span class=\"sy0\">=</span> finished <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> finished <span class=\"sy0\">==</span> <span class=\"sy0\">#</span>envs <span class=\"kw1\">then</span> <span class=\"kw1\">break</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> env <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>envs<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"co1\">-- 5.1; in 5.2, use load(code, nil, nil, env)() instead</span><br/>        <span class=\"kw3\">setfenv</span><span class=\"br0\">(</span><span class=\"kw3\">loadstring</span><span class=\"br0\">(</span>code<span class=\"br0\">)</span><span class=\"sy0\">,</span> env<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">end</span> <br/>    <span class=\"kw3\">io.write</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"counts:\"</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> env <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>envs<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"% 4d\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>env<span class=\"sy0\">.</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Order", "loc": 44, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8hail ORDER_PP_FN(                \\<br/>8fn(8N, 8cond((8equal(8N, 1), 1)                       \\<br/>          (8is_0(8remainder(8N, 2)), 8quotient(8N, 2)) \\<br/>          (8else, 8inc(8times(8N, 3))))) )</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8h_loop ORDER_PP_FN(                           \\<br/>8fn(8S,                                                             \\<br/>    8let((8F, 8fn(8E, 8env_ref(8(8H), 8E))),                        \\<br/>         8do(                                                       \\<br/>           8print(8seq_to_tuple(8seq_map(8F, 8S)) 8space),          \\<br/>           8let((8S, 8h_once(8S)),                                  \\<br/>                8if(8equal(1,                                       \\<br/>                           8seq_fold(8times, 1, 8seq_map(8F, 8S))), \\<br/>                    8print_counts(8S),                              \\<br/>                    8h_loop(8S)))))) )</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8h_once ORDER_PP_FN(                          \\<br/>8fn(8S,                                                            \\<br/>    8seq_map(                                                      \\<br/>      8fn(8E,                                                      \\<br/>          8eval(8E,                                                \\<br/>                8quote(                                            \\<br/>                  8env_bind(8(8C),                                 \\<br/>                            8env_bind(8(8H),                       \\<br/>                                      8env_bind(8(8E), 8E, 8E),    \\<br/>                                      8hail(8H)),                  \\<br/>                            8if(8equal(8H, 1), 8C, 8inc(8C))) ))), \\<br/>      8S)) )</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8print_counts ORDER_PP_FN( \\<br/>8fn(8S,                                         \\<br/>    8print(8space 8(Counts:)                    \\<br/>           8seq_to_tuple(8seq_map(8fn(8E, 8env_ref(8(8C), 8E)), 8S)))) )</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span><br/>  8let<span class=\"br0\">(</span><span class=\"br0\">(</span>8S<span class=\"sy0\">,</span>    <span class=\"co1\">// Build a list of environments</span><br/>        8seq_map<span class=\"br0\">(</span>8fn<span class=\"br0\">(</span>8N<span class=\"sy0\">,</span> 8seq_of_pairs_to_env<span class=\"br0\">(</span><br/>                           8seq<span class=\"br0\">(</span>8pair<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">(</span>8H<span class=\"br0\">)</span><span class=\"sy0\">,</span> 8N<span class=\"br0\">)</span><span class=\"sy0\">,</span> 8pair<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">(</span>8C<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                8pair<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">(</span>8E<span class=\"br0\">)</span><span class=\"sy0\">,</span> 8env_nil<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 8seq_iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>       8h_loop<span class=\"br0\">(</span>8S<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 42, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Safe<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> hail_next <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@enviornments</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$initial</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$env</span> <span class=\"sy0\">=</span> Safe<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>   <span class=\"co5\">$</span><span class=\"br0\">{</span> <span class=\"re0\">$env</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">varglob</span><span class=\"br0\">(</span><span class=\"st_h\">'value'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$initial</span><span class=\"sy0\">;</span><br/>   <span class=\"co5\">$</span><span class=\"br0\">{</span> <span class=\"re0\">$env</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">varglob</span><span class=\"br0\">(</span><span class=\"st_h\">'count'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$env</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">share</span><span class=\"br0\">(</span><span class=\"st_h\">'&amp;hail_next'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$env</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">reval</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><br/>      <span class=\"kw2\">sub</span> task <span class=\"br0\">{</span><br/>         <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$value</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>         <span class=\"re0\">$value</span> <span class=\"sy0\">=</span> hail_next<span class=\"br0\">(</span> <span class=\"re0\">$value</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"sy0\">++</span><span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@enviornments</span><span class=\"sy0\">,</span> <span class=\"re0\">$env</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@value_refs</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">varglob</span><span class=\"br0\">(</span><span class=\"st_h\">'value'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@enviornments</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@tasks</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">varglob</span><span class=\"br0\">(</span><span class=\"st_h\">'task'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@enviornments</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> $<span class=\"co5\">$_</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"re0\">@value_refs</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%4s\"</span><span class=\"sy0\">,</span> $<span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">@value_refs</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@tasks</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Counts<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%4s\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">varglob</span><span class=\"br0\">(</span><span class=\"st_h\">'count'</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">for</span> <span class=\"re0\">@enviornments</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 21, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$calculator</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw1\">is</span> rw<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">??</span> <span class=\"nu0\">1</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">??</span> <span class=\"re0\">$n</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw1\">next</span> <span class=\"br0\">(</span><span class=\"re0\">%this</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;get_next</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">%this</span> <span class=\"kw1\">if</span> <span class=\"re0\">%this</span><span class=\"sy0\">.&lt;</span>value<span class=\"sy0\">&gt;</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">%this</span><span class=\"sy0\">.&lt;</span>value<span class=\"sy0\">&gt;.=</span><span class=\"re0\">&amp;get_next</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">%this</span><span class=\"sy0\">.&lt;</span>count<span class=\"sy0\">&gt;++;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">%this</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@hailstones</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">%</span><span class=\"br0\">(</span>value <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> count <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw3\">all</span><span class=\"br0\">(</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span><span class=\"sy0\">.&lt;</span>value<span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@hailstones</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span><span class=\"sy0\">.&lt;</span>value<span class=\"sy0\">&gt;.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%4s\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@hailstones</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@hailstones</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">.=&amp;</span><span class=\"kw1\">next</span><span class=\"br0\">(</span><span class=\"re0\">$calculator</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@hailstones</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Counts'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span><span class=\"sy0\">.&lt;</span>count<span class=\"sy0\">&gt;.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%4s\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@hailstones</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 48, "block": "<pre class=\"text highlighted_source\">function hail(integer n)<br/>    if remainder(n,2)=0 then<br/>        n /= 2<br/>    else<br/>        n = 3*n+1<br/>    end if<br/>    return n<br/>end function<br/>\u00a0<br/>sequence hails = tagset(12),<br/>         counts = repeat(0,12),<br/>         results = columnize({hails})<br/>\u00a0<br/>function step(integer edx)<br/>    integer n = hails[edx]<br/>    if n=1 then return 0 end if<br/>    n = hail(n)<br/>    hails[edx] = n<br/>    counts[edx] += 1<br/>    results[edx] &amp;= n<br/>    return 1<br/>end function<br/>\u00a0<br/>procedure main()<br/>    bool done = false<br/>    while not done do<br/>        done = true<br/>        for i=1 to 12 do<br/>            if step(i) then<br/>                done = false<br/>            end if<br/>        end for<br/>    end while<br/>\u00a0<br/>    for i=1 to max(counts)+1 do<br/>        for j=1 to 12 do<br/>            puts(1,iff(i&lt;=length(results[j])?sprintf(\"%4d\",{results[j][i]}):\"    \"))<br/>        end for<br/>        puts(1,\"\\n\")<br/>    end for<br/>    printf(1,\"\u00a0%s\\n\",{join(repeat(\"===\",12))})<br/>    for j=1 to 12 do<br/>        printf(1,\"%4d\",{counts[j]})<br/>    end for<br/>    puts(1,\"\\n\")<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "PicoLisp", "loc": 20, "block": "<pre class=\"text highlighted_source\">(let Envs<br/>   (mapcar<br/>      '((N) (list (cons 'N N) (cons 'Cnt 0)))  # Build environments<br/>      (range 1 12) )<br/>   (while (find '((E) (job E (&gt; N 1))) Envs)   # Until all values are 1:<br/>      (for E Envs<br/>         (job E                                # Use environment 'E'<br/>            (prin (align 4 N))<br/>            (unless (= 1 N)<br/>               (inc 'Cnt)                      # Increment step count<br/>               (setq N<br/>                  (if (bit? 1 N)               # Calculate next hailstone value<br/>                     (inc (* N 3))<br/>                     (/ N 2) ) ) ) ) )<br/>      (prinl) )<br/>   (prinl (need 48 '=))<br/>   (for E Envs                                 # For each environment 'E'<br/>      (job E<br/>         (prin (align 4 Cnt)) ) )              # print the step count<br/>   (prinl) )</pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\">environments <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">'cnt'</span>:<span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'seq'</span>:i+<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">code</span> <span class=\"sy0\">=</span> <span class=\"st0\">'''<br/>print('% 4d'\u00a0% seq, end='')<br/>if seq\u00a0!= 1:<br/>    cnt += 1<br/>    seq = 3 * seq + 1 if seq &amp; 1 else seq // 2<br/>'''</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span>env<span class=\"br0\">[</span><span class=\"st0\">'seq'</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> env <span class=\"kw1\">in</span> environments<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> env <span class=\"kw1\">in</span> environments:<br/>        <span class=\"kw1\">exec</span><span class=\"br0\">(</span><span class=\"kw3\">code</span><span class=\"sy0\">,</span> <span class=\"kw2\">globals</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> env<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Counts'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> env <span class=\"kw1\">in</span> environments:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'% 4d'</span>\u00a0% env<span class=\"br0\">[</span><span class=\"st0\">'cnt'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 16, "block": "<pre class=\"text highlighted_source\">code &lt;- quote(<br/>          if (n == 1) n else {<br/>            count &lt;- count + 1;<br/>            n &lt;- if (n\u00a0%% 2 == 1) 3 * n + 1 else n/2<br/>          })<br/>\u00a0<br/>eprint &lt;- function(envs, var=\"n\")<br/>  cat(paste(sprintf(\"%4d\", sapply(envs, `[[`, var)), collapse=\" \"), \"\\n\")<br/>\u00a0<br/>envs &lt;- mapply(function(...) list2env(list(...)), n=1:12, count=0)<br/>\u00a0<br/>while (any(sapply(envs, eval, expr=code) &gt; 1)) {eprint(envs)}<br/>eprint(envs)<br/>\u00a0<br/>cat(\"\\nCounts:\\n\")<br/>eprint(envs, \"count\")</pre>"}, {"lang": "Racket", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define namespaces<br/>  (for/list ([i (in-range 1 13)])<br/>    (define ns (make-base-namespace))<br/>    (eval `(begin (define N ,i) (define count 0)) ns)<br/>    ns))<br/>\u00a0<br/>(define (get-var-values name)<br/>  (map (curry namespace-variable-value name #t #f) namespaces))<br/>\u00a0<br/>(define code<br/>  '(when (&gt; N 1)<br/>     (set! N (if (even? N) (/ N 2) (+ 1 (* N 3))))<br/>     (set! count (add1 count))))<br/>\u00a0<br/>(define (show-nums nums)<br/>  (for ([n nums]) (display (~a n #:width 4 #:align 'right)))<br/>  (newline))<br/>\u00a0<br/>(let loop ()<br/>  (define Ns (get-var-values 'N))<br/>  (show-nums Ns)<br/>  (unless (andmap (\u03bb(n) (= n 1)) Ns)<br/>    (for ([ns namespaces]) (eval code ns))<br/>    (loop)))<br/>(displayln (make-string (* 4 12) #\\=))<br/>(show-nums (get-var-values 'count))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program illustrates 1st\u2500class environments (using the numbers from hailstone seq)*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">12</span>                     <span class=\"coMULTI\">/*Was N defined?  No, then use default.*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>                                      <span class=\"coMULTI\">/*width  (so far)  for columnar output.*/</span><br/>@<span class=\"sy0\">.</span>=<br/>      <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;   @<span class=\"sy0\">.</span>i=i;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*i*/</span>       <span class=\"coMULTI\">/*initialize all the environments.     */</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>  <span class=\"kw2\">until</span> @<span class=\"sy0\">.</span>0;    @<span class=\"sy0\">.</span>0=<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 process all the environments.  */</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;        x=hailstone<span class=\"br0\">(</span>k<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*obtain next hailstone number in seq. */</span><br/>          w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w, <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*determine the maximum width needed.  */</span><br/>          @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"63085e23\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k  x                             <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 where the rubber meets the road*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>      <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*forever*/</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/* [\u2193]   display the tabular results.  */</span><br/>      <span class=\"kw1\">do</span> <span class=\"kw6\">lines</span>=-<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> _=<span class=\"st0\">''</span>;     _=            <span class=\"coMULTI\">/*process a line for each environment. */</span><br/>          <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N                          <span class=\"coMULTI\">/*process each of the environments.    */</span><br/>              <span class=\"kw1\">select</span>                             <span class=\"coMULTI\">/*determine how to process the line.   */</span><br/>              <span class=\"kw3\">when</span> #== <span class=\"nu0\">1</span>      <span class=\"kw3\">then</span> _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j<span class=\"br0\">)</span> - <span class=\"nu0\">1</span>, w<span class=\"br0\">)</span><br/>              <span class=\"kw3\">when</span> <span class=\"kw6\">lines</span>==-<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,  w<span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*the header.    */</span><br/>              <span class=\"kw3\">when</span> <span class=\"kw6\">lines</span>== <span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, w, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*the separator. */</span><br/>              <span class=\"kw3\">otherwise</span>            _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j, <span class=\"kw6\">lines</span><span class=\"br0\">)</span>, w<span class=\"br0\">)</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>          <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*j*/</span><br/>      <span class=\"kw1\">if</span> #==<span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> #=<span class=\"nu0\">2</span><br/>      <span class=\"kw1\">if</span> _=<span class=\"st0\">''</span>   <span class=\"kw3\">then</span> #=# + <span class=\"nu0\">1</span>                                           <span class=\"coMULTI\">/*Null?  Bump #. */</span><br/>      <span class=\"kw1\">if</span> #==<span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> _=<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, w, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span>, N<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*foot separator.*/</span><br/>      <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>_, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"st0\">\"T\"</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*display counts.*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*lines*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>hailstone:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> y;      _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>y, <span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>y<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> _==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">''</span>;    @<span class=\"sy0\">.</span>0=<span class=\"nu0\">0</span>;   <span class=\"kw1\">if</span> _<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> _<span class=\"sy0\">*</span><span class=\"nu0\">3</span>+<span class=\"nu0\">1</span>;    <span class=\"kw1\">return</span> _%2</pre>"}, {"lang": "Ruby", "loc": 29, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Build environments</span><br/>envs = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw4\">Object</span>.<span class=\"me1\">new</span>.<span class=\"me1\">instance_eval</span> <span class=\"br0\">{</span>@n = n; <span class=\"re1\">@cnt</span> = <span class=\"nu0\">0</span>; <span class=\"kw2\">self</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Until all values are 1:</span><br/><span class=\"kw1\">until</span> envs.<span class=\"me1\">all</span>? <span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> e.<span class=\"me1\">instance_eval</span><span class=\"br0\">{</span>@n<span class=\"br0\">}</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>  envs.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>e<span class=\"sy0\">|</span><br/>    e.<span class=\"me1\">instance_eval</span> <span class=\"kw1\">do</span>          <span class=\"co1\"># Use environment _e_</span><br/>      <span class=\"kw3\">printf</span> <span class=\"st0\">\"%4s\"</span>, <span class=\"re1\">@n</span><br/>      <span class=\"kw1\">if</span> <span class=\"re1\">@n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>        <span class=\"re1\">@cnt</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span>               <span class=\"co1\"># Increment step count</span><br/>        <span class=\"re1\">@n</span> = <span class=\"kw1\">if</span> <span class=\"re1\">@n</span>.<span class=\"me1\">odd</span>?         <span class=\"co1\"># Calculate next hailstone value</span><br/>               <span class=\"re1\">@n</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>             <span class=\"kw1\">else</span><br/>               <span class=\"re1\">@n</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>             <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">'='</span> <span class=\"sy0\">*</span> <span class=\"nu0\">48</span><br/>envs.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>e<span class=\"sy0\">|</span>                <span class=\"co1\"># For each environment _e_</span><br/>  e.<span class=\"me1\">instance_eval</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%4s\"</span>, <span class=\"re1\">@cnt</span>          <span class=\"co1\"># print the step count</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span></pre>"}, {"lang": "Sidef", "loc": 25, "block": "<pre class=\"ruby highlighted_source\">func calculator<span class=\"br0\">(</span><span class=\"br0\">{</span>.<span class=\"me1\">is_one</span><span class=\"br0\">}</span>   <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>func calculator<span class=\"br0\">(</span>n <span class=\"br0\">{</span>.<span class=\"me1\">is_even</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>func calculator<span class=\"br0\">(</span>n           <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/>func succ<span class=\"br0\">(</span>this <span class=\"br0\">{</span>_<span class=\"br0\">{</span>:value<span class=\"br0\">}</span>.<span class=\"me1\">is_one</span><span class=\"br0\">}</span>, _<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> this<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func succ<span class=\"br0\">(</span>this, get_next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    this<span class=\"br0\">{</span>:value<span class=\"br0\">}</span> = get_next<span class=\"br0\">(</span>this<span class=\"br0\">{</span>:value<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    this<span class=\"br0\">{</span>:count<span class=\"br0\">}</span><span class=\"sy0\">++</span><br/>    <span class=\"kw2\">return</span> this<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var enviornments = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span> <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw4\">Hash</span><span class=\"br0\">(</span>value <span class=\"sy0\">=&gt;</span> i, count <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>!enviornments.<span class=\"me1\">map</span><span class=\"br0\">{</span> _<span class=\"br0\">{</span>:value<span class=\"br0\">}</span> <span class=\"br0\">}</span>.<span class=\"me1\">all</span> <span class=\"br0\">{</span> .<span class=\"me1\">is_one</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say enviornments.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>h<span class=\"sy0\">|</span> <span class=\"st0\">\"%4s\"</span> <span class=\"sy0\">%</span> h<span class=\"br0\">{</span>:value<span class=\"br0\">}</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span>;<br/>    enviornments.<span class=\"me1\">range</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        enviornments<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = succ<span class=\"br0\">(</span>enviornments<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, calculator<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">'Counts'</span>;<br/>say enviornments.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>h<span class=\"sy0\">|</span> <span class=\"st0\">\"%4s\"</span> <span class=\"sy0\">%</span> h<span class=\"br0\">{</span>:count<span class=\"br0\">}</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span>;</pre>"}, {"lang": "Tcl", "loc": 31, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">12</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    dict <span class=\"kw1\">set</span> hailenv hail<span class=\"re0\">$i</span> <span class=\"br0\">[</span>dict create num <span class=\"re0\">$i</span> steps <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> loopagain false<br/>    <span class=\"kw1\">foreach</span> k <span class=\"br0\">[</span>dict keys <span class=\"re0\">$hailenv</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\tdict with hailenv <span class=\"re0\">$k</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>4d <span class=\"re0\">$num</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$num</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">continue</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$num</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> num <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"re0\">$num</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> num <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$num</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">set</span> loopagain true<br/>\t    <span class=\"kw2\">incr</span> steps<br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$loopagain</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Counts...\"</span><br/><span class=\"kw1\">foreach</span> k <span class=\"br0\">[</span>dict keys <span class=\"re0\">$hailenv</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    dict with hailenv <span class=\"re0\">$k</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>4d <span class=\"re0\">$steps</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">class Env{<br/>   var n,cnt=0;<br/>   fcn init(_n){n=_n; returnClass(self.f)}<br/>   fcn f{<br/>      if(n!=1){<br/>         cnt += 1;<br/>         if(n.isEven) n=n/2; else n=n*3+1;<br/>      }<br/>      n<br/>   }<br/>}</pre>"}]}