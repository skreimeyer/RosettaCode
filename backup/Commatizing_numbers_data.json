{"task": "Commatizing_numbers", "blocks": [{"lang": "ALGOL 68", "loc": 87, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># returns text commatized according to the rules of the task and the      #</span><br/><span class=\"coMULTI\">#         period, location and separator paramters                        #</span><br/><span class=\"kw4\">PROC</span> commatize <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> location<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> period<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> separator <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span>  <span class=\"kw3\">STRING</span> str <span class=\"sy1\">:=</span> text<span class=\"br0\">[</span> <span class=\"kw7\">AT</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>         <span class=\"coMULTI\"># handle the options                                             #</span><br/>         <span class=\"kw3\">INT</span>    start position   <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> location  <span class=\"sy1\">=</span> 0  <span class=\"kw2\">THEN</span>  1  <span class=\"kw2\">ELSE</span> location  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span>    period length    <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> period    <span class=\"sy1\">=</span> 0  <span class=\"kw2\">THEN</span>  3  <span class=\"kw2\">ELSE</span> period    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>         <span class=\"kw3\">STRING</span> separator string <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> separator <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw2\">THEN</span> <span class=\"st0\">\",\"</span> <span class=\"kw2\">ELSE</span> separator <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>         period length <span class=\"sy1\">&lt;</span> 1 <span class=\"kw16\">OR</span> start position <span class=\"sy1\">&lt;</span> 1 <span class=\"kw16\">OR</span> start position <span class=\"sy1\">&gt;</span> <span class=\"kw8\">UPB</span> str<br/>     <span class=\"kw2\">THEN</span><br/>         <span class=\"coMULTI\"># invalid parameters - return the text unchanged                 #</span><br/>         text<br/>     <span class=\"kw2\">ELIF</span> <span class=\"coMULTI\"># attempt to find a non-zero digit                              #</span><br/>          <span class=\"kw3\">INT</span> number pos <span class=\"sy1\">:=</span> start position<span class=\"sy1\">;</span><br/>          <span class=\"kw2\">WHILE</span> <span class=\"kw2\">IF</span> number pos <span class=\"sy1\">&gt;</span> <span class=\"kw8\">UPB</span> str<br/>                <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span><br/>                <span class=\"kw2\">ELSE</span> str<span class=\"br0\">[</span> number pos <span class=\"br0\">]</span> <span class=\"sy1\">&lt;</span> <span class=\"st0\">\"1\"</span> <span class=\"kw16\">OR</span> str<span class=\"br0\">[</span> number pos <span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> <span class=\"st0\">\"9\"</span><br/>                <span class=\"kw2\">FI</span><br/>          <span class=\"kw2\">DO</span><br/>              number pos <span class=\"sy1\">+:=</span> 1<br/>          <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>          number pos <span class=\"sy1\">&gt;</span> <span class=\"kw8\">UPB</span> str<br/>     <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># no digits in the string - return the text unchanged           #</span><br/>          text<br/>     <span class=\"kw2\">ELSE</span> <span class=\"coMULTI\"># have at least one digit                                       #</span><br/>          <span class=\"kw3\">STRING</span> result <span class=\"sy1\">:=</span> str<span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> number pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>          <span class=\"coMULTI\"># find the final digit                                          #</span><br/>          <span class=\"kw3\">INT</span> number end <span class=\"sy1\">:=</span> number pos<span class=\"sy1\">;</span><br/>          <span class=\"kw2\">WHILE</span> <span class=\"kw2\">IF</span> number end <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">UPB</span> str<br/>                <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span><br/>                <span class=\"kw2\">ELSE</span> str<span class=\"br0\">[</span> number end <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"0\"</span> <span class=\"kw16\">AND</span> str<span class=\"br0\">[</span> number end <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"9\"</span><br/>                <span class=\"kw2\">FI</span><br/>          <span class=\"kw2\">DO</span><br/>              number end <span class=\"sy1\">+:=</span> 1<br/>          <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>          <span class=\"coMULTI\"># copy the digits commatizing as required                       #</span><br/>          <span class=\"kw3\">INT</span>   digit count <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> number end <span class=\"sy1\">-</span> number pos <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>          <span class=\"kw2\">WHILE</span> digit count <span class=\"sy1\">&gt;</span> 1 <span class=\"kw2\">DO</span><br/>              result      <span class=\"sy1\">+:=</span> str<span class=\"br0\">[</span> number pos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>              number pos  <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>              digit count <span class=\"sy1\">-:=</span> 1<span class=\"sy1\">;</span><br/>              <span class=\"kw2\">IF</span> digit count <span class=\"kw12\">MOD</span> period length <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>                  <span class=\"coMULTI\"># need a comma after this digit                         #</span><br/>                  result <span class=\"sy1\">+:=</span> separator string<br/>              <span class=\"kw2\">FI</span><br/>          <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>          <span class=\"coMULTI\"># final digit and the rest of the string                        #</span><br/>          result <span class=\"sy1\">+:=</span> str<span class=\"br0\">[</span> number pos <span class=\"sy1\">:</span> <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>          result<br/>     <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># commatize #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># modes and operators to allow us to specify optional parameters to the   #</span><br/><span class=\"coMULTI\"># commatizing procedure                                                   #</span><br/><span class=\"kw4\">MODE</span> COMMATIZINGOPTIONS <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> location<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> period<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> separator <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PRIO</span> LOCATION  <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   LOCATION  <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> location <span class=\"br0\">)</span>COMMATIZINGOPTIONS<span class=\"sy1\">:</span>     COMMATIZINGOPTIONS<span class=\"br0\">(</span> text<span class=\"sy1\">,</span> location<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PRIO</span> PERIOD    <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   PERIOD    <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> period   <span class=\"br0\">)</span>COMMATIZINGOPTIONS<span class=\"sy1\">:</span>     COMMATIZINGOPTIONS<span class=\"br0\">(</span> text<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> period<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PRIO</span> SEPARATOR <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SEPARATOR <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">CHAR</span>   separator <span class=\"br0\">)</span>COMMATIZINGOPTIONS<span class=\"sy1\">:</span> COMMATIZINGOPTIONS<span class=\"br0\">(</span> text<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> separator <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SEPARATOR <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> separator <span class=\"br0\">)</span>COMMATIZINGOPTIONS<span class=\"sy1\">:</span> COMMATIZINGOPTIONS<span class=\"br0\">(</span> text<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> separator <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   LOCATION  <span class=\"sy1\">=</span> <span class=\"br0\">(</span> COMMATIZINGOPTIONS opts<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> location     <span class=\"br0\">)</span>COMMATIZINGOPTIONS<span class=\"sy1\">:</span><br/>                 COMMATIZINGOPTIONS<span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> location<span class=\"sy1\">,</span> period <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> separator <span class=\"kw6\">OF</span> opts <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   PERIOD    <span class=\"sy1\">=</span> <span class=\"br0\">(</span> COMMATIZINGOPTIONS opts<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> period       <span class=\"br0\">)</span>COMMATIZINGOPTIONS<span class=\"sy1\">:</span><br/>                 COMMATIZINGOPTIONS<span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> location <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> period<span class=\"sy1\">,</span> separator <span class=\"kw6\">OF</span> opts <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SEPARATOR <span class=\"sy1\">=</span> <span class=\"br0\">(</span> COMMATIZINGOPTIONS opts<span class=\"sy1\">,</span> <span class=\"kw3\">CHAR</span>   separator <span class=\"br0\">)</span>COMMATIZINGOPTIONS<span class=\"sy1\">:</span><br/>                 COMMATIZINGOPTIONS<span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> location <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> period <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> separator <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SEPARATOR <span class=\"sy1\">=</span> <span class=\"br0\">(</span> COMMATIZINGOPTIONS opts<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> separator <span class=\"br0\">)</span>COMMATIZINGOPTIONS<span class=\"sy1\">:</span><br/>                 COMMATIZINGOPTIONS<span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> location <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> period <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> separator <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   COMMATIZE <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text             <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> commatize<span class=\"br0\">(</span> text<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   COMMATIZE <span class=\"sy1\">=</span> <span class=\"br0\">(</span> COMMATIZINGOPTIONS opts <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>                 commatize<span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> location <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> period <span class=\"kw6\">OF</span> opts<span class=\"sy1\">,</span> separator <span class=\"kw6\">OF</span> opts <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the commatization procedure and operators                          #</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE<span class=\"br0\">(</span> <span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582097494459231\"</span> PERIOD 5 SEPARATOR <span class=\"st0\">\" \"</span> LOCATION 6 <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                                                                                                                       <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE<span class=\"br0\">(</span> <span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\"</span>             SEPARATOR <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"\"</span><span class=\"st0\">\"-in Aus$+1411.8millions\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span>                                                                     <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"===US$0017440 millions=== (in 2000 dollars)\"</span><span class=\"sy1\">,</span>                                                     <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"123.e8000 is pretty big.\"</span><span class=\"sy1\">,</span>                                                                        <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"The land area of the earth is 57268900(29% of the surface) square miles.\"</span><span class=\"sy1\">,</span>                        <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"Ain't no numbers in this here words, nohow, no way, Jose.\"</span><span class=\"sy1\">,</span>                                       <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"James was never known as 0000000007\"</span><span class=\"sy1\">,</span>                                                             <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe.\"</span><span class=\"sy1\">,</span><br/>                                                                                                                       <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"   $-140000\u00b1100 millions.\"</span><span class=\"sy1\">,</span>                                                                       <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> COMMATIZE  <span class=\"st0\">\"6/9/1946 was a good year for some.\"</span><span class=\"sy1\">,</span>                                                              <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "C#", "loc": 50, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> inputs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582097494459231\"</span>,<br/>\t<span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\"</span>,<br/>\t<span class=\"st0\">\"<span class=\"es0\">\\\"</span>-in Aus$+1411.8millions<span class=\"es0\">\\\"</span>\"</span>,<br/>\t<span class=\"st0\">\"===US$0017440 millions=== (in 2000 dollars)\"</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tinputs<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> Commatize<span class=\"br0\">(</span>s, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>              <span class=\"sy0\">.</span><span class=\"kw1\">ForEach</span><span class=\"br0\">(</span>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">string</span> Commatize<span class=\"br0\">(</span><span class=\"kw4\">string</span> text, <span class=\"kw4\">int</span> startPosition, <span class=\"kw4\">int</span> interval, <span class=\"kw4\">string</span> separator<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> matches <span class=\"sy0\">=</span> Regex<span class=\"sy0\">.</span><span class=\"me1\">Matches</span><span class=\"br0\">(</span>text<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span>startPosition<span class=\"br0\">)</span>, <span class=\"st0\">\"[0-9]*\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> matches<span class=\"sy0\">.</span><span class=\"me1\">Cast</span><span class=\"sy0\">&lt;</span>Match<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>match <span class=\"sy0\">=&gt;</span> Commatize<span class=\"br0\">(</span>match, interval, separator, text<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">string</span> Commatize<span class=\"br0\">(</span>Match match, <span class=\"kw4\">int</span> interval, <span class=\"kw4\">string</span> separator, <span class=\"kw4\">string</span> original<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>match<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&lt;=</span> interval<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> original<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span>match<span class=\"sy0\">.</span><span class=\"me1\">Index</span>, <br/>                match<span class=\"sy0\">.</span><span class=\"me1\">Index</span> <span class=\"sy0\">==</span> original<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Max</span><span class=\"br0\">(</span>match<span class=\"sy0\">.</span><span class=\"me1\">Length</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span>separator, match<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span>interval<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extension<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Split<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">string</span> source, <span class=\"kw4\">int</span> interval<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> SplitImpl<span class=\"br0\">(</span>source, interval<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span>SplitImpl<span class=\"br0\">(</span><span class=\"kw4\">string</span> source, <span class=\"kw4\">int</span> interval<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span>\t<span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> source<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> interval <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> source<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> interval, interval<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 55, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">regex</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> commatize<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> txt<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> start<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> step<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>        <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> ins<span class=\"sy0\">=</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>step <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy0\">&gt;</span> txt.<span class=\"me1\">length</span> <span class=\"sy0\">||</span> step <span class=\"sy0\">&gt;</span> txt.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> txt<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// First number may begin with digit or decimal point. Exponents ignored.</span><br/>    <span class=\"kw4\">enum</span> decFloField <span class=\"sy0\">=</span> ctRegex<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"[0-9]*<span class=\"es1\">\\\\</span>.[0-9]+|[0-9]+\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> matchDec <span class=\"sy0\">=</span> matchFirst<span class=\"br0\">(</span>txt<span class=\"br0\">[</span>start <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">,</span> decFloField<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>matchDec<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> txt<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Within a decimal float field:</span><br/>    <span class=\"co1\">// A decimal integer field to commatize is positive and not after a point.</span><br/>    <span class=\"kw4\">enum</span> decIntField <span class=\"sy0\">=</span> ctRegex<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"(?&lt;=<span class=\"es1\">\\\\</span>.)|[1-9][0-9]*\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// A decimal fractional field is preceded by a point, and is only digits.</span><br/>    <span class=\"kw4\">enum</span> decFracField <span class=\"sy0\">=</span> ctRegex<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"(?&lt;=<span class=\"es1\">\\\\</span>.)[0-9]+\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> txt<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">start</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> matchDec.<span class=\"me1\">pre</span> <span class=\"sy0\">~</span> matchDec.<span class=\"me1\">hit</span><br/>        .<span class=\"me1\">replace</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>m <span class=\"sy0\">=&gt;</span> m.<span class=\"me1\">hit</span>.<span class=\"me1\">retro</span>.<span class=\"me1\">chunks</span><span class=\"br0\">(</span>step<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>ins<span class=\"br0\">)</span>.<span class=\"me1\">retro</span><span class=\"br0\">)</span><span class=\"br0\">(</span>decIntField<span class=\"br0\">)</span><br/>        .<span class=\"me1\">replace</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>m <span class=\"sy0\">=&gt;</span> m.<span class=\"me1\">hit</span>.<span class=\"me1\">chunks</span><span class=\"br0\">(</span>step<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>ins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>decFracField<span class=\"br0\">)</span><br/>        <span class=\"sy0\">~</span> matchDec.<span class=\"me1\">post</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// An attempted solution may have one or more of the following errors:</span><br/>    <span class=\"co1\">//    ignoring a number that has only zero before its decimal point</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\"0.0123456\"</span>.<span class=\"me1\">commatize</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"0.012,345,6\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//    commatizing numbers other than the first </span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\"1000 2.3000\"</span>.<span class=\"me1\">commatize</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"1,000 2.3000\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//    only commatizing in one direction from the decimal point</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\"0001123.456789\"</span>.<span class=\"me1\">commatize</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"0001,123.456,789\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//    detecting prefixes such as \"Z$\" requires detecting other prefixes</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\" NZ$300000\"</span>.<span class=\"me1\">commatize</span> <span class=\"sy0\">==</span> <span class=\"st0\">\" NZ$300,000\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//    detecting a decimal field that isn't attached to the first number</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\" 2600 and .0125\"</span>.<span class=\"me1\">commatize</span> <span class=\"sy0\">==</span> <span class=\"st0\">\" 2,600 and .0125\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//    ignoring the start value, or confusing base 0 (used here) with base 1</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\"1 77000\"</span>.<span class=\"me1\">commatize</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"1 77,000\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">//    ignoring a number that begins with a point, or treating it as integer</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\" .0104004\"</span>.<span class=\"me1\">commatize</span> <span class=\"sy0\">==</span> <span class=\"st0\">\" .010,400,4\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582097494459231\"</span><br/>        .<span class=\"me1\">commatize</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\"</span><br/>        .<span class=\"me1\">commatize</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> line<span class=\"sy0\">;</span> <span class=\"st0\">\"commatizing_numbers_using_defaults.txt\"</span>.<span class=\"me1\">File</span>.<span class=\"me1\">byLine</span><span class=\"br0\">)</span><br/>        line.<span class=\"me1\">commatize</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 75, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"regexp\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> reg <span class=\"sy2\">=</span> regexp<span class=\"sy3\">.</span>MustCompile<span class=\"sy1\">(</span><span class=\"co2\">`(\\.[0-9]+|[1-9]([0-9]+)?(\\.[0-9]+)?)`</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> reverse<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>rune<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> j<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        r<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> r<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> r<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> r<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> commatize<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">,</span> startIndex<span class=\"sy1\">,</span> period <span class=\"kw4\">int</span><span class=\"sy1\">,</span> sep <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> startIndex &lt; <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> startIndex &gt;<span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">||</span> period &lt; <span class=\"nu0\">1</span> <span class=\"sy3\">||</span> sep <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> s<br/>    <span class=\"sy1\">}</span><br/>    m <span class=\"sy2\">:=</span> reg<span class=\"sy3\">.</span>FindString<span class=\"sy1\">(</span>s<span class=\"sy1\">[</span>startIndex<span class=\"sy1\">:])</span> <span class=\"co1\">// this can only contain ASCII characters</span><br/>    <span class=\"kw1\">if</span> m <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> s<br/>    <span class=\"sy1\">}</span><br/>    splits <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> <span class=\"st0\">\".\"</span><span class=\"sy1\">)</span><br/>    ip <span class=\"sy2\">:=</span> splits<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ip<span class=\"sy1\">)</span> &gt; period <span class=\"sy1\">{</span><br/>        pi <span class=\"sy2\">:=</span> reverse<span class=\"sy1\">(</span>ip<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>ip<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">/</span> period <span class=\"sy3\">*</span> period<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> period<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">-=</span> period <span class=\"sy1\">{</span><br/>            pi <span class=\"sy2\">=</span> pi<span class=\"sy1\">[:</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> sep <span class=\"sy3\">+</span> pi<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">:]</span><br/>        <span class=\"sy1\">}</span><br/>        ip <span class=\"sy2\">=</span> reverse<span class=\"sy1\">(</span>pi<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> strings<span class=\"sy3\">.</span>Contains<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> <span class=\"st0\">\".\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        dp <span class=\"sy2\">:=</span> splits<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>dp<span class=\"sy1\">)</span> &gt; period <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>dp<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">/</span> period <span class=\"sy3\">*</span> period<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> period<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">-=</span> period <span class=\"sy1\">{</span><br/>                dp <span class=\"sy2\">=</span> dp<span class=\"sy1\">[:</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> sep <span class=\"sy3\">+</span> dp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">:]</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        ip <span class=\"sy2\">+=</span> <span class=\"st0\">\".\"</span> <span class=\"sy3\">+</span> dp<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy1\">[:</span>startIndex<span class=\"sy1\">]</span> <span class=\"sy3\">+</span> strings<span class=\"sy3\">.</span>Replace<span class=\"sy1\">(</span>s<span class=\"sy1\">[</span>startIndex<span class=\"sy1\">:],</span> m<span class=\"sy1\">,</span> ip<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    tests <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"123456789.123456789\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\".123456789\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"57256.1D-4\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582097494459231\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"-in Aus$+1411.8millions\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"===US$0017440 millions=== (in 2000 dollars)\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"123.e8000 is pretty big.\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"The land area of the earth is 57268900(29% of the surface) square miles.\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"Ain't no numbers in this here words, nohow, no way, Jose.\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"James was never known as 0000000007\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"Arthur Eddington wrote: I believe there are \"</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\"15747724136275002577605653961181555468044717914527116709366231425076185631031296\"</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\" protons in the universe.\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"   $-140000\u00b1100 millions.\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"6/9/1946 was a good year for some.\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>commatize<span class=\"sy1\">(</span>tests<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"st0\">\"*\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>commatize<span class=\"sy1\">(</span>tests<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"st0\">\"-\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>commatize<span class=\"sy1\">(</span>tests<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"st0\">\"__\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>commatize<span class=\"sy1\">(</span>tests<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">],</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>commatize<span class=\"sy1\">(</span>tests<span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">],</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"st0\">\".\"</span><span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> test <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> tests<span class=\"sy1\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>commatize<span class=\"sy1\">(</span>test<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 21, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'regex'</span><br/>commatize=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span>\"<span class=\"nu0\">1</span> L:<span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">(</span>i.<span class=\"nu0\">0</span><span class=\"sy0\">)</span> commatize <span class=\"kw2\">y</span><br/>:<br/><span class=\"co1\">NB. deal with all those rules about options</span><br/>  opts=. boxopen <span class=\"kw2\">x</span><br/>  char=. <span class=\"sy0\">(</span>#~ <span class=\"st_h\">' '</span>&amp;<a class=\"__cf_email__\" data-cfemail=\"9aa7da\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{<a class=\"__cf_email__\" data-cfemail=\"557b15\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"nu0\">0</span>&amp;#<span class=\"sy0\">)</span>@&gt;<span class=\"sy0\">)</span> opts<br/>  num=.\u00a0;opts-.char<br/>  delim=. <span class=\"nu0\">0</span> {:: char,&lt;<span class=\"st_h\">','</span><br/>  <span class=\"st_h\">'begin period'</span>=. <span class=\"nu0\">_1</span> <span class=\"nu0\">0</span>+<span class=\"nu0\">2</span>{.num,<span class=\"sy0\">(</span>#num<span class=\"sy0\">)</span>}.<span class=\"nu0\">1</span> <span class=\"nu0\">3</span><br/><span class=\"co1\">NB. initialize</span><br/>  prefix=. begin {.<span class=\"kw2\">y</span><br/>  text=. begin }. <span class=\"kw2\">y</span><br/><span class=\"co1\">NB. process</span><br/>  <span class=\"st_h\">'start len'</span>=. ,<span class=\"st_h\">'[1-9][0-9]*'</span> rxmatch text<br/>  if.<span class=\"nu0\">0</span>=len <span class=\"kw1\">do.</span> <span class=\"kw2\">y</span> <span class=\"kw1\">return.</span> <span class=\"kw1\">end.</span><br/>  number=. <span class=\"sy0\">(</span>start,:len<span class=\"sy0\">)</span> [;.<span class=\"nu0\">0</span> text<br/>  numb=. <span class=\"sy0\">(</span>&gt;:period|&lt;:#number<span class=\"sy0\">)</span>{.number<br/>  fixed=. numb,;delim&amp;,each <span class=\"sy0\">(</span>-period<span class=\"sy0\">)</span>&lt;\\ <span class=\"sy0\">(</span>#numb<span class=\"sy0\">)</span>}.number<br/>  prefix,<span class=\"sy0\">(</span>start{.text<span class=\"sy0\">)</span>,fixed,<span class=\"sy0\">(</span>start+len<span class=\"sy0\">)</span>}.text<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 40, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.File</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.regex.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CommatizingNumbers <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>        commatize<span class=\"br0\">(</span><span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582\"</span><br/>                <span class=\"sy0\">+</span> <span class=\"st0\">\"097494459231\"</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        commatize<span class=\"br0\">(</span><span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 \"</span><br/>                <span class=\"sy0\">+</span> <span class=\"st0\">\"trillion).\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">try</span> <span class=\"br0\">(</span>Scanner sc <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span>sc.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                commatize<span class=\"br0\">(</span>sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> commatize<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        commatize<span class=\"br0\">(</span>s, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> commatize<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s, <span class=\"kw4\">int</span> start, <span class=\"kw4\">int</span> step, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ins<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> start <span class=\"sy0\">&gt;</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> step <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> step <span class=\"sy0\">&gt;</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Matcher m <span class=\"sy0\">=</span> Pattern.<span class=\"me1\">compile</span><span class=\"br0\">(</span><span class=\"st0\">\"([1-9][0-9]*)\"</span><span class=\"br0\">)</span>.<span class=\"me1\">matcher</span><span class=\"br0\">(</span>s.<span class=\"me1\">substring</span><span class=\"br0\">(</span>start<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a><span class=\"br0\">(</span>s.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, start<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span>m.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> step<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sb.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> step<span class=\"br0\">)</span><br/>                sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span>i<span class=\"sy0\">++</span>, ins<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            m.<span class=\"me1\">appendReplacement</span><span class=\"br0\">(</span>result, sb.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>m.<span class=\"me1\">appendTail</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 58, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4-3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"(<span class=\"es0\">\\.</span>[0-9]+|[1-9]([0-9]+)?(<span class=\"es0\">\\.</span>[0-9]+)?)\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun String.<span class=\"me1\">commatize</span><span class=\"br0\">(</span>startIndex<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, period<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, sep<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>startIndex <span class=\"sy0\">!</span>in <span class=\"nu0\">0</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">length</span><span class=\"br0\">)</span> || period <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> || sep <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> r.<span class=\"me1\">find</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>, startIndex<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> splits <span class=\"sy0\">=</span> m.<span class=\"me1\">value</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ip <span class=\"sy0\">=</span> splits<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ip.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> period<span class=\"br0\">)</span> <span class=\"br0\">{</span>       <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span>ip.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"br0\">(</span>ip.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / period <span class=\"sy0\">*</span> period downTo period step period<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span>i, sep<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        ip <span class=\"sy0\">=</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"st0\">'.'</span> in m.<span class=\"me1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dp <span class=\"sy0\">=</span> splits<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dp.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> period<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb2 <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span>dp<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"br0\">(</span>dp.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / period <span class=\"sy0\">*</span> period downTo period step period<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb2.<span class=\"me1\">insert</span><span class=\"br0\">(</span>i, sep<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            dp <span class=\"sy0\">=</span> sb2.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        ip +<span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span> + dp<br/>    <span class=\"br0\">}</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">take</span><span class=\"br0\">(</span>startIndex<span class=\"br0\">)</span> + <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">drop</span><span class=\"br0\">(</span>startIndex<span class=\"br0\">)</span>.<span class=\"me1\">replaceFirst</span><span class=\"br0\">(</span>m.<span class=\"me1\">value</span>, ip<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tests <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"123456789.123456789\"</span>,<br/>        <span class=\"st0\">\".123456789\"</span>,<br/>        <span class=\"st0\">\"57256.1D-4\"</span>,<br/>        <span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582097494459231\"</span>,<br/>        <span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\"</span>,<br/>        <span class=\"st0\">\"-in Aus$+1411.8millions\"</span>,<br/>        <span class=\"st0\">\"===US$0017440 millions=== (in 2000 dollars)\"</span>,<br/>        <span class=\"st0\">\"123.e8000 is pretty big.\"</span>,<br/>        <span class=\"st0\">\"The land area of the earth is 57268900(29% of the surface) square miles.\"</span>,<br/>        <span class=\"st0\">\"Ain't no numbers in this here words, nohow, no way, Jose.\"</span>,<br/>        <span class=\"st0\">\"James was never known as 0000000007\"</span>,<br/>        <span class=\"st0\">\"Arthur Eddington wrote: I believe there are \"</span> + <br/>        <span class=\"st0\">\"15747724136275002577605653961181555468044717914527116709366231425076185631031296\"</span> +     <br/>        <span class=\"st0\">\" protons in the universe.\"</span>,<br/>        <span class=\"st0\">\"   $-140000\u00b1100 millions.\"</span>,<br/>        <span class=\"st0\">\"6/9/1946 was a good year for some.\"</span>        <br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>tests<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">commatize</span><span class=\"br0\">(</span>period <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, sep <span class=\"sy0\">=</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>tests<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">commatize</span><span class=\"br0\">(</span>period <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, sep <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>tests<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">commatize</span><span class=\"br0\">(</span>period <span class=\"sy0\">=</span> <span class=\"nu0\">4</span>, sep <span class=\"sy0\">=</span> <span class=\"st0\">\"__\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <br/>    println<span class=\"br0\">(</span>tests<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">commatize</span><span class=\"br0\">(</span>period <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>, sep <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>tests<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">commatize</span><span class=\"br0\">(</span>sep <span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>test in tests.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>test.<span class=\"me1\">commatize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 39, "block": "<pre class=\"perl highlighted_source\"><span class=\"re0\">@input</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'pi=3.14159265358979323846264338327950288419716939937510582097494459231'</span><span class=\"sy0\">,</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'The author has two Z$100000000000000 Zimbabwe notes (100 trillion).'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'.'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'-in Aus$+1411.8millions'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'===US$0017440 millions=== (in 2000 dollars)'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'123.e8000 is pretty big.'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'The land area of the earth is  57268900(29% of the surface)  square miles.'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'Ain<span class=\"es_h\">\\'</span>t no numbers in this here words, nohow, no way, Jose.'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'James was never known as  0000000007'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe.'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'   $-140000\u00b1100  millions.'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"st_h\">'5/9/1946 was a good year for some.'</span><span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"re0\">@input</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$i</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$new</span> <span class=\"sy0\">=</span> commatize<span class=\"br0\">(</span><span class=\"re0\">@$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>%s<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$old</span><span class=\"sy0\">,</span> <span class=\"re0\">$new</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$old</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$new</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> commatize <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span><span class=\"re0\">$sep</span><span class=\"sy0\">,</span><span class=\"re0\">$by</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$sep</span> <span class=\"sy0\">=</span> <span class=\"st_h\">','</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$sep</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$by</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>   <span class=\"kw1\">unless</span> <span class=\"re0\">$by</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">/</span>                      <span class=\"co1\"># matching rules:</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">?&lt;!</span><span class=\"br0\">[</span>eE\\<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"br0\">)</span>             <span class=\"co1\">#   not following these characters</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"re0\">\\d</span><span class=\"br0\">{</span><span class=\"re0\">$by</span><span class=\"sy0\">,</span><span class=\"br0\">}</span><span class=\"br0\">)</span>         <span class=\"co1\">#   leading non-zero digit, minimum number of digits required</span><br/>            <span class=\"sy0\">/</span>c_ins<span class=\"br0\">(</span><span class=\"co3\">$1</span><span class=\"sy0\">,</span><span class=\"re0\">$by</span><span class=\"sy0\">,</span><span class=\"re0\">$sep</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>ex<span class=\"sy0\">;</span> <span class=\"co1\"># substitute matched text with subroutine output</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> c_ins <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span><span class=\"re0\">$by</span><span class=\"sy0\">,</span><span class=\"re0\">$sep</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/(.{$by})/$1$sep/g</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/$sep$//</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 20, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"st_h\">'pi=3.14159265358979323846264338327950288419716939937510582097494459231'</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"sy0\">:</span>6at<span class=\"sy0\">,</span> <span class=\"sy0\">:</span>5by<span class=\"sy0\">,</span> <span class=\"sy0\">:</span>ins<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"st_h\">'The author has two Z$100000000000000 Zimbabwe notes (100 trillion).'</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"sy0\">:</span>ins<span class=\"sy0\">&lt;.&gt;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'-in Aus$+1411.8millions'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'===US$0017440 millions=== (in 2000 dollars)'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'123.e8000 is pretty big.'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'The land area of the earth is  57268900(29% of the surface)  square miles.'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'Ain<span class=\"es_h\">\\'</span>t no numbers in this here words, nohow, no way, Jose.'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'James was never known as  0000000007'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe.'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'   $-140000\u00b1100  millions.'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'6/9/1946 was a good year for some.'</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"Before: \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\" After: \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">??</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;commatize</span><span class=\"br0\">(</span> <span class=\"sy0\">|.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">!!</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;commatize</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> commatize<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$at</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$ins</span> <span class=\"sy0\">=</span> <span class=\"st_h\">','</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$by</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span><span class=\"kw1\">continue</span><span class=\"br0\">(</span><span class=\"re0\">$at</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>1st<span class=\"sy0\">,</span> <span class=\"co2\">/ &lt;[1..9]&gt; &lt;[0..9]&gt;* /</span><span class=\"sy0\">,</span><br/>        <span class=\"sy0\">*.</span><span class=\"kw3\">flip</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/&lt;{ \".**1..$by\" }&gt;/</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"re0\">$ins</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 29, "block": "<pre class=\"text highlighted_source\">procedure commatize(string s, string sep=\",\", integer start=1, integer step=3)<br/>integer l = length(s)<br/>    for i=start to l do<br/>        if find(s[i],\"123456789\") then<br/>            for j=i+1 to l+1 do<br/>                if j&gt;l or not find(s[j],\"0123456789\") then<br/>                    for k=j-1-step to i by -step do<br/>                        s[k+1..k] = sep<br/>                    end for<br/>                    exit<br/>                end if<br/>            end for<br/>            exit<br/>        end if<br/>    end for<br/>    printf(1,\"%s\\n\",{s})<br/>end procedure<br/>\u00a0<br/>commatize(\"pi=3.14159265358979323846264338327950288419716939937510582097494459231\",\" \",6,5)<br/>commatize(\"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\",\".\")<br/>commatize(\"\\\"-in Aus$+1411.8millions\\\"\")<br/>commatize(\"===US$0017440 millions=== (in 2000 dollars)\")<br/>commatize(\"123.e8000 is pretty big.\")<br/>commatize(\"The land area of the earth is 57268900(29% of the surface) square miles.\")<br/>commatize(\"Ain't no numbers in this here words, nohow, no way, Jose.\")<br/>commatize(\"James was never known as 0000000007\")<br/>commatize(\"Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe.\")<br/>commatize(\"   $-140000\u00b1100 millions.\")<br/>commatize(\"6/9/1946 was a good year for some.\")</pre>"}, {"lang": "Python", "loc": 39, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">re</span> <span class=\"kw1\">as</span> RegEx<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> Commatize<span class=\"br0\">(</span> _string<span class=\"sy0\">,</span> _startPos<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> _periodLen<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> _separator<span class=\"sy0\">=</span><span class=\"st0\">\",\"</span> <span class=\"br0\">)</span>:<br/>\toutString <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\tstrPos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\tmatches <span class=\"sy0\">=</span> RegEx.<span class=\"me1\">findall</span><span class=\"br0\">(</span> <span class=\"st0\">\"[0-9]*\"</span><span class=\"sy0\">,</span> _string <span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> match <span class=\"kw1\">in</span> matches<span class=\"br0\">[</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span>:<br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw1\">not</span> match:<br/>\t\t\toutString +<span class=\"sy0\">=</span> _string<span class=\"br0\">[</span> strPos <span class=\"br0\">]</span><br/>\t\t\tstrPos +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>match<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> _periodLen:<br/>\t\t\t\tleadIn <span class=\"sy0\">=</span> match<span class=\"br0\">[</span>:_startPos<span class=\"br0\">]</span><br/>\t\t\t\tperiods <span class=\"sy0\">=</span>  <span class=\"br0\">[</span> match <span class=\"br0\">[</span> i:i + _periodLen <span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span> <span class=\"br0\">(</span> _startPos<span class=\"sy0\">,</span> <span class=\"kw2\">len</span> <span class=\"br0\">(</span> match <span class=\"br0\">)</span><span class=\"sy0\">,</span> _periodLen <span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>\t\t\t\toutString +<span class=\"sy0\">=</span> leadIn + _separator.<span class=\"me1\">join</span><span class=\"br0\">(</span> periods <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t\toutString +<span class=\"sy0\">=</span> match<br/>\u00a0<br/>\t\t\tstrPos +<span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> match <span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> outString<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582097494459231\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>-in Aus$+1411.8millions<span class=\"es0\">\\\"</span>\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"===US$0017440 millions=== (in 2000 dollars)\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"123.e8000 is pretty big.\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"The land area of the earth is 57268900(29% of the surface) square miles.\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"Ain't no numbers in this here words, nohow, no way, Jose.\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"James was never known as 0000000007\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe.\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"\u2422\u2422\u2422$-140000\u00b1100 millions.\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span> Commatize<span class=\"br0\">(</span> <span class=\"st0\">\"6/9/1946 was a good year for some.\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 75, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require (only-in srfi/13 [string-reverse gnirts]))<br/>\u00a0<br/>;; returns a string with the \"comma\"s inserted every step characters from the RIGHT of n.<br/>;; because of the right handedness of this, there is a lot of reversal going on<br/>(define ((insert-commas comma step) n)<br/>  (define px (pregexp (format \".{1,~a}\" step)))<br/>  (string-join (add-between (reverse (map gnirts (regexp-match* px (gnirts n)))) comma) \"\"))<br/>\u00a0<br/>(define (commatize s #:start (start 0) #:comma (comma \",\") #:step (step 3))<br/>  (define ins-comms (insert-commas comma step))\u00a0; specific to our comma and step<br/>\u00a0<br/>  (define split-into-numbers<br/>    (match-lambda<br/>      [(regexp<br/>        #px\"^([^1-9]*)([1-9][0-9.]*)(\\\\S*)(.*)$\"\u00a0; see below for description of bits<br/>        (list _                              \u00a0; the whole match<br/>              (app split-into-numbers pre)   \u00a0; recur on left<br/>              num                            \u00a0; the number bit before any exponent or other<br/>                                             \u00a0; interestingness<br/>              post-number                    \u00a0; from exponent to the first space<br/>              (app split-into-numbers post)))\u00a0; recur on right<br/>       (define skip (substring num 0 start))<br/>       (match-define<br/>         (regexp #px\"^(.*?)(\\\\..*)?$\"<br/>                 (list _                     \u00a0; whole match<br/>                       (app ins-comms n)     \u00a0; the bit that gets the commas added<br/>                       (or (? string? d)     \u00a0; if it matches, then the raw string is in d<br/>                           (and #f (app (lambda (f) \"\") d)))))\u00a0; if (...)? doesn't match it returns<br/>                                                              \u00a0; #f which we thunk to an empty string<br/>         (substring num start))                      \u00a0; do the match on the unskipped bit<br/>       (string-append pre skip n d post-number post)]\u00a0; stitch it back together<br/>      [else else]))                                  \u00a0; if it doesn't match leave as is<br/>\u00a0<br/> \u00a0;; kick it off<br/>  (split-into-numbers s))<br/>\u00a0<br/>(module+ test<br/>  (require tests/eli-tester)<br/>\u00a0<br/>  (test<br/>   (commatize \"pi=3.14159265358979323846264338327950288419716939937510582097494459231\"<br/>              #:start 6 #:comma \" \" #:step 5)<br/>   =&gt;\"pi=3.14159 26535 89793 23846 26433 83279 50288 41971 69399 37510 58209 74944 59231\"<br/>\u00a0<br/>   (commatize \"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\" #:comma \".\")<br/>   =&gt;\"The author has two Z$100.000.000.000.000 Zimbabwe notes (100 trillion).\"<br/>\u00a0<br/>   (commatize \"-in Aus$+1411.8millions\")<br/>   =&gt;\"-in Aus$+1,411.8millions\"<br/>\u00a0<br/>   (commatize \"===US$0017440 millions=== (in 2000 dollars)\")<br/>   =&gt;\"===US$0017,440 millions=== (in 2,000 dollars)\"<br/>\u00a0<br/>   (commatize \"123.e8000 is pretty big.\")<br/>   =&gt;\"123.e8000 is pretty big.\"<br/>\u00a0<br/>   (commatize \"The land area of the earth is  57268900(29% of the surface)  square miles.\")<br/>   =&gt;\"The land area of the earth is  57,268,900(29% of the surface)  square miles.\"<br/>\u00a0<br/>   (commatize \"Ain't no numbers in this here words, nohow, no way, Jose.\")<br/>   =&gt;\"Ain't no numbers in this here words, nohow, no way, Jose.\"<br/>\u00a0<br/>   (commatize \"James was never known as  0000000007\")<br/>   =&gt;\"James was never known as  0000000007\"<br/>\u00a0<br/>   (commatize \"Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe.\")<br/>   =&gt;\"Arthur Eddington wrote: I believe there are 15,747,724,136,275,002,577,605,653,961,181,555,468,044,717,914,527,116,709,366,231,425,076,185,631,031,296 protons in the universe.\"<br/>\u00a0<br/>   (commatize \"   $-140000\u00b1100  millions.\")<br/>\u00a0<br/>   =&gt;\"   $-140,000\u00b1100  millions.\"<br/>   (commatize \"6/9/1946 was a good year for some.\")<br/>   =&gt;\"6/9/1946 was a good year for some.\"))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 51, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program add commas (or other chars)  to a number within a string (or a char str).*/</span><br/>@<span class=\"sy0\">.</span> =<br/>@<span class=\"sy0\">.</span>1= <span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582097494459231\"</span><br/>@<span class=\"sy0\">.</span>2= <span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 trillion).\"</span><br/>@<span class=\"sy0\">.</span>3= <span class=\"st0\">\"-in Aus$+1411.8millions\"</span><br/>@<span class=\"sy0\">.</span>4= <span class=\"st0\">\"===US$0017440 millions=== (in 2000 dollars)\"</span><br/>@<span class=\"sy0\">.</span>5= <span class=\"st0\">\"123.e8000 is pretty big.\"</span><br/>@<span class=\"sy0\">.</span>6= <span class=\"st0\">\"The land area of the earth is  57268900(29% of the surface)  square miles.\"</span><br/>@<span class=\"sy0\">.</span>7= <span class=\"st0\">\"Ain't no numbers in this here words, nohow, no way, Jose.\"</span><br/>@<span class=\"sy0\">.</span>8= <span class=\"st0\">\"James was never known as  0000000007\"</span><br/>@<span class=\"sy0\">.</span>9= <span class=\"st0\">\"Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe.\"</span><br/>@<span class=\"sy0\">.</span>10= <span class=\"st0\">\"   $-140000\u00b1100  millions.\"</span><br/>@<span class=\"sy0\">.</span>11= <span class=\"st0\">\"6/9/1946 was a good year for some.\"</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span>  @<span class=\"sy0\">.</span>i<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;               <span class=\"kw1\">if</span> i<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"coMULTI\">/*process each string.*/</span><br/>                     <span class=\"kw1\">say</span> <span class=\"st0\">'before\u2500\u2500\u25ba'</span>@<span class=\"sy0\">.</span>i                           <span class=\"coMULTI\">/*show the before str.*/</span><br/>       <span class=\"kw1\">if</span> i==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">' after\u2500\u2500\u25ba'</span>comma<span class=\"br0\">(</span>@<span class=\"sy0\">.</span>i, <span class=\"st0\">'blank'</span>, <span class=\"nu0\">5</span>, , <span class=\"nu0\">6</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*   p=5,  start=6.   */</span><br/>       <span class=\"kw1\">if</span> i==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">' after\u2500\u2500\u25ba'</span>comma<span class=\"br0\">(</span>@<span class=\"sy0\">.</span>i, <span class=\"st0\">\".\"</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*comma=decimal point.*/</span><br/>       <span class=\"kw1\">if</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">' after\u2500\u2500\u25ba'</span>comma<span class=\"br0\">(</span>@<span class=\"sy0\">.</span>i<span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*use the defaults.   */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>comma: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> _,c,p,t,s           <span class=\"coMULTI\">/*obtain the number &amp; optional options.*/</span><br/>       <span class=\"kw1\">arg</span> ,cU <span class=\"sy0\">.</span>                                 <span class=\"coMULTI\">/*obtain an uppercase version of  C.   */</span><br/>       c=<span class=\"kw6\">word</span><span class=\"br0\">(</span>c <span class=\"st0\">','</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                          <span class=\"coMULTI\">/*obtain the  commatizing character(s).*/</span><br/>       <span class=\"kw1\">if</span> cU==<span class=\"st0\">'BLANK'</span>  <span class=\"kw3\">then</span> c=<span class=\"st0\">' '</span>                <span class=\"coMULTI\">/*special case for a \"blank\" separator.*/</span><br/>       o=<span class=\"kw6\">word</span><span class=\"br0\">(</span>p <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*obtain the optional period length.   */</span><br/>       p=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span>                                  <span class=\"coMULTI\">/*obtain the positive period length.   */</span><br/>       t=<span class=\"kw6\">word</span><span class=\"br0\">(</span>t <span class=\"nu0\">999999999</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*obtain max # of \"commas\" to insert.  */</span><br/>       s=<span class=\"kw6\">word</span><span class=\"br0\">(</span>s <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*obtain the optional  start  position.*/</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>p, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>   <span class=\"sy0\">|</span>   <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>t, <span class=\"st0\">\"W\"</span><span class=\"br0\">)</span>   <span class=\"sy0\">|</span>   <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>s, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>    <span class=\"sy0\">|</span> ,<br/>          t<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>  <span class=\"sy0\">|</span>  s<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>  <span class=\"sy0\">|</span>  p==<span class=\"nu0\">0</span>  <span class=\"sy0\">|</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">5</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> _       <span class=\"coMULTI\">/*any invalid options? */</span><br/>\u00a0<br/>       n=_<span class=\"st0\">'.9'</span>;     #=<span class=\"nu0\">123456789</span>;      k=<span class=\"nu0\">0</span>        <span class=\"coMULTI\">/*define some  handy-dandy  variables. */</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> o<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                           <span class=\"coMULTI\">/*using a  negative  period length\u00a0?   */</span><br/>                        b=<span class=\"kw6\">verify</span><span class=\"br0\">(</span>_, <span class=\"st0\">' '</span>, , s<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*position of first  blank  in string. */</span><br/>                        e=<span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>  -  <span class=\"kw6\">verify</span><span class=\"br0\">(</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span>  + <span class=\"nu0\">1</span> - p<br/>                    <span class=\"kw3\">end</span><br/>               <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>                           <span class=\"coMULTI\">/*using a  positive  period length.    */</span><br/>                        b=<span class=\"kw6\">verify</span><span class=\"br0\">(</span>n, #, <span class=\"st0\">'M'</span>, s<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*position of first useable decimal dig*/</span><br/>                        z=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"kw6\">verify</span><span class=\"br0\">(</span>n, #<span class=\"st0\">'0.'</span>, <span class=\"st0\">\"M\"</span>, s<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*    \"     \"  last    \"       \"*/</span><br/>                        e=<span class=\"kw6\">verify</span><span class=\"br0\">(</span>n, #<span class=\"st0\">'0'</span>, ,  <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"kw6\">verify</span><span class=\"br0\">(</span>n, #<span class=\"st0\">\"0.\"</span>, <span class=\"st0\">'M'</span>, s<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>   - p - <span class=\"nu0\">1</span><br/>                    <span class=\"kw3\">end</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> e<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> b<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> j=e  <span class=\"kw2\">to</span> b  <span class=\"kw2\">by</span> -p  <span class=\"kw2\">while</span>  k<span class=\"sy0\">&lt;</span>t        <span class=\"coMULTI\">/*commatize the digits.*/</span><br/>                          _=<span class=\"kw6\">insert</span><span class=\"br0\">(</span>c, _, j<span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*comma spray  \u2500\u2500\u2500\u25ba  #.*/</span><br/>                          k= k + <span class=\"nu0\">1</span>                               <span class=\"coMULTI\">/*bump the commatizing.*/</span><br/>                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>       <span class=\"kw1\">return</span> _</pre>"}, {"lang": "Scala", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Scanner</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">regex</span>.<span class=\"me1\">Pattern</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CommatizingNumbers <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> commatize<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> commatize<span class=\"br0\">(</span>s, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> commatize<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, start<span class=\"sy0\">:</span> Int, step<span class=\"sy0\">:</span> Int, ins<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>start <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> start <span class=\"sy0\">&lt;=</span> s.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> step <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> step <span class=\"sy0\">&lt;=</span> s.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> Pattern.<span class=\"me1\">compile</span><span class=\"br0\">(</span><span class=\"st0\">\"([1-9][0-9]*)\"</span><span class=\"br0\">)</span>.<span class=\"me1\">matcher</span><span class=\"br0\">(</span>s.<span class=\"me1\">substring</span><span class=\"br0\">(</span>start<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringBuffer<span class=\"br0\">(</span>s.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, start<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>m.<span class=\"me1\">find</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringBuilder<span class=\"br0\">(</span>m.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- step until sb.<span class=\"me1\">length</span> by step<span class=\"br0\">)</span> sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span>i, ins<span class=\"br0\">)</span><br/>        m.<span class=\"me1\">appendReplacement</span><span class=\"br0\">(</span>result, sb.<span class=\"me1\">reverse</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      println<span class=\"br0\">(</span>m.<span class=\"me1\">appendTail</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  commatize<span class=\"br0\">(</span><span class=\"st0\">\"pi=3.14159265358979323846264338327950288419716939937510582\"</span> + <span class=\"st0\">\"097494459231\"</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  commatize<span class=\"br0\">(</span><span class=\"st0\">\"The author has two Z$100000000000000 Zimbabwe notes (100 \"</span> + <span class=\"st0\">\"trillion).\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sc <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Scanner<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> File<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>sc.<span class=\"me1\">hasNext</span><span class=\"br0\">)</span> commatize<span class=\"br0\">(</span>sc.<span class=\"me1\">nextLine</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}]}