{"task": "Solve_a_Holy_Knight%27s_tour", "blocks": [{"lang": "Ada", "loc": 36, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Knights_Tour, Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Holy_Knight <span class=\"kw1\">is</span><br/>\u00a0<br/>   Size: Positive\u00a0:= Positive'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">package</span> KT <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Knights_Tour<span class=\"br0\">(</span>Size =&gt; Size<span class=\"br0\">)</span>;<br/>   Board: KT.<span class=\"me1\">Tour</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; Natural'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Start_X, Start_Y: KT.<span class=\"me1\">Index</span>:= <span class=\"nu0\">1</span>; <span class=\"co1\">-- default start place (1,1)</span><br/>   S: String<span class=\"br0\">(</span>KT.<span class=\"me1\">Index</span><span class=\"br0\">)</span>;<br/>   I: Positive\u00a0:= KT.<span class=\"me1\">Index</span>'First;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- read the board from standard input</span><br/>   <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">End_Of_File</span> <span class=\"kw2\">and</span> I &lt;= Size <span class=\"kw1\">loop</span><br/>      S\u00a0:= Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span>; <br/>      <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> KT.<span class=\"me1\">Index</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> S<span class=\"br0\">(</span>J<span class=\"br0\">)</span> = ' ' <span class=\"kw2\">or</span> S<span class=\"br0\">(</span>J<span class=\"br0\">)</span> = '-' <span class=\"kw1\">then</span><br/>            Board<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span>\u00a0:= Natural'Last;<br/>         <span class=\"kw1\">elsif</span> S<span class=\"br0\">(</span>J<span class=\"br0\">)</span> = '<span class=\"nu0\">1</span>' <span class=\"kw1\">then</span> <br/>              Start_X\u00a0:= I; Start_Y\u00a0:= J;  Board<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span>\u00a0:= <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">else</span> Board<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span>\u00a0:= <span class=\"nu0\">0</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      I\u00a0:= I + <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- print the board</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Start Configuration (Length:\"</span> <br/>                          &amp; Natural'Image<span class=\"br0\">(</span>KT.<span class=\"me1\">Count_Moves</span><span class=\"br0\">(</span>Board<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"):\"</span><span class=\"br0\">)</span>;<br/>   KT.<span class=\"me1\">Tour_IO</span><span class=\"br0\">(</span>Board, Width =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- search for the tour and print it</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Tour:\"</span><span class=\"br0\">)</span>;<br/>   KT.<span class=\"me1\">Tour_IO</span><span class=\"br0\">(</span>KT.<span class=\"me1\">Warnsdorff_Get_Tour</span><span class=\"br0\">(</span>Start_X, Start_Y, Board<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Holy_Knight;</pre>"}, {"lang": "ALGOL 68", "loc": 177, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># directions for moves #</span><br/><span class=\"kw3\">INT</span> nne <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> ne  <span class=\"sy1\">=</span> 2<span class=\"sy1\">,</span> se <span class=\"sy1\">=</span> 3<span class=\"sy1\">,</span> sse <span class=\"sy1\">=</span> 4<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> ssw <span class=\"sy1\">=</span> 5<span class=\"sy1\">,</span> sw  <span class=\"sy1\">=</span> 6<span class=\"sy1\">,</span> nw <span class=\"sy1\">=</span> 7<span class=\"sy1\">,</span> nnw <span class=\"sy1\">=</span> 8<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> lowest move  <span class=\"sy1\">=</span> nne<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> highest move <span class=\"sy1\">=</span> nnw<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># the vertical position changes of the moves                             #</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> offset v <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"sy1\">-</span>2<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">,</span>  1<span class=\"sy1\">,</span>  2<span class=\"sy1\">,</span>  2<span class=\"sy1\">,</span>  1<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># the horizontal position changes of the moves                           #</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> offset h <span class=\"sy1\">=</span> <span class=\"br0\">(</span>  1<span class=\"sy1\">,</span>  2<span class=\"sy1\">,</span>  2<span class=\"sy1\">,</span>  1<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> SQUARE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span> move      <span class=\"coMULTI\"># the number of the move that caused #</span><br/>                                    <span class=\"coMULTI\"># the knight to reach this square    #</span><br/>                    <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> direction <span class=\"coMULTI\"># the direction of the move that     #</span><br/>                                    <span class=\"coMULTI\"># brought the knight here - one of   #</span><br/>                                    <span class=\"coMULTI\"># nne, ne, se, sse, ssw, sw, nw or   #</span><br/>                                    <span class=\"coMULTI\"># nnw                                #</span><br/>                    <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># get the size of the board - must be between 4 and 8                    #</span><br/><span class=\"kw3\">INT</span> board size <span class=\"sy1\">=</span> 8<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># the board #</span><br/><span class=\"br0\">[</span> board size<span class=\"sy1\">,</span> board size <span class=\"br0\">]</span>SQUARE board<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># starting position #</span><br/><span class=\"kw3\">INT</span> start row <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> start col <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># the tour will be complete when we have made as many moves              #</span><br/><span class=\"coMULTI\"># as there are free squares in the initial board                         #</span><br/><span class=\"kw3\">INT</span>  final move    <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># initialise the board setting the free squares from the supplied pttern #</span><br/><span class=\"coMULTI\"># the pattern has the rows in revers order                               #</span><br/><span class=\"kw4\">PROC</span> initialise board <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> pattern <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> pattern row <span class=\"sy1\">:=</span> <span class=\"kw8\">UPB</span> board<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> row <span class=\"kw2\">FROM</span> 1 <span class=\"kw8\">LWB</span> board <span class=\"kw2\">TO</span> 1 <span class=\"kw8\">UPB</span> board<br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">FOR</span> col <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> board <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> board<br/>            <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span> pattern<span class=\"br0\">[</span> pattern row <span class=\"br0\">]</span><span class=\"br0\">[</span> col <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"-\"</span><br/>                <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># can't use this square                              #</span><br/>                    board<span class=\"br0\">[</span> row<span class=\"sy1\">,</span> col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1 <span class=\"br0\">)</span><br/>                <span class=\"kw2\">ELSE</span><br/>                    <span class=\"coMULTI\"># available square                                   #</span><br/>                    board<span class=\"br0\">[</span> row<span class=\"sy1\">,</span> col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> 0<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                    final move <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">IF</span> pattern<span class=\"br0\">[</span> pattern row <span class=\"br0\">]</span><span class=\"br0\">[</span> col <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"1\"</span><br/>                    <span class=\"kw2\">THEN</span><br/>                        <span class=\"coMULTI\"># have the start position                        #</span><br/>                        start row <span class=\"sy1\">:=</span> row<span class=\"sy1\">;</span><br/>                        start col <span class=\"sy1\">:=</span> col<br/>                    <span class=\"kw2\">FI</span><br/>                <span class=\"kw2\">FI</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            pattern row <span class=\"sy1\">-:=</span> 1<br/>        <span class=\"kw2\">OD</span><br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># initialise board #</span><br/><span class=\"coMULTI\"># statistics #</span><br/><span class=\"kw3\">INT</span> iterations <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> backtracks <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># prints the board #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> tour <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># format \"number\" into at least two characters #</span><br/>    <span class=\"kw4\">PROC</span> n2 <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> number <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>        <span class=\"kw2\">IF</span>   number <span class=\"sy1\">&lt;</span> 0<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"st0\">\" -\"</span><br/>        <span class=\"kw2\">ELIF</span> number <span class=\"sy1\">&lt;</span> 10 <span class=\"kw16\">AND</span> number <span class=\"sy1\">&gt;=</span> 0<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"st0\">\" \"</span> <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> number<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"kw22\">whole</span><span class=\"br0\">(</span> number<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># n2 #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"     a  b  c  d  e  f  g  h\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"   ________________________\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> row <span class=\"kw2\">FROM</span> 1 <span class=\"kw8\">UPB</span> board <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw8\">LWB</span> board<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> n2<span class=\"br0\">(</span> row <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"|\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">FOR</span> col <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> board <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> board<br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> n2<span class=\"br0\">(</span> move <span class=\"kw6\">OF</span> board<span class=\"br0\">[</span> row<span class=\"sy1\">,</span> col <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># print tour #</span><br/>\u00a0<br/><span class=\"coMULTI\"># update the board to the first knight's tour found starting from       #</span><br/><span class=\"coMULTI\"># \"start row\" and \"start col\".                                          #</span><br/><span class=\"coMULTI\"># return TRUE if one was found, FALSE otherwise                         #</span><br/><span class=\"kw4\">PROC</span> find tour <span class=\"sy1\">=</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"kw3\">BOOL</span> result       <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span>  move number  <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span>  row          <span class=\"sy1\">:=</span> start row<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span>  col          <span class=\"sy1\">:=</span> start col<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span>  direction    <span class=\"sy1\">:=</span> lowest move <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># the first move is to place the knight on the starting square #</span><br/>    board<span class=\"br0\">[</span> row<span class=\"sy1\">,</span> col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> move number<span class=\"sy1\">,</span> lowest move <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># attempt to find a sequence of moves that will reach each square once #</span><br/>    <span class=\"kw2\">WHILE</span><br/>        move number <span class=\"sy1\">&lt;</span> final move <span class=\"kw16\">AND</span> result<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> direction <span class=\"sy1\">&lt;</span> highest move<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># try the next move from this position #</span><br/>            direction <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">INT</span> new row <span class=\"sy1\">=</span> row <span class=\"sy1\">+</span> offset v<span class=\"br0\">[</span> direction <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            <span class=\"kw3\">INT</span> new col <span class=\"sy1\">=</span> col <span class=\"sy1\">+</span> offset h<span class=\"br0\">[</span> direction <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span>  new row <span class=\"sy1\">&lt;=</span> 1 <span class=\"kw8\">UPB</span> board<br/>            <span class=\"kw16\">AND</span> new row <span class=\"sy1\">&gt;=</span> 1 <span class=\"kw8\">LWB</span> board<br/>            <span class=\"kw16\">AND</span> new col <span class=\"sy1\">&lt;=</span> 2 <span class=\"kw8\">UPB</span> board<br/>            <span class=\"kw16\">AND</span> new col <span class=\"sy1\">&gt;=</span> 2 <span class=\"kw8\">LWB</span> board<br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># the move is legal, check the new square is unused #</span><br/>                <span class=\"kw2\">IF</span> move <span class=\"kw6\">OF</span> board<span class=\"br0\">[</span> new row<span class=\"sy1\">,</span> new col <span class=\"br0\">]</span> <span class=\"sy1\">=</span> 0<br/>                <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># can move here #</span><br/>                    iterations       <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                    row               <span class=\"sy1\">:=</span> new row<span class=\"sy1\">;</span><br/>                    col               <span class=\"sy1\">:=</span> new col<span class=\"sy1\">;</span><br/>                    move number      <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                    board<span class=\"br0\">[</span> row<span class=\"sy1\">,</span> col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> move number<span class=\"sy1\">,</span> direction <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                    direction         <span class=\"sy1\">:=</span> lowest move <span class=\"sy1\">-</span> 1<br/>                <span class=\"kw2\">FI</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"coMULTI\"># no more moves from this position - backtrack #</span><br/>            <span class=\"kw2\">IF</span> move number <span class=\"sy1\">=</span> 1<br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># at the starting position - no solution #</span><br/>                result <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><br/>            <span class=\"kw2\">ELSE</span><br/>                <span class=\"coMULTI\"># not at the starting position - undo the latest move #</span><br/>                backtracks  <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                move number <span class=\"sy1\">-:=</span> 1<span class=\"sy1\">;</span><br/>                <span class=\"kw3\">INT</span> curr row <span class=\"sy1\">:=</span> row<span class=\"sy1\">;</span><br/>                <span class=\"kw3\">INT</span> curr col <span class=\"sy1\">:=</span> col<span class=\"sy1\">;</span><br/>                row <span class=\"sy1\">-:=</span> offset v<span class=\"br0\">[</span> direction <span class=\"kw6\">OF</span> board<span class=\"br0\">[</span> curr row<span class=\"sy1\">,</span> curr col <span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                col <span class=\"sy1\">-:=</span> offset h<span class=\"br0\">[</span> direction <span class=\"kw6\">OF</span> board<span class=\"br0\">[</span> curr row<span class=\"sy1\">,</span> curr col <span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                <span class=\"coMULTI\"># determine which direction to try next #</span><br/>                direction <span class=\"sy1\">:=</span> direction <span class=\"kw6\">OF</span> board<span class=\"br0\">[</span> curr row<span class=\"sy1\">,</span> curr col <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                <span class=\"coMULTI\"># reset the square we just backtracked from #</span><br/>                board<span class=\"br0\">[</span> curr row<span class=\"sy1\">,</span> curr col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> 0<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># find tour #</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    initialise board<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"-000----\"</span><br/>                      <span class=\"sy1\">,</span> <span class=\"st0\">\"-0-00---\"</span><br/>                      <span class=\"sy1\">,</span> <span class=\"st0\">\"-0000000\"</span><br/>                      <span class=\"sy1\">,</span> <span class=\"st0\">\"000--0-0\"</span><br/>                      <span class=\"sy1\">,</span> <span class=\"st0\">\"0-0--000\"</span><br/>                      <span class=\"sy1\">,</span> <span class=\"st0\">\"1000000-\"</span><br/>                      <span class=\"sy1\">,</span> <span class=\"st0\">\"--00-0--\"</span><br/>                      <span class=\"sy1\">,</span> <span class=\"st0\">\"---000--\"</span><br/>                      <span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> find tour<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># found a solution #</span><br/>        <span class=\"kw22\">print</span> tour<br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"coMULTI\"># couldn't find a solution #</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Solution not found\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> iterations<span class=\"sy1\">,</span> <span class=\"st0\">\" iterations, \"</span><span class=\"sy1\">,</span> backtracks<span class=\"sy1\">,</span> <span class=\"st0\">\" backtracks\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Bracmat", "loc": 213, "block": "<pre class=\"text highlighted_source\">( ( Holy-Knight<br/>  =     begin colWidth crumbs non-empty pairs path parseLine<br/>      , display isolateStartCell minDistance numberElementsAndSort<br/>      , parseBoard reverseList rightAlign solve strlen<br/>    .   \"'non-empty' is a pattern that is used several times in bigger patterns.\"<br/>      &amp; ( non-empty<br/>        = <br/>        =  \u00a0%@<br/>         \u00a0: ~( \".\"<br/>             | \"-\"<br/>             | \" \"<br/>             | \\t<br/>             | \\r<br/>             | \\n<br/>             )<br/>        )<br/>      &amp; ( reverseList<br/>        =   a L<br/>          .  \u00a0:?L<br/>            &amp; whl'(!arg:%?a\u00a0?arg&amp;!a\u00a0!L:?L)<br/>            &amp;\u00a0!L<br/>        )<br/>      &amp; (<a class=\"__cf_email__\" data-cfemail=\"4437303628212a79216a04\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(!arg:? [?e)&amp;!e)<br/>      &amp; ( rightAlign<br/>        =   string width<br/>          .  \u00a0!arg:(?width,?string)<br/>            &amp;\u00a0!width+-1*strlen$!string:?width<br/>            &amp;   whl<br/>              ' (\u00a0!width+-1:~&lt;0:?width<br/>                &amp; \" \"\u00a0!string:?string<br/>                )<br/>            &amp; str$!string<br/>        )<br/>      &amp; ( minDistance<br/>        =   board pat1 pat2 minWidth pos1 pos2 pattern<br/>          .  \u00a0!arg:(?board,(=?pat1),(=?pat2))<br/>            &amp; -1:?minWidth<br/>            &amp; \"Construct a pattern using a template.<br/>            The pattern finds the smallest distance between any two columns in the input.<br/>            Assumption: all columns have the same width and columns are separated by one or<br/>            more spaces. The function can also be used to find the width of the first column<br/>            by letting pat1 match a new line.\"<br/>            &amp;     <br/>                ' (\u00a0?<br/>                    (   $pat1<br/>                        [?pos1<br/>                        (? \" \"|`)<br/>                        ()$pat2<br/>                        [?pos2<br/>                       \u00a0?<br/>                    &amp;  \u00a0!pos2+-1*!pos1<br/>                     \u00a0: ( &lt;!minWidth<br/>                        |\u00a0?&amp;!minWidth:&lt;0<br/>                        )<br/>                     \u00a0:\u00a0?minWidth<br/>                    &amp; ~<br/>                    )<br/>                  )<br/>             \u00a0: (=?pattern)<br/>            &amp; \"'pattern', by design, always fails. The interesting part is a side effect: <br/>               the column width.\"<br/>            &amp; (@(!board:!pattern)|!minWidth)<br/>        )<br/>      &amp; ( numberElementsAndSort<br/>        =   a sum n<br/>          .   0:?sum:?n<br/>            &amp; \"An evaluated sum is always sorted. The terms are structured so the sorting<br/>               order is by row and then by column (both part of 'a').\"<br/>            &amp;   whl<br/>              ' (\u00a0!arg:%?a\u00a0?arg<br/>                &amp; 1+!n:?n<br/>                &amp; (!a,!n)+!sum:?sum<br/>                )<br/>            &amp; \"return the sorted list (sum) and also the size of a field that can contain<br/>               the highest number.\"<br/>            &amp; (!sum.strlen$!n+1)<br/>        )<br/>      &amp; ( parseLine<br/>        =     line row columnWidth width col<br/>            , bins val A M Z cell validPat<br/>          .  \u00a0!arg:(?line,?row,?width,?columnWidth,?bins)<br/>            &amp; 0:?col<br/>            &amp; \"Find the cells and create a pair [row,col] for each. Put each pair in a bin.<br/>               There are as many bins as there are different values in cells.\"<br/>            &amp;   '(? ($!non-empty:?val)\u00a0?)<br/>             \u00a0: (=?validPat)<br/>            &amp;   whl<br/>              ' ( @(!line:?cell [!width\u00a0?line)<br/>                &amp; (   @(!cell:!validPat)<br/>                    &amp;   (  \u00a0!bins:?A (!val.?M)\u00a0?Z<br/>                          &amp;\u00a0!A (!val.(!row.!col)\u00a0!M)\u00a0!Z<br/>                        | (!val.!row.!col)\u00a0!bins<br/>                        )<br/>                     \u00a0:\u00a0?bins<br/>                  | <br/>                  )<br/>                &amp;\u00a0!columnWidth:?width<br/>                &amp; 1+!col:?col<br/>                )<br/>            &amp;\u00a0!bins<br/>        )<br/>      &amp; ( parseBoard<br/>        =   board firstColumnWidth columnWidth,row bins line<br/>          .  \u00a0!arg:?board<br/>            &amp;   (   minDistance<br/>                  $ (str$(\\r \\n\u00a0!arg),(=\\n),!non-empty)<br/>                , minDistance$(!arg,!non-empty,!non-empty)<br/>                )<br/>             \u00a0: (?firstColumnWidth,?columnWidth)<br/>            &amp; 0:?row<br/>            &amp;\u00a0:?bins<br/>            &amp;   whl<br/>              ' ( @(!board:?line \\n\u00a0?board)<br/>                &amp;     parseLine<br/>                    $ (!line,!row,!firstColumnWidth,!columnWidth,!bins)<br/>                 \u00a0:\u00a0?bins<br/>                &amp; (!bins:|1+!row:?row)<br/>                )<br/>            &amp;     parseLine<br/>                $ (!board,!row,!firstColumnWidth,!columnWidth,!bins)<br/>             \u00a0:\u00a0?bins<br/>        )<br/>      &amp; \"Find the first bin with only one pair. Return this pair and the combined pairs in<br/>         all remaining bins.\"<br/>      &amp; ( isolateStartCell<br/>        =   A begin Z valuedPairs pairs<br/>          .  \u00a0!arg:?A (?.? [1:?begin)\u00a0?Z<br/>            &amp;\u00a0!A\u00a0!Z:?arg<br/>            &amp;\u00a0:?pairs<br/>            &amp;   whl<br/>              ' (\u00a0!arg:(?.?valuedPairs)\u00a0?arg<br/>                &amp;\u00a0!valuedPairs\u00a0!pairs:?pairs<br/>                )<br/>            &amp; (!begin.!pairs)<br/>        )<br/>      &amp; ( display<br/>        =   board solution row col x y n colWidth<br/>          .  \u00a0!arg:(?board,?solution,?colWidth)<br/>            &amp; out$!board<br/>            &amp; 0:?row<br/>            &amp; -1:?col<br/>            &amp;   whl<br/>              ' (\u00a0!solution:((?y.?x),?n)+?solution<br/>                &amp;   whl<br/>                  ' (\u00a0!row:&lt;!y<br/>                    &amp; 1+!row:?row<br/>                    &amp; -1:?col<br/>                    &amp; put$\\n<br/>                    )<br/>                &amp;   whl<br/>                  ' ( 1+!col:?col:&lt;!x<br/>                    &amp; put$(rightAlign$(!colWidth,))<br/>                    )<br/>                &amp; put$(rightAlign$(!colWidth,!n))<br/>                )<br/>            &amp; put$\\n<br/>        )<br/>      &amp; ( solve<br/>        =   A Z x y crumbs pairs X Y solution<br/>          .  \u00a0!arg:((?y.?x),?crumbs,?pairs)<br/>            &amp; (\u00a0!pairs:&amp;(!y.!x)\u00a0!crumbs<br/>              |    \u00a0!pairs<br/>                 \u00a0:  \u00a0?A<br/>                      ( (?Y.?X)\u00a0?Z<br/>                      &amp;   (!x+-1*!X)*(!y+-1*!Y)<br/>                       \u00a0: (2|-2)<br/>                      &amp;     solve<br/>                          $ ( (!Y.!X)<br/>                            , (!y.!x)\u00a0!crumbs<br/>                            ,\u00a0!A\u00a0!Z<br/>                            )<br/>                       \u00a0:\u00a0?solution<br/>                      )<br/>                &amp;\u00a0!solution<br/>              )<br/>        )<br/>      &amp; ( isolateStartCell$(parseBoard$!arg):(?begin.?pairs)<br/>        | out$\"Sorry, I cannot identify a start cell.\"&amp;~<br/>        )<br/>      &amp; solve$(!begin,,!pairs):?crumbs<br/>      &amp;   numberElementsAndSort$(reverseList$!crumbs)<br/>       \u00a0: (?path.?colWidth)<br/>      &amp; display$(!arg,!path,!colWidth)<br/>  )<br/>&amp;     \"<br/>\u00a0<br/>      0 0 0<br/>      0   0 0<br/>      0 0 0 0 0 0 0<br/>    0 0 0     0   0<br/>    0   0     0 0 0<br/>    1 0 0 0 0 0 0<br/>        0 0   0<br/>          0 0 0<br/>          \"<br/>      \"<br/>-----1-0-----<br/>-----0-0-----<br/>----00000----<br/>-----000-----<br/>--0--0-0--0--<br/>00000---00000<br/>--00-----00--<br/>00000---00000<br/>--0--0-0--0--<br/>-----000-----<br/>----00000----<br/>-----0-0-----<br/>-----0-0-----\"<br/> \u00a0:\u00a0?boards<br/>&amp; whl'(!boards:%?board\u00a0?boards&amp;Holy-Knight$!board)<br/>&amp; done<br/>);</pre>"}, {"lang": "C++", "loc": 137, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> node<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> val<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> neighbors<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> nSolver<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    nSolver<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">1</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">2</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">2</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solve<span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> puzz, <span class=\"kw4\">int</span> max_wid <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> puzz.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\twid <span class=\"sy1\">=</span> max_wid<span class=\"sy4\">;</span> hei <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> puzz.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> wid<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> len <span class=\"sy1\">=</span> wid <span class=\"sy2\">*</span> hei, c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> max <span class=\"sy1\">=</span> len<span class=\"sy4\">;</span><br/>\tarr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> node<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"kw3\">memset</span><span class=\"br0\">(</span> arr, <span class=\"nu0\">0</span>, len <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> node <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> max<span class=\"sy2\">--</span><span class=\"sy4\">;</span> arr<span class=\"br0\">[</span>c<span class=\"sy2\">++</span><span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t    arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    c<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tsolveIt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tostringstream o<span class=\"sy4\">;</span> o <span class=\"sy1\">&lt;&lt;</span> arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">=</span> o.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    c<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">bool</span> search<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> w <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> w <span class=\"sy1\">&gt;</span> max <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tnode<span class=\"sy2\">*</span> n <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tn<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>neighbors <span class=\"sy1\">=</span> getNeighbors<span class=\"br0\">(</span> x, y <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> d <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> d<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>neighbors <span class=\"sy3\">&amp;</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>d<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> search<span class=\"br0\">(</span> a, b, w <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t    arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> getNeighbors<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"kw4\">int</span> a, b<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> xx <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> xx <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> xx<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>xx<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>xx<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> b <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> a <span class=\"sy1\">&gt;=</span> wid <span class=\"sy3\">||</span> b <span class=\"sy1\">&gt;=</span> hei <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> c <span class=\"sy3\">|</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> xx <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> c<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solveIt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x, y, z<span class=\"sy4\">;</span> findStart<span class=\"br0\">(</span> x, y, z <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> z <span class=\"sy1\">==</span> <span class=\"nu0\">99999</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Can't find start point!<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\tsearch<span class=\"br0\">(</span> x, y, z <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> findStart<span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> x, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> y, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> z <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tz <span class=\"sy1\">=</span> <span class=\"nu0\">99999</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> b <span class=\"sy1\">&lt;</span> hei<span class=\"sy4\">;</span> b<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> a<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">&amp;&amp;</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&lt;</span> z <span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">{</span> <br/>\t\t    x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span><br/>\t\t    z <span class=\"sy1\">=</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> wid, hei, max, dx<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>, dy<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    node<span class=\"sy2\">*</span> arr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> wid<span class=\"sy4\">;</span> string p<span class=\"sy4\">;</span><br/>    <span class=\"co1\">//p = \"* . . . * * * * * . * . . * * * * . . . . . . . . . . * * . * . . * . * * . . . 1 . . . . . . * * * . . * . * * * * * . . . * *\"; wid = 8;</span><br/>    p <span class=\"sy1\">=</span> <span class=\"st0\">\"* * * * * 1 * . * * * * * * * * * * . * . * * * * * * * * * . . . . . * * * * * * * * * . . . * * * * * * * . * * . * . * * . * * . . . . . * * * . . . . . * * . . * * * * * . . * * . . . . . * * * . . . . . * * . * * . * . * * . * * * * * * * . . . * * * * * * * * * . . . . . * * * * * * * * * . * . * * * * * * * * * * . * . * * * * * \"</span><span class=\"sy4\">;</span> wid <span class=\"sy1\">=</span> <span class=\"nu0\">13</span><span class=\"sy4\">;</span><br/>    istringstream iss<span class=\"br0\">(</span> p <span class=\"br0\">)</span><span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> puzz<span class=\"sy4\">;</span><br/>    copy<span class=\"br0\">(</span> istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> iss <span class=\"br0\">)</span>, istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, back_inserter<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> puzz <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    nSolver s<span class=\"sy4\">;</span> s.<span class=\"me1\">solve</span><span class=\"br0\">(</span> puzz, wid <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\"*\"</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0\"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"   \"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>c <span class=\"sy1\">&gt;=</span> wid <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 133, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typetuple</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">struct</span> HolyKnightPuzzle <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw2\">alias</span> InputCellBaseType <span class=\"sy0\">=</span> <span class=\"kw4\">char</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> InputCell <span class=\"sy0\">:</span> InputCellBaseType <span class=\"br0\">{</span> available <span class=\"sy0\">=</span> <span class=\"st0\">'#'</span><span class=\"sy0\">,</span> unavailable <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span><span class=\"sy0\">,</span> start<span class=\"sy0\">=</span><span class=\"st0\">'1'</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw2\">alias</span> Cell <span class=\"sy0\">=</span> <span class=\"kw4\">uint</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> <span class=\"sy0\">:</span> Cell <span class=\"br0\">{</span> unknownCell <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> unavailableCell <span class=\"sy0\">=</span> Cell.<span class=\"me1\">max</span><span class=\"sy0\">,</span> startCell<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"co1\">// Special Cell values.</span><br/>\u00a0<br/>    <span class=\"co1\">// Neighbors, [shift row, shift column].</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> P <span class=\"br0\">{</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">alias</span> shifts <span class=\"sy0\">=</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>P<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> P<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> P<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> P<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                              P<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> P<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> P<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> P<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">size_t</span> gridWidth<span class=\"sy0\">,</span> gridHeight<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">immutable</span> Cell nAvailableCells<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"coMULTI\">/*immutable*/</span> <span class=\"kw4\">const</span> InputCell<span class=\"br0\">[</span><span class=\"br0\">]</span> flatPuzzle<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> Cell<span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span> <span class=\"co1\">// Flattened mutable game grid.</span><br/>\u00a0<br/>    <span class=\"kw4\">@disable</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> rawPuzzle<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span><br/>    <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>rawPuzzle.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>rawPuzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>rawPuzzle.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> rawPuzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Is rectangular.</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>rawPuzzle.<span class=\"me1\">join</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span>InputCell.<span class=\"me1\">start</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Exactly one start point.</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//immutable puzzle = rawPuzzle.to!(InputCell[][]);</span><br/>        <span class=\"kw4\">immutable</span> puzzle <span class=\"sy0\">=</span> rawPuzzle.<span class=\"me1\">map</span><span class=\"sy0\">!</span>representation.<span class=\"me1\">array</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>InputCell<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        gridWidth <span class=\"sy0\">=</span> puzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        gridHeight <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        flatPuzzle <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">join</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// This counts the start cell too.</span><br/>        nAvailableCells <span class=\"sy0\">=</span> flatPuzzle.<span class=\"me1\">representation</span>.<span class=\"me1\">count</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ic <span class=\"sy0\">=&gt;</span> ic <span class=\"sy0\">!=</span> InputCell.<span class=\"me1\">unavailable</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        grid <span class=\"sy0\">=</span> flatPuzzle<br/>               .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ic <span class=\"sy0\">=&gt;</span> ic.<span class=\"me1\">predSwitch</span><span class=\"br0\">(</span>InputCell.<span class=\"me1\">available</span><span class=\"sy0\">,</span>   unknownCell<span class=\"sy0\">,</span><br/>                                         InputCell.<span class=\"me1\">unavailable</span><span class=\"sy0\">,</span> unavailableCell<span class=\"sy0\">,</span><br/>                                         InputCell.<span class=\"me1\">start</span><span class=\"sy0\">,</span>       startCell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               .<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    Nullable<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> solve<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> width<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span><br/>    <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>result.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>grid.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>unknownCell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>width <span class=\"sy0\">==</span> gridWidth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Find start position.</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span>  <span class=\"me1\">gridHeight</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">width</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> startCell <span class=\"sy0\">&amp;&amp;</span><br/>                    search<span class=\"sy0\">!</span>width<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> startCell <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> zip<span class=\"br0\">(</span>flatPuzzle<span class=\"sy0\">,</span> grid<span class=\"br0\">)</span> <span class=\"co1\">// Not nothrow.</span><br/>                                  <span class=\"co1\">//.map!({p, c} =&gt; ...</span><br/>                                  .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pc <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>pc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> InputCell.<span class=\"me1\">available</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>                                              pc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">text</span> <span class=\"sy0\">:</span><br/>                                              InputCellBaseType<span class=\"br0\">(</span>pc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">text</span><span class=\"br0\">)</span><br/>                                  .<span class=\"me1\">array</span><br/>                                  .<span class=\"me1\">chunks</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span><br/>                                  .<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">bool</span> search<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> width<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> r<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> c<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Cell cell<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell <span class=\"sy0\">&gt;</span> nAvailableCells<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"co1\">// One solution found.</span><br/>\u00a0<br/>        <span class=\"co1\">// This doesn't use the Warnsdorff rule.</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> sh<span class=\"sy0\">;</span> shifts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> r2 <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> sh.<span class=\"me1\">x</span><span class=\"sy0\">,</span><br/>                      c2 <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> sh.<span class=\"me1\">y</span><span class=\"sy0\">,</span><br/>                      pos <span class=\"sy0\">=</span> r2 <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> c2<span class=\"sy0\">;</span><br/>            <span class=\"co1\">// No need to test for &gt;= 0 because uint wraps around.</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c2 <span class=\"sy0\">&lt;</span> width <span class=\"sy0\">&amp;&amp;</span> r2 <span class=\"sy0\">&lt;</span> gridHeight <span class=\"sy0\">&amp;&amp;</span> grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">==</span> unknownCell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cell<span class=\"sy0\">;</span>        <span class=\"co1\">// Try.</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>search<span class=\"sy0\">!</span>width<span class=\"br0\">(</span>r2<span class=\"sy0\">,</span> c2<span class=\"sy0\">,</span> cell <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> unknownCell<span class=\"sy0\">;</span> <span class=\"co1\">// Restore.</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Enum HolyKnightPuzzle to catch malformed puzzles at compile-time.</span><br/>    <span class=\"kw4\">enum</span> puzzle1 <span class=\"sy0\">=</span> <span class=\"st0\">\".###....<br/>                    .#.##...<br/>                    .#######<br/>                    ###..#.#<br/>                    #.#..###<br/>                    1######.<br/>                    ..##.#..<br/>                    ...###..\"</span>.<span class=\"me1\">split</span>.<span class=\"me1\">HolyKnightPuzzle</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> puzzle2 <span class=\"sy0\">=</span> <span class=\"st0\">\".....1.#.....<br/>                    .....#.#.....<br/>                    ....#####....<br/>                    .....###.....<br/>                    ..#..#.#..#..<br/>                    #####...#####<br/>                    ..##.....##..<br/>                    #####...#####<br/>                    ..#..#.#..#..<br/>                    .....###.....<br/>                    ....#####....<br/>                    .....#.#.....<br/>                    .....#.#.....\"</span>.<span class=\"me1\">split</span>.<span class=\"me1\">HolyKnightPuzzle</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"coMULTI\">/*enum*/</span> puzzle<span class=\"sy0\">;</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>puzzle1<span class=\"sy0\">,</span> puzzle2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//immutable solution = puzzle.solve!(puzzle.gridWidth);</span><br/>        <span class=\"kw4\">enum</span> width <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">gridWidth</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> solution <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">solve</span><span class=\"sy0\">!</span>width<span class=\"sy0\">;</span> <span class=\"co1\">// Solved at run-time.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solution.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>            writeln<span class=\"br0\">(</span><span class=\"st0\">\"No solution found for puzzle.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"One solution:<span class=\"es1\">\\n</span>%(%-(%2s\u00a0%)<span class=\"es1\">\\n</span>%)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> solution<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 32, "block": "<pre class=\"text highlighted_source\"># require HLPsolver<br/>\u00a0<br/>adjacent = [{-1,-2},{-2,-1},{-2,1},{-1,2},{1,2},{2,1},{2,-1},{1,-2}]<br/>\u00a0<br/>\"\"\"<br/>. . 0 0 0<br/>. . 0 . 0 0<br/>. 0 0 0 0 0 0 0<br/>0 0 0 . . 0 . 0<br/>0 . 0 . . 0 0 0<br/>1 0 0 0 0 0 0<br/>. . 0 0 . 0<br/>. . . 0 0 0<br/>\"\"\"<br/>|&gt; HLPsolver.solve(adjacent)<br/>\u00a0<br/>\"\"\"<br/> _ _ _ _ _ 1 _ 0          <br/> _ _ _ _ _ 0 _ 0          <br/> _ _ _ _ 0 0 0 0 0        <br/> _ _ _ _ _ 0 0 0          <br/> _ _ 0 _ _ 0 _ 0 _ _ 0    <br/> 0 0 0 0 0 _ _ _ 0 0 0 0 0<br/> _ _ 0 0 _ _ _ _ _ 0 0    <br/> 0 0 0 0 0 _ _ _ 0 0 0 0 0<br/> _ _ 0 _ _ 0 _ 0 _ _ 0    <br/> _ _ _ _ _ 0 0 0          <br/> _ _ _ _ 0 0 0 0 0        <br/> _ _ _ _ _ 0 _ 0          <br/> _ _ _ _ _ 0 _ 0          <br/>\"\"\"<br/>|&gt; HLPsolver.solve(adjacent)</pre>"}, {"lang": "Go", "loc": 94, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> moves <span class=\"sy2\">=</span> <span class=\"sy1\">[][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><br/>    <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> board1 <span class=\"sy2\">=</span> <span class=\"st0\">\" xxx    \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\" x xx   \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\" xxxxxxx\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"xxx  x x\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"x x  xxx\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"sxxxxxx \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"  xx x  \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"   xxx  \"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> board2 <span class=\"sy2\">=</span> <span class=\"st0\">\".....s.x.....\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\".....x.x.....\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"....xxxxx....\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\".....xxx.....\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"..x..x.x..x..\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"xxxxx...xxxxx\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"..xx.....xx..\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"xxxxx...xxxxx\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"..x..x.x..x..\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\".....xxx.....\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"....xxxxx....\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\".....x.x.....\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\".....x.x.....\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> solve<span class=\"sy1\">(</span>pz <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> sz<span class=\"sy1\">,</span> sx<span class=\"sy1\">,</span> sy<span class=\"sy1\">,</span> idx<span class=\"sy1\">,</span> cnt <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> idx &gt; cnt <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>moves<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        x <span class=\"sy2\">:=</span> sx <span class=\"sy3\">+</span> moves<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        y <span class=\"sy2\">:=</span> sy <span class=\"sy3\">+</span> moves<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>x &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; x &lt; sz<span class=\"sy1\">)</span> &amp;&amp; <span class=\"sy1\">(</span>y &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; y &lt; sz<span class=\"sy1\">)</span> &amp;&amp; pz<span class=\"sy1\">[</span>x<span class=\"sy1\">][</span>y<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            pz<span class=\"sy1\">[</span>x<span class=\"sy1\">][</span>y<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> idx<br/>            <span class=\"kw1\">if</span> solve<span class=\"sy1\">(</span>pz<span class=\"sy1\">,</span> sz<span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> idx<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> cnt<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>            pz<span class=\"sy1\">[</span>x<span class=\"sy1\">][</span>y<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> findSolution<span class=\"sy1\">(</span>b <span class=\"kw4\">string</span><span class=\"sy1\">,</span> sz <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    pz <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> sz<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; sz<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        pz<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> sz<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; sz<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            pz<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> idx<span class=\"sy1\">,</span> cnt <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; sz<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; sz<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> b<span class=\"sy1\">[</span>idx<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'x'</span><span class=\"sy1\">:</span><br/>                pz<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                cnt<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'s'</span><span class=\"sy1\">:</span><br/>                pz<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>                cnt<span class=\"sy2\">++</span><br/>                x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> j<br/>            <span class=\"sy1\">}</span><br/>            idx<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> solve<span class=\"sy1\">(</span>pz<span class=\"sy1\">,</span> sz<span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> cnt<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; sz<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; sz<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> pz<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%02d  \"</span><span class=\"sy1\">,</span> pz<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">])</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"--  \"</span><span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Cannot solve this puzzle!\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    findSolution<span class=\"sy1\">(</span>board1<span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    findSolution<span class=\"sy1\">(</span>board2<span class=\"sy1\">,</span> <span class=\"nu0\">13</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 115, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/>       <span class=\"br0\">(</span>Array<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">//</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> assocs<span class=\"sy0\">,</span> elems<span class=\"sy0\">,</span> bounds<span class=\"sy0\">,</span> listArray<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Foldable <span class=\"br0\">(</span>forM<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>intercalate<span class=\"sy0\">,</span> transpose<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> Position <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> KnightBoard <span class=\"sy0\">=</span> Array Position <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>toSlot <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>toSlot <span class=\"st0\">'0'</span> <span class=\"sy0\">=</span> Just <span class=\"nu0\">0</span><br/>toSlot <span class=\"st0\">'1'</span> <span class=\"sy0\">=</span> Just <span class=\"nu0\">1</span><br/>toSlot <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> Nothing<br/>\u00a0<br/>toString <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>toString Nothing <span class=\"sy0\">=</span> replicate <span class=\"nu0\">3</span> <span class=\"st0\">' '</span><br/>toString <span class=\"br0\">(</span>Just n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> replicate <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> nn<span class=\"br0\">)</span> <span class=\"st0\">' '</span> <span class=\"sy0\">++</span> nn<br/>  <span class=\"kw1\">where</span><br/>    nn <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<br/>\u00a0<br/>chunksOf <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>chunksOf <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>chunksOf n xs <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span>chunk<span class=\"sy0\">,</span> rest<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> n xs<br/>  <span class=\"kw1\">in</span> chunk\u00a0: chunksOf n rest<br/>\u00a0<br/>showBoard <span class=\"sy0\">::</span> KnightBoard <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>showBoard board <span class=\"sy0\">=</span><br/>  intercalate <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> transpose <span class=\"sy0\">.</span> chunksOf <span class=\"br0\">(</span>height <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toString <span class=\"sy0\">$</span><br/>  elems board<br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">_,</span> <span class=\"br0\">(</span><span class=\"sy0\">_,</span> height<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> bounds board<br/>\u00a0<br/>toBoard <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> KnightBoard<br/>toBoard strs <span class=\"sy0\">=</span> board<br/>  <span class=\"kw1\">where</span><br/>    height <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> strs<br/>    width <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minimum\"><span class=\"kw3\">minimum</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">&lt;$&gt;</span> strs<span class=\"br0\">)</span><br/>    board <span class=\"sy0\">=</span><br/>      listArray <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toSlot <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> transpose <span class=\"sy0\">$</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> width <span class=\"sy0\">&lt;$&gt;</span> strs<br/>\u00a0<br/>add<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>add <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> b <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><br/>\u00a0<br/>within<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>within <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> c <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">&lt;=</span> y <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">&lt;=</span> d<br/>\u00a0<br/><span class=\"co1\">-- Enumerate valid moves given a board and a knight's position.</span><br/>validMoves <span class=\"sy0\">::</span> KnightBoard <span class=\"sy0\">-&gt;</span> Position <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Position<span class=\"br0\">]</span><br/>validMoves board position <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isValid plausible<br/>  <span class=\"kw1\">where</span><br/>    bound <span class=\"sy0\">=</span> bounds board<br/>    plausible <span class=\"sy0\">=</span><br/>      add position <span class=\"sy0\">&lt;$&gt;</span><br/>      <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    isValid pos <span class=\"sy0\">=</span> within bound pos <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maybe\"><span class=\"kw3\">maybe</span></a> False <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>board <span class=\"sy0\">!</span> pos<span class=\"br0\">)</span><br/>\u00a0<br/>isSolved <span class=\"sy0\">::</span> KnightBoard <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isSolved <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maybe\"><span class=\"kw3\">maybe</span></a> True <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">/=</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Solve the knight's tour with a simple Depth First Search.</span><br/>solveKnightTour <span class=\"sy0\">::</span> KnightBoard <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> KnightBoard<br/>solveKnightTour board <span class=\"sy0\">=</span> solve board <span class=\"nu0\">1</span> initPosition<br/>  <span class=\"kw1\">where</span><br/>    initPosition <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> Just <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> assocs board<br/>    solve boardA depth position <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> boardB <span class=\"sy0\">=</span> boardA <span class=\"sy0\">//</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>position<span class=\"sy0\">,</span> Just depth<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">in</span> <span class=\"kw1\">if</span> isSolved boardB<br/>           <span class=\"kw1\">then</span> Just boardB<br/>           <span class=\"kw1\">else</span> listToMaybe <span class=\"sy0\">$</span><br/>                mapMaybe <span class=\"br0\">(</span>solve boardB <span class=\"sy0\">$</span> depth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> validMoves boardB position<br/>\u00a0<br/>tourExA <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>tourExA <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span> <span class=\"st0\">\" 000    \"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\" 0 00   \"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\" 0000000\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"000  0 0\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"0 0  000\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"1000000 \"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"  00 0  \"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"   000  \"</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>tourExB <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>tourExB <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span> <span class=\"st0\">\"-----1-0-----\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"-----0-0-----\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"----00000----\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"-----000-----\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"--0--0-0--0--\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"00000---00000\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"--00-----00--\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"00000---00000\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"--0--0-0--0--\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"-----000-----\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"----00000----\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"-----0-0-----\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"-----0-0-----\"</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  forM<span class=\"sy0\">_</span><br/>    <span class=\"br0\">[</span>tourExA<span class=\"sy0\">,</span> tourExB<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>\\board <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">case</span> solveKnightTour <span class=\"sy0\">$</span> toBoard board <span class=\"kw1\">of</span><br/>          Nothing <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"No solution.<span class=\"es0\">\\n</span>\"</span><br/>          Just solution <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> showBoard solution <span class=\"sy0\">++</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 98, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> nCells<span class=\"sy0\">,</span> cMap<span class=\"sy0\">,</span> best<br/><span class=\"kw1\">record</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    puzzle <span class=\"sy0\">:=</span> showPuzzle<span class=\"br0\">(</span><span class=\"st0\">\"Input\"</span><span class=\"sy0\">,</span>readPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span>findStart<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><span class=\"sy0\">,&amp;</span><span class=\"kw3\">null</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    showPuzzle<span class=\"br0\">(</span><span class=\"st0\">\"Output\"</span><span class=\"sy0\">,</span> solvePuzzle<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"No solution!\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> readPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Start with a reduced puzzle space</span><br/>    p <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    nCells <span class=\"sy0\">:=</span> maxCols <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">every</span> line <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">put</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> gencells<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        maxCols <span class=\"sy0\">&lt;:=</span> <span class=\"sy0\">*</span>p<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">|</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Now normalize all rows to the same length</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>p <span class=\"kw1\">do</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">!</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">|-</span><span class=\"nu0\">1</span><span class=\"sy0\">\\</span><span class=\"br0\">(</span>maxCols <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> gencells<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> WS<span class=\"sy0\">,</span> NWS<br/>    <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>        NWS <span class=\"sy0\">:=</span> <span class=\"sy0\">~</span><span class=\"br0\">(</span>WS <span class=\"sy0\">:=</span> <span class=\"st0\">\" <span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/>        cMap <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span>     <span class=\"co1\"># Map to/from internal model</span><br/>        cMap<span class=\"br0\">[</span><span class=\"st0\">\"#\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>  cMap<span class=\"br0\">[</span><span class=\"st0\">\"_\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span>  <span class=\"nu0\">0</span><br/>        cMap<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"sy0\">:=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> cMap<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>   <span class=\"sy0\">:=</span> <span class=\"st0\">\"_\"</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    s <span class=\"sy0\">?</span> <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            w <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>WS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>NWS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">break</span><br/>            w <span class=\"sy0\">:=</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>cMap<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"sy0\">|</span>w<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">~=</span> w <span class=\"kw1\">then</span> nCells <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">suspend</span> w<br/>            <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showPuzzle<span class=\"br0\">(</span>label<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>label<span class=\"sy0\">,</span><span class=\"st0\">\" with \"</span><span class=\"sy0\">,</span>nCells<span class=\"sy0\">,</span><span class=\"st0\">\" cells:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> r <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>p <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">every</span> c <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>r <span class=\"kw1\">do</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>cMap<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">|</span>c<span class=\"br0\">)</span><span class=\"sy0\">,*</span>nCells<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> findStart<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>p<span class=\"br0\">[</span>r <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>p<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> solvePuzzle<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> path <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>best <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>            loc <span class=\"sy0\">:=</span> path<span class=\"sy0\">.</span><span class=\"me1\">getLoc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            puzzle<span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"br0\">]</span><span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> path<span class=\"sy0\">.</span><span class=\"me1\">getVal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            path <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>path<span class=\"sy0\">.</span><span class=\"me1\">getParent</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> puzzle<br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> loc<span class=\"sy0\">,</span> <span class=\"kw4\">parent</span><span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> getVal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> getLoc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> loc<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> getParent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"kw4\">parent</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> atEnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> nCells <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> visit<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>best <span class=\"sy0\">&amp;</span> validPos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> validPos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>        v <span class=\"sy0\">:=</span> val<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        xv <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> puzzle<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">fail</span><br/>        <span class=\"kw1\">if</span> xv <span class=\"sy0\">=</span> <span class=\"br0\">(</span>v<span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>  <span class=\"co1\"># make sure this path hasn't already gone there</span><br/>            ancestor <span class=\"sy0\">:=</span> self<br/>            <span class=\"kw1\">while</span> xl <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>ancestor <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>ancestor<span class=\"sy0\">.</span><span class=\"me1\">getParent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">getLoc</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xl<span class=\"sy0\">.</span><span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>xl<span class=\"sy0\">.</span><span class=\"me1\">c</span> <span class=\"sy0\">=</span> c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>            <span class=\"kw1\">return</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">initially</span><br/>    val <span class=\"sy0\">:=</span> val<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> atEnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> best <span class=\"sy0\">:=</span> self<br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 33, "block": "<pre class=\"j highlighted_source\"><span class=\"nu0\">9</span>!:<span class=\"nu0\">21</span>]<span class=\"nu0\">2</span>^<span class=\"nu0\">34</span><br/>\u00a0<br/>unpack=:verb define<br/>  mask=. +./<span class=\"st_h\">' '</span>~:<span class=\"kw2\">y</span><br/>  board=. <span class=\"sy0\">(</span><span class=\"nu0\">255</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>{a.<span class=\"sy0\">)</span> {~ {<a class=\"__cf_email__\" data-cfemail=\"644a24\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:&gt;:@:\".\"<span class=\"nu0\">0</span> mask#\"<span class=\"nu0\">1</span> <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>ex1=:unpack ];.<span class=\"nu0\">_2</span>]<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>  <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>     <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>     <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/>      <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>solve=:verb define<br/>  board=.,:<span class=\"kw2\">y</span><br/>  <span class=\"re0\">for_move.</span><span class=\"nu0\">1</span>+i.+/<span class=\"sy0\">(</span>{.a.<span class=\"sy0\">)</span>=,<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>    board=.\u00a0;move &lt;@knight\"<span class=\"nu0\">2</span> board<br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>kmoves=: ,/<span class=\"sy0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span>,:<span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"sy0\">)</span>*\"<span class=\"nu0\">1</span>/<span class=\"nu0\">_1</span>^#:i.<span class=\"nu0\">4</span><br/>\u00a0<br/>knight=:dyad define<br/>  pos=. <span class=\"sy0\">(</span>$<span class=\"kw2\">y</span><span class=\"sy0\">)</span>#:<span class=\"sy0\">(</span>,<span class=\"kw2\">y</span><span class=\"sy0\">)</span>i.<span class=\"kw2\">x</span>{a.<br/>  moves=. &lt;\"<span class=\"nu0\">1</span><span class=\"sy0\">(</span>#~ <span class=\"nu0\">0</span>&amp;&lt;: */\"<span class=\"nu0\">1</span>@:* <span class=\"sy0\">(</span>$<span class=\"kw2\">y</span><span class=\"sy0\">)</span>&amp;&gt;\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>pos+\"<span class=\"nu0\">1</span> kmoves<br/>  moves=. <span class=\"sy0\">(</span>#~ <span class=\"sy0\">(</span><span class=\"nu0\">0</span>{a.<span class=\"sy0\">)</span>={&amp;<span class=\"kw2\">y</span><span class=\"sy0\">)</span> moves<br/>  moves <span class=\"kw2\">y</span> adverb def <span class=\"sy0\">(</span><span class=\"st_h\">':'</span>;<span class=\"st_h\">'y x} m'</span><span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span> <span class=\"sy0\">(</span><span class=\"kw2\">x</span>+<span class=\"nu0\">1</span><span class=\"sy0\">)</span>{a.<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 104, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> HolyKnightsTour <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> board <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\" xxx    \"</span>,<br/>        <span class=\"st0\">\" x xx   \"</span>,<br/>        <span class=\"st0\">\" xxxxxxx\"</span>,<br/>        <span class=\"st0\">\"xxx  x x\"</span>,<br/>        <span class=\"st0\">\"x x  xxx\"</span>,<br/>        <span class=\"st0\">\"1xxxxxx \"</span>,<br/>        <span class=\"st0\">\"  xx x  \"</span>,<br/>        <span class=\"st0\">\"   xxx  \"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> base <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> moves <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        grid <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>base<span class=\"br0\">]</span><span class=\"br0\">[</span>base<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> base<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> base <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">&lt;</span> base <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'x'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                        total<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        row <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>                        col <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        grid<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>row, col, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            printResult<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c, <span class=\"kw4\">int</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> total<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> nbrs <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span>r, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nbrs.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> count <span class=\"sy0\">!=</span> total<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>nbrs, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nb <span class=\"sy0\">:</span> nbrs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r <span class=\"sy0\">=</span> nb<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            c <span class=\"sy0\">=</span> nb<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>r, c, count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> neighbors<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> nbrs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m <span class=\"sy0\">:</span> moves<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> m<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> y<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> num <span class=\"sy0\">=</span> countNeighbors<span class=\"br0\">(</span>r <span class=\"sy0\">+</span> y, c <span class=\"sy0\">+</span> x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                nbrs.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>r <span class=\"sy0\">+</span> y, c <span class=\"sy0\">+</span> x, num<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> nbrs<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> countNeighbors<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m <span class=\"sy0\">:</span> moves<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> m<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                num<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> num<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> grid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">:</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2s \"</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d \"</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 411, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// problems\u00a0:: [[String]]</span><br/>    <span class=\"kw1\">const</span> problems <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><br/>              <span class=\"st0\">\" 000    \"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\" 0 00   \"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\" 0000000\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"000  0 0\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"0 0  000\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"1000000 \"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"  00 0  \"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"   000  \"</span> <span class=\"co1\">//</span><br/>        <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><br/>              <span class=\"st0\">\"-----1-0-----\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"-----0-0-----\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"----00000----\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"-----000-----\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"--0--0-0--0--\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"00000---00000\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"--00-----00--\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"00000---00000\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"--0--0-0--0--\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"-----000-----\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"----00000----\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"-----0-0-----\"</span> <span class=\"co1\">//</span><br/>            <span class=\"sy0\">,</span> <span class=\"st0\">\"-----0-0-----\"</span> <span class=\"co1\">//</span><br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// comparing\u00a0:: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)</span><br/>    <span class=\"kw1\">const</span> comparing <span class=\"sy0\">=</span> f <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span><br/>                a <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                b <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> a <span class=\"sy0\">&lt;</span> b <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> a <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> concat <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> unit <span class=\"sy0\">=</span> <span class=\"kw1\">typeof</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">'string'</span> <span class=\"sy0\">?</span> <span class=\"st0\">''</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> unit.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span>unit<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// charColRow\u00a0:: Char -&gt; [String] -&gt; Maybe (Int, Int)</span><br/>    <span class=\"kw1\">const</span> charColRow <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> rows<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        foldr<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> iRow<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            a.<span class=\"me1\">nothing</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span> mbiCol <span class=\"sy0\">=</span> elemIndex<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> mbiCol.<span class=\"me1\">nothing</span> <span class=\"sy0\">?</span> mbiCol <span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>                    just<span class=\"sy0\">:</span> <span class=\"br0\">[</span>mbiCol.<span class=\"me1\">just</span><span class=\"sy0\">,</span> iRow<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    nothing<span class=\"sy0\">:</span> <span class=\"kw2\">false</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> a<span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                nothing<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// 2 or more arguments</span><br/>    <span class=\"co1\">// curry\u00a0:: Function -&gt; Function</span><br/>    <span class=\"kw1\">const</span> curry <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> ...<span class=\"me1\">args</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> go <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;=</span> f.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>f.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><br/>            <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> go<span class=\"br0\">(</span>xs.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span>arguments<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> go<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">slice</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span>args<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// elem\u00a0:: Eq a =&gt; a -&gt; [a] -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> elem <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">!==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// elemIndex\u00a0:: Eq a =&gt; a -&gt; [a] -&gt; Maybe Int</span><br/>    <span class=\"kw1\">const</span> elemIndex <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> i <span class=\"sy0\">=</span> xs.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>            nothing<span class=\"sy0\">:</span> i <span class=\"sy0\">===</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>            just<span class=\"sy0\">:</span> i<br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> enumFromTo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// filter\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> filter <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">filter</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// findIndex\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; Maybe Int</span><br/>    <span class=\"kw1\">const</span> findIndex <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> lng <span class=\"sy0\">=</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> lng<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>xs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                nothing<span class=\"sy0\">:</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span><br/>                just<span class=\"sy0\">:</span> i<br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>            nothing<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// foldl\u00a0:: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br/>    <span class=\"kw1\">const</span> foldl <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// foldr (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br/>    <span class=\"kw1\">const</span> foldr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">reduceRight</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// groupBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]</span><br/>    <span class=\"kw1\">const</span> groupBy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> dct <span class=\"sy0\">=</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span><br/>                    h <span class=\"sy0\">=</span> a.<span class=\"me1\">active</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> a.<span class=\"me1\">active</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">,</span><br/>                    blnGroup <span class=\"sy0\">=</span> h <span class=\"sy0\">!==</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">&amp;&amp;</span> f<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                    active<span class=\"sy0\">:</span> blnGroup <span class=\"sy0\">?</span> a.<span class=\"me1\">active</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    sofar<span class=\"sy0\">:</span> blnGroup <span class=\"sy0\">?</span> a.<span class=\"me1\">sofar</span> <span class=\"sy0\">:</span> a.<span class=\"me1\">sofar</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>a.<span class=\"me1\">active</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                active<span class=\"sy0\">:</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                sofar<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> dct.<span class=\"me1\">sofar</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>dct.<span class=\"me1\">active</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>dct.<span class=\"me1\">active</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// intercalate\u00a0:: String -&gt; [a] -&gt; String</span><br/>    <span class=\"kw1\">const</span> intercalate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// intersectBy::(a - &gt; a - &gt; Bool) - &gt; [a] - &gt; [a] - &gt; [a]</span><br/>    <span class=\"kw1\">const</span> intersectBy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>eq<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ys.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>        xs.<span class=\"me1\">filter</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> ys.<span class=\"me1\">some</span><span class=\"br0\">(</span>curry<span class=\"br0\">(</span>eq<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// justifyRight\u00a0:: Int -&gt; Char -&gt; Text -&gt; Text</span><br/>    <span class=\"kw1\">const</span> justifyRight <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> cFiller<span class=\"sy0\">,</span> strText<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        n <span class=\"sy0\">&gt;</span> strText.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>cFiller.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> strText<span class=\"br0\">)</span><br/>            .<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> strText<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// length\u00a0:: [a] -&gt; Int</span><br/>    <span class=\"kw1\">const</span> length <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> map <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// mappendComparing\u00a0:: [(a -&gt; b)] -&gt; (a -&gt; a -&gt; Ordering)</span><br/>    <span class=\"kw1\">const</span> mappendComparing <span class=\"sy0\">=</span> fs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        fs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ord<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ord <span class=\"sy0\">!==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> ord<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">const</span><br/>                a <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                b <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> a <span class=\"sy0\">&lt;</span> b <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> a <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// maximumBy\u00a0:: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; a</span><br/>    <span class=\"kw1\">const</span> maximumBy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">===</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">?</span> x <span class=\"sy0\">:</span> <span class=\"br0\">(</span><br/>            f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> x <span class=\"sy0\">:</span> a<br/>        <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">undefined</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// min\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> min <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b <span class=\"sy0\">&lt;</span> a <span class=\"sy0\">?</span> b <span class=\"sy0\">:</span> a<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> replicate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let v <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            o <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> o <span class=\"sy0\">=</span> o.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            v <span class=\"sy0\">=</span> v.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> o.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// sortBy\u00a0:: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> sortBy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">sort</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// splitOn\u00a0:: String -&gt; String -&gt; [String]</span><br/>    <span class=\"kw1\">const</span> splitOn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">split</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// take\u00a0:: Int -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> take <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unlines\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> unlines <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> until <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let v <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// zip\u00a0:: [a] -&gt; [b] -&gt; [(a,b)]</span><br/>    <span class=\"kw1\">const</span> zip <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>xs.<span class=\"me1\">length</span><span class=\"sy0\">,</span> ys.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> ys<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/>    <span class=\"kw1\">const</span> zipWith <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> min<span class=\"br0\">(</span>xs.<span class=\"me1\">length</span><span class=\"sy0\">,</span> ys.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>xs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> ys<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// HOLY KNIGHT's TOUR FUNCTIONS -------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// kmoves\u00a0:: (Int, Int) -&gt; [(Int, Int)]</span><br/>    <span class=\"kw1\">const</span> kmoves <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> map<span class=\"br0\">(</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> b <span class=\"sy0\">+</span> y<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// rowPosns\u00a0:: Int -&gt; String -&gt; [(Int, Int)]</span><br/>    <span class=\"kw1\">const</span> rowPosns <span class=\"sy0\">=</span> <span class=\"br0\">(</span>iRow<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> foldl<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>elem<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            a.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span><br/>                <span class=\"br0\">[</span>i<span class=\"sy0\">,</span> iRow<span class=\"br0\">]</span><br/>            <span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> a<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> splitOn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// hash\u00a0:: (Int, Int) -&gt; String</span><br/>    <span class=\"kw1\">const</span> hash <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>col<span class=\"sy0\">,</span> row<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> col.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'.'</span> <span class=\"sy0\">+</span> row.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Start node, and degree-sorted cache of moves from each node</span><br/>    <span class=\"co1\">// All node references are hash strings (for this cache)</span><br/>\u00a0<br/>    <span class=\"co1\">// problemModel\u00a0:: [[String]] -&gt; {cache: {nodeKey: [nodeKey], start:String}}</span><br/>    <span class=\"kw1\">const</span> problemModel <span class=\"sy0\">=</span> boardLines <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span><br/>            steps <span class=\"sy0\">=</span> foldl<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                a.<span class=\"me1\">concat</span><span class=\"br0\">(</span>rowPosns<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> boardLines<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            courseMoves <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> intersectBy<span class=\"br0\">(</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>c<span class=\"sy0\">,</span> d<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">===</span> c <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">===</span> d<span class=\"sy0\">,</span> kmoves<span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> xs<br/>            <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            maybeStart <span class=\"sy0\">=</span> charColRow<span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"sy0\">,</span> boardLines<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>            start<span class=\"sy0\">:</span> maybeStart.<span class=\"me1\">nothing</span> <span class=\"sy0\">?</span> <span class=\"st0\">''</span> <span class=\"sy0\">:</span> hash<span class=\"br0\">(</span>maybeStart.<span class=\"me1\">just</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            boardWidth<span class=\"sy0\">:</span> boardLines.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> boardLines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>            stepCount<span class=\"sy0\">:</span> steps.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>            cache<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span> moveCache <span class=\"sy0\">=</span> foldl<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> xy<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><br/>                        a<span class=\"br0\">[</span>hash<span class=\"br0\">(</span>xy<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> map<span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> courseMoves<span class=\"br0\">(</span>steps<span class=\"sy0\">,</span> xy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        a<br/>                    <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> steps<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    lstMoves <span class=\"sy0\">=</span> <span class=\"kw4\">Object</span>.<span class=\"me1\">keys</span><span class=\"br0\">(</span>moveCache<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    dctDegree <span class=\"sy0\">=</span> foldl<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                        <span class=\"br0\">(</span>a<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> moveCache<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>                            a<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> lstMoves<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">return</span> foldl<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><br/>                    a<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sortBy<span class=\"br0\">(</span>comparing<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> dctDegree<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> moveCache<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    a<br/>                <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> lstMoves<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// firstSolution\u00a0:: {nodeKey: [nodeKey]} -&gt; Int -&gt;</span><br/>    <span class=\"co1\">//      nodeKey -&gt; nodeKey -&gt; [nodeKey] -&gt;</span><br/>    <span class=\"co1\">//      -&gt; {path::[nodeKey], pathLen::Int, found::Bool}</span><br/>    <span class=\"kw1\">const</span> firstSolution <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dctMoves<span class=\"sy0\">,</span> intTarget<span class=\"sy0\">,</span> strStart<span class=\"sy0\">,</span> strNodeKey<span class=\"sy0\">,</span> path<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span><br/>            intPath <span class=\"sy0\">=</span> path.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>            moves <span class=\"sy0\">=</span> dctMoves<span class=\"br0\">[</span>strNodeKey<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>intTarget <span class=\"sy0\">-</span> intPath<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> elem<span class=\"br0\">(</span>strStart<span class=\"sy0\">,</span> moves<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                nothing<span class=\"sy0\">:</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span><br/>                just<span class=\"sy0\">:</span> <span class=\"br0\">[</span>strStart<span class=\"sy0\">,</span> strNodeKey<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                pathLen<span class=\"sy0\">:</span> intTarget<br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span><br/>            nexts <span class=\"sy0\">=</span> filter<span class=\"br0\">(</span>k <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>elem<span class=\"br0\">(</span>k<span class=\"sy0\">,</span> path<span class=\"br0\">)</span><span class=\"sy0\">,</span> moves<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            intNexts <span class=\"sy0\">=</span> nexts.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>            lstFullPath <span class=\"sy0\">=</span> <span class=\"br0\">[</span>strNodeKey<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Until we find a full path back to start</span><br/>        <span class=\"kw1\">return</span> until<span class=\"br0\">(</span><br/>            x <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x.<span class=\"me1\">nothing</span> <span class=\"sy0\">===</span> <span class=\"kw2\">false</span> <span class=\"sy0\">||</span> x.<span class=\"me1\">i</span> <span class=\"sy0\">&gt;=</span> intNexts<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            x <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span><br/>                    idx <span class=\"sy0\">=</span> x.<span class=\"me1\">i</span><span class=\"sy0\">,</span><br/>                    dctSoln <span class=\"sy0\">=</span> firstSolution<span class=\"br0\">(</span><br/>                        dctMoves<span class=\"sy0\">,</span> intTarget<span class=\"sy0\">,</span> strStart<span class=\"sy0\">,</span> nexts<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"sy0\">,</span> lstFullPath<br/>                    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                    i<span class=\"sy0\">:</span> idx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                    nothing<span class=\"sy0\">:</span> dctSoln.<span class=\"me1\">nothing</span><span class=\"sy0\">,</span><br/>                    just<span class=\"sy0\">:</span> dctSoln.<span class=\"me1\">just</span><span class=\"sy0\">,</span><br/>                    pathLen<span class=\"sy0\">:</span> dctSoln.<span class=\"me1\">pathLen</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                nothing<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span><br/>                just<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                i<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// maybeTour\u00a0:: [String] -&gt; {</span><br/>    <span class=\"co1\">//    nothing::Bool, Just::[nodeHash], i::Int: pathLen::Int }</span><br/>    <span class=\"kw1\">const</span> maybeTour <span class=\"sy0\">=</span> trackLines <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span><br/>            dctModel <span class=\"sy0\">=</span> problemModel<span class=\"br0\">(</span>trackLines<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            strStart <span class=\"sy0\">=</span> dctModel.<span class=\"me1\">start</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> strStart <span class=\"sy0\">!==</span> <span class=\"st0\">''</span> <span class=\"sy0\">?</span> firstSolution<span class=\"br0\">(</span><br/>            dctModel.<span class=\"me1\">cache</span><span class=\"sy0\">,</span> dctModel.<span class=\"me1\">stepCount</span><span class=\"sy0\">,</span> strStart<span class=\"sy0\">,</span> strStart<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>            nothing<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// showLine\u00a0:: Int -&gt; Int -&gt; String -&gt; Maybe (Int, Int) -&gt;</span><br/>    <span class=\"co1\">//              [(Int, Int, String)] -&gt; String</span><br/>    <span class=\"kw1\">const</span> showLine <span class=\"sy0\">=</span> curry<span class=\"br0\">(</span><span class=\"br0\">(</span>intCell<span class=\"sy0\">,</span> strFiller<span class=\"sy0\">,</span> maybeStart<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span><br/>            blnSoln <span class=\"sy0\">=</span> maybeStart.<span class=\"me1\">nothing</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span>startCol<span class=\"sy0\">,</span> startRow<span class=\"br0\">]</span> <span class=\"sy0\">=</span> blnSoln <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> maybeStart.<span class=\"me1\">just</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> foldl<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"br0\">[</span>iCol<span class=\"sy0\">,</span> iRow<span class=\"sy0\">,</span> sVal<span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><br/>                    col<span class=\"sy0\">:</span> iCol <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                    txt<span class=\"sy0\">:</span> a.<span class=\"me1\">txt</span> <span class=\"sy0\">+</span><br/>                        concat<span class=\"br0\">(</span>replicate<span class=\"br0\">(</span><span class=\"br0\">(</span>iCol <span class=\"sy0\">-</span> a.<span class=\"me1\">col</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> intCell<span class=\"sy0\">,</span> strFiller<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                        justifyRight<span class=\"br0\">(</span><br/>                            intCell<span class=\"sy0\">,</span> strFiller<span class=\"sy0\">,</span><br/>                            <span class=\"br0\">(</span>blnSoln <span class=\"sy0\">?</span> sVal <span class=\"sy0\">:</span> <span class=\"br0\">(</span><br/>                                iRow <span class=\"sy0\">===</span> startRow <span class=\"sy0\">&amp;&amp;</span><br/>                                iCol <span class=\"sy0\">===</span> startCol <span class=\"sy0\">?</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">)</span><br/>                        <span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                    col<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                    txt<span class=\"sy0\">:</span> <span class=\"st0\">''</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                xs<br/>            <span class=\"br0\">)</span><br/>            .<span class=\"me1\">txt</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// solutionString\u00a0:: [String] -&gt; Int -&gt; String</span><br/>    <span class=\"kw1\">const</span> solutionString <span class=\"sy0\">=</span> <span class=\"br0\">(</span>boardLines<span class=\"sy0\">,</span> iProblem<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span><br/>            dtePre <span class=\"sy0\">=</span> <span class=\"kw4\">Date</span>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            intCols <span class=\"sy0\">=</span> boardLines.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> boardLines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>            soln <span class=\"sy0\">=</span> maybeTour<span class=\"br0\">(</span>boardLines<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            intMSeconds <span class=\"sy0\">=</span> <span class=\"kw4\">Date</span>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> dtePre<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>soln.<span class=\"me1\">nothing</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">'No solution found \u2026'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span><br/>            kCol <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>            kRow <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>            kSeq <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>            steps <span class=\"sy0\">=</span> soln.<span class=\"me1\">just</span><span class=\"sy0\">,</span><br/>            lstTriples <span class=\"sy0\">=</span> zipWith<span class=\"br0\">(</span><span class=\"br0\">(</span>h<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">const</span> <span class=\"br0\">[</span>col<span class=\"sy0\">,</span> row<span class=\"br0\">]</span> <span class=\"sy0\">=</span> map<span class=\"br0\">(</span><br/>                        x <span class=\"sy0\">=&gt;</span> parseInt<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> splitOn<span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span> h<span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>col<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                steps<span class=\"sy0\">,</span><br/>                enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> soln.<span class=\"me1\">pathLen</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            cellWidth <span class=\"sy0\">=</span> length<span class=\"br0\">(</span>maximumBy<span class=\"br0\">(</span><br/>                comparing<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> length<span class=\"br0\">(</span>x<span class=\"br0\">[</span>kSeq<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> lstTriples<br/>            <span class=\"br0\">)</span><span class=\"br0\">[</span>kSeq<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>            lstGroups <span class=\"sy0\">=</span> groupBy<span class=\"br0\">(</span><br/>                <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a<span class=\"br0\">[</span>kRow<span class=\"br0\">]</span> <span class=\"sy0\">===</span> b<span class=\"br0\">[</span>kRow<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                sortBy<span class=\"br0\">(</span><br/>                    mappendComparing<span class=\"br0\">(</span><span class=\"br0\">[</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">[</span>kRow<span class=\"br0\">]</span><span class=\"sy0\">,</span> x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">[</span>kCol<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    lstTriples<br/>                <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            startXY <span class=\"sy0\">=</span> take<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> lstTriples<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            strMap <span class=\"sy0\">=</span> <span class=\"st0\">'PROBLEM '</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>parseInt<span class=\"br0\">(</span>iProblem<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'.<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span><br/>            unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>showLine<span class=\"br0\">(</span>cellWidth<span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                nothing<span class=\"sy0\">:</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span><br/>                just<span class=\"sy0\">:</span> startXY<br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> lstGroups<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            strSoln <span class=\"sy0\">=</span> <span class=\"st0\">'First solution found in c. '</span> <span class=\"sy0\">+</span><br/>            intMSeconds <span class=\"sy0\">+</span> <span class=\"st0\">' milliseconds:<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span><br/>            unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>showLine<span class=\"br0\">(</span>cellWidth<span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                nothing<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span><br/>                just<span class=\"sy0\">:</span> startXY<br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> lstGroups<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span>strSoln<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> strMap <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> strSoln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST -------------------------------------------------------------------</span><br/>    <span class=\"kw1\">return</span> unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>solutionString<span class=\"sy0\">,</span> problems<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Kotlin", "loc": 87, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> moves <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>    intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>, -<span class=\"nu0\">2</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1</span>, -<span class=\"nu0\">2</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>,  <span class=\"nu0\">2</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>    intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">2</span>,  <span class=\"nu0\">1</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> board1 <span class=\"sy0\">=</span><br/>    <span class=\"st0\">\" xxx    \"</span> +<br/>    <span class=\"st0\">\" x xx   \"</span> +<br/>    <span class=\"st0\">\" xxxxxxx\"</span> +<br/>    <span class=\"st0\">\"xxx  x x\"</span> +<br/>    <span class=\"st0\">\"x x  xxx\"</span> +<br/>    <span class=\"st0\">\"sxxxxxx \"</span> +<br/>    <span class=\"st0\">\"  xx x  \"</span> +<br/>    <span class=\"st0\">\"   xxx  \"</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> board2 <span class=\"sy0\">=</span><br/>    <span class=\"st0\">\".....s.x.....\"</span> +<br/>    <span class=\"st0\">\".....x.x.....\"</span> +<br/>    <span class=\"st0\">\"....xxxxx....\"</span> +<br/>    <span class=\"st0\">\".....xxx.....\"</span> +<br/>    <span class=\"st0\">\"..x..x.x..x..\"</span> +<br/>    <span class=\"st0\">\"xxxxx...xxxxx\"</span> +<br/>    <span class=\"st0\">\"..xx.....xx..\"</span> +<br/>    <span class=\"st0\">\"xxxxx...xxxxx\"</span> +<br/>    <span class=\"st0\">\"..x..x.x..x..\"</span> +<br/>    <span class=\"st0\">\".....xxx.....\"</span> +<br/>    <span class=\"st0\">\"....xxxxx....\"</span> +<br/>    <span class=\"st0\">\".....x.x.....\"</span> +<br/>    <span class=\"st0\">\".....x.x.....\"</span><br/>\u00a0<br/>fun solve<span class=\"br0\">(</span>pz<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span>, sz<span class=\"sy0\">:</span> Int, sx<span class=\"sy0\">:</span> Int, sy<span class=\"sy0\">:</span> Int, idx<span class=\"sy0\">:</span> Int, cnt<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>idx <span class=\"sy0\">&gt;</span> cnt<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until moves.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> sx + moves<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> sy + moves<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x in <span class=\"nu0\">0</span> until sz<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span> until sz<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> pz<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            pz<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> idx<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>pz, sz, x, y, idx + <span class=\"nu0\">1</span>, cnt<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            pz<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun findSolution<span class=\"br0\">(</span>b<span class=\"sy0\">:</span> String, sz<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pz <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>sz<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>sz<span class=\"br0\">)</span> <span class=\"br0\">{</span> -<span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> idx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until sz<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until sz<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'x'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                pz<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                cnt++<br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'s'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                pz<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                cnt++<br/>                x <span class=\"sy0\">=</span> i<br/>                y <span class=\"sy0\">=</span> j<br/>            <span class=\"br0\">}</span><br/>            idx++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>pz, sz, x, y, <span class=\"nu0\">2</span>, cnt<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until sz<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until sz<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pz<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    print<span class=\"br0\">(</span><span class=\"st0\">\"%02d  \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>pz<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                    print<span class=\"br0\">(</span><span class=\"st0\">\"--  \"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"Cannot solve this puzzle!\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    findSolution<span class=\"br0\">(</span>board1,  <span class=\"nu0\">8</span><span class=\"br0\">)</span> <br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    findSolution<span class=\"br0\">(</span>board2, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 59, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> p1<span class=\"sy0\">,</span> p1W <span class=\"sy0\">=</span> <span class=\"st0\">\".xxx.....x.xx....xxxxxxxxxx..x.xx.x..xxxsxxxxxx...xx.x.....xxx..\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><br/><span class=\"kw1\">local</span> p2<span class=\"sy0\">,</span> p2W <span class=\"sy0\">=</span> <span class=\"st0\">\".....s.x..........x.x.........xxxxx.........xxx.......x..x.x..x..xxxxx...xxxxx..xx.....xx..xxxxx...xxxxx..x..x.x..x.......xxx.........xxxxx.........x.x..........x.x.....\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><br/><span class=\"kw1\">local</span> puzzle<span class=\"sy0\">,</span> movesCnt<span class=\"sy0\">,</span> wid <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">local</span> moves <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <br/>                <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>  <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>  <span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isValid<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><span class=\"br0\">(</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> x <span class=\"sy0\">&lt;=</span> wid <span class=\"kw2\">and</span> y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> y <span class=\"sy0\">&lt;=</span> wid <span class=\"kw2\">and</span> puzzle<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> wid <span class=\"sy0\">-</span> wid<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> solve<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> s <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> s <span class=\"sy0\">&gt;</span> movesCnt <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> test<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>moves <span class=\"kw1\">do</span><br/>        test <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>        a <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> moves<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> b <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> moves<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> isValid<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            puzzle<span class=\"br0\">[</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> wid <span class=\"sy0\">-</span> wid<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<br/>            <span class=\"kw1\">if</span> solve<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>            puzzle<span class=\"br0\">[</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> wid <span class=\"sy0\">-</span> wid<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> printSolution<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> lp<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> wid <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> wid <span class=\"kw1\">do</span><br/>            lp <span class=\"sy0\">=</span> puzzle<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> j <span class=\"sy0\">*</span> wid <span class=\"sy0\">-</span> wid<span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> lp <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"   \"</span> <span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"\u00a0%.2d\"</span><span class=\"sy0\">,</span> lp <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">local</span> sx<span class=\"sy0\">,</span> sy<br/><span class=\"kw1\">function</span> fill<span class=\"br0\">(</span> pz<span class=\"sy0\">,</span> w <span class=\"br0\">)</span><br/>    puzzle <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> wid <span class=\"sy0\">=</span> w<span class=\"sy0\">;</span> movesCnt <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>pz<br/>    <span class=\"kw1\">local</span> lp<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>pz <span class=\"kw1\">do</span><br/>        lp <span class=\"sy0\">=</span> pz<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> i <span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> lp <span class=\"sy0\">==</span> <span class=\"st0\">\"x\"</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> puzzle<span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">elseif</span> lp <span class=\"sy0\">==</span> <span class=\"st0\">\".\"</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> puzzle<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> movesCnt <span class=\"sy0\">=</span> movesCnt <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span> <br/>            <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span> puzzle<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>            sx <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> wid<span class=\"sy0\">;</span> sy <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">+</span> wid <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> wid <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"co1\">-- [[ entry point ]] --</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> fill<span class=\"br0\">(</span> p1<span class=\"sy0\">,</span> p1W <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span> solve<span class=\"br0\">(</span> sx<span class=\"sy0\">,</span> sy<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> printSolution<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> fill<span class=\"br0\">(</span> p2<span class=\"sy0\">,</span> p2W <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span> solve<span class=\"br0\">(</span> sx<span class=\"sy0\">,</span> sy<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> printSolution<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 254, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> KT_Locations<span class=\"sy0\">;</span><br/><span class=\"co1\"># A sequence of locations on a 2-D board whose order might or might not</span><br/><span class=\"co1\"># matter. Suitable for representing a partial tour, a complete tour, or the</span><br/><span class=\"co1\"># required locations to visit.</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> overload <span class=\"st_h\">'\"\"'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"as_string\"</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> English<span class=\"sy0\">;</span><br/><span class=\"co1\"># 'locations' must be a reference to an array of 2-element array references,</span><br/><span class=\"co1\"># where the first element is the rank index and the second is the file index.</span><br/><span class=\"kw2\">use</span> Class<span class=\"sy0\">::</span><span class=\"me2\">Tiny</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>N locations<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>all<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> BUILD <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>N<span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>N<span class=\"br0\">}</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"N must be at least 3\"</span><span class=\"sy0\">;</span><br/>    all <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$ARG</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'ARRAY'</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$ARG</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>locations<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"At least one element of 'locations' is invalid\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> as_string <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%idxs</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$idx</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$loc</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">locations</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$idxs</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span>K<span class=\"br0\">}</span><span class=\"sy0\">,@</span><span class=\"br0\">{</span><span class=\"re0\">$loc</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$idx</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$w</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">locations</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"%${w}d\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">N</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$non_tour</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span> <span class=\"br0\">}</span> x <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$r</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$N</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$f</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$f</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$N</span><span class=\"sy0\">;</span> <span class=\"re0\">$f</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span>K<span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a><span class=\"br0\">(</span><span class=\"re0\">$idxs</span><span class=\"br0\">{</span><span class=\"re0\">$k</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"re0\">$fmt</span><span class=\"sy0\">,</span> <span class=\"re0\">$idxs</span><span class=\"br0\">{</span><span class=\"re0\">$k</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"re0\">$non_tour</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> as_idx_hash <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">N</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$pair</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">locations</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$pair</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$result</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$N</span> <span class=\"sy0\">+</span> <span class=\"re0\">$f</span><span class=\"br0\">}</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> KnightsTour<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"co1\"># If supplied, 'str' is parsed to set 'N', 'start_location', and </span><br/><span class=\"co1\"># 'locations_to_visit'.  'legal_move_idxs' is for improving performance.</span><br/><span class=\"kw2\">use</span> Class<span class=\"sy0\">::</span><span class=\"me2\">Tiny</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> N start_location locations_to_visit str legal_move_idxs <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> English<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Parallel<span class=\"sy0\">::</span><span class=\"me2\">ForkManager</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Time<span class=\"sy0\">::</span><span class=\"me2\">HiRes</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> gettimeofday tv_interval <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> BUILD <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>str<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$sl</span><span class=\"sy0\">,</span> <span class=\"re0\">$ltv</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> _parse_input_string<span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>str<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>N<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>start_location<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sl</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>locations_to_visit<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ltv</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>N<span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>N<span class=\"br0\">}</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"N must be at least 3\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a><span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>start_location<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Must supply start_location\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"start_location is invalid\"</span><br/>        <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>start_location<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">ne</span> <span class=\"st_h\">'ARRAY'</span> <span class=\"sy0\">||</span><br/>           <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>start_location<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a><span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>locations_to_visit<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Must supply locations_to_visit\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>locations_to_visit<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'KT_Locations'</span><br/>        <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"locations_to_visit must be a KT_Locations instance\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>N<span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>locations_to_visit<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">N</span><br/>        <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"locations_to_visit has mismatched board size\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">precompute_legal_moves</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _parse_input_string <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@rows</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"co2\">/[\\r\\n]+/s</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@rows</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$start_location</span><span class=\"sy0\">,</span> <span class=\"re0\">@to_visit</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$r</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$N</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$row_r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$rows</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$f</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$f</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$N</span><span class=\"sy0\">;</span> <span class=\"re0\">$f</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$row_r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$start_location</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'0'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@to_visit</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$start_location</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"No starting location provided\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$start_location</span><span class=\"sy0\">,</span><br/>            KT_Locations<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>N <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$N</span><span class=\"sy0\">,</span> locations <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\@to_visit</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> precompute_legal_moves <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>N<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$ktl_ixs</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>locations_to_visit<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">as_idx_hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$r</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$N</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$f</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$f</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$N</span><span class=\"sy0\">;</span> <span class=\"re0\">$f</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$N</span> <span class=\"sy0\">+</span> <span class=\"re0\">$f</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>legal_move_idxs<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$k</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span><br/>                _precompute_legal_move_idxs<span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"re0\">$ktl_ixs</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _precompute_legal_move_idxs <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"re0\">$ktl_ixs</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ARG</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r_plus_1</span>  <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"kw1\">my</span> <span class=\"re0\">$r_plus_2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r_minus_1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"kw1\">my</span> <span class=\"re0\">$r_minus_2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$f_plus_1</span>  <span class=\"sy0\">=</span> <span class=\"re0\">$f</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"kw1\">my</span> <span class=\"re0\">$f_plus_2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$f</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$f_minus_1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$f</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"kw1\">my</span> <span class=\"re0\">$f_minus_2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$f</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@result</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a><span class=\"br0\">(</span><span class=\"re0\">$ktl_ixs</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$ARG</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                 <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$ARG</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$N</span> <span class=\"sy0\">+</span> <span class=\"re0\">$ARG</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>                 <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><span class=\"re0\">$ARG</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$ARG</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$N</span> <span class=\"sy0\">&amp;&amp;</span><br/>                       <span class=\"re0\">$ARG</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$ARG</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$N</span><span class=\"br0\">}</span><br/>                      <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$r_plus_2</span><span class=\"sy0\">,</span>  <span class=\"re0\">$f_minus_1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$r_plus_2</span><span class=\"sy0\">,</span>  <span class=\"re0\">$f_plus_1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                       <span class=\"br0\">[</span><span class=\"re0\">$r_minus_2</span><span class=\"sy0\">,</span> <span class=\"re0\">$f_minus_1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$r_minus_2</span><span class=\"sy0\">,</span> <span class=\"re0\">$f_plus_1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                       <span class=\"br0\">[</span><span class=\"re0\">$r_plus_1</span><span class=\"sy0\">,</span>  <span class=\"re0\">$f_plus_2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span><span class=\"re0\">$r_plus_1</span><span class=\"sy0\">,</span>  <span class=\"re0\">$f_minus_2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                       <span class=\"br0\">[</span><span class=\"re0\">$r_minus_1</span><span class=\"sy0\">,</span> <span class=\"re0\">$f_plus_2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span><span class=\"re0\">$r_minus_1</span><span class=\"sy0\">,</span> <span class=\"re0\">$f_minus_2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">\\@result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> find_tour <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$num_to_visit</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">locations_to_visit</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">locations</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">N</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$start_loc_idx</span> <span class=\"sy0\">=</span><br/>        <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">start_location</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$N</span> <span class=\"sy0\">+</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">start_location</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$visited</span><span class=\"sy0\">;</span>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$N</span><span class=\"re0\">*$N</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$visited</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$visited</span><span class=\"sy0\">,</span> <span class=\"re0\">$start_loc_idx</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># We unwind the search by one level and use Parallel::ForkManager to search</span><br/>    <span class=\"co1\"># the top-level sub-trees concurrently, assuming there are enough cores.</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@next_loc_idxs</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">legal_move_idxs</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$start_loc_idx</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$pm</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Parallel<span class=\"sy0\">::</span><span class=\"me2\">ForkManager</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@next_loc_idxs</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$next_loc_idx</span> <span class=\"br0\">(</span><span class=\"re0\">@next_loc_idxs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$pm</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">start</span> <span class=\"kw1\">and</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Do the fork</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$t0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>gettimeofday<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$visited</span><span class=\"sy0\">,</span> <span class=\"re0\">$next_loc_idx</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"co1\"># (The fork cloned $visited.)</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$tour</span> <span class=\"sy0\">=</span> _find_tour_helper<span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">,</span><br/>                                     <span class=\"re0\">$num_to_visit</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                                     <span class=\"re0\">$next_loc_idx</span><span class=\"sy0\">,</span><br/>                                     <span class=\"re0\">$visited</span><span class=\"sy0\">,</span><br/>                                     <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">legal_move_idxs</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$elapsed</span> <span class=\"sy0\">=</span> tv_interval<span class=\"br0\">(</span><span class=\"re0\">$t0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> _idx_to_rank_and_file<span class=\"br0\">(</span><span class=\"re0\">$next_loc_idx</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$tour</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">@tour_locs</span> <span class=\"sy0\">=</span><br/>                <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span>_idx_to_rank_and_file<span class=\"br0\">(</span><span class=\"re0\">$ARG</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>                    <span class=\"br0\">(</span><span class=\"re0\">$start_loc_idx</span><span class=\"sy0\">,</span> <span class=\"re0\">$next_loc_idx</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"co2\">/\\s+/s</span><span class=\"sy0\">,</span> <span class=\"re0\">$tour</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$kt_locs</span> <span class=\"sy0\">=</span> KT_Locations<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>N <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$N</span><span class=\"sy0\">,</span> locations <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\@tour_locs</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Found a tour after first move ($r, $f) \"</span><span class=\"sy0\">,</span><br/>                  <span class=\"st0\">\"in $elapsed seconds:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$kt_locs</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"No tour found after first move ($r, $f). \"</span><span class=\"sy0\">,</span><br/>                  <span class=\"st0\">\"Took $elapsed seconds.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$pm</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">finish</span><span class=\"sy0\">;</span> <span class=\"co1\"># Do the exit in the child process</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$pm</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">wait_all_children</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _idx_to_rank_and_file <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$idx</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ARG</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <span class=\"re0\">$idx</span> <span class=\"sy0\">%</span> <span class=\"re0\">$N</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$idx</span> <span class=\"sy0\">-</span> <span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$N</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _find_tour_helper <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"re0\">$num_to_visit</span><span class=\"sy0\">,</span> <span class=\"re0\">$current_loc_idx</span><span class=\"sy0\">,</span> <span class=\"re0\">$visited</span><span class=\"sy0\">,</span> <span class=\"re0\">$legal_move_idxs</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ARG</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># The performance hot spot.</span><br/>    <a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"re0\">*inner_helper</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$num_to_visit</span><span class=\"sy0\">,</span> <span class=\"re0\">$current_loc_idx</span><span class=\"sy0\">,</span> <span class=\"re0\">$visited</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ARG</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$num_to_visit</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Solution found.</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@next_loc_idxs</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$legal_move_idxs</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$current_loc_idx</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$num_to_visit2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$num_to_visit</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$loc_idx2</span> <span class=\"br0\">(</span><span class=\"re0\">@next_loc_idxs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$visited</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc_idx2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$visited2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$visited</span><span class=\"sy0\">;</span><br/>            <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$visited2</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc_idx2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$recursion</span> <span class=\"sy0\">=</span> inner_helper<span class=\"br0\">(</span><span class=\"re0\">$num_to_visit2</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc_idx2</span><span class=\"sy0\">,</span> <span class=\"re0\">$visited2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$loc_idx2</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"sy0\">.</span> <span class=\"re0\">$recursion</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$recursion</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> inner_helper<span class=\"br0\">(</span><span class=\"re0\">$num_to_visit</span><span class=\"sy0\">,</span> <span class=\"re0\">$current_loc_idx</span><span class=\"sy0\">,</span> <span class=\"re0\">$visited</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/>solve_size_8_problem<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>solve_size_13_problem<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve_size_8_problem <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$problem</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">\"END_SIZE_8_PROBLEM\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">--</span>000<span class=\"sy0\">---</span><br/><span class=\"sy0\">--</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span>00<span class=\"sy0\">--</span><br/><span class=\"sy0\">-</span>0000000<br/>000<span class=\"sy0\">--</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"sy0\">--</span>000<br/><span class=\"nu0\">1000000</span><span class=\"sy0\">-</span><br/><span class=\"sy0\">--</span>00<span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"sy0\">--</span><br/><span class=\"sy0\">---</span>000<span class=\"sy0\">--</span><br/>END_SIZE_8_PROBLEM<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$kt</span> <span class=\"sy0\">=</span> KnightsTour<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>str <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$problem</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Finding a tour for an 8x8 problem...<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$kt</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">find_tour</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve_size_13_problem <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$problem</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">\"END_SIZE_13_PROBLEM\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">-----</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"sy0\">-----</span><br/><span class=\"sy0\">-----</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"sy0\">-----</span><br/><span class=\"sy0\">----</span>00000<span class=\"sy0\">----</span><br/><span class=\"sy0\">-----</span>000<span class=\"sy0\">-----</span><br/><span class=\"sy0\">--</span><span class=\"nu0\">0</span><span class=\"sy0\">--</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"sy0\">--</span><span class=\"nu0\">0</span><span class=\"sy0\">--</span><br/>00000<span class=\"sy0\">---</span>00000<br/><span class=\"sy0\">--</span>00<span class=\"sy0\">-----</span>00<span class=\"sy0\">--</span><br/>00000<span class=\"sy0\">---</span>00000<br/><span class=\"sy0\">--</span><span class=\"nu0\">0</span><span class=\"sy0\">--</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"sy0\">--</span><span class=\"nu0\">0</span><span class=\"sy0\">--</span><br/><span class=\"sy0\">-----</span>000<span class=\"sy0\">-----</span><br/><span class=\"sy0\">----</span>00000<span class=\"sy0\">----</span><br/><span class=\"sy0\">-----</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"sy0\">-----</span><br/><span class=\"sy0\">-----</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"sy0\">-----</span><br/>END_SIZE_13_PROBLEM<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$kt</span> <span class=\"sy0\">=</span> KnightsTour<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>str <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$problem</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Finding a tour for a 13x13 problem...<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$kt</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">find_tour</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 102, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@adjacent</span> <span class=\"sy0\">=</span><br/>               <span class=\"br0\">[</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>                       <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,+</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>                       <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,+</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">[</span> <span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"br0\">[</span> <span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>put <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">60</span><span class=\"sy0\">;</span><br/>\u00a0<br/>solveboard q<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/;</span><br/>    <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">END</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solveboard<span class=\"br0\">(</span><span class=\"re0\">$board</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\w+/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"re0\">$max</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@grid</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@known</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@neigh</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@degree</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$line</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span> <span class=\"re0\">$line</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"co2\">/^_/</span> <span class=\"sy0\">??</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!!</span> <span class=\"co2\">/^\\./</span> <span class=\"sy0\">??</span> Rat <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span> <span class=\"sy0\">--&gt;</span> List<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        eager gather <span class=\"kw1\">for</span> <span class=\"re0\">@adjacent</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            take <span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"sy0\">,</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw3\">defined</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$v</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H<span class=\"es0\">\\e</span>[0J\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tries</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    try_fill <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> try_fill<span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$coord</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> <span class=\"re0\">$v</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$tries</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"sy0\">+</span><span class=\"re0\">$old</span> <span class=\"kw1\">and</span> <span class=\"re0\">$old</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>eqv <span class=\"re0\">$coord</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span>               <span class=\"co1\"># conjecture grid value</span><br/>\u00a0<br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H\"</span><span class=\"sy0\">;</span>                    <span class=\"co1\"># show conjectured board</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">say</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> Rat <span class=\"br0\">{</span> <span class=\"st_h\">' '</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> <span class=\"nu0\">0</span>   <span class=\"br0\">{</span> <span class=\"st_h\">'_'</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">default</span>  <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%{$width}d\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">=</span> <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> \\n <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"sy0\">--</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\"># conjecture new degrees</span><br/>            <span class=\"kw3\">push</span> <span class=\"re0\">@degrees</span><span class=\"br0\">[</span><span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n<span class=\"sy0\">;</span>         <span class=\"co1\"># and categorize by degree</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">defined</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@ties</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"re0\">@ties</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span> <span class=\"br0\">{</span>           <span class=\"co1\"># reverse works better for this hidato anyway</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> try_fill <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>          <span class=\"co1\"># undo degree conjectures</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$old</span><span class=\"sy0\">;</span>             <span class=\"co1\"># undo grid value conjecture</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$tries tries\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 147, "block": "<pre class=\"text highlighted_source\">sequence board, warnsdorffs<br/>\u00a0<br/>integer size, limit, nchars<br/>string fmt, blank<br/>\u00a0<br/>constant ROW = 1, COL = 2<br/>constant moves = {{-1,-2},{-2,-1},{-2,1},{-1,2},{1,2},{2,1},{2,-1},{1,-2}}<br/>\u00a0<br/>function onboard(integer row, integer col)<br/>    return row&gt;=1 and row&lt;=size and col&gt;=nchars and col&lt;=nchars*size<br/>end function<br/>\u00a0<br/>procedure init_warnsdorffs()<br/>integer nrow,ncol<br/>    for row=1 to size do<br/>        for col=nchars to nchars*size by nchars do<br/>            for move=1 to length(moves) do<br/>                nrow = row+moves[move][ROW]<br/>                ncol = col+moves[move][COL]*nchars<br/>                if onboard(nrow,ncol) then<br/>                    -- (either of these would work)<br/>                    warnsdorffs[row][col] += 1<br/>--                  warnsdorffs[nrow][ncol] += 1<br/>                end if<br/>            end for<br/>        end for<br/>    end for<br/>end procedure<br/>\u00a0<br/>atom t0 = time()<br/>integer tries = 0, backtracks = 0<br/>atom t1 = time()+1<br/>function solve(integer row, integer col, integer n)<br/>integer nrow, ncol<br/>    if time()&gt;t1 then<br/>       \u00a0?{row,floor(col/nchars),n,tries}<br/>        puts(1,join(board,\"\\n\"))<br/>        t1 = time()+1<br/>--      if wait_key()='!' then\u00a0?9/0 end if<br/>    end if<br/>    tries+= 1<br/>    if n&gt;limit then return 1 end if<br/>    sequence wmoves = {}<br/>    for move=1 to length(moves) do<br/>        nrow = row+moves[move][ROW]<br/>        ncol = col+moves[move][COL]*nchars<br/>        if onboard(nrow,ncol)<br/>        and board[nrow][ncol]=' ' then<br/>            wmoves = append(wmoves,{warnsdorffs[nrow][ncol],nrow,ncol})<br/>        end if<br/>    end for<br/>    wmoves = sort(wmoves)<br/>    -- avoid creating orphans<br/>    if length(wmoves)&lt;2 or wmoves[2][1]&gt;1 then<br/>        for m=1 to length(wmoves) do<br/>            {?,nrow,ncol} = wmoves[m]<br/>            warnsdorffs[nrow][ncol] -= 1<br/>        end for<br/>        for m=1 to length(wmoves) do<br/>            {?,nrow,ncol} = wmoves[m]<br/>            board[nrow][ncol-nchars+1..ncol] = sprintf(fmt,n)<br/>            if solve(nrow,ncol,n+1) then return 1 end if<br/>            backtracks += 1<br/>            board[nrow][ncol-nchars+1..ncol] = blank<br/>        end for<br/>        for m=1 to length(wmoves) do<br/>            {?,nrow,ncol} = wmoves[m]<br/>            warnsdorffs[nrow][ncol] += 1<br/>        end for<br/>    end if<br/>    return 0<br/>end function<br/>\u00a0<br/>procedure holyknight(sequence s)<br/>integer y, ch, sx, sy<br/>    s = split(s,'\\n')<br/>    size = length(s)<br/>    nchars = length(sprintf(\"\u00a0%d\",size*size))   <br/>    fmt = sprintf(\"\u00a0%%%dd\",nchars-1)<br/>    blank = repeat(' ',nchars)<br/>    board = repeat(repeat(' ',size*nchars),size)<br/>    limit = 1<br/>    for x=1 to size do<br/>        y = nchars<br/>        for j=1 to size do<br/>            if j&gt;length(s[x]) then<br/>                ch = '-'<br/>            else<br/>                ch = s[x][j]<br/>            end if<br/>            if ch=' ' then<br/>                ch = '-'<br/>            elsif ch='0' then<br/>                ch = ' '<br/>                limit += 1<br/>            elsif ch='1' then<br/>                sx = x<br/>                sy = y<br/>            end if<br/>            board[x][y] = ch<br/>            y += nchars<br/>        end for<br/>    end for<br/>    warnsdorffs = repeat(repeat(0,size*nchars),size)<br/>    init_warnsdorffs()<br/>    t0 = time()<br/>    tries = 0<br/>    backtracks = 0<br/>    t1 = time()+1<br/>    if solve(sx,sy,2) then<br/>        puts(1,join(board,\"\\n\"))<br/>        printf(1,\"\\nsolution found in\u00a0%d tries,\u00a0%d backtracks (%3.2fs)\\n\",{tries,backtracks,time()-t0})<br/>    else<br/>        puts(1,\"no solutions found\\n\")<br/>    end if<br/>end procedure<br/>\u00a0<br/>constant board1 = \"\"\"<br/> 000<br/> 0 00<br/> 0000000<br/>000  0 0<br/>0 0  000<br/>1000000<br/>  00 0<br/>   000\"\"\"<br/>\u00a0<br/>holyknight(board1)<br/>\u00a0<br/>constant board2 = \"\"\"<br/>-----1-0-----<br/>-----0-0-----<br/>----00000----<br/>-----000-----<br/>--0--0-0--0--<br/>00000---00000<br/>--00-----00--<br/>00000---00000<br/>--0--0-0--0--<br/>-----000-----<br/>----00000----<br/>-----0-0-----<br/>-----0-0-----\"\"\"<br/>\u00a0<br/>holyknight(board2)<br/>\u00a0<br/>{} = wait_key()</pre>"}, {"lang": "Python", "loc": 56, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">sys</span> <span class=\"kw1\">import</span> stdout<br/>moves <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span>pz<span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> sx<span class=\"sy0\">,</span> sy<span class=\"sy0\">,</span> idx<span class=\"sy0\">,</span> cnt<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> idx <span class=\"sy0\">&gt;</span> cnt:<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>moves<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        x <span class=\"sy0\">=</span> sx + moves<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        y <span class=\"sy0\">=</span> sy + moves<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> sz <span class=\"sy0\">&gt;</span> x <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span> <span class=\"kw1\">and</span> sz <span class=\"sy0\">&gt;</span> y <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span> <span class=\"kw1\">and</span> pz<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            pz<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> idx<br/>            <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> solve<span class=\"br0\">(</span>pz<span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> idx + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cnt<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>            pz<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> find_solution<span class=\"br0\">(</span>pz<span class=\"sy0\">,</span> sz<span class=\"br0\">)</span>:<br/>    p <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>sz<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>sz<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    idx <span class=\"sy0\">=</span> x <span class=\"sy0\">=</span> y <span class=\"sy0\">=</span> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>sz<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>sz<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> pz<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"x\"</span>:<br/>                p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                cnt +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">elif</span> pz<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"s\"</span>:<br/>                p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                cnt +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                x <span class=\"sy0\">=</span> i<br/>                y <span class=\"sy0\">=</span> j<br/>            idx +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> solve<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> sz<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cnt<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>sz<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>sz<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">if</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> -<span class=\"nu0\">1</span>:<br/>                    stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\" {:0{}d}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">else</span>:<br/>                    stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"   \"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Cannot solve this puzzle!\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># entry point</span><br/>find_solution<span class=\"br0\">(</span><span class=\"st0\">\".xxx.....x.xx....xxxxxxxxxx..x.xx.x..xxxsxxxxxx...xx.x.....xxx..\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>find_solution<span class=\"br0\">(</span><span class=\"st0\">\".....s.x..........x.x.........xxxxx.........xxx.......x..x.x..x..xxxxx...xxxxx..xx.....xx..xxxxx...xxxxx..x..x.x..x.......xxx.........xxxxx.........x.x..........x.x.....\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 38, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require \"hidato-family-solver.rkt\")<br/>\u00a0<br/>(define knights-neighbour-offsets<br/>  '((+1 +2) (-1 +2) (+1 -2) (-1 -2) (+2 +1) (-2 +1) (+2 -1) (-2 -1)))<br/>\u00a0<br/>(define solve-a-knights-tour (solve-hidato-family knights-neighbour-offsets))<br/>\u00a0<br/>(displayln<br/> (puzzle-&gt;string<br/>  (solve-a-knights-tour<br/>   #(#(_ 0 0 0 _ _ _ _)<br/>     #(_ 0 _ 0 0 _ _ _)<br/>     #(_ 0 0 0 0 0 0 0)<br/>     #(0 0 0 _ _ 0 _ 0)<br/>     #(0 _ 0 _ _ 0 0 0)<br/>     #(1 0 0 0 0 0 0 _)<br/>     #(_ _ 0 0 _ 0 _ _)<br/>     #(_ _ _ 0 0 0 _ _)))))<br/>\u00a0<br/>(newline)<br/>\u00a0<br/>(displayln<br/> (puzzle-&gt;string<br/>  (solve-a-knights-tour<br/>   #(#(- - - - - 1 - 0 - - - - -)<br/>     #(- - - - - 0 - 0 - - - - -)<br/>     #(- - - - 0 0 0 0 0 - - - -)<br/>     #(- - - - - 0 0 0 - - - - -)<br/>     #(- - 0 - - 0 - 0 - - 0 - -)<br/>     #(0 0 0 0 0 - - - 0 0 0 0 0)<br/>     #(- - 0 0 - - - - - 0 0 - -)<br/>     #(0 0 0 0 0 - - - 0 0 0 0 0)<br/>     #(- - 0 - - 0 - 0 - - 0 - -)<br/>     #(- - - - - 0 0 0 - - - - -)<br/>     #(- - - - 0 0 0 0 0 - - - -)<br/>     #(- - - - - 0 - 0 - - - - -)<br/>     #(- - - - - 0 - 0 - - - - -)))))</pre>"}, {"lang": "REXX", "loc": 64, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program solves the  holy knight's tour  problem for a (general)  NxN  chessboard.*/</span><br/>blank=<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'//'</span>, <span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>            <span class=\"coMULTI\">/*see if the pennies are to be shown.  */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>  ops   <span class=\"st0\">'/'</span>   cent                      <span class=\"coMULTI\">/*obtain the options and the pennies.  */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  ops  N  sRank  sFile <span class=\"sy0\">.</span>                <span class=\"coMULTI\">/*boardsize, starting position, pennys.*/</span><br/><span class=\"kw1\">if</span>     N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>     N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>     N=<span class=\"nu0\">8</span>          <span class=\"coMULTI\">/*no boardsize specified?  Use default.*/</span><br/><span class=\"kw1\">if</span> sRank==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> sRank==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> sRank=N          <span class=\"coMULTI\">/*starting rank given?      \"      \"   */</span><br/><span class=\"kw1\">if</span> sFile==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> sFile==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> sFile=<span class=\"nu0\">1</span>          <span class=\"coMULTI\">/*    \"    file   \"         \"      \"   */</span><br/>NN=N<span class=\"sy0\">**</span><span class=\"nu0\">2</span>;  NxN=<span class=\"st0\">'a '</span> N<span class=\"st0\">\"x\"</span>N <span class=\"st0\">' chessboard'</span>           <span class=\"coMULTI\">/*file  [\u2193]          [\u2193]   r=rank      */</span><br/>@<span class=\"sy0\">.</span>=;              <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  <span class=\"kw1\">do</span> f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;   @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>f=<span class=\"sy0\">.</span>;    <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*f*/</span>;        <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*r*/</span><br/>                                                 <span class=\"coMULTI\">/*[\u2191]  create an empty  NxN chessboard.*/</span><br/>cent=<span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span> cent, , <span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>            <span class=\"coMULTI\">/*allow use of comma (,) for separater.*/</span><br/>cents=<span class=\"nu0\">0</span>                                          <span class=\"coMULTI\">/*number of pennies on the chessboard. */</span><br/>       <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>  cent<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>                       <span class=\"coMULTI\">/* [\u2193]  possibly place the pennies.    */</span><br/>       <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  cent   cr  cf  x  <span class=\"st0\">'/'</span>  cent    <span class=\"coMULTI\">/*extract where to place the pennies.  */</span><br/>       <span class=\"kw1\">if</span> x=<span class=\"st0\">''</span>   <span class=\"kw3\">then</span> x=<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/*if number not specified, use 1 penny.*/</span><br/>       <span class=\"kw1\">if</span> cr=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                    <span class=\"coMULTI\">/*support the  \"blanking\"  option.     */</span><br/>                               <span class=\"kw1\">do</span> cf=cf  <span class=\"kw2\">for</span> x   <span class=\"coMULTI\">/*now, place  X  pennies on chessboard.*/</span><br/>                               @<span class=\"sy0\">.</span>cr<span class=\"sy0\">.</span>cf= <span class=\"st0\">'\u00a2'</span>      <span class=\"coMULTI\">/*mark chessboard position with a penny*/</span><br/>                               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*cf*/</span>      <span class=\"coMULTI\">/* [\u2191]  places X pennies on chessboard.*/</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>                           <span class=\"coMULTI\">/* [\u2191]  allows of the placing of  X  \u00a2s*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  traipse through the chessboard.*/</span><br/>    <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  <span class=\"kw1\">do</span> f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  cents=cents + <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>f==<span class=\"st0\">'\u00a2'</span><span class=\"br0\">)</span>;   <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*f*/</span>;     <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*r*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  count the number of pennies.   */</span><br/><span class=\"kw1\">if</span> cents<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> cents   <span class=\"st0\">'pennies placed on chessboard.'</span><br/>target=NN - cents                                <span class=\"coMULTI\">/*use this as the number of moves left.*/</span><br/>                   Kr = <span class=\"st0\">'2 1 -1 -2 -2 -1  1  2'</span>  <span class=\"coMULTI\">/*the legal \"rank\"  moves for a knight.*/</span><br/>                   Kf = <span class=\"st0\">'1 2  2  1 -1 -2 -2 -1'</span>  <span class=\"coMULTI\">/* \"    \"   \"file\"    \"    \"  \"    \"   */</span><br/>kr<span class=\"sy0\">.</span>M=<span class=\"kw6\">words</span><span class=\"br0\">(</span>Kr<span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*number of possible moves for a Knight*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> Kr  Kr<span class=\"sy0\">.</span>1 Kr<span class=\"sy0\">.</span>2 Kr<span class=\"sy0\">.</span>3 Kr<span class=\"sy0\">.</span>4 Kr<span class=\"sy0\">.</span>5 Kr<span class=\"sy0\">.</span>6 Kr<span class=\"sy0\">.</span>7 Kr<span class=\"sy0\">.</span>8   <span class=\"coMULTI\">/*parse the legal moves by hand.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> Kf  Kf<span class=\"sy0\">.</span>1 Kf<span class=\"sy0\">.</span>2 Kf<span class=\"sy0\">.</span>3 Kf<span class=\"sy0\">.</span>4 Kf<span class=\"sy0\">.</span>5 Kf<span class=\"sy0\">.</span>6 Kf<span class=\"sy0\">.</span>7 Kf<span class=\"sy0\">.</span>8   <span class=\"coMULTI\">/*  \"    \"    \"     \"    \"   \"  */</span><br/>beg= <span class=\"st0\">'-1-'</span>                                       <span class=\"coMULTI\">/* [\u2191]   create the  NxN  chessboard.  */</span><br/><span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>sRank<span class=\"sy0\">.</span>sFile ==<span class=\"sy0\">.</span>    <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span>sRank<span class=\"sy0\">.</span>sFile=beg   <span class=\"coMULTI\">/*the knight's starting position.      */</span><br/><span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>sRank<span class=\"sy0\">.</span>sFile<span class=\"sy0\">\\</span>==beg  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>    sRank=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N   <span class=\"coMULTI\">/*find starting rank for the knight.*/</span><br/>                                <span class=\"kw1\">do</span> sFile=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N   <span class=\"coMULTI\">/*  \"     \"     file  \"   \"     \"   */</span><br/>                                <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>sRank<span class=\"sy0\">.</span>sFile<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                                @<span class=\"sy0\">.</span>sRank<span class=\"sy0\">.</span>sFile=beg   <span class=\"coMULTI\">/*the knight's starting position.   */</span><br/>                                <span class=\"kw1\">leave</span> sRank         <span class=\"coMULTI\">/*we have a spot, so leave all this.*/</span><br/>                                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*sFile*/</span><br/>                             <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*sRank*/</span><br/>@hkt= <span class=\"st0\">\"holy knight's tour\"</span>                       <span class=\"coMULTI\">/*a handy\u2500dandy literal for the  SAYs. */</span><br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>move<span class=\"br0\">(</span><span class=\"nu0\">2</span>,sRank,sFile<span class=\"br0\">)</span>  <span class=\"sy0\">&amp;</span>  <span class=\"sy0\">\\</span><span class=\"br0\">(</span>N==<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'No'</span>    @hkt    <span class=\"st0\">\"solution for\"</span>        NxN<span class=\"st0\">'.'</span><br/>                                     <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'A solution for the'</span>   @hkt   <span class=\"st0\">\"on\"</span>    NxN<span class=\"st0\">':'</span><br/>\u00a0<br/>                                                 <span class=\"coMULTI\">/*show chessboard with moves and coins.*/</span><br/>!=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">18</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;           <span class=\"kw1\">say</span>           <span class=\"coMULTI\">/*used for indentation of chessboard.  */</span><br/>_=<span class=\"kw6\">substr</span><span class=\"br0\">(</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"\u253c\u2500\u2500\u2500\"</span>, N<span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;   <span class=\"kw1\">say</span> \u00a0! <span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"st0\">'\u250c'</span>_<span class=\"st0\">\"\u2510\"</span>, <span class=\"st0\">'\u252c'</span>, <span class=\"st0\">\"\u253c\"</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">do</span>   r=N  <span class=\"kw2\">for</span> N  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;       <span class=\"kw1\">if</span> r<span class=\"sy0\">\\</span>==N      <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>\u00a0! <span class=\"st0\">'\u251c'</span>_<span class=\"st0\">\"\u2524\"</span>;     <a class=\"__cf_email__\" data-cfemail=\"9dd1a0dd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span><br/>       <span class=\"kw1\">do</span> f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;\u00a0<a class=\"__cf_email__\" data-cfemail=\"9fa0a2df\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>f;     <span class=\"kw1\">if</span>\u00a0?==target  <span class=\"kw3\">then</span>\u00a0?=<span class=\"st0\">'end'</span>;           L=L<span class=\"st0\">'\u2502'</span><span class=\"kw6\">center</span><span class=\"br0\">(</span>?,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>       <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*f*/</span><br/>     <span class=\"kw1\">if</span> blank <span class=\"kw3\">then</span> L=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>L,,<span class=\"st0\">'\u00a2'</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*blank out the pennies on chessboard\u00a0?*/</span><br/>     <span class=\"kw1\">say</span>\u00a0!  <span class=\"kw6\">translate</span><span class=\"br0\">(</span>L<span class=\"st0\">'\u2502'</span>, , <span class=\"sy0\">.</span><span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*display  a  rank of the  chessboard. */</span><br/>     <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*r*/</span>                            <span class=\"coMULTI\">/*19x19 chessboard can be shown 80 cols*/</span><br/><span class=\"kw1\">say</span> \u00a0!  <span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"st0\">'\u2514'</span>_<span class=\"st0\">\"\u2518\"</span>, <span class=\"st0\">'\u2534'</span>, <span class=\"st0\">\"\u253c\"</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*display the last rank of chessboard. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>move: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> Kr<span class=\"sy0\">.</span> Kf<span class=\"sy0\">.</span> target; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> #,rank,file <span class=\"coMULTI\">/*obtain move,rank,file.*/</span><br/>        <span class=\"kw1\">do</span> t=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> Kr<span class=\"sy0\">.</span>M;   nr=rank+Kr<span class=\"sy0\">.</span>t;         nf=file+Kf<span class=\"sy0\">.</span>t  <span class=\"coMULTI\">/*position of the knight*/</span><br/>        <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nf==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;                   @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nf=#     <span class=\"coMULTI\">/*Empty? Knight can move*/</span><br/>                               <span class=\"kw1\">if</span> #==target       <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/*is this the last move?*/</span><br/>                               <span class=\"kw1\">if</span> move<span class=\"br0\">(</span>#+<span class=\"nu0\">1</span>,nr,nf<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/* \"   \"   \"    \"    \"  */</span><br/>                               @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nf=<span class=\"sy0\">.</span>                        <span class=\"coMULTI\">/*undo the above move.  */</span><br/>                            <span class=\"kw3\">end</span>                                 <span class=\"coMULTI\">/*try a different move. */</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*t*/</span>                                             <span class=\"coMULTI\">/* [\u2191]  all moves tried.*/</span><br/>     <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                                                   <span class=\"coMULTI\">/*tour isn't possible.  */</span></pre>"}, {"lang": "Ruby", "loc": 17, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'HLPsolver'</span><br/>\u00a0<br/>ADJACENT = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>boardy = <span class=\"co4\">&lt;&lt;EOS<br/>. . 0 0 0<br/>. . 0 . 0 0<br/>. 0 0 0 0 0 0 0<br/>0 0 0 . . 0 . 0<br/>0 . 0 . . 0 0 0<br/>1 0 0 0 0 0 0<br/>. . 0 0 . 0<br/>. . . 0 0 0<br/>EOS</span><br/>t0 = <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span><br/>HLPsolver.<span class=\"me1\">new</span><span class=\"br0\">(</span>boardy<span class=\"br0\">)</span>.<span class=\"me1\">solve</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\" #{Time.now - t0} sec\"</span></pre>"}, {"lang": "Tcl", "loc": 98, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create HKTSolver <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> grid start limit<br/>    constructor <span class=\"br0\">{</span>puzzle<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> grid <span class=\"re0\">$puzzle</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$grid</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> cell <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> start <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">incr</span> limit <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$cell</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exist start<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"no starting position found\"</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> moves <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>\t        -<span class=\"nu0\">1</span> -<span class=\"nu0\">2</span>   <span class=\"nu0\">1</span> -<span class=\"nu0\">2</span><br/>\t    -<span class=\"nu0\">2</span> -<span class=\"nu0\">1</span>          <span class=\"nu0\">2</span> -<span class=\"nu0\">1</span><br/>\t    -<span class=\"nu0\">2</span>  <span class=\"nu0\">1</span>          <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><br/>\t        -<span class=\"nu0\">1</span> <span class=\"nu0\">2</span>    <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> Moves <span class=\"br0\">{</span>g r c<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> valid <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dr dc<span class=\"br0\">}</span> <span class=\"br0\">[</span>my moves<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> R <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> + <span class=\"re0\">$dr</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> C <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> + <span class=\"re0\">$dc</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$g</span> <span class=\"re0\">$R</span> <span class=\"re0\">$C</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> valid <span class=\"re0\">$R</span> <span class=\"re0\">$C</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$valid</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> Solve <span class=\"br0\">{</span>g r c v<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lset</span> g <span class=\"re0\">$r</span> <span class=\"re0\">$c</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> v<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$v</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$g</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>r c<span class=\"br0\">}</span> <span class=\"br0\">[</span>my Moves <span class=\"re0\">$g</span> <span class=\"re0\">$r</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>my Solve <span class=\"re0\">$g</span> <span class=\"re0\">$r</span> <span class=\"re0\">$c</span> <span class=\"re0\">$v</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">continue</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> solve <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span>==<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> grid <span class=\"br0\">[</span>my Solve <span class=\"re0\">$grid</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$start</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">return</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"solution not possible\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> solution <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$grid</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> parsePuzzle <span class=\"br0\">{</span>str<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> line <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$str</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$line</span><span class=\"br0\">]</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"kw2\">lappend</span> rows <span class=\"br0\">[</span>lmap <span class=\"br0\">{</span>- c<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -all -inline <span class=\"br0\">{</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span>\\s<span class=\"sy0\">?</span><span class=\"br0\">}</span> <span class=\"re0\">$line</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"st0\">\" \"</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"re0\">$c</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> len <span class=\"br0\">[</span>tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">max</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lmap r <span class=\"re0\">$rows</span> <span class=\"br0\">{</span><span class=\"kw2\">llength</span> <span class=\"re0\">$r</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$rows</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$rows</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$len</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> rows <span class=\"re0\">$i</span> end+<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$rows</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> showPuzzle <span class=\"br0\">{</span>grid name<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> row <span class=\"re0\">$grid</span> <span class=\"br0\">{</span><span class=\"kw1\">foreach</span> cell <span class=\"re0\">$row</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$cell</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> len <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$c</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> u <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"_\"</span> <span class=\"re0\">$len</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$name with $c cells\"</span><br/>    <span class=\"kw1\">foreach</span> row <span class=\"re0\">$grid</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\" \u00a0%s\"</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap c <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">format</span> <span class=\"st0\">\"%*s\"</span> <span class=\"re0\">$len</span> <span class=\"br0\">[</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span>==-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw2\">list</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span>==<span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> u<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> c<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> puzzle <span class=\"br0\">[</span>parsePuzzle <span class=\"br0\">{</span><br/>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>  <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>     <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>     <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/>      <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>showPuzzle <span class=\"re0\">$puzzle</span> <span class=\"st0\">\"Input\"</span><br/>HKTSolver create hkt <span class=\"re0\">$puzzle</span><br/>hkt solve<br/>showPuzzle <span class=\"br0\">[</span>hkt solution<span class=\"br0\">]</span> <span class=\"st0\">\"Output\"</span></pre>"}]}