{"task": "One-dimensional_cellular_automata", "blocks": [{"lang": "8th", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ one-dimensional automaton<br/>\u00a0<br/>\\ direct map of input state to output state:<br/>{<br/>  \"   \"\u00a0: 32,<br/>  \"  #\"\u00a0: 32,<br/>  \" # \"\u00a0: 32,<br/>  \" ##\"\u00a0: 35,<br/>  \"#  \"\u00a0: 32,<br/>  \"# #\"\u00a0: 35,<br/>  \"## \"\u00a0: 35,<br/>  \"###\"\u00a0: 32,<br/>} var, lifemap<br/>\u00a0<br/>: transition \\ s ix (r:s') -- (r:s')<br/>    &gt;r dup <a class=\"__cf_email__\" data-cfemail=\"7c0e3c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> n:1- 3 s:slice<br/>    lifemap @ swap caseof<br/>    r&gt; swap <a class=\"__cf_email__\" data-cfemail=\"a5d7e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -rot s:! &gt;r\u00a0;<br/>\u00a0<br/>\\ run over 'state' and generate new state<br/>: gen \\ s -- s'<br/>  clone &gt;r<br/>  dup s:len 2 n:-<br/>  ' transition 1 rot loop<br/>  drop r&gt;\u00a0;<br/>\u00a0<br/>: life \\ s -- s'<br/>  dup . cr gen \u00a0;<br/>\u00a0<br/>\" ### ## # # # #  #  \" ' life 10 times<br/>bye<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 33, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rc-step-r <span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp <span class=\"br0\">(</span>rest cells<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>second cells<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>xor <span class=\"br0\">(</span>first cells<span class=\"br0\">)</span> <span class=\"br0\">(</span>third cells<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>first cells<span class=\"br0\">)</span> <span class=\"br0\">(</span>third cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>rc-step-r <span class=\"br0\">(</span>rest cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rc-step <span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>first cells<span class=\"br0\">)</span> <span class=\"br0\">(</span>second cells<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>rc-step-r cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rc-steps-r <span class=\"br0\">(</span>cells n prev<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>zp n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> cells prev<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>new <span class=\"br0\">(</span>rc-step cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> new <span class=\"br0\">(</span>rc-steps-r new <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rc-steps <span class=\"br0\">(</span>cells n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> cells <span class=\"br0\">(</span>rc-steps-r cells n <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pretty-row <span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp row<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>cw <span class=\"st0\">\"~%\"</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">prog2</span>$ <span class=\"br0\">(</span>cw <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>first row<span class=\"br0\">)</span> <span class=\"st0\">\"#\"</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>pretty-row <span class=\"br0\">(</span>rest row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pretty-output <span class=\"br0\">(</span>out<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp out<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">prog2</span>$ <span class=\"br0\">(</span>pretty-row <span class=\"br0\">(</span>first out<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>pretty-output <span class=\"br0\">(</span>rest out<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 42, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Cellular_Automata <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Petri_Dish <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Step <span class=\"br0\">(</span>Culture\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Petri_Dish<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Left \u00a0: Boolean\u00a0:= False;<br/>      This \u00a0: Boolean;<br/>      Right\u00a0: Boolean;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Index <span class=\"kw3\">in</span> Culture'First..<span class=\"me1\">Culture</span>'Last - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         Right\u00a0:= Culture <span class=\"br0\">(</span>Index + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         This \u00a0:= Culture <span class=\"br0\">(</span>Index<span class=\"br0\">)</span>;<br/>         Culture <span class=\"br0\">(</span>Index<span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span>This <span class=\"kw2\">and</span> <span class=\"br0\">(</span>Left <span class=\"kw2\">xor</span> Right<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> This <span class=\"kw2\">and</span> Left <span class=\"kw2\">and</span> Right<span class=\"br0\">)</span>;<br/>         Left\u00a0:= This;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Culture <span class=\"br0\">(</span>Culture'Last<span class=\"br0\">)</span>\u00a0:= Culture <span class=\"br0\">(</span>Culture'Last<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> Left;<br/>   <span class=\"kw1\">end</span> Step;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Culture\u00a0: Petri_Dish<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Index <span class=\"kw3\">in</span> Culture'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Culture <span class=\"br0\">(</span>Index<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Put <span class=\"br0\">(</span>'#'<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Put <span class=\"br0\">(</span>'_'<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   Culture\u00a0: Petri_Dish\u00a0:=<br/>      <span class=\"br0\">(</span>  False, True, True,  True, False, True,  True, False, True, False, True,<br/>         False, True, False, True, False, False, True, False, False<br/>      <span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> Generation <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">9</span> <span class=\"kw1\">loop</span><br/>      Put <span class=\"br0\">(</span><span class=\"st0\">\"Generation\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Generation<span class=\"br0\">)</span> &amp; ' '<span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span>Culture<span class=\"br0\">)</span>;<br/>      New_Line;<br/>      Step <span class=\"br0\">(</span>Culture<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Cellular_Automata;</pre>"}, {"lang": "ALGOL 68", "loc": 43, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> stop generation <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> universe width <span class=\"sy1\">=</span> 20<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> alive or dead <span class=\"sy1\">=</span> $b<span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"_\"</span><span class=\"br0\">)</span>$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">BITS</span> universe <span class=\"sy1\">:=</span> <span class=\"re0\">2r01110110101010100100</span><span class=\"sy1\">;</span><br/>   <span class=\"coMULTI\"># universe\u00a0:= BIN ( ENTIER ( random * max int ) ); #</span><br/><span class=\"kw3\">INT</span> upb universe <span class=\"sy1\">=</span> <span class=\"kw20\">bits width</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> lwb universe <span class=\"sy1\">=</span> <span class=\"kw20\">bits width</span> <span class=\"sy1\">-</span> universe width <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> couple <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> parent<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> lwb<span class=\"sy1\">,</span> upb<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw4\">SHORT</span> <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> bit <span class=\"kw2\">FROM</span> lwb <span class=\"kw2\">TO</span> upb <span class=\"kw2\">DO</span><br/>    sum <span class=\"sy1\">+:=</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>bit <span class=\"kw12\">ELEM</span> parent<span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  sum <span class=\"sy1\">=</span> 2<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> generation <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">WHILE</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Generation \"</span>d<span class=\"st0\">\": \"</span>$<span class=\"sy1\">,</span> generation<span class=\"sy1\">,</span><br/>         $f<span class=\"br0\">(</span>alive or dead<span class=\"br0\">)</span>$<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">BOOL</span><span class=\"br0\">(</span>universe<span class=\"br0\">)</span><span class=\"br0\">[</span>lwb universe<span class=\"sy1\">:</span>upb universe<span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>         $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># WHILE #</span> generation <span class=\"sy1\">&lt;</span> stop generation <span class=\"kw2\">DO</span><br/>  <span class=\"kw3\">BITS</span> next universe <span class=\"sy1\">:=</span> <span class=\"re0\">2r0</span><span class=\"sy1\">;</span>  <br/>\u00a0<br/>  <span class=\"coMULTI\"># process the first event horizon manually #</span><br/>  <span class=\"kw2\">IF</span> couple<span class=\"br0\">(</span>universe<span class=\"sy1\">,</span>lwb universe<span class=\"sy1\">,</span>lwb universe <span class=\"sy1\">+</span> 1<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <br/>    next universe <span class=\"sy1\">:=</span> <span class=\"re0\">2r10</span><br/>  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># process the middle kingdom in a loop #</span><br/>  <span class=\"kw2\">FOR</span> bit <span class=\"kw2\">FROM</span> lwb universe <span class=\"sy1\">+</span> 1 <span class=\"kw2\">TO</span> upb universe <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span> <br/>    <span class=\"kw2\">IF</span> couple<span class=\"br0\">(</span>universe<span class=\"sy1\">,</span>bit<span class=\"sy1\">-</span>1<span class=\"sy1\">,</span>bit<span class=\"sy1\">+</span>1<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>      next universe <span class=\"sy1\">:=</span> next universe <span class=\"kw16\">OR</span> <span class=\"re0\">2r1</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    next universe <span class=\"sy1\">:=</span> next universe <span class=\"kw11\">SHL</span> 1<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span> <br/>\u00a0<br/>  <span class=\"coMULTI\"># process the last event horizon manually #</span><br/>  <span class=\"kw2\">IF</span> couple<span class=\"br0\">(</span>universe<span class=\"sy1\">,</span> upb universe <span class=\"sy1\">-</span> 1<span class=\"sy1\">,</span> upb universe<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <br/>    next universe <span class=\"sy1\">:=</span> next universe <span class=\"kw16\">OR</span> <span class=\"re0\">2r1</span><br/>  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>  universe <span class=\"sy1\">:=</span> next universe<br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "ALGOL W", "loc": 20, "block": "<pre class=\"text highlighted_source\">begin<br/>    string(20) state;<br/>    string(20) nextState;<br/>    integer    generation;<br/>    generation\u00a0:= 0;<br/>    state\u00a0:= \"_###_##_#_#_#_#__#__\";<br/>    while begin<br/>        write( i_w\u00a0:= 1, s_w\u00a0:= 1, \"Generation \", generation, state );<br/>        nextState\u00a0:= \"____________________\";<br/>        for cPos\u00a0:= 1 until 18 do begin<br/>            string(3) curr;<br/>            curr\u00a0:= state( cPos - 1 // 3 );<br/>            nextState( cPos // 1 )\u00a0:= if curr = \"_##\" or curr = \"#_#\" or curr = \"##_\" then \"#\" else \"_\"<br/>        end for_cPos\u00a0;<br/>        ( state not = nextState )<br/>    end do begin<br/>        state\u00a0:= nextState;<br/>        generation\u00a0:= generation + 1<br/>    end while_not_finished<br/>end.</pre>"}, {"lang": "AutoHotkey", "loc": 23, "block": "<pre class=\"autohotkey highlighted_source\">n <span class=\"sy0\">:=</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> n1 <span class=\"sy0\">:=</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> v0 <span class=\"sy0\">:=</span> v<span class=\"re0\">%n1%</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>        <span class=\"co1\">; set grid dimensions, and fixed cells</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n <span class=\"br0\">{</span>                                  <span class=\"co1\">; draw a line of checkboxes</span><br/>   v<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Checkbox\"><span class=\"kw8\">CheckBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"y10 w17 h17 gCheck x\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">*</span><span class=\"nu0\">17</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"st0\">\" vv\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">5</span> y6<span class=\"sy0\">,</span> step               <span class=\"co1\">; button to step to next generation</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">Check:<br/></span>   <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a> <span class=\"re0\">%A_GuiControl%</span>             <span class=\"co1\">; set cells by the mouse</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">ButtonStep: </span>                                <span class=\"co1\">; move to next generation</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<br/>      i <span class=\"sy0\">:=</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> w<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> v<span class=\"re0\">%i%</span><span class=\"sy0\">+</span>v<span class=\"re0\">%A_Index%</span><span class=\"sy0\">+</span>v<span class=\"re0\">%j%</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<br/>      <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span>v<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span>\u00a0% v<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> w<span class=\"re0\">%A_Index%</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:                                   <span class=\"co1\">; exit when GUI is closed</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "AWK", "loc": 70, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    edge = <span class=\"nu0\">1</span><br/>    ruleNum = <span class=\"nu0\">104</span> <span class=\"co1\"># 01101000</span><br/>    maxGen = <span class=\"nu0\">9</span><br/>    mark = <span class=\"st0\">\"@\"</span><br/>    space = <span class=\"st0\">\".\"</span><br/>    initialState = <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"f8d6b8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@<a class=\"__cf_email__\" data-cfemail=\"aa84ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"f9d7b9d7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"08264826\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"331d1d731d1d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><br/>    width = <span class=\"kw4\">length</span><span class=\"br0\">(</span>initialState<span class=\"br0\">)</span><br/>    delete rules<br/>    delete state<br/>\u00a0<br/>    initRules<span class=\"br0\">(</span>ruleNum<span class=\"br0\">)</span><br/>    initState<span class=\"br0\">(</span>initialState, mark<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>g = <span class=\"nu0\">0</span>; g <span class=\"sy2\">&lt;</span> maxGen; g<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        showState<span class=\"br0\">(</span>g, mark, space<span class=\"br0\">)</span><br/>        nextState<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    showState<span class=\"br0\">(</span>g, mark, space<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> nextState<span class=\"br0\">(</span>    newState, i, n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    delete newState<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;</span> width <span class=\"sy3\">-</span> <span class=\"nu0\">1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n = getRuleNum<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        newState<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = rules<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;</span> width; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># copy, can't assign arrays</span><br/>        state<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = newState<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Convert a three cell neighborhood from binary to decimal</span><br/><span class=\"kw6\">function</span> getRuleNum<span class=\"br0\">(</span>i,    rn, j, p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    rn = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j = <span class=\"sy3\">-</span><span class=\"nu0\">1</span>; j <span class=\"sy2\">&lt;</span> <span class=\"nu0\">2</span>; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        p = i <span class=\"sy3\">+</span> j<br/>        rn = rn <span class=\"sy3\">*</span> <span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>p <span class=\"sy2\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">||</span> p <span class=\"sy2\">&gt;</span> width <span class=\"sy5\">?</span> edge <span class=\"sy5\">:</span> state<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span> rn<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> showState<span class=\"br0\">(</span>gen, mark, space,    i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%3d: \"</span>, gen<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> width; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%s\"</span>, <span class=\"br0\">(</span>state<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy5\">?</span> mark <span class=\"sy5\">:</span> space<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span> <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Make state transition lookup table from rule number.</span><br/><span class=\"kw6\">function</span> initRules<span class=\"br0\">(</span>ruleNum,   i, r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    delete rules;<br/>    r = ruleNum<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;</span> <span class=\"nu0\">8</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        rules<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = r <span class=\"sy3\">%</span> <span class=\"nu0\">2</span><br/>        r = <span class=\"kw4\">int</span><span class=\"br0\">(</span>r <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> initState<span class=\"br0\">(</span>init, mark,    i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    delete state<br/>    <span class=\"kw4\">srand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;</span> width; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        state<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"br0\">(</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span>init, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> mark <span class=\"sy5\">?</span> <span class=\"nu0\">1</span> <span class=\"sy5\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\"># Given an initial string.</span><br/>        <span class=\"co1\"># state[int(width/2)] = '@'  # middle cell</span><br/>        <span class=\"co1\"># state[i] = int(rand() * 100) &lt; 30\u00a0? 1\u00a0: 0 # 30% of cells</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 53, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> life$ <span class=\"br0\">(</span>lastGen$<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> getNeighbors! <span class=\"br0\">(</span>group$<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckcls.shtml\"><span class=\"kw3\">CLS</span></a><br/>start$ <span class=\"sy0\">=</span> <span class=\"st0\">\"_###_##_#_#_#_#__#__\"</span><br/>numGens <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/><span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> numGens <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Generation\"</span>; i; <span class=\"st0\">\": \"</span>; start$<br/>\tstart$ <span class=\"sy0\">=</span> life$<span class=\"br0\">(</span>start$<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span> i<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> getNeighbors <span class=\"br0\">(</span>group$<span class=\"br0\">)</span><br/>\t\tans <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>group$<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> ans <span class=\"sy0\">=</span> ans <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>group$<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> ans <span class=\"sy0\">=</span> ans <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\tgetNeighbors <span class=\"sy0\">=</span> ans<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> life$ <span class=\"br0\">(</span>lastGen$<span class=\"br0\">)</span><br/>\t\tnewGen$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>lastGen$<span class=\"br0\">)</span><br/>\t\t\tneighbors <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"co1\">'left edge</span><br/>\t\t\t\t<span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>lastGen$<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\t\tneighbors <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\t\t\tneighbors <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t\t\t<span class=\"kw1\">ELSEIF</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>lastGen$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"co1\">'right edge</span><br/>\t\t\t\t<span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>lastGen$<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>lastGen$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\t\tneighbors <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\t\t\tneighbors <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t\t\t<span class=\"kw1\">ELSE</span> <span class=\"co1\">'middle</span><br/>\t\t\t\tneighbors <span class=\"sy0\">=</span> getNeighbors<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>lastGen$<span class=\"sy0\">,</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>neighbors <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"co1\">'dies or stays dead with no neighbors</span><br/>\t\t\t\tnewGen$ <span class=\"sy0\">=</span> newGen$ <span class=\"sy0\">+</span> <span class=\"st0\">\"_\"</span><br/>\t\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>neighbors <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"co1\">'stays with one neighbor</span><br/>\t\t\t\tnewGen$ <span class=\"sy0\">=</span> newGen$ <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>lastGen$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>neighbors <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"co1\">'flips with two neighbors</span><br/>\t\t\t\t<span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>lastGen$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\t\tnewGen$ <span class=\"sy0\">=</span> newGen$ <span class=\"sy0\">+</span> <span class=\"st0\">\"_\"</span><br/>\t\t\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\t\t\tnewGen$ <span class=\"sy0\">=</span> newGen$ <span class=\"sy0\">+</span> <span class=\"st0\">\"#\"</span><br/>\t\t\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t\t<span class=\"kw1\">NEXT</span> i<br/>\t\tlife$ <span class=\"sy0\">=</span> newGen$<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 58, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>::THE MAIN THING</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">one-dca</span> __###__##_#_##_###__######_###_#####_#__##_____#_#_#######__<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\">::/THE MAIN THING</span><br/><span class=\"co2\"><br/>::THE PROCESSOR</span><br/>:<span class=\"re0\">one-dca</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> numchars=0<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> proc=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><span class=\"co2\"><br/>::COUNT THE NUMBER OF CHARS</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> bef=<span class=\"sy0\">%</span><span class=\"re3\">proc:_=_,</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> bef=<span class=\"sy0\">%</span><span class=\"re3\">bef:#=#,</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> bef=<span class=\"sy0\">%</span><span class=\"re3\">bef:~0,-1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">x</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">bef</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a numchars+=1<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a endchar=<span class=\"sy0\">%</span><span class=\"re3\">numchars</span><span class=\"sy0\">%</span>-1<br/>:<span class=\"re0\">nextgen</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.   <span class=\"co3\">^|</span> <span class=\"sy0\">%</span><span class=\"re3\">proc</span><span class=\"sy0\">%</span> <span class=\"co3\">^|</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> currnum=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> newgen=<br/>:<span class=\"re0\">editeachchar</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> neigh=0<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a testnum2=<span class=\"sy0\">%</span><span class=\"re3\">currnum</span><span class=\"sy0\">%</span>+1<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a testnum1=<span class=\"sy0\">%</span><span class=\"re3\">currnum</span><span class=\"sy0\">%</span>-1<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">currnum</span><span class=\"sy0\">%</span>==<span class=\"sy0\">%</span><span class=\"re3\">endchar</span><span class=\"sy0\">%</span> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> testchar=<span class=\"sy0\">!</span><span class=\"re2\">proc:~%<span class=\"re3\">testnum1</span>%,1</span><span class=\"sy0\">!</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">testchar</span><span class=\"sy0\">!</span>==# <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> neigh=1<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">currnum</span><span class=\"sy0\">%</span>==0 <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> testchar=<span class=\"sy0\">%</span><span class=\"re3\">proc:~1,1</span><span class=\"sy0\">%</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">testchar</span><span class=\"sy0\">!</span>==# <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> neigh=1<span class=\"sy0\">)</span><br/>\t\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> testchar1=<span class=\"sy0\">!</span><span class=\"re2\">proc:~%<span class=\"re3\">testnum1</span>%,1</span><span class=\"sy0\">!</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> testchar2=<span class=\"sy0\">!</span><span class=\"re2\">proc:~%<span class=\"re3\">testnum2</span>%,1</span><span class=\"sy0\">!</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">testchar1</span><span class=\"sy0\">!</span>==# <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a neigh+=1<span class=\"sy0\">)</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">testchar2</span><span class=\"sy0\">!</span>==# <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a neigh+=1<span class=\"sy0\">)</span><br/>\t\t<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">neigh</span><span class=\"sy0\">%</span>==0 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> newgen=<span class=\"sy0\">%</span><span class=\"re3\">newgen</span><span class=\"sy0\">%</span>_<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">neigh</span><span class=\"sy0\">%</span>==1 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> testchar=<span class=\"sy0\">!</span><span class=\"re2\">proc:~%<span class=\"re3\">currnum</span>%,1</span><span class=\"sy0\">!</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> newgen=<span class=\"sy0\">%</span><span class=\"re3\">newgen</span><span class=\"sy0\">%!</span><span class=\"re2\">testchar</span><span class=\"sy0\">!</span><br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">neigh</span><span class=\"sy0\">%</span>==2 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> testchar=<span class=\"sy0\">!</span><span class=\"re2\">proc:~%<span class=\"re3\">currnum</span>%,1</span><span class=\"sy0\">!</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">testchar</span><span class=\"sy0\">!</span>==# <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> newgen=<span class=\"sy0\">%</span><span class=\"re3\">newgen</span><span class=\"sy0\">%</span>_<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> newgen=<span class=\"sy0\">%</span><span class=\"re3\">newgen</span><span class=\"sy0\">%</span>#<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">currnum</span><span class=\"sy0\">%</span>==<span class=\"sy0\">%</span><span class=\"re3\">endchar</span><span class=\"sy0\">%</span> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">cond)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a currnum+=1<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">editeachchar)</span><br/>\u00a0<br/>:<span class=\"re0\">cond</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">proc</span><span class=\"sy0\">%</span>==<span class=\"sy0\">%</span><span class=\"re3\">newgen</span><span class=\"sy0\">%</span> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>          ...The sample is now stable.<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> proc=<span class=\"sy0\">%</span><span class=\"re3\">newgen</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">nextgen</span><br/><span class=\"co2\">::/THE (LLLLLLOOOOOOOOOOOOONNNNNNNNGGGGGG.....) PROCESSOR</span></pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      DIM rule$(7)<br/>      rule$() = \"0\", \"0\", \"0\", \"1\", \"0\", \"1\", \"1\", \"0\"<br/>\u00a0<br/>      now$ = \"01110110101010100100\"<br/>\u00a0<br/>      FOR generation% = 0 TO 9<br/>        PRINT \"Generation \"\u00a0; generation% \":\", now$<br/>        next$ = \"\"<br/>        FOR cell% = 1 TO LEN(now$)<br/>          next$ += rule$(EVAL(\"%\"+MID$(\"0\"+now$+\"0\", cell%, 3)))<br/>        NEXT cell%<br/>        SWAP now$, next$<br/>      NEXT generation%</pre>"}, {"lang": "Befunge", "loc": 16, "block": "<pre class=\"text highlighted_source\">v                                                                                                         <br/> \"\u00a0!!!\u00a0!!\u00a0!\u00a0!\u00a0!\u00a0! \u00a0!  \"                                                          ,*25                    &lt;v<br/> \"                    \"                                                           ,*25,,,,,,,,,,,,,,,,,,,,&lt;v<br/> \"                    \"                                                            ,*25,,,,,,,,,,,,,,,,,,,,&lt;v<br/> \"                    \"                                                             ,*25,,,,,,,,,,,,,,,,,,,,&lt;v<br/> \"                    \"                                                              ,*25,,,,,,,,,,,,,,,,,,,,&lt;v<br/> \"                    \"                                                               ,*25,,,,,,,,,,,,,,,,,,,,&lt;v<br/> \"                    \"                                                                ,*25,,,,,,,,,,,,,,,,,,,,&lt;v<br/> \"                    \"                                                                 ,*25,,,,,,,,,,,,,,,,,,,,&lt;v<br/> \"                    \"                                                                  ,*25,,,,,,,,,,,,,,,,,,,,&lt;v<br/>                                                                      v$&lt;                @,*25,,,,,,,,,,,,,,,,,,,,&lt;<br/>&gt;110p3&gt;:1-10gg\" \"-4* \\:10gg\" \"-2* \\:1+10gg\" \"-\\:54*1+`#v_20p++\u00a0:2`#v_ &gt;:4`#v_&gt; &gt;$\" \"v                     <br/>                                                                   &gt;:3`#^_v&gt;:6`|                          <br/>      ^                                                &gt;$$$$320p10g1+:9`v &gt;    &gt;$\"!\"&gt; 20g10g1+p 20g1+:20p <br/>      ^                                                                v_10p10g                           <br/>                                                                       &gt;                                 ^</pre>"}, {"lang": "Bracmat", "loc": 30, "block": "<pre class=\"text highlighted_source\">  ( ( evolve<br/>    =   n z<br/>      .   @(\u00a0!arg<br/>          \u00a0:\u00a0%?n\u00a0? @?z<br/>          \u00a0:  \u00a0?<br/>               ( (   ( 000<br/>                     | 001<br/>                     | 010<br/>                     | 100<br/>                     | 111<br/>                     )<br/>                   &amp; 0\u00a0!n:?n<br/>                 |   (011|101|110)<br/>                   &amp; 1\u00a0!n:?n<br/>                 )<br/>               &amp; ~`<br/>               )<br/>              \u00a0?<br/>           )<br/>        | rev$(str$(!z\u00a0!n))<br/>    )<br/>  &amp; 11101101010101001001:?S<br/>  &amp;\u00a0:?seen<br/>  &amp;   whl<br/>    ' ( ~(!seen:?\u00a0!S\u00a0?)<br/>      &amp; out$!S<br/>      &amp;\u00a0!S\u00a0!seen:?seen<br/>      &amp; evolve$!S:?S<br/>      )<br/>  );</pre>"}, {"lang": "C", "loc": 28, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> trans<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"___#_##_\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define v(i) (cell[i]\u00a0!= '_')</span><br/><span class=\"kw4\">int</span> evolve<span class=\"br0\">(</span><span class=\"kw4\">char</span> cell<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">char</span> backup<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> diff <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* use left, self, right as binary number bits for table index */</span><br/>\t\tbackup<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> trans<span class=\"br0\">[</span> v<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"sy0\">+</span> v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> v<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tdiff <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>backup<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>cell<span class=\"sy0\">,</span> backup<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> diff<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span>\tc<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"_###_##_#_#_#_#__#__<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>\t\tb<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"____________________<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>evolve<span class=\"br0\">(</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 29, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;bitset&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> ArraySize <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> NumGenerations <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> Initial <span class=\"sy1\">=</span> <span class=\"st0\">\"0011101101010101001000\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// + 2 for the fixed ends of the array</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span>ArraySize <span class=\"sy2\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">&gt;</span> array<span class=\"br0\">(</span>Initial<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> NumGenerations<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span>ArraySize <span class=\"sy2\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">&gt;</span> tmpArray<span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> ArraySize<span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> <span class=\"sy2\">--</span>i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"#\"</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">else</span><br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"_\"</span><span class=\"sy4\">;</span><br/>            <span class=\"kw4\">int</span> val <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>array<span class=\"br0\">[</span>i<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>array<span class=\"br0\">[</span>i<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>            tmpArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>val <span class=\"sy1\">==</span> <span class=\"nu0\">3</span> <span class=\"sy3\">||</span> val <span class=\"sy1\">==</span> <span class=\"nu0\">5</span> <span class=\"sy3\">||</span> val <span class=\"sy1\">==</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        array <span class=\"sy1\">=</span> tmpArray<span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 39, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> prog<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> MainClass<br/>\t<span class=\"br0\">{</span>\t<br/>\t\t<span class=\"kw1\">const</span> <span class=\"kw4\">int</span> n_iter <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> f <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>f<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"-\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"#\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t\t<br/>\u00a0<br/>\t\t\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> g <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span>f<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">=</span>n_iter<span class=\"sy0\">;</span> n<span class=\"sy0\">!=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> n<span class=\"sy0\">--</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>f<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> g<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> g<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span> g<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\tg<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>f<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> f<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\tg<span class=\"br0\">[</span>g<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>f<span class=\"br0\">[</span>f<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> f<span class=\"br0\">[</span>f<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> tmp <span class=\"sy0\">=</span> f<span class=\"sy0\">;</span><br/>\t\t\t\tf <span class=\"sy0\">=</span> g<span class=\"sy0\">;</span><br/>\t\t\t\tg <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>f<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"-\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"#\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span>\t\t\t<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 66, "block": "<pre class=\"text highlighted_source\">shared abstract class Cell(character) of alive | dead {<br/>\tshared Character character;<br/>\tstring =&gt; character.string;<br/>\tshared formal Cell opposite;<br/>}<br/>\u00a0<br/>shared object alive extends Cell('#') {<br/>\topposite =&gt; dead;<br/>}<br/>shared object dead extends Cell('_') {<br/>\topposite =&gt; alive;<br/>}<br/>\u00a0<br/>shared Map&lt;Character, Cell&gt; cellsByCharacter = map { for (cell in `Cell`.caseValues) cell.character-&gt;cell };<br/>\u00a0<br/>shared class Automata1D({Cell*} initialCells) {<br/>\u00a0<br/>\u00a0<br/>\tvalue permanentFirstCell = initialCells.first else dead;<br/>\tvalue permanentLastCell = initialCells.last else dead;<br/>\u00a0<br/>\tvalue cells = Array { *initialCells.rest.exceptLast };<br/>\u00a0<br/>\tshared Boolean evolve() {<br/>\u00a0<br/>\t\tvalue newCells = Array {<br/>\t\t\tfor (index-&gt;cell in cells.indexed)<br/>\t\t\tlet (left = cells[index - 1] else permanentFirstCell, <br/>\t\t\t\tright = cells[index + 1] else permanentLastCell,<br/>\t\t\t\tneighbours = [left, right], <br/>\t\t\t\tbothAlive = neighbours.every(alive.equals),<br/>\t\t\t\tbothDead = neighbours.every(dead.equals))<br/>\t\t\tif (bothAlive)<br/>\t\t\tthen cell.opposite<br/>\t\t\telse if (cell == alive &amp;&amp; bothDead)<br/>\t\t\tthen dead<br/>\t\t\telse cell<br/>\t\t};<br/>\u00a0<br/>\t\tif (newCells == cells) {<br/>\t\t\treturn false;<br/>\t\t}<br/>\u00a0<br/>\t\tnewCells.copyTo(cells);<br/>\t\treturn true;<br/>\t}<br/>\u00a0<br/>\tstring =&gt; permanentFirstCell.string + \"\".join(cells) + permanentLastCell.string;<br/>}<br/>\u00a0<br/>shared Automata1D? automata1d(String string) =&gt; <br/>\t\tlet (cells = string.map((Character element) =&gt; cellsByCharacter[element]))<br/>\t\tif (cells.every((Cell? element) =&gt; element exists)) <br/>\t\tthen Automata1D(cells.coalesced) <br/>\t\telse null;<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>\tassert (exists automata = automata1d(\"__###__##_#_##_###__######_###_#####_#__##_____#_#_#######__\"));<br/>\u00a0<br/>\tvariable value generation = 0;<br/>\tprint(\"generation ``generation`` ``automata``\");<br/>\twhile (automata.evolve() &amp;&amp; generation&lt;10) {<br/>\t\tprint(\"generation `` ++generation `` ``automata``\");<br/>\t}<br/>}</pre>"}, {"lang": "Clojure", "loc": 16, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> one<span class=\"sy0\">-</span>dimensional<span class=\"sy0\">-</span>cellular<span class=\"sy0\">-</span>automata<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>contrib <span class=\"br0\">(</span>string\u00a0:<span class=\"me1\">as</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> next<span class=\"sy0\">-</span>gen <span class=\"br0\">[</span>cells<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>cs cells ncs <span class=\"br0\">(</span>s<span class=\"sy0\">/</span><span class=\"kw1\">take</span> <span class=\"nu0\">1</span> cells<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>f3 <span class=\"br0\">(</span>s<span class=\"sy0\">/</span><span class=\"kw1\">take</span> <span class=\"nu0\">3</span> cs<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> f3<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>s<span class=\"sy0\">/</span><span class=\"kw1\">drop</span> <span class=\"nu0\">1</span> cs<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">str</span> ncs <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"sy0\">=</span> \\# <span class=\"sy0\">%</span><span class=\"br0\">)</span> f3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"#\"</span> <span class=\"st0\">\"_\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">str</span> ncs <span class=\"br0\">(</span>s<span class=\"sy0\">/</span><span class=\"kw1\">drop</span> <span class=\"nu0\">1</span> cs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> generate <span class=\"br0\">[</span>n cells<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> cells <span class=\"br0\">(</span>generate <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>gen cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 110, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/> <span class=\"kw3\">Identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span>                                        <br/> <span class=\"kw3\">Program-id</span><span class=\"sy0\">.</span> rc-1d-cell<span class=\"sy0\">.</span>                                         <br/>\u00a0<br/> <span class=\"kw3\">Data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span>                                                  <br/> <span class=\"kw3\">Working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span>                                        <br/>\u00a0<br/><span class=\"co1\">*&gt; \"Constants.\"                                                  </span><br/> <span class=\"nu0\">01</span> max-gens            <span class=\"kw3\">pic</span>  <span class=\"nu0\">999</span>  <span class=\"kw3\">value</span>   <span class=\"nu0\">9</span><span class=\"sy0\">.</span>                     <br/> <span class=\"nu0\">01</span> state-width         <span class=\"kw3\">pic</span>   <span class=\"nu0\">99</span>  <span class=\"kw3\">value</span>  <span class=\"nu0\">20</span><span class=\"sy0\">.</span>                     <br/> <span class=\"nu0\">01</span> state-table-init    <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"8aa4ca\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@<a class=\"__cf_email__\" data-cfemail=\"bf91ff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"250b650b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"7b553b55\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"644a4a244a4a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><span class=\"sy0\">.</span>  <br/> <span class=\"nu0\">01</span> alive               <span class=\"kw3\">pic</span>    x  <span class=\"kw3\">value</span> <span class=\"st0\">\"@\"</span><span class=\"sy0\">.</span>                     <br/> <span class=\"nu0\">01</span> dead                <span class=\"kw3\">pic</span>    x  <span class=\"kw3\">value</span> <span class=\"st0\">\".\"</span><span class=\"sy0\">.</span>                     <br/>\u00a0<br/><span class=\"co1\">*&gt; The current state.                                            </span><br/> <span class=\"nu0\">01</span> state-gen           <span class=\"kw3\">pic</span>  <span class=\"nu0\">999</span>  <span class=\"kw3\">value</span>   <span class=\"nu0\">0</span><span class=\"sy0\">.</span>                     <br/> <span class=\"nu0\">01</span> state-row<span class=\"sy0\">.</span>                                                  <br/>    <span class=\"nu0\">05</span> state-row-gen   <span class=\"kw3\">pic</span> zz9<span class=\"sy0\">.</span>                                <br/>    <span class=\"nu0\">05</span> <span class=\"kw3\">filler</span>          <span class=\"kw3\">pic</span>  xx   <span class=\"kw3\">value</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">.</span>                   <br/>    <span class=\"nu0\">05</span> state-<span class=\"kw3\">table</span><span class=\"sy0\">.</span>                                            <br/>        <span class=\"nu0\">10</span> state-cells <span class=\"kw3\">pic</span>   x   <span class=\"kw3\">occurs</span> <span class=\"nu0\">20</span> <span class=\"kw2\">times</span><span class=\"sy0\">.</span>              <br/>\u00a0<br/><span class=\"co1\">*&gt; The new state.                                               </span><br/> <span class=\"nu0\">01</span> new-state-<span class=\"kw3\">table</span><span class=\"sy0\">.</span>                                            <br/>    <span class=\"nu0\">05</span> new-state-cells <span class=\"kw3\">pic</span>   x   <span class=\"kw3\">occurs</span> <span class=\"nu0\">20</span> <span class=\"kw2\">times</span><span class=\"sy0\">.</span>              <br/>\u00a0<br/><span class=\"co1\">*&gt; Pointer into cell table during generational production.      </span><br/> <span class=\"nu0\">01</span> cell-<span class=\"kw3\">index</span>          <span class=\"kw3\">pic</span>   <span class=\"nu0\">99</span><span class=\"sy0\">.</span>                               <br/>    <span class=\"nu0\">88</span> at-beginning    <span class=\"kw3\">value</span>  <span class=\"nu0\">1</span><span class=\"sy0\">.</span>                               <br/>    <span class=\"nu0\">88</span> is-inside       <span class=\"kw3\">values</span> <span class=\"nu0\">2</span> <span class=\"kw3\">thru</span> <span class=\"nu0\">19</span><span class=\"sy0\">.</span>                       <br/>    <span class=\"nu0\">88</span> at-<span class=\"kw3\">end</span>          <span class=\"kw3\">value</span> <span class=\"nu0\">20</span><span class=\"sy0\">.</span>                               <br/>\u00a0<br/><span class=\"co1\">*&gt; The cell's neighborhood.                         </span><br/> <span class=\"nu0\">01</span> neighbor-count-def<span class=\"sy0\">.</span>                          <br/>   <span class=\"nu0\">03</span> neighbor-<span class=\"kw3\">count</span>      <span class=\"kw3\">pic</span>   <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">88</span> is-comfy        <span class=\"kw3\">value</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span>                    <br/>     <span class=\"nu0\">88</span> is-ripe         <span class=\"kw3\">value</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span>                    <br/>\u00a0<br/> <span class=\"kw3\">Procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span>                                <br/>     <span class=\"kw2\">Perform</span> Init-state-<span class=\"kw3\">table</span><span class=\"sy0\">.</span>                      <br/>     <span class=\"kw2\">Perform</span> max-gens <span class=\"kw2\">times</span>                         <br/>         <span class=\"kw2\">perform</span> Display-row                        <br/>         <span class=\"kw2\">perform</span> Next-state                         <br/>     end-<span class=\"kw2\">perform</span><span class=\"sy0\">.</span>                                   <br/>     <span class=\"kw2\">Perform</span> Display-row<span class=\"sy0\">.</span>                           <br/>     <span class=\"kw3\">Stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span>                                      <br/>\u00a0<br/> Display-row<span class=\"sy0\">.</span>                                       <br/>     <span class=\"kw2\">Move</span> state-gen <span class=\"kw2\">to</span> state-row-gen<span class=\"sy0\">.</span>     <br/>     <span class=\"kw2\">Display</span> state-row<span class=\"sy0\">.</span>                   <br/>\u00a0<br/><span class=\"co1\">*&gt; Determine who lives and who dies.      </span><br/> Next-state<span class=\"sy0\">.</span>                              <br/>     <span class=\"kw2\">Add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> state-gen<span class=\"sy0\">.</span>                  <br/>     <span class=\"kw2\">Move</span> state-<span class=\"kw3\">table</span> <span class=\"kw2\">to</span> new-state-<span class=\"kw3\">table</span><span class=\"sy0\">.</span> <br/>\u00a0<br/>     <span class=\"kw2\">Perform</span> <span class=\"kw3\">with</span> <span class=\"kw3\">test</span> <span class=\"kw3\">after</span>              <br/>         <span class=\"kw2\">varying</span> cell-<span class=\"kw3\">index</span> <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span>   <br/>         <span class=\"kw2\">until</span> at-<span class=\"kw3\">end</span>                     <br/>         <span class=\"kw2\">perform</span> Count-neighbors          <br/>         <span class=\"kw2\">perform</span> Die-<span class=\"kw3\">off</span>                             <br/>         <span class=\"kw2\">perform</span> New-births                          <br/>     end-<span class=\"kw2\">perform</span>                                     <br/>\u00a0<br/>     <span class=\"kw2\">move</span> new-state-<span class=\"kw3\">table</span> <span class=\"kw2\">to</span> state-<span class=\"kw3\">table</span><span class=\"sy0\">.</span>            <br/>\u00a0<br/><span class=\"co1\">*&gt; Living cell with wrong number of neighbors...     </span><br/> Die-<span class=\"kw3\">off</span><span class=\"sy0\">.</span>                                            <br/>     <span class=\"kw1\">if</span> state-cells<span class=\"br0\">(</span>cell-<span class=\"kw3\">index</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>                    <br/>     alive <span class=\"kw3\">and</span> <span class=\"kw3\">not</span> is-comfy    <br/>         <span class=\"kw3\">then</span> <span class=\"kw2\">move</span> dead <span class=\"kw2\">to</span> new-state-cells<span class=\"br0\">(</span>cell-<span class=\"kw3\">index</span><span class=\"br0\">)</span>           <br/>     end-<span class=\"kw1\">if</span>                                                      <br/>     <span class=\"sy0\">.</span>                                                           <br/>\u00a0<br/><span class=\"co1\">*&gt; Empty cell with exactly two neighbors are...                  </span><br/> New-births<span class=\"sy0\">.</span>                                                     <br/>     <span class=\"kw1\">if</span> state-cells<span class=\"br0\">(</span>cell-<span class=\"kw3\">index</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> dead <span class=\"kw3\">and</span> is-ripe<br/>         <span class=\"kw3\">then</span> <span class=\"kw2\">move</span> alive <span class=\"kw2\">to</span> new-state-cells<span class=\"br0\">(</span>cell-<span class=\"kw3\">index</span><span class=\"br0\">)</span>          <br/>     end-<span class=\"kw1\">if</span>                                                      <br/>    <span class=\"sy0\">.</span>                                                           <br/><span class=\"co1\">*&gt; How many living neighbors does a cell have?                   </span><br/> Count-neighbors<span class=\"sy0\">.</span>                                                <br/>     <span class=\"kw2\">Move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> neighbor-<span class=\"kw3\">count</span>                        <br/>     <span class=\"kw1\">if</span> at-beginning <span class=\"kw3\">or</span> at-<span class=\"kw3\">end</span> <span class=\"kw3\">then</span>                              <br/>         <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> neighbor-<span class=\"kw3\">count</span>                      <br/>     <span class=\"kw3\">else</span>                                                        <br/>       <span class=\"kw1\">if</span> is-inside <span class=\"kw3\">and</span> state-cells<span class=\"br0\">(</span>cell-<span class=\"kw3\">index</span><span class=\"sy0\"> - </span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> alive        <br/>       <span class=\"kw3\">then</span>                                                        <br/>           <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> neighbor-<span class=\"kw3\">count</span>                     <br/>       end-<span class=\"kw1\">if</span>                                                      <br/>       <span class=\"kw1\">if</span> is-inside <span class=\"kw3\">and</span> state-cells<span class=\"br0\">(</span>cell-<span class=\"kw3\">index</span><span class=\"sy0\"> + </span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> alive        <br/>       <span class=\"kw3\">then</span>                                                        <br/>           <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> neighbor-<span class=\"kw3\">count</span>                     <br/>       end-<span class=\"kw1\">if</span>                                                       <br/>     end-<span class=\"kw1\">if</span>                                                        <br/>     <span class=\"sy0\">.</span>                                                             <br/>\u00a0<br/><span class=\"co1\">*&gt; String is easier to enter, but table is easier to work with,    </span><br/><span class=\"co1\">*&gt; so move each character of the initialization string to the      </span><br/><span class=\"co1\">*&gt; state table.                                                    </span><br/>\u00a0<br/> Init-state-<span class=\"kw3\">table</span><span class=\"sy0\">.</span>                                                 <br/>     <span class=\"kw2\">Perform</span> <span class=\"kw3\">with</span> <span class=\"kw3\">test</span> <span class=\"kw3\">after</span>                    <br/>         <span class=\"kw2\">varying</span> cell-<span class=\"kw3\">index</span> <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span>         <br/>         <span class=\"kw2\">until</span> at-<span class=\"kw3\">end</span>                           <br/>         <span class=\"kw2\">move</span> state-table-init<span class=\"br0\">(</span>cell-<span class=\"kw3\">index</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span>    <br/>           <span class=\"kw2\">to</span> state-cells<span class=\"br0\">(</span>cell-<span class=\"kw3\">index</span><span class=\"br0\">)</span>           <br/>      end-<span class=\"kw2\">perform</span><br/>      <span class=\"sy0\">.</span>                                                                             <br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 28, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"kw1\">value</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> x<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>coerce x 'simple-bit-vector<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-neighbors-and-self <span class=\"br0\">(</span><span class=\"kw1\">value</span> i<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>ref <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>array-in-bounds-p <span class=\"kw1\">value</span> i<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>bit <span class=\"kw1\">value</span> i<span class=\"br0\">)</span><br/>               <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>inline ref<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>ref <span class=\"br0\">(</span><span class=\"nu0\">1</span>- i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>ref i<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>ref <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> next-cycle <span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>new-<span class=\"kw1\">value</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'bit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for i below <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>bit new-<span class=\"kw1\">value</span> i<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>count-neighbors-and-self <span class=\"kw1\">value</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"nu0\">1</span><br/>                       <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    new-<span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-world <span class=\"br0\">(</span><span class=\"kw1\">value</span> <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>stream *standard-output*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i below <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>bit <span class=\"kw1\">value</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> #\\<span class=\"sy0\">.</span> #\\#<span class=\"br0\">)</span><br/>                  stream<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>terpri stream<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">enum</span> nGenerations <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">enum</span> initial <span class=\"sy0\">=</span> <span class=\"st0\">\"0011101101010101001000\"</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">enum</span> table <span class=\"sy0\">=</span> <span class=\"st0\">\"00010110\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">char</span><span class=\"br0\">[</span>initial.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> A <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> B <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>   A<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> initial<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> _<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nGenerations</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">A</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         write<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">?</span> <span class=\"st0\">'_'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw4\">const</span> val <span class=\"sy0\">=</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"st0\">'0'</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"st0\">'0'</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         B<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> table<span class=\"br0\">[</span>val<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      A.<span class=\"me1\">swap</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      writeln<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 36, "block": "<pre class=\"text highlighted_source\">new-state size:<br/>\t0 ]<br/>\trepeat size:<br/>\t\trandom-range 0 2<br/>\t[ 0<br/>\u00a0<br/>update s1 s2:<br/>\tfor i range 1 - len s1 2:<br/>\t\ts1! -- i<br/>\t\ts1!    i<br/>\t\ts1! ++ i<br/>\t\t+ +<br/>\t\tset-to s2 i = 2<br/>\ts2 s1<br/>\u00a0<br/>print-state s:<br/>\tfor i range 1 - len s 2:<br/>\t\t!print\\ s! i<br/>\t!print \"\"<br/>\u00a0<br/>same-state s1 s2:<br/>\tfor i range 1 - len s1 2:<br/>\t\tif /= s1! i s2! i:<br/>\t\t\treturn false<br/>\ttrue<br/>\u00a0<br/>run size:<br/>\tnew-state size<br/>\tnew-state size<br/>\twhile true:<br/>\t\tupdate<br/>\t\tprint-state over<br/>\t\tif same-state over over:<br/>\t\t\treturn print-state drop<br/>\u00a0<br/>run 60</pre>"}, {"lang": "DWScript", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">const</span> ngenerations <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span> table <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> i<span class=\"sy1\">,</span> j <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> ngenerations <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"sy1\">.</span><span class=\"me1\">low</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> a<span class=\"sy1\">.</span><span class=\"me1\">high</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         Print<span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span> Print<span class=\"br0\">(</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">var</span> val <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">shl</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">shl</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> a<span class=\"br0\">[</span>j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      b<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> table<span class=\"br0\">[</span>val<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">var</span> tmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"sy1\">;</span><br/>   a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/>   b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmp<span class=\"sy1\">;</span><br/>   PrintLn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 18, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> step<span class=\"br0\">(</span>state<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> result <span class=\"sy0\">:=</span> state<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\"># fixed left cell</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"br0\">(</span>state.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># Rule function receives the substring which is the neighborhood</span><br/>        result <span class=\"sy0\">+=</span> <a href=\"http://wiki.erights.org/wiki/E\"><span class=\"kw6\">E</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>rule<span class=\"br0\">(</span>state<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    result <span class=\"sy0\">+=</span> state<span class=\"br0\">(</span>state.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\"># fixed right cell</span><br/>    return result<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> play<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> state<span class=\"sy0\">,</span> rule<span class=\"sy0\">,</span> count<span class=\"sy0\">,</span> out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">`0 | $state$<span class=\"es0\">\\n</span>`</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">count</span> <span class=\"br0\">{</span><br/>        state <span class=\"sy0\">:=</span> step<span class=\"br0\">(</span>state<span class=\"sy0\">,</span> rosettaRule<span class=\"br0\">)</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">`$i | $state$<span class=\"es0\">\\n</span>`</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    return state<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 74, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- First 10 states of the cellular automata.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tr<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+random&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">RANDOM</span></a><br/>\t\t\tautomata<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> r.<span class=\"me1\">make</span><br/>\t\t\t<span class=\"kw2\">create</span> automata.<span class=\"me1\">make_empty</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">10</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> r.<span class=\"me1\">double_item</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.5</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tautomata.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t\tautomata.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tr.<span class=\"me1\">forth</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">10</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>automata <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\tautomata <span class=\"sy0\">:=</span> update <span class=\"br0\">(</span>automata<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tupdate <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t\t<span class=\"co1\">-- Next state of the cellular automata 's'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tenough_states<span class=\"sy0\">:</span> s.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_empty</span><br/>\t\t\t\t<span class=\"co1\">-- Dealing with the left border.</span><br/>\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"co1\">-- Dealing with the middle cells.</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">=</span> s.<span class=\"me1\">count</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span>s <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"co1\">-- Dealing with the right border.</span><br/>\t\t\t<span class=\"kw2\">if</span> s <span class=\"br0\">[</span>s.<span class=\"me1\">count</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"kw2\">and</span> s <span class=\"br0\">[</span>s.<span class=\"me1\">count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\thas_same_length<span class=\"sy0\">:</span> s.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">count</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 21, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def run(list, gen \\\\ 0) do<br/>    print(list, gen)<br/>    next = evolve(list)<br/>    if next == list, do: print(next, gen+1), else: run(next, gen+1)<br/>  end<br/>\u00a0<br/>  defp evolve(list), do: evolve(Enum.concat([[0], list, [0]]), [])<br/>\u00a0<br/>  defp evolve([a,b,c],      next), do: Enum.reverse([life(a,b,c) | next])<br/>  defp evolve([a,b,c|rest], next), do: evolve([b,c|rest], [life(a,b,c) | next])<br/>\u00a0<br/>  defp life(a,b,c), do: (if a+b+c == 2, do: 1, else: 0)<br/>\u00a0<br/>  defp print(list, gen) do<br/>    str = \"Generation #{gen}: \"<br/>    IO.puts Enum.reduce(list, str, fn x,s -&gt; s &lt;&gt; if x==0, do: \".\", else: \"#\" end)<br/>  end<br/>end<br/>\u00a0<br/>RC.run([0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0])</pre>"}, {"lang": "Elm", "loc": 90, "block": "<pre class=\"text highlighted_source\">import Maybe exposing (withDefault)<br/>import List exposing (length, tail, reverse, concat, head, append, map3)<br/>import Html exposing (Html, div, h1, text)<br/>import String exposing (join)<br/>import Svg exposing (svg)<br/>import Svg.Attributes exposing (version, width, height, viewBox,cx,cy, fill, r)<br/>import Html.App exposing (program)<br/>import Random exposing (step, initialSeed, bool, list)<br/>import Matrix exposing (fromList, mapWithLocation, flatten)  -- chendrix/elm-matrix<br/>import Time exposing (Time, second, every)<br/>\u00a0<br/>type alias Model = { history\u00a0: List (List Bool)<br/>                   , cols\u00a0: Int<br/>                   , rows\u00a0: Int<br/>                   }<br/>\u00a0<br/>view\u00a0: Model -&gt; Html Msg<br/>view model = <br/>  let <br/>    circleInBox (row,col) value = <br/>      if value <br/>      then [ Svg.circle [ r \"0.3\"<br/>                        , fill (\"purple\")<br/>                        , cx (toString (toFloat col + 0.5))<br/>                        , cy (toString (toFloat row + 0.5))<br/>                        ]            <br/>                        []  <br/>           ]<br/>      else []<br/>\u00a0<br/>    showHistory model = <br/>      model.history <br/>        |&gt; reverse<br/>        |&gt; fromList<br/>        |&gt; mapWithLocation circleInBox <br/>        |&gt; flatten <br/>        |&gt; concat <br/>  in<br/>    div []<br/>        [ h1 [] [text \"One Dimensional Cellular Automata\"]<br/>        , svg [ version \"1.1\"<br/>              , width \"700\"<br/>              , height \"700\"<br/>              , viewBox (join \" \"<br/>                           [ 0 |&gt; toString<br/>                           , 0 |&gt; toString<br/>                           , model.cols |&gt; toString<br/>                           , model.rows |&gt; toString<br/>                           ]<br/>                        )<br/>              ] <br/>              (showHistory model)<br/>        ]<br/>\u00a0<br/>update\u00a0: Msg -&gt; Model -&gt; (Model, Cmd Msg)<br/>update msg model = <br/>  if length model.history == model.rows<br/>  then (model, Cmd.none)<br/>  else<br/>    let s1 = model.history |&gt; head |&gt; withDefault []<br/>        s0 = False\u00a0:: s1<br/>        s2 = append (tail s1 |&gt; withDefault []) [False]<br/>\u00a0<br/>        gen d0 d1 d2 = <br/>          case (d0,d1,d2) of<br/>            (False,  True,  True) -&gt; True<br/>            ( True, False,  True) -&gt; True<br/>            ( True,  True, False) -&gt; True<br/>            _                     -&gt; False<br/>\u00a0<br/>        updatedHistory = map3 gen s0 s1 s2\u00a0:: model.history<br/>        updatedModel = {model | history = updatedHistory}<br/>    in (updatedModel, Cmd.none)<br/>\u00a0<br/>\u00a0<br/>init\u00a0: Int -&gt; (Model, Cmd Msg)<br/>init n = <br/>  let gen1 = fst (step (list n bool) (initialSeed 34))<br/>  in ({ history = [gen1], rows = n, cols= n }, Cmd.none)<br/>\u00a0<br/>type Msg = Tick Time <br/>\u00a0<br/>subscriptions model = every (0.2 * second) Tick<br/>\u00a0<br/>main = program <br/>         {  init = init 40<br/>         ,  view = view<br/>         ,  update = update<br/>         ,  subscriptions = subscriptions<br/>         }</pre>"}, {"lang": "Erlang", "loc": 50, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>ca<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">G</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">GN</span><span class=\"sy1\">,</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">GN</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~B: \"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">GN</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">GN</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~B: \"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">GN</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re5\">GN</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"_\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">_</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span>|_<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">G</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">H</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">_</span>|_<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">G</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>   <br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>   <br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM ONEDIM_AUTOMATA<br/>\u00a0<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>!VAR I,J,N,W,K<br/>\u00a0<br/>!$DYNAMIC<br/>DIM X[0],X2[0]<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>   DATA(20,0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0)<br/>\u00a0<br/>   PRINT(CHR$(12);)<br/>   N=20     \u00a0! number of generation required<br/>   READ(W)<br/>  \u00a0!$DIM X[W+1],X2[W+1]<br/>   FOR I=1 TO W DO<br/>      READ(X[I])<br/>   END FOR<br/>   FOR K=1 TO N DO<br/>      PRINT(\"Generation\";K;TAB(16);)<br/>      FOR J=1 TO W DO<br/>         IF X[J]=1 THEN PRINT(\"#\";)  ELSE PRINT(\"_\";) END IF<br/>         IF X[J-1]+X[J]+X[J+1]=2 THEN X2[J]=1 ELSE X2[J]=0 END IF<br/>      END FOR<br/>      PRINT<br/>      FOR J=1 TO W DO<br/>         X[J]=X2[J]<br/>      END FOR<br/>   END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 46, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> machine.e<br/>\u00a0<br/><span class=\"kw1\">function</span> rules<span class=\"br0\">(</span><span class=\"kw2\">integer</span> tri<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> tri <span class=\"sy1\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">or</span> tri <span class=\"sy1\">=</span> <span class=\"nu0\">5</span> <span class=\"kw1\">or</span> tri <span class=\"sy1\">=</span> <span class=\"nu0\">6</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> next_gen<span class=\"br0\">(</span><span class=\"kw2\">atom</span> gen<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> new<span class=\"sy2\">,</span> bit<br/>    new <span class=\"sy1\">=</span> rules<span class=\"br0\">(</span><span class=\"kw2\">and_bits</span><span class=\"br0\">(</span>gen<span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">-- work with the first bit separately</span><br/>    bit <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">while</span> gen &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        new <span class=\"sy1\">+=</span> bit<span class=\"sy1\">*</span>rules<span class=\"br0\">(</span><span class=\"kw2\">and_bits</span><span class=\"br0\">(</span>gen<span class=\"sy2\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        gen <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>gen<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">-- shift right</span><br/>        bit <span class=\"sy1\">*=</span> <span class=\"nu0\">2</span> <span class=\"co1\">-- shift left</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> new<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> char_clear <span class=\"sy1\">=</span> <span class=\"st0\">'_'</span><span class=\"sy2\">,</span> char_filled <span class=\"sy1\">=</span> <span class=\"st0\">'#'</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> print_gen<span class=\"br0\">(</span><span class=\"kw2\">atom</span> gen<span class=\"br0\">)</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> int_to_bits<span class=\"br0\">(</span>gen<span class=\"sy2\">,</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>char_filled <span class=\"sy1\">-</span> char_clear<span class=\"br0\">)</span> <span class=\"sy1\">+</span> char_clear<span class=\"br0\">)</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">function</span> s_to_gen<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    s <span class=\"sy1\">-=</span> char_clear<br/>    <span class=\"kw1\">return</span> bits_to_int<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">atom</span> gen<span class=\"sy2\">,</span> prev<br/><span class=\"kw2\">integer</span> n<br/>\u00a0<br/>n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>prev <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>gen <span class=\"sy1\">=</span> bits_to_int<span class=\"br0\">(</span><span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> gen\u00a0!<span class=\"sy1\">=</span> prev <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Generation\u00a0%d: \"</span><span class=\"sy2\">,</span>n<span class=\"br0\">)</span><br/>    print_gen<span class=\"br0\">(</span>gen<span class=\"br0\">)</span><br/>    prev <span class=\"sy1\">=</span> gen<br/>    gen <span class=\"sy1\">=</span> next_gen<span class=\"br0\">(</span>gen<span class=\"br0\">)</span><br/>    n <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Generation\u00a0%d: \"</span><span class=\"sy2\">,</span>n<span class=\"br0\">)</span><br/>print_gen<span class=\"br0\">(</span>gen<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 22, "block": "<pre class=\"text highlighted_source\">USING: bit-arrays io kernel locals math sequences\u00a0;<br/>IN: cellular<br/>\u00a0<br/>: bool-sum ( bool1 bool2 -- sum )<br/>    [ [ 2 ] [ 1 ] if ]<br/>    [ [ 1 ] [ 0 ] if ] if\u00a0;<br/>:: neighbours ( index world -- # )<br/>    index [ 1 - ] [ 1 + ] bi [ world\u00a0?nth ] <a class=\"__cf_email__\" data-cfemail=\"b7d5def7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> bool-sum\u00a0;<br/>: count-neighbours ( world -- neighbours )<br/>    [ length iota ] keep [ neighbours ] curry map\u00a0;<br/>\u00a0<br/>: life-law ( alive? neighbours -- alive? )<br/>    swap [ 1 = ] [ 2 = ] if\u00a0;<br/>: step ( world -- world' )<br/>    dup count-neighbours [ life-law ]\u00a0?{ } 2map-as\u00a0;<br/>: print-cellular ( world -- )<br/>    [ CHAR: # CHAR: _\u00a0? ] \"\" map-as print\u00a0;<br/>: main-cellular ( -- )<br/>   \u00a0?{ f t t t f t t f t f t f t f t f f t f f }<br/>    10 [ dup print-cellular step ] times print-cellular\u00a0;<br/>MAIN: main-cellular<br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Automaton<br/>{<br/>  static Int[] evolve (Int[] array)<br/>  {<br/>    return array.map |Int x, Int i -&gt; Int|<br/>    {<br/>      if (i == 0) <br/>        return ( (x + array[1] == 2)\u00a0? 1\u00a0: 0)<br/>      else if (i == array.size-1)<br/>        return ( (x + array[-2] == 2)\u00a0? 1\u00a0: 0)<br/>      else if (x + array[i-1] + array[i+1] == 2)<br/>        return 1<br/>      else<br/>        return 0      <br/>    }<br/>  }<br/>\u00a0<br/>  public static Void main () <br/>  {<br/>    Int[] array\u00a0:= [0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0]<br/>    echo (array.join(\"\"))<br/>    Int[] newArray\u00a0:= evolve(array)<br/>    while (newArray\u00a0!= array)<br/>    {<br/>      echo (newArray.join(\"\"))<br/>      array = newArray<br/>      newArray = evolve(array)<br/>    }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 25, "block": "<pre class=\"text highlighted_source\">: init ( bits count -- )<br/>  0 do dup 1 and c, 2/ loop drop\u00a0;<br/>\u00a0<br/>20 constant size<br/>create state $2556e size init 0 c,<br/>\u00a0<br/>: .state<br/>  cr size 0 do<br/>    state i + <a class=\"__cf_email__\" data-cfemail=\"accfec\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> if .\" #\" else space then<br/>  loop\u00a0;<br/>\u00a0<br/>: ctable create does&gt; + <a class=\"__cf_email__\" data-cfemail=\"6c0f2c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>ctable rules $68 8 init<br/>\u00a0<br/>: gen<br/>  state <a class=\"__cf_email__\" data-cfemail=\"761536\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ( window )<br/>  size 0 do<br/>    2*  state i + 1+ <a class=\"__cf_email__\" data-cfemail=\"d2b192\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> or  7 and<br/>    dup rules state i + c!<br/>  loop drop\u00a0;<br/>\u00a0<br/>: life1d ( n -- )<br/>  .state 1 do gen .state loop\u00a0;<br/>\u00a0<br/>10 life1d</pre>"}, {"lang": "Fortran", "loc": 50, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> LIFE_1D<br/>\u00a0<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>\u00a0<br/>  <span class=\"kw3\">LOGICAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">cells</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"sy0\">&amp;</span><br/>                            <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">9</span><br/>     WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A,I0,A)\"</span>, <span class=\"kw1\">ADVANCE</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Generation \"</span>, i, <span class=\"st0\">\": \"</span><br/>     <span class=\"kw1\">CALL</span> Drawgen<span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>     <span class=\"kw1\">CALL</span> Nextgen<span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/><span class=\"co1\">CONTAINS</span><br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Nextgen<span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>    <span class=\"kw3\">LOGICAL</span>, <span class=\"kw3\">INTENT</span> <span class=\"br0\">(</span><span class=\"kw3\">IN</span> <span class=\"kw3\">OUT</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">cells</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">LOGICAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">left</span>, centre, right<br/>    <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>    left <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">SIZE</span><span class=\"br0\">(</span>cells<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>       centre <span class=\"sy0\">=</span> cells<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>       right <span class=\"sy0\">=</span> cells<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>left <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> right<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>          cells<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"kw4\">NOT</span>.</span> cells<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>       <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">NOT</span>.</span> left <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> <span class=\"kw2\">.<span class=\"kw4\">NOT</span>.</span> right<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>          cells<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>       left <span class=\"sy0\">=</span> centre<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>    cells<span class=\"br0\">(</span><span class=\"kw4\">SIZE</span><span class=\"br0\">(</span>cells<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> left <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> right<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Nextgen<br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Drawgen<span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>    <span class=\"kw3\">LOGICAL</span>, <span class=\"kw3\">INTENT</span> <span class=\"br0\">(</span><span class=\"kw3\">IN</span> <span class=\"kw3\">OUT</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">cells</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">SIZE</span><span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>cells<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>          WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A)\"</span>, <span class=\"kw1\">ADVANCE</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"#\"</span><br/>       <span class=\"kw1\">ELSE</span><br/>          WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A)\"</span>, <span class=\"kw1\">ADVANCE</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"_\"</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>    WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Drawgen<br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> LIFE_1D</pre>"}, {"lang": "GFA Basic", "loc": 115, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'<br/>' One Dimensional Cellular Automaton<br/>'<br/>start$=\"01110110101010100100\"<br/>max_cycles%=20\u00a0! give a maximum depth<br/>'<br/>' Global variables hold the world, with two rows<br/>' world! is set up with 2 extra cells width, so there is a FALSE on either side<br/>' cur% gives the row for current world,<br/>' new% gives the row for the next world.<br/>'<br/>size%=LEN(start$)<br/>DIM world!(size%+2,2)<br/>cur%=0<br/>new%=1<br/>clock%=0<br/>'<br/>@setup_world(start$)<br/>OPENW 1<br/>CLEARW 1<br/>DO<br/>  @display_world<br/>  @update_world<br/>  EXIT IF @same_state<br/>  clock%=clock%+1<br/>  EXIT IF clock%&gt;max_cycles%\u00a0! safety net<br/>LOOP<br/>~INP(2)<br/>CLOSEW 1<br/>'<br/>' parse given string to set up initial states in world<br/>' -- assumes world! is of correct size<br/>'<br/>PROCEDURE setup_world(defn$)<br/>  LOCAL i%<br/>  ' clear out the array<br/>  ARRAYFILL world!(),FALSE<br/>  ' for each 1 in string, set cell to true<br/>  FOR i%=1 TO LEN(defn$)<br/>    IF MID$(defn$,i%,1)=\"1\"<br/>      world!(i%,0)=TRUE<br/>    ENDIF<br/>  NEXT i%<br/>  ' set references to cur and new<br/>  cur%=0<br/>  new%=1<br/>RETURN<br/>'<br/>' Display the world<br/>'<br/>PROCEDURE display_world<br/>  LOCAL i%<br/>  FOR i%=1 TO size%<br/>    IF world!(i%,cur%)<br/>      PRINT \"#\";<br/>    ELSE<br/>      PRINT \".\";<br/>    ENDIF<br/>  NEXT i%<br/>  PRINT \"\"<br/>RETURN<br/>'<br/>' Create new version of world<br/>'<br/>PROCEDURE update_world<br/>  LOCAL i%<br/>  FOR i%=1 TO size%<br/>    world!(i%,new%)<a class=\"__cf_email__\" data-cfemail=\"e7daa7898290\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_state(@get_value(i%))<br/>  NEXT i%<br/>  ' reverse cur/new<br/>  cur%=1-cur%<br/>  new%=1-new%<br/>RETURN<br/>'<br/>' Test if cur/new states are the same<br/>'<br/>FUNCTION same_state<br/>  LOCAL i%<br/>  FOR i%=1 TO size%<br/>    IF world!(i%,cur%)&lt;&gt;world!(i%,new%)<br/>      RETURN FALSE<br/>    ENDIF<br/>  NEXT i%<br/>  RETURN TRUE<br/>ENDFUNC<br/>'<br/>' Return new state of cell given value<br/>'<br/>FUNCTION new_state(value%)<br/>  SELECT value%<br/>  CASE 0,1,2,4,7<br/>    RETURN FALSE<br/>  CASE 3,5,6<br/>    RETURN TRUE<br/>  ENDSELECT<br/>ENDFUNC<br/>'<br/>' Compute value for cell + neighbours<br/>'<br/>FUNCTION get_value(cell%)<br/>  LOCAL result%<br/>  result%=0<br/>  IF world!(cell%-1,cur%)<br/>    result%=result%+4<br/>  ENDIF<br/>  IF world!(cell%,cur%)<br/>    result%=result%+2<br/>  ENDIF<br/>  IF world!(cell%+1,cur%)<br/>    result%=result%+1<br/>  ENDIF<br/>  RETURN result%<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 38, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    start    <span class=\"sy2\">=</span> <span class=\"st0\">\"_###_##_#_#_#_#__#__\"</span><br/>    offLeft  <span class=\"sy2\">=</span> <span class=\"st0\">'_'</span><br/>    offRight <span class=\"sy2\">=</span> <span class=\"st0\">'_'</span><br/>    dead     <span class=\"sy2\">=</span> <span class=\"st0\">'_'</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>start<span class=\"sy1\">)</span><br/>    g <span class=\"sy2\">:=</span> newGenerator<span class=\"sy1\">(</span>start<span class=\"sy1\">,</span> offLeft<span class=\"sy1\">,</span> offRight<span class=\"sy1\">,</span> dead<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">10</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>g<span class=\"sy1\">())</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newGenerator<span class=\"sy1\">(</span>start <span class=\"kw4\">string</span><span class=\"sy1\">,</span> offLeft<span class=\"sy1\">,</span> offRight<span class=\"sy1\">,</span> dead <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    g0 <span class=\"sy2\">:=</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>offLeft<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> start <span class=\"sy3\">+</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>offRight<span class=\"sy1\">)</span><br/>    g1 <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>g0<span class=\"sy1\">)</span><br/>    last <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>g0<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; last<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> l <span class=\"sy2\">:=</span> g0<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">];</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> l <span class=\"sy2\">!=</span> g0<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]:</span><br/>                g1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> g0<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            <span class=\"kw1\">case</span> g0<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> dead<span class=\"sy1\">:</span><br/>                g1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> l<br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                g1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> dead<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        g0 <span class=\"sy2\">=</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>g1<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span> g0<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span>last<span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> life1D <span class=\"sy0\">=</span> <span class=\"br0\">{</span> self <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> right <span class=\"sy0\">=</span> self<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> left <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a><span class=\"br0\">]</span> <span class=\"sy0\">+</span> self<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>left, self, right<span class=\"br0\">]</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> hood <span class=\"sy0\">-&gt;</span> hood.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">{</span> it <span class=\"br0\">}</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 32, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>newStdGen<span class=\"sy0\">,</span> randomRs<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>liftM2<span class=\"sy0\">,</span> ap<span class=\"br0\">)</span><br/>\u00a0<br/>bnd <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/>bnd bs <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">case</span> bs <span class=\"kw1\">of</span><br/>    <span class=\"st0\">\"_##\"</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'#'</span><br/>    <span class=\"st0\">\"#_#\"</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'#'</span><br/>    <span class=\"st0\">\"##_\"</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'#'</span><br/>    <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'_'</span><br/>\u00a0<br/>donxt <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>donxt xs <span class=\"sy0\">=</span><br/>  unfoldr<br/>    <span class=\"br0\">(</span>\\xs <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">case</span> xs <span class=\"kw1\">of</span><br/>          <span class=\"br0\">[</span><span class=\"sy0\">_,</span> <span class=\"sy0\">_</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Nothing<br/>          <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> Just <span class=\"br0\">(</span>bnd <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">3</span> xs<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">1</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  <span class=\"st0\">'_'</span>\u00a0: xs <span class=\"sy0\">++</span> <span class=\"st0\">\"_\"</span><br/>\u00a0<br/>lahmahgaan <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>lahmahgaan xs <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:init\"><span class=\"kw3\">init</span></a> <span class=\"sy0\">.</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:until\"><span class=\"kw3\">until</span></a> <span class=\"br0\">(</span>liftM2 <span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:init\"><span class=\"kw3\">init</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ap <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">.</span> donxt <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  <span class=\"br0\">[</span>xs<span class=\"sy0\">,</span> donxt xs<span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  g <span class=\"sy0\">&lt;-</span> newStdGen<br/>  <span class=\"kw1\">let</span> oersoep <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"_#\"</span> <span class=\"sy0\">!!</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">36</span> <span class=\"sy0\">$</span> randomRs <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> g<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> lahmahgaan <span class=\"sy0\">$</span> oersoep</pre>"}, {"lang": "Icon and Unicon", "loc": 38, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"co1\"># One dimensional Cellular automaton</span><br/><span class=\"kw1\">record</span> Automaton<span class=\"br0\">(</span>size<span class=\"sy1\">,</span> cells<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> make_automaton <span class=\"br0\">(</span>size<span class=\"sy1\">,</span> items<span class=\"br0\">)</span><br/>  automaton <span class=\"sy1\">:=</span> Automaton <span class=\"br0\">(</span>size<span class=\"sy1\">,</span> items<span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span>items <span class=\"sy1\">&lt;</span> size<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw4\">push</span> <span class=\"br0\">(</span>automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> automaton<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> automaton_display <span class=\"br0\">(</span>automaton<span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"kw4\">write</span> <span class=\"sy1\">!</span> automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> automaton_evolve <span class=\"br0\">(</span>automaton<span class=\"br0\">)</span><br/>  revised <span class=\"sy1\">:=</span> make_automaton <span class=\"br0\">(</span>automaton<span class=\"sy1\">.</span><span class=\"me1\">size</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># do the left-most cell</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    revised<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>  <span class=\"co1\"># do the right-most cell</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span>automaton<span class=\"sy1\">.</span><span class=\"me1\">size</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span>automaton<span class=\"sy1\">.</span><span class=\"me1\">size</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    revised<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span>revised<span class=\"sy1\">.</span><span class=\"me1\">size</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>  <span class=\"co1\"># do the intermediate cells</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>automaton<span class=\"sy1\">.</span><span class=\"me1\">size</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">+</span> automaton<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      revised<span class=\"sy1\">.</span><span class=\"me1\">cells</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> revised<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  automaton <span class=\"sy1\">:=</span> make_automaton <span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"co1\"># generations</span><br/>    automaton_display <span class=\"br0\">(</span>automaton<span class=\"br0\">)</span><br/>    automaton <span class=\"sy1\">:=</span> automaton_evolve <span class=\"br0\">(</span>automaton<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">life1d=: <span class=\"st_h\">'_#'</span>{~ <span class=\"sy0\">(</span><span class=\"nu0\">2</span> = <span class=\"nu0\">3</span>+/\\ <span class=\"nu0\">0</span>,],0:<span class=\"sy0\">)</span>^:a:</pre>"}, {"lang": "Java", "loc": 42, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Life<span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> start<span class=\"sy0\">=</span> <span class=\"st0\">\"_###_##_#_#_#_#__#__\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> numGens <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numGens<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Generation \"</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> start<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tstart<span class=\"sy0\">=</span> life<span class=\"br0\">(</span>start<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> life<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> lastGen<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> newGen<span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> lastGen.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> neighbors<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//left edge</span><br/>\t\t\t\tneighbors<span class=\"sy0\">=</span> lastGen.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> lastGen.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//right edge</span><br/>\t\t\t\tneighbors<span class=\"sy0\">=</span> lastGen.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span><span class=\"br0\">{</span><span class=\"co1\">//middle</span><br/>\t\t\t\tneighbors<span class=\"sy0\">=</span> getNeighbors<span class=\"br0\">(</span>lastGen.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>neighbors <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//dies or stays dead with no neighbors</span><br/>\t\t\t\tnewGen<span class=\"sy0\">+=</span> <span class=\"st0\">\"_\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>neighbors <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//stays with one neighbor</span><br/>\t\t\t\tnewGen<span class=\"sy0\">+=</span> lastGen.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>neighbors <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//flips with two neighbors</span><br/>\t\t\t\tnewGen<span class=\"sy0\">+=</span> lastGen.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"_\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"#\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> newGen<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> getNeighbors<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> group<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> ans<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>group.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> ans<span class=\"sy0\">++;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>group.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> ans<span class=\"sy0\">++;</span><br/>\t\t<span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 13, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> caStep<span class=\"br0\">(</span>old<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> old <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>old<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Surround with dead cells.</span><br/>  <span class=\"kw1\">var</span> state <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// The new state.</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>old.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>old<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> old<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span> state<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> state<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>old<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> state<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>old<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> state<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 22, "block": "<pre class=\"text highlighted_source\"># The 1-d cellular automaton:<br/>def next:<br/>   # Conveniently, jq treats null as 0 when it comes to addition<br/>   # so there is no need to fiddle with the boundaries<br/>  . as $old<br/>  | reduce range(0; length) as $i<br/>    ([];<br/>     ($old[$i-1] + $old[$i+1]) as $s<br/>     | if   $s == 0 then .[$i] = 0<br/>       elif $s == 1 then .[$i] = (if $old[$i] == 1 then 1 else 0 end)<br/>       else              .[$i] = (if $old[$i] == 1 then 0 else 1 end)<br/>       end);<br/>\u00a0<br/>\u00a0<br/># pretty-print an array:<br/>def pp: reduce .[] as $i (\"\"; . + (if $i == 0 then \" \" else \"*\" end));<br/>\u00a0<br/># continue until quiescence:<br/>def go: recurse(. as $prev | next | if . == $prev then empty else . end) | pp;<br/>\u00a0<br/># Example:<br/>[0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0] | go</pre>"}, {"lang": "Julia", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function next_gen(a::BitArray{1}, isperiodic=false)<br/>    b = copy(a)<br/>    if isperiodic<br/>        ncnt = prepend!(a[1:end-1], [a[end]]) + append!(a[2:end], [a[1]])<br/>    else<br/>        ncnt = prepend!(a[1:end-1], [false]) + append!(a[2:end], [false])<br/>    end<br/>    b[ncnt .== 0] = false<br/>    b[ncnt .== 2] = ~b[ncnt .== 2]<br/>    return b<br/>end<br/>\u00a0<br/>function show_gen(a::BitArray{1})<br/>    s = join([i\u00a0? \"\\u2588\"\u00a0: \" \" for i in a], \"\")<br/>    s = \"\\u25ba\"*s*\"\\u25c4\"<br/>end<br/>\u00a0<br/>hi = 70<br/>a = bitrand(hi)<br/>b = falses(hi)<br/>println(\"A 1D Cellular Atomaton with \", hi, \" cells and empty bounds.\")<br/>while any(a) &amp;&amp; any(a .!= b)<br/>    println(\"    \", show_gen(a))<br/>    b = copy(a)<br/>    a = next_gen(a)<br/>end<br/>a = bitrand(hi)<br/>b = falses(hi)<br/>println()<br/>println(\"A 1D Cellular Atomaton with \", hi, \" cells and periodic bounds.\")<br/>while any(a) &amp;&amp; any(a .!= b)<br/>    println(\"    \", show_gen(a))<br/>    b = copy(a)<br/>    a = next_gen(a, true)<br/>end<br/>\u00a0</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">f:{2=+/(0,x,0)@(!#x)+/:!3}</pre>"}, {"lang": "Kotlin", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4-3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> trans <span class=\"sy0\">=</span> <span class=\"st0\">\"___#_##_\"</span><br/>\u00a0<br/>fun v<span class=\"br0\">(</span>cell<span class=\"sy0\">:</span> StringBuilder, i<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'_'</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/>\u00a0<br/>fun evolve<span class=\"br0\">(</span>cell<span class=\"sy0\">:</span> StringBuilder, backup<span class=\"sy0\">:</span> StringBuilder<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> cell.<span class=\"me1\">length</span> - <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> diff <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/* use left, self, right as binary number bits for table index */</span><br/>        backup<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> trans<span class=\"br0\">[</span>v<span class=\"br0\">(</span>cell, i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> + v<span class=\"br0\">(</span>cell, i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> + v<span class=\"br0\">(</span>cell, i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        diff +<span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>backup<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> cell<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    cell.<span class=\"me1\">setLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    cell.<span class=\"me1\">append</span><span class=\"br0\">(</span>backup<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> diff <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"_###_##_#_#_#_#__#__\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"____________________\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>       println<span class=\"br0\">(</span>c.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>evolve<span class=\"br0\">(</span>c,b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 25, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'   [RC] 'One-dimensional cellular automata'</span><br/>\u00a0<br/><span class=\"co1\">'    does not wrap so fails for some rules</span><br/>rule$ <span class=\"sy0\">=</span><span class=\"st0\">\"00010110\"</span>   <span class=\"co1\">'   Rule 22 decimal</span><br/>\u00a0<br/>state$ <span class=\"sy0\">=</span><span class=\"st0\">\"0011101101010101001000\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> j <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">20</span><br/>    <span class=\"kw1\">print</span> state$<br/>    oldState$ <span class=\"sy0\">=</span>state$<br/>    state$ <span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> oldState$<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        NHood$ <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> oldState$<span class=\"sy0\">,</span> k <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>  <span class=\"co1\">'   pick 3 char neighbourhood and turn binary string to decimal</span><br/>        vNHood <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> kk <span class=\"sy0\">=</span><span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> step <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            vNHood <span class=\"sy0\">=</span>vNHood <span class=\"sy0\">+</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> NHood$<span class=\"sy0\">,</span> kk<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span><span class=\"nu0\">2</span>^<span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span>kk<span class=\"br0\">)</span><br/>        <span class=\"kw1\">next</span> kk<br/>                                        <span class=\"co1\">'  .... &amp; use it to index into rule$ to find appropriate new value</span><br/>        state$ <span class=\"sy0\">=</span>state$ <span class=\"sy0\">+</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> rule$<span class=\"sy0\">,</span> vNHood <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> k<br/>    state$ <span class=\"sy0\">=</span>state$ <span class=\"sy0\">+</span><span class=\"st0\">\"0\"</span> <br/>\u00a0<br/><span class=\"kw1\">next</span> j<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Locomotive Basic", "loc": 9, "block": "<pre class=\"locobasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">MODE</span> <span class=\"nu0\">1</span>:n=<span class=\"nu0\">10</span>:<span class=\"kw1\">READ</span> w:<span class=\"kw1\">DIM</span> x<span class=\"br0\">(</span>w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>,x2<span class=\"br0\">(</span>w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">to</span> w:<span class=\"kw1\">READ</span> x<span class=\"br0\">(</span>i<span class=\"br0\">)</span>:<span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> k=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> w<br/><span class=\"nu0\">40</span> <span class=\"kw1\">IF</span> x<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"#\"</span>; <span class=\"kw1\">ELSE</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"_\"</span>;<br/><span class=\"nu0\">50</span> <span class=\"kw1\">IF</span> x<span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span>+x<span class=\"br0\">(</span>j<span class=\"br0\">)</span>+x<span class=\"br0\">(</span>j+<span class=\"nu0\">1</span><span class=\"br0\">)</span>=<span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> x2<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">ELSE</span> x2<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=<span class=\"nu0\">0</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">NEXT</span>:<span class=\"kw1\">PRINT</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> w:x<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=x2<span class=\"br0\">(</span>j<span class=\"br0\">)</span>:<span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">DATA</span> <span class=\"nu0\">20</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span></pre>"}, {"lang": "Logo", "loc": 38, "block": "<pre class=\"text highlighted_source\">make \"cell_list [0 1 1 1 0 1 1 0 1 0 1 0 1 0 1 0 0 1 0 0]<br/>make \"generations 9<br/>\u00a0<br/>to evolve\u00a0:n<br/>ifelse\u00a0:n=1 [make \"nminus1 item\u00a0:cell_count\u00a0:cell_list][make \"nminus1 item\u00a0:n-1\u00a0:cell_list]<br/>ifelse\u00a0:n=:cell_count[make \"nplus1 item 1\u00a0:cell_list][make \"nplus1 item\u00a0:n+1\u00a0:cell_list]<br/>ifelse ((item\u00a0:n\u00a0:cell_list)=0) [<br/>\tifelse (and (:nminus1=1) (:nplus1=1)) [output 1][output (item\u00a0:n\u00a0:cell_list)]<br/>][<br/>\tifelse (and (:nminus1=1) (:nplus1=1)) [output 0][<br/>\t   ifelse and (:nminus1=0) (:nplus1=0) [output 0][output (item\u00a0:n\u00a0:cell_list)]]<br/>]<br/>end<br/>\u00a0<br/>to CA_1D\u00a0:cell_list\u00a0:generations<br/>make \"cell_count count\u00a0:cell_list<br/>(print \")<br/>make \"printout \"<br/>repeat\u00a0:cell_count [<br/>make \"printout word\u00a0:printout ifelse (item repcount\u00a0:cell_list)=1 [\"#][\"_]<br/>]<br/>(print \"Generation \"0:\u00a0:printout)<br/>\u00a0<br/>repeat\u00a0:generations [<br/>       (make \"cell_list_temp [])<br/>       repeat\u00a0:cell_count[<br/>             (make \"cell_list_temp (lput (evolve repcount)\u00a0:cell_list_temp))<br/>       ]<br/>       make \"cell_list\u00a0:cell_list_temp<br/>       make \"printout \"<br/>       repeat\u00a0:cell_count [<br/>       \t      make \"printout word\u00a0:printout ifelse (item repcount\u00a0:cell_list)=1 [\"#][\"_]<br/>       ]<br/>       (print \"Generation  word repcount \":\u00a0:printout)<br/>]<br/>end<br/>\u00a0<br/>CA_1D\u00a0:cell_list\u00a0:generations</pre>"}, {"lang": "Lua", "loc": 32, "block": "<pre class=\"lua highlighted_source\">num_iterations <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/>f <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Output<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> l <span class=\"br0\">)</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> l<span class=\"sy0\">,</span> <span class=\"st0\">\":  \"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>f <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> c<br/>        <span class=\"kw1\">if</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> c <span class=\"sy0\">=</span> <span class=\"st0\">'#'</span> <span class=\"kw1\">else</span> c <span class=\"sy0\">=</span> <span class=\"st0\">'_'</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>Output<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> num_iterations <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> g <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>f<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <br/>            g<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">elseif</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>            g<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            g<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> f<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> f<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>    <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> g<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> g<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> f<span class=\"br0\">[</span><span class=\"sy0\">#</span>f<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> f<span class=\"br0\">[</span><span class=\"sy0\">#</span>f<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> g<span class=\"br0\">[</span><span class=\"sy0\">#</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> g<span class=\"br0\">[</span><span class=\"sy0\">#</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span>        <br/>    f<span class=\"sy0\">,</span> g <span class=\"sy0\">=</span> g<span class=\"sy0\">,</span> f<br/>\u00a0<br/>    Output<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> l <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> </pre>"}, {"lang": "M4", "loc": 36, "block": "<pre class=\"text highlighted_source\">divert(-1)<br/>define(`set',`define(`$1[$2]',`$3')')<br/>define(`get',`defn(`$1[$2]')')<br/>define(`setrange',`ifelse(`$3',`',$2,`define($1[$2],$3)`'setrange($1,<br/>   incr($2),shift(shift(shift(<a class=\"__cf_email__\" data-cfemail=\"dbff9b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))))')')<br/>\u00a0<br/>dnl  throw in sentinels at each end (0 and size+1) to make counting easy<br/>define(`new',`set($1,size,eval($#-1))`'setrange($1,1,<br/>   shift(<a class=\"__cf_email__\" data-cfemail=\"e7c3a7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))`'set($1,0,0)`'set($1,$#,0)')<br/>\u00a0<br/>define(`for',<br/>   `ifelse($#,0,``$0'',<br/>   `ifelse(eval($2&lt;=$3),1,<br/>   `pushdef(`$1',$2)$4`'popdef(`$1')$0(`$1',incr($2),$3,`$4')')')')<br/>define(`show',<br/>   `for(`k',1,get($1,size),`get($1,k) ')')<br/>\u00a0<br/>dnl  swap(`a',a,`b')  using arg stack for temp<br/>define(`swap',`define(`$1',$3)`'define(`$3',$2)')<br/>define(`nalive',<br/>   `eval(get($1,decr($2))+get($1,incr($2)))')<br/>setrange(`live',0,0,1,0)<br/>setrange(`dead',0,0,0,1)<br/>define(`nv',<br/>   `ifelse(get($1,z),0,`get(dead,$3)',`get(live,$3)')')<br/>define(`evolve',<br/>   `for(`z',1,get($1,size),<br/>      `set($2,z,nv($1,z,nalive($1,z)))')')<br/>new(`a',0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0)<br/>set(`b',size,get(`a',size))`'set(`b',0,0)`'set(`b',incr(get(`a',size)),0)<br/>define(`x',`a')<br/>define(`y',`b')<br/>divert<br/>for(`j',1,10,<br/>   `show(x)`'evolve(`x',`y')`'swap(`x',x,`y')<br/>')`'show(x)</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">CellularAutomaton[{{0,0,_}-&gt;0,{0,1,0}-&gt;0,{0,1,1}-&gt;1,{1,0,0}-&gt;0,{1,0,1}-&gt;1,{1,1,0}-&gt;1,{1,1,1}-&gt;0},{{1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1},0},12]<br/>Print @@@ (% /. {1 -&gt; \"#\", 0 -&gt; \".\"});</pre>"}, {"lang": "MATLAB / Octave", "loc": 9, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> one_dim_cell_automata<span class=\"br0\">(</span>v,n<span class=\"br0\">)</span><br/>   V=<span class=\"co2\">'_#'</span>;<br/>   <span class=\"kw1\">while</span> n&gt;=<span class=\"nu0\">0</span>;<br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>V<span class=\"br0\">(</span>v+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\tn = n-<span class=\"nu0\">1</span>;<br/>\tv = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/filter.html\"><span class=\"kw2\">filter</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"nu0\">1</span>,<span class=\"br0\">[</span><span class=\"nu0\">0</span>,v,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\tv = v<span class=\"br0\">(</span><span class=\"nu0\">3</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span>==<span class=\"nu0\">2</span>;<br/>   <span class=\"kw1\">end</span>; <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Modula-3", "loc": 43, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Cell <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt<span class=\"sy0\">,</span> Word;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> culture <span class=\"sy0\">:=</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">19</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <br/>                                         <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <br/>                                         <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <br/>                                         <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <br/>                                         <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Step<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> culture<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span> left<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>      this<span class=\"sy0\">,</span> right<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>culture<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>culture<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      right <span class=\"sy0\">:=</span> culture<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>;<br/>      this <span class=\"sy0\">:=</span> culture<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>      culture<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <br/>          Word.<span class=\"me1\">Or</span><span class=\"br0\">(</span>Word.<span class=\"me1\">And</span><span class=\"br0\">(</span>this<span class=\"sy0\">,</span> Word.<span class=\"me1\">Xor</span><span class=\"br0\">(</span>left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Word.<span class=\"me1\">And</span><span class=\"br0\">(</span>Word.<span class=\"me1\">Not</span><span class=\"br0\">(</span>this<span class=\"br0\">)</span><span class=\"sy0\">,</span> Word.<span class=\"me1\">And</span><span class=\"br0\">(</span>left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      left <span class=\"sy0\">:=</span> this;<br/>    <span class=\"kw1\">END</span>;<br/>    culture<span class=\"br0\">[</span><span class=\"kw3\">LAST</span><span class=\"br0\">(</span>culture<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Word.<span class=\"me1\">And</span><span class=\"br0\">(</span>culture<span class=\"br0\">[</span><span class=\"kw3\">LAST</span><span class=\"br0\">(</span>culture<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Word.<span class=\"me1\">Not</span><span class=\"br0\">(</span>left<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> Step;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Put<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> culture<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>culture<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>culture<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> culture<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>        IO.<span class=\"me1\">PutChar</span><span class=\"br0\">(</span><span class=\"st_h\">'#'</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">ELSE</span><br/>        IO.<span class=\"me1\">PutChar</span><span class=\"br0\">(</span><span class=\"st_h\">'_'</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> Put;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span> <span class=\"kw1\">DO</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Generation \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>    Put<span class=\"br0\">(</span>culture<span class=\"br0\">)</span>;<br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>    Step<span class=\"br0\">(</span>culture<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Cell.</pre>"}, {"lang": "MontiLang", "loc": 79, "block": "<pre class=\"text highlighted_source\">30 VAR length .<br/>35 VAR height .<br/>FOR length 0 ENDFOR 1 0 ARR VAR list . <br/>length 1 - VAR topLen . <br/>FOR topLen 0 ENDFOR 1 ARR VAR topLst .  <br/>\u00a0<br/>DEF getNeighbors<br/>    1 - VAR tempIndex . <br/>    GET tempIndex SWAP <br/>    tempIndex 1 + VAR tempIndex .<br/>    GET tempIndex SWAP <br/>    tempIndex 1 + VAR tempIndex .<br/>    GET tempIndex SWAP .<br/>    FOR 3 TOSTR ROT ENDFOR<br/>    FOR 2 SWAP + ENDFOR  <br/>ENDDEF<br/>\u00a0<br/>DEF printArr<br/>    LEN 1 - VAR stLen .<br/>    0 VAR j .<br/>    FOR stLen<br/>        GET j <br/>        TOSTR OUT .<br/>        j 1 + VAR j .<br/>    ENDFOR<br/>    || PRINT .<br/>ENDDEF<br/>\u00a0<br/>FOR height<br/>    FOR length 0 ENDFOR ARR VAR next .<br/>    1 VAR i .<br/>    FOR length<br/>        list i getNeighbors VAR last . <br/>        i 1 - VAR ind .<br/>        last |111| == <br/>        IF\u00a0: .<br/>            next 0 INSERT ind<br/>        ENDIF<br/>\u00a0<br/>        last |110| ==<br/>        IF\u00a0: .<br/>            next 1 INSERT ind<br/>        ENDIF<br/>\u00a0<br/>        last |101| ==<br/>        IF\u00a0: .<br/>            next 1 INSERT ind<br/>        ENDIF<br/>\u00a0<br/>        last |100| ==<br/>        IF\u00a0: .<br/>            next 0 INSERT ind<br/>        ENDIF<br/>\u00a0<br/>        last |011| ==<br/>        IF\u00a0: .<br/>            next 1 INSERT ind<br/>        ENDIF<br/>\u00a0<br/>        last |010| ==<br/>        IF\u00a0: .<br/>            next 1 INSERT ind<br/>        ENDIF<br/>\u00a0<br/>        last |001| ==<br/>        IF\u00a0: .<br/>            next 1 INSERT ind<br/>        ENDIF<br/>\u00a0<br/>        last |000| ==<br/>        IF\u00a0: .<br/>            next 0 INSERT ind<br/>        ENDIF<br/>        clear<br/>        i 1 + VAR i .<br/>    ENDFOR <br/>    next printArr .<br/>    next 0 ADD APPEND . VAR list .<br/>ENDFOR</pre>"}, {"lang": "Nial", "loc": 10, "block": "<pre class=\"text highlighted_source\">% we need a way to write a values and pass the same back<br/>wi is rest link [write, pass]<br/>% calculate the neighbors by rotating the array left and right and joining them<br/>neighbors is pack [pass, sum [-1 rotate,  1 rotate]]<br/>% calculate the individual birth and death of a single array element<br/>igen is fork [ = [ + [first, second], 3 first], 0 first, = [ + [first, second], 2 first], 1 first, 0 first ]<br/>% apply that to the array<br/>nextgen is each igen neighbors<br/>% 42<br/>life is fork [ &gt; [sum pass, 0 first], life nextgen wi, pass ]</pre>"}, {"lang": "Nim", "loc": 48, "block": "<pre class=\"text highlighted_source\">import random<br/>\u00a0<br/>\u00a0<br/>type<br/>  BoolArray  = array[30, bool]<br/>  Symbols    = array[bool, char]<br/>\u00a0<br/>\u00a0<br/>proc neighbours(map: BoolArray, i: int): int =<br/>  if i &gt; 0:             inc(result, int(map[i - 1]))<br/>  if i + 1 &lt; len(map):  inc(result, int(map[i + 1]))<br/>\u00a0<br/>proc print(map: BoolArray, symbols: Symbols) =<br/>  for i in map: write(stdout, symbols[i])<br/>  write(stdout, \"\\l\")<br/>\u00a0<br/>proc randomMap: BoolArray =<br/>  randomize()<br/>  for i in mitems(result): i = rand([true, false])<br/>\u00a0<br/>\u00a0<br/>const<br/>  num_turns = 20<br/>  symbols   = ['_', '#']<br/>\u00a0<br/>  T = true<br/>  F = false<br/>\u00a0<br/>var map = <br/>  [F, T, T, T, F, T, T, F, T, F, T, F, T, F, T,<br/>    F, F, T, F, F, F, F, F, F, F, F, F, F, F, F]<br/>\u00a0<br/># map = randomMap()  # uncomment for random start<br/>\u00a0<br/>print(map, symbols)<br/>\u00a0<br/>for _ in 0 ..&lt; num_turns:<br/>  var map2 = map<br/>\u00a0<br/>  for i, v in pairs(map):<br/>    map2[i] =<br/>      if v: neighbours(map, i) == 1<br/>      else: neighbours(map, i) == 2<br/>\u00a0<br/>  print(map2, symbols)<br/>\u00a0<br/>  if map2 == map: break<br/>  map = map2</pre>"}, {"lang": "OCaml", "loc": 29, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> get g i <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> g<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> next_cell g i <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> get g <span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, get g <span class=\"br0\">(</span>i<span class=\"br0\">)</span>, get g <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> assert<span class=\"br0\">(</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> next g <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> old_g <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>copy g <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length g<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    g<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span>next_cell old_g i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print_g g <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length g<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> g<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> <span class=\"sy0\">'</span>_<span class=\"sy0\">'</span><br/>    <span class=\"kw1\">else</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> <span class=\"sy0\">'#'</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 11, "block": "<pre class=\"text highlighted_source\">: nextGen(l)<br/>| i |<br/>   StringBuffer new<br/>   l size loop: i [ <br/>      l at( i 1- ) '#' == <br/>      l at( i 1+ ) '#' == + <br/>      l at( i )    '#' == + <br/>      2 == ifTrue: [ '#' ] else: [ '_' ] over add <br/>      ]\u00a0;<br/>\u00a0<br/>: gen(l, n)  l dup println #[ nextGen dup println ] times(n)\u00a0;</pre>"}, {"lang": "Oz", "loc": 36, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  A0 = <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>toTuple <span class=\"kw1\">unit</span> <span class=\"st0\">\"_###_##_#_#_#_#__#__\"</span><span class=\"br0\">}</span><br/>\u00a0<br/>  MaxGenerations = 9<br/>\u00a0<br/>  Rules = <span class=\"kw1\">unit</span><span class=\"br0\">(</span><span class=\"st0\">'___'</span>:<span class=\"re3\">&amp;_</span><br/>               <span class=\"st0\">'__#'</span>:<span class=\"re3\">&amp;_</span><br/>               <span class=\"st0\">'_#_'</span>:<span class=\"re3\">&amp;_</span><br/>               <span class=\"st0\">'_##'</span>:<span class=\"re3\">&amp;#</span><br/>               <span class=\"st0\">'#__'</span>:<span class=\"re3\">&amp;_</span><br/>               <span class=\"st0\">'#_#'</span>:<span class=\"re3\">&amp;#</span><br/>               <span class=\"st0\">'##_'</span>:<span class=\"re3\">&amp;#</span><br/>               <span class=\"st0\">'###'</span>:<span class=\"re3\">&amp;_</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Evolve</span> A<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>mapInd A<br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> I V<span class=\"br0\">}</span><br/>         Left = <span class=\"br0\">{</span>CondSelect A I<span class=\"sy0\">-</span>1 <span class=\"re3\">&amp;_</span><span class=\"br0\">}</span><br/>         Right = <span class=\"br0\">{</span>CondSelect A I<span class=\"sy0\">+</span>1 <span class=\"re3\">&amp;_</span><span class=\"br0\">}</span><br/>         Env = <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toAtom <span class=\"br0\">[</span>Left V Right<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">in</span><br/>         Rules<span class=\"sy0\">.</span>Env<br/>      <span class=\"kw1\">end</span><br/>     <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> lazy <span class=\"br0\">{</span><span class=\"re1\">Iterate</span> X F<span class=\"br0\">}</span><br/>     X<span class=\"sy0\">|</span><span class=\"br0\">{</span>Iterate <span class=\"br0\">{</span>F X<span class=\"br0\">}</span> F<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span><br/>     I <span class=\"kw1\">in</span> 0<span class=\"sy0\">..</span>MaxGenerations<br/>     A <span class=\"kw1\">in</span> <span class=\"br0\">{</span>Iterate A0 Evolve<span class=\"br0\">}</span><br/>  <span class=\"kw1\">do</span><br/>     <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Gen. \"</span><span class=\"sy0\">#</span>I<span class=\"sy0\">#</span><span class=\"st0\">\": \"</span><span class=\"sy0\">#</span><span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>toList A<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">step<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>u<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>#v<span class=\"br0\">)</span><span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span>u<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&amp;</span>v<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>u<span class=\"br0\">[</span>#u<span class=\"br0\">]</span><span class=\"sy0\">=</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"sy0\">&amp;</span>v<span class=\"br0\">[</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>k<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>v<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>k<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>k<span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>u<span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 73, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Test<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}{$MODE DELPHI}{$ELSE}{$APPTYPE}{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  cCHAR<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">char</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"sy1\">,</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  TRow <span class=\"sy3\">=</span>  <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ConvertToRow<span class=\"br0\">(</span><span class=\"kw1\">const</span> s<span class=\"sy1\">:</span><span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span>tRow<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>Result<span class=\"sy1\">,</span>length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    result<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">=</span>cChar<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> OutRow<span class=\"br0\">(</span><span class=\"kw1\">const</span> row<span class=\"sy1\">:</span>tRow<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//create output string</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>result<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> cChar<span class=\"br0\">[</span>row<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> NextRow<span class=\"br0\">(</span>row<span class=\"sy1\">:</span>pByteArray<span class=\"sy1\">;</span>MaxIdx<span class=\"sy1\">:</span>NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//compute next row in place by the using a small storage for the </span><br/><span class=\"co1\">//2 values, that would otherwise be overridden</span><br/><span class=\"kw1\">var</span><br/>  leftValue<span class=\"sy1\">,</span>Value<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span>trpCnt<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  leftValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  trpCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>row<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> i &lt; MaxIdx <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    Value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//the rule for survive\u00a0: PopCnt == 2</span><br/>    row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span>trpCnt<span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//reduce popcnt of element before</span><br/>    dec<span class=\"br0\">(</span>trpCnt<span class=\"sy1\">,</span>leftValue<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//goto next element</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    leftValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Value<span class=\"sy1\">;</span><br/>    <span class=\"co1\">//increment popcnt by right element</span><br/>    inc<span class=\"br0\">(</span>trpCnt<span class=\"sy1\">,</span>row<span class=\"br0\">[</span>i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//move to next position in ring buffer</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  row<span class=\"br0\">[</span>MaxIdx<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span>trpCnt<span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  TestString<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy3\">=</span><span class=\"st0\">'  ### ## # # # #  #  '</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  row<span class=\"sy1\">:</span>tRow<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Teststring<span class=\"sy1\">;</span><br/>  row<span class=\"sy1\">:</span><span class=\"sy3\">=</span> ConvertToRow<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>OutRow<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    NextRow<span class=\"br0\">(</span><span class=\"sy2\">@</span>row<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>High<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"co5\">$_</span><span class=\"sy0\">=</span><span class=\"st0\">\"_###_##_#_#_#_#__#__<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>  <span class=\"co2\">y/01/_#/</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><span class=\"sy0\">;</span><br/>  <span class=\"co2\">y/_#/01/</span><span class=\"sy0\">;</span><br/>  <span class=\"co2\">s/(?&lt;=(.))(.)(?=(.))/$1 == $3\u00a0? $1\u00a0? 1-$2\u00a0: 0\u00a0: $2/eg</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"kw1\">ne</span> <span class=\"co5\">$_</span> <span class=\"kw1\">and</span> <span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 36, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Automaton <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw2\">rule</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">cells</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">code</span> <span class=\"sy0\">=</span> $<span class=\"sy0\">!</span><span class=\"kw2\">rule</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st_h\">'%08b'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> gist <span class=\"br0\">{</span> <span class=\"st0\">\"|{ @!cells.map({+$_\u00a0?? '#'\u00a0!! ' '}).join }|\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> <span class=\"kw3\">succ</span> <span class=\"br0\">{</span><br/>        self<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span>$<span class=\"sy0\">!</span><span class=\"kw2\">rule</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">@!code</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>cells<span class=\"br0\">(</span> <br/>            <span class=\"re0\">@!code</span><span class=\"br0\">[</span><br/>                    <span class=\"nu0\">4</span> \u00ab<span class=\"sy0\">*</span>\u00ab\u00a0<span class=\"re0\">@!cells</span><span class=\"sy0\">.</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>               \u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"nu0\">2</span> \u00ab<span class=\"sy0\">*</span>\u00ab\u00a0<span class=\"re0\">@!cells</span><br/>               \u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0      <span class=\"re0\">@!cells</span><span class=\"sy0\">.</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  The rule proposed for this task is rule 0b01101000 = 104</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@padding</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> Automaton <span class=\"re0\">$a</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"sy0\">:</span><br/>    <span class=\"kw2\">rule</span>  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">104</span><span class=\"sy0\">,</span><br/>    cells <span class=\"sy0\">=&gt;</span> flat <span class=\"re0\">@padding</span><span class=\"sy0\">,</span> <span class=\"st_h\">'111011010101'</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">,</span> <span class=\"re0\">@padding</span><br/><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$a</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Rule 104 is not particularly interesting so here is [[wp:Rule 90|Rule 90]], </span><br/><span class=\"co1\"># which shows a [[wp:Sierpinski Triangle|Sierpinski Triangle]].</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@padding</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> Automaton<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span><span class=\"kw2\">rule</span><span class=\"br0\">(</span><span class=\"nu0\">90</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>cells<span class=\"br0\">(</span>flat <span class=\"re0\">@padding</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@padding</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$a</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">20</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">string s = \"_###_##_#_#_#_#__#__\"<br/>integer prev='_', curr, toggled = 1<br/>\u00a0<br/>while 1 do<br/>   \u00a0?s<br/>    for i=2 to length(s)-1 do<br/>        curr = s[i]<br/>        if prev=s[i+1] <br/>        and (curr='#' or prev='#') then<br/>            s[i] = 130-curr<br/>            toggled = 1<br/>        end if<br/>        prev = curr<br/>    end for<br/>    if not toggled then\u00a0?s exit end if<br/>    toggled = 0<br/>end while</pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(let Cells (chop \"_###_##_#_#_#_#__#__\")<br/>   (do 10<br/>      (prinl Cells)<br/>      (setq Cells<br/>         (make<br/>            (link \"_\")<br/>            (map<br/>               '((L)<br/>                  (case (head 3 L)<br/>                     (`(mapcar chop '(\"___\" \"__#\" \"_#_\" \"#__\" \"###\"))<br/>                         (link \"_\") )<br/>                     (`(mapcar chop '(\"_##\" \"#_#\" \"##_\"))<br/>                        (link \"#\") ) ) )<br/>               Cells )<br/>            (link \"_\") ) ) ) )</pre>"}, {"lang": "Prolog", "loc": 74, "block": "<pre class=\"prolog highlighted_source\">one_dimensional_cellular_automata<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>my_write<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>LN<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% there is a 0 before the beginning</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy5\">|</span>L<span class=\"br0\">]</span><span class=\"sy4\">,</span> LN<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   L \\<span class=\"sy6\">=</span> LN <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> one_dimensional_cellular_automata<span class=\"br0\">(</span>LN<span class=\"br0\">)</span><span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% All the possibilites</span><br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy5\">|</span> R1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcompute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span> R<span class=\"br0\">]</span><span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% the last four possibilies =&gt;</span><br/><span class=\"co1\">% we consider that there is \u00e0 0  after the end</span><br/>complang jq<span class=\"sy6\">&gt;</span># The <span class=\"nu0\">1</span><span class=\"sy3\">-</span>d cellular automaton<span class=\"sy4\">:</span><br/>def next<span class=\"sy4\">:</span><br/>   # Conveniently<span class=\"sy4\">,</span> jq treats null as <span class=\"nu0\">0</span> when it comes to addition<br/>   # so there <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> no need to fiddle with the boundaries<br/>  <span class=\"sy4\">.</span> as $old<br/>  <span class=\"sy5\">|</span> reduce range<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> length<span class=\"br0\">)</span> as $i<br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">(</span>$old<span class=\"br0\">[</span>$i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> $old<span class=\"br0\">[</span>$i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> as $s<br/>     <span class=\"sy5\">|</span> if   $s <span class=\"sy6\">==</span> <span class=\"nu0\">0</span> then <span class=\"sy4\">.</span><span class=\"br0\">[</span>$i<span class=\"br0\">]</span> <span class=\"sy6\">=</span> <span class=\"nu0\">0</span><br/>       elif $s <span class=\"sy6\">==</span> <span class=\"nu0\">1</span> then <span class=\"sy4\">.</span><span class=\"br0\">[</span>$i<span class=\"br0\">]</span> <span class=\"sy6\">=</span> <span class=\"br0\">(</span>if $old<span class=\"br0\">[</span>$i<span class=\"br0\">]</span> <span class=\"sy6\">==</span> <span class=\"nu0\">1</span> then <span class=\"nu0\">1</span> else <span class=\"nu0\">0</span> end<span class=\"br0\">)</span><br/>       else              <span class=\"sy4\">.</span><span class=\"br0\">[</span>$i<span class=\"br0\">]</span> <span class=\"sy6\">=</span> <span class=\"br0\">(</span>if $old<span class=\"br0\">[</span>$i<span class=\"br0\">]</span> <span class=\"sy6\">==</span> <span class=\"nu0\">1</span> then <span class=\"nu0\">0</span> else <span class=\"nu0\">1</span> end<span class=\"br0\">)</span><br/>       end<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\u00a0<br/># pretty<span class=\"sy3\">-</span>print an array<span class=\"sy4\">:</span><br/>def pp<span class=\"sy4\">:</span> reduce <span class=\"sy4\">.</span><span class=\"br0\">[</span><span class=\"br0\">]</span> as $i <span class=\"br0\">(</span>\"\"<span class=\"sy4\">;</span> <span class=\"sy4\">.</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>if $i <span class=\"sy6\">==</span> <span class=\"nu0\">0</span> then \" \" else \"<span class=\"sy3\">*</span>\" end<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/># continue until quiescence<span class=\"sy4\">:</span><br/>def go<span class=\"sy4\">:</span> recurse<span class=\"br0\">(</span><span class=\"sy4\">.</span> as $prev <span class=\"sy5\">|</span> next <span class=\"sy5\">|</span> if <span class=\"sy4\">.</span> <span class=\"sy6\">==</span> $prev then empty else <span class=\"sy4\">.</span> end<span class=\"br0\">)</span> <span class=\"sy5\">|</span> pp<span class=\"sy4\">;</span><br/>\u00a0<br/># Example<span class=\"sy4\">:</span><br/><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy5\">|</span> goute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_write<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"sy4\">.</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_write<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>#<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>one_dimensional_cellular_automata <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tone_dimensional_cellular_automata<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 31, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">Dim</span> cG.i<span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">Dim</span> nG.i<span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Define</span>.i n, Gen<br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><br/><span class=\"kw1\">EndDataSection</span><br/><span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>  <span class=\"kw1\">Read</span>.i cG<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Repeat</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Generation \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">95</span><span class=\"sy0\">-</span>cG<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  Gen <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>cG<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"br0\">(</span>cG<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">XOr</span> cg<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"kw1\">Not</span> cG<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"br0\">(</span>cG<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> cg<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     nG<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>   <span class=\"kw1\">Else</span><br/>     nG<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>   <br/>   <span class=\"kw1\">EndIf</span>    <br/>  <span class=\"kw1\">Next</span> <br/>  CopyArray<span class=\"br0\">(</span>nG<span class=\"br0\">(</span><span class=\"br0\">)</span>, cG<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Until</span> Gen <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><br/>\u00a0<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw1\">Repeat</span>: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "Python", "loc": 25, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/>printdead<span class=\"sy0\">,</span> printlive <span class=\"sy0\">=</span> <span class=\"st0\">'_#'</span><br/>maxgenerations <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>cellcount <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>offendvalue <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><br/>\u00a0<br/>universe <span class=\"sy0\">=</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">choice</span><span class=\"br0\">(</span><span class=\"st0\">'01'</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>cellcount<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>neighbours2newstate <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/> <span class=\"st0\">'000'</span>: <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/> <span class=\"st0\">'001'</span>: <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/> <span class=\"st0\">'010'</span>: <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/> <span class=\"st0\">'011'</span>: <span class=\"st0\">'1'</span><span class=\"sy0\">,</span><br/> <span class=\"st0\">'100'</span>: <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/> <span class=\"st0\">'101'</span>: <span class=\"st0\">'1'</span><span class=\"sy0\">,</span><br/> <span class=\"st0\">'110'</span>: <span class=\"st0\">'1'</span><span class=\"sy0\">,</span><br/> <span class=\"st0\">'111'</span>: <span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>maxgenerations<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Generation\u00a0%3i: \u00a0%s\"</span>\u00a0% <span class=\"br0\">(</span> i<span class=\"sy0\">,</span><br/>          universe.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"sy0\">,</span> printdead<span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"sy0\">,</span> printlive<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    universe <span class=\"sy0\">=</span> offendvalue + universe + offendvalue<br/>    universe <span class=\"sy0\">=</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>neighbours2newstate<span class=\"br0\">[</span>universe<span class=\"br0\">[</span>i:i+<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>cellcount<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 33, "block": "<pre class=\"text highlighted_source\">set.seed(15797, kind=\"Mersenne-Twister\")<br/>\u00a0<br/>maxgenerations = 10<br/>cellcount = 20<br/>offendvalue = FALSE<br/>\u00a0<br/>## Cells are alive if TRUE, dead if FALSE<br/>universe &lt;- c(offendvalue,<br/>              sample( c(TRUE, FALSE), cellcount, replace=TRUE),<br/>              offendvalue)<br/>\u00a0<br/>## List of patterns in which the cell stays alive<br/>stayingAlive &lt;- lapply(list(c(1,1,0),<br/>                            c(1,0,1),<br/>                            c(0,1,0)), as.logical)<br/>\u00a0<br/>## x\u00a0: length 3 logical vector<br/>## map: list of length 3 logical vectors that map to patterns<br/>##      in which x stays alive<br/>deadOrAlive &lt;- function(x, map) list(x)\u00a0%in% map<br/>\u00a0<br/>cellularAutomata &lt;- function(x, map) {<br/>    c(x[1], apply(embed(x, 3), 1, deadOrAlive, map=map), x[length(x)])<br/>}<br/>\u00a0<br/>deadOrAlive2string &lt;- function(x) {<br/>    paste(ifelse(x, '#', '_'), collapse=\"\")<br/>}<br/>\u00a0<br/>for (i in 1:maxgenerations) {<br/>    universe &lt;- cellularAutomata(universe, stayingAlive)<br/>    cat(format(i, width=3), deadOrAlive2string(universe), \"\\n\")<br/>}</pre>"}, {"lang": "Racket", "loc": 27, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (update cells)<br/>  (for/list ([crowding (map +<br/>                            (append '(0) (drop-right cells 1))<br/>                            cells<br/>                            (append (drop cells 1) '(0)))])<br/>    (if (= 2 crowding) 1 0)))<br/>\u00a0<br/>(define (life-of cells time)<br/>  (unless (zero? time)<br/>    (displayln cells)<br/>    (life-of (update cells) (sub1 time))))<br/>\u00a0<br/>(life-of '(0 1 1 1 0 1 1 0 1 0 1 0 1 0 1 0 0 1 0 0)<br/>         10)<br/>\u00a0<br/>#| (0 1 1 1 0 1 1 0 1 0 1 0 1 0 1 0 0 1 0 0)<br/>   (0 1 0 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 0 0)<br/>   (0 0 1 1 0 0 0 1 1 0 1 0 1 0 0 0 0 0 0 0)<br/>   (0 0 1 1 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 0)<br/>   (0 0 1 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0)<br/>   (0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0)<br/>   (0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0)<br/>   (0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0)<br/>   (0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)<br/>   (0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) |#</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program generates &amp; displays N generations of one\u2500dimensional cellular automata. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $ gens <span class=\"sy0\">.</span>                               <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>    $==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>    $==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> $=001110110101010  <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> gens==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> gens==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> gens=<span class=\"nu0\">40</span>            <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> #=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> gens                              <span class=\"coMULTI\">/* process the  one-dimensional  cells.*/</span><br/>   <span class=\"kw1\">say</span>  <span class=\"st0\">\" generation\"</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>#,<span class=\"kw6\">length</span><span class=\"br0\">(</span>gens<span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"st0\">' '</span>       <span class=\"kw6\">translate</span><span class=\"br0\">(</span>$, <span class=\"st0\">\"#\u00b7\"</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>   @=<span class=\"nu0\">0</span>                                                                <span class=\"coMULTI\">/* [\u2193] generation.*/</span><br/>          <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span> - <span class=\"nu0\">1</span>;          x=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, j-<span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*obtain the cell.*/</span><br/>          <span class=\"kw1\">if</span> x==011 <span class=\"sy0\">|</span> x==<span class=\"nu0\">101</span> <span class=\"sy0\">|</span> x==<span class=\"nu0\">110</span>  <span class=\"kw3\">then</span> @=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, @, j<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*the cell lives. */</span><br/>                                       <span class=\"kw3\">else</span> @=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, @, j<span class=\"br0\">)</span>        <span class=\"coMULTI\">/* \"   \"    dies. */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <a class=\"__cf_email__\" data-cfemail=\"bf9b8282ff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'repeats'</span>, <span class=\"nu0\">40</span><span class=\"br0\">)</span>;  <span class=\"kw1\">leave</span>;  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*does it repeat? */</span><br/>   <a class=\"__cf_email__\" data-cfemail=\"2e0a136e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                                           <span class=\"coMULTI\">/*now use the next generation of cells.*/</span><br/>   <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*#*/</span>                               <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Retro", "loc": 33, "block": "<pre class=\"text highlighted_source\">{{<br/> \u00a0: $, ( $- ) withLength [ @+ , ] times @ ,\u00a0;<br/>  create this   \".###.##.#.#.#.#..#..\" $,<br/>  create next   this getLength allot<br/>  create group  \"...\" $,<br/>  variable neighbours<br/>\u00a0<br/> \u00a0: reset                  0\u00a0!neighbours\u00a0;<br/> \u00a0: hasNeighbour?          @ '# = [ neighbours ++ ] ifTrue\u00a0;<br/> \u00a0: countNeighboursOnEdge  '# = [ 1 ] [ 0 ] if\u00a0!neighbours\u00a0;<br/> \u00a0: flip                   dup this + @ '# = [ '. ] [ '# ] if\u00a0;<br/> \u00a0: extract                dup this + 1- group 3 copy\u00a0;<br/>\u00a0<br/> \u00a0: count<br/>    ( left   ) [  0 = ] [ @this        countNeighboursOnEdge ] when<br/>    ( right  ) [ 19 = ] [  this 19 + @ countNeighboursOnEdge ] when<br/>    ( middle ) reset extract group dup 2 + 2hasNeighbour?\u00a0;<br/>\u00a0<br/> \u00a0: process<br/>    reset count @neighbours<br/>    [ 0 = ] [ drop dup next + '. swap\u00a0!       ] when<br/>    [ 1 = ] [ drop dup this + @ over next +\u00a0! ] when<br/>    [ 2 = ] [ drop flip over next +\u00a0!         ] when<br/>    drop\u00a0;<br/>\u00a0<br/> \u00a0: generation<br/>    0 this getLength<br/>    [ process 1+ ] times drop<br/>    next this withLength copy\u00a0;<br/>---reveal---<br/> \u00a0: generations<br/>    cr 0 swap [ [ this swap \"%d\u00a0%s\\n\" puts ] sip generation 1+ ] times drop\u00a0;<br/>}}</pre>"}, {"lang": "Ring", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: One-dimensional cellular automata<br/>\u00a0<br/>rule = [\"0\", \"0\", \"0\", \"1\", \"0\", \"1\", \"1\", \"0\"]<br/>now = \"01110110101010100100\"<br/>\u00a0<br/>for generation = 0 to 9<br/>    see \"generation \" + generation + \": \" + now + nl<br/>    nxt = \"\"<br/>    for cell = 1 to len(now)<br/>        str = \"bintodec(\" + '\"' +substr(\"0\"+now+\"0\", cell, 3) + '\"' + \")\"<br/>        eval(\"p=\" + str) <br/>        nxt = nxt + rule[p+1]<br/>    next <br/>    temp = nxt<br/>    nxt = now<br/>    now = temp<br/>next <br/>\u00a0<br/>func bintodec(bin)<br/>     binsum = 0<br/>     for n=1  to len(bin)<br/>         binsum = binsum + number(bin[n]) *pow(2, len(bin)-n)<br/>     next<br/>     return binsum<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 13, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> evolve<span class=\"br0\">(</span>ary<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>ary<span class=\"sy0\">+</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">each_cons</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b,c<span class=\"sy0\">|</span> a<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span>c == <span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> printit<span class=\"br0\">(</span>ary<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> ary.<span class=\"me1\">join</span>.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">\"01\"</span>,<span class=\"st0\">\".#\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>ary = <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>printit ary<br/><span class=\"kw1\">until</span> ary == <span class=\"br0\">(</span>new = evolve<span class=\"br0\">(</span>ary<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  printit ary = new<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> cellularAutomata<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> it <span class=\"sy0\">=</span> Iterator.<span class=\"me1\">iterate</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">(</span> generation <span class=\"sy0\">=&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"st0\">\"_%s_\"</span> format generation<span class=\"br0\">)</span>.<span class=\"me1\">iterator</span> <br/>    sliding <span class=\"nu0\">3</span> <br/>    map <span class=\"br0\">(</span><span class=\"sy0\">_</span> count <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    map Map<span class=\"br0\">(</span><span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span>.<span class=\"me1\">withDefaultValue</span><span class=\"br0\">(</span><span class=\"st0\">\"_\"</span><span class=\"br0\">)</span> <br/>    mkString<br/>  <span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>it drop <span class=\"nu0\">1</span><span class=\"br0\">)</span> zip it takeWhile Function.<span class=\"me1\">tupled</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span> foreach println<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 21, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>generation left petri<span class=\"sy0\">-</span>dish right<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> petri<span class=\"sy0\">-</span>dish<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> left<br/>                      <span class=\"br0\">(</span><span class=\"kw1\">car</span> petri<span class=\"sy0\">-</span>dish<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> petri<span class=\"sy0\">-</span>dish<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          right<br/>                          <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> petri<span class=\"sy0\">-</span>dish<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                <span class=\"nu0\">1</span><br/>                <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>generation <span class=\"br0\">(</span><span class=\"kw1\">car</span> petri<span class=\"sy0\">-</span>dish<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> petri<span class=\"sy0\">-</span>dish<span class=\"br0\">)</span> right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>display<span class=\"sy0\">-</span>evolution petri<span class=\"sy0\">-</span>dish generations<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> generations<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> petri<span class=\"sy0\">-</span>dish<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>display<span class=\"sy0\">-</span>evolution <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>generation <span class=\"nu0\">0</span> petri<span class=\"sy0\">-</span>dish <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"sy0\">-</span> generations <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>display<span class=\"sy0\">-</span>evolution <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 26, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const string: start is \"_###_##_#_#_#_#__#__\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: g0 is start;<br/>    var string: g1 is start;<br/>    var integer: generation is 0;<br/>    var integer: i is 0;<br/>  begin<br/>    writeln(g0);<br/>    for generation range 0 to 9 do<br/>      for i range 2 to pred(length(g0)) do<br/>        if g0[i-1] &lt;&gt; g0[i+1] then<br/>          g1 @:= [i] g0[i];<br/>        elsif g0[i] = '_' then<br/>          g1 @:= [i] g0[i-1];<br/>        else<br/>          g1 @:= [i] '_'<br/>        end if;<br/>      end for;<br/>      writeln(g1);<br/>      g0\u00a0:= g1;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 30, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Conversion.sl&gt;;<br/>\u00a0<br/>main(args(2))\u00a0:=<br/>    run(args[1], stringToInt(args[2])) when size(args) = 2 <br/>else<br/>    \"Usage error: exec &lt;initialCells&gt; &lt;generations&gt;\";<br/>\u00a0<br/>stringToCells(string(1))[i]\u00a0:= 0 when string[i] = '_' else 1;<br/>cellsToString(cells(1))[i]\u00a0:= '#' when cells[i] = 1 else '_'; <br/>\u00a0<br/>run(cellsString(1), generations)\u00a0:= <br/>        runHelper(stringToCells(cellsString), generations, cellsString);<br/>\u00a0<br/>runHelper(cells(1), generations, result(1))\u00a0:=<br/>    let<br/>        nextCells\u00a0:= step(cells);<br/>    in<br/>        result when generations = 0<br/>    else<br/>        runHelper(nextCells, generations - 1, <br/>                  result ++ \"\\n\" ++ cellsToString(nextCells));<br/>\u00a0<br/>step(cells(1))[i]\u00a0:= <br/>    let<br/>        left\u00a0:= cells[i-1] when i &gt; 1 else 0;<br/>        right\u00a0:= cells[i + 1] when i &lt; size(cells) else 0;<br/>    in<br/>        1 when (left + cells[i] + right) = 2<br/>    else<br/>        0;</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">var seq = <span class=\"st0\">\"_###_##_#_#_#_#__#__\"</span>;<br/>var x = <span class=\"st0\">''</span>;<br/>\u00a0<br/><span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>    seq.<span class=\"me1\">tr</span>!<span class=\"br0\">(</span><span class=\"st0\">'01'</span>, <span class=\"st0\">'_#'</span><span class=\"br0\">)</span>;<br/>    say seq;<br/>    seq.<span class=\"me1\">tr</span>!<span class=\"br0\">(</span><span class=\"st0\">'_#'</span>, <span class=\"st0\">'01'</span><span class=\"br0\">)</span>;<br/>    seq.<span class=\"kw3\">gsub!</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>=<span class=\"br0\">(</span>.<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span><span class=\"br0\">(</span>?=<span class=\"br0\">(</span>.<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>s1,s2,s3<span class=\"sy0\">|</span> s1 == s3\u00a0? <span class=\"br0\">(</span>s1\u00a0? <span class=\"nu0\">1</span><span class=\"sy0\">-</span>s2\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0: s2<span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">(</span>x\u00a0!= seq<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>x = seq<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">break</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 36, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> evolve <span class=\"br0\">{</span>a<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> new <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> new <span class=\"br0\">[</span>fate <span class=\"re0\">$a</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$new</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> fate <span class=\"br0\">{</span>a i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>sum <span class=\"re0\">$a</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> sum <span class=\"br0\">{</span>a i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> start <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> - <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"re0\">$i</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> end <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> + <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span>= <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"re0\">$i</span>\u00a0: <span class=\"re0\">$i</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"re0\">$start</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$end</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">incr</span> sum <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span>        <br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$sum</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> print <span class=\"br0\">{</span>a<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"nu0\">0</span> _ <span class=\"nu0\">1</span> <span class=\"co1\">#} [join $a \"\"]]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> parse <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span>_ <span class=\"nu0\">0</span> <span class=\"co1\"># 1} $s] \"\"]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> array <span class=\"br0\">[</span>parse <span class=\"st0\">\"_###_##_#_#_#_#__#__\"</span><span class=\"br0\">]</span><br/>print <span class=\"re0\">$array</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> new <span class=\"br0\">[</span>evolve <span class=\"re0\">$array</span><span class=\"br0\">]</span><span class=\"br0\">]</span> ne <span class=\"re0\">$array</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> array <span class=\"re0\">$new</span><br/>    print <span class=\"re0\">$array</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 12, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>rule = -$&lt;0,0,0,&amp;,0,&amp;,&amp;,0&gt;@rSS zipp0*ziD iota8<br/>\u00a0<br/>step = rule*+ swin3+\u00a0:/0+ --&lt;0&gt;<br/>\u00a0<br/>evolve \"n\" = @iNC ~&amp;x+ rep\"n\" ^C/<a class=\"__cf_email__\" data-cfemail=\"11626574615179\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ~&amp;<br/>\u00a0<br/>#show+<br/>\u00a0<br/>example =  ~&amp;?(`#!,`.!)** evolve10 &lt;0,&amp;,&amp;,&amp;,0,&amp;,&amp;,0,&amp;,0,&amp;,0,&amp;,0,0,&amp;,0,0&gt;</pre>"}, {"lang": "Vedit macro language", "loc": 18, "block": "<pre class=\"vedit highlighted_source\">IT<span class=\"br0\">(</span><span class=\"st0\">\"Gen 0: ..###.##.#.#.#.#..#.....\"</span><span class=\"br0\">)</span>     <span class=\"co1\">// initial pattern</span><br/>#<span class=\"nu0\">9</span>  <span class=\"sy0\">=</span> Cur_Col<br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">8</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">8</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> #<span class=\"nu0\">8</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>             <span class=\"co1\">// 10 generations</span><br/>    Goto_Col<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    Reg_Empty<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>Cur_Col <span class=\"sy0\">&lt;</span> #<span class=\"nu0\">9</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Match<span class=\"br0\">(</span><span class=\"st0\">\"|{##|!#,#.#,|!###}\"</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Reg_Set<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"st0\">\"#\"</span><span class=\"sy0\">,</span> APPEND<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            Reg_Set<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"st0\">\".\"</span><span class=\"sy0\">,</span> APPEND<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        Char<br/>    <span class=\"br0\">}</span><br/>    EOL IN<br/>    IT<span class=\"br0\">(</span><span class=\"st0\">\"Gen \"</span><span class=\"br0\">)</span> Num_Ins<span class=\"br0\">(</span>#<span class=\"nu0\">8</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">+</span>NOCR<span class=\"br0\">)</span> IT<span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>    Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 105, "block": "<pre class=\"text highlighted_source\">Imports System.Text<br/>\u00a0<br/>Module CellularAutomata<br/>\u00a0<br/>    Private Enum PetriStatus<br/>        Active<br/>        Stable<br/>        Dead<br/>    End Enum<br/>\u00a0<br/>    Function Main(ByVal cmdArgs() As String) As Integer<br/>        If cmdArgs.Length = 0 Or cmdArgs.Length &gt; 1 Then<br/>            Console.WriteLine(\"Command requires string of either 1s and 0s or #s and _s.\")<br/>            Return 1<br/>        End If<br/>\u00a0<br/>        Dim petriDish As BitArray<br/>\u00a0<br/>        Try<br/>            petriDish = InitialisePetriDish(cmdArgs(0))<br/>        Catch ex As Exception<br/>            Console.WriteLine(ex.Message)<br/>            Return 1<br/>        End Try<br/>\u00a0<br/>        Dim generation As Integer = 0<br/>        Dim ps As PetriStatus = PetriStatus.Active<br/>\u00a0<br/>        Do While True<br/>            If ps = PetriStatus.Stable Then<br/>                Console.WriteLine(\"Sample stable after {0} generations.\", generation - 1)<br/>                Exit Do<br/>            Else<br/>                Console.WriteLine(\"{0}: {1}\", generation.ToString(\"D3\"), BuildDishString(petriDish))<br/>                If ps = PetriStatus.Dead Then<br/>                    Console.WriteLine(\"Sample dead after {0} generations.\", generation)<br/>                    Exit Do<br/>                End If<br/>            End If<br/>\u00a0<br/>            ps = GetNextGeneration(petriDish)<br/>            generation += 1<br/>        Loop<br/>\u00a0<br/>        Return 0<br/>    End Function<br/>\u00a0<br/>    Private Function InitialisePetriDish(ByVal Sample As String) As BitArray<br/>        Dim PetriDish As New BitArray(Sample.Length)<br/>        Dim dead As Boolean = True<br/>\u00a0<br/>        For i As Integer = 0 To Sample.Length - 1<br/>            Select Case Sample.Substring(i, 1)<br/>                Case \"1\", \"#\"<br/>                    PetriDish(i) = True<br/>                    dead = False<br/>                Case \"0\", \"_\"<br/>                    PetriDish(i) = False<br/>                Case Else<br/>                    Throw New Exception(\"Illegal value in string position \" &amp; i)<br/>                    Return Nothing<br/>            End Select<br/>        Next<br/>\u00a0<br/>        If dead Then<br/>            Throw New Exception(\"Entered sample is dead.\")<br/>            Return Nothing<br/>        End If<br/>\u00a0<br/>        Return PetriDish<br/>    End Function<br/>\u00a0<br/>    Private Function GetNextGeneration(ByRef PetriDish As BitArray) As PetriStatus<br/>        Dim petriCache = New BitArray(PetriDish.Length)<br/>        Dim neighbours As Integer<br/>        Dim stable As Boolean = True<br/>        Dim dead As Boolean = True<br/>\u00a0<br/>        For i As Integer = 0 To PetriDish.Length - 1<br/>            neighbours = 0<br/>            If i &gt; 0 AndAlso PetriDish(i - 1) Then neighbours += 1<br/>            If i &lt; PetriDish.Length - 1 AndAlso PetriDish(i + 1) Then neighbours += 1<br/>\u00a0<br/>            petriCache(i) = (PetriDish(i) And neighbours = 1) OrElse (Not PetriDish(i) And neighbours = 2)<br/>            If PetriDish(i) &lt;&gt; petriCache(i) Then stable = False<br/>            If petriCache(i) Then dead = False<br/>        Next<br/>\u00a0<br/>        PetriDish = petriCache<br/>\u00a0<br/>        If dead Then Return PetriStatus.Dead<br/>        If stable Then Return PetriStatus.Stable<br/>        Return PetriStatus.Active<br/>\u00a0<br/>    End Function<br/>\u00a0<br/>    Private Function BuildDishString(ByVal PetriDish As BitArray) As String<br/>        Dim sw As New StringBuilder()<br/>        For Each b As Boolean In PetriDish<br/>            sw.Append(IIf(b, \"#\", \"_\"))<br/>        Next<br/>\u00a0<br/>        Return sw.ToString()<br/>    End Function<br/>End Module</pre>"}, {"lang": "Wart", "loc": 17, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>gens n l<span class=\"br0\">)</span><br/>  prn l<br/>  repeat n<br/>    zap<span class=\"sy0\">!</span> gen l<br/>    prn l<br/>\u00a0<br/><span class=\"kw1\">def</span> <span class=\"br0\">(</span>gen l<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> <span class=\"br0\">(</span>a nil  b nil  c l.0<span class=\"br0\">)</span><br/>    collect nil  <span class=\"co1\"># won't insert paren without second token</span><br/>      each x cdr.<span class=\"me1\">l</span><br/>        shift<span class=\"sy0\">!</span> a b c x<br/>        <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>next a b c<span class=\"br0\">)</span><br/>      <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>next b c nil<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> <span class=\"br0\">(</span>next a b c<span class=\"br0\">)</span>  <span class=\"co1\"># next state of b given neighbors a and c</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> a c<span class=\"br0\">)</span>  <span class=\"kw1\">not</span>.<span class=\"me1\">b</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">or</span> a c<span class=\"br0\">)</span>  b</pre>"}, {"lang": "XPL0", "loc": 12, "block": "<pre class=\"text highlighted_source\">code ChOut=8, CrLf=9;<br/>int  Gen, Now, New, I;<br/>[Now:= $076A_A400;<br/>for Gen:= 1 to 10 do<br/>    [for I:= 31 downto 0 do ChOut(0, if Now &amp; 1&lt;&lt;I then ^# else ^_);<br/>    CrLf(0);<br/>    New:= 0;<br/>    for I:= 30 downto 1 do<br/>        case Now&gt;&gt;(I-1) &amp; 7 of\u00a0%011,\u00a0%101,\u00a0%110: New:= New\u00a0! 1&lt;&lt;I other;<br/>    Now:= New;<br/>    ];<br/>]</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn life1D(line){<br/>   right:=line[1,*] + False;           // shift left, False fill<br/>   left\u00a0:=T(False).extend(line[0,-1]); // shift right<br/>   left.zip(line,right).apply(fcn(hood){ hood.sum(0)==2 });<br/>}</pre>"}, {"lang": "Seed7", "loc": 1, "block": "<pre>           If petriCache(i) Then dead = False\n       Next\n</pre>"}]}