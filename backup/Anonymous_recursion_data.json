{"task": "Anonymous_recursion", "blocks": [{"lang": "Ada", "loc": 16, "block": "<pre class=\"ada highlighted_source\">   <span class=\"kw3\">function</span> Fib <span class=\"br0\">(</span>X: <span class=\"kw3\">in</span> Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">function</span> Actual_Fib <span class=\"br0\">(</span>N: <span class=\"kw3\">in</span> Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> N &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> N;<br/>         <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> Actual_Fib <span class=\"br0\">(</span>N-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + Actual_Fib <span class=\"br0\">(</span>N-<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> Actual_Fib;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> X &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw3\">raise</span> Constraint_Error;<br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">return</span> Actual_Fib <span class=\"br0\">(</span>X<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Fib;</pre>"}, {"lang": "ALGOL 68", "loc": 16, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> fibonacci <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> x <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> x <span class=\"sy1\">&lt;</span> 0<br/>     <span class=\"kw2\">THEN</span><br/>         <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"negative parameter to fibonacci\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         stop<br/>     <span class=\"kw2\">ELSE</span><br/>         <span class=\"kw4\">PROC</span> actual fibonacci <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>             <span class=\"kw2\">IF</span> n <span class=\"sy1\">&lt;</span> 2<br/>             <span class=\"kw2\">THEN</span><br/>                 n<br/>             <span class=\"kw2\">ELSE</span><br/>                 actual fibonacci<span class=\"br0\">(</span> n <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> actual fibonacci<span class=\"br0\">(</span> n <span class=\"sy1\">-</span> 2 <span class=\"br0\">)</span><br/>             <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>         actual fibonacci<span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>     <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 23, "block": "<pre class=\"autohotkey highlighted_source\">Fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tnold1 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\tnold2 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">If</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> Positive argument required!<br/>\t\t<span class=\"kw1\">Return</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">Return</span> nold2<br/>\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">Return</span> nold1<br/>\t<span class=\"re2\">Fib_Label:<br/></span>\tt <span class=\"sy0\">:=</span> nold2<span class=\"sy0\">+</span>nold1<br/>\t<span class=\"kw1\">If</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><br/>\t<span class=\"br0\">{</span><br/>\t\tn<span class=\"sy0\">--</span><br/>\t\tnold2<span class=\"sy0\">:=</span>nold1<br/>\t\tnold1<span class=\"sy0\">:=</span>t<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a> Fib_Label<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> t<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 17, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span>Fibonacci<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span>\t\t\t\t\t\t<span class=\"co0\">; ## USAGE EXAMPLE</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span>Fibonacci<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span>\t\t\t\t\t\t<span class=\"co0\">; ## USAGE EXAMPLE</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span>Fibonacci<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t\t\t\t\t\t        <span class=\"co0\">; ## USAGE EXAMPLE</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Fibonacci<span class=\"br0\">(</span><span class=\"re0\">$number</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$number</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"st0\">\"Invalid argument\"</span> \t\t\t\t<span class=\"co0\">; No negative numbers</span><br/>\u00a0<br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$number</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> \t\t\t\t\t\t\t<span class=\"co0\">; If $number equals 0 or 1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$number</span>  \t\t\t\t\t\t<span class=\"co0\">; then return that $number</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a>\t\t\t\t\t\t\t\t\t<span class=\"co0\">; Else $number equals 2 or more</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> Fibonacci<span class=\"br0\">(</span><span class=\"re0\">$number</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Fibonacci<span class=\"br0\">(</span><span class=\"re0\">$number</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> \t\t<span class=\"co0\">; FIBONACCI!</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0</pre>"}, {"lang": "Axiom", "loc": 7, "block": "<pre class=\"text highlighted_source\">#include \"axiom\"<br/>Z ==&gt; Integer;<br/>fib(x:Z):Z == {<br/>\tx &lt;= 0 =&gt; error \"argument outside of range\";<br/>\tf(n:Z,v1:Z,v2:Z):Z == if n&lt;2 then v2 else f(n-1,v2,v1+v2); <br/>\tf(x,1,1);<br/>}</pre>"}, {"lang": "BBC BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">      PRINT FNfib(10)<br/>      END<br/>\u00a0<br/>      DEF FNfib(n%) IF n%&lt;0 THEN ERROR 100, \"Must not be negative\"<br/>      LOCAL P%\u00a0: P% =\u00a0!384 + LEN$!384 + 4\u00a0: REM Function pointer<br/>      (n%) IF n%&lt;2 THEN = n% ELSE = FN(^P%)(n%-1) + FN(^P%)(n%-2)</pre>"}, {"lang": "Bracmat", "loc": 19, "block": "<pre class=\"text highlighted_source\">( (<br/>  =<br/>    .  \u00a0!arg:#:~&lt;0<br/>      &amp;   ( (=.!arg$!arg)<br/>          $ (<br/>            =<br/>              .<br/>                ' (<br/>                  .  \u00a0!arg:&lt;2<br/>                    |   (($arg)$($arg))$(!arg+-2)<br/>                      + (($arg)$($arg))$(!arg+-1)<br/>                  )<br/>            )<br/>          )<br/>        $\u00a0!arg<br/>  )<br/>$ 30<br/>)<br/>\u00a0</pre>"}, {"lang": "C", "loc": 29, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">long</span> fib<span class=\"br0\">(</span><span class=\"kw4\">long</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> fib_i<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> fib_i<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fib_i<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Bad argument: fib(%ld)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> fib_i<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">long</span> fib_i<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"coMULTI\">/* just to show the fib_i() inside fib() has no bearing outside it */</span><br/><span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"This is not the fib you are looking for<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> x<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> x <span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"fib\u00a0%ld =\u00a0%ld<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> fib<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"calling fib_i from outside fib:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        fib_i<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">double</span> fib<span class=\"br0\">(</span><span class=\"kw4\">double</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">throw</span> <span class=\"st0\">\"Invalid argument passed to fib\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">struct</span> actual_fib<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">double</span> calc<span class=\"br0\">(</span><span class=\"kw4\">double</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> n<span class=\"sy4\">;</span><br/>          <span class=\"br0\">}</span><br/>          <span class=\"kw1\">else</span><br/>          <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> calc<span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> calc<span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> actual_fib<span class=\"sy4\">::</span><span class=\"me2\">calc</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 10, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Fib<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Must be non negativ\"</span>, <span class=\"st0\">\"n\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> fib <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span> <span class=\"co1\">// Must be known, before we can assign recursively to it.</span><br/>    fib <span class=\"sy0\">=</span> p <span class=\"sy0\">=&gt;</span> p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> fib<span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fib<span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> p<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fib <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">neg?</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>new IllegalArgumentException <span class=\"st0\">\"n should be &gt; 0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>n n, v1 <span class=\"nu0\">1</span>, v2 <span class=\"nu0\">1</span><span class=\"br0\">]</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      v2<br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span> v2 <span class=\"br0\">(</span><span class=\"sy0\">+</span> v1 v2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 18, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># This is a rather obscure technique to have an anonymous</span><br/><span class=\"co1\"># function call itself.</span><br/>fibonacci = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">throw</span> <span class=\"st0\">\"Argument cannot be negative\"</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>  do <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">return</span> n <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span><br/>      arguments.<span class=\"me1\">callee</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> arguments.<span class=\"me1\">callee</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Since it's pretty lightweight to assign an anonymous</span><br/><span class=\"co1\"># function to a local variable, the idiom below might be</span><br/><span class=\"co1\"># more preferred.</span><br/>fibonacci2 = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">throw</span> <span class=\"st0\">\"Argument cannot be negative\"</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>  recurse = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">return</span> n <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span><br/>      recurse<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> recurse<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  recurse<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> alambda <span class=\"br0\">(</span>parms <span class=\"sy0\">&amp;</span>body body<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">,</span>parms <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     #'self<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">int</span> fib<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> arg<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>arg <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">function</span> <span class=\"kw4\">uint</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> self <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><span class=\"kw3\">__traits</span><span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> self<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> self<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"nu0\">39</span>.<span class=\"me1\">fib</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 18, "block": "<pre class=\"text highlighted_source\">Y f:<br/>\tlabda y:<br/>\t\tlabda:<br/>\t\t\tf y @y<br/>\tcall dup<br/>\u00a0<br/>labda fib n:<br/>\tif &lt;= n 1:<br/>\t\t1<br/>\telse:<br/>\t\tfib - n 1<br/>\t\tfib - n 2<br/>\t\t+<br/>Y<br/>set\u00a0:fibo<br/>\u00a0<br/>for j range 0 10:<br/>\t!print fibo j</pre>"}, {"lang": "Dylan", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>define function fib (n)<br/>  when (n &lt; 0)<br/>    error(\"Can't take fibonacci of negative integer:\u00a0%d\\n\", n)<br/>  end;<br/>  local method fib1 (n, a, b)<br/>    if (n = 0)<br/>      a<br/>    else<br/>      fib1(n - 1, b, a + b)<br/>    end<br/>  end;<br/>  fib1(n, 0, 1)<br/>end<br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 7, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fib n<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> _fib <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span><br/>\t\t<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> a<br/>\t\t<span class=\"br0\">(</span>_fib b <span class=\"br0\">(</span><span class=\"sy0\">+</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 2, "block": "<pre class=\"text highlighted_source\">fib n | n &lt; 0 = fail \"Negative n\"<br/>      | else = fix (\\f n -&gt; if n &lt; 2 then n else f (n - 1) + f (n - 2)) n</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fib = fn f -&gt; (<br/>      fn x -&gt; if x == 0, do: 0, else: (if x == 1, do: 1, else: f.(x - 1) + f.(x - 2))\tend<br/>\t) <br/>end<br/>\u00a0<br/>y = fn x -&gt; (<br/>    fn f -&gt; f.(f) <br/>  end).(<br/>    fn g -&gt; x.(fn z -&gt;(g.(g)).(z) end) <br/>  end)<br/>end<br/>\u00a0<br/>IO.inspect y.(&amp;(fib.(&amp;1))).(40)<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 28, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>fib(n)<br/>[<br/>    if (n &lt; 0)<br/>        [ InvalidArgumentException new:\"Must be non negative\"; raise ].<br/>\u00a0<br/>    ^ (:n)<br/>        [<br/>            if (n &gt; 1)<br/>                [ ^ @self(n - 2) + @self(n - 1) ];[ ^ n ]<br/>        ](n)<br/>]<br/>\u00a0<br/>public program<br/>[<br/>    -1 to:10 do(:i)<br/>    [<br/>        try (console printLine(\"fib(\",i,\")=\",fib(i)))        <br/>        {<br/>            on(Exception e)<br/>            [<br/>                console printLine:\"invalid\"<br/>            ]<br/>        }<br/>    ].<br/>    console readChar<br/>]</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> anonymous_recursion <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>fib<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> fib_internal<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fib</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">fib</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fib_internal</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Fun</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">_F</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">_Next</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Next</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">F</span><span class=\"br0\">(</span> <span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"re5\">Next</span><span class=\"sy1\">,</span> <span class=\"re5\">Next</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">F</span><span class=\"re3\">un</span><span class=\"br0\">(</span> <span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">fib</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">_Next</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">fib</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Next</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">fib</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"re5\">Next</span><span class=\"sy1\">,</span> <span class=\"re5\">Next</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> fib <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    | n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> None<br/>    | n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fib2 <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>               | <span class=\"nu0\">0</span> | <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>               | n <span class=\"sy0\">-&gt;</span> fib2 <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fib2 <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">in</span> Some <span class=\"br0\">(</span>fib2 n<span class=\"br0\">)</span></pre>"}, {"lang": "FBSL", "loc": 22, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Fibonacci<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">IF</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\t<span class=\"kw1\">RETURN</span> <span class=\"st0\">\"Nuts!\"</span><br/>\t<span class=\"kw1\">ELSE</span><br/>\t\t<span class=\"kw1\">RETURN</span> Fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t<span class=\"kw1\">FUNCTION</span> Fib<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">IF</span> m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span><br/>\t\t\tFib <span class=\"sy0\">=</span> m<br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\tFib <span class=\"sy0\">=</span> Fib<span class=\"br0\">(</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Fib<span class=\"br0\">(</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> Fibonacci<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> Fibonacci<span class=\"br0\">(</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> Fibonacci<span class=\"br0\">(</span><span class=\"nu0\">13.666</span><span class=\"br0\">)</span><br/>\u00a0<br/>PAUSE</pre>"}, {"lang": "Factor", "loc": 12, "block": "<pre class=\"text highlighted_source\">USING: kernel math\u00a0;<br/>IN: rosettacode.fibonacci.ar<br/>\u00a0<br/>: fib ( n -- m )<br/>    dup 0 &lt; [ \"fib of negative\" throw ] when<br/>    [<br/>       \u00a0! If n &lt; 2, then drop q, else find q(n - 1) + q(n - 2).<br/>        [ dup 2 &lt; ] dip swap [ drop ] [<br/>            [ [ 1 - ] dip dup call ]<br/>            [ [ 2 - ] dip dup call ] 2bi +<br/>        ] if<br/>    ] dup call( n q -- m )\u00a0;</pre>"}, {"lang": "Falcon", "loc": 25, "block": "<pre class=\"falcon highlighted_source\"><span class=\"kw1\">function</span> fib<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">raise</span> <a href=\"http://falconpl.org/project_docs/core/class_ParamError.html\"><span class=\"kw7\">ParamError</span></a><span class=\"br0\">(</span>description<span class=\"sy0\">|</span><span class=\"st0\">\"Negative argument invalid\"</span><span class=\"sy0\">,</span> extra<span class=\"sy0\">|</span><span class=\"st0\">\"Fibbonacci sequence is undefined for negative numbers\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>         <span class=\"kw1\">if</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>         <span class=\"kw1\">elif</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>         <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw3\">fself</span><span class=\"br0\">(</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw3\">fself</span><span class=\"br0\">(</span>y<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">try</span> <br/><span class=\"sy0\">&gt;</span>fib<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span>fib<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span>fib<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span>fib<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">catch</span> <span class=\"kw3\">in</span> e<br/><span class=\"sy0\">&gt;</span> e<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "F\u014drmul\u00e6", "loc": 7, "block": "<pre class=\"text highlighted_source\">:noname ( n -- n' )<br/>  dup 2 &lt;\u00a0?exit<br/>  1- dup recurse swap 1- recurse +\u00a0; ( xt )<br/>\u00a0<br/>: fib ( +n -- n' )<br/>  dup 0&lt; abort\" Negative numbers don't exist.\"<br/>  [ ( xt from the\u00a0:NONAME above ) compile, ]\u00a0;</pre>"}, {"lang": "Forth", "loc": 7, "block": "<pre class=\"text highlighted_source\">:noname ( n -- n' )<br/>  dup 2 &lt;\u00a0?exit<br/>  1- dup recurse swap 1- recurse +\u00a0; ( xt )<br/>\u00a0<br/>: fib ( +n -- n' )<br/>  dup 0&lt; abort\" Negative numbers don't exist.\"<br/>  [ ( xt from the\u00a0:NONAME above ) compile, ]\u00a0;</pre>"}, {"lang": "Fortran", "loc": 18, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt; <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Bad argument: fib('</span>,n,<span class=\"st0\">')'</span><br/>    <span class=\"kw1\">stop</span><br/>  <span class=\"kw1\">else</span><br/>    fib <span class=\"sy0\">=</span> purefib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"co1\">contains</span><br/>  <span class=\"kw1\">recursive</span> pure <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> purefib<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt; <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      f <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">else</span><br/>      f <span class=\"sy0\">=</span> purefib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> purefib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> purefib<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> fib</pre>"}, {"lang": "FreeBASIC", "loc": 42, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#Lang \"fblite\"</span><br/>\u00a0<br/><span class=\"kw1\">Option</span> <span class=\"kw1\">Gosub</span>  <span class=\"co1\">'' enables Gosub to be used</span><br/>\u00a0<br/><span class=\"co1\">' Using gosub to simulate a nested function</span><br/><span class=\"kw1\">Function</span> fib<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">Gosub</span> nestedFib<br/>  <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>  nestedFib:<br/>  fib = <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>n &lt; <span class=\"nu0\">2</span>, n, fib<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + fib<span class=\"br0\">(</span>n - <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' This function simulates (rather messily) gosub by using 2 gotos and would therefore work</span><br/><span class=\"co1\">' even in the default dialect </span><br/><span class=\"kw1\">Function</span> fib2<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">Goto</span> nestedFib<br/>\u00a0<br/>  exitFib:<br/>  <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>  nestedFib:<br/>  fib2 = <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>n &lt; <span class=\"nu0\">2</span>, n, fib2<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + fib2<span class=\"br0\">(</span>n - <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Goto</span> exitFib<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">12</span><br/>  <span class=\"kw1\">Print</span> fib<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">12</span><br/>  <span class=\"kw1\">Print</span> fib2<span class=\"br0\">(</span>j<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 47, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">40</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> arFib<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> ok <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"fib\u00a0%d =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"fib undefined for negative numbers\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> arFib<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> n &lt; <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><br/>    <span class=\"kw1\">case</span> n &lt; <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> yc<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>recurse fn<span class=\"sy1\">)</span> fn <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>left<span class=\"sy1\">,</span> term1<span class=\"sy1\">,</span> term2 <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> left <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> term1<span class=\"sy3\">+</span>term2<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">return</span> recurse<span class=\"sy1\">(</span>left<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> term1<span class=\"sy3\">+</span>term2<span class=\"sy1\">,</span> term1<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">})(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">),</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> fn <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span><br/><span class=\"kw1\">type</span> ff <span class=\"kw4\">func</span><span class=\"sy1\">(</span>fn<span class=\"sy1\">)</span> fn<br/><span class=\"kw1\">type</span> fx <span class=\"kw4\">func</span><span class=\"sy1\">(</span>fx<span class=\"sy1\">)</span> fn<br/>\u00a0<br/><span class=\"kw4\">func</span> yc<span class=\"sy1\">(</span>f ff<span class=\"sy1\">)</span> fn <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x fx<span class=\"sy1\">)</span> fn <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> f<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>a1<span class=\"sy1\">,</span> a2<span class=\"sy1\">,</span> a3 <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> x<span class=\"sy1\">(</span>x<span class=\"sy1\">)(</span>a1<span class=\"sy1\">,</span> a2<span class=\"sy1\">,</span> a3<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">})</span><br/>    <span class=\"sy1\">}(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>x fx<span class=\"sy1\">)</span> fn <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> f<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>a1<span class=\"sy1\">,</span> a2<span class=\"sy1\">,</span> a3 <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> x<span class=\"sy1\">(</span>x<span class=\"sy1\">)(</span>a1<span class=\"sy1\">,</span> a2<span class=\"sy1\">,</span> a3<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">})</span><br/>    <span class=\"sy1\">})</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fib <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> it <span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">{</span>i <span class=\"sy0\">-&gt;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> i\u00a0: <span class=\"br0\">{</span>j <span class=\"sy0\">-&gt;</span> owner.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20call\"><span class=\"kw9\">call</span></a><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">{</span>k <span class=\"sy0\">-&gt;</span> owner.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20call\"><span class=\"kw9\">call</span></a><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\">fib <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>fib n<br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> Nothing<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> Just <span class=\"sy0\">$</span> real n<br/>              <span class=\"kw1\">where</span> real <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                    real <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                    real n <span class=\"sy0\">=</span> real <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> real <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 24, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"fib(\"</span><span class=\"sy1\">,</span>a <span class=\"sy1\">:=</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>A<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\")=\"</span><span class=\"sy1\">,</span>fib<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span>  source<span class=\"sy1\">,</span> i<br/>   <span class=\"kw2\">static</span> cache<br/>   <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>      cache <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      cache<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>      cache<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"integer\"</span> <span class=\"sy1\">&amp;</span> n <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">return</span> n <span class=\"sy1\">@</span> makeProc <span class=\"br0\">{</span><span class=\"br0\">{</span><br/>         i <span class=\"sy1\">:=</span> <span class=\"sy1\">@</span><span class=\"br0\">(</span>source <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">source</span><span class=\"br0\">)</span>                                          <span class=\"co1\"># 1</span><br/>         <span class=\"sy1\">/</span>cache<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">@</span>makeProc<span class=\"br0\">(</span><span class=\"sy1\">^&amp;</span><span class=\"kw3\">current</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"br0\">(</span>i<span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">@</span>makeProc<span class=\"br0\">(</span><span class=\"sy1\">^&amp;</span><span class=\"kw3\">current</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\"># 2</span><br/>         cache<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">@</span> source                                                  <span class=\"co1\"># 3</span><br/>         <span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> makeProc<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   A <span class=\"sy1\">:=</span> <span class=\"kw1\">if</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"list\"</span> <span class=\"kw1\">then</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy1\">@</span>A<span class=\"sy1\">,</span> A<span class=\"br0\">)</span>                    <span class=\"co1\"># prime and return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 7, "block": "<pre class=\"io highlighted_source\">fib\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>x,<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>, <span class=\"kw3\">Exception</span> <span class=\"kw1\">raise</span><span class=\"br0\">(</span><span class=\"st0\">\"Negative argument not allowed!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    fib2\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>n,<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>, n, fib2<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + fib2<span class=\"br0\">(</span>n-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    fib2<span class=\"br0\">(</span>x floor<span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   fibN=: <span class=\"sy0\">(</span>-&amp;<span class=\"nu0\">2</span> +&amp;$: -&amp;<span class=\"nu0\">1</span><span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;&lt;<span class=\"sy0\">)</span> M.\"<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 10, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> fib<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"n can not be a negative number\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">long</span> fibInner<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> <span class=\"br0\">(</span>fibInner<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibInner<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>.<span class=\"me1\">fibInner</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 7, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> fibo<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">throw</span> <span class=\"st0\">\"Argument cannot be negative\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> arguments.<span class=\"me1\">callee</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> arguments.<span class=\"me1\">callee</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">0 | recurse(. + 1)</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">function fib(n)<br/>    if n &lt; 0<br/>        throw(ArgumentError(\"negative arguments not allowed\"))<br/>    end<br/>    aux(m) = m &lt; 2\u00a0? one(m)\u00a0: aux(m-1) + aux(m-2)<br/>    aux(n)<br/>end</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">fib: {:[x&lt;0; \"Error Negative Number\"; {:[x&lt;2;x;_f[x-2]+_f[x-1]]}x]}</pre>"}, {"lang": "Klong", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fib::{:[x&lt;0;\"error: negative\":|x&lt;2;x;.f(x-1)+.f(x-2)]}<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 11, "block": "<pre class=\"scala highlighted_source\">fun fib<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>   require<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   fun fib1<span class=\"br0\">(</span>k<span class=\"sy0\">:</span> Int, a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> a <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> fib1<span class=\"br0\">(</span>k - <span class=\"nu0\">1</span>, b, a + b<span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> fib1<span class=\"br0\">(</span>n, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"${fib(i)} \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lambdatalk", "loc": 19, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"nu0\">1</span><span class=\"br0\">)</span> defining a tail<span class=\"sy0\">-</span>recursive function:<br/><span class=\"br0\">{</span>def fibo <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n<span class=\"br0\">}</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n\u00a0:a\u00a0:b<span class=\"br0\">}</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span>\u00a0:n\u00a0:a\u00a0:b<span class=\"br0\">}</span><span class=\"br0\">}</span> <br/>  <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n\u00a0:a\u00a0:b<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>\u00a0:n <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    then the number must be positive<span class=\"sy0\">!</span> <br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span> \u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    then\u00a0:a<br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"sy0\">+</span>\u00a0:a\u00a0:b<span class=\"br0\">}</span>\u00a0:a<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span>\u00a0:n <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">2</span><span class=\"br0\">)</span> testing:<br/><span class=\"br0\">{</span>fibo <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> the number must be positive<span class=\"sy0\">!</span><br/><span class=\"br0\">{</span>fibo <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">{</span>fibo <span class=\"nu0\">8</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">34</span><br/><span class=\"br0\">{</span>fibo <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> 7.0330367711422765e<span class=\"sy0\">+</span>208<br/><span class=\"br0\">{</span><span class=\"kw1\">map</span> fibo <span class=\"br0\">{</span>serie <span class=\"nu0\">1</span> <span class=\"nu0\">20</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span> <span class=\"nu0\">13</span> <span class=\"nu0\">21</span> <span class=\"nu0\">34</span> <span class=\"nu0\">55</span> <span class=\"nu0\">89</span> <span class=\"nu0\">144</span> <span class=\"nu0\">233</span> <span class=\"nu0\">377</span> <span class=\"nu0\">610</span> <span class=\"nu0\">987</span> <span class=\"nu0\">1597</span> <span class=\"nu0\">2584</span> <span class=\"nu0\">4181</span> <span class=\"nu0\">6765</span> <span class=\"nu0\">10946</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 12, "block": "<pre class=\"text highlighted_source\">on fib (n)<br/>  if n&lt;0 then return _player.alert(\"negative arguments not allowed\")<br/>\u00a0<br/>  -- create instance of unnamed class in memory only (does not pollute namespace)<br/>  m = new(#script)<br/>  r = RETURN<br/>  m.scriptText = \"on fib (me,n)\"&amp;r&amp;\"if n&lt;2 then return n\"&amp;r&amp;\"return me.fib(n-1)+me.fib(n-2)\"&amp;r&amp;\"end\"<br/>  aux = m.script.new()<br/>  m.erase()<br/>\u00a0<br/>  return aux.fib(n)<br/>end</pre>"}, {"lang": "LOLCODE", "loc": 32, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I fib <span class=\"kw4\">YR</span> x<br/>    <span class=\"kw2\">DIFFRINT</span> x <span class=\"kw4\">AN</span> <span class=\"kw4\">BIGGR</span> <span class=\"kw2\">OF</span> x <span class=\"kw4\">AN</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>        YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">FOUND YR</span> <span class=\"st0\">\"ERROR\"</span><br/>    OIC<br/>\u00a0<br/>    HOW <span class=\"kw2\">IZ</span> I fib_i <span class=\"kw4\">YR</span> n<br/>        <span class=\"kw2\">DIFFRINT</span> n <span class=\"kw4\">AN</span> <span class=\"kw4\">BIGGR</span> <span class=\"kw2\">OF</span> n <span class=\"kw4\">AN</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>            YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">FOUND YR</span> n<br/>        OIC<br/>\u00a0<br/>        <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span><span class=\"sy0\">...</span><br/>        I <span class=\"kw2\">IZ</span> fib_i <span class=\"kw4\">YR</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> n <span class=\"kw4\">AN</span> <span class=\"nu0\">2</span> <span class=\"kw2\">MKAY</span> <span class=\"kw4\">AN</span><span class=\"sy0\">...</span><br/>        I <span class=\"kw2\">IZ</span> fib_i <span class=\"kw4\">YR</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> n <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span> <span class=\"kw2\">MKAY</span><br/>    <span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>    <span class=\"kw1\">FOUND YR</span> I <span class=\"kw2\">IZ</span> fib_i <span class=\"kw4\">YR</span> x <span class=\"kw2\">MKAY</span><br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I fib_i <span class=\"kw4\">YR</span> n<br/>    <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"SRY U CANT HAS FIBS DIS TIEM\"</span><br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> fibber <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> i TIL <span class=\"kw2\">BOTH SAEM</span> i <span class=\"kw4\">AN</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">I HAS A</span> i <span class=\"kw1\">ITZ</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> i <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">VISIBLE</span> <span class=\"st0\">\"fib(<span class=\"es3\">:{i}</span>) = \"</span> I <span class=\"kw2\">IZ</span> fib <span class=\"kw4\">YR</span> i <span class=\"kw2\">MKAY</span><br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> fibber<br/>\u00a0<br/>I <span class=\"kw2\">IZ</span> fib_i <span class=\"kw4\">YR</span> <span class=\"nu0\">3</span> <span class=\"kw2\">MKAY</span><br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> Y<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"kw1\">return</span> y<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span> Y<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>fibs<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw2\">and</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> fibs<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibs<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>A$={{ Module \"Fibonacci\"\u00a0: Read X \u00a0:If X&lt;0 then {Error {X&lt;0}} Else  Fib=Lambda (x)-&gt;if(x&gt;1-&gt;fib(x-1)+fib(x-2), x)\u00a0: =fib(x)}}<br/>Try Ok {<br/>      Print Function(A$, -12)<br/>}<br/>If Error or Not Ok Then Print Error$<br/>Print Function(A$, 12)=144 ' true<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Fib\u00a0:= proc( n\u00a0:: nonnegint )<br/>        proc( k )<br/>                option  remember; # automatically memoise<br/>                if k = 0 then<br/>                        0<br/>                elif k = 1 then<br/>                        1<br/>                else<br/>                        # Recurse, anonymously<br/>                        thisproc( k - 1 ) + thisproc( k - 2 )<br/>                end<br/>        end( n )<br/>end proc:<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 5, "block": "<pre class=\"text highlighted_source\">check\u00a0:= #&lt;0&amp;<br/>fib\u00a0:= If[check[#],Throw[\"Negative Argument\"],If[#&lt;=1,1,#0[#-2]+#0[#-1]]&amp;[#]]&amp;<br/>fib /@ Range[0,10]<br/>\u00a0<br/>{1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89}</pre>"}, {"lang": "Nemerle", "loc": 30, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module Fib<br/>{<br/>    Fib(n\u00a0: long)\u00a0: long<br/>    {<br/>        def fib(m\u00a0: long)<br/>        {<br/>            |0 =&gt; 1<br/>            |1 =&gt; 1<br/>            |_ =&gt; fib(m - 1) + fib(m - 2)<br/>        }<br/>\u00a0<br/>        match(n)<br/>        {<br/>            |n when (n &lt; 0) =&gt; throw ArgumentException(\"Fib() not defined on negative numbers\")<br/>            |_ =&gt; fib(n)<br/>        }<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        foreach (i in [-2 .. 10])<br/>        {<br/>            try {WriteLine(\"{0}\", Fib(i));}<br/>            catch {|e is ArgumentException =&gt; WriteLine(e.Message)}<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Nim", "loc": 12, "block": "<pre class=\"text highlighted_source\"># Using scoped function fibI inside fib<br/>proc fib(x: int): int =<br/>  proc fibI(n: int): int =<br/>    if n &lt; 2: n else: fibI(n-2) + fibI(n-1)<br/>  if x &lt; 0:<br/>    raise newException(ValueError, \"Invalid argument\")<br/>  return fibI(x)<br/>\u00a0<br/>for i in 0..4:<br/>  echo fib(i)<br/>\u00a0<br/># fibI(10) # undeclared identifier 'fibI'</pre>"}, {"lang": "Objective-C", "loc": 32, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> AnonymousRecursion <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>fibonacci<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>n;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> AnonymousRecursion<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>fibonacci<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>n <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"br0\">[</span>n intValue<span class=\"br0\">]</span>;<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i &lt; <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">@throw</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSException_Class/\"><span class=\"kw5\">NSException</span></a> exceptionWithName<span class=\"sy0\">:</span>NSInvalidArgumentException<br/>                                 reason<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"fibonacci: no negative numbers\"</span><br/>                               userInfo<span class=\"sy0\">:</span><span class=\"kw2\">nil</span><span class=\"br0\">]</span>;<br/>  <span class=\"kw4\">int</span> result;<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i &lt; <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">else</span><br/>    result <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>self performSelector<span class=\"sy0\">:</span>_cmd withObject<span class=\"sy0\">:</span>@<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> intValue<span class=\"br0\">]</span><br/>           <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>self performSelector<span class=\"sy0\">:</span>_cmd withObject<span class=\"sy0\">:</span>@<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span> intValue<span class=\"br0\">]</span>;<br/>  <span class=\"kw1\">return</span> @<span class=\"br0\">(</span>result<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    AnonymousRecursion <span class=\"sy0\">*</span>dummy <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>AnonymousRecursion alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span>dummy fibonacci<span class=\"sy0\">:</span>@8<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 10, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> fib n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> real <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>      <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy0\">|</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy0\">|</span> n <span class=\"sy0\">-&gt;</span> real <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> real <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    None<br/>  <span class=\"kw1\">else</span><br/>    Some <span class=\"br0\">(</span>real n<span class=\"br0\">)</span></pre>"}, {"lang": "OxygenBasic", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function fiboRatio() as double<br/>    function fibo( double i, j ) as double<br/>        if j &gt; 2e12 then return j / i<br/>        return fibo j, i + j<br/>    end function<br/>    return fibo 1, 1 <br/>end function<br/>\u00a0<br/>print fiboRatio<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">Fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>F<span class=\"sy0\">=</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>f<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>k<span class=\"sy0\">&lt;</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>f<span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>f<span class=\"br0\">)</span><span class=\"sy0\">+</span>f<span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>F<span class=\"br0\">(</span><span class=\"kw1\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>F<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> recur <span class=\"br0\">(</span><span class=\"sy0\">&amp;@</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"re0\">*recurse</span> <span class=\"sy0\">=</span> <span class=\"re0\">$f</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$f</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fibo <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st_h\">'Negative argument'</span><span class=\"sy0\">;</span><br/>    recur <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> recurse<span class=\"br0\">(</span><span class=\"re0\">$m</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> recurse<span class=\"br0\">(</span><span class=\"re0\">$m</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> fib<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">die</span> <span class=\"st0\">\"Naughty fib\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$_</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><br/>            <span class=\"sy0\">??</span> <span class=\"re0\">$_</span><br/>            <span class=\"sy0\">!!</span>  <span class=\"re0\">&amp;?BLOCK</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">&amp;?BLOCK</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> fib<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PHP", "loc": 16, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> fib<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> Exception<span class=\"br0\">(</span><span class=\"st_h\">'Negative numbers not allowed'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// This function must be called using call_user_func() only</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$g</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/debug_backtrace\"><span class=\"kw3\">debug_backtrace</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st_h\">'args'</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.php.net/call_user_func\"><span class=\"kw3\">call_user_func</span></a><span class=\"br0\">(</span><span class=\"re0\">$g</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.php.net/call_user_func\"><span class=\"kw3\">call_user_func</span></a><span class=\"br0\">(</span><span class=\"re0\">$g</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/call_user_func\"><span class=\"kw3\">call_user_func</span></a><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">echo</span> fib<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(de fibo (N)<br/>   (if (lt0 N)<br/>      (quit \"Illegal argument\" N) )<br/>   (recur (N)<br/>      (if (&gt; 2 N)<br/>         1<br/>         (+ (recurse (dec N)) (recurse (- N 2))) ) ) )</pre>"}, {"lang": "PostScript", "loc": 23, "block": "<pre class=\"text highlighted_source\">% primitive recursion<br/>/pfact {<br/>  {1} {*} primrec}.<br/>\u00a0<br/>%linear recursion<br/>/lfact {<br/>   {dup 0 eq}<br/>   {pop 1}<br/>   {dup pred} <br/>   {*}<br/>   linrec}.<br/>\u00a0<br/>% general recursion<br/>/gfact {<br/>    {0 eq}<br/>    {succ}<br/>    {dup pred}<br/>    {i *}<br/>    genrec}.<br/>\u00a0<br/>% binary recursion<br/>/fib {<br/>    {2 lt} {} {pred dup pred} {+} binrec}.</pre>"}, {"lang": "Prolog", "loc": 23, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>lambda<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>fib<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> _F<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tN <span class=\"sy6\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'fib is undefined for negative numbers.'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/>fib<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> F<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <span class=\"co1\">% code of Fibonacci</span><br/>    PF     <span class=\"sy6\">=</span> \\Nb^R^Rr1^<span class=\"br0\">(</span>Nb <span class=\"sy6\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t\t\t  R <span class=\"sy6\">=</span> Nb<br/>                        <span class=\"sy4\">;</span><br/>\t\t\t  N1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Nb <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t\t\t  N2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Nb <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\t\t\t  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Rr1<span class=\"sy4\">,</span>N1<span class=\"sy4\">,</span>R1<span class=\"sy4\">,</span>Rr1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Rr1<span class=\"sy4\">,</span>N2<span class=\"sy4\">,</span>R2<span class=\"sy4\">,</span>Rr1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t  R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> R1 <span class=\"sy3\">+</span> R2<br/>\t\t\t<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>    <span class=\"co1\">% The Y combinator.</span><br/>\u00a0<br/>    Pred <span class=\"sy6\">=</span> PF <span class=\"sy3\">+</span>\\Nb2^F2^call<span class=\"br0\">(</span>PF<span class=\"sy4\">,</span>Nb2<span class=\"sy4\">,</span>F2<span class=\"sy4\">,</span>PF<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Pred<span class=\"sy4\">,</span>N<span class=\"sy4\">,</span>F<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> Y <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> f: <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x: x<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> y: f<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> *args: y<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>*args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> fib <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> f: <span class=\"kw1\">lambda</span> n: <span class=\"kw2\">None</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> f<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + f<span class=\"br0\">(</span>n-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span> Y<span class=\"br0\">(</span>fib<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">]</span></pre>"}, {"lang": "Qi", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define fib<br/>  N -&gt; (let A (/. A N<br/>                  (if (&lt; N 2)<br/>                      N<br/>                      (+ (A A (- N 2))<br/>                         (A A (- N 1)))))<br/>         (A A N)))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">fib2 &lt;- function(n) {<br/>  (n &gt;= 0) || stop(\"bad argument\")<br/>  ( function(n) if (n &lt;= 1) 1 else Recall(n-1)+Recall(n-2) )(n)<br/>}</pre>"}, {"lang": "Racket", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; Natural -&gt; Natural<br/>;; Calculate factorial<br/>(define (fact n)<br/>  (define (fact-helper n acc)<br/>    (if (= n 0)<br/>        acc<br/>        (fact-helper (sub1 n) (* n acc))))<br/>  (unless (exact-nonnegative-integer? n)<br/>    (raise-argument-error 'fact \"natural\" n))<br/>  (fact-helper n 1))<br/>\u00a0<br/>;; Unit tests, works in v5.3 and newer<br/>(module+ test<br/>  (require rackunit)<br/>  (check-equal? (fact 0) 1)<br/>  (check-equal? (fact 5) 120))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 3, "block": "<pre class=\"rebol highlighted_source\">\u00a0<br/>fib: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>n <span class=\"sy0\">/</span>f<span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"kw2\">do</span> f: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>m<span class=\"br0\">]</span> <span class=\"br0\">[</span> <span class=\"kw2\">either</span> m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>f m - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + f m - <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> n<span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 13, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program to show anonymous recursion  (of a function or subroutine).              */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> 1e6                               <span class=\"coMULTI\">/*in case the user goes ka-razy with X.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain the optional argument from CL.*/</span><br/><span class=\"kw1\">if</span> x==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> x==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> x=<span class=\"nu0\">12</span>                     <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                                      <span class=\"coMULTI\">/*W:  used for formatting the output.  */</span><br/>                   <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> x+<span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*use the  argument  as an upper limit.*/</span><br/>                   <span class=\"kw1\">say</span> <span class=\"st0\">'fibonacci('</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>j, w<span class=\"br0\">)</span><span class=\"st0\">\") =\"</span>   fib<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>                   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span>                    <span class=\"coMULTI\">/* [\u2191] show Fibonacci sequence: 0 \u2500\u2500\u25ba X*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fib: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z;  <span class=\"kw1\">if</span> z<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>                              <span class=\"kw1\">say</span> <span class=\"st0\">\"***error***  argument can't be negative.\"</span>;   <span class=\"kw1\">exit</span><br/><span class=\"sy0\">.</span>:   <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> #;  <span class=\"kw1\">if</span> #<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> #;              <span class=\"kw1\">return</span> <span class=\"sy0\">.</span><span class=\"br0\">(</span>#-<span class=\"nu0\">1</span><span class=\"br0\">)</span>  +  <span class=\"sy0\">.</span><span class=\"br0\">(</span>#-<span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Anonymous recursion<br/>\u00a0<br/>t=0<br/>for x = -2 to 12<br/>     n = x<br/>     recursion()<br/>     if x &gt; -1<br/>        see t + nl<br/>     ok<br/>next<br/>\u00a0<br/>func recursion()<br/>        nold1=1<br/>        nold2=0<br/>        if n &lt; 0 <br/>           see \"positive argument required!\" + nl<br/>           return <br/>        ok<br/>        if n=0<br/>           t=nold2<br/>           return t<br/>        ok<br/>        if n=1<br/>           t=nold1<br/>           return  t<br/>        ok<br/>        while n<br/>                  t=nold2+nold1<br/>                  if n&gt;2<br/>                     n=n-1<br/>                     nold2=nold1<br/>                     nold1=t<br/>                     loop<br/>                  ok<br/>                  return t<br/>        end<br/>        return t<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">RangeError</span>, <span class=\"st0\">\"fib of negative\"</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"br0\">(</span>fib2 = <span class=\"kw3\">proc</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>m<span class=\"sy0\">|</span> m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? m\u00a0: fib2<span class=\"br0\">[</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> fib2<span class=\"br0\">[</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> Y<span class=\"br0\">[</span>A, B<span class=\"br0\">]</span><span class=\"br0\">(</span>f<span class=\"sy0\">:</span> <span class=\"br0\">(</span>A \u21d2 B<span class=\"br0\">)</span> \u21d2 <span class=\"br0\">(</span>A \u21d2 B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> A \u21d2 B <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>Y<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fib<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> None<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Some<span class=\"br0\">(</span>Y<span class=\"br0\">[</span>Int, Int<span class=\"br0\">]</span><span class=\"br0\">(</span>f \u21d2 i \u21d2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> f<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + f<span class=\"br0\">(</span>i - <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>-<span class=\"nu0\">2</span> to <span class=\"nu0\">5</span> map <span class=\"br0\">(</span>n \u21d2 <span class=\"br0\">(</span>n, fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> foreach println</pre>"}, {"lang": "Scheme", "loc": 9, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fibonacci n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> n<span class=\"br0\">)</span><br/>      <span class=\"st0\">\"Error: argument must not be negative.\"</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> aux <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>count n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> count <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            b<br/>            <span class=\"br0\">(</span>aux <span class=\"br0\">(</span><span class=\"sy0\">+</span> a b<span class=\"br0\">)</span> a <span class=\"br0\">(</span><span class=\"sy0\">-</span> count <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> fibonacci '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 32, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: fib (in integer: x) is func<br/>  result<br/>    var integer: fib is 0;<br/>  local<br/>    const func integer: fib1 (in integer: n) is func<br/>      result<br/>        var integer: fib1 is 0;<br/>      begin<br/>        if n &lt; 2 then<br/>          fib1\u00a0:= n;<br/>        else<br/>          fib1\u00a0:= fib1(n-2) + fib1(n-1);<br/>        end if;<br/>      end func;<br/>  begin<br/>    if x &lt; 0 then<br/>      raise RANGE_ERROR;<br/>    else<br/>      fib\u00a0:= fib1(x);<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    for i range 0 to 4 do<br/>      writeln(fib(i));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\"><span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    func <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">return</span> NaN <span class=\"br0\">}</span><br/>        n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? n<br/>             \u00a0: <span class=\"br0\">(</span>__FUNC__<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> __FUNC__<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">say</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span></pre>"}, {"lang": "Sparkling", "loc": 6, "block": "<pre class=\"text highlighted_source\">function(n, f) {<br/>    return f(n, f);<br/>}(10, function(n, f) {<br/>    return n &lt; 2\u00a0? 1\u00a0: f(n - 1, f) + f(n - 2, f);<br/>})<br/>\u00a0</pre>"}, {"lang": "Standard ML", "loc": 9, "block": "<pre class=\"text highlighted_source\">fun fix f x = f (fix f) x<br/>\u00a0<br/>fun fib n =<br/>    if n &lt; 0 then raise Fail \"Negative\"<br/>    else<br/>        fix (fn fib =&gt;<br/>                (fn 0 =&gt; 0<br/>                | 1 =&gt; 1<br/>                | n =&gt; fib (n-1) + fib (n-2))) n</pre>"}, {"lang": "Swift", "loc": 9, "block": "<pre class=\"text highlighted_source\">let fib: Int -&gt; Int = {<br/>  func f(n: Int) -&gt; Int {<br/>    assert(n &gt;= 0, \"fib: no negative numbers\")<br/>    return n &lt; 2\u00a0? 1\u00a0: f(n-1) + f(n-2)<br/>  }<br/>  return f<br/>}()<br/>\u00a0<br/>print(fib(8))</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> fib n <span class=\"br0\">{</span><br/>    <span class=\"co1\"># sanity checks</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> n <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">error</span> <span class=\"st0\">\"argument may not be negative\"</span><span class=\"br0\">}</span><br/>    apply <span class=\"br0\">{</span>x <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$x</span><span class=\"br0\">}</span><br/>\t<span class=\"co1\"># Extract the lambda term from the stack introspector for brevity</span><br/>\t<span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> level <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>apply <span class=\"re0\">$f</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> x -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span>apply <span class=\"re0\">$f</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> x -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 16, "block": "<pre class=\"text highlighted_source\">(defmacro recursive ((. parm-init-pairs) . body)<br/>  (let ((hidden-name (gensym \"RECURSIVE-\")))<br/>    ^(macrolet ((recurse (. args) ^(,',hidden-name ,*args)))<br/>       (labels ((,hidden-name (,*[mapcar first parm-init-pairs]) ,*body))<br/>         (,hidden-name ,*[mapcar second parm-init-pairs])))))<br/>\u00a0<br/>(defun fib (number)<br/>  (if (&lt; number 0) <br/>    (error \"Error. The number entered: ~a is negative\" number)<br/>    (recursive ((n number) (a 0) (b 1))<br/>      (if (= n 0)<br/>        a<br/>        (recurse (- n 1) b (+ a b))))))<br/>\u00a0<br/>(put-line `fib(10) = @(fib 10)`)<br/>(put-line `fib(-1) = @(fib -1)`))</pre>"}, {"lang": "UNIX Shell", "loc": 17, "block": "<pre class=\"bash highlighted_source\">fib<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">test</span> <span class=\"nu0\">0</span> <span class=\"re5\">-gt</span> <span class=\"st0\">\"$1\"</span>; <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"fib: fib of negative\"</span> <span class=\"nu0\">1</span><span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">2</span><br/>    <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"br0\">(</span><br/>      fib2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">test</span> <span class=\"nu0\">2</span> <span class=\"re5\">-gt</span> <span class=\"st0\">\"$1\"</span>; <span class=\"kw1\">then</span><br/>          <span class=\"kw3\">echo</span> <span class=\"st0\">\"$1\"</span><br/>        <span class=\"kw1\">else</span><br/>          <span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> $<span class=\"br0\">(</span>fib2 $<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re4\">$1</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> + $<span class=\"br0\">(</span>fib2 $<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re4\">$1</span> - <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">fi</span><br/>      <span class=\"br0\">}</span><br/>      fib2 <span class=\"st0\">\"$1\"</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 13, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>fib =<br/>\u00a0<br/>~&amp;izZB?(                    # test the sign bit of the argument<br/>   &lt;'fib of negative'&gt;!%,   # throw an exception if it's negative<br/>   {0,1}^?&lt;a(               # test the argument to a recursively defined function<br/>      ~&amp;a,                  # if the argument was a member of {0,1}, return it<br/>      sum^|W(               # otherwise return the sum of two recursive calls<br/>         ~&amp;,                # to the function thus defined<br/>         predecessor^~(     # with the respective predecessors of<br/>            ~&amp;,             # the given argument<br/>            predecessor)))) # and the predecessor thereof</pre>"}, {"lang": "UTFool", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00b7\u00b7\u00b7<br/>http://rosettacode.org/wiki/Anonymous_recursion<br/>\u00b7\u00b7\u00b7<br/>\u27e6import java.util.function.UnaryOperator;\u27e7<br/>\u00a0<br/>\u25a0 AnonymousRecursion<br/>  \u00a7 static<br/>    \u25b6 main<br/>    \u2022 args\u2982 String[]<br/>      if 0 &gt; Integer.valueOf args[0]<br/>         System.out.println \"negative argument\"<br/>      else<br/>         System.out.println *UnaryOperator\u27e8Integer\u27e9\u00b0 \u25a0<br/>           \u25b6 apply\u2982 Integer<br/>           \u2022 n\u2982 Integer<br/>             \u23ce n \u2264 1\u00a0? n\u00a0! (apply n - 1) + (apply n - 2)<br/>         \u00b0.apply Integer.valueOf args[0]<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 15, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/>Debug.<span class=\"kw4\">Print</span> F(-10)<br/>Debug.<span class=\"kw4\">Print</span> F(10)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> F(N <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>    <span class=\"kw3\">If</span> N &lt; 0 <span class=\"kw3\">Then</span><br/>        F = <span class=\"st0\">\"Error. Negative argument\"</span><br/>    <span class=\"kw3\">ElseIf</span> N &lt;= 1 <span class=\"kw3\">Then</span><br/>        F = N<br/>    <span class=\"kw3\">Else</span><br/>        F = F(N - 1) + F(N - 2)<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "Wart", "loc": 7, "block": "<pre class=\"text highlighted_source\">def (fib n)<br/>  if (n &gt;= 0)<br/>    (transform n\u00a0:thru (afn (n)<br/>                         (if (n &lt; 2)<br/>                           n<br/>                           (+ (self n-1)<br/>                              (self n-2)))))</pre>"}, {"lang": "WDTE", "loc": 9, "block": "<pre class=\"text highlighted_source\">let str =&gt; 'strings';<br/>\u00a0<br/>let fib n =&gt; switch n {<br/>  &lt; 0 =&gt; str.format 'Bad argument: {q}' n;<br/>  default =&gt; n -&gt; (@ memo s n =&gt; switch n {<br/>    == 0 =&gt; 0; == 1 =&gt; 1;<br/>    default =&gt; + (s (- n 1)) (s (- n 2));<br/>  });<br/>};</pre>"}, {"lang": "Wren", "loc": 13, "block": "<pre class=\"text highlighted_source\">class Fibonacci {<br/>    static compute(n) {<br/>        var fib<br/>        fib = Fn.new {|n|<br/>            if (n &lt; 2) return n<br/>            return fib.call(n - 1) + fib.call(n - 2)<br/>        }<br/>\u00a0<br/>        if (n &lt; 0) return null<br/>        return fib.call(n)<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 17, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>func Fib(X);<br/>int X;<br/>        func ActualFib(N);<br/>        int N;<br/>        [if N&lt;2 then return N<br/>        else return ActualFib(N-1) + ActualFib(N-2);<br/>        ]; \\ActualFib;<br/>\u00a0<br/>[if X&lt;0 then [Text(0, \"Error \"); return 0]<br/>else return ActualFib(X);<br/>]; \\Fib;<br/>\u00a0<br/>[IntOut(0, Fib(8));  CrLf(0);<br/> IntOut(0, Fib(-2)); CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">fcn fib(n){<br/>   if (n&lt;0) throw(Exception.ValueError);<br/>   fcn(n){<br/>      if (n &lt; 2) return(1);<br/>      else       return(self.fcn(n-1) + self.fcn(n-2));<br/>   }(n);<br/>}<br/>fib(8) .println();<br/>fib(-8).println();<br/>\u00a0</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 13, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> INPUT <span class=\"st0\">\"Enter a number: \"</span>;n<br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> t=<span class=\"nu0\">0</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">60</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">PRINT</span> t<br/><span class=\"nu0\">50</span> STOP <br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> nold1=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> nold2=<span class=\"nu0\">0</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> n&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Positive argument required!\"</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">80</span> <span class=\"kw1\">IF</span> n=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> t=nold2: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">90</span> <span class=\"kw1\">IF</span> n=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> t=nold1: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">100</span> <span class=\"kw1\">LET</span> t=nold2+nold1<br/><span class=\"nu0\">110</span> <span class=\"kw1\">IF</span> n&gt;<span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> n=n-<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> nold2=nold1: <span class=\"kw1\">LET</span> nold1=t: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">100</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">RETURN</span> <br/>\u00a0</pre>"}]}