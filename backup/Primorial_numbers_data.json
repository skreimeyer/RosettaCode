{"task": "Primorial_numbers", "blocks": [{"lang": "C", "loc": 77, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;inttypes.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;gmp.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Eratosthenes bit-sieve */</span><br/><span class=\"kw4\">int</span> es_check<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>sieve<span class=\"sy0\">,</span> <span class=\"kw4\">uint64_t</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>es_sieve<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">uint64_t</span> nth<span class=\"sy0\">,</span> <span class=\"kw4\">uint64_t</span> <span class=\"sy0\">*</span>es_size<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"sy0\">*</span>es_size <span class=\"sy0\">=</span> nth <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span>nth<span class=\"br0\">)</span> <span class=\"sy0\">+</span> nth <span class=\"sy0\">*</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span>nth<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu17\">0.9385f</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>sieve <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>es_size <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint64_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>es_size<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>i <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint64_t</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"sy0\">*</span>es_size<span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                sieve<span class=\"br0\">[</span>j <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sieve<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> mpz_number_of_digits<span class=\"br0\">(</span><span class=\"kw4\">const</span> mpz_t op<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>opstr <span class=\"sy0\">=</span> mpz_get_str<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> op<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> oplen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>opstr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>opstr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> oplen<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define PRIMORIAL_LIMIT 1000000</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* Construct a sieve of the first 1,000,000 primes */</span><br/>    <span class=\"kw4\">uint64_t</span> sieve_size<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>sieve <span class=\"sy0\">=</span> es_sieve<span class=\"br0\">(</span>PRIMORIAL_LIMIT<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>sieve_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    mpz_t primorial<span class=\"sy0\">;</span><br/>    mpz_init_set_ui<span class=\"br0\">(</span>primorial<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">uint64_t</span> prime_count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> print <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> unused<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint64_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sieve_size <span class=\"sy0\">&amp;&amp;</span> prime_count <span class=\"sy0\">&lt;=</span> PRIMORIAL_LIMIT<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>print<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>prime_count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                gmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"Primorial(%\"</span> PRIu64 <span class=\"st0\">\") =\u00a0%Zd<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> prime_count<span class=\"sy0\">,</span> primorial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"coMULTI\">/* Is the current number a power of 10? */</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/modf.html\"><span class=\"kw3\">modf</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/log10.html\"><span class=\"kw3\">log10</span></a><span class=\"br0\">(</span>prime_count<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>unused<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Primorial(%\"</span> PRIu64 <span class=\"st0\">\") has\u00a0%zu digits<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> prime_count<span class=\"sy0\">,</span> mpz_number_of_digits<span class=\"br0\">(</span>primorial<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            print <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>es_check<span class=\"br0\">(</span>sieve<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            mpz_mul_ui<span class=\"br0\">(</span>primorial<span class=\"sy0\">,</span> primorial<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            prime_count<span class=\"sy0\">++;</span><br/>            print <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>sieve<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    mpz_clear<span class=\"br0\">(</span>primorial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 47, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns example<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Generate Prime Numbers (Implementation from RosettaCode--link above)</span><br/><span class=\"br0\">(</span>defn primes-hashmap<br/>  <span class=\"st0\">\"Infinite sequence of primes using an incremental Sieve or Eratosthenes with a Hashmap\"</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>letfn <span class=\"br0\">[</span><span class=\"br0\">(</span>nxtoddprm <span class=\"br0\">[</span>c q bsprms cmpsts<span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> c q<span class=\"br0\">)</span> <span class=\"co1\">;; only ever equal</span><br/>              <span class=\"co1\">; Update cmpsts with primes up to sqrt c</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>p2 <span class=\"br0\">(</span>* <span class=\"br0\">(</span>first bsprms<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    nbps <span class=\"br0\">(</span>next bsprms<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    nbp <span class=\"br0\">(</span>first nbps<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>+ c <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* nbp nbp<span class=\"br0\">)</span> nbps <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> cmpsts <span class=\"br0\">(</span>+ q p2<span class=\"br0\">)</span> p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>contains? cmpsts c<span class=\"br0\">)</span><br/>                <span class=\"co1\">; Not prime</span><br/>                <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>+ c <span class=\"nu0\">2</span><span class=\"br0\">)</span> q bsprms<br/>                       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>adv <span class=\"br0\">(</span>cmpsts c<span class=\"br0\">)</span><span class=\"sy0\">,</span> ncmps <span class=\"br0\">(</span>dissoc cmpsts c<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> ncmps<br/>                           <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>try <span class=\"br0\">(</span>+ c adv<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"co1\">;; ensure map entry is unique</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>contains? ncmps try<span class=\"br0\">)</span><br/>                               <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>+ try adv<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                               try<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           adv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"co1\">; prime</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">cons</span> c <span class=\"br0\">(</span>lazy-seq <span class=\"br0\">(</span>nxtoddprm <span class=\"br0\">(</span>+ c <span class=\"nu0\">2</span><span class=\"br0\">)</span> q bsprms cmpsts<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span>def baseoddprms <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span>lazy-seq <span class=\"br0\">(</span>nxtoddprm <span class=\"nu0\">5</span> <span class=\"nu0\">9</span> baseoddprms <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>lazy-seq <span class=\"br0\">(</span>nxtoddprm <span class=\"nu0\">3</span> <span class=\"nu0\">9</span> baseoddprms <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Generate Primorial Numbers</span><br/><span class=\"br0\">(</span>defn primorial <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Function produces the nth primorial number\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span>                                                           <span class=\"co1\">; by definition</span><br/>    <span class=\"br0\">(</span>reduce *' <span class=\"br0\">(</span>take n <span class=\"br0\">(</span>primes-hashmap<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                     <span class=\"co1\">; multiply first n primes (retrieving primes from lazy-seq which generates primes as needed)</span><br/>\u00a0<br/><span class=\"co1\">;; Show Results</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>start <span class=\"br0\">(</span>System/nanoTime<span class=\"br0\">)</span><br/>      elapsed-secs <span class=\"br0\">(</span>fn <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- <span class=\"br0\">(</span>System/nanoTime<span class=\"br0\">)</span> start<span class=\"br0\">)</span> 1e9<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>   <span class=\"co1\">; System start time</span><br/>  <span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>i <span class=\"br0\">(</span>concat <span class=\"br0\">(</span>range <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>1e2 1e3 1e4 1e5 1e6<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">:</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>p <span class=\"br0\">(</span>primorial i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span>                               <span class=\"co1\">; Generate ith primorial number</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> i <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"primorial (\u00a0%7d ) =\u00a0%10d\"</span> i <span class=\"br0\">(</span>biginteger p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>         <span class=\"co1\">; Output for first 10</span><br/>      <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"primorial (\u00a0%7d ) has\u00a0%8d digits<span class=\"es0\">\\t</span>after\u00a0%.3f secs\"</span>   <span class=\"co1\">; Output with time since starting for remainder</span><br/>                       <span class=\"br0\">(</span>long i<span class=\"br0\">)</span> <span class=\"br0\">(</span>count <span class=\"br0\">(</span>str p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>elapsed-secs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 60, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">format</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> sieveLimit <span class=\"sy0\">=</span> <span class=\"nu0\">1300</span>_000<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span> notPrime<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// initialize</span><br/>  sieve<span class=\"br0\">(</span>sieveLimit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// output 1\t</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"primorial(%d):\u00a0%d\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> primorial<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// output 2</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"primorial(10^%d) has length\u00a0%d\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> count<span class=\"br0\">(</span>format<span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> primorial<span class=\"br0\">(</span>pow<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>BigInt primorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  BigInt result <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sieveLimit <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>notPrime<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>    result <span class=\"sy0\">*=</span> BigInt<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    n<span class=\"sy0\">--;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sieve<span class=\"br0\">(</span><span class=\"kw4\">int</span> limit<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  notPrime <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>limit<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  notPrime<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> notPrime<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">auto</span> max <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span><span class=\"kw2\">cast</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span> limit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> max<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>notPrime<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> k <span class=\"sy0\">+=</span> n<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        notPrime<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>defmodule SieveofEratosthenes do<br/>  def init(lim) do<br/>    find_primes(2,lim,(2..lim))<br/>  end<br/>\u00a0<br/>  def find_primes(count,lim,nums) when (count * count) &gt; lim do<br/>    nums<br/>  end<br/>\u00a0<br/>  def find_primes(count,lim,nums) when (count * count) &lt;= lim do<br/>    find_primes(count+1,lim,Enum.reject(nums,&amp;(rem(&amp;1,count) == 0 and &amp;1 &gt; count)))<br/>  end<br/>end<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 7, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">// Primorial Numbers. Nigel Galloway: November 28th., 2017</span><br/><span class=\"kw1\">let</span> primorialNumbers <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">let</span> N <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> N <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> 1I<br/>          <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>n:<span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> N <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>N<span class=\"sy0\">*</span><span class=\"br0\">(</span>bigint n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>N<span class=\"br0\">)</span><br/>  <span class=\"kw1\">yield</span> 1I<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> N primes<span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 24, "block": "<pre class=\"text highlighted_source\">USING: formatting kernel literals math math.functions<br/>math.primes sequences\u00a0;<br/>IN: rosetta-code.primorial-numbers<br/>\u00a0<br/>CONSTANT: primes $[ 1,000,000 nprimes ]<br/>\u00a0<br/>: digit-count ( n -- count ) log10 floor &gt;integer 1 +\u00a0;<br/>\u00a0<br/>: primorial ( n -- m ) primes swap head product\u00a0;<br/>\u00a0<br/>: .primorial ( n -- ) dup primorial \"Primorial(%d) =\u00a0%d\\n\"<br/>    printf\u00a0;<br/>\u00a0<br/>: .digit-count ( n -- ) dup primorial digit-count<br/>    \"Primorial(%d) has\u00a0%d digits\\n\" printf\u00a0;<br/>\u00a0<br/>: part1 ( -- ) 10 iota [ .primorial ] each\u00a0;<br/>\u00a0<br/>: part2 ( -- ) { 10 100 1000 10000 100000 1000000 }<br/>    [ .digit-count ] each\u00a0;<br/>\u00a0<br/>: main ( -- ) part1 part2\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>Base:    10   100  1,000  10,000  100,000\nSecs:   554   278    185     117       52 - but wrong!\n64-bit                       300      241\n</pre>"}, {"lang": "FreeBASIC", "loc": 97, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 22-09-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> Base_ = <span class=\"nu0\">1000000000</span><br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> primes<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> sieve<span class=\"br0\">(</span>need <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' estimate is to high, but ensures that we have enough primes</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> max = need * <span class=\"br0\">(</span><span class=\"kw1\">Log</span><span class=\"br0\">(</span>need<span class=\"br0\">)</span> + <span class=\"kw1\">Log</span><span class=\"br0\">(</span><span class=\"kw1\">Log</span><span class=\"br0\">(</span>need<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> t = <span class=\"nu0\">1</span> ,x , x2<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Byte</span> p<span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">ReDim</span> primes <span class=\"br0\">(</span>need + need \\ <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"co1\">' we trim the array later</span><br/>    primes<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>                  <span class=\"co1\">' by definition</span><br/>    primes<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">2</span>                  <span class=\"co1\">' first prime, the only even prime</span><br/>\u00a0<br/>    <span class=\"co1\">' only consider the odd number</span><br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>max<span class=\"br0\">)</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">If</span> p<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">For</span> x2 = x * x <span class=\"kw1\">To</span> max <span class=\"kw1\">Step</span> x * <span class=\"nu0\">2</span><br/>                p<span class=\"br0\">(</span>x2<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">' move found primes to array</span><br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> max <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">If</span> p<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            t += <span class=\"nu0\">1</span><br/>            primes<span class=\"br0\">(</span>t<span class=\"br0\">)</span> = x<br/>        EndIf<br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"co1\">'ReDim Preserve primes(t)</span><br/>    <span class=\"kw1\">ReDim</span> <span class=\"kw1\">Preserve</span> primes<span class=\"br0\">(</span>need<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> n, i, pow, primorial<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> str_out, buffer = <span class=\"kw1\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> max = <span class=\"nu0\">100000</span> <span class=\"co1\">' maximum number of primes we need</span><br/>\u00a0<br/>sieve<span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/>\u00a0<br/>primorial = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><br/>    primorial = primorial * primes<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\" primorial(#) =\"</span>; n;<br/>    <span class=\"kw1\">RSet</span> buffer, <span class=\"kw1\">Str</span><span class=\"br0\">(</span>primorial<span class=\"br0\">)</span><br/>    str_out = buffer<br/>    <span class=\"kw1\">Print</span> str_out<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' could use GMP, but why not make are own big integer routine</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> bigint<span class=\"br0\">(</span>max<span class=\"br0\">)</span>, first = max, last = max<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> l, p, carry, low = <span class=\"nu0\">9</span>, high = <span class=\"nu0\">10</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> result<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> <span class=\"kw1\">Ptr</span> big_i<br/>\u00a0<br/><span class=\"co1\">' start at the back, number grows to the left like normal number</span><br/>bigint<span class=\"br0\">(</span>last<span class=\"br0\">)</span> = primorial<br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">For</span> pow = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>max<span class=\"br0\">)</span><span class=\"br0\">)</span> -<span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> pow &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        low = high<br/>        high = high * <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">For</span> n = low + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> high<br/>        carry = <span class=\"nu0\">0</span><br/>        big_i = @bigint<span class=\"br0\">(</span>last<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> i = last <span class=\"kw1\">To</span> first <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>            result = <span class=\"kw1\">CULngInt</span><span class=\"br0\">(</span>primes<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> * *big_i + carry<br/>            carry = result \\ Base_<br/>            *big_i = result - carry * Base_<br/>            big_i = big_i -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Next</span> i<br/>        <span class=\"kw1\">If</span> carry &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            first = first -<span class=\"nu0\">1</span><br/>            *big_i = carry<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> n<br/>    l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>bigint<span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span>last - first<span class=\"br0\">)</span> * <span class=\"nu0\">9</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\" primorial(\"</span>; high; <span class=\"st0\">\") has \"</span>; l\u00a0;<span class=\"st0\">\" digits\"</span><br/><span class=\"kw1\">Next</span> pow<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"math/big\"</span><br/>\t<span class=\"st0\">\"time\"</span><br/>\u00a0<br/>\t<span class=\"st0\">\"github.com/jbarham/primegen.go\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tstart <span class=\"sy2\">:=</span> time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><br/>\tpg <span class=\"sy2\">:=</span> primegen<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>\t<span class=\"kw1\">var</span> <span class=\"nu2\">i</span> <span class=\"kw4\">uint64</span><br/>\tp <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\ttmp <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">9</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"primorial(%v) =\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>\t\t<span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>\t\tp <span class=\"sy2\">=</span> p<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>p<span class=\"sy1\">,</span> tmp<span class=\"sy3\">.</span>SetUint64<span class=\"sy1\">(</span>pg<span class=\"sy3\">.</span>Next<span class=\"sy1\">()))</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span><span class=\"sy1\">{</span><span class=\"nu1\">1e1</span><span class=\"sy1\">,</span> <span class=\"nu1\">1e2</span><span class=\"sy1\">,</span> <span class=\"nu1\">1e3</span><span class=\"sy1\">,</span> <span class=\"nu1\">1e4</span><span class=\"sy1\">,</span> <span class=\"nu1\">1e5</span><span class=\"sy1\">,</span> <span class=\"nu1\">1e6</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> &lt; j <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>\t\t\tp <span class=\"sy2\">=</span> p<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>p<span class=\"sy1\">,</span> tmp<span class=\"sy3\">.</span>SetUint64<span class=\"sy1\">(</span>pg<span class=\"sy3\">.</span>Next<span class=\"sy1\">()))</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"primorial(%v) has\u00a0%v digits\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>String<span class=\"sy1\">()))</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>(after\u00a0%v)<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> time<span class=\"sy3\">.</span><span class=\"me1\">Since</span><span class=\"sy1\">(</span>start<span class=\"sy1\">))</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 34, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span>&amp;<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl1\"><span class=\"kw3\">scanl1</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl1\"><span class=\"kw3\">foldl1</span></a><span class=\"st0\">')<br/>\u00a0<br/>getNthPrimorial\u00a0:: Int -&gt; Integer<br/>getNthPrimorial n = foldl1'</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n primes<span class=\"br0\">)</span><br/>\u00a0<br/>primes <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>primes <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isPrime <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>isPrime <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isPrime <span class=\"sy0\">=</span> isPrime<span class=\"sy0\">_</span> primes<br/>  <span class=\"kw1\">where</span> isPrime<span class=\"sy0\">_</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>        isPrime<span class=\"sy0\">_</span> <span class=\"br0\">(</span>p:ps<span class=\"br0\">)</span> n<br/>          <span class=\"sy0\">|</span> p <span class=\"sy0\">*</span> p <span class=\"sy0\">&gt;</span> n      <span class=\"sy0\">=</span> True<br/>          <span class=\"sy0\">|</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> False<br/>          <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>      <span class=\"sy0\">=</span> isPrime<span class=\"sy0\">_</span> ps n<br/>\u00a0<br/>primorials <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>primorials <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl1\"><span class=\"kw3\">scanl1</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> primes<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"co1\">-- Print the first 10 primorial numbers</span><br/>  <span class=\"kw1\">let</span> firstTen <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> primorials<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"The first 10 primorial numbers are: \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> firstTen<br/>\u00a0<br/>  <span class=\"co1\">-- Show the length of the primorials with index 10^[1..6]</span><br/>  <span class=\"kw1\">let</span> powersOfTen <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><br/>      primorialTens <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a> <span class=\"sy0\">&amp;&amp;</span>&amp; <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> getNthPrimorial <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">^</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> powersOfTen<br/>      calculate <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Primorial(10^\"</span><span class=\"sy0\">++</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a<span class=\"sy0\">++</span><span class=\"st0\">\") has \"</span><span class=\"sy0\">++</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> b<span class=\"sy0\">++</span><span class=\"st0\">\" digits\"</span><span class=\"br0\">)</span><br/>  calculate primorialTens<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">primorial=:*/@:p:@i.\"<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 45, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PrimorialNumbers <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> sieveLimit <span class=\"sy0\">=</span> <span class=\"nu0\">1300</span>_000<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> notPrime <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span>sieveLimit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"primorial(%d):\u00a0%d%n\"</span>, i, primorial<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> primorial<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"primorial(10^%d) has length\u00a0%d%n\"</span>, i, len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> primorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sieveLimit <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>notPrime<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            result <span class=\"sy0\">=</span> result.<span class=\"me1\">multiply</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n<span class=\"sy0\">--;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sieve<span class=\"br0\">(</span><span class=\"kw4\">int</span> limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> composite <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>limit<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        composite<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> composite<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> max <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> max<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>composite<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> k <span class=\"sy0\">+=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    composite<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> composite<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Primes<br/>\u00a0<br/>primelist = primes(300000001) # primes to 30 million<br/>\u00a0<br/>primordial(n) = foldr(*, BigInt(1), primelist[1:n])<br/>\u00a0<br/>println(\"The first ten primordials are: $([primordial(n) for n in 1:10])\")<br/>\u00a0<br/>for i in 1:6<br/>    n = 10^i<br/>    p = primordial(n)<br/>    plen = Int(floor(log10(p))) + 1<br/>    println(\"primordial($n) has length $plen digits in base 10.\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 46, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> LIMIT <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span>  <span class=\"co1\">// expect a run time of about 20 minutes on a typical laptop</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun countDigits<span class=\"br0\">(</span>bi<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> bi.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Primorial(0) = 1\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Primorial(1) = 2\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> prod <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> target <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            count++<br/>            prod <span class=\"sy0\">*=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>p.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"Primorial($count) = $prod\"</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> target<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"Primorial($target) has ${countDigits(prod)} digits\"</span><span class=\"br0\">)</span>              <br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> LIMIT<span class=\"br0\">)</span> break<br/>                target <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        p +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span>           <br/>    <span class=\"br0\">}</span>   <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 22, "block": "<pre class=\"text highlighted_source\">-- libs<br/>sieve = script(\"math.primes\").new()<br/>bigint = script(\"bigint\").new()<br/>\u00a0<br/>cnt = 1000 * 100<br/>primes = sieve.getNPrimes(cnt)<br/>\u00a0<br/>pr = 1<br/>put \"Primorial 0: \" &amp; pr<br/>repeat with i = 1 to 9<br/>    pr = pr*primes[i]<br/>    put \"Primorial \" &amp; i &amp; \": \" &amp; pr<br/>end repeat<br/>\u00a0<br/>pow10 = 10<br/>repeat with i = 10 to cnt<br/>    pr = bigint.mul(pr, primes[i])<br/>    if i mod pow10=0 then<br/>        put \"Primorial \" &amp; i &amp; \" has length: \" &amp; pr.length<br/>        pow10 = pow10 * 10<br/>    end if<br/>end repeat</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">FoldList[Times, 1, NestList[NextPrime, 2, 8]]</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">nthprimorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">prod</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><span class=\"kw1\">prime</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>nthprimorial<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>#Str<span class=\"br0\">(</span>nthprimorial<span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#Str<span class=\"br0\">(</span>nthprimorial<span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span><span class=\"nu1\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 32, "block": "<pre class=\"pascal highlighted_source\"><span class=\"co2\">{$H+}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">,</span>mp_types<span class=\"sy1\">,</span>mp_base<span class=\"sy1\">,</span>mp_prime<span class=\"sy1\">,</span>mp_numth<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/> x<span class=\"sy1\">:</span> mp_int<span class=\"sy1\">;</span><br/> t0<span class=\"sy1\">,</span>t1<span class=\"sy1\">:</span> TDateTime<span class=\"sy1\">;</span><br/> s<span class=\"sy1\">:</span> <span class=\"kw4\">AnsiString</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>cnt <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>  ctx <span class=\"sy1\">:</span>TPrimeContext<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  mp_init<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>  FindFirstPrime32<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>ctx<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>  t0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> time<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw1\">repeat</span><br/>      FindNextPrime32<span class=\"br0\">(</span>ctx<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> cnt <span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>    mp_primorial<span class=\"br0\">(</span>ctx<span class=\"sy1\">.</span><span class=\"me1\">prime</span><span class=\"sy1\">,</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    s<span class=\"sy1\">:</span><span class=\"sy3\">=</span> mp_adecimal<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'MaxPrime '</span><span class=\"sy1\">,</span>ctx<span class=\"sy1\">.</span><span class=\"me1\">prime</span><span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span>length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"st0\">' digits'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy3\">*</span>i<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> i &gt; <span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/>  t1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> time<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"br0\">(</span>t1<span class=\"sy3\">-</span>t0<span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">86400.0</span><span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"st0\">' s'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>pn_primorial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"st0\">\"First ten primorials: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> pn_primorial<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"st0\">\"primorial(10^$_) has \"</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> pn_primorial<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\" digits\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> primorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"re0\">@primes</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"First ten primorials: {(primorial $_ for ^10)}\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"primorial(10^$_) has {primorial(10**$_).chars} digits\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(de prime? (N Lst)<br/>   (let S (sqrt N)<br/>      (for D Lst<br/>         (T (&gt; D S) T)<br/>         (T (=0 (% N D)) NIL) ) ) )<br/>\u00a0<br/>(de take (N)<br/>   (let I 1<br/>      (make<br/>         (link 2)<br/>         (do (dec N)<br/>            (until (prime? (inc 'I 2) (made)))<br/>            (link I) ) ) ) )<br/>\u00a0<br/># This is a simple approach to calculate primorial may not be the fastest one <br/>(de primorial (N)<br/>   (apply * (take N)) )<br/>\u00a0<br/>#print 1st 10 primorial numbers<br/>(for M 10 (prinl \"primorial: \"(primorial M)))<br/>\u00a0<br/># print the length of primorial numbers.<br/>[prinl (length (primorial (** 10 1)]<br/>[prinl (length (primorial (** 10 2)]<br/>[prinl (length (primorial (** 10 3)]<br/>[prinl (length (primorial (** 10 4)]<br/>#The last one takes a very long time to compute.<br/>[prinl (length (primorial (** 10 5)]</pre>"}, {"lang": "Python", "loc": 14, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> pyprimes <span class=\"kw1\">import</span> nprimes<br/><span class=\"kw1\">from</span> functools <span class=\"kw1\">import</span> <span class=\"kw2\">reduce</span><br/>\u00a0<br/>\u00a0<br/>primelist <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>nprimes<span class=\"br0\">(</span><span class=\"nu0\">1000001</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\"># [2, 3, 5, ...]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> primorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span><span class=\"kw2\">int</span>.<span class=\"kw4\">__mul__</span><span class=\"sy0\">,</span> primelist<span class=\"br0\">[</span>:n<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'First ten primorals:'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>primorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> e <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>:<br/>        n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>**e<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'primorial(%i) has\u00a0%i digits'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>primorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 37, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(require (except-in math/number-theory nth-prime))<br/>\u00a0<br/>(define-syntax-rule (define/cache (name arg) body ...)<br/>  (begin<br/>    (define cache (make-hash))<br/>    (define (name arg)<br/>      (hash-ref! cache arg (lambda () body ...)))))<br/>\u00a0<br/>(define (num-length n)<br/> \u00a0;warning: this defines (num-length 0) as 0<br/>  (if (zero? n)<br/>    0<br/>    (add1 (num-length (quotient n 10)))))<br/>\u00a0<br/>(define/cache (nth-prime n)<br/>  (if (zero? n)<br/>      2<br/>      (for/first ([p (in-naturals (add1 (nth-prime (sub1 n))))]<br/>                  #:when (prime? p))<br/>           p)))<br/>\u00a0<br/>(define (primorial n)<br/>  (if (zero? n)<br/>     1<br/>     (* (primorial (sub1 n))<br/>        (nth-prime (sub1 n)))))<br/>\u00a0<br/>(displayln<br/> (for/list ([i (in-range 10)])<br/>   (primorial i)))<br/>\u00a0<br/>(for ([i (in-range 1 6)])<br/>  (printf \"Primorial(10^~a) has ~a digits.\\n\"<br/>          i<br/>          (num-length (primorial (expt 10 i)))))</pre>"}, {"lang": "REXX", "loc": 36, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program computes some primorial numbers for low #s, and for  10^n.     */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N H <span class=\"sy0\">.</span>                        <span class=\"coMULTI\">/*get optional arguments:  N,  L,  H   */</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">','</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">10</span>           <span class=\"coMULTI\">/*was  N  given?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> H==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> H==<span class=\"st0\">','</span>  <span class=\"kw3\">then</span> H=<span class=\"nu0\">100000</span>       <span class=\"coMULTI\">/*was  H  given?  Then use the default.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">600000</span>; w=<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/* be able to handle large numbers.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>; @<span class=\"sy0\">.</span>0=<span class=\"nu0\">1</span>; @<span class=\"sy0\">.</span>1=<span class=\"nu0\">2</span>; @<span class=\"sy0\">.</span>2=<span class=\"nu0\">3</span>; @<span class=\"sy0\">.</span>3=<span class=\"nu0\">5</span>;  @<span class=\"sy0\">.</span>4=<span class=\"nu0\">7</span>;  @<span class=\"sy0\">.</span>5=<span class=\"nu0\">11</span>;  @<span class=\"sy0\">.</span>6=<span class=\"nu0\">13</span>  <span class=\"coMULTI\">/*some low primes.*/</span><br/>             s<span class=\"sy0\">.</span>1=<span class=\"nu0\">4</span>; s<span class=\"sy0\">.</span>2=<span class=\"nu0\">9</span>; s<span class=\"sy0\">.</span>3=<span class=\"nu0\">25</span>; s<span class=\"sy0\">.</span>4=<span class=\"nu0\">49</span>; s<span class=\"sy0\">.</span>5=<span class=\"nu0\">121</span>; s<span class=\"sy0\">.</span>6=<span class=\"nu0\">169</span> <span class=\"coMULTI\">/*squared primes. */</span><br/>#=<span class=\"nu0\">6</span>                                                         <span class=\"coMULTI\">/*number of primes*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N                     <span class=\"coMULTI\">/*calculate the first  N  primorial #s.*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"kw6\">length</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"st0\">' primorial is: '</span>    primorial<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>p=<span class=\"nu0\">1</span>;                    <span class=\"kw1\">say</span><br/>     <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> H                     <span class=\"coMULTI\">/*process a large range of numbers.    */</span><br/>     p=p<span class=\"sy0\">*</span>prime<span class=\"br0\">(</span>k<span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*calculate the next primorial number. */</span><br/>     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> k L <span class=\"nu0\">2</span> <span class=\"st0\">''</span> -<span class=\"nu0\">1</span> R           <span class=\"coMULTI\">/*get the left and rightmost dec digits*/</span><br/>     <span class=\"kw1\">if</span> R<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/*if right\u2500most decimal digit\\==0, skip*/</span><br/>     <span class=\"kw1\">if</span> L<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/* \"  left\u2500most    \"      \"  \\==1,   \" */</span><br/>     <span class=\"kw1\">if</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>k,,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/*Not a power of 10?  Then skip this K.*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>k,w<span class=\"br0\">)</span> <span class=\"st0\">' primorial length in decimal digits is:'</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>,w<span class=\"br0\">)</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500PRIMORIAL subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>primorial: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> s<span class=\"sy0\">.</span> #; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> y; \u00a0!=<span class=\"nu0\">1</span>    <span class=\"coMULTI\">/*obtain the arg  Y.*/</span><br/>               <span class=\"kw1\">do</span> p=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> y; \u00a0!=!<span class=\"sy0\">*</span>prime<span class=\"br0\">(</span>p<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*p*/</span>  <span class=\"coMULTI\">/*calculate product.*/</span><br/><span class=\"kw1\">return</span>\u00a0!                                                  <span class=\"coMULTI\">/*return with the #.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500PRIME subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>prime: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> s<span class=\"sy0\">.</span> #;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>n<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> @<span class=\"sy0\">.</span>n<br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">9</span>                                          <span class=\"coMULTI\">/*limit digs to min.*/</span><br/>  <span class=\"kw1\">do</span> <a class=\"__cf_email__\" data-cfemail=\"b8d285f8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#+<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>                                        <span class=\"coMULTI\">/*start looking at #*/</span><br/>  <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>; <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">3</span>==<span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*divisible by 2\u25023\u00a0?*/</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> j <span class=\"st0\">''</span> -<span class=\"nu0\">1</span> _;      <span class=\"kw1\">if</span> _==<span class=\"nu0\">5</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*right-most dig\u22615? */</span><br/>  <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">7</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>; <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">11</span>==<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*divisible by 7\u250211?*/</span><br/>    <span class=\"kw1\">do</span> k=<span class=\"nu0\">6</span>  <span class=\"kw2\">while</span> s<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>=j;   <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span>@<span class=\"sy0\">.</span>k==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j  <span class=\"coMULTI\">/*divide by primes. */</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>  #=#+<span class=\"nu0\">1</span>;  @<span class=\"sy0\">.</span>#=j;  s<span class=\"sy0\">.</span>#=j<span class=\"sy0\">*</span>j;  <span class=\"kw1\">return</span> j                      <span class=\"coMULTI\">/*next prime; return*/</span><br/>  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span></pre>"}, {"lang": "Ring", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(0)<br/>numb = 10<br/>for prim=1 to numb<br/>    prime = list(prim)<br/>    for num = 1 to len(prime)<br/>        prime[num] = 0<br/>    next<br/>    primorial(prim)<br/>next<br/>\u00a0<br/>func primorial pr      <br/>     n = 1<br/>     n2 = 0<br/>     flag = 1<br/>     while flag = 1 and n &lt; 100   <br/>           nr = isPrime(n)<br/>           if n=1 nr=1 ok<br/>           if nr=1 n2++ prime[n2]=n ok<br/>           if n2=pr flag=0 ok<br/>           n++<br/>     end<br/>     pro = 1<br/>     str = \"\"<br/>     for n=1 to len(prime)<br/>         pro = pro * prime[n]<br/>         str = str + string(prime[n]) + \"*\"<br/>     next<br/>     str = substr(str,1,len(str)-1)<br/>     see \"primorial(\" + string(pr) + \")\u00a0: \" + str + \" = \" + pro + nl<br/>\u00a0<br/>Func IsPrime num<br/>     if (num &lt;= 1) return 0 ok<br/>     if (num\u00a0% 2 = 0) and num\u00a0!= 2 return 0 ok<br/>     for i = 3 to floor(num / 2) - 1 step 2<br/>         if (num\u00a0% i = 0) return 0 ok<br/>     next<br/>     return 1<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> primorial_number<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  pgen = Prime.<span class=\"me1\">each</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span>,_<span class=\"sy0\">|</span> <span class=\"kw3\">p</span><span class=\"sy0\">*</span>pgen.<span class=\"kw1\">next</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"First ten primorials: #{(0..9).map{|n| primorial_number(n)}}\"</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"primorial(10**#{n}) has #{primorial_number(10**n).to_s.size} digits\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 41, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PrimorialNumbers <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sieveLimit<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1300000</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> notPrime<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span>sieveLimit<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> primorial<span class=\"br0\">(</span><span class=\"sy0\">_</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"sy0\">_</span>n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> result <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> sieveLimit <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>notPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result <span class=\"sy0\">=</span> result <span class=\"sy0\">*</span> BigInt<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        n -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"br0\">}</span><br/>      i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    result<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sieve<span class=\"br0\">(</span>limit<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> composite <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>    composite<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    composite<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">2</span> to max<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>composite<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          composite<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>          k +<span class=\"sy0\">=</span> n<br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    composite<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until <span class=\"nu0\">10</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>f<span class=\"st0\">\"primorial($i%d): ${primorial(i)}%d\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> until <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>f<span class=\"st0\">\"primorial(10^$j%d) has length ${primorial(math.pow(10, j).toInt).toString.length}%d\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"br0\">(</span><br/>    <span class=\"st0\">'First ten primorials: '</span>,<br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> pn_primorial<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>^<span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    say <span class=\"br0\">(</span><span class=\"st0\">\"primorial(10^#{i}) has \"</span> <span class=\"sy0\">+</span> pn_primorial<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span>i<span class=\"br0\">)</span>.<span class=\"me1\">len</span> <span class=\"sy0\">+</span> <span class=\"st0\">' digits'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">6</span></pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>extern crate primal;<br/>extern crate rayon;<br/>extern crate rug;<br/>\u00a0<br/>use rayon::prelude::*;<br/>use rug::Integer;<br/>\u00a0<br/>fn partial(p1\u00a0: usize, p2\u00a0: usize) -&gt; String {<br/>    let mut aux = Integer::from(1);<br/>    let (_, hi) = primal::estimate_nth_prime(p2 as u64);<br/>    let sieve = primal::Sieve::new(hi as usize);<br/>    let prime1 = sieve.nth_prime(p1);<br/>    let prime2 = sieve.nth_prime(p2);<br/>\u00a0<br/>    for i in sieve.primes_from(prime1).take_while(|i| *i &lt;= prime2) {<br/>        aux = Integer::from(aux * i as u32);<br/>    }<br/>    aux.to_string_radix(10)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut j1 = Integer::new();<br/>    for k in [2,3,5,7,11,13,17,19,23,29].iter() { <br/>        j1.assign_primorial(*k);<br/>        println!(\"Primorial\u00a0: {}\", j1);<br/>    }<br/>    println!(\"Digits of primorial 10\u00a0: {}\", partial(1, 10).chars().fold(0, |n, _| n + 1));<br/>    println!(\"Digits of primorial 100\u00a0: {}\", partial(1, 100).chars().fold(0, |n, _| n + 1));<br/>    println!(\"Digits of primorial 1_000\u00a0: {}\", partial(1, 1_000).chars().fold(0, |n, _| n + 1));<br/>    println!(\"Digits of primorial 10_000\u00a0: {}\", partial(1, 10_000).chars().fold(0, |n, _| n + 1));<br/>    println!(\"Digits of primorial 100_000\u00a0: {}\", partial(1, 100_000).chars().fold(0, |n, _| n + 1));<br/>\u00a0<br/>    let mut auxi = Integer::from(1);<br/>    let ranges = vec![[1, 300_000], [300_001, 550_000], [550_001, 800_000], [800_001, 1_000_000]];<br/>    let v = ranges.par_iter().map(|value| partial(value[0], value[1])).collect::&lt;Vec&lt;_&gt;&gt;();<br/>    for i in v.iter() {<br/>        auxi =Integer::from(&amp;auxi * i.parse::&lt;Integer&gt;().unwrap());<br/>    }<br/>    let result = auxi.to_string_radix(10).chars().fold(0, |n, _| n+1);<br/>    println!(\"Digits of primorial 1_000_000\u00a0: {}\",result);<br/>}<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">sieve:=Import(\"sieve.zkl\",False,False,False).postponed_sieve;<br/>primes:=Utils.Generator(sieve).walk(0d10);  // first 10 primes<br/>foreach n in (10)<br/>   { primes[0,n].reduce('*,1):println(\"primorial(%d)=%d\".fmt(n,_)); }<br/>\u00a0<br/>var [const] BN=Import(\"zklBigNum\");<br/>primes:=Utils.Generator(sieve).walk(0d1_000_000);<br/>foreach n in ([1..6]){ n=(10).pow(n);<br/>   primes[0,n].pump(BN(1).mul)<br/>  \u00a0:println(\"primorial(%,d)=%,d digits\".fmt(n,_.numDigits));<br/>}</pre>"}]}