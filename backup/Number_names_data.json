{"task": "Number_names", "blocks": [{"lang": "360 Assembly", "loc": 183, "block": "<pre class=\"text highlighted_source\">*        Number names              20/02/2017 <br/>NUMNAME  CSECT<br/>         USING  NUMNAME,R13<br/>         B      72(R15)<br/>         DC     17F'0'<br/>         STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15            end of prolog<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,=A(NG))   do i=1 to hbound(g)<br/>         LR     R1,R6              i<br/>         SLA    R1,2<br/>         L      R2,G-4(R1)         g(i)<br/>         ST     R2,N               n=g(i)<br/>         L      R4,N<br/>       IF LTR,R4,Z,R4 THEN         if n=0 then<br/>         MVC    R,=CL256'zero'     r='zero'<br/>       ELSE     ,                  else<br/>         MVC    R,=CL256' '        r=''<br/>         MVC    D,=F'10'           d=10<br/>         MVC    C,=F'100'          c=100<br/>         MVC    K,=F'1000'         k=1000<br/>         L      R2,N               n<br/>         LPR    R2,R2              abs(n)<br/>         ST     R2,A               a=abs(n)<br/>         SR     R7,R7              j=0<br/>       DO WHILE=(C,R7,LE,D)        do j=0 to d<br/>         L      R4,A               a<br/>         SRDA   R4,32<br/>         D      R4,C               /c<br/>         M      R4,C               *a<br/>         L      R8,A               a<br/>         SR     R8,R5              h=a-c*a/c<br/>       IF C,R8,GT,=F'0',AND,C,R8,LT,D THEN  if h&gt;0 &amp; h&lt;d then<br/>         LR     R1,R8                h<br/>         MH     R1,=H'10'<br/>         LA     R4,S(R1)             @s(h+1)<br/>         MVC    PG(10),0(R4)         s(h+1)<br/>         MVC    PG+10(246),R        \u00a0!!r<br/>         MVC    R,PG                 r=s(h+1)!!' '!!r<br/>       ENDIF    ,                  endif<br/>       IF C,R8,GT,=F'9',AND,C,R8,LT,=F'20' THEN  if h&gt;9 &amp; h&lt;20 then<br/>         LR     R1,R8                h<br/>         S      R1,D                 -d<br/>         MH     R1,=H'10'<br/>         LA     R4,T(R1)             @t(h-d+1)<br/>         MVC    PG(10),0(R4)         t(h-d+1)<br/>         MVC    PG+10(246),R        \u00a0!!r<br/>         MVC    R,PG                 r=t(h-d+1)!!' '!!r<br/>       ENDIF    ,                  endif<br/>       IF C,R8,GT,=F'19',AND,C,R8,LT,C THEN  if h&gt;19 &amp; h&lt;c then<br/>         LR     R4,R8                h<br/>         SRDA   R4,32<br/>         D      R4,D                 /d<br/>         M      R4,D                 *d<br/>         LR     R1,R8                h<br/>         SR     R1,R5                h-d*(h/d)<br/>         ST     R1,X                 x=h-d*(h/d)<br/>         L      R4,X                 x<br/>       IF LTR,R4,NZ,R4 THEN          if x^=0 then<br/>         MVI    Y,C'-'                 y='-'<br/>       ELSE     ,                    else<br/>         MVI    Y,C' '                 y=' '<br/>       ENDIF    ,                    endif<br/>         LR     R4,R8                h<br/>         SRDA   R4,32<br/>         D      R4,D                 /d<br/>         MH     R5,=H'10'<br/>         LA     R4,U(R5)             @u(h/d+1)<br/>         MVC    PG(10),0(R4)         u(h/d+1)<br/>         MVC    PG+10(1),Y           y<br/>         L      R1,X                 x<br/>         MH     R1,=H'10'<br/>         LA     R4,S(R1)             @s(x+1) <br/>         MVC    PG+11(10),0(R4)      s(x+1)<br/>         MVC    PG+21(235),R        \u00a0!!r<br/>         MVC    R,PG                 r=u(h/d+1)!!y!!s(x+1)!!r<br/>       ENDIF    ,                  endif<br/>         L      R4,A               a<br/>         SRDA   R4,32<br/>         D      R4,K               a/k<br/>         M      R4,K               *k<br/>         L      R8,A               a<br/>         SR     R8,R5              h=a-k*(a/k)<br/>         LR     R4,R8              h<br/>         SRDA   R4,32<br/>         D      R4,C               /c<br/>         LR     R8,R5              h=h/c<br/>       IF LTR,R8,NZ,R8 THEN        if h^=0 then<br/>         LR     R1,R8                h<br/>         MH     R1,=H'10'<br/>         LA     R4,S(R1)             @s(h+1)<br/>         MVC    PG(10),0(R4)         s(h+1)<br/>         MVC    PG+10(10),=CL10' hundred '<br/>         MVC    PG+20(236),R        \u00a0!!r<br/>         MVC    R,PG                 r=s(h+1)!!' hundred '!!r<br/>       ENDIF    ,                  endif<br/>         L      R4,A               a<br/>         SRDA   R4,32<br/>         D      R4,K               /k<br/>         ST     R5,A               a=a/k<br/>         L      R4,A<br/>       IF LTR,R4,P,R4 THEN         if a&gt;0 then<br/>         L      R4,A                 a<br/>         SRDA   R4,32<br/>         D      R4,K                 /k<br/>         M      R4,K                 *k<br/>         L      R8,A                 a<br/>         SR     R8,R5                h=a-k*(a/k)<br/>       IF LTR,R8,NZ,R8 THEN          if h^=0 then<br/>         LR     R1,R7                  j<br/>         MH     R1,=H'10'<br/>         LA     R4,V(R1)               @v(j+1)<br/>         MVC    PG(10),0(R4)           v(j+1)<br/>         MVC    PG+10(246),R          \u00a0!!r<br/>         MVC    R,PG                   r=v(j+1)!!' '!!r<br/>       ENDIF    ,                    endif<br/>       ENDIF    ,                  endif<br/>         LA     R3,1               l=0<br/>         LA     R9,256             jr=256<br/>         LA     R10,R              ir=0<br/>         LA     R11,R-1            irr=-1<br/>LOOP     CLI    0(R10),C' '        if r[ii]=' '  .....+<br/>         BNE    OPT                                   |<br/>         CLI    1(R10),C' '        if r[ii+1]=' '     |<br/>         BE     ITER                                  |<br/>         CLI    1(R10),C'-'        if r[ii+1]='-'     |<br/>         BE     ITER                                  |<br/>OPT      LA     R11,1(R11)         irr=irr+1          |<br/>         MVC    0(1,R11),0(R10)    rr=rr!!ci          |<br/>         LA     R3,1(R3)           l=l+1              |<br/>ITER     LA     R10,1(R10)         ir=ir+1            |<br/>         BCT    R9,LOOP            ...................+<br/>         LA     R1,R-1             @r<br/>         AR     R1,R3              +lr<br/>         MVC    0(80,R1),=CL80' '  clean the end<br/>         L      R4,A               a<br/>       IF LTR,R4,NP,R4 THEN        if a&lt;=0 then<br/>         B      LEAVEJ             leave<br/>       ENDIF    ,                  endif a&lt;=0<br/>         LA     R7,1(R7)           j++<br/>       ENDDO    ,                  enddo j<br/>LEAVEJ   L      R4,N               n<br/>       IF LTR,R4,M,R4 THEN         if n&lt;0 then <br/>         MVC    PG(6),=C'minus '   'minus '<br/>         MVC    PG+6(250),R       \u00a0!!r<br/>         MVC    R,PG               r='minus '!!r<br/>       ENDIF    ,                  endif n&lt;0<br/>       ENDIF    ,                  endif n=0<br/>         MVC    PG,=CL132' '       clear buffer<br/>         L      R1,N               n<br/>         XDECO  R1,PG              edit n<br/>         MVC    PG+13(256),R       r<br/>         XPRNT  PG,132             print buffer<br/>         LA     R6,1(R6)           i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       epilog<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15<br/>         BR     R14                exit<br/>S        DC   CL10' ',CL10'one',CL10'two',CL10'three',CL10'four'<br/>         DC   CL10'five',CL10'six',CL10'seven',CL10'eight',CL10'nine'<br/>T        DC   CL50'ten       eleven    twelve    thirteen  fourteen'<br/>         DC   CL50'fifteen   sixteen   seventeen eighteen  nineteen'<br/>U        DC   CL50'                    twenty    thirty    forty'<br/>         DC   CL50'fifty     sixty     seventy   eighty    ninety'<br/>V        DC   CL50'thousand  million   billion   trillion'<br/>G        DC   F'0',F'2',F'19',F'20',F'21',F'99',F'100',F'101',F'-123'<br/>         DC   F'9123',F'467889',F'1234567',F'2147483647'<br/>NG       EQU    (*-G)/4<br/>N        DS     F<br/>D        DS     F<br/>C        DS     F<br/>K        DS     F<br/>A        DS     F<br/>X        DS     F<br/>Y        DS     CL1<br/>R        DS     CL256<br/>XDEC     DS     CL12<br/>PG       DS     CL256<br/>         YREGS<br/>         END    NUMNAME</pre>"}, {"lang": "Ada", "loc": 132, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Integers_In_English <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Spellable <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> -<span class=\"nu0\">999</span>_999_999_999_999_999..<span class=\"nu0\">999</span>_999_999_999_999_999;<br/>   <span class=\"kw3\">function</span> Spell <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">function</span> Twenty <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">case</span> N <span class=\"kw2\">mod</span> <span class=\"nu0\">20</span> <span class=\"kw1\">is</span><br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">0</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"zero\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">1</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"one\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">2</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"two\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">3</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"three\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">4</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"four\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">5</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"five\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">6</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"six\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">7</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"seven\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">8</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"eight\"</span>;<br/>            <span class=\"kw3\">when</span>  <span class=\"nu0\">9</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"nine\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">10</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"ten\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">11</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"eleven\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">12</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"twelve\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">13</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"thirteen\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">14</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"fourteen\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">15</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"fifteen\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">16</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"sixteen\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">17</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"seventeen\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">18</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"eighteen\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"nineteen\"</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>      <span class=\"kw1\">end</span> Twenty;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Decade <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">case</span> N <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> <span class=\"kw1\">is</span><br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">2</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"twenty\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">3</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"thirty\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">4</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"forty\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">5</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"fifty\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">6</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"sixty\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">7</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"seventy\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">8</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"eighty\"</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; <span class=\"kw1\">return</span> <span class=\"st0\">\"ninety\"</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>      <span class=\"kw1\">end</span> Decade;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Hundred <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> N &lt; <span class=\"nu0\">20</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Twenty <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">elsif</span> <span class=\"nu0\">0</span> = N <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Decade <span class=\"br0\">(</span>N / <span class=\"nu0\">10</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> Decade <span class=\"br0\">(</span>N / <span class=\"nu0\">10</span><span class=\"br0\">)</span> &amp; '-' &amp; Twenty <span class=\"br0\">(</span>N <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> Hundred;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Thousand <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> N &lt; <span class=\"nu0\">100</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Hundred <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">elsif</span> <span class=\"nu0\">0</span> = N <span class=\"kw2\">mod</span> <span class=\"nu0\">100</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Twenty <span class=\"br0\">(</span>N / <span class=\"nu0\">100</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" hundred\"</span>;<br/>         <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> Twenty <span class=\"br0\">(</span>N / <span class=\"nu0\">100</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" hundred and \"</span> &amp; Hundred <span class=\"br0\">(</span>N <span class=\"kw2\">mod</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> Thousand;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Triplet<br/>               <span class=\"br0\">(</span>  N    \u00a0: Spellable;<br/>                  Order\u00a0: Spellable;<br/>                  Name \u00a0: String;<br/>                  Rest \u00a0: <span class=\"kw2\">not</span> <span class=\"kw3\">null</span> <span class=\"kw3\">access</span> <span class=\"kw3\">function</span> <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String<br/>               <span class=\"br0\">)</span>  <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>         High\u00a0: Spellable\u00a0:= N / Order;<br/>         Low \u00a0: Spellable\u00a0:= N <span class=\"kw2\">mod</span> Order;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> High = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Rest <span class=\"br0\">(</span>Low<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">elsif</span> Low = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Thousand <span class=\"br0\">(</span>High<span class=\"br0\">)</span> &amp; ' ' &amp; Name;<br/>         <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> Thousand <span class=\"br0\">(</span>High<span class=\"br0\">)</span> &amp; ' ' &amp; Name &amp; <span class=\"st0\">\", \"</span> &amp; Rest <span class=\"br0\">(</span>Low<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> Triplet;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Million <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> Triplet <span class=\"br0\">(</span>N, <span class=\"nu0\">10</span>**<span class=\"nu0\">3</span>, <span class=\"st0\">\"thousand\"</span>, Thousand'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Million;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Milliard <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> Triplet <span class=\"br0\">(</span>N, <span class=\"nu0\">10</span>**<span class=\"nu0\">6</span>, <span class=\"st0\">\"million\"</span>, Million'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Milliard;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Billion <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> Triplet <span class=\"br0\">(</span>N, <span class=\"nu0\">10</span>**<span class=\"nu0\">9</span>, <span class=\"st0\">\"milliard\"</span>, Milliard'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Billion;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Billiard <span class=\"br0\">(</span>N\u00a0: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> Triplet <span class=\"br0\">(</span>N, <span class=\"nu0\">10</span>**<span class=\"nu0\">12</span>, <span class=\"st0\">\"billion\"</span>, Billion'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Billiard;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"st0\">\"negative \"</span> &amp; Spell<span class=\"br0\">(</span>-N<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> Triplet <span class=\"br0\">(</span>N, <span class=\"nu0\">10</span>**<span class=\"nu0\">15</span>, <span class=\"st0\">\"billiard\"</span>, Billiard'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Spell;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Spell_And_Print<span class=\"br0\">(</span>N: Spellable<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Number: <span class=\"kw3\">constant</span> String\u00a0:= Spellable'Image<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>      Spaces: <span class=\"kw3\">constant</span> String<span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">20</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; ' '<span class=\"br0\">)</span>; <span class=\"co1\">-- 20 * ' '</span><br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Spaces<span class=\"br0\">(</span>Spaces'First .. <span class=\"me1\">Spaces</span>'Last-Number'Length<span class=\"br0\">)</span><br/>                             &amp; Number &amp; ' ' &amp; Spell<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Spell_And_Print;<br/>\u00a0<br/>   Samples: <span class=\"kw3\">constant</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Spellable<br/>    \u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">99</span>, <span class=\"nu0\">300</span>, <span class=\"nu0\">310</span>, <span class=\"nu0\">1</span>_501, <span class=\"nu0\">12</span>_609, <span class=\"nu0\">512</span>_609, <span class=\"nu0\">43</span>_112_609, <span class=\"nu0\">77</span>_000_112_609,<br/>         <span class=\"nu0\">2</span>_000_000_000_100, <span class=\"nu0\">999</span>_999_999_999_999_999,<br/>         <span class=\"nu0\">0</span>, -<span class=\"nu0\">99</span>, -<span class=\"nu0\">1501</span>, -<span class=\"nu0\">77</span>_000_112_609, -<span class=\"nu0\">123</span>_456_789_987_654_321<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Samples'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Spell_And_Print<span class=\"br0\">(</span>Samples<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Integers_In_English;</pre>"}, {"lang": "ALGOL 68", "loc": 38, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> number words <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"coMULTI\"># returns a string representation of n in words. Currently<br/>  deals with anything from 0 to 999 999 999. #</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> digits <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><br/>      <span class=\"br0\">(</span><span class=\"st0\">\"zero\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"one\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"two\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"three\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"four\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"five\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"six\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"seven\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"eight\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"nine\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">@</span>0<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> teens <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><br/>      <span class=\"br0\">(</span><span class=\"st0\">\"ten\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"eleven\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"twelve\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"thirteen\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"fourteen\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"fifteen\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"sixteen\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"seventeen\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"eighteen\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"nineteen\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">@</span>0<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> decades <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><br/>      <span class=\"br0\">(</span><span class=\"st0\">\"twenty\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"thirty\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"forty\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"fifty\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"sixty\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"seventy\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"eighty\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"ninety\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">@</span>2<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">PROC</span> three digits <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>      <span class=\"coMULTI\"># does the conversion for n from 0 to 999. #</span><br/>        <span class=\"kw3\">INT</span> tens <span class=\"sy1\">=</span> n <span class=\"kw12\">MOD</span> 100 <span class=\"kw12\">OVER</span> 10<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> units <span class=\"sy1\">=</span> n <span class=\"kw12\">MOD</span> 10<span class=\"sy1\">;</span><br/>        <span class=\"br0\">(</span>n <span class=\"sy1\">&gt;=</span> 100<span class=\"sy1\">|</span>digits<span class=\"br0\">[</span>n <span class=\"kw12\">OVER</span> 100<span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">+</span> <span class=\"st0\">\"hundred\"</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span>n <span class=\"kw12\">MOD</span> 100 <span class=\"sy1\">/=</span> 0<span class=\"sy1\">|</span><span class=\"st0\">\" and \"</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>        <span class=\"br0\">(</span>tens <span class=\"sy1\">/=</span> 0<span class=\"sy1\">|</span><span class=\"br0\">(</span>tens <span class=\"sy1\">=</span> 1<span class=\"sy1\">|</span>teens<span class=\"br0\">[</span>units<span class=\"br0\">]</span><span class=\"sy1\">|</span>decades<span class=\"br0\">[</span>tens<span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span>units <span class=\"sy1\">/=</span> 0<span class=\"sy1\">|</span><span class=\"st0\">\"-\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>        <span class=\"br0\">(</span>units <span class=\"sy1\">/=</span> 0 <span class=\"kw16\">AND</span> tens <span class=\"sy1\">/=</span> 1 <span class=\"kw16\">OR</span> n <span class=\"sy1\">=</span> 0<span class=\"sy1\">|</span>digits<span class=\"br0\">[</span>units<span class=\"br0\">]</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> m <span class=\"sy1\">=</span> n <span class=\"kw12\">OVER</span> 1 000 000<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> k <span class=\"sy1\">=</span> n <span class=\"kw12\">MOD</span> 1 000 000 <span class=\"kw12\">OVER</span> 1000<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> u <span class=\"sy1\">=</span> n <span class=\"kw12\">MOD</span> 1000<span class=\"sy1\">;</span><br/>    <span class=\"br0\">(</span>m <span class=\"sy1\">/=</span> 0<span class=\"sy1\">|</span>three digits<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\" million\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>    <span class=\"br0\">(</span>m <span class=\"sy1\">/=</span> 0 <span class=\"kw16\">AND</span> <span class=\"br0\">(</span>k <span class=\"sy1\">/=</span> 0 <span class=\"kw16\">OR</span> u <span class=\"sy1\">&gt;=</span> 100<span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"st0\">\", \"</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>    <span class=\"br0\">(</span>k <span class=\"sy1\">/=</span> 0<span class=\"sy1\">|</span>three digits<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\" thousand\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy1\">/=</span> 0 <span class=\"kw16\">OR</span> k <span class=\"sy1\">/=</span> 0<span class=\"br0\">)</span> <span class=\"kw16\">AND</span> u <span class=\"sy1\">&gt;</span> 0 <span class=\"kw16\">AND</span> u <span class=\"sy1\">&lt;</span> 100<span class=\"sy1\">|</span><span class=\"st0\">\" and \"</span> <span class=\"sy1\">|:</span> k <span class=\"sy1\">/=</span> 0 <span class=\"kw16\">AND</span> u <span class=\"sy1\">/=</span> 0<span class=\"sy1\">|</span><span class=\"st0\">\", \"</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>    <span class=\"br0\">(</span>u <span class=\"sy1\">/=</span> 0 <span class=\"kw16\">OR</span> n <span class=\"sy1\">=</span> 0<span class=\"sy1\">|</span>three digits<span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span>stand in<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw2\">GOTO</span> stop iteration<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">on value error</span><span class=\"br0\">(</span>stand in<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw2\">GOTO</span> stop iteration<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">DO</span> <span class=\"coMULTI\"># until user hits EOF #</span><br/>  <span class=\"kw3\">INT</span> n<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"n? \"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  read<span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>number words<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>stop iteration<span class=\"sy1\">:</span><br/>  <span class=\"kw7\">SKIP</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 35, "block": "<pre class=\"text highlighted_source\">10 INPUT \"GIMME A NUMBER! \"; N<br/>20 GOSUB 100\"NUMBER NAME<br/>30 PRINT R$<br/>40 END<br/>\u00a0<br/>100 REMNUMBER NAME<br/>110 IF R$ = \"\" THEN FOR I = 0 TO 10\u00a0: READ S$(I), T$(I), U$(I), V$(I)\u00a0: NEXT<br/>120 IF N = 0 THEN R$ = \"ZERO\"\u00a0: RETURN<br/>130 R$ = \"\"\u00a0: D = 10\u00a0: C = 100\u00a0: M = 1E3<br/>140 A = ABS(N)<br/>150 FOR U = 0 TO D<br/>160     H = A - C * INT(A / C)<br/>170     IF H &gt; 0 AND H &lt; D THEN R$ = S$(H) + \" \" + R$<br/>180     IF H &gt; 9 AND H &lt; 20 THEN R$ = T$(H - D) + \" \" + R$<br/>190     IF H &gt; 19 AND H &lt; C THEN S = H - D * INT(H / D)\u00a0: R$ = U$(INT(H / D)) + MID$(\"-\",1+(S=0),1) + S$(S) +  \" \" + R$<br/>200     H = A - M * INT(A / M)<br/>210     H = INT (H / C)<br/>220     IF H THEN R$ = S$(H) + \" HUNDRED \" + R$<br/>230     A = INT(A / M)<br/>240     IF A &gt; 0 THEN H = A - M * INT(A / M)\u00a0: IF H THEN R$ = V$(U) + \" \" + R$<br/>250     IF A &gt; 0 THEN NEXT U<br/>260 IF N &lt; 0 THEN R$ = \"NEGATIVE \" + R$<br/>270 RETURN<br/>\u00a0<br/>280 DATA \"\", \"TEN\", \"\", \"THOUSAND\"<br/>281 DATA \"ONE\", \"ELEVEN\", \"\", \"MILLION\"<br/>282 DATA \"TWO\", \"TWELVE\", \"TWENTY\", \"BILLION\"<br/>283 DATA \"THREE\", \"THIRTEEN\", \"THIRTY\", \"TRILLION\"<br/>284 DATA \"FOUR\", \"FOURTEEN\", \"FORTY\", \"QUADRILLION\"<br/>285 DATA \"FIVE\", \"FIFTEEN\", \"FIFTY\", \"QUINTILLION\"<br/>286 DATA \"SIX\", \"SIXTEEN\", \"SIXTY\", \"SEXTILLION\"<br/>287 DATA \"SEVEN\", \"SEVENTEEN\", \"SEVENTY\", \"SEPTILLION\"<br/>288 DATA \"EIGHT\", \"EIGHTEEN\", \"EIGHTY\", \"OCTILLION\"<br/>289 DATA \"NINE\", \"NINETEEN\", \"NINETY\", \"NONILLION\"<br/>290 DATA \"\", \"\", \"\", \"DECILLION\"</pre>"}, {"lang": "AutoHotkey", "loc": 40, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"br0\">{</span>                                 <span class=\"co1\">; TEST LOOP </span><br/>    n <span class=\"sy0\">=</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> Digits<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span>               <span class=\"co1\">; random number with up to 36 digits </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%Digits%</span> <span class=\"br0\">{</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> Digit<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span>             <span class=\"co1\">; can have leading 0s </span><br/>        n <span class=\"sy0\">.=</span> Digit <br/>    <span class=\"br0\">}</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> Number Names<span class=\"sy0\">,</span>\u00a0% PrettyNumber<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"st0\">\"`n`n\"</span> Spell<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"st0\">\"`n`n\"</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/IfMsgBox.htm\"><span class=\"kw3\">IfMsgBox</span></a> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Cancel\"><span class=\"kw7\">Cancel</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a> <br/><span class=\"br0\">}</span> <br/>\u00a0<br/>Spell<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; recursive function to spell out the name of a max 36 digit integer, after leading 0s removed </span><br/>    Static p1<span class=\"sy0\">=</span><span class=\"st0\">\" thousand \"</span><span class=\"sy0\">,</span>p2<span class=\"sy0\">=</span><span class=\"st0\">\" million \"</span><span class=\"sy0\">,</span>p3<span class=\"sy0\">=</span><span class=\"st0\">\" billion \"</span><span class=\"sy0\">,</span>p4<span class=\"sy0\">=</span><span class=\"st0\">\" trillion \"</span><span class=\"sy0\">,</span>p5<span class=\"sy0\">=</span><span class=\"st0\">\" quadrillion \"</span><span class=\"sy0\">,</span>p6<span class=\"sy0\">=</span><span class=\"st0\">\" quintillion \"</span> <br/>         <span class=\"sy0\">,</span> p7<span class=\"sy0\">=</span><span class=\"st0\">\" sextillion \"</span><span class=\"sy0\">,</span>p8<span class=\"sy0\">=</span><span class=\"st0\">\" septillion \"</span><span class=\"sy0\">,</span>p9<span class=\"sy0\">=</span><span class=\"st0\">\" octillion \"</span><span class=\"sy0\">,</span>p10<span class=\"sy0\">=</span><span class=\"st0\">\" nonillion \"</span><span class=\"sy0\">,</span>p11<span class=\"sy0\">=</span><span class=\"st0\">\" decillion \"</span> <br/>         <span class=\"sy0\">,</span> t2<span class=\"sy0\">=</span><span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span>t3<span class=\"sy0\">=</span><span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span>t4<span class=\"sy0\">=</span><span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span>t5<span class=\"sy0\">=</span><span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span>t6<span class=\"sy0\">=</span><span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span>t7<span class=\"sy0\">=</span><span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span>t8<span class=\"sy0\">=</span><span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span>t9<span class=\"sy0\">=</span><span class=\"st0\">\"ninety\"</span> <br/>         <span class=\"sy0\">,</span> o0<span class=\"sy0\">=</span><span class=\"st0\">\"zero\"</span><span class=\"sy0\">,</span>o1<span class=\"sy0\">=</span><span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span>o2<span class=\"sy0\">=</span><span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span>o3<span class=\"sy0\">=</span><span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span>o4<span class=\"sy0\">=</span><span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span>o5<span class=\"sy0\">=</span><span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span>o6<span class=\"sy0\">=</span><span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span>o7<span class=\"sy0\">=</span><span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span>o8<span class=\"sy0\">=</span><span class=\"st0\">\"eight\"</span> <br/>         <span class=\"sy0\">,</span> o9<span class=\"sy0\">=</span><span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span>o10<span class=\"sy0\">=</span><span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span>o11<span class=\"sy0\">=</span><span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span>o12<span class=\"sy0\">=</span><span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span>o13<span class=\"sy0\">=</span><span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span>o14<span class=\"sy0\">=</span><span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span>o15<span class=\"sy0\">=</span><span class=\"st0\">\"fifteen\"</span> <br/>         <span class=\"sy0\">,</span> o16<span class=\"sy0\">=</span><span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span>o17<span class=\"sy0\">=</span><span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span>o18<span class=\"sy0\">=</span><span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span>o19<span class=\"sy0\">=</span><span class=\"st0\">\"nineteen\"</span> <br/>\u00a0<br/>    n <span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">\"^0+(\\d)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"$1\"</span><span class=\"br0\">)</span> <span class=\"co1\">; remove leading 0s from n </span><br/>\u00a0<br/>    <span class=\"kw1\">If</span>  <span class=\"br0\">(</span><span class=\"nu0\">11</span> <span class=\"sy0\">&lt;</span> d <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>   <span class=\"co1\">; #of digit groups of 3 </span><br/>        <span class=\"kw1\">Return</span> <span class=\"st0\">\"Number too big\"</span> <br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>d<span class=\"br0\">)</span>                             <span class=\"co1\">; more than 3 digits </span><br/>        <span class=\"kw1\">Return</span> Spell<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> p<span class=\"re0\">%d%</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\", \"</span> Spell<span class=\"br0\">(</span>s<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>\u00a0<br/>    i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span>                        <span class=\"co1\">; 3 digits </span><br/>        <span class=\"kw1\">Return</span> o<span class=\"re0\">%i%</span> <span class=\"st0\">\" hundred\"</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\" and \"</span> Spell<span class=\"br0\">(</span>s<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span>                        <span class=\"co1\">; n = 20..99 </span><br/>        <span class=\"kw1\">Return</span> t<span class=\"re0\">%i%</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>o<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"-\"</span> o<span class=\"re0\">%o%</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>\u00a0<br/>    <span class=\"kw1\">Return</span> o<span class=\"re0\">%n%</span>                        <span class=\"co1\">; n = 0..19 </span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>PrettyNumber<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; inserts thousands separators into a number string </span><br/>    <span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">\"^0+(\\d)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"$1\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\\G\\d+?(?=(\\d{3})+(?:\\D|$))\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$0,\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 53, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f NUMBER_NAMES.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    init_numtowords<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"-10 0 .1 8 100 123 1001 99999 100000 9123456789 111000000111\"</span>,arr,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s =\u00a0%s<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,numtowords<span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># source: The AWK Programming Language, page 75</span><br/><span class=\"kw6\">function</span> numtowords<span class=\"br0\">(</span>n,  minus,str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      n = n <span class=\"sy3\">*</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>      minus = <span class=\"st0\">\"minus \"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      str = <span class=\"st0\">\"zero\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      str = intowords<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span>  <span class=\"sy3\">/</span>,<span class=\"st0\">\" \"</span>,str<span class=\"br0\">)</span><br/>    <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span> $<span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,str<span class=\"br0\">)</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>minus str<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> intowords<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw4\">int</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">1000000000000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">/</span><span class=\"nu0\">1000000000000</span><span class=\"br0\">)</span> <span class=\"st0\">\" trillion \"</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">%</span>1000000000000<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">1000000000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">/</span><span class=\"nu0\">1000000000</span><span class=\"br0\">)</span> <span class=\"st0\">\" billion \"</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">%</span>1000000000<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">/</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"st0\">\" million \"</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">%</span>1000000<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">/</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"st0\">\" thousand \"</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">%</span>1000<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">/</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"st0\">\" hundred \"</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">%</span>100<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span> tens<span class=\"br0\">[</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>n<span class=\"sy3\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span> intowords<span class=\"br0\">(</span>n<span class=\"sy3\">%</span>10<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>nums<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> init_numtowords<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\"</span>,nums,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"ten twenty thirty forty fifty sixty seventy eighty ninety\"</span>,tens,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 73, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> int2Text$ <span class=\"br0\">(</span>number <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">'small</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ten\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen\"</span><br/><span class=\"co1\">'tens</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span><br/><span class=\"co1\">'big</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"thousand\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"million\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"billion\"</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckshared.shtml\"><span class=\"kw3\">SHARED</span></a> small<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> tens<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> big<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> tmpInt <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/><span class=\"kw1\">FOR</span> tmpInt <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">19</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckread.shtml\"><span class=\"kw3\">READ</span></a> small<span class=\"br0\">(</span>tmpInt<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">FOR</span> tmpInt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckread.shtml\"><span class=\"kw3\">READ</span></a> tens<span class=\"br0\">(</span>tmpInt<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">FOR</span> tmpInt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckread.shtml\"><span class=\"kw3\">READ</span></a> big<span class=\"br0\">(</span>tmpInt<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"Gimme a number! \"</span><span class=\"sy0\">,</span> n<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> int2Text$<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> int2Text$ <span class=\"br0\">(</span>number <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> num <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> outP <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> unit <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> tmpLng1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> number <span class=\"kw1\">THEN</span><br/>        int2Text$ <span class=\"sy0\">=</span> <span class=\"st0\">\"zero\"</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">FUNCTION</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\u00a0<br/>    num <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckabs.shtml\"><span class=\"kw3\">ABS</span></a><span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">DO</span><br/>        tmpLng1 <span class=\"sy0\">=</span> num <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">100</span><br/>        <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span> tmpLng1<br/>            <span class=\"kw1\">CASE</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">19</span><br/>                outP <span class=\"sy0\">=</span> small<span class=\"br0\">(</span>tmpLng1<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> outP<br/>            <span class=\"kw1\">CASE</span> <span class=\"nu0\">20</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">99</span><br/>                <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span> tmpLng1 <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">10</span><br/>                    <span class=\"kw1\">CASE</span> <span class=\"nu0\">0</span><br/>                        outP <span class=\"sy0\">=</span> tens<span class=\"br0\">(</span><span class=\"br0\">(</span>tmpLng1 \\ <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> outP<br/>                    <span class=\"kw1\">CASE</span> <span class=\"kw1\">ELSE</span><br/>                        outP <span class=\"sy0\">=</span> tens<span class=\"br0\">(</span><span class=\"br0\">(</span>tmpLng1 \\ <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"-\"</span> <span class=\"sy0\">+</span> small<span class=\"br0\">(</span>tmpLng1 <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> outP<br/>                <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SELECT</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SELECT</span><br/>\u00a0<br/>        tmpLng1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>num <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">100</span><br/>        <span class=\"kw1\">IF</span> tmpLng1 <span class=\"kw1\">THEN</span><br/>            outP <span class=\"sy0\">=</span> small<span class=\"br0\">(</span>tmpLng1<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" hundred \"</span> <span class=\"sy0\">+</span> outP<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\u00a0<br/>        num <span class=\"sy0\">=</span> num \\ <span class=\"nu0\">1000</span><br/>        <span class=\"kw1\">IF</span> num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">DO</span><br/>\u00a0<br/>        tmpLng1 <span class=\"sy0\">=</span> num <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">1000</span><br/>        <span class=\"kw1\">IF</span> tmpLng1 <span class=\"kw1\">THEN</span> outP <span class=\"sy0\">=</span> big<span class=\"br0\">(</span>unit<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> outP<br/>\u00a0<br/>        unit <span class=\"sy0\">=</span> unit <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">LOOP</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> outP <span class=\"sy0\">=</span> <span class=\"st0\">\"negative \"</span> <span class=\"sy0\">+</span> outP<br/>\u00a0<br/>    int2Text$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckrtrim%24.shtml\"><span class=\"kw3\">RTRIM$</span></a><span class=\"br0\">(</span>outP<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 76, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">::Number Names Task from Rosetta Code Wiki</span><br/><span class=\"co2\">::Batch File Implementation</span><br/>\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">~1</span>\"==\"iterate\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> num_name<br/><span class=\"co2\"><br/>::Define the words</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"small=One Two Three Four Five Six Seven Eight Nine Ten\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"small=<span class=\"sy0\">%</span><span class=\"re3\">small</span><span class=\"sy0\">%</span> Eleven Twelve Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"decade=Twenty Thirty Forty Fifty Sixty Seventy Eighty Ninety\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"big=Thousand Million Billion\"<br/><span class=\"co2\"><br/>::Seperating each word...</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">X</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">small</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"cnt+=1\"<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> small<span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">X</span><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">Y</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">decade</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> decade<span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">Y</span><span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"cnt+=1\"<span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">Z</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">big</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> big<span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">Z</span><span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"cnt+=1\"<span class=\"sy0\">)</span><br/><span class=\"co2\"><br/>::The Main Thing</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%</span><span class=\"sy0\">%</span>. <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>42,27,1090,230000,1001100,-40309,0,123456789<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> input=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>.<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"sy0\">%</span>. <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 0 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a input*=-1<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">input</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> TotalOut=Zero<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">num_word</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span>.<br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">TotalOut</span><span class=\"sy0\">!</span>\"<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\">::/The Main Thing</span><br/><span class=\"co2\"><br/>::The Procedure</span><br/>:<span class=\"re0\">num_word</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outP=<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> unit=0<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> num=<span class=\"sy0\">!</span><span class=\"re2\">input</span><span class=\"sy0\">!</span><br/>:<span class=\"re0\">num_loop</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmpLng1 = num <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 100<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmpLng2 = tmpLng1 <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 10<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmpNum1 = tmpLng1/10 - 2<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tmpLng1</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/geq.html\"><span class=\"kw2\">geq</span></a> 1 <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tmpLng1</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/leq.html\"><span class=\"kw2\">leq</span></a> 19 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outP=<span class=\"sy0\">!</span><span class=\"re2\">small%<span class=\"re3\">tmpLng1</span>%</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">outP</span><span class=\"sy0\">!</span>\"<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tmpLng1</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/geq.html\"><span class=\"kw2\">geq</span></a> 20 <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tmpLng1</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/leq.html\"><span class=\"kw2\">leq</span></a> 99 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tmpLng2</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outP=<span class=\"sy0\">!</span><span class=\"re2\">decade%<span class=\"re3\">tmpNum1</span>%</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">outP</span><span class=\"sy0\">!</span>\"<br/>\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outP=<span class=\"sy0\">!</span><span class=\"re2\">decade%<span class=\"re3\">tmpNum1</span>%</span><span class=\"sy0\">!</span><span class=\"re2\">-</span><span class=\"sy0\">!</span><span class=\"re2\">small%<span class=\"re3\">tmpLng2</span>%</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">outP</span><span class=\"sy0\">!</span>\"<br/>\t<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmpLng1 = <span class=\"sy0\">(</span>num <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 1000<span class=\"sy0\">)</span>/100<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tmpLng1</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outP=<span class=\"sy0\">!</span><span class=\"re2\">small%<span class=\"re3\">tmpLng1</span>%</span><span class=\"sy0\">!</span><span class=\"re2\"> Hundred </span><span class=\"sy0\">!</span><span class=\"re2\">outP</span><span class=\"sy0\">!</span>\"<br/><span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a num/=1000<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">num</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 1 <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">break_loop</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmpLng1 = num <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 1000<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tmpLng1</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outP=<span class=\"sy0\">!</span><span class=\"re2\">big%<span class=\"re3\">unit</span>%</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">outP</span><span class=\"sy0\">!</span>\"<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a unit+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">num_loop</span><br/>\u00a0<br/>:<span class=\"re0\">break_loop</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"TotalOut=<span class=\"sy0\">!</span><span class=\"re2\">outP</span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 0 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"TotalOut=Negative <span class=\"sy0\">!</span><span class=\"re2\">outP</span><span class=\"sy0\">!</span>\"<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> TotalOut=<span class=\"sy0\">%</span><span class=\"re3\">TotalOut:~0,-1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "BBC BASIC", "loc": 40, "block": "<pre class=\"text highlighted_source\">      DIM test%(20)<br/>      test%() = 0, 1, 2, 19, 20, 21, 99, 100, 101, 300, 310, 1001, -1327, 1501, \\<br/>      \\         10203, 12609, 101104, 102003, 467889, 1005006, -123000789<br/>      FOR i% = 0 TO DIM(test%(),1)<br/>        PRINT FNsaynumber(test%(i%))<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNsaynumber(n%)<br/>      LOCAL number%(), number$(), i%, t%, a$<br/>      DIM number%(29), number$(29)<br/>      number%() = 1000000000, 1000000, 1000, 100, 90, 80, 70, 60, 50, 40, 30, 20, \\<br/>      \\           19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2<br/>      number$() = \"billion\", \"million\", \"thousand\", \"hundred\", \"ninety\", \"eighty\", \\<br/>      \\           \"seventy\", \"sixty\", \"fifty\", \"forty\", \"thirty\", \"twenty\", \\<br/>      \\           \"nineteen\", \"eighteen\", \"seventeen\", \"sixteen\", \"fifteen\", \\<br/>      \\           \"fourteen\", \"thirteen\", \"twelve\", \"eleven\", \"ten\", \"nine\", \\<br/>      \\           \"eight\", \"seven\", \"six\", \"five\", \"four\", \"three\", \"two\"<br/>\u00a0<br/>      IF n% &lt; 0 THEN = \"minus \" + FNsaynumber(-n%)<br/>      IF n% = 0 THEN = \"zero\"<br/>      IF n% = 1 THEN = \"one \"<br/>\u00a0<br/>      FOR i% = 0 TO DIM(number%(),1)<br/>        IF n% &gt;= number%(i%) THEN<br/>          t% = n% DIV number%(i%)<br/>          IF t%=1 AND i%&lt;4 a$ += \"one \" ELSE IF t%&lt;&gt;1 a$ += FNsaynumber(t%)<br/>          a$ += number$(i%)<br/>          t% = n% MOD number%(i%)<br/>          CASE TRUE OF<br/>            WHEN i%&gt;3 AND i%&lt;12 AND t%&lt;&gt;0: a$ += \"-\"<br/>            WHEN i%&lt;=3 AND t%&gt;=100: a$ += \", \"<br/>            WHEN i%&lt;=3 AND t%&lt;&gt;0 AND t%&lt;100: a$ += \" and \"<br/>            OTHERWISE: a$ += \" \"<br/>          ENDCASE<br/>          IF t% a$ += FNsaynumber(t%) ELSE IF i%&lt;12 a$ += \" \"<br/>          EXIT FOR<br/>        ENDIF<br/>      NEXT i%<br/>      = a$</pre>"}, {"lang": "BlitzMax", "loc": 81, "block": "<pre class=\"text highlighted_source\">SuperStrict<br/>\u00a0<br/>Framework BRL.StandardIO<br/>\u00a0<br/>spellIt(        99)<br/>spellIt(       300)<br/>spellIt(       310)<br/>spellIt(      1501)<br/>spellIt(     12609)<br/>spellIt(    512609)<br/>spellIt(  43112609)<br/>spellIt(1234567890)<br/>\u00a0<br/>\u00a0<br/>Type TSpell<br/>\u00a0<br/>\tField smallNumbers:String[] = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", ..<br/>\t\t\"six\", \"seven\", \"eight\", \"nine\", \"ten\", ..<br/>\t\t\"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", ..<br/>\t\t\"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\" ]<br/>\u00a0<br/>\tField decades:String[] = [ \"\", \"\", \"twenty\", \"thirty\", \"forty\", ..<br/>\t\t\"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\" ]<br/>\u00a0<br/>\tField thousandPowers:String[] = [ \" billion\", \" million\",  \" thousand\", \"\" ]<br/>\u00a0<br/>\tMethod spellHundreds:String(number:Int)<br/>\t\tLocal result:String<br/>\t\tIf number &gt; 99 Then<br/>\t\t\tresult = smallNumbers[number / 100]<br/>\t\t\tresult\u00a0:+ \" hundred\"<br/>\t\t\tnumber = number Mod 100<br/>\t\t\tIf number Then<br/>\t\t\t\tresult\u00a0:+ \" and \"<br/>\t\t\tEnd If<br/>\t\tEnd If<br/>\u00a0<br/>\t\tIf number &gt;= 20 Then<br/>\t\t\tresult\u00a0:+ decades[number / 10]<br/>\t\t\tnumber = number Mod 10<br/>\t\t\tIf number Then<br/>\t\t\t\tresult\u00a0:+ \"-\"<br/>\t\t\tEnd If<br/>\t\tEnd If<br/>\t\tIf number &gt; 0 And number &lt; 20 Then<br/>\t\t\tresult\u00a0:+ smallNumbers[number]<br/>\t\tEnd If<br/>\u00a0<br/>\t\tReturn result<br/>\tEnd Method<br/>\u00a0<br/>\tMethod spell:String(number:Long)<br/>\t\tIf number &lt; 20 Then<br/>\t\t\tReturn smallNumbers[number]<br/>\t\tEnd If<br/>\t\tLocal result:String<br/>\u00a0<br/>\t\tLocal scaleIndex:Int = 0<br/>\t\tLocal scaleFactor:Long = 1000000000:Long ' 1 billion<br/>\t\tWhile scaleFactor &gt; 0<br/>\t\t\tIf number &gt;= scaleFactor<br/>\t\t\t\tLocal h:Long = number / scaleFactor<br/>\t\t\t\tresult\u00a0:+ spellHundreds(h) + thousandPowers[scaleIndex]<br/>\t\t\t\tnumber = number Mod scaleFactor<br/>\t\t\t\tIf number Then<br/>\t\t\t\t\tresult\u00a0:+ \", \"<br/>\t\t\t\tEnd If<br/>\t\t\tEnd If<br/>\t\t\tscaleFactor\u00a0:/ 1000<br/>\t\t\tscaleIndex\u00a0:+ 1<br/>\t\tWend<br/>\u00a0<br/>\t\tReturn result<br/>\tEnd Method<br/>\u00a0<br/>End Type<br/>\u00a0<br/>Function spellIt(number:Long)<br/>\tLocal numberSpell:TSpell = New TSpell<br/>\tPrint number + \" \" + numberSpell.spell(number)<br/>End Function</pre>"}, {"lang": "C", "loc": 137, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ones<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span> <br/>\t<span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>tens<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>llions<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thousand\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"million\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"billion\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"trillion\"</span><span class=\"sy0\">,</span><br/><span class=\"co1\">//\t\"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\",</span><br/><span class=\"co1\">//\t\"octillion\", \"nonillion\", \"decillion\"</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> maxillion <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>llions<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>llions<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> say_hundred<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> depth<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> has_lead<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> c<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">+</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> c<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>len <span class=\"sy0\">+</span> i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> c<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s hundred\"</span><span class=\"sy0\">,</span> ones<span class=\"br0\">[</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\thas_lead <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>has_lead <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>depth <span class=\"sy0\">||</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"and \"</span> <span class=\"sy0\">:</span><br/>\t\t\tc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> ones<span class=\"br0\">[</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> tens<span class=\"br0\">[</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> ones<span class=\"br0\">[</span>c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> say_maxillion<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> depth<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> has_lead<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> len <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> len <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tn<span class=\"sy0\">--;</span><br/>\t\tr <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>e <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>say_hundred<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> has_lead<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\thas_lead <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%s\"</span><span class=\"sy0\">,</span> llions<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>depth<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\ts <span class=\"sy0\">=</span> e<span class=\"sy0\">;</span> e <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> n<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> say_number<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> len<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> got_sign <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> s<span class=\"sy0\">++;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">&lt;</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">||</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">&gt;</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span> got_sign <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span> got_sign <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">goto</span> nan<span class=\"sy0\">;</span><br/>\t\ts<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>\t\tgot_sign <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ts<span class=\"sy0\">++;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"zero<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tlen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>len<span class=\"br0\">)</span> <span class=\"kw1\">goto</span> nan<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">||</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"(not a number)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>got_sign <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"minus \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> len <span class=\"sy0\">/</span> maxillion<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> len <span class=\"sy0\">%</span> maxillion<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tr <span class=\"sy0\">=</span> maxillion<span class=\"sy0\">;</span><br/>\t\tn<span class=\"sy0\">--;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>end <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> len <span class=\"sy0\">-</span> n <span class=\"sy0\">*</span> maxillion<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> has_lead <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>has_lead <span class=\"sy0\">=</span> say_maxillion<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> has_lead<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%s\"</span><span class=\"sy0\">,</span> llions<span class=\"br0\">[</span>maxillion <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tn<span class=\"sy0\">--;</span><br/>\t\tr <span class=\"sy0\">=</span> maxillion<span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> end<span class=\"sy0\">;</span><br/>\t\tend <span class=\"sy0\">+=</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>nan<span class=\"sy0\">:</span>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"not a number<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tsay_number<span class=\"br0\">(</span><span class=\"st0\">\"-42\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsay_number<span class=\"br0\">(</span><span class=\"st0\">\"1984\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsay_number<span class=\"br0\">(</span><span class=\"st0\">\"10000\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsay_number<span class=\"br0\">(</span><span class=\"st0\">\"1024\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsay_number<span class=\"br0\">(</span><span class=\"st0\">\"1001001001001\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsay_number<span class=\"br0\">(</span><span class=\"st0\">\"123456789012345678901234567890123456789012345678900000001\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 69, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> smallNumbers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"st0\">\"zero\"</span>, <span class=\"st0\">\"one\"</span>, <span class=\"st0\">\"two\"</span>, <span class=\"st0\">\"three\"</span>, <span class=\"st0\">\"four\"</span>, <span class=\"st0\">\"five\"</span>,<br/>  <span class=\"st0\">\"six\"</span>, <span class=\"st0\">\"seven\"</span>, <span class=\"st0\">\"eight\"</span>, <span class=\"st0\">\"nine\"</span>, <span class=\"st0\">\"ten\"</span>,<br/>  <span class=\"st0\">\"eleven\"</span>, <span class=\"st0\">\"twelve\"</span>, <span class=\"st0\">\"thirteen\"</span>, <span class=\"st0\">\"fourteen\"</span>, <span class=\"st0\">\"fifteen\"</span>,<br/>  <span class=\"st0\">\"sixteen\"</span>, <span class=\"st0\">\"seventeen\"</span>, <span class=\"st0\">\"eighteen\"</span>, <span class=\"st0\">\"nineteen\"</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>string spellHundreds<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  string res<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    res <span class=\"sy1\">=</span> smallNumbers<span class=\"br0\">[</span>n<span class=\"sy2\">/</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    res <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\" hundred\"</span><span class=\"sy4\">;</span><br/>    n <span class=\"sy2\">%</span><span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> res <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\" and \"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> Decades<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>      <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"twenty\"</span>, <span class=\"st0\">\"thirty\"</span>, <span class=\"st0\">\"forty\"</span>,<br/>      <span class=\"st0\">\"fifty\"</span>, <span class=\"st0\">\"sixty\"</span>, <span class=\"st0\">\"seventy\"</span>, <span class=\"st0\">\"eighty\"</span>, <span class=\"st0\">\"ninety\"</span><br/>    <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    res <span class=\"sy2\">+</span><span class=\"sy1\">=</span> Decades<span class=\"br0\">[</span>n<span class=\"sy2\">/</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    n <span class=\"sy2\">%</span><span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> res <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\"-\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">20</span> <span class=\"sy3\">&amp;&amp;</span> n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    res <span class=\"sy2\">+</span><span class=\"sy1\">=</span> smallNumbers<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> res<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> thousandPowers<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"st0\">\" billion\"</span>, <span class=\"st0\">\" million\"</span>,  <span class=\"st0\">\" thousand\"</span>, <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> Spellable<span class=\"sy4\">;</span><br/>\u00a0<br/>string spell<span class=\"br0\">(</span>Spellable n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> smallNumbers<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  string res<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">**</span> pScaleName <span class=\"sy1\">=</span> thousandPowers<span class=\"sy4\">;</span><br/>  Spellable scaleFactor <span class=\"sy1\">=</span> <span class=\"nu0\">1000000000</span><span class=\"sy4\">;</span>\t<span class=\"co1\">// 1 billion</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>scaleFactor <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&gt;=</span> scaleFactor<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Spellable h <span class=\"sy1\">=</span> n <span class=\"sy2\">/</span> scaleFactor<span class=\"sy4\">;</span><br/>      res <span class=\"sy2\">+</span><span class=\"sy1\">=</span> spellHundreds<span class=\"br0\">(</span>h<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"sy2\">*</span>pScaleName<span class=\"sy4\">;</span><br/>      n <span class=\"sy2\">%</span><span class=\"sy1\">=</span> scaleFactor<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> res <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    scaleFactor <span class=\"sy2\">/</span><span class=\"sy1\">=</span> <span class=\"nu0\">1000</span><span class=\"sy4\">;</span><br/>    <span class=\"sy2\">++</span>pScaleName<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> res<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co2\">#define SPELL_IT(x) std::cout &lt;&lt; #x \" \" &lt;&lt; spell(x) &lt;&lt; std::endl;</span><br/>  SPELL_IT<span class=\"br0\">(</span>      <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  SPELL_IT<span class=\"br0\">(</span>     <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  SPELL_IT<span class=\"br0\">(</span>     <span class=\"nu0\">310</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  SPELL_IT<span class=\"br0\">(</span>    <span class=\"nu0\">1501</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  SPELL_IT<span class=\"br0\">(</span>   <span class=\"nu0\">12609</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  SPELL_IT<span class=\"br0\">(</span>  <span class=\"nu0\">512609</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  SPELL_IT<span class=\"br0\">(</span><span class=\"nu0\">43112609</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  SPELL_IT<span class=\"br0\">(</span><span class=\"nu0\">1234567890</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 79, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> NumberNamer <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> incrementsOfOne <span class=\"sy0\">=</span><br/>            <span class=\"br0\">{</span> <span class=\"st0\">\"zero\"</span>,    <span class=\"st0\">\"one\"</span>,     <span class=\"st0\">\"two\"</span>,       <span class=\"st0\">\"three\"</span>,    <span class=\"st0\">\"four\"</span>,<br/>              <span class=\"st0\">\"five\"</span>,    <span class=\"st0\">\"six\"</span>,     <span class=\"st0\">\"seven\"</span>,     <span class=\"st0\">\"eight\"</span>,    <span class=\"st0\">\"nine\"</span>,<br/>              <span class=\"st0\">\"ten\"</span>,     <span class=\"st0\">\"eleven\"</span>,  <span class=\"st0\">\"twelve\"</span>,    <span class=\"st0\">\"thirteen\"</span>, <span class=\"st0\">\"fourteen\"</span>,<br/>              <span class=\"st0\">\"fifteen\"</span>, <span class=\"st0\">\"sixteen\"</span>, <span class=\"st0\">\"seventeen\"</span>, <span class=\"st0\">\"eighteen\"</span>, <span class=\"st0\">\"nineteen\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> incrementsOfTen <span class=\"sy0\">=</span><br/>            <span class=\"br0\">{</span> <span class=\"st0\">\"\"</span>,      <span class=\"st0\">\"\"</span>,      <span class=\"st0\">\"twenty\"</span>,  <span class=\"st0\">\"thirty\"</span>, <span class=\"st0\">\"fourty\"</span>,<br/>              <span class=\"st0\">\"fifty\"</span>, <span class=\"st0\">\"sixty\"</span>, <span class=\"st0\">\"seventy\"</span>, <span class=\"st0\">\"eighty\"</span>, <span class=\"st0\">\"ninety\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> millionName <span class=\"sy0\">=</span> <span class=\"st0\">\"million\"</span>,<br/>                 thousandName <span class=\"sy0\">=</span> <span class=\"st0\">\"thousand\"</span>,<br/>                 hundredName <span class=\"sy0\">=</span> <span class=\"st0\">\"hundred\"</span>,<br/>                 andName <span class=\"sy0\">=</span> <span class=\"st0\">\"and\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> GetName<span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> output <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            output <span class=\"sy0\">+=</span> ParseTriplet<span class=\"br0\">(</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> millionName<span class=\"sy0\">;</span><br/>            i <span class=\"sy0\">%=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> output<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1000</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> output<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                output <span class=\"sy0\">+=</span> <span class=\"st0\">\", \"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            output <span class=\"sy0\">+=</span> ParseTriplet<span class=\"br0\">(</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> thousandName<span class=\"sy0\">;</span><br/>            i <span class=\"sy0\">%=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> output<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> output<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            output <span class=\"sy0\">+=</span> <span class=\"st0\">\", \"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        output <span class=\"sy0\">+=</span> ParseTriplet<span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> output<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> ParseTriplet<span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> output <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            output <span class=\"sy0\">+=</span> incrementsOfOne<span class=\"br0\">[</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> hundredName<span class=\"sy0\">;</span><br/>            i <span class=\"sy0\">%=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> output<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> output<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            output <span class=\"sy0\">+=</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> andName <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">20</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            output <span class=\"sy0\">+=</span> incrementsOfTen<span class=\"br0\">[</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            i <span class=\"sy0\">%=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> output<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> output<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            output <span class=\"sy0\">+=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        output <span class=\"sy0\">+=</span> incrementsOfOne<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> output<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span> <span class=\"co1\">// Test class</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> NumberNamer<span class=\"sy0\">.</span><span class=\"me1\">GetName</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> NumberNamer<span class=\"sy0\">.</span><span class=\"me1\">GetName</span><span class=\"br0\">(</span> <span class=\"nu0\">234</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> NumberNamer<span class=\"sy0\">.</span><span class=\"me1\">GetName</span><span class=\"br0\">(</span> <span class=\"nu0\">31337</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> NumberNamer<span class=\"sy0\">.</span><span class=\"me1\">GetName</span><span class=\"br0\">(</span> <span class=\"nu0\">987654321</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>pprint<span class=\"sy0\">/</span>cl<span class=\"sy0\">-</span><span class=\"kw1\">format</span> nil <span class=\"st0\">\"~R\"</span> <span class=\"nu0\">1234</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"one thousand, two hundred thirty-four\"</span></pre>"}, {"lang": "CoffeeScript", "loc": 59, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>spell_integer = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  tens = <span class=\"br0\">[</span><span class=\"kw4\">null</span><span class=\"sy0\">,</span> <span class=\"kw4\">null</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>  small = <span class=\"br0\">[</span><span class=\"st0\">\"zero\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span><br/>       <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span><br/>       <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span><br/>       <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>  bl = <span class=\"br0\">[</span><span class=\"kw4\">null</span><span class=\"sy0\">,</span> <span class=\"kw4\">null</span><span class=\"sy0\">,</span> <span class=\"st0\">\"m\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tr\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quadr\"</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"quint\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sept\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"oct\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"non\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"dec\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>  divmod = <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">[</span>Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> d<span class=\"br0\">)</span><span class=\"sy0\">,</span> n <span class=\"sy0\">%</span> d<span class=\"br0\">]</span><br/>\u00a0<br/>  nonzero = <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> n == <span class=\"nu0\">0</span> <br/>      <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">else</span><br/>      c <span class=\"sy0\">+</span> spell_integer n<br/>\u00a0<br/>  big = <span class=\"br0\">(</span>e<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> e == <span class=\"nu0\">0</span><br/>      spell_integer n<br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> e == <span class=\"nu0\">1</span><br/>      spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" thousand\"</span><br/>    <span class=\"kw1\">else</span><br/>      spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> bl<span class=\"br0\">[</span>e<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"illion\"</span><br/>\u00a0<br/>  base1000_rev = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"co1\"># generates the value of the digits of n in base 1000</span><br/>    <span class=\"co1\"># (i.e. 3-digit chunks), in reverse.</span><br/>    chunks = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><br/>      <span class=\"br0\">[</span>n<span class=\"sy0\">,</span> r<span class=\"br0\">]</span> = divmod n<span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><br/>      chunks.<span class=\"me1\">push</span> r<br/>    chunks<br/>\u00a0<br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">throw</span> Error <span class=\"st0\">\"spell_integer: negative input\"</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><br/>    small<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><br/>    <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span> = divmod n<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/>    tens<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">+</span> nonzero<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><br/>    <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span> = divmod n<span class=\"sy0\">,</span> <span class=\"nu0\">100</span><br/>    small<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" hundred\"</span> <span class=\"sy0\">+</span> nonzero<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    chunks = <span class=\"br0\">(</span>big<span class=\"br0\">(</span>exp<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span> exp <span class=\"kw1\">in</span> base1000_rev<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">when</span> x<span class=\"br0\">)</span><br/>    chunks.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span> <span class=\"st0\">', '</span><br/>\u00a0<br/><span class=\"co1\"># example</span><br/>console.<span class=\"me1\">log</span> spell_integer <span class=\"nu0\">1278</span><br/>console.<span class=\"me1\">log</span> spell_integer <span class=\"nu0\">1752</span><br/>console.<span class=\"me1\">log</span> spell_integer <span class=\"nu0\">2010</span><br/>console.<span class=\"me1\">log</span> spell_integer <span class=\"nu0\">4000123007913</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"~R\"</span> <span class=\"nu0\">1234</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"one thousand two hundred thirty-four\"</span></pre>"}, {"lang": "D", "loc": 78, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> tens <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span><br/>                  <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">immutable</span> small <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"zero\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span><br/>                   <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span><br/>                   <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span><br/>                   <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">immutable</span> huge <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> <span class=\"br0\">[</span><span class=\"st0\">\"m\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tr\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quadr\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quint\"</span><span class=\"sy0\">,</span><br/>                             <span class=\"st0\">\"sext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sept\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"oct\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"non\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"dec\"</span><span class=\"br0\">]</span><br/>                            .<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a <span class=\"sy0\">~</span> <span class=\"st0\">\"illion\"</span> <span class=\"br0\">}</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> spellBigInt<span class=\"br0\">(</span>BigInt n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow @safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">string</span> nonZero<span class=\"br0\">(</span><span class=\"kw4\">string</span> c<span class=\"sy0\">,</span> BigInt n<span class=\"sy0\">,</span> <span class=\"kw4\">string</span> connect<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow @safe*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span>connect <span class=\"sy0\">~</span> c <span class=\"sy0\">~</span> n.<span class=\"me1\">spellBigInt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">string</span> lastAnd<span class=\"br0\">(</span><span class=\"kw4\">string</span> num<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num.<span class=\"me1\">canFind</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> pre <span class=\"sy0\">=</span> num.<span class=\"me1\">retro</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">retro</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> $ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span> last <span class=\"sy0\">=</span> num<span class=\"br0\">[</span>pre.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>last.<span class=\"me1\">canFind</span><span class=\"br0\">(</span><span class=\"st0\">\" and \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                last <span class=\"sy0\">=</span> <span class=\"st0\">\" and\"</span> <span class=\"sy0\">~</span> last<span class=\"sy0\">;</span><br/>            num <span class=\"sy0\">=</span> pre <span class=\"sy0\">~</span> <span class=\"st0\">','</span> <span class=\"sy0\">~</span> last<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> num<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">string</span> big<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> e<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> BigInt n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow @safe*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span>  <span class=\"kw1\">return</span> n.<span class=\"me1\">spellBigInt</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>  <span class=\"kw1\">return</span> n.<span class=\"me1\">spellBigInt</span> <span class=\"sy0\">~</span> <span class=\"st0\">\" thousand\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span> <span class=\"kw1\">return</span> n.<span class=\"me1\">spellBigInt</span> <span class=\"sy0\">~</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">~</span> huge<span class=\"br0\">[</span>e<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"minus \"</span> <span class=\"sy0\">~</span> spellBigInt<span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> small<span class=\"br0\">[</span>n.<span class=\"me1\">toInt</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> BigInt a <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> BigInt b <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> tens<span class=\"br0\">[</span>a.<span class=\"me1\">toInt</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> nonZero<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span>_000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> BigInt a <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> BigInt b <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> small<span class=\"br0\">[</span>a.<span class=\"me1\">toInt</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> <span class=\"st0\">\" hundred\"</span> <span class=\"sy0\">~</span> nonZero<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"st0\">\" and\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bigs<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">uint</span> e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> BigInt r <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">1</span>_000<span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span>_000<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                bigs <span class=\"sy0\">~=</span> big<span class=\"br0\">(</span>e<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            e<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> lastAnd<span class=\"br0\">(</span>bigs.<span class=\"me1\">retro</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">version</span><span class=\"br0\">(</span>number_names_main<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">29</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"%+4d -&gt;\u00a0%s\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> n.<span class=\"me1\">BigInt</span>.<span class=\"me1\">spellBigInt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>_0121_002_001<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-12d -&gt;\u00a0%s\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> n.<span class=\"me1\">BigInt</span>.<span class=\"me1\">spellBigInt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">/=</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-12d -&gt;\u00a0%s\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> n.<span class=\"me1\">BigInt</span>.<span class=\"me1\">spellBigInt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 48, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  @small  ~w(zero one two three four five six seven eight nine ten<br/>             eleven twelve thirteen fourteen fifteen sixteen seventeen<br/>             eighteen nineteen)<br/>  @tens  ~w(wrong wrong twenty thirty forty fifty sixty seventy eighty ninety)<br/>  @big  [nil, \"thousand\"] ++<br/>        (~w( m b tr quadr quint sext sept oct non dec) |&gt; Enum.map(&amp;\"#{&amp;1}illion\"))<br/>\u00a0<br/>  def wordify(number) when number&lt;0, do: \"negative #{wordify(-number)}\"<br/>  def wordify(number) when number&lt;20, do: Enum.at(@small,number)<br/>  def wordify(number) when number&lt;100 do<br/>    rm = rem(number,10)<br/>    Enum.at(@tens,div(number,10)) &lt;&gt; (if rm==0, do: \"\", else: \"-#{wordify(rm)}\")<br/>  end<br/>  def wordify(number) when number&lt;1000 do<br/>    rm = rem(number,100)<br/>    \"#{Enum.at(@small,div(number,100))} hundred\" &lt;&gt; (if rm==0, do: \"\", else: \" and #{wordify(rm)}\")<br/>  end<br/>  def wordify(number) do<br/>    # separate into 3-digit chunks<br/>    chunks = chunk(number, [])<br/>    if length(chunks) &gt; length(@big), do: raise(ArgumentError, \"Integer value too large.\")<br/>    Enum.map(chunks, &amp;wordify(&amp;1))<br/>    |&gt; Enum.zip(@big)<br/>    |&gt; Enum.filter_map(fn {a,_} -&gt; a\u00a0!= \"zero\" end, fn {a,b} -&gt; \"#{a} #{b}\" end)<br/>    |&gt; Enum.reverse<br/>    |&gt; Enum.join(\", \")<br/>  end<br/>\u00a0<br/>  defp chunk(0, res), do: Enum.reverse(res)<br/>  defp chunk(number, res) do<br/>    chunk(div(number,1000), [rem(number,1000) | res])<br/>  end<br/>end<br/>\u00a0<br/>data = [-1123, 0, 1, 20, 123, 200, 220, 1245, 2000, 2200, 2220, 467889,<br/>        23_000_467, 23_234_467, 2_235_654_234, 12_123_234_543_543_456,<br/>        987_654_321_098_765_432_109_876_543_210_987_654,<br/>        123890812938219038290489327894327894723897432]<br/>\u00a0<br/>Enum.each(data, fn n -&gt;<br/>  IO.write \"#{n}: \"<br/>  try do<br/>    IO.inspect RC.wordify(n)<br/>  rescue<br/>    e in ArgumentError -&gt; IO.puts Exception.message(e)<br/>  end<br/>end)</pre>"}, {"lang": "Erlang", "loc": 79, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>nr2eng<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">import</span><span class=\"br0\">(</span>lists<span class=\"sy1\">,</span> <span class=\"br0\">[</span>foreach<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> seq<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> append<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">import</span><span class=\"br0\">(</span>string<span class=\"sy1\">,</span> <span class=\"br0\">[</span>strip<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> str<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"one\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"two\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"three\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"four\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"five\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"six\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"seven\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"eight\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"nine\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"ten\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"twelve\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"forty\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"fifty\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"hundred\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"thousand\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"million\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"billion\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"kw2\">div</span> <span class=\"nu0\">1000</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">concat</span><span class=\"br0\">(</span><span class=\"re5\">PRE</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">PRE</span><span class=\"sy1\">;</span><br/><span class=\"re3\">concat</span><span class=\"br0\">(</span><span class=\"re5\">PRE</span><span class=\"sy1\">,</span> <span class=\"re5\">POST</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">PRE</span><span class=\"sy3\">++</span><span class=\"st0\">\" \"</span><span class=\"sy3\">++</span><span class=\"re5\">POST</span><span class=\"sy1\">.</span><br/><span class=\"re3\">concat</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">POST</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">POST</span><span class=\"sy1\">;</span><br/><span class=\"re3\">concat</span><span class=\"br0\">(</span><span class=\"re5\">PRE</span><span class=\"sy1\">,</span> <span class=\"re5\">SYM</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">PRE</span><span class=\"sy3\">++</span><span class=\"st0\">\" \"</span><span class=\"sy3\">++</span><span class=\"re5\">SYM</span><span class=\"sy1\">;</span><br/><span class=\"re3\">concat</span><span class=\"br0\">(</span><span class=\"re5\">PRE</span><span class=\"sy1\">,</span> <span class=\"re5\">SYM</span><span class=\"sy1\">,</span> <span class=\"re5\">POST</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">PRE</span><span class=\"sy3\">++</span><span class=\"st0\">\" \"</span><span class=\"sy3\">++</span><span class=\"re5\">SYM</span><span class=\"sy3\">++</span><span class=\"st0\">\" \"</span><span class=\"sy3\">++</span><span class=\"re5\">POST</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"re5\">NR</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"re5\">NR</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"re5\">NR</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">NR</span> <span class=\"sy3\">=&lt;</span> <span class=\"nu0\">20</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"kw1\">case</span> <span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"re5\">NR</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        <span class=\"st0\">\"\"</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">strip</span><span class=\"br0\">(</span><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"re5\">NR</span><span class=\"sy3\">-</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> right<span class=\"sy1\">,</span> <span class=\"re6\">$t</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"st0\">\"teen\"</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">_</span>  <span class=\"sy1\">-&gt;</span> <span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"re5\">NR</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"re5\">NR</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re3\">concat</span><span class=\"br0\">(</span> <br/>     <span class=\"kw1\">case</span> <span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">NR</span> <span class=\"kw2\">div</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        <span class=\"st0\">\"\"</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">strip</span><span class=\"br0\">(</span><span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"re5\">NR</span> <span class=\"kw2\">div</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> right<span class=\"sy1\">,</span> <span class=\"re6\">$t</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"st0\">\"ty\"</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">_</span>  <span class=\"sy1\">-&gt;</span> <span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">NR</span> <span class=\"kw2\">div</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>     <span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"re5\">NR</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"re5\">NR</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">PRE</span>  <span class=\"sy3\">=</span> <span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"re5\">NR</span> <span class=\"kw2\">div</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"re5\">POST</span> <span class=\"sy3\">=</span> <span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"re5\">NR</span> <span class=\"kw2\">rem</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re3\">next</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"re5\">AND</span>  <span class=\"sy3\">=</span> <span class=\"re3\">str</span><span class=\"br0\">(</span><span class=\"re5\">POST</span><span class=\"sy1\">,</span> <span class=\"st0\">\"and\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"re5\">COMMA</span> <span class=\"sy3\">=</span> <span class=\"kw1\">if</span><br/>              <span class=\"re5\">POST</span> <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>              <span class=\"re5\">AND</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\" and\"</span><span class=\"sy1\">;</span><br/>              <span class=\"re5\">B</span> <span class=\"sy3\">&gt;=</span> <span class=\"nu0\">1000</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">;</span><br/>              true <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>   <span class=\"re3\">concat</span><span class=\"br0\">(</span><span class=\"re5\">PRE</span><span class=\"sy1\">,</span>  <span class=\"re3\">sym</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy3\">++</span><span class=\"re5\">COMMA</span><span class=\"sy1\">,</span> <span class=\"re5\">POST</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~p ~p ~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re3\">nr2eng</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000000000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>     <span class=\"re3\">append</span><span class=\"br0\">(</span><span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">123123</span><span class=\"sy1\">,</span> <span class=\"nu0\">43234234</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 72, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> abs<span class=\"br0\">(</span><span class=\"kw2\">atom</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> i &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">-</span>i<br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> i<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> small <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"one\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"six\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy2\">,</span><br/>    <span class=\"st0\">\"nine\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"eleven\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"twelve\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"sixteen\"</span><span class=\"sy2\">,</span><br/>    <span class=\"st0\">\"seventeen\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"nineteen\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> tens <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"twenty\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"fifty\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy2\">,</span><br/>    <span class=\"st0\">\"ninety\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> big <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"thousand\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"million\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"billion\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> int2text<span class=\"br0\">(</span><span class=\"kw2\">atom</span> number<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> num<br/>    <span class=\"kw2\">integer</span> unit<span class=\"sy2\">,</span> tmpLng1<br/>    <span class=\"kw2\">sequence</span> outP<br/>    outP <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><br/>    num <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    unit <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>    tmpLng1 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> number <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"zero\"</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    num <span class=\"sy1\">=</span> abs<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        tmpLng1 <span class=\"sy1\">=</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>num<span class=\"sy2\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> tmpLng1 &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> tmpLng1 &lt; <span class=\"nu0\">20</span> <span class=\"kw1\">then</span><br/>            outP <span class=\"sy1\">=</span> small<span class=\"br0\">[</span>tmpLng1<span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&amp;</span> outP<br/>        <span class=\"kw1\">elsif</span> tmpLng1 &gt;<span class=\"sy1\">=</span> <span class=\"nu0\">20</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>tmpLng1<span class=\"sy2\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                outP <span class=\"sy1\">=</span> tens<span class=\"br0\">[</span><span class=\"kw2\">floor</span><span class=\"br0\">(</span>tmpLng1<span class=\"sy1\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&amp;</span> outP<br/>            <span class=\"kw1\">else</span><br/>                outP <span class=\"sy1\">=</span> tens<span class=\"br0\">[</span><span class=\"kw2\">floor</span><span class=\"br0\">(</span>tmpLng1<span class=\"sy1\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">'-'</span> <span class=\"sy1\">&amp;</span> small<span class=\"br0\">[</span><span class=\"kw2\">remainder</span><span class=\"br0\">(</span>tmpLng1<span class=\"sy2\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&amp;</span> outP<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        tmpLng1 <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span><span class=\"kw2\">remainder</span><span class=\"br0\">(</span>num<span class=\"sy2\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> tmpLng1 <span class=\"kw1\">then</span><br/>            outP <span class=\"sy1\">=</span> small<span class=\"br0\">[</span>tmpLng1<span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" hundred \"</span> <span class=\"sy1\">&amp;</span> outP<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        num <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>num<span class=\"sy1\">/</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> num &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        tmpLng1 <span class=\"sy1\">=</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>num<span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> tmpLng1 <span class=\"kw1\">then</span><br/>            outP <span class=\"sy1\">=</span> big<span class=\"br0\">[</span>unit<span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&amp;</span> outP<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        unit <span class=\"sy1\">=</span> unit <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> number &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        outP <span class=\"sy1\">=</span> <span class=\"st0\">\"negative \"</span> <span class=\"sy1\">&amp;</span> outP<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> outP<span class=\"br0\">[</span><span class=\"nu0\">1</span>..$<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>int2text<span class=\"br0\">(</span><span class=\"nu0\">900000001</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>int2text<span class=\"br0\">(</span><span class=\"nu0\">1234567890</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>int2text<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">987654321</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>int2text<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 58, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> divMod n d <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> d, n <span class=\"sy0\">%</span> d<br/>\u00a0<br/><span class=\"kw1\">let</span> join <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\", \"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> nonzero <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  | _, <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"\"</span><br/>  | c, n <span class=\"sy0\">-&gt;</span> c <span class=\"sy0\">+</span> <span class=\"br0\">(</span>spellInteger n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">and</span> tens n <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span>| <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ninety\"</span> |<span class=\"br0\">]</span>.<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">and</span> small n <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span>| <span class=\"st0\">\"zero\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">;</span><br/>     <span class=\"st0\">\"six\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">;</span><br/>     <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">;</span><br/>     <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"nineteen\"</span> |<span class=\"br0\">]</span>.<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">and</span> bl <span class=\"sy0\">=</span> <span class=\"br0\">[</span>| <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"m\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"tr\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"quadr\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"quint\"</span><span class=\"sy0\">;</span><br/>                    <span class=\"st0\">\"sext\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"sept\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"oct\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"non\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dec\"</span> |<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">and</span> big <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  | <span class=\"nu0\">0</span>, n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>spellInteger n<span class=\"br0\">)</span><br/>  | <span class=\"nu0\">1</span>, n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>spellInteger n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" thousand\"</span><br/>  | e, n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>spellInteger n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> bl.<span class=\"br0\">[</span>e<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"illion\"</span><br/>\u00a0<br/><span class=\"kw1\">and</span> uff acc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  | <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span> acc<br/>  | n <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> a, b <span class=\"sy0\">=</span> divMod n <span class=\"nu0\">1000</span><br/>      uff <span class=\"br0\">(</span>b::acc<span class=\"br0\">)</span> a<br/>\u00a0<br/><span class=\"kw1\">and</span> spellInteger <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  | n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"minus \"</span> <span class=\"sy0\">+</span> spellInteger <span class=\"br0\">(</span><span class=\"kw3\">abs</span> n<span class=\"br0\">)</span><br/>  | n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span> <span class=\"sy0\">-&gt;</span> small n<br/>  | n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> a, b <span class=\"sy0\">=</span> divMod n <span class=\"nu0\">10</span><br/>      <span class=\"br0\">(</span>tens a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> nonzero <span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, b<span class=\"br0\">)</span><br/>  | n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> a, b <span class=\"sy0\">=</span> divMod n <span class=\"nu0\">100</span><br/>      <span class=\"br0\">(</span>small a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" hundred\"</span> <span class=\"sy0\">+</span> nonzero <span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, b<span class=\"br0\">)</span><br/>  | n <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> seg <span class=\"sy0\">=</span> uff <span class=\"br0\">[</span><span class=\"br0\">]</span> n<br/>      <span class=\"kw1\">let</span> _, segn <span class=\"sy0\">=</span><br/>        <span class=\"co3\">(* just add the index of the item in the list *)</span><br/>        <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">fold</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>i,acc<span class=\"br0\">)</span> v <span class=\"sy0\">-&gt;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"br0\">(</span>i, v<span class=\"br0\">)</span>::acc<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>          seg<br/>\u00a0<br/>      <span class=\"kw1\">let</span> fsegn <span class=\"sy0\">=</span><br/>        <span class=\"co3\">(* remove right part \"zero\" *)</span><br/>        <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">filter</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>_, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span> | _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>          segn<br/>\u00a0<br/>      join <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> big fsegn<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">IN: scratchpad USE: math.text.english<br/>IN: scratchpad 43112609 number&gt;text print<br/>forty-three million, one hundred and twelve thousand, six hundred and nine<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 67, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> spell<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">e</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">m</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"nu0\">19</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">small</span> <span class=\"sy0\">=</span>       <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">'one      '</span>, <span class=\"st0\">'two      '</span>, <span class=\"st0\">'three    '</span>, <span class=\"st0\">'four     '</span>, <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span>   <span class=\"st0\">'five     '</span>, <span class=\"st0\">'six      '</span>, <span class=\"st0\">'seven    '</span>, <span class=\"st0\">'eight    '</span>, <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span>   <span class=\"st0\">'nine     '</span>, <span class=\"st0\">'ten      '</span>, <span class=\"st0\">'eleven   '</span>, <span class=\"st0\">'twelve   '</span>, <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span>   <span class=\"st0\">'thirteen '</span>, <span class=\"st0\">'fourteen '</span>, <span class=\"st0\">'fifteen  '</span>, <span class=\"st0\">'sixteen  '</span>, <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span>   <span class=\"st0\">'seventeen'</span>, <span class=\"st0\">'eighteen '</span>, <span class=\"st0\">'nineteen '</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">tens</span> <span class=\"sy0\">=</span>        <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">'twenty '</span>, <span class=\"st0\">'thirty '</span>, <span class=\"st0\">'forty  '</span>, <span class=\"st0\">'fifty  '</span>, <span class=\"st0\">'sixty  '</span>, <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span>   <span class=\"st0\">'seventy'</span>, <span class=\"st0\">'eighty '</span>, <span class=\"st0\">'ninety '</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">big</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">'thousand'</span>, <span class=\"st0\">'million '</span>, <span class=\"st0\">'billion '</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    read <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"sy0\">*</span>, <span class=\"kw1\">iostat</span> <span class=\"sy0\">=</span> i<span class=\"br0\">)</span> n<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      r <span class=\"sy0\">=</span> <span class=\"st0\">'zero'</span><br/>    <span class=\"kw1\">else</span><br/>      r <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>      m <span class=\"sy0\">=</span> <span class=\"kw4\">abs</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">exit</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">1000</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            r <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span> <span class=\"br0\">(</span>big <span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"st0\">' '</span> <span class=\"sy0\">//</span> r<br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">100</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">100</span><span class=\"br0\">)</span> &lt; <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>              r <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span> <span class=\"br0\">(</span>small <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"st0\">' '</span> <span class=\"sy0\">//</span> r<br/>            <span class=\"kw1\">else</span><br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">10</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                r <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span> <span class=\"br0\">(</span>small <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"st0\">' '</span> <span class=\"sy0\">//</span> r<br/>                r <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span> <span class=\"br0\">(</span>tens <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"st0\">'-'</span> <span class=\"sy0\">//</span> r<br/>              <span class=\"kw1\">else</span><br/>                r <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span> <span class=\"br0\">(</span>tens <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"st0\">' '</span> <span class=\"sy0\">//</span> r<br/>              <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">100</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            r <span class=\"sy0\">=</span> <span class=\"st0\">'hundred'</span> <span class=\"sy0\">//</span> <span class=\"st0\">' '</span> <span class=\"sy0\">//</span> r<br/>            r <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span> <span class=\"br0\">(</span>small <span class=\"br0\">(</span><span class=\"kw4\">modulo</span> <span class=\"br0\">(</span>m, <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"st0\">' '</span> <span class=\"sy0\">//</span> r<br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        m <span class=\"sy0\">=</span> m <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span><br/>        e <span class=\"sy0\">=</span> e <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        r <span class=\"sy0\">=</span> <span class=\"st0\">'negative'</span> <span class=\"sy0\">//</span> <span class=\"st0\">' '</span> <span class=\"sy0\">//</span> r<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(a)'</span><span class=\"br0\">)</span> <span class=\"kw4\">trim</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> spell</pre>"}, {"lang": "Go", "loc": 58, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int64</span><span class=\"sy1\">{</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">1048576</span><span class=\"sy1\">,</span> <span class=\"nu1\">9e18</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>say<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> small <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"zero\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"one\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"six\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"st0\">\"seven\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"twelve\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"st0\">\"fourteen\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"sixteen\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"nineteen\"</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> tens <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"st0\">\"fifty\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ninety\"</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> illions <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\" thousand\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\" million\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\" billion\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"st0\">\" trillion\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\" quadrillion\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\" quintillion\"</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> say<span class=\"sy1\">(</span>n <span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> t <span class=\"kw4\">string</span><br/>\t<span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\tt <span class=\"sy2\">=</span> <span class=\"st0\">\"negative \"</span><br/>\t\t<span class=\"co1\">// Note, for math.MinInt64 this leaves n negative.</span><br/>\t\tn <span class=\"sy2\">=</span> <span class=\"sy3\">-</span>n<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">case</span> n &lt; <span class=\"nu0\">20</span><span class=\"sy1\">:</span><br/>\t\tt <span class=\"sy2\">+=</span> small<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><br/>\t<span class=\"kw1\">case</span> n &lt; <span class=\"nu0\">100</span><span class=\"sy1\">:</span><br/>\t\tt <span class=\"sy2\">+=</span> tens<span class=\"sy1\">[</span>n<span class=\"sy3\">/</span><span class=\"nu0\">10</span><span class=\"sy1\">]</span><br/>\t\ts <span class=\"sy2\">:=</span> n <span class=\"sy3\">%</span> <span class=\"nu0\">10</span><br/>\t\t<span class=\"kw1\">if</span> s &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\tt <span class=\"sy2\">+=</span> <span class=\"st0\">\"-\"</span> <span class=\"sy3\">+</span> small<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">case</span> n &lt; <span class=\"nu0\">1000</span><span class=\"sy1\">:</span><br/>\t\tt <span class=\"sy2\">+=</span> small<span class=\"sy1\">[</span>n<span class=\"sy3\">/</span><span class=\"nu0\">100</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"st0\">\" hundred\"</span><br/>\t\ts <span class=\"sy2\">:=</span> n <span class=\"sy3\">%</span> <span class=\"nu0\">100</span><br/>\t\t<span class=\"kw1\">if</span> s &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\tt <span class=\"sy2\">+=</span> <span class=\"st0\">\" \"</span> <span class=\"sy3\">+</span> say<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t\t<span class=\"co1\">// work right-to-left</span><br/>\t\tsx <span class=\"sy2\">:=</span> <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> n &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tp <span class=\"sy2\">:=</span> n <span class=\"sy3\">%</span> <span class=\"nu0\">1000</span><br/>\t\t\tn <span class=\"sy2\">/=</span> <span class=\"nu0\">1000</span><br/>\t\t\t<span class=\"kw1\">if</span> p &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\tix <span class=\"sy2\">:=</span> say<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> illions<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t\t\t\t<span class=\"kw1\">if</span> sx <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>\t\t\t\t\tix <span class=\"sy2\">+=</span> <span class=\"st0\">\" \"</span> <span class=\"sy3\">+</span> sx<br/>\t\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t\tsx <span class=\"sy2\">=</span> ix<br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tt <span class=\"sy2\">+=</span> sx<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> t<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 75, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> divMod<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> number, <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> divisor<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> qr <span class=\"sy0\">=</span> number.<span class=\"me1\">divideAndRemainder</span><span class=\"br0\">(</span>divisor<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>div:qr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, remainder:qr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> toText<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    value <span class=\"sy0\">=</span> value <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> units <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'zero'</span>, <span class=\"st0\">'one'</span>, <span class=\"st0\">'two'</span>, <span class=\"st0\">'three'</span>, <span class=\"st0\">'four'</span>, <span class=\"st0\">'five'</span>, <span class=\"st0\">'six'</span>, <span class=\"st0\">'seven'</span>, <span class=\"st0\">'eight'</span>, <span class=\"st0\">'nine'</span>, <span class=\"st0\">'ten'</span>,<br/>            <span class=\"st0\">'eleven'</span>, <span class=\"st0\">'twelve'</span>, <span class=\"st0\">'thirteen'</span>, <span class=\"st0\">'fourteen'</span>, <span class=\"st0\">'fifteen'</span>, <span class=\"st0\">'sixteen'</span>, <span class=\"st0\">'seventeen'</span>, <span class=\"st0\">'eighteen'</span>, <span class=\"st0\">'nineteen'</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> tens <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span>, <span class=\"st0\">''</span>, <span class=\"st0\">'twenty'</span>, <span class=\"st0\">'thirty'</span>, <span class=\"st0\">'forty'</span>, <span class=\"st0\">'fifty'</span>, <span class=\"st0\">'sixty'</span>, <span class=\"st0\">'seventy'</span>, <span class=\"st0\">'eighty'</span>, <span class=\"st0\">'ninety'</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> big <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span>, <span class=\"st0\">'thousand'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"st0\">'m'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'tr'</span>, <span class=\"st0\">'quadr'</span>, <span class=\"st0\">'quint'</span>, <span class=\"st0\">'sext'</span>, <span class=\"st0\">'sept'</span>, <span class=\"st0\">'oct'</span>, <span class=\"st0\">'non'</span>, <span class=\"st0\">'dec'</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"st0\">\"${it}illion\"</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"negative ${toText(-value)}\"</span><br/>    <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        units<span class=\"br0\">[</span>value<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        divMod<span class=\"br0\">(</span>value, <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">with</span> <span class=\"br0\">{</span> <span class=\"st0\">\"${tens[div]} ${units[remainder]}\"</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">' zero'</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        divMod<span class=\"br0\">(</span>value, <span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">with</span> <span class=\"br0\">{</span> <span class=\"st0\">\"${toText(div)} hundred and ${toText(remainder)}\"</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">' and zero'</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> chunks <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            divMod<span class=\"br0\">(</span>value, <span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">with</span> <span class=\"br0\">{</span><br/>                chunks <span class=\"sy0\">&lt;&lt;</span> remainder<br/>                value <span class=\"sy0\">=</span> div<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>chunks.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> big.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20throw\"><span class=\"kw2\">throw</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=IllegalArgumentException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Number overflow\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> text <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>chunks.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> index <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>chunks<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                text <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"${toText(chunks[index])}${index == 0\u00a0? ''\u00a0: ' ' + big[index]}\"</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>index <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> chunks<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    text <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"and\"</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        text.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse\"><span class=\"kw5\">reverse</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">', and,'</span>, <span class=\"st0\">' and'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Add this method to all Numbers</span><br/><a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a>.<span class=\"me1\">metaClass</span>.<span class=\"me1\">toText</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> toText<span class=\"br0\">(</span>delegate<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> toText<span class=\"br0\">(</span><span class=\"nu0\">29</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"nu0\">40</span>.<span class=\"me1\">toText</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> toText<span class=\"br0\">(</span><span class=\"nu0\">401</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"nu0\">9003</span>.<span class=\"me1\">toText</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> toText<span class=\"br0\">(</span><span class=\"nu0\">8011673</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"nu0\">8000100</span>.<span class=\"me1\">toText</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"nu0\">4629436</span>.<span class=\"me1\">toText</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"nu0\">948623487512387455323784623842314234</span>.<span class=\"me1\">toText</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> it.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> verifyToText<span class=\"br0\">(</span>expected, value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Checking '$expected' == $value\"</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> actual <span class=\"sy0\">=</span> value.<span class=\"me1\">toText</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> expected <span class=\"sy0\">==</span> actual<br/><span class=\"br0\">}</span><br/>\u00a0<br/>verifyToText <span class=\"st0\">'nineteen'</span>, <span class=\"nu0\">19</span><br/>verifyToText <span class=\"st0\">'one thousand, two hundred and thirty four'</span>, <span class=\"nu0\">1234</span><br/>verifyToText <span class=\"st0\">'twenty three million, four hundred and fifty nine thousand, six hundred and twelve'</span>, <span class=\"nu0\">23459612</span><br/>verifyToText <span class=\"st0\">'one thousand, nine hundred and ninety nine'</span>, <span class=\"nu0\">1999</span><br/>verifyToText <span class=\"st0\">'negative six hundred and one'</span>, <span class=\"sy0\">-</span><span class=\"nu0\">601</span><br/>verifyToText <span class=\"st0\">'twelve billion and nineteen'</span>, <span class=\"nu0\">12000000019</span><br/>verifyToText <span class=\"st0\">'negative one billion, two hundred and thirty four million, five hundred and sixty seven thousand, eight hundred and ninety'</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1234567890</span><br/>verifyToText <span class=\"st0\">'one hundred and one'</span>, <span class=\"nu0\">101</span><br/>verifyToText <span class=\"st0\">'one thousand and one'</span>, <span class=\"nu0\">1001</span><br/>verifyToText <span class=\"st0\">'one million, one hundred and one'</span>, <span class=\"nu0\">1000101</span><br/>verifyToText <span class=\"st0\">'one million and forty five'</span>, <span class=\"nu0\">1000045</span><br/>verifyToText <span class=\"st0\">'one million and fifteen'</span>, <span class=\"nu0\">1000015</span><br/>verifyToText <span class=\"st0\">'one billion, forty five thousand and one'</span>, <span class=\"nu0\">1000045001</span></pre>"}, {"lang": "Haskell", "loc": 36, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>intercalate<span class=\"sy0\">,</span> unfoldr<span class=\"br0\">)</span><br/>\u00a0<br/>spellInteger <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>spellInteger n<br/> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span>    <span class=\"nu0\">0</span>  <span class=\"sy0\">=</span> <span class=\"st0\">\"negative \"</span> <span class=\"sy0\">++</span> spellInteger <span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span>   <span class=\"nu0\">20</span>  <span class=\"sy0\">=</span> small n<br/> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span>  <span class=\"nu0\">100</span>  <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod\"><span class=\"kw3\">divMod</span></a>` <span class=\"nu0\">10</span><br/>               <span class=\"kw1\">in</span>  tens a <span class=\"sy0\">++</span> nonzero <span class=\"st0\">'-'</span> b<br/> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span>  <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod\"><span class=\"kw3\">divMod</span></a>` <span class=\"nu0\">100</span><br/>               <span class=\"kw1\">in</span>  small a <span class=\"sy0\">++</span> <span class=\"st0\">\" hundred\"</span> <span class=\"sy0\">++</span> nonzero <span class=\"st0\">' '</span> b<br/> <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> intercalate <span class=\"st0\">\", \"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> big <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">$</span><br/>               <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">$</span> unfoldr uff n<br/>\u00a0<br/> <span class=\"kw1\">where</span> nonzero <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>       nonzero <span class=\"sy0\">_</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>       nonzero c n <span class=\"sy0\">=</span> c\u00a0: spellInteger n<br/>\u00a0<br/>       uff <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">)</span><br/>       uff <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> Nothing<br/>       uff n <span class=\"sy0\">=</span> Just <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod\"><span class=\"kw3\">divMod</span></a>` <span class=\"nu0\">1000</span><br/>\u00a0<br/>       small<span class=\"sy0\">,</span> tens <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>       small <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"zero\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen\"</span><span class=\"br0\">]</span> <span class=\"sy0\">!!</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a><br/>       tens <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span><br/>           <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span><span class=\"br0\">]</span> <span class=\"sy0\">!!</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a><br/>\u00a0<br/>       big <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>       big <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> spellInteger n<br/>       big <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> spellInteger n <span class=\"sy0\">++</span> <span class=\"st0\">\" thousand\"</span><br/>       big <span class=\"br0\">(</span>e<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> spellInteger n <span class=\"sy0\">++</span> <span class=\"st0\">' '</span>\u00a0: <span class=\"br0\">(</span>l <span class=\"sy0\">!!</span> e<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\"illion\"</span><br/>         <span class=\"kw1\">where</span> l <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"m\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tr\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quadr\"</span><span class=\"sy0\">,</span><br/>                   <span class=\"st0\">\"quint\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sept\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"oct\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"non\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"dec\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 70, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">SUBROUTINE</span> NumberToWords<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/> <span class=\"kw1\">CHARACTER</span> outP<span class=\"sy1\">*</span><span class=\"nu0\">255</span><span class=\"sy1\">,</span> small<span class=\"sy1\">*</span><span class=\"nu0\">130</span><span class=\"sy1\">,</span> tens<span class=\"sy1\">*</span><span class=\"nu0\">80</span><span class=\"sy1\">,</span> big<span class=\"sy1\">*</span><span class=\"nu0\">80</span><br/> <span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span>   decimal_places <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><br/> <span class=\"kw1\">INIT</span><span class=\"br0\">(</span> <span class=\"kw1\">APPENDIX</span><span class=\"br0\">(</span><span class=\"st0\">\"#literals\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> small<span class=\"sy1\">,</span> tens<span class=\"sy1\">,</span> big<span class=\"br0\">)</span><br/>\u00a0<br/> num <span class=\"sy1\">=</span> <span class=\"kw1\">ABS</span><span class=\"br0\">(</span> <span class=\"kw1\">INT</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/> order <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/> outP <span class=\"sy1\">=</span> <span class=\"st0\">' '</span><br/> <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> num <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>   tmp <span class=\"sy1\">=</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>num<span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span>tmp <span class=\"sy1\">&gt;</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>tens<span class=\"sy1\">,</span> ITeM<span class=\"sy1\">=</span><span class=\"kw1\">INT</span><span class=\"br0\">(</span><span class=\"kw1\">MOD</span><span class=\"br0\">(</span>tmp<span class=\"sy1\">/</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> Parse<span class=\"sy1\">=</span>medium<span class=\"br0\">)</span><br/>       <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>tmp<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>           <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>small<span class=\"sy1\">,</span> ITeM<span class=\"sy1\">=</span><span class=\"kw1\">MOD</span><span class=\"br0\">(</span>tmp<span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> Parse<span class=\"sy1\">=</span>mini<span class=\"br0\">)</span><br/>           outP <span class=\"sy1\">=</span> medium <span class=\"sy1\">//</span> <span class=\"st0\">'-'</span> <span class=\"sy1\">//</span> mini <span class=\"sy1\">//</span> <span class=\"st0\">' '</span> <span class=\"sy1\">//</span> outP<br/>       <span class=\"kw1\">ELSE</span><br/>           outP <span class=\"sy1\">=</span> medium <span class=\"sy1\">//</span> <span class=\"st0\">' '</span> <span class=\"sy1\">//</span> outP<br/>       <span class=\"kw1\">ENDIF</span><br/>   <span class=\"kw1\">ELSEIF</span><span class=\"br0\">(</span>tmp <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>small<span class=\"sy1\">,</span> ITeM<span class=\"sy1\">=</span>tmp<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> Parse<span class=\"sy1\">=</span>mini<span class=\"br0\">)</span><br/>       outP <span class=\"sy1\">=</span> mini <span class=\"sy1\">//</span> <span class=\"st0\">' '</span><span class=\"sy1\">//</span> outP<br/>   <span class=\"kw1\">ELSEIF</span><span class=\"br0\">(</span>number <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       outP <span class=\"sy1\">=</span> <span class=\"st0\">'zero'</span><br/>   <span class=\"kw1\">ENDIF</span><br/>\u00a0<br/>   tmp <span class=\"sy1\">=</span> <span class=\"kw1\">INT</span><span class=\"br0\">(</span><span class=\"kw1\">MOD</span><span class=\"br0\">(</span>num<span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>small<span class=\"sy1\">,</span> ITeM<span class=\"sy1\">=</span>tmp<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> Parse<span class=\"sy1\">=</span>oneto19<span class=\"br0\">)</span><br/>       outP <span class=\"sy1\">=</span> oneto19 <span class=\"sy1\">//</span> <span class=\"st0\">' hundred '</span> <span class=\"sy1\">//</span> outP<br/>   <span class=\"kw1\">ENDIF</span><br/>\u00a0<br/>   num <span class=\"sy1\">=</span> <span class=\"kw1\">INT</span><span class=\"br0\">(</span>num <span class=\"sy1\">/</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span> num <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       <span class=\"kw1\">IF</span><span class=\"br0\">(</span>number <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> outP <span class=\"sy1\">=</span> <span class=\"st0\">'minus '</span> <span class=\"sy1\">//</span> outP<br/>       fraction <span class=\"sy1\">=</span> <span class=\"kw1\">ABS</span><span class=\"br0\">(</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>number<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>       <span class=\"kw1\">IF</span><span class=\"br0\">(</span>fraction<span class=\"br0\">)</span> <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>outP<span class=\"sy1\">,</span> APPend<span class=\"br0\">)</span> <span class=\"st0\">' point'</span><br/>       <span class=\"kw1\">DO</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> decimal_places<br/>         <span class=\"kw1\">IF</span><span class=\"br0\">(</span> fraction <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">10</span><span class=\"sy1\">^</span><span class=\"br0\">(</span><span class=\"sy1\">-</span>decimal_places<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>             num <span class=\"sy1\">=</span> <span class=\"kw1\">INT</span><span class=\"br0\">(</span> <span class=\"nu0\">10.01</span> <span class=\"sy1\">*</span> fraction <span class=\"br0\">)</span><br/>             <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>small<span class=\"sy1\">,</span> ITeM<span class=\"sy1\">=</span>num<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> Parse<span class=\"sy1\">=</span>digit<span class=\"br0\">)</span><br/>             <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>outP<span class=\"sy1\">,</span> APPend<span class=\"br0\">)</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span> digit<br/>             fraction <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">*</span>fraction <span class=\"sy1\">-</span> num<br/>         <span class=\"kw1\">ENDIF</span><br/>       <span class=\"kw1\">ENDDO</span><br/>       <span class=\"kw1\">OPEN</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span><span class=\"st0\">\"temp.txt\"</span><span class=\"sy1\">,</span> APPend<span class=\"br0\">)</span><br/>       <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span><span class=\"st0\">\"temp.txt\"</span><span class=\"sy1\">,</span> Format<span class=\"sy1\">=</span><span class=\"st0\">'F10, \" = \", A'</span><span class=\"sy1\">,</span> CLoSe<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> number<span class=\"sy1\">,</span> outP<br/>       <span class=\"kw1\">RETURN</span><br/>   <span class=\"kw1\">ENDIF</span><br/>\u00a0<br/>   order <span class=\"sy1\">=</span> order <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>big<span class=\"sy1\">,</span> ITeM<span class=\"sy1\">=</span>order<span class=\"sy1\">,</span> Parse<span class=\"sy1\">=</span>kilo<span class=\"br0\">)</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>num<span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> outP <span class=\"sy1\">=</span> kilo <span class=\"sy1\">//</span> <span class=\"st0\">' and '</span><span class=\"sy1\">//</span> outP<br/> <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">CALL</span> NumberToWords<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">CALL</span> NumberToWords<span class=\"br0\">(</span> <span class=\"nu0\">1234</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">CALL</span> NumberToWords<span class=\"br0\">(</span> <span class=\"nu0\">1234</span><span class=\"sy1\">/</span><span class=\"nu0\">100</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">CALL</span> NumberToWords<span class=\"br0\">(</span> <span class=\"nu0\">10000000</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1.2</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">CALL</span> NumberToWords<span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy1\">^</span><span class=\"nu0\">15</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">CALL</span> NumberToWords<span class=\"br0\">(</span> <span class=\"nu0\">0.001</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">CALL</span> NumberToWords<span class=\"br0\">(</span> <span class=\"sy1\">-</span><span class=\"kw1\">EXP</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>#literals<br/> SMALL<span class=\"sy1\">=</span> zero one two three four five six seven eight nine ten &amp;<br/> eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen<br/>\u00a0<br/> TENS<span class=\"sy1\">=</span>ten twenty thirty forty fifty sixty seventy eighty ninety<br/>\u00a0<br/> BIG<span class=\"sy1\">=</span>thousand million billion trillion quadrillion</pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> numbers    <span class=\"co1\"># commas, spell</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>arglist <span class=\"kw1\">do</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>commas<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" -&gt; \"</span><span class=\"sy1\">,</span>spell<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Inform 7", "loc": 1, "block": "<pre class=\"text highlighted_source\">say 32767 in words;</pre>"}, {"lang": "J", "loc": 24, "block": "<pre class=\"j highlighted_source\"><span class=\"kw2\">u</span>=.\u00a0;:<span class=\"st_h\">'one two three four five six seven eight nine'</span><br/><span class=\"kw2\">v</span>=.\u00a0;:<span class=\"st_h\">'ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen'</span><br/>t=.\u00a0;:<span class=\"st_h\">'twenty thirty forty fifty sixty seventy eighty ninety'</span><br/>EN100=: <span class=\"st_h\">''</span>\u00a0; <span class=\"kw2\">u</span> , <span class=\"kw2\">v</span> , , t ,&amp;.&gt;/ <span class=\"st_h\">''</span>;<span class=\"st_h\">'-'</span>,&amp;.&gt;<span class=\"kw2\">u</span><br/>\u00a0<br/>z=. <span class=\"st_h\">''</span>\u00a0; <span class=\"st_h\">'thousand'</span>\u00a0; <span class=\"sy0\">(</span>;:<span class=\"st_h\">'m b tr quadr quint sext sept oct non'</span><span class=\"sy0\">)</span>,&amp;.&gt; &lt;<span class=\"st_h\">'illion'</span><br/><span class=\"kw2\">u</span>=.\u00a0;:<span class=\"st_h\">'un duo tre quattuor quin sex septen octo novem'</span><br/>t=. <span class=\"sy0\">(</span>;:<span class=\"st_h\">'dec vigint trigint quadragint quinquagint sexagint septuagint octogint nonagint'</span><span class=\"sy0\">)</span>,&amp;.&gt;&lt;<span class=\"st_h\">'illion'</span><br/>ENU=: z , <span class=\"sy0\">(</span>, t ,~&amp;.&gt;/ <span class=\"st_h\">''</span>;<span class=\"kw2\">u</span><span class=\"sy0\">)</span> , &lt;<span class=\"st_h\">'centillion'</span><br/>\u00a0<br/>en3=: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><br/> <span class=\"st_h\">'p q'</span>=. <span class=\"nu0\">0</span> <span class=\"nu0\">100</span>#:<span class=\"kw2\">y</span><br/> <span class=\"sy0\">(</span>p{::EN100<span class=\"sy0\">)</span>,<span class=\"sy0\">((</span>*p<span class=\"sy0\">)</span>#<span class=\"st_h\">' hundred'</span><span class=\"sy0\">)</span>,<span class=\"sy0\">((</span>p*&amp;*q<span class=\"sy0\">)</span>#<span class=\"kw2\">x</span><span class=\"sy0\">)</span>,q{::EN100<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>en=: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><br/> d=. <span class=\"nu0\">1000</span>&amp;#.^:<span class=\"nu0\">_1</span> <span class=\"kw2\">y</span><br/> <span class=\"kw1\">assert.</span> <span class=\"sy0\">(</span><span class=\"nu0\">0</span>&lt;:<span class=\"kw2\">y</span><span class=\"sy0\">)</span> *. <span class=\"sy0\">((</span>=&lt;.<span class=\"sy0\">)</span><span class=\"kw2\">y</span><span class=\"sy0\">)</span> *. d &lt;:&amp;# ENU<br/> c=. <span class=\"kw2\">x</span>&amp;en3&amp;.&gt; <span class=\"sy0\">(</span>*d<span class=\"sy0\">)</span>#d<br/> <span class=\"sy0\">((</span><span class=\"nu0\">0</span>=<span class=\"kw2\">y</span><span class=\"sy0\">)</span>#<span class=\"st_h\">'zero'</span><span class=\"sy0\">)</span> , <span class=\"sy0\">(</span>-<span class=\"nu0\">2</span>+*{:d<span class=\"sy0\">)</span> }.\u00a0; , c,.<span class=\"sy0\">(</span>&lt;<span class=\"st_h\">' '</span><span class=\"sy0\">)</span>,.<span class=\"sy0\">(</span>ENU{~I.&amp;.|.*d<span class=\"sy0\">)</span>,.&lt;<span class=\"st_h\">', '</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>uk=: <span class=\"st_h\">' and '</span>&amp;en   <span class=\"co1\">NB. British</span><br/>us=: <span class=\"st_h\">' '</span>    &amp;en   <span class=\"co1\">NB. American</span></pre>"}, {"lang": "Java", "loc": 78, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">enum</span> IntToWords <span class=\"br0\">{</span><br/>    <span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> small <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"one\"</span>, <span class=\"st0\">\"two\"</span>, <span class=\"st0\">\"three\"</span>, <span class=\"st0\">\"four\"</span>,<br/>            <span class=\"st0\">\"five\"</span>, <span class=\"st0\">\"six\"</span>, <span class=\"st0\">\"seven\"</span>, <span class=\"st0\">\"eight\"</span>, <span class=\"st0\">\"nine\"</span>,<br/>            <span class=\"st0\">\"ten\"</span>, <span class=\"st0\">\"eleven\"</span>, <span class=\"st0\">\"twelve\"</span>, <span class=\"st0\">\"thirteen\"</span>, <span class=\"st0\">\"fourteen\"</span>,<br/>            <span class=\"st0\">\"fifteen\"</span>, <span class=\"st0\">\"sixteen\"</span>, <span class=\"st0\">\"seventeen\"</span>, <span class=\"st0\">\"eighteen\"</span>, <span class=\"st0\">\"nineteen\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> tens <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"twenty\"</span>, <span class=\"st0\">\"thirty\"</span>, <span class=\"st0\">\"forty\"</span>,<br/>            <span class=\"st0\">\"fifty\"</span>, <span class=\"st0\">\"sixty\"</span>, <span class=\"st0\">\"seventy\"</span>, <span class=\"st0\">\"eighty\"</span>, <span class=\"st0\">\"ninety\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> big <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"thousand\"</span>, <span class=\"st0\">\"million\"</span>, <span class=\"st0\">\"billion\"</span>, <span class=\"st0\">\"trillion\"</span>,<br/>            <span class=\"st0\">\"quadrillion\"</span>, <span class=\"st0\">\"quintillion\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">47</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">9999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">123</span>_456<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">900</span>_000_001<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"nu0\">1</span>_234_567_890<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">987</span>_654_321<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">MAX_VALUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>int2Text<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> int2Text<span class=\"br0\">(</span><span class=\"kw4\">long</span> number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"zero\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">long</span> num <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> unit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> rem100 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rem100 <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rem100 <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, tens<span class=\"br0\">[</span>rem100 <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, tens<span class=\"br0\">[</span>rem100 <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"-\"</span> <span class=\"sy0\">+</span> small<span class=\"br0\">[</span>rem100 <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rem100 <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, small<span class=\"br0\">[</span>rem100<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> hundreds <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hundreds <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, small<span class=\"br0\">[</span>hundreds<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" hundred \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            num <span class=\"sy0\">/=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> rem1000 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rem1000 <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, big<span class=\"br0\">[</span>unit<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            unit<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sb.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"st0\">\"negative \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 44, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">const</span> divMod <span class=\"sy0\">=</span> y <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>y<span class=\"sy0\">/</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> y <span class=\"sy0\">%</span> x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span> sayNumber <span class=\"sy0\">=</span> value <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  let name <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>  let quotient<span class=\"sy0\">,</span> remainder<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> dm <span class=\"sy0\">=</span> divMod<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> units <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'zero'</span><span class=\"sy0\">,</span> <span class=\"st0\">'one'</span><span class=\"sy0\">,</span> <span class=\"st0\">'two'</span><span class=\"sy0\">,</span> <span class=\"st0\">'three'</span><span class=\"sy0\">,</span> <span class=\"st0\">'four'</span><span class=\"sy0\">,</span> <span class=\"st0\">'five'</span><span class=\"sy0\">,</span> <span class=\"st0\">'six'</span><span class=\"sy0\">,</span> <span class=\"st0\">'seven'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'eight'</span><span class=\"sy0\">,</span> <span class=\"st0\">'nine'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ten'</span><span class=\"sy0\">,</span> <span class=\"st0\">'eleven'</span><span class=\"sy0\">,</span> <span class=\"st0\">'twelve'</span><span class=\"sy0\">,</span> <span class=\"st0\">'thirteen'</span><span class=\"sy0\">,</span> <span class=\"st0\">'fourteen'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'fifteen'</span><span class=\"sy0\">,</span> <span class=\"st0\">'sixteen'</span><span class=\"sy0\">,</span> <span class=\"st0\">'seventeen'</span><span class=\"sy0\">,</span> <span class=\"st0\">'eighteen'</span><span class=\"sy0\">,</span> <span class=\"st0\">'nineteen'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> tens <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">'twenty'</span><span class=\"sy0\">,</span> <span class=\"st0\">'thirty'</span><span class=\"sy0\">,</span> <span class=\"st0\">'forty'</span><span class=\"sy0\">,</span> <span class=\"st0\">'fifty'</span><span class=\"sy0\">,</span> <span class=\"st0\">'sixty'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'seventy'</span><span class=\"sy0\">,</span> <span class=\"st0\">'eighty'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ninety'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> big <span class=\"sy0\">=</span> <span class=\"br0\">[</span>...<span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">'thousand'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ...<span class=\"br0\">[</span><span class=\"st0\">'m'</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'tr'</span><span class=\"sy0\">,</span> <span class=\"st0\">'quadr'</span><span class=\"sy0\">,</span> <span class=\"st0\">'quint'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'sext'</span><span class=\"sy0\">,</span> <span class=\"st0\">'sept'</span><span class=\"sy0\">,</span> <span class=\"st0\">'oct'</span><span class=\"sy0\">,</span> <span class=\"st0\">'non'</span><span class=\"sy0\">,</span> <span class=\"st0\">'dec'</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> `$<span class=\"br0\">{</span>e<span class=\"br0\">}</span>illion`<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    name <span class=\"sy0\">=</span> `negative $<span class=\"br0\">{</span>sayNumber<span class=\"br0\">(</span><span class=\"sy0\">-</span>value<span class=\"br0\">)</span><span class=\"br0\">}</span>`<br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    name <span class=\"sy0\">=</span> units<span class=\"br0\">[</span>value<span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>quotient<span class=\"sy0\">,</span> remainder<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dm<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    name <span class=\"sy0\">=</span> `$<span class=\"br0\">{</span>tens<span class=\"br0\">[</span>quotient<span class=\"br0\">]</span><span class=\"br0\">}</span> $<span class=\"br0\">{</span>units<span class=\"br0\">[</span>remainder<span class=\"br0\">]</span><span class=\"br0\">}</span>`.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">' zero'</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>quotient<span class=\"sy0\">,</span> remainder<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dm<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    name <span class=\"sy0\">=</span> `$<span class=\"br0\">{</span>sayNumber<span class=\"br0\">(</span>quotient<span class=\"br0\">)</span><span class=\"br0\">}</span> hundred and $<span class=\"br0\">{</span>sayNumber<span class=\"br0\">(</span>remainder<span class=\"br0\">)</span><span class=\"br0\">}</span>`<br/>      .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">' and zero'</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">const</span> chunks <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">const</span> text <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>value <span class=\"sy0\">!==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"br0\">[</span>value<span class=\"sy0\">,</span> remainder<span class=\"br0\">]</span> <span class=\"sy0\">=</span> divMod<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      chunks.<span class=\"me1\">push</span><span class=\"br0\">(</span>remainder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    chunks.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        text.<span class=\"me1\">push</span><span class=\"br0\">(</span>`$<span class=\"br0\">{</span>sayNumber<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">}</span>$<span class=\"br0\">{</span>i <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">''</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span> <span class=\"sy0\">+</span> big<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> e <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          text.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"st0\">'and'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    name <span class=\"sy0\">=</span> text.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">', and,'</span><span class=\"sy0\">,</span> <span class=\"st0\">' and'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> name<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Joy", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>DEFINE units ==<br/>[ \"zero\" \"one\" \"two\" \"three\" \"four\" \"five\" \"six\" \"seven\" \"eight\" \"nine\" \"ten\"<br/>  \"eleven\" \"twelve\" \"thirteen\" \"fourteen\" \"fifteen\" \"sixteen\" \"seventeen\"<br/>  \"eighteen\" \"nineteen\" ];<br/>\u00a0<br/>tens ==<br/>[ \"ten\" \"twenty\" \"thirty\" \"forty\" \"fifty\" \"sixty\" \"seventy\" \"eighty\" \"ninety\" ];<br/>\u00a0<br/>convert6 ==<br/>[1000000 &lt;]<br/>[1000 div swap convert \" thousand \" putchars convert3]<br/>[1000000 div swap convert \" million \" putchars convert3]<br/>ifte;<br/>\u00a0<br/>convert5 ==<br/>[null]<br/>[]<br/>[\" and \" putchars convert]<br/>ifte;<br/>\u00a0<br/>convert4 ==<br/>[1000 &lt;]<br/>[100 div swap units of putchars \" hundred\" putchars convert5]<br/>[convert6]<br/>ifte;<br/>\u00a0<br/>convert3 ==<br/>[null]<br/>[]<br/>[32 putch convert]<br/>ifte;<br/>\u00a0<br/>convert2 ==<br/>[100 &lt;]<br/>[10 div swap pred tens of putchars convert3]<br/>[convert4]<br/>ifte;<br/>\u00a0<br/>convert ==<br/>[20 &lt;]<br/>[units of putchars]<br/>[convert2]<br/>ifte.<br/>\u00a0</pre>"}, {"lang": "jq", "loc": 61, "block": "<pre class=\"text highlighted_source\"># Adapted from the go version.<br/># Tested with jq 1.4<br/>#<br/># say/0 as defined here supports positive and negative integers within<br/># the range of accuracy of jq, or up to the quintillions, whichever is<br/># less.  As of jq version 1.4, jq's integer accuracy is about 10^16.<br/>\u00a0<br/>def say:<br/>\u00a0<br/>  # subfunction zillions recursively handles the thousands,<br/>  # millions, billions, etc.<br/>  #   input: the number<br/>  #   i: which \"illion\" to use<br/>  #   sx: the string so far<br/>  #   output: the updated string<br/>  def zillions(i; sx):<br/>    [\"thousand\", \"million\", \"billion\",<br/>      \"trillion\", \"quadrillion\", \"quintillion\"] as $illions<br/>    | if . == 0 then sx<br/>       else (. / 1000 | floor)<br/>            | (.\u00a0% 1000) as $p<br/>            | zillions(i + 1; <br/>                       if $p &gt; 0 then <br/>                          (($p | say) + \" \" + $illions[i]) as $ix<br/>                          | if sx\u00a0!= \"\" then $ix + \", \" + sx<br/>                            else $ix<br/>                            end<br/>                       else sx<br/>                       end) <br/>       end <br/> \u00a0;<br/>\u00a0<br/>  [ \"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\",<br/>    \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\",<br/>    \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"] as $small<br/>  | [\"ones\", \"ten\", \"twenty\", \"thirty\", \"forty\",<br/>     \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"] as $tens<br/>\u00a0<br/>  | if . == 0 then \"zero\"<br/>    elif . &lt; 0 then \"minus \" + (-(.) | say)<br/>    elif . &lt; 20 then $small[.]<br/>    elif . &lt; 100 then<br/>        $tens[./10|floor] as $t<br/>        | (.\u00a0% 10)<br/>        | if . &gt; 0 then ($t + \" \" + $small[.]) else $t end<br/>    elif . &lt; 1000 then<br/>        ($small[./100|floor] + \" hundred\") as $h<br/>        | (.\u00a0% 100)<br/>        | if . &gt; 0 then $h + \" and \" + (say) else $h end<br/>    else<br/>        # Handle values larger than 1000 by considering<br/>        # the rightmost three digits separately from the rest:<br/>        ((.\u00a0% 1000)<br/>         | if . == 0 then \"\" <br/>           elif . &lt; 100 then \"and \" + say<br/>           else say<br/>           end ) as $sx<br/>        | zillions(0; $sx)<br/>    end\u00a0;<br/>\u00a0<br/>say</pre>"}, {"lang": "Julia", "loc": 80, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>const stext = [\"one\", \"two\", \"three\", \"four\", \"five\",<br/>               \"six\", \"seven\", \"eight\", \"nine\"]<br/>const teentext = [\"eleven\", \"twelve\", \"thirteen\", \"fourteen\",<br/>                  \"fifteen\", \"sixteen\", \"seventeen\",<br/>                  \"eighteen\", \"nineteen\"]<br/>const tenstext = [\"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\",<br/>                  \"sixty\", \"seventy\", \"eighty\", \"ninety\"]<br/>const ordstext = [\"million\", \"billion\", \"trillion\",<br/>                  \"quadrillion\", \"quintillion\", \"sextillion\",<br/>                  \"septillion\", \"octillion\", \"nonillion\",<br/>                  \"decillion\", \"undecillion\", \"duodecillion\",<br/>                  \"tredecillion\", \"quattuordecillion\", \"quindecillion\",<br/>                  \"sexdecillion\", \"septendecillion\", \"octodecillion\",<br/>                  \"novemdecillion\", \"vigintillion\"]<br/>\u00a0<br/>function normalize_digits!{T&lt;:Integer}(a::Array{T,1})<br/>    while  0 &lt; length(a) &amp;&amp; a[end] == 0<br/>        pop!(a)<br/>    end<br/>    return length(a)<br/>end<br/>\u00a0<br/>function digits2text!{T&lt;:Integer}(d::Array{T,1}, use_short_scale=true)<br/>    ndig = normalize_digits!(d)<br/>    0 &lt; ndig || return \"\"<br/>    if ndig &lt; 7<br/>        s = \"\"<br/>        if 3 &lt; ndig<br/>            t = digits2text!(d[1:3])<br/>            s = digits2text!(d[4:end])*\" thousand\"<br/>            0 &lt; length(t) || return s<br/>            if contains(t, \"and\")<br/>                return s*\" \"*t<br/>            else<br/>                return s*\" and \"*t<br/>            end<br/>        end<br/>        if ndig == 3<br/>            s *= stext[pop!(d)]*\" hundred\"<br/>            ndig = normalize_digits!(d)<br/>            0 &lt; ndig || return s<br/>            s *= \" and \"<br/>        end<br/>        1 &lt; ndig || return s*stext[pop!(d)]<br/>        j, i = d<br/>        j\u00a0!= 0 || return s*tenstext[i]<br/>        i\u00a0!= 1 || return s*teentext[j]<br/>        return s*tenstext[i]*\"-\"*stext[j]<br/>    end<br/>    s = digits2text!(d[1:6])<br/>    d = d[7:end]<br/>    dgrp = use_short_scale\u00a0? 3\u00a0: 6<br/>    ord = 0<br/>    while(dgrp &lt; length(d))<br/>        ord += 1<br/>        t = digits2text!(d[1:dgrp])<br/>        d = d[(dgrp+1):end]<br/>        0 &lt; length(t) || continue<br/>        t = t*\" \"*ordstext[ord]<br/>        if length(s) == 0<br/>            s = t<br/>        else<br/>            s = t*\" \"*s<br/>        end<br/>    end<br/>    ord += 1<br/>    t = digits2text!(d)*\" \"*ordstext[ord]<br/>    0 &lt; length(s) || return t<br/>    return t*\" \"*s<br/>end<br/>\u00a0<br/>function num2text{T&lt;:Integer}(n::T, use_short_scale=true)<br/>    -1 &lt; n || return \"minus \"*num2text(-n, use_short_scale)<br/>    0 &lt; n || return \"zero\"<br/>    toobig = use_short_scale\u00a0? big(10)^66\u00a0: big(10)^126<br/>    n &lt; toobig || return \"too big to say\"<br/>    return digits2text!(digits(n, 10), use_short_scale)<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 103, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> names <span class=\"sy0\">=</span> mapOf<span class=\"br0\">(</span><br/>    <span class=\"nu0\">1</span> to <span class=\"st0\">\"one\"</span>,<br/>    <span class=\"nu0\">2</span> to <span class=\"st0\">\"two\"</span>,<br/>    <span class=\"nu0\">3</span> to <span class=\"st0\">\"three\"</span>,<br/>    <span class=\"nu0\">4</span> to <span class=\"st0\">\"four\"</span>,<br/>    <span class=\"nu0\">5</span> to <span class=\"st0\">\"five\"</span>,<br/>    <span class=\"nu0\">6</span> to <span class=\"st0\">\"six\"</span>,<br/>    <span class=\"nu0\">7</span> to <span class=\"st0\">\"seven\"</span>,<br/>    <span class=\"nu0\">8</span> to <span class=\"st0\">\"eight\"</span>,<br/>    <span class=\"nu0\">9</span> to <span class=\"st0\">\"nine\"</span>,<br/>    <span class=\"nu0\">10</span> to <span class=\"st0\">\"ten\"</span>,<br/>    <span class=\"nu0\">11</span> to <span class=\"st0\">\"eleven\"</span>,<br/>    <span class=\"nu0\">12</span> to <span class=\"st0\">\"twelve\"</span>,<br/>    <span class=\"nu0\">13</span> to <span class=\"st0\">\"thirteen\"</span>,<br/>    <span class=\"nu0\">14</span> to <span class=\"st0\">\"fourteen\"</span>,<br/>    <span class=\"nu0\">15</span> to <span class=\"st0\">\"fifteen\"</span>,<br/>    <span class=\"nu0\">16</span> to <span class=\"st0\">\"sixteen\"</span>,<br/>    <span class=\"nu0\">17</span> to <span class=\"st0\">\"seventeen\"</span>,<br/>    <span class=\"nu0\">18</span> to <span class=\"st0\">\"eighteen\"</span>,<br/>    <span class=\"nu0\">19</span> to <span class=\"st0\">\"nineteen\"</span>,<br/>    <span class=\"nu0\">20</span> to <span class=\"st0\">\"twenty\"</span>,<br/>    <span class=\"nu0\">30</span> to <span class=\"st0\">\"thirty\"</span>,<br/>    <span class=\"nu0\">40</span> to <span class=\"st0\">\"forty\"</span>,<br/>    <span class=\"nu0\">50</span> to <span class=\"st0\">\"fifty\"</span>,<br/>    <span class=\"nu0\">60</span> to <span class=\"st0\">\"sixty\"</span>,<br/>    <span class=\"nu0\">70</span> to <span class=\"st0\">\"seventy\"</span>,<br/>    <span class=\"nu0\">80</span> to <span class=\"st0\">\"eighty\"</span>,<br/>    <span class=\"nu0\">90</span> to <span class=\"st0\">\"ninety\"</span><br/><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigNames <span class=\"sy0\">=</span> mapOf<span class=\"br0\">(</span><br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000L to <span class=\"st0\">\"thousand\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"million\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"billion\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"trillion\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"quadrillion\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"quintillion\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>fun numToText<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long, uk<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> 0L<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"zero\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> neg <span class=\"sy0\">=</span> n <span class=\"sy0\">&lt;</span> 0L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxNeg <span class=\"sy0\">=</span> n <span class=\"sy0\">==</span> Long.<span class=\"me1\">MIN_VALUE</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maxNeg<span class=\"br0\">)</span> -<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>neg<span class=\"br0\">)</span> -n <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> digits3 <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">// split number into groups of 3 digits from the right</span><br/>        digits3<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        nn /<span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun threeDigitsToText<span class=\"br0\">(</span>number<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>number <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hundreds <span class=\"sy0\">=</span> number / <span class=\"nu0\">100</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> remainder <span class=\"sy0\">=</span> number <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hundreds <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>hundreds<span class=\"br0\">]</span>, <span class=\"st0\">\" hundred\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>remainder <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>uk<span class=\"br0\">)</span> <span class=\"st0\">\" and \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>remainder <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tens <span class=\"sy0\">=</span> remainder / <span class=\"nu0\">10</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> units <span class=\"sy0\">=</span> remainder <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>tens <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>tens <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>units <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, names<span class=\"br0\">[</span>units<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>remainder<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> strings <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> threeDigitsToText<span class=\"br0\">(</span>digits3<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> text <span class=\"sy0\">=</span> strings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> andNeeded <span class=\"sy0\">=</span> uk <span class=\"sy0\">&amp;&amp;</span> digits3<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> in <span class=\"nu0\">1</span>..<span class=\"nu0\">99</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> big <span class=\"sy0\">=</span> 1000L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>digits3<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> text2 <span class=\"sy0\">=</span> strings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> + <span class=\"st0\">\" \"</span> + bigNames<span class=\"br0\">[</span>big<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>text.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                text2 +<span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>andNeeded<span class=\"br0\">)</span> <span class=\"st0\">\" and \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\", \"</span><br/>                andNeeded <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> andNeeded <span class=\"sy0\">=</span> uk <span class=\"sy0\">&amp;&amp;</span> digits3<span class=\"br0\">[</span>i<span class=\"br0\">]</span> in <span class=\"nu0\">1</span>..<span class=\"nu0\">99</span><br/>            text <span class=\"sy0\">=</span> text2 + text<br/>        <span class=\"br0\">}</span><br/>        big <span class=\"sy0\">*=</span> <span class=\"nu0\">1000</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maxNeg<span class=\"br0\">)</span> text <span class=\"sy0\">=</span> text.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> + <span class=\"st0\">\"eight\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>neg<span class=\"br0\">)</span> <span class=\"st0\">\"minus \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> + text<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> la <span class=\"sy0\">=</span> longArrayOf<span class=\"br0\">(</span><br/>        <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">18</span>, <span class=\"nu0\">22</span>, <span class=\"nu0\">67</span>, <span class=\"nu0\">99</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">105</span>, <span class=\"nu0\">999</span>, -<span class=\"nu0\">1056</span>, <span class=\"nu0\">1000005000</span>,<br/>        <span class=\"nu0\">2074000000</span>, 1234000000745003L, Long.<span class=\"me1\">MIN_VALUE</span><br/>    <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Using US representation:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in la<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>20d<span class=\"st0\">\".format(i)} = ${numToText(i)}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Using UK representation:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in la<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>20d<span class=\"st0\">\".format(i)} = ${numToText(i, true)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logo", "loc": 28, "block": "<pre class=\"text highlighted_source\">make \"numbers {one two three four five six seven eight nine ten <br/>     eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen}<br/>\u00a0<br/>make \"tens {twenty thirty forty fifty sixty seventy eighty ninety}@2<br/>\u00a0<br/>make \"thou [[] thousand million billion trillion]\t\t; expand as desired<br/>\u00a0<br/>to to.english.thou\u00a0:n\u00a0:thou<br/>  if\u00a0:n = 0    [output []]<br/>  if\u00a0:n &lt; 20   [output sentence item\u00a0:n\u00a0:numbers  first\u00a0:thou]<br/>  if\u00a0:n &lt; 100  [output (sentence item int\u00a0:n/10\u00a0:tens<br/>                                 to.english.thou modulo\u00a0:n 10 [[]]<br/>                                 first\u00a0:thou)]<br/>  if\u00a0:n &lt; 1000 [output (sentence item int\u00a0:n/100\u00a0:numbers<br/>                                 \"hundred<br/>                                 to.english.thou modulo\u00a0:n 100 [[]]<br/>                                 first\u00a0:thou)]<br/>  output (sentence to.english.thou int\u00a0:n/1000 butfirst\u00a0:thou<br/>                   to.english.thou modulo\u00a0:n 1000\u00a0:thou)<br/>end<br/>\u00a0<br/>to to.english\u00a0:n<br/>  if\u00a0:n = 0 [output \"zero]<br/>  if\u00a0:n &gt; 0 [output to.english.thou\u00a0:n\u00a0:thou]<br/>  [output sentence \"negative to.english.thou minus\u00a0:n\u00a0:thou]<br/>end<br/>\u00a0<br/>print to.english 1234567  \u00a0; one million two hundred thirty four thousand five hundred sixty seven</pre>"}, {"lang": "Lua", "loc": 37, "block": "<pre class=\"lua highlighted_source\">words <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"one \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"six \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine \"</span><span class=\"br0\">}</span><br/>levels <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"thousand \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"million \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"billion \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"trillion \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quadrillion \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quintillion \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sextillion \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"septillion \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"octillion \"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><br/>iwords <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"ten \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twenty \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifty \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety \"</span><span class=\"br0\">}</span><br/>twords <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"eleven \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twelve \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifteen \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixteen \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen \"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> digits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> i<span class=\"sy0\">,</span> ret <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    i<span class=\"sy0\">,</span> ret <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>\t<span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      n <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t  <span class=\"kw1\">return</span> i<span class=\"sy0\">,</span> ret<br/>\t<span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>level <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/><span class=\"kw1\">function</span> getname<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> dig<span class=\"br0\">)</span> <span class=\"co1\">--stateful, but effective.</span><br/>  level <span class=\"sy0\">=</span> level <span class=\"kw2\">or</span> pos <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>dig <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> name <span class=\"sy0\">=</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> iwords<span class=\"br0\">[</span>dig<span class=\"br0\">]</span> <span class=\"kw2\">or</span> words<span class=\"br0\">[</span>dig<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw2\">and</span> <span class=\"st0\">\"hundred \"</span> <span class=\"kw2\">or</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>level<span class=\"br0\">)</span> <span class=\"kw1\">then</span> name<span class=\"sy0\">,</span> level <span class=\"sy0\">=</span> name <span class=\"sy0\">..</span> levels<span class=\"br0\">[</span><span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>pos <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> name<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> val<span class=\"sy0\">,</span> vword <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> digits<span class=\"br0\">(</span>val<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  vword <span class=\"sy0\">=</span> getname<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"sy0\">..</span> vword<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  vword <span class=\"sy0\">=</span> vword<span class=\"sy0\">:</span><span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">\"ty \"</span> <span class=\"sy0\">..</span> v<span class=\"sy0\">,</span> <span class=\"st0\">\"ty-\"</span> <span class=\"sy0\">..</span> v<span class=\"br0\">)</span><br/>  vword <span class=\"sy0\">=</span> vword<span class=\"sy0\">:</span><span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">\"ten \"</span> <span class=\"sy0\">..</span> v<span class=\"sy0\">,</span> twords<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"sy0\">#</span>vword <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">print</span> <span class=\"st0\">\"zero\"</span> <span class=\"kw1\">else</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>vword<span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 24, "block": "<pre class=\"text highlighted_source\">small = \"zero\"[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", <br/>  \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", <br/>  \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", <br/>  \"nineteen\"]; tens = # &lt;&gt; \"-\" &amp; /@ {\"twenty\", \"thirty\", \"forty\", <br/>   \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"};<br/>big = Prepend[<br/>   \" \" &lt;&gt; # &amp; /@ {\"thousand\", \"million\", \"billion\", \"trillion\", <br/>     \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", <br/>     \"octillion\", \"nonillion\", \"decillion\", \"undecillion\", <br/>     \"duodecillion\", \"tredecillion\"}, \"\"];<br/>name[n_Integer]\u00a0:= \"negative \" &lt;&gt; name[-n] /; n &lt; 0;<br/>name[n_Integer]\u00a0:= small[[n]] /; 0 &lt;= n &lt; 20;<br/>name[n_Integer]\u00a0:= <br/>  StringTrim[tens[[#1 - 1]] &lt;&gt; small[[#2]] &amp; @@ IntegerDigits[n], <br/>    \"-zero\"] /; 10 &lt;= n &lt; 100;<br/>name[n_Integer]\u00a0:= <br/> StringTrim[<br/>   small[[#1]] &lt;&gt; \" hundred and \" &lt;&gt; <a class=\"__cf_email__\" data-cfemail=\"b7d9d6dad2f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#2 &amp; @@ <br/>    IntegerDigits[n, 100], \" and zero\"] /; 100 &lt;= n &lt; 1000; <br/>name[n_Integer]\u00a0:= <br/> <a class=\"__cf_email__\" data-cfemail=\"421136302b2c25082d2b2c02\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Riffle[Select[<br/>    MapThread[StringJoin, {name /@ #, <a class=\"__cf_email__\" data-cfemail=\"96c4f3e0f3e4e5f3d6f4fff1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[[;; <a class=\"__cf_email__\" data-cfemail=\"236f464d44574b63\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#]]}] &amp;@<br/>     IntegerDigits[n, 1000], StringFreeQ[#, \"zero\"] &amp;], \",\"];</pre>"}, {"lang": "Maxima", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>l: [99, 300, 310, 1501, 12609, 512609, 43112609, 77000112609, 2000000000100,<br/>999999999999999999, 0, -99, -1501, -77000112609, -123456789987654321];<br/>map( lambda([n], printf(true, \"~20d ~r~%\", n, n)), l)$<br/>\u00a0</pre>"}, {"lang": "MAXScript", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn numToEng num =<br/>(<br/>\tnum = num as integer -- convert to int<br/>\tlocal originalNumber = num -- store the initial value, to check if it was negative afterwards<br/>\u00a0<br/>\tnum = abs num -- make positive<br/>\tlocal numStr = num as string -- store as string to check the length<br/>\u00a0<br/>\tlocal nonFirstDigits = (if numStr.count &gt; 3 then ((substring numStr ((if mod numStr.count 3 ==0 then 3 else mod numStr.count 3)+1) -1)) else \"0\") -- this is the string of the number without the beginning, i.e 123456 will give 456, 12035 will give 2035<br/>\tlocal singleDigits = #(\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\")<br/>\tlocal ElevenTwenty = #(\"Eleven\",\"Twelve\",\"Thirteen\",\"Fourteen\",\"Fifteen\",\"Sixteen\",\"Seventeen\",\"Eighteen\",\"Nineteen\")<br/>\tlocal tens = #(\"Ten\",\"Twenty\",\"Thirty\",\"Forty\",\"Fifty\",\"Sixty\",\"Seventy\",\"Eighty\",\"Ninety\")<br/>\tlocal big = #(\"Hundred\",\"Thousand\",\"Million\",\"Billion\")<br/>\tlocal ret = \"\" -- this is the value to be returned<br/>\u00a0<br/>\tcase of<br/>\t(<br/>\t\t(num == 0 ): ret += \"Zero\" -- number is zero<br/>\t\t(num &lt; 10): ret += singleDigits[num] -- number is not and smaller than 10<br/>\t\t(num == 10): ret += tens[1] -- number is 10<br/>\t\t(num &lt; 20): ret += elevenTwenty[abs(10-num)] -- number is between 11 and 19<br/>\t\t(num &lt;= 90 and mod num 10 == 0): ret += tens[num/10] -- number is &gt;= 20 and &lt;= 90 and is dividable by 10<br/>\t\t(num &lt; 100): ret += (numToEng (floor(num/10.0)*10) +\" \"+ numtoEng (num-(floor(num/10.0))*10)) -- number is &gt;= 20, &lt; 100 and is not dividable by 10<br/>\t\t(num &lt; 1000): ret += (singledigits[floor(num/100) as integer] + \" \"+big[1]+ (if mod num 100\u00a0!= 0 then (\" and \"+numtoeng (num-(floor(num/100.0)*100))) else \"\")) -- number is &gt;= 100, &lt; 1000 <br/>\t\t(num &gt;= 1000): ret += -- number is &gt;= 1000<br/>\t\t\t(<br/>\t\t\t\tnumtoeng (substring numStr 1 (if mod numStr.count 3 ==0 then 3 else mod numStr.count 3)) + \\<br/>\t\t\t\t\" \" + big[1+((numStr.count-1)/3)] + (if nonFirstDigits as integer == 0 then \"\" else (if nonFirstDigits as integer &lt; 100 then \" and \" else \", \")) + \\<br/>\t\t\t\t(if (mod num 1000 == 0) then \"\" else (numtoeng nonFirstDigits))<br/>\u00a0<br/>\t\t\t)<br/>\t)<br/>\u00a0<br/>\tif originalNumber &lt; 0 and (substring ret 1 8)\u00a0!= \"Negative\" do ret = (\"Negative \"+ret) -- if number is negative <br/>\tret = (toupper ret[1]) + (tolower (substring ret 2 -1)) -- make the first char uppercase and rest lowercase<br/>\treturn ret<br/>)</pre>"}, {"lang": "Nim", "loc": 74, "block": "<pre class=\"text highlighted_source\">import strutils, algorithm<br/>\u00a0<br/>const<br/>  tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\",<br/>          \"eighty\", \"ninety\"]<br/>  small = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\",<br/>           \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\",<br/>           \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]<br/>  huge = [\"\", \"\", \"million\", \"billion\", \"trillion\", \"quadrillion\",<br/>          \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\",<br/>          \"decillion\"]<br/>\u00a0<br/>proc spellInteger(n: int64): string<br/>\u00a0<br/>proc nonzero(c: string, n: int, connect=\"\"): string =<br/>  if n == 0: \"\" else: connect &amp; c &amp; spellInteger(n)<br/>\u00a0<br/>proc lastAnd(num): string =<br/>  var num = num<br/>  if \",\" in num:<br/>    let pos =  num.rfind(\",\")<br/>    var (pre, last) =<br/>      if pos &gt;= 0: (num[0 .. pos-1], num[pos+1 .. num.high])<br/>      else: (\"\", num)<br/>    if \" and \" notin last:<br/>      last = \" and\" &amp; last<br/>    num = [pre, \",\", last].join()<br/>  return num<br/>\u00a0<br/>proc big(e, n): string =<br/>  if e == 0:<br/>    spellInteger(n)<br/>  elif e == 1:<br/>    spellInteger(n) &amp; \" thousand\"<br/>  else:<br/>    spellInteger(n) &amp; \" \" &amp; huge[e]<br/>\u00a0<br/>iterator base1000Rev(n): int =<br/>  var n = n<br/>  while n\u00a0!= 0:<br/>    let r = n mod 1000<br/>    n = n div 1000<br/>    yield r<br/>\u00a0<br/>proc spellInteger(n: int64): string =<br/>  if n &lt; 0:<br/>    \"minus \" &amp; spellInteger(-n)<br/>  elif n &lt; 20:<br/>    small[int(n)]<br/>  elif n &lt; 100:<br/>    let a = n div 10<br/>    let b = n mod 10<br/>    tens[int(a)] &amp; nonzero(\"-\", b)<br/>  elif n &lt; 1000:<br/>    let a = n div 100<br/>    let b = n mod 100<br/>    small[int(a)] &amp; \" hundred\" &amp; nonzero(\" \", b, \" and\")<br/>  else:<br/>    var sq = newSeq[string]()<br/>    var e = 0<br/>    for x in base1000Rev(n):<br/>      if x &gt; 0:<br/>        sq.add big(e, x)<br/>      inc e<br/>    reverse sq<br/>    lastAnd(sq.join(\", \"))<br/>\u00a0<br/>for n in [0, -3, 5, -7, 11, -13, 17, -19, 23, -29]:<br/>  echo align($n, 4),\" -&gt; \",spellInteger(n)<br/>\u00a0<br/>var n = 201021002001<br/>while n\u00a0!= 0:<br/>  echo align($n, 14),\" -&gt; \",spellInteger(n)<br/>  n = n div -10</pre>"}, {"lang": "Objeck", "loc": 95, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> NumberNames <span class=\"br0\">{</span><br/>  small <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  tens <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  big <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    small <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <br/>      <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    tens <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    big <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"thousand\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"million\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"billion\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"trillion\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Int2Text<span class=\"br0\">(</span><span class=\"nu0\">900000001</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/>    Int2Text<span class=\"br0\">(</span><span class=\"nu0\">1234567890</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Int2Text<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">987654321</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Int2Text<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> Int2Text<span class=\"br0\">(</span>number <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    num <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    outP <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>          unit <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>          tmpLng1 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"st0\">\"zero\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    num <span class=\"sy0\">:=</span> number<span class=\"sy0\">-&gt;</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      tmpLng1 <span class=\"sy0\">:=</span> num <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmpLng1 <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> tmpLng1 <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tmp <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>small<span class=\"br0\">[</span>tmpLng1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>outP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        outP <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmpLng1 <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">20</span> <span class=\"sy0\">&amp;</span> tmpLng1 <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmpLng1 <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          tmp <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>tens<span class=\"br0\">[</span><span class=\"br0\">(</span>tmpLng1 <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>outP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          outP <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>          tmp <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>tens<span class=\"br0\">[</span><span class=\"br0\">(</span>tmpLng1 <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>small<span class=\"br0\">[</span><span class=\"br0\">(</span>tmpLng1 <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>outP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          outP <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      tmpLng1 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmpLng1 <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tmp <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>small<span class=\"br0\">[</span>tmpLng1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" hundred \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>outP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        outP <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      num <span class=\"sy0\">/=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        break<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      tmpLng1 <span class=\"sy0\">:=</span> num <span class=\"sy0\">%</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmpLng1 <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tmp <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>big<span class=\"br0\">[</span>unit<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>outP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        outP <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      unit<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span>  <br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      tmp <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"negative \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      tmp<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>outP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      outP <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> outP<span class=\"sy0\">-&gt;</span><span class=\"me1\">Trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 16, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumberFormatter_Class/\"><span class=\"kw5\">NSNumberFormatter</span></a> <span class=\"sy0\">*</span>numberFormatter <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumberFormatter_Class/\"><span class=\"kw5\">NSNumberFormatter</span></a> alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>    numberFormatter.numberStyle <span class=\"sy0\">=</span> NSNumberFormatterSpellOutStyle;<br/>    numberFormatter.locale <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSLocale_Class/\"><span class=\"kw5\">NSLocale</span></a> alloc<span class=\"br0\">]</span> initWithLocaleIdentifier<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"en_US\"</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span>n <span class=\"kw1\">in</span> @<span class=\"br0\">[</span>@900000001, @1234567890, @<span class=\"sy0\">-</span><span class=\"nu0\">987654321</span>, @0, @<span class=\"nu0\">3.14</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span>numberFormatter stringFromNumber<span class=\"sy0\">:</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 57, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> div_mod n d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> d, n <span class=\"kw1\">mod</span> d<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> join <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\", \"</span> <span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> nonzero <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> _, <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"sy0\">|</span> c, n <span class=\"sy0\">-&gt;</span> c <span class=\"sy0\">^</span> <span class=\"br0\">(</span>spell_integer n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">and</span> tens n <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ninety\"</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">and</span> small n <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"st0\">\"zero\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">;</span><br/>     <span class=\"st0\">\"six\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">;</span><br/>     <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">;</span><br/>     <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"nineteen\"</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">and</span> bl <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"m\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"tr\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"quadr\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"quint\"</span><span class=\"sy0\">;</span><br/>                    <span class=\"st0\">\"sext\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"sept\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"oct\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"non\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"dec\"</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">and</span> big <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span>, n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>spell_integer n<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">1</span>, n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>spell_integer n<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"st0\">\" thousand\"</span><br/>  <span class=\"sy0\">|</span> e, n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>spell_integer n<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">^</span> bl<span class=\"sy0\">.</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"st0\">\"illion\"</span><br/>\u00a0<br/><span class=\"kw1\">and</span> uff acc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> a, b <span class=\"sy0\">=</span> div_mod n <span class=\"nu0\">1000</span> <span class=\"kw1\">in</span><br/>      uff <span class=\"br0\">(</span>b<span class=\"sy0\">::</span>acc<span class=\"br0\">)</span> a<br/>\u00a0<br/><span class=\"kw1\">and</span> spell_integer <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinvalid_arg\"><span class=\"kw3\">invalid_arg</span></a> <span class=\"st0\">\"spell_integer: negative input\"</span><br/>  <span class=\"sy0\">|</span> n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span> <span class=\"sy0\">-&gt;</span> small n<br/>  <span class=\"sy0\">|</span> n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> a, b <span class=\"sy0\">=</span> div_mod n <span class=\"nu0\">10</span> <span class=\"kw1\">in</span><br/>      <span class=\"br0\">(</span>tens a<span class=\"br0\">)</span> <span class=\"sy0\">^</span> nonzero<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, b<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> a, b <span class=\"sy0\">=</span> div_mod n <span class=\"nu0\">100</span> <span class=\"kw1\">in</span><br/>      <span class=\"br0\">(</span>small a<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"st0\">\" hundred\"</span> <span class=\"sy0\">^</span> nonzero<span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, b<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> seg <span class=\"sy0\">=</span> <span class=\"br0\">(</span>uff <span class=\"br0\">[</span><span class=\"br0\">]</span> n<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> _, segn <span class=\"sy0\">=</span><br/>        <span class=\"co1\">(* just add the index of the item in the list *)</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left<br/>          <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>i,acc<span class=\"br0\">)</span> v <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i, <span class=\"br0\">(</span>i,v<span class=\"br0\">)</span><span class=\"sy0\">::</span>acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>          seg<br/>      <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> fsegn <span class=\"sy0\">=</span><br/>        <span class=\"co1\">(* remove right part \"zero\" *)</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter<br/>          <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>_,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span> <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>          segn<br/>      <span class=\"kw1\">in</span><br/>      join<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map big fsegn<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "PARI/GP", "loc": 34, "block": "<pre class=\"parigp highlighted_source\">Eng<span class=\"br0\">(</span>n<span class=\"sy0\">:</span><span class=\"kw2\">int</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span>s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu1\">1000000</span><span class=\"sy0\">,</span><br/>\t\ttmp <span class=\"sy0\">=</span> n<span class=\"sy0\">\\</span><span class=\"nu1\">1000000</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>Eng<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" million\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">-=</span> tmp <span class=\"sy0\">*</span> <span class=\"nu1\">1000000</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu1\">1000</span><span class=\"sy0\">,</span><br/>\t\ttmp <span class=\"sy0\">=</span> n<span class=\"sy0\">\\</span><span class=\"nu1\">1000</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>Eng<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" thousand\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">-=</span> tmp <span class=\"sy0\">*</span> <span class=\"nu1\">1000</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu1\">100</span><span class=\"sy0\">,</span><br/>\t\ttmp <span class=\"sy0\">=</span> n<span class=\"sy0\">\\</span><span class=\"nu1\">100</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>Edigit<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" hundred\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">-=</span> tmp <span class=\"sy0\">*</span> <span class=\"nu1\">100</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu1\">20</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninteen\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttmp <span class=\"sy0\">=</span> n<span class=\"sy0\">\\</span><span class=\"nu1\">10</span><span class=\"sy0\">;</span><br/>\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>tmp<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tn <span class=\"sy0\">-=</span> tmp <span class=\"sy0\">*</span> <span class=\"nu1\">10</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> Edigit<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Edigit<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\t<span class=\"br0\">[</span><span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 82, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> NumberNames<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  smallies<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">19</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <br/>              <span class=\"br0\">(</span><span class=\"st0\">'one'</span><span class=\"sy1\">,</span> <span class=\"st0\">'two'</span><span class=\"sy1\">,</span> <span class=\"st0\">'three'</span><span class=\"sy1\">,</span> <span class=\"st0\">'four'</span><span class=\"sy1\">,</span> <span class=\"st0\">'five'</span><span class=\"sy1\">,</span> <span class=\"st0\">'six'</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">'seven'</span><span class=\"sy1\">,</span> <span class=\"st0\">'eight'</span><span class=\"sy1\">,</span> <span class=\"st0\">'nine'</span><span class=\"sy1\">,</span> <span class=\"st0\">'ten'</span><span class=\"sy1\">,</span> <span class=\"st0\">'eleven'</span><span class=\"sy1\">,</span> <br/>      \t       <span class=\"st0\">'twelve'</span><span class=\"sy1\">,</span> <span class=\"st0\">'thirteen'</span><span class=\"sy1\">,</span> <span class=\"st0\">'fourteen'</span><span class=\"sy1\">,</span> <span class=\"st0\">'fifteen'</span><span class=\"sy1\">,</span> <br/>\t       <span class=\"st0\">'sixteen'</span><span class=\"sy1\">,</span> <span class=\"st0\">'seventeen'</span><span class=\"sy1\">,</span> <span class=\"st0\">'eighteen'</span><span class=\"sy1\">,</span> <span class=\"st0\">'nineteen'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  tens<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">..</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <br/>          <span class=\"br0\">(</span><span class=\"st0\">'twenty'</span><span class=\"sy1\">,</span> <span class=\"st0\">'thirty'</span><span class=\"sy1\">,</span> <span class=\"st0\">'forty'</span><span class=\"sy1\">,</span> <span class=\"st0\">'fifty'</span><span class=\"sy1\">,</span> <br/>           <span class=\"st0\">'sixty'</span><span class=\"sy1\">,</span> <span class=\"st0\">'seventy'</span><span class=\"sy1\">,</span> <span class=\"st0\">'eighty'</span><span class=\"sy1\">,</span> <span class=\"st0\">'ninety'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> domaxies<span class=\"br0\">(</span>number<span class=\"sy1\">:</span> int64<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">const</span><br/>    maxies<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <br/>              <span class=\"br0\">(</span><span class=\"st0\">' thousand'</span><span class=\"sy1\">,</span> <span class=\"st0\">' million'</span><span class=\"sy1\">,</span> <span class=\"st0\">' billion'</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">' trillion'</span><span class=\"sy1\">,</span> <span class=\"st0\">' quadrillion'</span><span class=\"sy1\">,</span> <span class=\"st0\">' quintillion'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    domaxies <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> number &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>      domaxies <span class=\"sy1\">:</span><span class=\"sy3\">=</span> maxies<span class=\"br0\">[</span>number<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> doHundreds<span class=\"br0\">(</span> number<span class=\"sy1\">:</span> int64<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    doHundreds <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> number &gt; <span class=\"nu0\">99</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      doHundreds <span class=\"sy1\">:</span><span class=\"sy3\">=</span> smallies<span class=\"br0\">[</span>number <span class=\"kw1\">div</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      doHundreds <span class=\"sy1\">:</span><span class=\"sy3\">=</span> doHundreds <span class=\"sy3\">+</span> <span class=\"st0\">' hundred'</span><span class=\"sy1\">;</span><br/>      number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> number <span class=\"kw1\">mod</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> number &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        doHundreds <span class=\"sy1\">:</span><span class=\"sy3\">=</span> doHundreds <span class=\"sy3\">+</span> <span class=\"st0\">' and '</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> number &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">20</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      doHundreds <span class=\"sy1\">:</span><span class=\"sy3\">=</span> doHundreds <span class=\"sy3\">+</span> tens<span class=\"br0\">[</span>number <span class=\"kw1\">div</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> number <span class=\"kw1\">mod</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> number &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        doHundreds <span class=\"sy1\">:</span><span class=\"sy3\">=</span> doHundreds <span class=\"sy3\">+</span> <span class=\"st0\">'-'</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> &lt; number<span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>number &lt; <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      doHundreds <span class=\"sy1\">:</span><span class=\"sy3\">=</span> doHundreds <span class=\"sy3\">+</span> smallies<span class=\"br0\">[</span>number<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> spell<span class=\"br0\">(</span>number<span class=\"sy1\">:</span> int64<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    scaleFactor<span class=\"sy1\">:</span> int64 <span class=\"sy3\">=</span> <span class=\"nu0\">1000000000000000000</span><span class=\"sy1\">;</span><br/>    maxieStart<span class=\"sy1\">,</span> h<span class=\"sy1\">:</span> int64<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    spell <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    maxieStart <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> number &lt; <span class=\"nu0\">20</span> <span class=\"kw1\">then</span><br/>      spell <span class=\"sy1\">:</span><span class=\"sy3\">=</span> smallies<span class=\"br0\">[</span>number<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> scaleFactor &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> number &gt; scaleFactor <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>\th <span class=\"sy1\">:</span><span class=\"sy3\">=</span> number <span class=\"kw1\">div</span> scaleFactor<span class=\"sy1\">;</span><br/>\tspell <span class=\"sy1\">:</span><span class=\"sy3\">=</span> spell <span class=\"sy3\">+</span> doHundreds<span class=\"br0\">(</span>h<span class=\"br0\">)</span> <span class=\"sy3\">+</span> domaxies<span class=\"br0\">(</span>maxieStart<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tnumber <span class=\"sy1\">:</span><span class=\"sy3\">=</span> number <span class=\"kw1\">mod</span> scaleFactor<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">if</span> number &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t  spell <span class=\"sy1\">:</span><span class=\"sy3\">=</span> spell <span class=\"sy3\">+</span> <span class=\"st0\">', '</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      scaleFactor <span class=\"sy1\">:</span><span class=\"sy3\">=</span> scaleFactor <span class=\"kw1\">div</span> <span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>maxieStart<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">234</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">234</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">7342</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">7342</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">32784</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">32784</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">234345</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">234345</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">2343451</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">2343451</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">23434534</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">23434534</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">234345456</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">234345456</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">2343454569</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">2343454569</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">2343454564356</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">2343454564356</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">2345286538456328</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> spell<span class=\"br0\">(</span><span class=\"nu0\">2345286538456328</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Lingua<span class=\"sy0\">::</span><span class=\"me2\">EN</span><span class=\"sy0\">::</span><span class=\"me2\">Numbers</span> <span class=\"st_h\">'num2en'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> num2en<span class=\"br0\">(</span><span class=\"nu0\">123456789</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 34, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"sy0\">@</span><span class=\"kw3\">I</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>zero <span class=\"kw3\">one</span>    two    three    four     five    six     seven     eight    nine<br/>               ten  eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">constant</span> <span class=\"sy0\">@</span><span class=\"kw1\">X</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>    <span class=\"kw1\">X</span>      twenty thirty   forty    fifty   sixty   seventy   eighty   ninety<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@C</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw3\">I</span> <span class=\"kw1\">X</span><span class=\"sy0\">~</span> <span class=\"st_h\">' hundred'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@M</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> thousand<span class=\"sy0\">&gt;,</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>m b tr quadr quint sext sept oct non<span class=\"sy0\">&gt;,</span><br/>    <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span>un duo tre quattuor quin sex septen octo novem<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">flat</span> <span class=\"kw1\">X</span><span class=\"sy0\">~</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">&lt;</span>dec vigint trigint quadragint quinquagint sexagint septuagint octogint nonagint<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'cent'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">flat</span> <span class=\"kw1\">X</span><span class=\"sy0\">~</span> <span class=\"st_h\">'illion'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">flat</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> int<span class=\"sy0\">-</span>name <span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$num</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'-'</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"negative {int-name($num.substr(1))}\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$num</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'0'</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy0\">@</span><span class=\"kw3\">I</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">join</span> <span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"kw3\">reverse</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">$num</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\d ** 1..3/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">.</span><span class=\"kw3\">comb</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"kw1\">or</span> <span class=\"re0\">$x</span> <span class=\"kw1\">or</span> <span class=\"re0\">$c</span> <span class=\"br0\">{</span><br/>            take <span class=\"kw3\">join</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> gather <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"re0\">$c</span> <span class=\"br0\">{</span> take <span class=\"re0\">@C</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"kw1\">and</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span> take <span class=\"sy0\">@</span><span class=\"kw3\">I</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span> take <span class=\"sy0\">@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span> take <span class=\"sy0\">@</span><span class=\"kw3\">I</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                take <span class=\"re0\">@M</span><span class=\"br0\">[</span><span class=\"re0\">$m</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"WOW! ZILLIONS!<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$m</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"st_h\">''</span> <span class=\"kw1\">ne</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> prompt<span class=\"br0\">(</span><span class=\"st0\">\"Number: \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> int<span class=\"sy0\">-</span>name<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 129, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo/rosetta/Number_names.exw<br/>--<br/>constant twenties = {\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",<br/>    \"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\"}<br/>\u00a0<br/>function Twenty(integer N)<br/>    return twenties[mod(N,20)+1]<br/>end function<br/>\u00a0<br/>constant decades = {\"twenty\",\"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\",\"eighty\",\"ninety\"}<br/>\u00a0<br/>function Decade(integer N)<br/>    return decades[mod(N,10)-1]<br/>end function<br/>\u00a0<br/>function Hundred(integer N)<br/>    if N&lt;20 then<br/>        return Twenty(N)<br/>    elsif mod(N,10)=0 then<br/>        return Decade(mod(floor(N/10),10))<br/>    end if<br/>    return Decade(floor(N/10)) &amp; '-' &amp; Twenty(mod(N,10))<br/>end function<br/>\u00a0<br/>function Thousand(integer N, string withand)<br/>    if N&lt;100 then<br/>        return withand &amp; Hundred (N);<br/>    elsif mod(N,100)=0 then<br/>        return withand &amp; Twenty(floor(N/100))&amp;\" hundred\"<br/>    end if<br/>    return Twenty(floor(N/100)) &amp; \" hundred and \" &amp; Hundred(mod(N,100))<br/>end function<br/>\u00a0<br/>constant orders = {{power(10,15),\"quadrillion\"},<br/>                   {power(10,12),\"trillion\"},<br/>                   {power(10,9),\"billion\"},<br/>                   {power(10,6),\"million\"},<br/>                   {power(10,3),\"thousand\"}}<br/>\u00a0<br/>function Triplet(atom N)<br/>atom Order, High, Low<br/>string Name, res = \"\"<br/>integer n<br/>    for i=1 to length(orders) do<br/>        {Order,Name} = orders[i]<br/>        High = floor(N/Order)<br/>        Low = mod(N,Order)<br/>        if High!=0 then<br/>            res &amp;= Thousand(High,\"\")&amp;' '&amp;Name<br/>        end if<br/>        N = Low<br/>        if Low=0 then exit end if<br/>        if length(res) and High!=0 then<br/>            res &amp;= \", \"<br/>        end if<br/>    end for<br/>    if N!=0 or res=\"\" then<br/>        res &amp;= Thousand(floor(N),iff(res=\"\"?\"\":\"and \"))<br/>        N = abs(mod(N,1))<br/>        if N&gt;1e-6 then<br/>            res &amp;= \" point\"<br/>            for i=1 to 10 do<br/>                n = floor(N*10.0000001)<br/>                res &amp;= ' '&amp;twenties[n+1]<br/>                N = N*10-n<br/>                if abs(N)&lt;1e-6 then exit end if<br/>            end for<br/>        end if<br/>    end if<br/>    return res<br/>end function<br/>\u00a0<br/>global function spell(atom N)<br/>string res = \"\"<br/>    if N&lt;0 then<br/>        res = \"minus \"<br/>        N = -N<br/>    end if<br/>    res &amp;= Triplet(N)<br/>    return res<br/>end function<br/>\u00a0<br/>global <br/>constant Samples = {99, 300, 310, 417,1_501, 12_609, 200000000000100, 999999999999999,<br/>                    -123456787654321,102003000400005,1020030004,102003,102,1,0,-1,-99, <br/>                    -1501,1234,12.34,10000001.2,1E-3,-2.7182818,<br/>                    201021002001,-20102100200,2010210020,-201021002,20102100,-2010210,<br/>                    201021,-20102,2010,-201,20,-2}<br/>\u00a0<br/>global function smartp(atom N)<br/>string res<br/>    if N=floor(N) then return sprintf(\"%d\",N) end if<br/>    res = sprintf(\"%18.8f\",N)<br/>    if find('.',res) then<br/>        res = trim_tail(res,\"0\")<br/>    end if<br/>    return res<br/>end function<br/>\u00a0<br/>procedure main()<br/>atom si<br/>    for i=1 to length(Samples) do<br/>        si = Samples[i]<br/>        printf(1,\"%18s\u00a0%s\\n\",{smartp(si),spell(si)})<br/>    end for<br/>end procedure<br/>\u00a0<br/>-- from Executable_library#Phix --<br/>function isMainOrInclude()<br/>-- returns 1 if called from the main file, 0 if from an include<br/>integer res<br/>    #ilASM{<br/>        [32]<br/>            mov eax,[ebp+20]    -- prev_ebp<br/>            mov eax,[eax+8]     -- rtn<br/>            mov [res],eax<br/>        [64]<br/>            mov rax,[rbp+40]    -- prev_ebp<br/>            mov rax,[rax+16]    -- rtn<br/>            mov [res],rax<br/>        []<br/>          }<br/>    return res=21 -- (21=T_maintls)<br/>end function<br/>\u00a0<br/>if isMainOrInclude() then<br/>    main()<br/>end if</pre>"}, {"lang": "PHP", "loc": 57, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$orderOfMag</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Hundred'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Thousand,'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Million,'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Billion,'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Trillion,'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$smallNumbers</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Zero'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'One'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Two'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Three'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Four'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Five'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Six'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Seven'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Eight'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Nine'</span><span class=\"sy0\">,</span><br/><span class=\"st_h\">'Ten'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Eleven'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Twelve'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Thirteen'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Fourteen'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Fifteen'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Sixteen'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Seventeen'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Eighteen'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Nineteen'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$decades</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Twenty'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Thirty'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Forty'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Fifty'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Sixty'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Seventy'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Eighty'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Ninety'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> NumberToEnglish<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw2\">global</span> <span class=\"re0\">$orderOfMag</span><span class=\"sy0\">,</span> <span class=\"re0\">$smallNumbers</span><span class=\"sy0\">,</span> <span class=\"re0\">$decades</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$isLast</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$num</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Negative '</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$num</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/abs\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"br0\">(</span>int<span class=\"br0\">)</span> <span class=\"re0\">$thisPart</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"re0\">$num</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"co1\">// Number still too big, work on a smaller chunk</span><br/>      <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> NumberToEnglish<span class=\"br0\">(</span><span class=\"br0\">(</span>int<span class=\"br0\">)</span> <a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"re0\">$num</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$isLast</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"co1\">// do translation stuff</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"re0\">$isLast</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$str</span> <span class=\"sy0\">==</span> <span class=\"st_h\">''</span> <span class=\"sy0\">||</span> <span class=\"re0\">$str</span> <span class=\"sy0\">==</span> <span class=\"st_h\">'Negative '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">// This is either a very small number or the most significant digits of the number. Either way we don't want a preceeding \"and\"</span><br/>      <span class=\"re0\">$and</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">else</span><br/>      <span class=\"re0\">$and</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' and '</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$thisPart</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"co1\">// Hundreds part of the number chunk</span><br/>      <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><span class=\"re0\">$isLast</span>\u00a0? <span class=\"st_h\">''</span> <span class=\"sy0\">:</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"{<span class=\"es4\">$smallNumbers</span>[<span class=\"es4\">$thisPart</span>/100]} <span class=\"es4\">{$orderOfMag[0]}</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$thisPart</span> <span class=\"sy0\">%=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         <span class=\"co1\">// There is nothing else to do for this chunk (was a multiple of 100)</span><br/>         <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\" {<span class=\"es4\">$orderOfMag</span>[<span class=\"es4\">$count</span>]}\"</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">return</span> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"re0\">$and</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' and '</span><span class=\"sy0\">;</span>  <span class=\"co1\">// Set up our and string to the word \"and\" since there is something in the hundreds place of this chunk</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$thisPart</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"co1\">// Tens part of the number chunk</span><br/>      <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"<span class=\"es4\">{$and}</span>{<span class=\"es4\">$decades</span>[<span class=\"es4\">$thisPart</span> /10]}\"</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$and</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span> <span class=\"co1\">// Make sure we don't have any extranious \"and\"s</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$thisPart</span> <span class=\"sy0\">%=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">return</span> <span class=\"re0\">$str</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">\" {<span class=\"es4\">$orderOfMag</span>[<span class=\"es4\">$count</span>]}\"</span> <span class=\"sy0\">:</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$thisPart</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$thisPart</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">// Ones part of the number chunk</span><br/>      <span class=\"kw1\">return</span> <span class=\"re0\">$str</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es4\">{$and}</span>{<span class=\"es4\">$smallNumbers</span>[(int) <span class=\"es4\">$thisPart</span>]} \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>\u00a0? <span class=\"re0\">$orderOfMag</span><span class=\"br0\">[</span><span class=\"re0\">$count</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><span class=\"re0\">$thisPart</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$thisPart</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">// The number is zero</span><br/>      <span class=\"kw1\">return</span> <span class=\"re0\">$str</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"{<span class=\"es4\">$smallNumbers</span>[(int)<span class=\"es4\">$thisPart</span>]}\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 22, "block": "<pre class=\"text highlighted_source\">(de numName (N)<br/>   (cond<br/>      ((=0 N) \"zero\")<br/>      ((lt0 N) (pack \"minus \" (numName (- N))))<br/>      (T (numNm N)) ) )<br/>\u00a0<br/>(de numNm (N)<br/>   (cond<br/>      ((=0 N))<br/>      ((&gt; 14 N)<br/>         (get '(\"one\" \"two\" \"three\" \"four\" \"five\" \"six\" \"seven\" \"eight\" \"nine\" \"ten\" \"eleven\" \"twelve\" \"thirteen\") N) )<br/>      ((= 15 N) \"fifteen\")<br/>      ((= 18 N) \"eighteen\")<br/>      ((&gt; 20 N) (pack (numNm (% N 10)) \"teen\"))<br/>      ((&gt; 100 N)<br/>         (pack<br/>            (get '(\"twen\" \"thir\" \"for\" \"fif\" \"six\" \"seven\" \"eigh\" \"nine\") (dec (/ N 10)))<br/>            \"ty\"<br/>            (unless (=0 (% N 10))<br/>               (pack \"-\" (numNm (% N 10))) ) ) )<br/>      ((rank N '((100 . \"hundred\") (1000 . \"thousand\") (1000000 . \"million\")))<br/>         (pack (numNm (/ N (car @))) \" \" (cdr @) \" \" (numNm (% N (car @)))) ) ) )</pre>"}, {"lang": "PL/I", "loc": 54, "block": "<pre class=\"text highlighted_source\">   declare integer_names (0:20) character (9) varying static initial<br/>      ('zero',  'one',   'two',  'three', 'four',   'five', 'six',<br/>       'seven', 'eight', 'nine', 'ten',   'eleven', 'twelve',<br/>       'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen',<br/>       'eighteen', 'nineteen', 'twenty' );<br/>   declare x(10) character (7) varying static initial<br/>      ('ten', 'twenty', 'thirty', 'fourty', 'fifty',<br/>       'sixty', 'seventy', 'eighty', 'ninety', 'hundred');<br/>   declare y(0:5) character (10) varying static initial<br/>      ('', '', ' thousand ', ' million ', ' billion ', ' trillion ');<br/>   declare (i, j, m, t) fixed binary (31);<br/>   declare (units, tens, hundreds, thousands) fixed binary (7);<br/>   declare (h, v, value) character (200) varying;<br/>   declare (d, k, n) fixed decimal (15);<br/>   declare three_digits fixed decimal (3);<br/>\u00a0<br/>      value = '';<br/>      i = 5;<br/>      k = n;<br/>      do d = 1000000000000 repeat d/1000 while (d &gt; 0);<br/>         i = i - 1;<br/>         three_digits = k/d;<br/>         k = mod(k, d);<br/>         if three_digits = 0 then iterate;<br/>\u00a0<br/>         units = mod(three_digits, 10);<br/>         t = three_digits / 10;<br/>         tens = mod(t, 10);<br/>         hundreds = three_digits / 100;<br/>         m = mod(three_digits, 100);<br/>         if m &lt;= 20 then<br/>            v = integer_names(m);<br/>         else if units = 0 then<br/>            v = '';<br/>         else<br/>            v = integer_names(units);<br/>         if tens &gt;= 2 &amp; units ^= 0 then<br/>            v = x(tens) || v;<br/>         else if tens &gt; 2 &amp; units = 0 then<br/>            v = v || x(tens);<br/>\u00a0<br/>         if units + tens = 0 then<br/>            if n &gt; 0 then  v = '';<br/>         if hundreds &gt; 0 then<br/>            h = integer_names(hundreds) || ' hundred ';<br/>         else<br/>            h = '';<br/>         if three_digits &gt; 100 &amp; (tens + units &gt; 0) then<br/>            v = 'and ' || v;<br/>         if i = 1 &amp; value ^= '' &amp; three_digits &lt;= 9 then<br/>            v = 'and ' || v;<br/>         value = value ||h || v || y(i);<br/>      end;<br/>      put skip edit (trim(N), ' = ', value) (a);</pre>"}, {"lang": "PowerBASIC", "loc": 68, "block": "<pre class=\"text highlighted_source\">FUNCTION int2Text (number AS QUAD) AS STRING<br/>    IF 0 = number THEN<br/>        FUNCTION = \"zero\"<br/>        EXIT FUNCTION<br/>    END IF<br/>\u00a0<br/>    DIM num AS QUAD, outP AS STRING, unit AS LONG<br/>    DIM tmpLng1 AS QUAD<br/>\u00a0<br/>    DIM small(1 TO 19) AS STRING, tens(7) AS STRING, big(5) AS STRING<br/>\u00a0<br/>    DIM tmpInt AS LONG, dcnt AS LONG<br/>\u00a0<br/>    ARRAY ASSIGN small() = \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", _<br/>                           \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", _<br/>                           \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", _<br/>                           \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"<br/>    ARRAY ASSIGN tens() = \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", _<br/>                          \"seventy\", \"eighty\", \"ninety\"<br/>    ARRAY ASSIGN big() = \"thousand\", \"million\", \"billion\", \"trillion\", _<br/>                         \"quadrillion\", \"quintillion\"<br/>\u00a0<br/>    num = ABS(number)<br/>\u00a0<br/>    DO<br/>        tmpLng1 = num MOD 100<br/>        SELECT CASE tmpLng1<br/>            CASE 1 TO 19<br/>                outP = small(tmpLng1) + \" \" + outP<br/>            CASE 20 TO 99<br/>                SELECT CASE tmpLng1 MOD 10<br/>                    CASE 0<br/>                        outP = tens((tmpLng1 \\ 10) - 2) + \" \" + outP<br/>                    CASE ELSE<br/>                        outP = tens((tmpLng1 \\ 10) - 2) + \"-\" + small(tmpLng1 MOD 10) + \" \" + outP<br/>                END SELECT<br/>        END SELECT<br/>\u00a0<br/>        tmpLng1 = (num MOD 1000) \\ 100<br/>        IF tmpLng1 THEN<br/>            outP = small(tmpLng1) + \" hundred \" + outP<br/>        END IF<br/>\u00a0<br/>        num = num \\ 1000<br/>        IF num &lt; 1 THEN EXIT DO<br/>\u00a0<br/>        tmpLng1 = num MOD 1000<br/>        IF tmpLng1 THEN outP = big(unit) + \" \" + outP<br/>\u00a0<br/>        unit = unit + 1<br/>    LOOP<br/>\u00a0<br/>    IF number &lt; 0 THEN outP = \"negative \" + outP<br/>\u00a0<br/>    FUNCTION = RTRIM$(outP)<br/>END FUNCTION<br/>\u00a0<br/>\u00a0<br/>FUNCTION PBMAIN () AS LONG<br/>    DIM n AS QUAD<br/>\u00a0<br/>    #IF\u00a0%DEF(%PB_CC32)<br/>        INPUT \"Gimme a number! \", n<br/>    #ELSE<br/>        n = VAL(INPUTBOX$(\"Gimme a number!\", \"Now!\"))<br/>    #ENDIF<br/>   \u00a0? int2Text(n)<br/>END FUNCTION</pre>"}, {"lang": "PowerShell", "loc": 133, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>NumberName<br/><span class=\"br0\">{</span><br/>  <span class=\"coMULTI\">&lt;#<br/>    .SYNOPSIS<br/>        Spells out a number in English.<br/>    .DESCRIPTION<br/>        Spells out a number in English in the range of 0 to 999,999,999.<br/>    .NOTES<br/>        The code for this function was copied (almost word for word) from the C#<br/>        example on this page to show how similar Powershell is to C#.<br/>    .PARAMETER Number<br/>        One or more integers in the range of 0 to 999,999,999.<br/>    .EXAMPLE<br/>        Get-NumberName -Number 666<br/>    .EXAMPLE<br/>        Get-NumberName 1, 234, 31337, 987654321<br/>    .EXAMPLE<br/>        1, 234, 31337, 987654321 | Get-NumberName<br/>  #&gt;</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> ValueFromPipeline<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidateRange<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">999999999</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Number</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    Begin<br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$incrementsOfOne</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"zero\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span>       <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span><br/>                                     <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span><br/>                                     <span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span><br/>                                     <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen\"</span><br/>\u00a0<br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$incrementsOfTen</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourty\"</span><span class=\"sy0\">,</span><br/>                                     <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span><br/>\u00a0<br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$millionName</span>  <span class=\"sy0\">=</span> <span class=\"st0\">\"million\"</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$thousandName</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"thousand\"</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$hundredName</span>  <span class=\"sy0\">=</span> <span class=\"st0\">\"hundred\"</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$andName</span>      <span class=\"sy0\">=</span> <span class=\"st0\">\"and\"</span><br/>\u00a0<br/>        <span class=\"kw3\">function</span> GetName<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$remainder</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>                <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>ParseTriplet <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::DivRem<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1000000</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"re3\">ref</span><span class=\"br0\">]</span><span class=\"re0\">$remainder</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> <span class=\"re0\">$millionName</span><br/>                <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$remainder</span><br/>\u00a0<br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"re0\">$output</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$output</span>.Length <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\", \"</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"re0\">$remainder</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>                <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>ParseTriplet <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::DivRem<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"re3\">ref</span><span class=\"br0\">]</span><span class=\"re0\">$remainder</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> <span class=\"re0\">$thousandName</span><br/>                <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$remainder</span><br/>\u00a0<br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"re0\">$output</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$output</span>.Length <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\", \"</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>ParseTriplet <span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw3\">return</span> <span class=\"re0\">$output</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">function</span> ParseTriplet<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$remainder</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>                <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$incrementsOfOne</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::DivRem<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"re3\">ref</span><span class=\"br0\">]</span><span class=\"re0\">$remainder</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> <span class=\"re0\">$hundredName</span><br/>                <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$remainder</span><br/>\u00a0<br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"re0\">$output</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$output</span>.Length <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> <span class=\"re0\">$andName</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$remainder</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>                <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$incrementsOfTen</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::DivRem<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"re3\">ref</span><span class=\"br0\">]</span><span class=\"re0\">$remainder</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$remainder</span><br/>\u00a0<br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"re0\">$output</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$output</span>.Length <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\" \"</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$incrementsOfOne</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\u00a0<br/>            <span class=\"kw3\">return</span> <span class=\"re0\">$output</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    Process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Number</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                Number <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><br/>                Name   <span class=\"sy0\">=</span> GetName <span class=\"re0\">$n</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">234</span><span class=\"sy0\">,</span> <span class=\"nu0\">31337</span><span class=\"sy0\">,</span> <span class=\"nu0\">987654321</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>NumberName<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 121, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">DataSection</span><br/>  numberNames:<br/>  <span class=\"co1\">;small</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"one\"</span>, <span class=\"st0\">\"two\"</span>, <span class=\"st0\">\"three\"</span>, <span class=\"st0\">\"four\"</span>, <span class=\"st0\">\"five\"</span>, <span class=\"st0\">\"six\"</span>, <span class=\"st0\">\"seven\"</span>, <span class=\"st0\">\"eight\"</span>, <span class=\"st0\">\"nine\"</span>, <span class=\"st0\">\"ten\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"eleven\"</span>, <span class=\"st0\">\"twelve\"</span>, <span class=\"st0\">\"thirteen\"</span>, <span class=\"st0\">\"fourteen\"</span>, <span class=\"st0\">\"fifteen\"</span>, <span class=\"st0\">\"sixteen\"</span>, <span class=\"st0\">\"seventeen\"</span>, <span class=\"st0\">\"eighteen\"</span>, <span class=\"st0\">\"nineteen\"</span><br/>  <span class=\"co1\">;tens</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"twenty\"</span>, <span class=\"st0\">\"thirty\"</span>, <span class=\"st0\">\"forty\"</span>, <span class=\"st0\">\"fifty\"</span>, <span class=\"st0\">\"sixty\"</span>, <span class=\"st0\">\"seventy\"</span>, <span class=\"st0\">\"eighty\"</span>, <span class=\"st0\">\"ninety\"</span><br/>  <span class=\"co1\">;big, non-Chuquet system </span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"thousand\"</span>, <span class=\"st0\">\"million\"</span>, <span class=\"st0\">\"billion\"</span>, <span class=\"st0\">\"trillion\"</span>, <span class=\"st0\">\"quadrillion\"</span>, <span class=\"st0\">\"quintillion\"</span>, <span class=\"st0\">\"sextillion\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"septillion\"</span>, <span class=\"st0\">\"octillion\"</span>, <span class=\"st0\">\"nonillion\"</span>, <span class=\"st0\">\"decillion\"</span>, <span class=\"st0\">\"undecillion\"</span>, <span class=\"st0\">\"duodecillion\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"tredecillion\"</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s numberWords<span class=\"br0\">(</span>number.s<span class=\"br0\">)</span><br/>  <span class=\"co1\">;handles integers from -1E45 to +1E45</span><br/>  <span class=\"kw1\">Static</span> isInitialized <span class=\"sy0\">=</span> #False<br/>  <span class=\"kw1\">Static</span> <span class=\"kw1\">Dim</span> small.s<span class=\"br0\">(</span><span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> <span class=\"kw1\">Dim</span> tens.s<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> <span class=\"kw1\">Dim</span> big.s<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> isInitialized<br/>    <span class=\"kw1\">Restore</span> numberNames<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19</span><br/>      <span class=\"kw1\">Read</span>.s small<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><br/>      <span class=\"kw1\">Read</span>.s tens<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">14</span><br/>      <span class=\"kw1\">Read</span>.s big<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    isInitialized <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span><span class=\"st0\">\"- 0123456789\"</span>, <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>number,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      number <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>number, i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">;trim number to the last valid character</span><br/>      <span class=\"kw1\">Break</span> <span class=\"co1\">;exit loop</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span> <br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> IsNegative <span class=\"sy0\">=</span> #False<br/>  number <span class=\"sy0\">=</span> <span class=\"kw2\">Trim</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>number,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span><br/>    IsNegative <span class=\"sy0\">=</span> #True<br/>    number <span class=\"sy0\">=</span> <span class=\"kw2\">Trim</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>number, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span>number, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"zero\"</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">45</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"Number is too big!\"</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> num.s <span class=\"sy0\">=</span> number, output.s, unit, unitOutput.s, working<br/>\u00a0<br/>  <span class=\"kw1\">Repeat</span><br/>    working <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Right</span><span class=\"br0\">(</span>num, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    unitOutput <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">Select</span> working<br/>      <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19</span><br/>        unitOutput <span class=\"sy0\">=</span> small<span class=\"br0\">(</span>working<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Case</span> <span class=\"nu0\">20</span> <span class=\"kw1\">To</span> <span class=\"nu0\">99</span><br/>        <span class=\"kw1\">If</span> working <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>          unitOutput <span class=\"sy0\">=</span> tens<span class=\"br0\">(</span>working <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"-\"</span> <span class=\"sy0\">+</span> small<span class=\"br0\">(</span>working <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Else</span><br/>          unitOutput <span class=\"sy0\">=</span> tens<span class=\"br0\">(</span>working <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">EndSelect</span><br/>\u00a0<br/>    working <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Right</span><span class=\"br0\">(</span>num, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">If</span> working<br/>      <span class=\"kw1\">If</span> unitOutput <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>        unitOutput <span class=\"sy0\">=</span> small<span class=\"br0\">(</span>working<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" hundred \"</span> <span class=\"sy0\">+</span> unitOutput<br/>      <span class=\"kw1\">Else</span><br/>        unitOutput <span class=\"sy0\">=</span> small<span class=\"br0\">(</span>working<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" hundred\"</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>    <span class=\"kw1\">If</span> unitOutput <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">And</span> unit <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      unitOutput <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> big<span class=\"br0\">(</span>unit<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> output <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>        unitOutput <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>    output <span class=\"sy0\">=</span> unitOutput <span class=\"sy0\">+</span> output<br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span><br/>      num <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>num, <span class=\"kw2\">Len</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      unit <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw1\">Break</span> <span class=\"co1\">;exit loop</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">ForEver</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> IsNegative<br/>    output <span class=\"sy0\">=</span> <span class=\"st0\">\"negative \"</span> <span class=\"sy0\">+</span> output<br/>  <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> output<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> n$<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    <span class=\"kw1\">Repeat</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Give me an integer (or q to quit)! \"</span><span class=\"br0\">)</span><br/>      n$ <span class=\"sy0\">=</span> <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Until</span> n$ <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span><span class=\"kw2\">Trim</span><span class=\"br0\">(</span>n$<span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"q\"</span><br/>      <span class=\"kw1\">Break</span> <span class=\"co1\">;exit loop</span><br/>    <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>numberWords<span class=\"br0\">(</span>n$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEver</span> <br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 64, "block": "<pre class=\"python highlighted_source\">TENS <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"st0\">\"twenty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"forty\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"fifty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sixty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ninety\"</span><span class=\"br0\">]</span><br/>SMALL <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"zero\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"four\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"five\"</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">\"six\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seven\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eight\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ten\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eleven\"</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">\"twelve\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thirteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fourteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fifteen\"</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">\"sixteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seventeen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"eighteen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nineteen\"</span><span class=\"br0\">]</span><br/>HUGE <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span>h + <span class=\"st0\">\"illion\"</span> <br/>                       <span class=\"kw1\">for</span> h <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"st0\">\"m\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tr\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quadr\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quint\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sext\"</span><span class=\"sy0\">,</span> <br/>                                  <span class=\"st0\">\"sept\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"oct\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"non\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"dec\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> nonzero<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> connect<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> connect + c + spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> last_and<span class=\"br0\">(</span>num<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"st0\">','</span> <span class=\"kw1\">in</span> num:<br/>        pre<span class=\"sy0\">,</span> last <span class=\"sy0\">=</span> num.<span class=\"me1\">rsplit</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"st0\">' and '</span> <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> last:<br/>            last <span class=\"sy0\">=</span> <span class=\"st0\">' and'</span> + last<br/>        num <span class=\"sy0\">=</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">[</span>pre<span class=\"sy0\">,</span> <span class=\"st0\">','</span><span class=\"sy0\">,</span> last<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> num<br/>\u00a0<br/><span class=\"kw1\">def</span> big<span class=\"br0\">(</span>e<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> e <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"kw1\">return</span> spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">elif</span> e <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">return</span> spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span> + <span class=\"st0\">\" thousand\"</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">return</span> spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span> + HUGE<span class=\"br0\">[</span>e<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> base1000_rev<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"co1\"># generates the value of the digits of n in base 1000</span><br/>    <span class=\"co1\"># (i.e. 3-digit chunks), in reverse.</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:<br/>        n<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">yield</span> r<br/>\u00a0<br/><span class=\"kw1\">def</span> spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"minus \"</span> + spell_integer<span class=\"br0\">(</span>-n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">elif</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span>:<br/>        <span class=\"kw1\">return</span> SMALL<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">elif</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span>:<br/>        a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> TENS<span class=\"br0\">[</span>a<span class=\"br0\">]</span> + nonzero<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">elif</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span>:<br/>        a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> SMALL<span class=\"br0\">[</span>a<span class=\"br0\">]</span> + <span class=\"st0\">\" hundred\"</span> + nonzero<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"st0\">' and'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        num <span class=\"sy0\">=</span> <span class=\"st0\">\", \"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">[</span>big<span class=\"br0\">(</span>e<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> e<span class=\"sy0\">,</span> x <span class=\"kw1\">in</span><br/>                         <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>base1000_rev<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> x<span class=\"br0\">]</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> last_and<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"co1\"># examples</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> -<span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> -<span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> -<span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> -<span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> -<span class=\"nu0\">29</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%+4i -&gt;\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>  <br/>\u00a0<br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">201021002001</span><br/>    <span class=\"kw1\">while</span> n:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%-12i -&gt;\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        n //<span class=\"sy0\">=</span> -<span class=\"nu0\">10</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%-12i -&gt;\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> spell_integer<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define smalls<br/>  (map symbol-&gt;string<br/>       '(zero one two three four five six seven eight nine ten eleven twelve<br/>         thirteen fourteen fifteen sixteen seventeen eighteen nineteen)))<br/>\u00a0<br/>(define tens<br/>  (map symbol-&gt;string<br/>       '(zero ten twenty thirty forty fifty sixty seventy eighty ninety)))<br/>\u00a0<br/>(define larges<br/>  (map symbol-&gt;string<br/>       '(thousand million billion trillion quadrillion quintillion sextillion<br/>         septillion octillion nonillion decillion undecillion duodecillion<br/>         tredecillion quattuordecillion quindecillion sexdecillion<br/>         septendecillion octodecillion novemdecillion vigintillion)))<br/>\u00a0<br/>(define (integer-&gt;english n)<br/>  (define (step div suffix separator [subformat integer-&gt;english])<br/>    (define-values [q r] (quotient/remainder n div))<br/>    (define S (if suffix (~a (subformat q) \" \" suffix) (subformat q)))<br/>    (if (zero? r) S (~a S separator (integer-&gt;english r))))<br/>  (cond [(&lt; n 0) (~a \"negative \" (integer-&gt;english (- n)))]<br/>        [(&lt; n 20) (list-ref smalls n)]<br/>        [(&lt; n 100) (step 10 #f \"-\" (curry list-ref tens))]<br/>        [(&lt; n 1000) (step 100 \"hundred\" \" and \")]<br/>        [else (let loop ([N 1000000] [D 1000] [unit larges])<br/>                (cond [(null? unit)<br/>                       (error 'integer-&gt;english \"number too big: ~e\" n)]<br/>                      [(&lt; n N) (step D (car unit) \", \")]<br/>                      [else (loop (* 1000 N) (* 1000 D) (cdr unit))]))]))<br/>\u00a0<br/>(for ([n 10])<br/>  (define e (expt 10 n))<br/>  (define r (+ (* e (random e)) (random e)))<br/>  (printf \"~s: ~a\\n\" r (integer-&gt;english r)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 78, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>OneList=[\"zero\",    \"one\",     \"two\",       \"three\",    \"four\",<br/>              \"five\",    \"six\",     \"seven\",     \"eight\",    \"nine\",<br/>              \"ten\",     \"eleven\",  \"twelve\",    \"thirteen\", \"fourteen\",<br/>              \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]<br/>tenList=[\"\" , \"\" , \"twenty\",  \"thirty\", \"fourty\",<br/>            \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]<br/>\u00a0<br/>millionStr=\"Million\"<br/>thousandStr=\"Thousand\"<br/>hundredStr=\"Hundred\"<br/>andStr=\"And\"<br/>pointStr=\" Point \"<br/>\u00a0<br/>while true<br/>\tsee \"enter number to convert:\"<br/>\tgive theNumber<br/>\u00a0<br/>\tpointSplited=splitString(theNumber,\".\")<br/>\tfraction=0<br/>\u00a0<br/>\tuseFr=false<br/>\tif len(pointSplited) &gt;=1 theNumber=pointSplited[1] ok<br/>\tif len(pointSplited) &gt;=2 useFr=true fraction=pointSplited[2] ok<br/>\tpointSplited=null<br/>\u00a0<br/>\tsee getName(number(theNumber))<br/>\tif useFr=true see pointStr + getName(number(fraction)) ok<br/>\tsee nl<br/>end<br/>\u00a0<br/>func getName num<br/>rtn=null<br/>if num=0<br/>    rtn += OneList[floor(num+1)]<br/>\treturn rtn <br/>ok<br/>if num&lt;0<br/>\treturn \"minus \" + getName(fabs(num))<br/>ok<br/>if num&gt;= 1000000 <br/>\trtn += getName(num / 1000000) +\" \"+ millionStr <br/>\tnum%=1000000<br/>ok<br/>if num&gt;=1000<br/>\tif len(rtn)&gt;0 rtn += \", \" ok<br/>\u00a0<br/>\trtn += getName(num / 1000)+ \" \" + thousandStr <br/>\tnum%=1000<br/>ok<br/>\u00a0<br/>if num &gt;=100 <br/>if len(rtn)&gt;0 rtn += \", \" ok<br/>\trtn += OneList[floor((num / 100)+1)] + \" \" + hundredStr <br/>\tnum%=100<br/>ok<br/>\u00a0<br/>if num=0 <br/>\treturn rtn + <br/>ok<br/>if len(rtn)&gt;0 rtn += \" \" + andStr + \" \" ok<br/>if(num&gt;=20)<br/>\u00a0<br/>\trtn += tenList[floor((num / 10)+1)]<br/>\tnum%=10<br/>ok<br/>if num=0 <br/>\treturn rtn<br/>ok<br/>if len(rtn)&gt;0 rtn +=  \" \" ok<br/>rtn += OneList[num+1]<br/>return rtn<br/>\u00a0<br/>func splitString str,chr<br/>\tfor i in str if strcmp(i,chr)=0 i=nl ok next<br/>\treturn str2list(str)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 78, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>OneList=[\"zero\",    \"one\",     \"two\",       \"three\",    \"four\",<br/>              \"five\",    \"six\",     \"seven\",     \"eight\",    \"nine\",<br/>              \"ten\",     \"eleven\",  \"twelve\",    \"thirteen\", \"fourteen\",<br/>              \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]<br/>tenList=[\"\" , \"\" , \"twenty\",  \"thirty\", \"fourty\",<br/>            \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]<br/>\u00a0<br/>millionStr=\"Million\"<br/>thousandStr=\"Thousand\"<br/>hundredStr=\"Hundred\"<br/>andStr=\"And\"<br/>pointStr=\" Point \"<br/>\u00a0<br/>while true<br/>\tsee \"enter number to convert:\"<br/>\tgive theNumber<br/>\u00a0<br/>\tpointSplited=splitString(theNumber,\".\")<br/>\tfraction=0<br/>\u00a0<br/>\tuseFr=false<br/>\tif len(pointSplited) &gt;=1 theNumber=pointSplited[1] ok<br/>\tif len(pointSplited) &gt;=2 useFr=true fraction=pointSplited[2] ok<br/>\tpointSplited=null<br/>\u00a0<br/>\tsee getName(number(theNumber))<br/>\tif useFr=true see pointStr + getName(number(fraction)) ok<br/>\tsee nl<br/>end<br/>\u00a0<br/>func getName num<br/>rtn=null<br/>if num=0<br/>    rtn += OneList[floor(num+1)]<br/>\treturn rtn <br/>ok<br/>if num&lt;0<br/>\treturn \"minus \" + getName(fabs(num))<br/>ok<br/>if num&gt;= 1000000 <br/>\trtn += getName(num / 1000000) +\" \"+ millionStr <br/>\tnum%=1000000<br/>ok<br/>if num&gt;=1000<br/>\tif len(rtn)&gt;0 rtn += \", \" ok<br/>\u00a0<br/>\trtn += getName(num / 1000)+ \" \" + thousandStr <br/>\tnum%=1000<br/>ok<br/>\u00a0<br/>if num &gt;=100 <br/>if len(rtn)&gt;0 rtn += \", \" ok<br/>\trtn += OneList[floor((num / 100)+1)] + \" \" + hundredStr <br/>\tnum%=100<br/>ok<br/>\u00a0<br/>if num=0 <br/>\treturn rtn + <br/>ok<br/>if len(rtn)&gt;0 rtn += \" \" + andStr + \" \" ok<br/>if(num&gt;=20)<br/>\u00a0<br/>\trtn += tenList[floor((num / 10)+1)]<br/>\tnum%=10<br/>ok<br/>if num=0 <br/>\treturn rtn<br/>ok<br/>if len(rtn)&gt;0 rtn +=  \" \" ok<br/>rtn += OneList[num+1]<br/>return rtn<br/>\u00a0<br/>func splitString str,chr<br/>\tfor i in str if strcmp(i,chr)=0 i=nl ok next<br/>\treturn str2list(str)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 60, "block": "<pre class=\"ruby highlighted_source\">SMALL = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>zero one two three four five six seven eight nine ten<br/>           eleven twelve thirteen fourteen fifteen sixteen seventeen<br/>           eighteen nineteen<span class=\"br0\">)</span><br/>\u00a0<br/>TENS = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>wrong wrong twenty thirty forty fifty sixty seventy<br/>          eighty ninety<span class=\"br0\">)</span><br/>\u00a0<br/>BIG = <span class=\"br0\">[</span><span class=\"kw2\">nil</span>, <span class=\"st0\">\"thousand\"</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span><br/>      <span class=\"sy0\">%</span>w<span class=\"br0\">(</span> m b tr quadr quint sext sept oct non dec<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> <span class=\"st0\">\"#{p}illion\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">def</span> wordify number<br/>  <span class=\"kw1\">case</span><br/>  <span class=\"kw1\">when</span> number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"st0\">\"negative #{wordify -number}\"</span><br/>\u00a0<br/>  <span class=\"kw1\">when</span> number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><br/>    SMALL<span class=\"br0\">[</span>number<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">when</span> number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><br/>    div, mod = number.<span class=\"me1\">divmod</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    TENS<span class=\"br0\">[</span>div<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>mod==<span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">\"\"</span>\u00a0: <span class=\"st0\">\"-#{wordify mod}\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">when</span> number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><br/>    div, mod = number.<span class=\"me1\">divmod</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    <span class=\"st0\">\"#{SMALL[div]} hundred\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>mod==<span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">\"\"</span>\u00a0: <span class=\"st0\">\" and #{wordify mod}\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">else</span><br/>    <span class=\"co1\"># separate into 3-digit chunks</span><br/>    chunks = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    div = number<br/>    <span class=\"kw1\">while</span> div\u00a0!= <span class=\"nu0\">0</span><br/>      div, mod = div.<span class=\"me1\">divmod</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>      chunks <span class=\"sy0\">&lt;&lt;</span> mod                 <span class=\"co1\"># will store smallest to largest</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"Integer value too large.\"</span> <span class=\"kw1\">if</span> chunks.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> BIG.<span class=\"me1\">size</span><br/>\u00a0<br/>    chunks.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> wordify c <span class=\"br0\">}</span>.<br/>           <span class=\"me1\">zip</span><span class=\"br0\">(</span>BIG<span class=\"br0\">)</span>.    <span class=\"co1\"># zip pairs up corresponding elements from the two arrays</span><br/>           find_all <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>\u00a0!= <span class=\"st0\">'zero'</span> <span class=\"br0\">}</span>.<br/>           <span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c.<span class=\"me1\">join</span> <span class=\"st0\">' '</span><span class=\"br0\">}</span>.    <span class=\"co1\"># join [\"forty\", \"thousand\"]</span><br/>           reverse.<br/>           <span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span>.              <span class=\"co1\"># join chunks</span><br/>           strip<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>data = <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1123</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">123</span>, <span class=\"nu0\">200</span>, <span class=\"nu0\">220</span>, <span class=\"nu0\">1245</span>, <span class=\"nu0\">2000</span>, <span class=\"nu0\">2200</span>, <span class=\"nu0\">2220</span>, <span class=\"nu0\">467889</span>,<br/>        <span class=\"nu0\">23</span>_000_467, <span class=\"nu0\">23</span>_234_467, <span class=\"nu0\">2</span>_235_654_234, <span class=\"nu0\">12</span>_123_234_543_543_456,<br/>        <span class=\"nu0\">987</span>_654_321_098_765_432_109_876_543_210_987_654,<br/>        <span class=\"nu0\">123890812938219038290489327894327894723897432</span><span class=\"br0\">]</span><br/>\u00a0<br/>data.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"#{n}: \"</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"'#{wordify n}'\"</span><br/>  <span class=\"kw1\">rescue</span> <span class=\"sy0\">=&gt;</span> e<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"Error: #{e}\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 106, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">parallel</span>.<span class=\"me1\">ParSeq</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Spells an English numeral longhand. The numbers are expressed using words.<br/> *<br/> *  The implementation goes up to 10&lt;sup&gt;69&lt;/sup&gt;-1 and also supports negative and zero inputs.<br/> *<br/> *  @example longhand( 1234 )  // results in: \"one thousand two hundred thirty-four\".<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">trait</span></a> LongHand <span class=\"br0\">{</span><br/>  <span class=\"coMULTI\">/** Spells a number longhand<br/>   *<br/>   *  Done by recursively process the triplets of decimal numbers.<br/>   *  @param numeral\t\tthe numeric value to be converted<br/>   *  @param showAnd\t\tflag the output extra and in output, default off<br/>   *  @param zeroString\t\tthe word for 0, default to \"zero\"<br/>   *  @param showHyphen\t\thyphenate all compound numbers e.g. twenty-four, default is on<br/>   *  @return\t\t\t\tthe numeric value expressed in words<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> longhand<span class=\"br0\">(</span>numeral<span class=\"sy0\">:</span> BigInt,<br/>               showAnd<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>,<br/>               zeroString<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"zero\"</span>,<br/>               showHyphen<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> condAndString <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>showAnd<span class=\"br0\">)</span> <span class=\"st0\">\"and \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> condHyphenString <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>showHyphen<span class=\"br0\">)</span> <span class=\"st0\">\"-\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span><br/>\u00a0<br/>    <span class=\"co1\">// 234 Becomes \"two hundred [and] thirty-four\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> composeScale<span class=\"br0\">(</span>nnn<span class=\"sy0\">:</span> String, isLSDgroup<span class=\"sy0\">:</span> Boolean, strE3<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      nnn <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span> <span class=\"co1\">// Rare exceptions confirms the rule</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"000\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"100\"</span> <span class=\"sy0\">=&gt;</span> onesAndTeens<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + hundredString + strE3 <span class=\"co1\">// Solves the faulty hundred AND thousand problem</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> eval <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nnn.<span class=\"me1\">par</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toString</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span> zip ParSeq<span class=\"br0\">(</span><span class=\"st0\">'units, '</span>tens, <span class=\"st0\">'hundreds)).reverse<br/>\u00a0<br/>          eval.map {<br/>            case (d, '</span>units<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> eval.<span class=\"me1\">seq</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">'tens) =&gt; onesAndTeens(d + 10)<br/>            case (d, '</span>units<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isLSDgroup <span class=\"sy0\">&amp;&amp;</span> nnn <span class=\"sy0\">==</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> zeroString<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>d, <span class=\"st0\">'units) =&gt; onesAndTeens(d)<br/>            case (d, '</span>hundreds<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> onesAndTeens<span class=\"br0\">(</span>d<span class=\"br0\">)</span> + hundredString + condAndString<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>d, <span class=\"st0\">'tens) if d &gt; 1 &amp;&amp; eval.seq.contains(0, '</span>units<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> tens<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>d, <span class=\"st0\">'tens) if d &gt; 1 =&gt; tens(d) + condHyphenString //'</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"\"</span><br/>          <span class=\"br0\">}</span>.<span class=\"me1\">mkString</span> + strE3<br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"co1\">// def composeScale(\u2026</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> compose<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInt<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <span class=\"co1\">// \"1234\" becomes List((1,\"thousand\"), (234, \"\"))</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> decGroups <span class=\"sy0\">=</span> n.<span class=\"me1\">toString</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">grouped</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">reverse</span><span class=\"br0\">)</span>.<span class=\"me1\">toSeq</span>.<span class=\"me1\">par</span> <span class=\"co1\">// Group into powers of thousands</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>decGroups.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;=</span> shortScale.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"co1\">// Detect overflow  </span><br/>      <span class=\"br0\">{</span> <span class=\"co1\">// Send per group section to composeScale</span><br/>        <span class=\"sy0\">@</span>tailrec<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> iter<span class=\"br0\">(</span>elems<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span><span class=\"br0\">(</span>String, String<span class=\"br0\">)</span><span class=\"br0\">]</span>, acc<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          elems <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>group, powers<span class=\"br0\">)</span> <span class=\"sy0\">::</span> tail <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>              iter<span class=\"br0\">(</span>tail, acc + composeScale<span class=\"br0\">(</span>group, tail <span class=\"sy0\">==</span> Nil, powers<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> acc<br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"co1\">// Group of decimals are accompanied with the short scale name.</span><br/>        iter<span class=\"br0\">(</span>decGroups.<span class=\"me1\">zip</span><span class=\"br0\">(</span>shortScale<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">toList</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span>.<span class=\"me1\">trim</span><br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"###.overflow.###\"</span><br/>    <span class=\"br0\">}</span> <span class=\"co1\">// def compose(\u2026</span><br/>\u00a0<br/>    <span class=\"co1\">// Here starts def longhand(\u2026</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numeral <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"minus \"</span> + compose<span class=\"br0\">(</span>-numeral<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> compose<span class=\"br0\">(</span>numeral<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <span class=\"co1\">// End def longhand(\u2026</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> onesAndTeens <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> dozen <span class=\"sy0\">=</span> <span class=\"st0\">\"one two three four five six seven eight nine ten eleven twelve\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>.<span class=\"me1\">par</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> teens <span class=\"sy0\">=</span> <span class=\"st0\">\"thir four fif six seven eigh nine\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"st0\">\"teen \"</span><span class=\"br0\">)</span>.<span class=\"me1\">par</span><br/>    ParSeq<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> ++ dozen ++ teens<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tens <span class=\"sy0\">=</span> ParSeq<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> ++<br/>    <span class=\"br0\">(</span><span class=\"st0\">\"twen thir for fif six seven eigh nine\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"st0\">\"ty\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">final</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hundredString <span class=\"sy0\">=</span> <span class=\"st0\">\"hundred \"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> shortScale <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> p1 <span class=\"sy0\">=</span> <span class=\"st0\">\"m b tr quadr quint sext sept oct non dec\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"st0\">\"illion \"</span><span class=\"br0\">)</span>.<span class=\"me1\">par</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> p2 <span class=\"sy0\">=</span> <span class=\"st0\">\"un duo tre quattuor quin sex septen octo novem \"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"st0\">\"decillion \"</span><span class=\"br0\">)</span>.<span class=\"me1\">par</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> p3 <span class=\"sy0\">=</span> <span class=\"st0\">\"vigint cent\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"st0\">\"illion \"</span><span class=\"br0\">)</span>.<span class=\"me1\">par</span><br/>    ParSeq<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"thousand \"</span><span class=\"br0\">)</span> ++ p1 ++ p2 ++ p3<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <span class=\"co1\">// trait LongHand</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SpellNumber <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> LongHand <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> App <span class=\"br0\">{</span><br/>  <span class=\"co1\">// Main entry A little test...</span><br/>  <span class=\"br0\">{</span> <span class=\"co1\">// Anonymous ordered list as test set</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> testVal1 <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">69</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> testVal9 <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">69</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span>tailrec <span class=\"co1\">// Series generator of 9, 98, 987, 9876 \u2026</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> inner<span class=\"br0\">(</span>counter<span class=\"sy0\">:</span> Int, elem<span class=\"sy0\">:</span> BigInt, testList<span class=\"sy0\">:</span> ParSeq<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> ParSeq<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>counter <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>        inner<span class=\"br0\">(</span>counter + <span class=\"nu0\">1</span>, elem <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> + <span class=\"br0\">(</span><span class=\"nu0\">9</span> - <span class=\"br0\">(</span>counter <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, testList ++ ParSeq<span class=\"br0\">(</span>elem<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> testList.<span class=\"me1\">par</span><br/>    <span class=\"br0\">}</span><br/>    inner<span class=\"br0\">(</span><span class=\"nu0\">0</span>, 0L, <span class=\"co1\">// Test values</span><br/>      ParSeq<span class=\"br0\">(</span>-Long.<span class=\"me1\">MaxValue</span>, -<span class=\"nu0\">1000000000</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">19</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">21</span>, <span class=\"nu0\">112</span>, <span class=\"nu0\">1001</span>, <span class=\"nu0\">1012</span>, <span class=\"nu0\">1013</span>,<br/>        Long.<span class=\"me1\">MaxValue</span> - <span class=\"nu0\">1</span>, Long.<span class=\"me1\">MaxValue</span> - <span class=\"nu0\">13</span>, testVal1, testVal9<span class=\"br0\">)</span><span class=\"br0\">)</span> ++<br/>      <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>z <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"nu0\">69</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> BigInt<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// powers of ten</span><br/>\u00a0<br/>  <span class=\"br0\">}</span>.<span class=\"me1\">seq</span>.<span class=\"me1\">sorted</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>num <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>f<span class=\"st0\">\"$num%+,80d -&gt; ${longhand(numeral = num, showAnd = true)}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"co1\">// object SpellNumber @ line 110</span></pre>"}, {"lang": "Seed7", "loc": 12, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"stdio.s7i\";<br/>  include \"wrinum.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: number is 0;<br/>  begin<br/>    for number range 1 to 999999 do<br/>      writeln(str(ENGLISH, number));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 61, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Math.sl&gt;;<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>import &lt;Utilities/Conversion.sl&gt;;<br/>import &lt;Utilities/String.sl&gt;;<br/>\u00a0<br/>main(argv(2))\u00a0:= delimit(numberToEnglish(stringToInt(argv)), '\\n');<br/>\u00a0<br/>ones\u00a0:= [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];<br/>teens\u00a0:= [\"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"];<br/>tens\u00a0:= [\"ten\", \"twenty\", \"thrity\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"];<br/>\u00a0<br/>magnitudes\u00a0:= [\"\", \"thousand\", \"million\", \"billion\", \"trillion\"];<br/>\u00a0<br/>numberToEnglish(num(0))\u00a0:=<br/>    let<br/>        triplets[i]\u00a0:= <br/>                (num / integerPower(1000, i - 1)) mod 1000 <br/>                foreach i within 1 ... ceiling(log(1000, num + 1));<br/>\u00a0<br/>        englishtTriplets[j]\u00a0:= numberToEnglishHelper(triplets[j]);<br/>\u00a0<br/>        partials[j]\u00a0:= <br/>                englishtTriplets[j] ++ magnitudes[j] ++ \", \" when size(englishtTriplets[j]) &gt; 0 <br/>                foreach j within reverse(1 ... size(triplets));<br/>    in<br/>            \"zero\" when num = 0<br/>        else<br/>            \"negative \" ++ numberToEnglish(-num) when num &lt; 0<br/>        else<br/>            trim(allButLast(trim(join(partials))));<br/>\u00a0<br/>\u00a0<br/>numberToEnglishHelper(num(0))\u00a0:=<br/>    let<br/>        onesPlace\u00a0:= num mod 10;<br/>        tensPlace\u00a0:= (num mod 100) / 10;<br/>        hundredsPlace\u00a0:=  (num mod 1000) / 100;<br/>\u00a0<br/>        onesWord\u00a0:=     \"ten \" when tensPlace = 1 and onesPlace = 0<br/>                    else<br/>                        \"\" when onesPlace = 0<br/>                    else<br/>                        teens[onesPlace] ++ \" \" when tensPlace = 1<br/>                    else <br/>                        ones[onesPlace] ++ \" \";<br/>\u00a0<br/>        tensWord\u00a0:=    \"\" when tensPlace = 0 or tensPlace = 1<br/>                    else <br/>                        tens[tensPlace] ++ \" \" when onesPlace = 0<br/>                    else <br/>                        tens[tensPlace] ++ \"-\";<br/>\u00a0<br/>        hundredsWord\u00a0:=     \"\" when hundredsPlace = 0<br/>                         else<br/>                             ones[hundredsPlace] ++ \" hundred \";<br/>\u00a0<br/>        andWord\u00a0:= \"\" when hundredsPlace = 0 or (tensPlace = 0 and onesPlace = 0) else \"and \";<br/>\u00a0<br/>\u00a0<br/>    in<br/>        hundredsWord ++ andWord ++ tensWord ++ onesWord;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var l = frequire<span class=\"br0\">(</span><span class=\"st0\">'Lingua::EN::Numbers'</span><span class=\"br0\">)</span>;<br/>say l.<span class=\"me1\">num2en</span><span class=\"br0\">(</span><span class=\"nu0\">123456789</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "SQL", "loc": 12, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">SELECT</span> val<span class=\"sy0\">,</span> to_char<span class=\"br0\">(</span>to_date<span class=\"br0\">(</span>val<span class=\"sy0\">,</span><span class=\"st0\">'j'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">'jsp'</span><span class=\"br0\">)</span> name<br/><span class=\"kw1\">FROM</span><br/><span class=\"br0\">(</span><br/><span class=\"kw1\">SELECT</span><br/>round<span class=\"br0\">(</span> dbms_random<span class=\"sy0\">.</span><span class=\"kw1\">VALUE</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5373484</span><span class=\"br0\">)</span><span class=\"br0\">)</span> val<br/><span class=\"kw1\">FROM</span> dual<br/><span class=\"kw1\">CONNECT</span> <span class=\"kw1\">BY</span> level <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">5</span><br/><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">SELECT</span> to_char<span class=\"br0\">(</span>to_date<span class=\"br0\">(</span><span class=\"nu0\">5373485</span><span class=\"sy0\">,</span><span class=\"st0\">'j'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">'jsp'</span><span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> dual;<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 72, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> int2words <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span> <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -- <span class=\"br0\">{</span>^<span class=\"br0\">(</span>-<span class=\"sy0\">?</span>\\d+<span class=\"br0\">)</span><span class=\"sy0\">$</span><span class=\"br0\">}</span> <span class=\"re0\">$n</span> -<span class=\"sy0\">&gt;</span> n<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"not a decimal integer\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> zero<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"negative [int2words [expr {abs($n)}]]\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">36</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"value too large to represent\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> groups <span class=\"br0\">[</span>get_groups <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> l <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$groups</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> group <span class=\"re0\">$groups</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">incr</span> l -<span class=\"nu0\">1</span><br/>        <span class=\"co1\"># ensure any group with a leading zero is not treated as octal</span><br/>        <span class=\"kw1\">set</span> val <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"re0\">$group</span> <span class=\"sy0\">%</span>d<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$val</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span>group2words <span class=\"re0\">$val</span> <span class=\"re0\">$l</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$result</span> <span class=\"st0\">\", \"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> small <span class=\"br0\">{</span><span class=\"st0\">\"\"</span> one two three four five six seven eight nine ten eleven twelve<br/>           thirteen fourteen fifteen sixteen seventeen eighteen nineteen<span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> tens <span class=\"br0\">{</span><span class=\"st0\">\"\"</span> <span class=\"st0\">\"\"</span> twenty thirty forty fifty sixty seventy eighty ninety<span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> powers <span class=\"br0\">{</span><span class=\"st0\">\"\"</span> thousand<span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> p <span class=\"br0\">{</span>m b tr quadr quint sext sept oct non dec<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> powers <span class=\"sy0\">$</span><span class=\"br0\">{</span>p<span class=\"br0\">}</span>illion<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> group2words <span class=\"br0\">{</span>n level<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> small tens powers<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$small</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        lassign <span class=\"br0\">[</span>divmod <span class=\"re0\">$n</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> a b<br/>        <span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$tens</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">append</span> result - <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$small</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        lassign <span class=\"br0\">[</span>divmod <span class=\"re0\">$n</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span> a b<br/>        <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$small</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span> hundred<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> result and <span class=\"br0\">[</span>group2words <span class=\"re0\">$b</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"re0\">$result</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$powers</span> <span class=\"re0\">$level</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> divmod <span class=\"br0\">{</span>n d<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> / <span class=\"re0\">$d</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$d</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> get_groups <span class=\"br0\">{</span>num<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># from http://wiki.tcl.tk/5000</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regsub</span> <span class=\"br0\">{</span>^<span class=\"br0\">(</span><span class=\"br0\">[</span>-+<span class=\"br0\">]</span><span class=\"sy0\">?</span>\\d+<span class=\"br0\">)</span><span class=\"br0\">(</span>\\d\\d\\d<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"re0\">$num</span> <span class=\"br0\">{</span>\\<span class=\"nu0\">1</span> \\<span class=\"nu0\">2</span><span class=\"br0\">}</span> num<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$num</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> test <span class=\"br0\">{</span><br/>        <span class=\"nu0\">0</span> -<span class=\"nu0\">0</span> <span class=\"nu0\">5</span> -<span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">25</span> <span class=\"nu0\">99</span> <span class=\"nu0\">100</span> <span class=\"nu0\">101</span> <span class=\"nu0\">999</span> <span class=\"nu0\">1000</span> <span class=\"nu0\">1008</span> <span class=\"nu0\">1010</span> <span class=\"nu0\">54321</span> <span class=\"nu0\">1234567890</span><br/>        0x7F<br/>        <span class=\"nu0\">123456789012345678901234567890123456</span><br/>        <span class=\"nu0\">1234567890123456789012345678901234567</span><br/><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">catch</span> <span class=\"br0\">{</span>int2words <span class=\"re0\">$test</span><span class=\"br0\">}</span> result<br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$test -&gt; $result\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual Basic", "loc": 60, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> small <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, tens <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, big <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/>    small = Array(<span class=\"st0\">\"one\"</span>, <span class=\"st0\">\"two\"</span>, <span class=\"st0\">\"three\"</span>, <span class=\"st0\">\"four\"</span>, <span class=\"st0\">\"five\"</span>, <span class=\"st0\">\"six\"</span>, <span class=\"st0\">\"seven\"</span>, <span class=\"st0\">\"eight\"</span>, <span class=\"st0\">\"nine\"</span>, <span class=\"st0\">\"ten\"</span>, _<br/>                  <span class=\"st0\">\"eleven\"</span>, <span class=\"st0\">\"twelve\"</span>, <span class=\"st0\">\"thirteen\"</span>, <span class=\"st0\">\"fourteen\"</span>, <span class=\"st0\">\"fifteen\"</span>, <span class=\"st0\">\"sixteen\"</span>, <span class=\"st0\">\"seventeen\"</span>, _<br/>                  <span class=\"st0\">\"eighteen\"</span>, <span class=\"st0\">\"nineteen\"</span>)<br/>    tens = Array(<span class=\"st0\">\"twenty\"</span>, <span class=\"st0\">\"thirty\"</span>, <span class=\"st0\">\"forty\"</span>, <span class=\"st0\">\"fifty\"</span>, <span class=\"st0\">\"sixty\"</span>, <span class=\"st0\">\"seventy\"</span>, <span class=\"st0\">\"eighty\"</span>, <span class=\"st0\">\"ninety\"</span>)<br/>    big = Array(<span class=\"st0\">\"thousand\"</span>, <span class=\"st0\">\"million\"</span>, <span class=\"st0\">\"billion\"</span>)<br/>\u00a0<br/>    <span class=\"kw4\">Dim</span> tmpInt <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    tmpInt = Val(InputBox(<span class=\"st0\">\"Gimme a number!\"</span>, <span class=\"st0\">\"NOW!\"</span>, Trim$(Year(Now)) &amp; IIf(Month(Now) &lt; 10, <span class=\"st0\">\"0\"</span>, <span class=\"st0\">\"\"</span>) &amp; _<br/>                 Trim$(Month(Now)) &amp; IIf(Day(Now) &lt; 10, <span class=\"st0\">\"0\"</span>, <span class=\"st0\">\"\"</span>) &amp; Trim$(Day(Now))))<br/>    MsgBox int2Text$(tmpInt)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> int2Text$(number <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>)<br/>    <span class=\"kw4\">Dim</span> num <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, outP <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, unit <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw4\">Dim</span> tmpLng1 <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    <span class=\"kw3\">If</span> 0 = number <span class=\"kw3\">Then</span><br/>        int2Text$ = <span class=\"st0\">\"zero\"</span><br/>        <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>    num = Abs(number)<br/>\u00a0<br/>    <span class=\"kw3\">Do</span><br/>        tmpLng1 = num <span class=\"kw4\">Mod</span> 100<br/>        <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> tmpLng1<br/>            <span class=\"kw3\">Case</span> 1 <span class=\"kw3\">To</span> 19<br/>                outP = small(tmpLng1 - 1) + <span class=\"st0\">\" \"</span> + outP<br/>            <span class=\"kw3\">Case</span> 20 <span class=\"kw3\">To</span> 99<br/>                <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> tmpLng1 <span class=\"kw4\">Mod</span> 10<br/>                    <span class=\"kw3\">Case</span> 0<br/>                        outP = tens((tmpLng1 \\ 10) - 2) + <span class=\"st0\">\" \"</span> + outP<br/>                    <span class=\"kw3\">Case</span> <span class=\"kw3\">Else</span><br/>                        outP = tens((tmpLng1 \\ 10) - 2) + <span class=\"st0\">\"-\"</span> + small(tmpLng1 <span class=\"kw4\">Mod</span> 10) + <span class=\"st0\">\" \"</span> + outP<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>\u00a0<br/>        tmpLng1 = (num <span class=\"kw4\">Mod</span> 1000) \\ 100<br/>        <span class=\"kw3\">If</span> tmpLng1 <span class=\"kw3\">Then</span><br/>            outP = small(tmpLng1 - 1) + <span class=\"st0\">\" hundred \"</span> + outP<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>        num = num \\ 1000<br/>        <span class=\"kw3\">If</span> num &lt; 1 <span class=\"kw3\">Then</span> <span class=\"kw2\">Exit</span> <span class=\"kw3\">Do</span><br/>\u00a0<br/>        tmpLng1 = num <span class=\"kw4\">Mod</span> 1000<br/>        <span class=\"kw3\">If</span> tmpLng1 <span class=\"kw3\">Then</span> outP = big(unit) + <span class=\"st0\">\" \"</span> + outP<br/>\u00a0<br/>        unit = unit + 1<br/>    <span class=\"kw3\">Loop</span><br/>\u00a0<br/>    <span class=\"kw3\">If</span> number &lt; 0 <span class=\"kw3\">Then</span> outP = <span class=\"st0\">\"negative \"</span> &amp; outP<br/>\u00a0<br/>    int2Text$ = Trim$(outP)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 28, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Module</span> Module1<br/>\u00a0<br/>    <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter a number\"</span><span class=\"br0\">)</span><br/>        i <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>words<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>    <span class=\"kw1\">Function</span> words<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> Number <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><br/>        <span class=\"kw1\">Dim</span> small<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"zero\"</span>, <span class=\"st0\">\"one\"</span>, <span class=\"st0\">\"two\"</span>, <span class=\"st0\">\"three\"</span>, <span class=\"st0\">\"four\"</span>, <span class=\"st0\">\"five\"</span>, <span class=\"st0\">\"six\"</span>, <span class=\"st0\">\"seven\"</span>, <span class=\"st0\">\"eight\"</span>,<br/>         <span class=\"st0\">\"nine\"</span>, <span class=\"st0\">\"ten\"</span>, <span class=\"st0\">\"eleven\"</span>, <span class=\"st0\">\"twelve\"</span>, <span class=\"st0\">\"thirteen\"</span>, <span class=\"st0\">\"fourteen\"</span>, <span class=\"st0\">\"fifteen\"</span>, <span class=\"st0\">\"sixteen\"</span>, <span class=\"st0\">\"seventeen\"</span>,<br/>         <span class=\"st0\">\"eighteen\"</span>, <span class=\"st0\">\"nineteen\"</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">Dim</span> tens<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"twenty\"</span>, <span class=\"st0\">\"thirty\"</span>, <span class=\"st0\">\"forty\"</span>, <span class=\"st0\">\"fifty\"</span>, <span class=\"st0\">\"sixty\"</span>, <span class=\"st0\">\"seventy\"</span>, <span class=\"st0\">\"eighty\"</span>, <span class=\"st0\">\"ninety\"</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">Select</span> <span class=\"kw1\">Case</span> Number<br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Is</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><br/>                words <span class=\"sy0\">=</span> small<span class=\"br0\">(</span>Number<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Case</span> <span class=\"nu0\">20</span> <span class=\"kw1\">To</span> <span class=\"nu0\">99</span><br/>                words <span class=\"sy0\">=</span> tens<span class=\"br0\">(</span>Number \\ <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> small<span class=\"br0\">(</span>Number <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Case</span> <span class=\"nu0\">100</span> <span class=\"kw1\">To</span> <span class=\"nu0\">999</span><br/>                words <span class=\"sy0\">=</span> small<span class=\"br0\">(</span>Number \\ <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" hundred \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?q=IIF+site:msdn.microsoft.com\"><span class=\"kw7\">IIf</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>Number <span class=\"kw1\">Mod</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"st0\">\"and \"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> words<span class=\"br0\">(</span>Number <span class=\"kw1\">Mod</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Case</span> <span class=\"nu0\">1000</span><br/>                words <span class=\"sy0\">=</span> <span class=\"st0\">\"one thousand\"</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">Select</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "XPL0", "loc": 53, "block": "<pre class=\"text highlighted_source\">code ChOut=8, CrLf=9, Text=12;<br/>\u00a0<br/>proc NumName(Dev, Num); \\Output integer Num in prose to device Dev<br/>int  Dev, Num;<br/>int  OneTbl, TenTbl, ThoTbl, ThoPwr, I, Quot;<br/>\u00a0<br/>        proc Out999(N); \\Output number in range 0..999 (0 does nothing)<br/>        int  N;<br/>        int  Huns, Tens, Ones;<br/>        [Huns:= N/100;                          \\0..9<br/>        N:= rem(0);                             \\0..99<br/>        Tens:= N/10;                            \\0..9<br/>        Ones:= rem(0);                          \\0..9<br/>        if Huns # 0 then<br/>                [Text(Dev, OneTbl(Huns));       \\1..9<br/>                Text(Dev, \" hundred \")];<br/>        if Tens &gt;= 2 then<br/>                [Text(Dev, TenTbl(Tens));<br/>                if Ones # 0 then<br/>                        [ChOut(Dev, ^-);  Text(Dev, OneTbl(Ones))];<br/>                ]<br/>        else    if N # 0 then Text(Dev, OneTbl(N));     \\N = 1..19<br/>        ];<br/>\u00a0<br/>[if Num = 0 then [Text(Dev, \"zero\");  return];<br/>if Num &lt; 0 then [Num:= -Num;  Text(Dev, \"minus \")];<br/>\u00a0<br/>OneTbl:=[0, \"one\", \"two\", \"three\", \"four\",<br/>        \"five\", \"six\", \"seven\", \"eight\", \"nine\",<br/>        \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\",<br/>        \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"];<br/>TenTbl:=[0, 0, \"twenty\", \"thirty\", \"forty\",<br/>        \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"];<br/>ThoTbl:=[\" billion \", \" million \", \" thousand \"];<br/>\u00a0<br/>ThoPwr:= 1000000000;<br/>for I:= 0 to 2 do<br/>        [Quot:= Num/ThoPwr;<br/>        Num:= rem(0);<br/>        if Quot # 0 then<br/>                [Out999(Quot);  Text(Dev, ThoTbl(I))];<br/>        ThoPwr:= ThoPwr/1000;<br/>        ];<br/>Out999(Num);<br/>];<br/>\u00a0<br/>[NumName(0, 0);  CrLf(0);<br/>NumName(0, 13);  CrLf(0);<br/>NumName(0, 789); CrLf(0);<br/>NumName(0,  -604_001); CrLf(0);<br/>NumName(0, 1_000_000); CrLf(0);<br/>NumName(0, 1_234_567_890); CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">var <br/>   ns   =[1..20].chain([30..90,10]).walk(),<br/>   names=T(\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",<br/>           \"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",<br/>           \"seventeen\",\"eighteen\",\"nineteen\",\"twenty\",<br/>\t   \"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\",\"eighty\",\"ninety\"),<br/>   hs    =T(  100,     1000,      1000000, 1000000000,1000000000000),<br/>   hnames=T(\"hundred\",\"thousand\",\"million\",\"billion\", \"trillion\");<br/>\u00a0<br/>fcn numberToString(n){ // n&gt;0<br/>   fcn(n){<br/>      if(100&lt;=n&lt;0d100_000_0000_000){<br/>\t idx,h,name,r\u00a0:= hs.filter1n('&gt;(n))-1, hs[idx], hnames[idx], n%h;<br/>\t String(self.fcn(n/h),name, <br/>\t    if(r==0) \"\" else if(0&lt;r&lt;100) \" and \" else \", \", <br/>\t    self.fcn(r));<br/>      }else if(0&lt;n&lt;=90){<br/>\t idx,t,name,r\u00a0:= ns.filter1n('&gt;(n))-1, ns[idx], names[idx], n-t;<br/>\t String(name, if(0&lt;r&lt;10) \"-\" else \" \", self.fcn(r));<br/>      }else \"\"<br/>   }(n).strip()  // sometimes there is a trailing space<br/>}</pre>"}]}