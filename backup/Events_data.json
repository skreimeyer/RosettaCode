{"task": "Events", "blocks": [{"lang": "Manual-reset event", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">protected</span> <span class=\"kw3\">type</span> Event <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">procedure</span> Signal;<br/>   <span class=\"kw3\">procedure</span> Reset;<br/>   <span class=\"kw3\">entry</span> Wait;<br/><span class=\"kw3\">private</span><br/>   Fired\u00a0: Boolean\u00a0:= False;<br/><span class=\"kw1\">end</span> Event;</pre>"}, {"lang": "Pulse event", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">protected</span> <span class=\"kw3\">type</span> Event <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">procedure</span> Signal;<br/>   <span class=\"kw3\">procedure</span> Reset;<br/>   <span class=\"kw3\">entry</span> Wait;<br/><span class=\"kw3\">private</span><br/>   Fired\u00a0: Boolean\u00a0:= False;<br/><span class=\"kw1\">end</span> Event;</pre>"}, {"lang": "Ada", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">protected</span> <span class=\"kw3\">type</span> Event <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">procedure</span> Signal;<br/>   <span class=\"kw3\">procedure</span> Reset;<br/>   <span class=\"kw3\">entry</span> Wait;<br/><span class=\"kw3\">private</span><br/>   Fired\u00a0: Boolean\u00a0:= False;<br/><span class=\"kw1\">end</span> Event;</pre>"}, {"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> internal<span class=\"sy0\">,</span> <span class=\"nu0\">1000</span>  <br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">internal: </span> <span class=\"co1\">; fire on a timer</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/TrayTip.htm\"><span class=\"kw3\">TrayTip</span></a><span class=\"sy0\">,</span> internal<span class=\"sy0\">,</span> internal event!`npress <span class=\"kw6\">F2</span> for external event<br/>  <a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> internal<span class=\"sy0\">,</span> off<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"kw6\">F2</span>::   <span class=\"co1\">; external event: fire on F2 key press</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/TrayTip.htm\"><span class=\"kw3\">TrayTip</span></a><span class=\"sy0\">,</span> external<span class=\"sy0\">,</span> <span class=\"kw6\">f2</span> key pressed<br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"TIMERLIB\"<br/>      WAIT_TIMEOUT = 258<br/>\u00a0<br/>      SYS \"CreateEvent\", 0, 1, 0, 0 TO hEvent%<br/>\u00a0<br/>      timerID% = FN_ontimer(1000, PROCelapsed, 0)<br/>\u00a0<br/>      PRINT \"Waiting for event...\"<br/>      REPEAT<br/>        SYS \"WaitForSingleObject\", hEvent%, 1 TO res%<br/>      UNTIL res% &lt;&gt; WAIT_TIMEOUT<br/>      PRINT \"Event signalled\"<br/>      END<br/>\u00a0<br/>      DEF PROCelapsed<br/>      SYS \"SetEvent\", hEvent%<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tpipe<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tclose<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsleep<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\twrite<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\twait<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tclose<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tread<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"received signal from pipe\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 20, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Timers</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> timer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Timer<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        timer<span class=\"sy0\">.</span><span class=\"me1\">Elapsed</span> <span class=\"sy0\">+=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ElapsedEventHandler<span class=\"br0\">(</span>OnElapsed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        timer<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> OnElapsed<span class=\"br0\">(</span><span class=\"kw4\">object</span> sender, ElapsedEventArgs eventArgs<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>eventArgs<span class=\"sy0\">.</span><span class=\"me1\">SignalTime</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>Timer<span class=\"br0\">)</span>sender<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 38, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns async-example<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>core<span class=\"sy0\">.</span>async <span class=\"sy0\">:</span><span class=\"me1\">refer</span> <span class=\"br0\">[</span><span class=\"sy0\">&gt;!</span> <span class=\"sy0\">&lt;!</span> <span class=\"sy0\">&gt;!!</span> <span class=\"sy0\">&lt;!!</span> <span class=\"kw1\">go</span> chan<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clj-time<span class=\"sy0\">.</span>core <span class=\"sy0\">:</span><span class=\"me1\">as</span> time<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clj-time<span class=\"sy0\">.</span>format <span class=\"sy0\">:</span><span class=\"me1\">as</span> time-format<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Helper functions (logging &amp; time stamp)</span><br/><span class=\"co1\">; Time stamp format</span><br/><span class=\"br0\">(</span>def custom-formatter <span class=\"br0\">(</span>time-format/formatter <span class=\"st0\">\"yyyy:MM:dd:ss.SS\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn safe-println <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> more<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" This function avoids interleaving of text output when using println due to race condition for multi-processes printing<br/>    as discussed http://yellerapp.com/posts/2014-12-11-14-race-condition-in-clojure-println.html \"</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"kw1\">write</span> *out* <span class=\"br0\">(</span>str <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string/join <span class=\"st0\">\" \"</span> more<span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn log <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Outputs mesage with time stamp \"</span><br/>  <span class=\"br0\">(</span>safe-println <span class=\"br0\">(</span>time-format/unparse custom-formatter <span class=\"br0\">(</span>time/now<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\":\"</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Main code</span><br/><span class=\"br0\">(</span>defn -main <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>c <span class=\"br0\">(</span>chan<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>log <span class=\"st0\">\"Program start\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">go</span><br/>      <span class=\"br0\">(</span>log <span class=\"st0\">\"Task start\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>log <span class=\"br0\">(</span>str <span class=\"st0\">\"Event received by task: \"</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;!</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"sy0\">&lt;!!</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">go</span><br/>        <span class=\"br0\">(</span>log <span class=\"st0\">\"program sleeping\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>Thread/sleep <span class=\"nu0\">1000</span><span class=\"br0\">)</span>     <span class=\"co1\">; Wait 1 second</span><br/>        <span class=\"br0\">(</span>log <span class=\"st0\">\"Program signaling event\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">&gt;!</span> c <span class=\"st0\">\"reset\"</span><span class=\"br0\">)</span>          <span class=\"co1\">; Send message to task</span><br/>          <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Invoke -main function</span><br/><span class=\"br0\">(</span>-main<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Delphi", "loc": 54, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Events<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span> Classes<span class=\"sy1\">,</span> Windows<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TWaitThread <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><span class=\"br0\">(</span>TThread<span class=\"br0\">)</span><br/>  <span class=\"kw1\">private</span><br/>    FEvent<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">procedure</span> Sync<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> Execute<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span><span class=\"kw1\">const</span> aEvent<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> reintroduce<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TWaitThread }</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TWaitThread<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"kw1\">const</span> aEvent<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">inherited</span> Create<span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  FEvent <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aEvent<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TWaitThread<span class=\"sy1\">.</span><span class=\"me1\">Execute</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  res<span class=\"sy1\">:</span> <span class=\"kw4\">Cardinal</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  res <span class=\"sy1\">:</span><span class=\"sy3\">=</span> WaitForSingleObject<span class=\"br0\">(</span>FEvent<span class=\"sy1\">,</span> INFINITE<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> res <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    Synchronize<span class=\"br0\">(</span>Sync<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TWaitThread<span class=\"sy1\">.</span><span class=\"me1\">Sync</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">DateTimeToStr</span><span class=\"br0\">(</span>Now<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  event<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">DateTimeToStr</span><span class=\"br0\">(</span>Now<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  event <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CreateEvent<span class=\"br0\">(</span><span class=\"kw1\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">False</span><span class=\"sy1\">,</span> <span class=\"kw2\">False</span><span class=\"sy1\">,</span> <span class=\"st0\">'Event'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">with</span> TWaitThread<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>event<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw3\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    SetEvent<span class=\"br0\">(</span>event<span class=\"br0\">)</span><br/>  <span class=\"kw1\">finally</span><br/>    Free<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 24, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeEvent<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> fired<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> firer<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/Ref\"><span class=\"kw6\">Ref</span></a>.<span class=\"me1\">promise</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> event <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> signal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            firer.<span class=\"me1\">resolveRace</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span> <span class=\"co1\"># all current and future wait()s will resolve</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> reset<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>firer.<span class=\"me1\">isDone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># ignore multiple resets. If we didn't, then</span><br/>                                  <span class=\"co1\"># reset() wait() reset() signal() would never</span><br/>                                  <span class=\"co1\"># resolve that wait().</span><br/>                <span class=\"co1\"># create all fresh state</span><br/>                <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>p<span class=\"sy0\">,</span> r<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/Ref\"><span class=\"kw6\">Ref</span></a>.<span class=\"me1\">promise</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                fired <span class=\"sy0\">:=</span> p<br/>                firer <span class=\"sy0\">:=</span> r<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> wait<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            return fired<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    return event<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 28, "block": "<pre class=\"text highlighted_source\">defmodule Events do<br/>  def log(msg) do<br/>    time = Time.utc_now |&gt; to_string |&gt; String.slice(0..7)<br/>    IO.puts \"#{time} =&gt; #{msg}\"<br/>  end<br/>\u00a0<br/>  def task do<br/>    log(\"Task start\")<br/>    receive do<br/>     \u00a0:go -&gt;\u00a0:ok<br/>    end<br/>    log(\"Task resumed\")<br/>  end<br/>\u00a0<br/>  def main do<br/>    log(\"Program start\")<br/>    {pid,ref} = spawn_monitor(__MODULE__,:task,[])<br/>    log(\"Program sleeping\")<br/>    Process.sleep(1000)<br/>    log(\"Program signalling event\")<br/>    send(pid,\u00a0:go)<br/>    receive do<br/>      {:DOWN,^ref,_,_,_} -&gt;\u00a0:task_is_down<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>Events.main</pre>"}, {"lang": "Erlang", "loc": 24, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>events<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"re5\">Msg</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"re5\">M</span><span class=\"sy1\">,</span><span class=\"re5\">S</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~2.B:~2.B:~2.B =&gt; ~s~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"re5\">M</span><span class=\"sy1\">,</span><span class=\"re5\">S</span><span class=\"sy1\">,</span><span class=\"re5\">Msg</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Task start\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">receive</span><br/>        go <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Task resumed\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Program start\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">P</span> <span class=\"sy3\">=</span> <span class=\"kw3\">spawn</span><span class=\"br0\">(</span>?<span class=\"re4\">MODULE</span><span class=\"sy1\">,</span>task<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Program sleeping\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw3\">time</span>r:<span class=\"re3\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Program signalling event\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">P</span> <span class=\"sy3\">!</span> go<span class=\"sy1\">,</span><br/>    <span class=\"kw3\">time</span>r:<span class=\"re3\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 15, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Timers</span><br/>\u00a0<br/><span class=\"kw1\">let</span> onElapsed <span class=\"br0\">(</span>sender\u00a0: <span class=\"kw4\">obj</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>eventArgs\u00a0: ElapsedEventArgs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    printfn <span class=\"st0\">\"%A\"</span> eventArgs.<span class=\"me1\">SignalTime</span><br/>    <span class=\"br0\">(</span>sender\u00a0:?<span class=\"sy0\">&gt;</span> Timer<span class=\"br0\">)</span>.<span class=\"me1\">Stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> timer <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Timer<span class=\"br0\">(</span><span class=\"nu0\">1000</span>.<span class=\"br0\">)</span><br/>    timer.<span class=\"me1\">Elapsed</span>.<span class=\"me1\">AddHandler</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> ElapsedEventHandler<span class=\"br0\">(</span>onElapsed<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"%A\"</span> DateTime.<span class=\"me1\">Now</span><br/>    timer.<span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">ignore</span> <span class=\"sy0\">&lt;|</span> Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Gambas", "loc": 5, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Timer1_Timer<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/time\"><span class=\"kw2\">Time</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/now\"><span class=\"kw2\">Now</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 23, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    l <span class=\"sy2\">:=</span> log<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdout<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> log<span class=\"sy3\">.</span><span class=\"me1\">Ltime</span> <span class=\"sy3\">|</span> log<span class=\"sy3\">.</span><span class=\"me1\">Lmicroseconds</span><span class=\"sy1\">)</span><br/>    l<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"program start\"</span><span class=\"sy1\">)</span><br/>    event <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">go</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        l<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"task start\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy3\">&lt;-</span>event<br/>        l<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"event reset by task\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}()</span><br/>    l<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"program sleeping\"</span><span class=\"sy1\">)</span><br/>    time<span class=\"sy3\">.</span>Sleep<span class=\"sy1\">(</span><span class=\"nu0\">1</span> <span class=\"sy3\">*</span> time<span class=\"sy3\">.</span>Second<span class=\"sy1\">)</span><br/>    l<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"program signaling event\"</span><span class=\"sy1\">)</span><br/>    event &lt;<span class=\"sy3\">-</span> <span class=\"nu0\">0</span><br/>    time<span class=\"sy3\">.</span>Sleep<span class=\"sy1\">(</span><span class=\"nu0\">100</span> <span class=\"sy3\">*</span> time<span class=\"sy3\">.</span>Millisecond<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 11, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent <span class=\"br0\">(</span>threadDelay<span class=\"sy0\">,</span> forkIO<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent<span class=\"sy0\">.</span>SampleVar<br/>\u00a0<br/><span class=\"co1\">-- An Event is defined as a SampleVar with no data.</span><br/><span class=\"co1\">-- http://haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-SampleVar.html</span><br/><span class=\"kw1\">newtype</span> Event <span class=\"sy0\">=</span> Event <span class=\"br0\">(</span>SampleVar <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>newEvent               <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> Event <span class=\"br0\">(</span>newEmptySampleVar<span class=\"br0\">)</span><br/>signalEvent <span class=\"br0\">(</span>Event sv<span class=\"br0\">)</span> <span class=\"sy0\">=</span> writeSampleVar sv <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>resetEvent  <span class=\"br0\">(</span>Event sv<span class=\"br0\">)</span> <span class=\"sy0\">=</span> emptySampleVar sv<br/>waitEvent   <span class=\"br0\">(</span>Event sv<span class=\"br0\">)</span> <span class=\"sy0\">=</span> readSampleVar  sv</pre>"}, {"lang": "Icon and Unicon", "loc": 20, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">record</span> <span class=\"kw5\">Event</span><span class=\"br0\">(</span>cond<span class=\"sy0\">,</span> value<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">event</span> <span class=\"sy0\">:=</span> <span class=\"kw5\">Event</span><span class=\"br0\">(</span>condvar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    t1 <span class=\"sy0\">:=</span> thread <span class=\"br0\">{</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Task one waiting for event....\"</span><span class=\"br0\">)</span><br/>        critical <span class=\"kw4\">event</span><span class=\"sy0\">.</span><span class=\"me1\">cond</span><span class=\"sy0\">:</span> <span class=\"kw1\">while</span> <span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw4\">event</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> wait<span class=\"br0\">(</span><span class=\"kw4\">event</span><span class=\"sy0\">.</span><span class=\"me1\">cond</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Task one received event.\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    t2 <span class=\"sy0\">:=</span> thread <span class=\"br0\">{</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Task two waiting for event....\"</span><span class=\"br0\">)</span><br/>        critical <span class=\"kw4\">event</span><span class=\"sy0\">.</span><span class=\"me1\">cond</span><span class=\"sy0\">:</span> <span class=\"kw1\">while</span> <span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw4\">event</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> wait<span class=\"br0\">(</span><span class=\"kw4\">event</span><span class=\"sy0\">.</span><span class=\"me1\">cond</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Task two received event.\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw4\">delay</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>                   <span class=\"co1\"># Let main thread post the event.</span><br/>    <span class=\"kw4\">event</span><span class=\"sy0\">.</span><span class=\"me1\">value</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"yes\"</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Signalling event.\"</span><span class=\"br0\">)</span><br/>    signal<span class=\"br0\">(</span><span class=\"kw4\">event</span><span class=\"sy0\">.</span><span class=\"me1\">cond</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> wait<span class=\"br0\">(</span>t1<span class=\"sy0\">|</span>t2<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Julia", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function dolongcomputation(cond)<br/>    det(rand(4000, 4000))<br/>    Base.notify(cond)    <br/>end<br/>\u00a0<br/>function printnotice(cond)<br/>    Base.wait(cond)<br/>    println(\"They are finished.\")<br/>end<br/>\u00a0<br/>function delegate()<br/>    println(\"Starting task, sleeping...\")<br/>    condition = Base.Condition()<br/>    <a class=\"__cf_email__\" data-cfemail=\"75371406105b3514060c1b16\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(printnotice(condition))<br/>    <a class=\"__cf_email__\" data-cfemail=\"0a486b796f244a6b79736469\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(dolongcomputation(condition))<br/>end<br/>\u00a0<br/>delegate()<br/>sleep(5)<br/>println(\"Done sleeping.\")<br/>\u00a0</pre>"}, {"lang": "LFE", "loc": 21, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> log <span class=\"br0\">(</span>msg<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>`#<span class=\"br0\">(</span><span class=\"sy0\">,</span>h <span class=\"sy0\">,</span>m <span class=\"sy0\">,</span>s<span class=\"br0\">)</span> <span class=\"br0\">(</span>erlang<span class=\"sy0\">:</span><span class=\"me1\">time</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>lfe_io<span class=\"sy0\">:</span><span class=\"me1\">format</span> <span class=\"st0\">\"~2.B:~2.B:~2.B =&gt; ~s~n\"</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>h <span class=\"sy0\">,</span>m <span class=\"sy0\">,</span>s <span class=\"sy0\">,</span>msg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> task <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>log <span class=\"st0\">\"Task start\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>receive<br/>    <span class=\"br0\">(</span>'<span class=\"kw1\">go</span> 'ok<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>log <span class=\"st0\">\"Task resumed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> run <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>log <span class=\"st0\">\"Program start\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pid <span class=\"br0\">(</span>spawn <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>task<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">progn</span><br/>      <span class=\"br0\">(</span>log <span class=\"st0\">\"Program sleeping\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>timer<span class=\"sy0\">:</span><span class=\"me1\">sleep</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>log <span class=\"st0\">\"Program signalling event\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">!</span> pid '<span class=\"kw1\">go</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>timer<span class=\"sy0\">:</span><span class=\"me1\">sleep</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 9, "block": "<pre class=\"text highlighted_source\">-- the current window was closed<br/>on closeWindow<br/>...<br/>end<br/>\u00a0<br/>-- the left mouse button was pressed by the user<br/>on mouseDown<br/>...<br/>end</pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\">YUI<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">use</span><span class=\"br0\">(</span><span class=\"st0\">'event-custom'</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>Y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// add a custom event:</span><br/>    Y.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">'my:event'</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        alert<span class=\"br0\">(</span><span class=\"st0\">\"Event fired\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// fire the event after one second:</span><br/>    setTimeout<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Y.<span class=\"me1\">fire</span><span class=\"br0\">(</span><span class=\"st0\">'my:event'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">Print[\"Will exit in 4 seconds\"]; Pause[4]; Quit[]<br/>-&gt;Will exit in 4 seconds</pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">import posix<br/>\u00a0<br/>var p: array[2, cint]<br/>discard pipe p<br/>if fork() &gt; 0:<br/>  discard close p[0]<br/>  discard sleep 1<br/>  discard p[1].write(addr p[0], 1)<br/>  var x: cint = 0<br/>  discard wait x<br/>else:<br/>  discard close p[1]<br/>  discard p[0].read(addr p[1], 1)<br/>  echo \"received signal from pipe\"</pre>"}, {"lang": "Oforth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: anEvent<br/>| ch |<br/>   Channel new -&gt;ch<br/>   #[ ch receive \"Ok, event is signaled\u00a0!\" println ] &amp;<br/>   System sleep(1000) <br/>   ch send($myEvent)\u00a0;</pre>"}, {"lang": "Oz", "loc": 29, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NewEvent</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>NewCell _<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">SignalEvent</span> Event<span class=\"br0\">}</span><br/>     <span class=\"sy0\">@</span>Event = <span class=\"kw1\">unit</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">ResetEvent</span> Event<span class=\"br0\">}</span><br/>     Event <span class=\"sy0\">:=</span> _<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">WaitEvent</span> Event<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Wait <span class=\"sy0\">@</span>Event<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  E = <span class=\"br0\">{</span>NewEvent<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">thread</span><br/>     <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"[2] Waiting for event...\"</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>WaitEvent E<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"[2] Received event.\"</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"[1] Waiting 1 second...\"</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Delay 1000<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"[1] Signaling event.\"</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>SignalEvent E<span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 31, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> AnyEvent<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># a new condition with a callback:</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$quit</span> <span class=\"sy0\">=</span> AnyEvent<span class=\"sy0\">-&gt;</span><span class=\"me1\">condvar</span><span class=\"br0\">(</span><br/>    cb <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/warn.html\"><span class=\"kw3\">warn</span></a> <span class=\"st0\">\"Bye!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># a new timer, starts after 2s and repeats every 0.25s:</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$counter</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$hi</span> <span class=\"sy0\">=</span> AnyEvent<span class=\"sy0\">-&gt;</span><span class=\"me1\">timer</span><span class=\"br0\">(</span><br/>    after <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>    interval <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0.25</span><span class=\"sy0\">,</span><br/>    cb <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/warn.html\"><span class=\"kw3\">warn</span></a> <span class=\"st0\">\"Hi!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\"># flag the condition as ready after 4 times:</span><br/>        <span class=\"re0\">$quit</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/send.html\"><span class=\"kw3\">send</span></a> <span class=\"kw1\">if</span> <span class=\"sy0\">++</span><span class=\"re0\">$counter</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># another timer, runs the callback once after 1s:</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$hello</span> <span class=\"sy0\">=</span> AnyEvent<span class=\"sy0\">-&gt;</span><span class=\"me1\">timer</span><span class=\"br0\">(</span><br/>    after <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>    cb <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/warn.html\"><span class=\"kw3\">warn</span></a> <span class=\"st0\">\"Hello world!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># wait for the $quit condition to be ready:</span><br/><span class=\"re0\">$quit</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/recv.html\"><span class=\"kw3\">recv</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 14, "block": "<pre class=\"perl6 highlighted_source\">note now<span class=\"sy0\">,</span> <span class=\"st0\">\" program start\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$event</span> <span class=\"sy0\">=</span> Channel<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$todo</span> <span class=\"sy0\">=</span> start <span class=\"br0\">{</span><br/>    note now<span class=\"sy0\">,</span> <span class=\"st0\">\" task start\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$event</span><span class=\"sy0\">.</span><span class=\"me1\">receive</span><span class=\"sy0\">;</span><br/>    note now<span class=\"sy0\">,</span> <span class=\"st0\">\" event reset by task\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>note now<span class=\"sy0\">,</span> <span class=\"st0\">\" program sleeping\"</span><span class=\"sy0\">;</span><br/>sleep <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>note now<span class=\"sy0\">,</span> <span class=\"st0\">\" program signaling event\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$event</span><span class=\"sy0\">.</span><span class=\"me1\">send</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>await <span class=\"re0\">$todo</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(alarm 1<br/>   (prinl \"Exit in 4 seconds\")<br/>   (alarm 4 (bye)) )</pre>"}, {"lang": "PowerShell", "loc": 18, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$timer</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> System.Timers.Timer <span class=\"kw5\">-Property</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span>Enabled<span class=\"sy0\">=</span><span class=\"re0\">$true</span>; Interval<span class=\"sy0\">=</span><span class=\"nu0\">1000</span>; AutoReset<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$action</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$global</span>:counter <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Write-Host</span> \u201cEvent counter is $<span class=\"br0\">{</span>counter<span class=\"br0\">}</span>: $<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Get-Date</span><span class=\"br0\">)</span>.ToString<span class=\"br0\">(</span><span class=\"st0\">\"hh:mm:ss\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u201d<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$counter</span> <span class=\"kw4\">-ge</span> <span class=\"re0\">$event</span>.MessageData<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Write-Host</span> \u201cTimer stopped\u201d<br/>        <span class=\"re0\">$timer</span>.Stop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$job</span> <span class=\"sy0\">=</span> Register<span class=\"sy0\">-</span>ObjectEvent <span class=\"kw5\">-InputObject</span> <span class=\"re0\">$timer</span> <span class=\"sy0\">-</span>MessageData <span class=\"nu0\">5</span> <span class=\"sy0\">-</span>SourceIdentifier Count <span class=\"sy0\">-</span>EventName Elapsed <span class=\"sy0\">-</span>Action <span class=\"re0\">$action</span><br/>\u00a0<br/><span class=\"re0\">$global</span>:counter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"sy0\">&amp;</span> <span class=\"re0\">$job</span>.Module <span class=\"br0\">{</span><span class=\"re0\">$global</span>:counter<span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 12, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">OpenWindow</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">150</span>, <span class=\"nu0\">40</span>, <span class=\"st0\">\"Event Demo\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">ButtonGadget</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">35</span>, <span class=\"nu0\">20</span>, <span class=\"st0\">\"Quit\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Repeat</span><br/>\u00a0<br/>   Event <span class=\"sy0\">=</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/>\u00a0<br/>   <span class=\"kw1\">If</span>  Event <span class=\"sy0\">=</span> #PB_Event_Gadget <span class=\"kw1\">And</span> <span class=\"kw2\">EventGadget</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">End</span>         <br/>   <span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw1\">ForEver</span></pre>"}, {"lang": "Python", "loc": 22, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">threading</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">time</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> wait_for_event<span class=\"br0\">(</span>event<span class=\"br0\">)</span>:<br/>    event.<span class=\"me1\">wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Thread: Got event\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>e <span class=\"sy0\">=</span> <span class=\"kw3\">threading</span>.<span class=\"me1\">Event</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>t <span class=\"sy0\">=</span> <span class=\"kw3\">threading</span>.<span class=\"me1\">Thread</span><span class=\"br0\">(</span>target<span class=\"sy0\">=</span>wait_for_event<span class=\"sy0\">,</span> args<span class=\"sy0\">=</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>t.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Main: Waiting one second\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Main: Setting event\"</span><span class=\"br0\">)</span><br/>e.<span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Main: Done\"</span><span class=\"br0\">)</span><br/>t.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define task (thread (lambda () (printf \"Got: ~s\\n\" (thread-receive)))))<br/>\u00a0<br/>(thread-send task\u00a0; wait for it, then send it<br/>             (sync (alarm-evt (+ 1000 (current-inexact-milliseconds)))))<br/>\u00a0<br/>(void (sync task))\u00a0; wait for the task to be done before exiting<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 18, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates a  method  of  handling events  (this is a time\u2500driven pgm).*/</span><br/><span class=\"kw1\">signal</span> <span class=\"kw2\">on</span> <span class=\"kw2\">halt</span>                                   <span class=\"coMULTI\">/*allow the user to  HALT  the program.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> timeEvent                              <span class=\"coMULTI\">/*allow the  \"event\"  to be specified. */</span><br/><span class=\"kw1\">if</span> timeEvent=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> timeEvent=<span class=\"nu0\">5</span>                <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>\u00a0<br/>event?:  <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>                              <span class=\"coMULTI\">/*determine if an event has occurred.  */</span><br/>         theEvent=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/*maybe it's an event, \u2500or\u2500  maybe not.*/</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>theEvent,timeEvent<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">signal</span> happening<br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Control should never get here!'</span>             <span class=\"coMULTI\">/*This is a logic  can\u2500never\u2500happen\u00a0!  */</span><br/><span class=\"kw2\">halt</span>: <span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 program halted.'</span>;  <span class=\"kw1\">exit</span>  <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>happening: <span class=\"kw1\">say</span> <span class=\"st0\">'an event occurred at'</span>  <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"st0\">\", the event is:\"</span>   theEvent<br/>             <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> theEvent==<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>             <span class=\"kw1\">nop</span>                                 <span class=\"coMULTI\">/*replace NOP  with the \"process\" code.*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>                     <span class=\"coMULTI\">/*NOP  is a special REXX statement.    */</span><br/><span class=\"kw1\">signal</span> event?                                    <span class=\"coMULTI\">/*see if another event has happened.   */</span></pre>"}, {"lang": "Tcl", "loc": 54, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Simple task framework built from coroutines</span><br/><span class=\"kw1\">proc</span> pause ms <span class=\"br0\">{</span><br/>    after <span class=\"re0\">$ms</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><span class=\"sy0\">;</span>yield<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> task <span class=\"br0\">{</span>name script<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    coroutine <span class=\"re0\">$name</span> apply <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> \\<br/>        <span class=\"st0\">\"set\u00a0::tasks(<span class=\"es0\">\\[</span>info coro]) 1;$script;unset\u00a0::tasks(<span class=\"es0\">\\[</span>info coro])\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> waitForTasksToFinish <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> tasks<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>array size tasks<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tvwait tasks<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Make an Ada-like event class</span><br/>oo::<span class=\"me1\">class</span> create Event <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> waiting fired<br/>    constructor <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> waiting <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> fired <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> wait <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$fired</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> waiting <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>\t    yield<br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> signal <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> wake <span class=\"re0\">$waiting</span><br/>\t<span class=\"kw1\">set</span> waiting <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> fired <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">foreach</span> task <span class=\"re0\">$wake</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$task</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> reset <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> fired <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Execute the example</span><br/>Event create X<br/>task A <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"waiting for event\"</span><br/>    X wait<br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"received event\"</span><br/><span class=\"br0\">}</span><br/>task B <span class=\"br0\">{</span><br/>    pause <span class=\"nu0\">1000</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"signalling X\"</span><br/>    X signal<br/><span class=\"br0\">}</span><br/>waitForTasksToFinish</pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">var event=Atomic.Bool();  // False<br/>   // create thread waiting for event<br/>fcn(event){event.wait(); println(vm,\" ping!\")}.launch(event);<br/>Atomic.sleep(1);<br/>event.set();<br/>println(\"done\")</pre>"}]}