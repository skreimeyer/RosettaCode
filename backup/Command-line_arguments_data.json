{"task": "Command-line_arguments", "blocks": [{"lang": "Ada", "loc": 14, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_line</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Command_Line</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Print_Commands <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- The number of command line arguments is retrieved from the function Argument_Count</span><br/>   <span class=\"co1\">-- The actual arguments are retrieved from the function Argument</span><br/>   <span class=\"co1\">-- The program name is retrieved from the function Command_Name</span><br/>   Put<span class=\"br0\">(</span>Command_Name &amp; <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> Arg <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Argument_Count</span> <span class=\"kw1\">loop</span><br/>      Put<span class=\"br0\">(</span>Argument<span class=\"br0\">(</span>Arg<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   New_Line;<br/><span class=\"kw1\">end</span> Print_Commands;</pre>"}, {"lang": "Aikido", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>foreach arg in args {<br/>    println (\"arg: \" + arg)<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 8, "block": "<pre class=\"text highlighted_source\">integer i;<br/>\u00a0<br/>i = 0;<br/>while (i &lt; argc()) {<br/>    o_text(argv(i));<br/>    o_byte('\\n');<br/>    i += 1;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 5, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw27\">argc</span> <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"the argument #\"</span>g<span class=\"br0\">(</span><span class=\"sy1\">-</span>0<span class=\"br0\">)</span><span class=\"st0\">\" is \"</span>gl$<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 7, "block": "<pre class=\"applescript highlighted_source\">\u00a0<br/>#!<span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env osascript<br/><span class=\"co1\">-- Print first argument</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span> argv<br/>  <span class=\"kw3\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> argv<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 6, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0%0% <span class=\"co1\">; number of parameters</span><br/>  params <span class=\"sy0\">.=</span> <span class=\"re0\">%A_Index%</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Space\"><span class=\"kw2\">A_Space</span></a><br/><span class=\"kw1\">If</span> params\u00a0!<span class=\"sy0\">=</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0%0% parameters were passed:`n`n <span class=\"re0\">%params%</span><br/><span class=\"kw1\">Else</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Run.htm\"><span class=\"kw3\">Run</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_AhkPath%</span> <span class=\"st0\">\"%A_ScriptFullPath%\"</span> <span class=\"sy0\">-</span>c <span class=\"st0\">\"\\\"</span>alpha beta\\<span class=\"st0\">\"\"</span> <span class=\"sy0\">-</span>h <span class=\"st0\">\"\\\"</span>gamma\\<span class=\"st0\">\"\"</span></pre>"}, {"lang": "AWK", "loc": 8, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw5\">print</span> <span class=\"st0\">\"There are \"</span> <span class=\"kw3\">ARGC</span> <span class=\"st0\">\"command line parameters\"</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>l=<span class=\"nu0\">1</span>; l<span class=\"sy2\">&lt;</span><span class=\"kw3\">ARGC</span>; l<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span> <span class=\"st0\">\"Argument \"</span> l <span class=\"st0\">\" is \"</span> <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Babel", "loc": 1, "block": "<pre class=\"text highlighted_source\">babel -i Larry Mo Curly</pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"args: '\"</span>; <a href=\"http://www.qbasicnews.com/qboho/qckcommand%24.shtml\"><span class=\"kw3\">COMMAND$</span></a>; <span class=\"st0\">\"'\"</span></pre>"}, {"lang": "Batch File", "loc": 15, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> Count=0<br/>:<span class=\"re0\">loop</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">1</span>\"==\"\" <span class=\"sy0\">(</span><br/>   <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a count+=1<br/>   <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> parameter[<span class=\"sy0\">!</span><span class=\"re2\">count</span><span class=\"sy0\">!</span>]=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>   <a href=\"http://www.ss64.com/nt/shift.html\"><span class=\"kw1\">shift</span></a><br/>   <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop<br/><span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">a</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">count</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>   <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">parameter[%%<span class=\"re3\">a</span>]</span><span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">PRINT @cmd$</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">whl'(arg$:?a&amp;out$(str$(\"next arg=\"\u00a0!a)))</pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"This program is named\u00a0%s.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> argc<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"the argument #%d is\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 11, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"This program is named \"</span> <span class=\"sy1\">&lt;&lt;</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"There are \"</span> <span class=\"sy1\">&lt;&lt;</span> argc<span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" arguments given.\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> argc<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"the argument #\"</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy1\">&lt;&lt;</span> argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 10, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> args<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"Argument {0} is '{1}'\"</span>, i, args<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clean", "loc": 3, "block": "<pre class=\"text highlighted_source\">import ArgEnv<br/>\u00a0<br/>Start = getCommandLine</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">dorun</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> println <span class=\"sy0\">*</span>command<span class=\"sy0\">-</span>line<span class=\"sy0\">-</span>args<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 14, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> accept-all-args<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  args                   <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       main-<span class=\"kw3\">line</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">ACCEPT</span> args <span class=\"kw3\">FROM</span> COMMAND-<span class=\"kw3\">LINE</span><br/>           <span class=\"kw2\">DISPLAY</span> args<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 3, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>console.<span class=\"me1\">log</span> arg <span class=\"kw1\">for</span> arg <span class=\"kw1\">in</span> process.<span class=\"me1\">argv</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> argv <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">or</span><br/>   #+clisp <span class=\"br0\">(</span>ext<span class=\"sy0\">:</span><span class=\"me1\">argv</span><span class=\"br0\">)</span><br/>   #+sbcl sb-ext<span class=\"sy0\">:</span>*posix-argv*<br/>   #+abcl ext<span class=\"sy0\">:</span>*command-line-argument-<span class=\"kw1\">list</span>*<br/>   #+clozure <span class=\"br0\">(</span>ccl<span class=\"sy0\">::</span><span class=\"me0\">command-line-arguments</span><span class=\"br0\">)</span><br/>   #+gcl si<span class=\"sy0\">:</span>*command-args*<br/>   #+ecl <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> below <span class=\"br0\">(</span>si<span class=\"sy0\">:</span><span class=\"me1\">argc</span><span class=\"br0\">)</span> collect <span class=\"br0\">(</span>si<span class=\"sy0\">:</span><span class=\"me1\">argv</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   #+cmu extensions<span class=\"sy0\">:</span>*command-line-strings*<br/>   #+allegro <span class=\"br0\">(</span>sys<span class=\"sy0\">:</span><span class=\"me1\">command-line-arguments</span><span class=\"br0\">)</span><br/>   #+lispworks sys<span class=\"sy0\">:</span>*line-arguments-<span class=\"kw1\">list</span>*<br/>   <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> arg<span class=\"sy0\">;</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"#%2d\u00a0:\u00a0%s\"</span><span class=\"sy0\">,</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> arg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 5, "block": "<pre class=\"dcl highlighted_source\">$ i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$<span class=\"re2\"> loop:</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"the value of P<span class=\"es1\">''i'</span> is \"</span>, p'i<br/>$  i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">if</span> i <span class=\"sy0\">.le.</span> <span class=\"nu0\">8</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> loop</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 9, "block": "<pre class=\"text highlighted_source\">for i range 0 -- len\u00a0!args:<br/>\tprint\\( \"Argument #\" i \" is \" )<br/>\t. get-from\u00a0!args i<br/>\u00a0<br/>if has\u00a0!opts\u00a0:c:<br/>\t!print \"Ah, the -c option.\"<br/>\u00a0<br/>if has\u00a0!opts\u00a0:four:<br/>\t!. get-from\u00a0!opts\u00a0:four</pre>"}, {"lang": "Delphi", "loc": 14, "block": "<pre class=\"delphi highlighted_source\"><span class=\"co1\">// The program name and the directory it was called from are in</span><br/><span class=\"co1\">// param[0] , so given the axample of myprogram -c \"alpha beta\" -h \"gamma\"</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> paramcount <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'param['</span><span class=\"sy1\">,</span>x<span class=\"sy1\">,</span><span class=\"st0\">'] = '</span><span class=\"sy1\">,</span>param<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// will yield ( assuming windows and the c drive as the only drive)\u00a0:</span><br/>\u00a0<br/><span class=\"co1\">//  param[0] = c:\\myprogram</span><br/><span class=\"co1\">//  param[1] = -c</span><br/><span class=\"co1\">//  param[2] = alpha beta</span><br/><span class=\"co1\">//  param[3] = -h</span><br/><span class=\"co1\">//  param[4] = gamma</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/interp\"><span class=\"kw7\">interp</span></a>.<span class=\"me1\">getArgs</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Eiffel", "loc": 17, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>    APPLICATION<br/><span class=\"kw1\">inherit</span><br/>    <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/><span class=\"kw2\">create</span><br/>    make<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>    make<br/>            <span class=\"co1\">-- Print values for arguments with options 'c' and 'h'.</span><br/>        <span class=\"kw2\">do</span><br/>            print <span class=\"br0\">(</span><span class=\"st0\">\"Command line argument value for option 'c' is: \"</span><span class=\"br0\">)</span><br/>            print <span class=\"br0\">(</span>separate_character_option_value <span class=\"br0\">(</span><span class=\"st0\">'c'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>            print <span class=\"br0\">(</span><span class=\"st0\">\"Command line argument value for option 'h' is: \"</span><span class=\"br0\">)</span><br/>            print <span class=\"br0\">(</span>separate_character_option_value <span class=\"br0\">(</span><span class=\"st0\">'h'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>            io.<span class=\"me1\">read_line</span>    <span class=\"co1\">-- Keep console window open</span><br/>        <span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Elena", "loc": 8, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>public program =<br/>[<br/>    program_arguments forEvery(:i)&lt;int&gt;<br/>        [ console printLine(\"Argument \",i,\" is \",program_arguments[i]) ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 3, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/env elixir<br/>IO.puts 'Arguments:'<br/>Enum.map(System.argv(),&amp;IO.puts(&amp;1))</pre>"}, {"lang": "Emacs Lisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#!/usr/bin/env emacs --script<br/>(dolist (arg command-line-args-left) (message arg))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><span class=\"nu0\">3</span><span class=\"sy3\">&gt;</span> <a href=\"http://erlang.org/doc/man/init.html\"><span class=\"kw5\">init</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">arguments</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 9, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> cmd <span class=\"sy1\">=</span> <span class=\"kw2\">command_line</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Interpreter/executable name:\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>cmd<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Program file name:\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>cmd<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span>&gt;<span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Command line arguments:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"#%d\u00a0:\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>i<span class=\"sy2\">,</span>cmd<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span></pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co2\">#light</span><br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"%s\"</span> x<span class=\"br0\">)</span> args<br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>USING: io sequences command-line\u00a0;\n(command-line) [ print ] each\n</pre>"}, {"lang": "Fancy", "loc": 3, "block": "<pre class=\"text highlighted_source\">ARGV each: |a| {<br/>  a println # print each given command line argument<br/>}</pre>"}, {"lang": "Fantom", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  public static Void main (Str[] args) <br/>  {<br/>    echo (\"command-line args are: \" + args)<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 5, "block": "<pre class=\"text highlighted_source\">\\ args.f: print each command line argument on a separate line<br/>: main<br/>  argc @ 0 do i arg type cr loop\u00a0;<br/>\u00a0<br/>main bye</pre>"}, {"lang": "Fortran", "loc": 17, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> command_line_arguments<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">len_max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">256</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span> , nargs<br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span>len_max<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">arg</span><br/>\u00a0<br/>  nargs <span class=\"sy0\">=</span> command_argument_count<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">!nargs = iargc()</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, nargs<br/>    <span class=\"kw1\">call</span> get_command_argument <span class=\"br0\">(</span>i, arg<span class=\"br0\">)</span><br/>    <span class=\"co1\">!call getarg (i, arg)</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(a)'</span><span class=\"br0\">)</span> <span class=\"kw4\">trim</span> <span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> command_line_arguments<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 9, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' Program (myprogram.exe) invoke as follows:</span><br/><span class=\"co1\">' myprogram -c \"alpha beta\" -h \"gamma\"</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The program was invoked like this =&gt; \"</span>; <span class=\"kw1\">Command</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span> + <span class=\"kw1\">Command</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>println[ARGS]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 1, "block": "<pre class=\"text highlighted_source\">println( args )</pre>"}, {"lang": "Gambas", "loc": 10, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">PUBLIC</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">SUB</span></a> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">DIM</span></a> l <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">AS</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">DIM</span></a> numparms <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">AS</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">DIM</span></a> parm <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">AS</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>  numparms <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=application+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">Application</span></a>.<span class=\"me1\">Args</span>.<span class=\"me1\">Count</span><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">FOR</span></a> l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">TO</span></a> numparms <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    parm <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=application+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">Application</span></a>.<span class=\"me1\">Args</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span><br/>    <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">PRINT</span></a> l; <span class=\"st0\">\"\u00a0: \"</span>; parm<br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">NEXT</span></a> <br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">END</span></a></pre>"}, {"lang": "Go", "loc": 13, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"the argument #%d is\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> args</pre>"}, {"lang": "Harbour", "loc": 9, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"kw1\">PROCEDURE</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">LOCAL</span> i<br/>\u00a0<br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">TO</span> <span class=\"kw2\">PCount</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">?</span> <span class=\"st0\">\"argument\"</span><span class=\"sy0\">,</span> hb_ntos<span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=\"</span><span class=\"sy0\">,</span> hb_PValue<span class=\"br0\">(</span> i <span class=\"br0\">)</span><br/>   <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>   <span class=\"kw2\">RETURN</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<br/>main <span class=\"sy0\">=</span> getArgs <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a></pre>"}, {"lang": "HicEst", "loc": 4, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span> <span class=\"co1\">! 1 is HicEst.exe</span><br/>  <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span><span class=\"kw1\">$CMD_LINE</span><span class=\"sy1\">,</span> SePaRators<span class=\"sy1\">=</span><span class=\"st0\">'-\"'</span><span class=\"sy1\">,</span> ITeM<span class=\"sy1\">=</span>i<span class=\"sy1\">,</span> <span class=\"kw1\">IF</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span> EXit<span class=\"sy1\">,</span> <span class=\"kw1\">ENDIF</span><span class=\"sy1\">,</span> Parse<span class=\"sy1\">=</span>cmd<span class=\"sy1\">,</span> GetPosition<span class=\"sy1\">=</span>position<span class=\"br0\">)</span><br/>  <span class=\"kw1\">IF</span><span class=\"br0\">(</span>position <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> cmd<br/><span class=\"kw1\">ENDDO</span></pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"kw2\">System</span> args <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>a, a println<span class=\"br0\">)</span></pre>"}, {"lang": "Ioke", "loc": 1, "block": "<pre class=\"text highlighted_source\">System programArguments each(println)</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   ARGV</pre>"}, {"lang": "Java", "loc": 7, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Arguments <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"There are \"</span> <span class=\"sy0\">+</span> args.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" arguments given.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> args.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"The argument #\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">+</span> args<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" and is at index \"</span> <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\">process.<span class=\"me1\">argv</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"br0\">(</span>val<span class=\"sy0\">,</span> index<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`$<span class=\"br0\">{</span>index<span class=\"br0\">}</span><span class=\"sy0\">:</span> $<span class=\"br0\">{</span>val<span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>   $ARGS.positional contains an array of the positional arguments as JSON strings\n</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>prog = basename(Base.source_path())<br/>\u00a0<br/>println(prog, \"'s command-line arguments are:\")<br/>for s in ARGS<br/>    println(\"    \", s)<br/>end<br/>\u00a0</pre>"}, {"lang": "Klong", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>.p'.a<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 4, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     println<span class=\"br0\">(</span><span class=\"st0\">\"There are \"</span> + args.<span class=\"me1\">size</span> + <span class=\"st0\">\" arguments given.\"</span><span class=\"br0\">)</span><br/>     args.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> i, a -<span class=\"sy0\">&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"The argument #${i+1} is $a and is at index $i\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 5, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>iterate($argv) =&gt; {<br/>  stdoutnl(\"Argument \" + loop_count + \": \" + loop_value)<br/>}</pre>"}, {"lang": "LFE", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$ ./bin/lfe -pa ebin/ -c \"alpha beta\" -h \"gamma\"<br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 1, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">print</span> <span class=\"kw3\">CommandLine$</span></pre>"}, {"lang": "Lingo", "loc": 2, "block": "<pre class=\"text highlighted_source\">put the commandline<br/>-- \"-c alpha beta -h gamma\"</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre>logo file.logo - arg1 arg2 arg3\n</pre>"}, {"lang": "LSE64", "loc": 4, "block": "<pre class=\"text highlighted_source\">argc , nl  # number of arguments (including command itself)<br/>0         # argument<br/>dup arg dup 0 = || ,t  1 + repeat<br/>drop</pre>"}, {"lang": "Lua", "loc": 6, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"Program name:\"</span><span class=\"sy0\">,</span> arg<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Arguments:\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>arg <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> i<span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> arg<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">#!/usr/local/bin/MathematicaScript -script<br/>$CommandLine</pre>"}, {"lang": "Mercury", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module cmd_line_args.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module int, list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    io.progname(\"\", ProgName,\u00a0!IO),<br/>    io.format(\"This program is named\u00a0%s.\\n\", [s(ProgName)],\u00a0!IO),<br/>    io.command_line_arguments(Args,\u00a0!IO),<br/>    list.foldl2(print_arg, Args, 1, _,\u00a0!IO).<br/>\u00a0<br/>:- pred print_arg(string::in, int::in, int::out, io::di, io::uo) is det.<br/>\u00a0<br/>print_arg(Arg, ArgNum, ArgNum + 1,\u00a0!IO)\u00a0:-<br/>    io.format(\"the argument #%d is\u00a0%s\\n\", [i(ArgNum), s(Arg)],\u00a0!IO).<br/>\u00a0</pre>"}, {"lang": "MMIX", "loc": 23, "block": "<pre class=\"mmix highlighted_source\">argv   <span class=\"kw2\">IS</span>    <span class=\"nu3\">$1</span><br/>argc   <span class=\"kw2\">IS</span>    <span class=\"nu3\">$0</span><br/>i      <span class=\"kw2\">IS</span>    <span class=\"nu3\">$2</span><br/>\u00a0<br/>       <span class=\"kw2\">LOC</span>   <span class=\"nu2\">#100</span><br/>Main   <span class=\"kw2\">LOC</span>   @<br/>       <span class=\"kw1\">SETL</span>  i<span class=\"sy0\">,</span><span class=\"nu1\">1</span>               <span class=\"co2\">% i = 1</span><br/>Loop   <span class=\"kw1\">CMP</span>   <span class=\"nu3\">$3</span><span class=\"sy0\">,</span>argc<span class=\"sy0\">,</span><span class=\"nu1\">2</span>         <span class=\"co2\">% argc &lt; 2\u00a0?</span><br/>       <span class=\"kw1\">BN</span>    <span class=\"nu3\">$3</span><span class=\"sy0\">,</span><span class=\"nu1\">1F</span>             <span class=\"co2\">% then jump to end</span><br/>       <span class=\"kw1\">XOR</span>   <span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span>    <span class=\"co2\">% clear $255</span><br/>       <span class=\"kw1\">8ADDU</span> <span class=\"nu3\">$255</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>argv       <span class=\"co2\">% i*8 + argv</span><br/>       <span class=\"kw1\">LDOU</span>  <span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>       <span class=\"co2\">% argv[i]</span><br/>       <span class=\"kw1\">TRAP</span>  <span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut    <span class=\"co2\">% write the argument</span><br/>       <span class=\"kw1\">GETA</span>  <span class=\"nu3\">$255</span><span class=\"sy0\">,</span>NewLine      <span class=\"co2\">% add a newline</span><br/>       <span class=\"kw1\">TRAP</span>  <span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>       <span class=\"kw1\">INCL</span>  i<span class=\"sy0\">,</span><span class=\"nu1\">1</span>               <span class=\"co2\">% increment index</span><br/>       <span class=\"kw1\">SUB</span>   argc<span class=\"sy0\">,</span>argc<span class=\"sy0\">,</span><span class=\"nu1\">1</span>       <span class=\"co2\">% argc--</span><br/>       <span class=\"kw1\">BP</span>    argc<span class=\"sy0\">,</span>Loop         <span class=\"co2\">% argc &gt; 0? then Loop</span><br/>1H     <span class=\"kw2\">LOC</span>   @<br/>       <span class=\"kw1\">XOR</span>   <span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span>    <span class=\"co2\">% exit(0)</span><br/>       <span class=\"kw1\">TRAP</span>  <span class=\"nu1\">0</span><span class=\"sy0\">,</span>Halt<span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>\u00a0<br/>NewLine <span class=\"kw2\">BYTE</span> <span class=\"nu2\">#a</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span></pre>"}, {"lang": "Modula-2", "loc": 20, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> try;<br/>\u00a0<br/><span class=\"kw1\">FROM</span>  Arguments  <span class=\"kw1\">IMPORT</span>  GetArgs<span class=\"sy0\">,</span> ArgTable<span class=\"sy0\">,</span> GetEnv;<br/><span class=\"kw1\">FROM</span>  InOut      <span class=\"kw1\">IMPORT</span>  WriteCard<span class=\"sy0\">,</span> WriteLn<span class=\"sy0\">,</span> WriteString;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>   count<span class=\"sy0\">,</span> item        <span class=\"sy0\">:</span> SHORTCARD;<br/>      storage            <span class=\"sy0\">:</span> ArgTable;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>   GetArgs <span class=\"br0\">(</span>count<span class=\"sy0\">,</span> storage<span class=\"br0\">)</span>;<br/>   WriteString <span class=\"br0\">(</span><span class=\"st_h\">'Count ='</span><span class=\"br0\">)</span>;     WriteCard <span class=\"br0\">(</span>count<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>;   WriteLn;<br/>   item <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">REPEAT</span><br/>      WriteCard <span class=\"br0\">(</span>item<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      WriteString <span class=\"br0\">(</span><span class=\"st_h\">'\u00a0:  '</span><span class=\"br0\">)</span>;<br/>      WriteString <span class=\"br0\">(</span>storage^ <span class=\"br0\">[</span>item<span class=\"br0\">]</span>^<span class=\"br0\">)</span>;<br/>      WriteLn;<br/>      <span class=\"kw3\">INC</span> <span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>   <span class=\"kw1\">UNTIL</span> item <span class=\"sy0\">=</span> count<br/><span class=\"kw1\">END</span> try.</pre>"}, {"lang": "Modula-3", "loc": 12, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Args <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Params;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Params.<span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">IF</span> Params.<span class=\"me1\">Count</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Params.<span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Params.<span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Args.</pre>"}, {"lang": "Nemerle", "loc": 14, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module CLArgs<br/>{<br/>    Main(args\u00a0: array[string])\u00a0: void<br/>    {<br/>        foreach (arg in args) Write($\"$arg \"); // using the array passed to Main(), everything after the program name<br/>        Write(\"\\n\");<br/>\u00a0<br/>        def cl_args = Environment.GetCommandLineArgs(); // also gets program name<br/>        foreach (cl_arg in cl_args) Write($\"$cl_arg \");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 4, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/><span class=\"co1\">-- sample arguments: -c \"alpha beta\" -h \"gamma\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"program arguments:\"</span> arg<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import os<br/>let programName = getAppFilename()<br/>let arguments = commandLineParams()</pre>"}, {"lang": "Oberon-2", "loc": 15, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> CommandLineArguments;<br/><span class=\"kw1\">IMPORT</span><br/>  NPCT<span class=\"sy0\">:</span>Args<span class=\"sy0\">,</span><br/>  Out <span class=\"sy0\">:=</span> NPCT<span class=\"sy0\">:</span>Console;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Args number: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Args.<span class=\"me1\">Number</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"0.-\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>Args.<span class=\"me1\">AsString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"1.-\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>Args.<span class=\"me1\">AsString</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"2.-\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>Args.<span class=\"me1\">AsString</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"3.-\u00a0: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>Args.<span class=\"me1\">AsString</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"4.-: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>Args.<span class=\"me1\">AsString</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> CommandLineArguments.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 11, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Line <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        args<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 6, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span>args <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSProcessInfo_Class/\"><span class=\"kw5\">NSProcessInfo</span></a> processInfo<span class=\"br0\">]</span> arguments<span class=\"br0\">]</span>;<br/>NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"This program is named\u00a0%@.\"</span>, <span class=\"br0\">[</span>args objectAtIndex<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"There are\u00a0%d arguments.\"</span>, <span class=\"br0\">[</span>args count<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; i &lt; <span class=\"br0\">[</span>args count<span class=\"br0\">]</span>; <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"the argument #%d is\u00a0%@\"</span>, i, <span class=\"br0\">[</span>args objectAtIndex<span class=\"sy0\">:</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"This program is named\u00a0%s.\\n\"</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"the argument #%d is\u00a0%s\\n\"</span> i <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">System.Args println</pre>"}, {"lang": "Oz", "loc": 7, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">functor</span><br/><span class=\"kw1\">import</span> Application System<br/><span class=\"kw1\">define</span><br/>   ArgList = <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>getArgs plain<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>ForAll ArgList System<span class=\"sy0\">.</span>showInfo<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>exit 0<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Pascal", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@params</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$params_size</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">my</span> <span class=\"re0\">$second</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$fifth</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@params</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$params_size</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">my</span> <span class=\"re0\">$second</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$fifth</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 8, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># with arguments supplied</span><br/>$ perl6 <span class=\"sy0\">-</span>e <span class=\"st_h\">'sub MAIN($x, $y) { say $x + $y }'</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">8</span><br/>\u00a0<br/><span class=\"co1\"># missing argument:</span><br/>$ perl6 <span class=\"sy0\">-</span>e <span class=\"st_h\">'sub MAIN($x, $y) { say $x + $y }'</span> <span class=\"nu0\">3</span> <br/>Usage<span class=\"sy0\">:</span><br/><span class=\"sy0\">-</span>e <span class=\"st_h\">'...'</span> <span class=\"kw1\">x</span> y</pre>"}, {"lang": "Phix", "loc": 13, "block": "<pre class=\"text highlighted_source\">constant cmd = command_line()<br/>?cmd<br/>if cmd[1]=cmd[2] then<br/>    printf(1,\"Compiled executable name:\u00a0%s\\n\",{cmd[1]})<br/>else<br/>    printf(1,\"Interpreted (using\u00a0%s) source name:\u00a0%s\\n\",cmd[1..2])<br/>end if<br/>if length(cmd)&gt;2 then<br/>  puts(1,\"Command line arguments:\\n\")<br/>  for i = 3 to length(cmd) do<br/>    printf(1,\"#%d\u00a0:\u00a0%s\\n\",{i,cmd[i]}) <br/>  end for<br/>end if</pre>"}, {"lang": "PHP", "loc": 5, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$program_name</span> <span class=\"sy0\">=</span> <span class=\"re0\">$argv</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$second_arg</span> <span class=\"sy0\">=</span> <span class=\"re0\">$argv</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$all_args_without_program_name</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_shift\"><span class=\"kw3\">array_shift</span></a><span class=\"br0\">(</span><span class=\"re0\">$argv</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/picolisp /usr/lib/picolisp/lib.l<br/>\u00a0<br/>(de c ()<br/>   (prinl \"Got 'c': \" (opt)) )<br/>\u00a0<br/>(de h ()<br/>   (prinl \"Got 'h': \" (opt)) )<br/>\u00a0<br/>(load T)<br/>(bye)</pre>"}, {"lang": "PL/I", "loc": 10, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* The entire command line except the command word itself is passed */</span><br/><span class=\"coMULTI\">/* to the parameter variable in PL/I.                               */</span><br/>program<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>command_line<span class=\"br0\">)</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> command_line <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>\u00a0<br/>...<br/>\u00a0<br/><span class=\"kw1\">end</span> program<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 4, "block": "<pre class=\"text highlighted_source\">lvars arg;<br/>for arg in poparglist do<br/>   printf(arg, '-&gt;%s&lt;-\\n');<br/>endfor;</pre>"}, {"lang": "PowerBASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">? \"args: '\"; COMMAND$; \"'\"</pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span> <span class=\"kw3\">in</span> <a href=\"about:blank\"><span class=\"kw6\">$args</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">Write-Host</span> Argument <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> is <span class=\"re0\">$s</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pure", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using system;<br/>\u00a0<br/>printf \"There are\u00a0%d command line argumants\\n\" argc;<br/>puts \"They are \" $$ map (puts) argv;<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 11, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> n<span class=\"sy0\">=</span><span class=\"kw2\">CountProgramParameters</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Reading all parameters\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> n<br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">ProgramParameter</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Press Enter\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/>program_name <span class=\"sy0\">=</span> <span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>arguments <span class=\"sy0\">=</span> <span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>count <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>arguments<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">R CMD BATCH --vanilla --slave '--args a=1 b=c(2,5,6)' test.r test.out</pre>"}, {"lang": "Racket", "loc": 2, "block": "<pre class=\"scheme highlighted_source\">#lang racket<br/><span class=\"br0\">(</span>current<span class=\"sy0\">-</span>command<span class=\"sy0\">-</span>line<span class=\"sy0\">-</span>arguments<span class=\"br0\">)</span></pre>"}, {"lang": "RapidQ", "loc": 4, "block": "<pre class=\"text highlighted_source\">PRINT \"This program is named \"; Command$(0)<br/>FOR i=1 TO CommandCount<br/>    PRINT \"The argument \"; i; \" is \"; Command$(i)<br/>NEXT i</pre>"}, {"lang": "Raven", "loc": 9, "block": "<pre class=\"text highlighted_source\">ARGS print<br/>\u00a0<br/>stack (6 items)<br/> 0 =&gt; \"raven\"<br/> 1 =&gt; \"myprogram\"<br/> 2 =&gt; \"-c\"<br/> 3 =&gt; \"alpha beta\"<br/> 4 =&gt; \"-h\"<br/> 5 =&gt; \"gamma\"</pre>"}, {"lang": "REALbasic", "loc": 5, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> Run(args() <span class=\"kw4\">as</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw3\">For</span> <span class=\"kw3\">each</span> arg <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> <span class=\"kw3\">In</span> args<br/>    Stdout.WriteLine(arg)<br/>  <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "REXX", "loc": 2, "block": "<pre class=\"rexx highlighted_source\"><span class=\"kw1\">say</span> <span class=\"st0\">'command arguments:'</span><br/><span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see copy(\"=\",30) + nl<br/>see \"Command Line Parameters\" + nl<br/>see \"Size\u00a0: \" + len(sysargv) + nl<br/>see sysargv<br/>see copy(\"=\",30) + nl<br/>for x = 1 to len(sysargv)<br/>    see x + nl<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\">#! /usr/bin/env ruby</span><br/><span class=\"kw3\">p</span> ARGV</pre>"}, {"lang": "Rust", "loc": 6, "block": "<pre class=\"text highlighted_source\">use std::env;<br/>\u00a0<br/>fn main(){<br/>    let args: Vec&lt;_&gt; = env::args().collect();<br/>    println!(\"{:?}\", args);<br/>}</pre>"}, {"lang": "S-lang", "loc": 4, "block": "<pre class=\"text highlighted_source\">variable a;<br/>foreach a (__argv)<br/>  print(a);<br/>\u00a0</pre>"}, {"lang": "Sather", "loc": 7, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main(args:ARRAY{STR}) is<br/>    loop<br/>      #OUT + args.elt! + \"\\n\";<br/>    end;<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CommandLineArguments <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span> <br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"Received the following arguments: + ${args.mkString(\"</span><span class=\"st0\">\", \"</span>, <span class=\"st0\">\", \"</span>.<span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"> <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>main args<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> arg<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 11, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    writeln(\"This program is named \" &lt;&amp; name(PROGRAM) &lt;&amp; \".\");<br/>    for i range 1 to length(argv(PROGRAM)) do<br/>      writeln(\"The argument #\" &lt;&amp; i &lt;&amp; \" is \" &lt;&amp; argv(PROGRAM)[i]);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">say ARGV;</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">StartupArguments do: [|\u00a0:arg | inform: arg]</pre>"}, {"lang": "Smalltalk", "loc": 3, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"br0\">(</span><span class=\"re5\">1</span> to: <span class=\"re0\">Smalltalk</span> getArgc<span class=\"br0\">)</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>  <span class=\"br0\">(</span><span class=\"re0\">Smalltalk</span> getArgv: <span class=\"re5\">i</span><span class=\"br0\">)</span> displayNl<br/><span class=\"br0\">]</span></pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">print (\"This program is named \" ^ CommandLine.name () ^ \".\\n\");<br/>val args = CommandLine.arguments ();<br/>Array.appi<br/>  (fn (i, x) =&gt; print (\"the argument #\" ^ Int.toString (i+1) ^ \" is \" ^ x ^ \"\\n\"))<br/>  (Array.fromList args);</pre>"}, {"lang": "Swift", "loc": 6, "block": "<pre class=\"text highlighted_source\">let args = Process.arguments<br/>println(\"This program is named \\(args[0]).\")<br/>println(\"There are \\(args.count-1) arguments.\")<br/>for i in 1..&lt;args.count {<br/>  println(\"the argument #\\(i) is \\(args[i])\")<br/>}</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">{</span> <span class=\"kw2\"><span class=\"re0\">$argc</span></span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"kw2\"><span class=\"re0\">$argv</span></span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Toka", "loc": 3, "block": "<pre class=\"text highlighted_source\">[ arglist array.get type cr ] is show-arg<br/>[ dup . char: = emit space ] is #= <br/>1 #args [ i #= show-arg ] countedLoop</pre>"}, {"lang": "TXR", "loc": 7, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:args)<br/>@(collect)<br/>@arg<br/>@(end)<br/>@(output)<br/>My args are: {@(rep)@arg, @(last)@<a class=\"__cf_email__\" data-cfemail=\"5b3a293c1b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(end)}<br/>@(end)</pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">WHOLELIST</span>=<span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"8da9cd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span></pre>"}, {"lang": "Ursa", "loc": 8, "block": "<pre class=\"text highlighted_source\">#<br/># command-line arguments<br/>#<br/>\u00a0<br/># output all arguments<br/>for (decl int i) (&lt; i (size args)) (inc i)<br/>        out args&lt;i&gt; endl console<br/>end for</pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>#executable ('parameterized','')<br/>\u00a0<br/>clarg = &lt;.file$[contents: --&lt;''&gt;+ _option%LP]&gt;+ ~command.options</pre>"}, {"lang": "V", "loc": 4, "block": "<pre class=\"text highlighted_source\">$stack puts<br/>\u00a0<br/>./args.v a b c<br/>=[args.v a b c]</pre>"}, {"lang": "Visual Basic", "loc": 3, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> Main<br/>    MsgBox Command$<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 5, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> args <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> token <span class=\"kw1\">In</span> args<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>token<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span></pre>"}, {"lang": "vbScript", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'Command line arguments can be accessed all together by<br/>\u00a0<br/>For Each arg In Wscript.Arguments<br/>    Wscript.Echo \"arg=\", arg<br/>Next<br/>\u00a0<br/>'You can access only the named arguments such as /arg:value<br/>\u00a0<br/>For Each arg In Wscript.Arguments.Named<br/>    Wscript.Echo \"name=\", arg, \"value=\", Wscript.Arguments.Named(arg)<br/>Next<br/>\u00a0<br/>'Or just the unnamed arguments<br/>\u00a0<br/>For Each arg In Wscript.Arguments.Unnamed<br/>    Wscript.Echo \"arg=\", arg<br/>Next<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">System.argv.println();<br/>vm.arglist.println();</pre>"}]}