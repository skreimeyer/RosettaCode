{"task": "Munching_squares", "blocks": [{"lang": "Ada", "loc": 21, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Cairo; <span class=\"kw3\">use</span> Cairo;<br/><span class=\"kw3\">with</span> Cairo.<span class=\"me1\">Png</span>; <span class=\"kw3\">use</span> Cairo.<span class=\"me1\">Png</span>;<br/><span class=\"kw3\">with</span> Cairo.<span class=\"me1\">Image_Surface</span>; <span class=\"kw3\">use</span> Cairo.<span class=\"me1\">Image_Surface</span>;<br/><span class=\"kw3\">procedure</span> XorPattern <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> xorable <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">256</span>;<br/>   Surface\u00a0: Cairo_Surface;<br/>   Data\u00a0: RGB24_Array_Access;<br/>   Status\u00a0: Cairo_Status;<br/>   Num\u00a0: Byte;<br/><span class=\"kw1\">begin</span><br/>   Data\u00a0:= <span class=\"kw3\">new</span> RGB24_Array<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">256</span>*<span class=\"nu0\">256</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> x <span class=\"kw3\">in</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">255</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> y <span class=\"kw3\">in</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">255</span> <span class=\"kw1\">loop</span><br/>         Num\u00a0:= Byte<span class=\"br0\">(</span>xorable<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">xor</span> xorable<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         Data<span class=\"br0\">(</span>x+<span class=\"nu0\">256</span>*y<span class=\"br0\">)</span>\u00a0:= RGB24_Data'<span class=\"br0\">(</span>Num,<span class=\"nu0\">0</span>,Num<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Surface\u00a0:= Create_For_Data_RGB24<span class=\"br0\">(</span>Data, <span class=\"nu0\">256</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span>;<br/>   Status\u00a0:= Write_To_Png <span class=\"br0\">(</span>Surface, <span class=\"st0\">\"AdaXorPattern.png\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">pragma</span> Assert <span class=\"br0\">(</span>Status = Cairo_Status_Success<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> XorPattern;</pre>"}, {"lang": "AWK", "loc": 19, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># square size</span><br/>    s = <span class=\"nu0\">256</span><br/>    <span class=\"co1\"># the PPM image header needs 3 lines:</span><br/>    <span class=\"co1\"># P3</span><br/>    <span class=\"co1\"># width height</span><br/>    <span class=\"co1\"># max colors number (per channel)</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"P3<span class=\"es0\">\\n</span>\"</span>, s, s, <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>, s <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># and now we generate pixels as a RGB pair in a relaxed</span><br/>    <span class=\"co1\"># form \"R G B\\n\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x = <span class=\"nu0\">0</span>; x <span class=\"sy2\">&lt;</span> s; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y = <span class=\"nu0\">0</span>; y <span class=\"sy2\">&lt;</span> s; y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            p = xor<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>            <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, p, p<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">      size% = 256<br/>\u00a0<br/>      VDU 23,22,size%;size%;8,8,16,0<br/>      OFF<br/>\u00a0<br/>      DIM coltab%(size%-1)<br/>      FOR I% = 0 TO size%-1<br/>        coltab%(I%) = ((I% AND &amp;FF) * &amp;010101) EOR &amp;FF0000<br/>      NEXT<br/>\u00a0<br/>      GCOL 1<br/>      FOR I% = 0 TO size%-1<br/>        FOR J% = 0 TO size%-1<br/>          C% = coltab%(I% EOR J%)<br/>          COLOUR 1, C%, C%&gt;&gt;8, C%&gt;&gt;16<br/>          PLOT I%*2, J%*2<br/>        NEXT<br/>      NEXT I%<br/>\u00a0<br/>      REPEAT WAIT 1\u00a0: UNTIL FALSE<br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 3, "block": "<pre class=\"text highlighted_source\">55+::\"3P\",,,28*:*::..\\,:.\\,:v<br/>&gt;2%*28*:**-2/\\1-:v&lt;:8:-1&lt;<a class=\"__cf_email__\" data-cfemail=\"fba4bb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> v<br/>^\\-1*2%2/*:*82::\\_$0.0..:^:*&lt;</pre>"}, {"lang": "Burlesque", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) 0 <a class=\"__cf_email__\" data-cfemail=\"d3e1e6a193\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{0 <a class=\"__cf_email__\" data-cfemail=\"eddfd89fad\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/{$$Sh2' P[}\\/+]m[}m[sp<br/> 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25<br/> 1  0  3  2  5  4  7  6  9  8 11 10 13 12 15 14 17 16 19 18 21 20 23 22 25 24<br/> 2  3  0  1  6  7  4  5 10 11  8  9 14 15 12 13 18 19 16 17 22 23 20 21 26 27<br/> 3  2  1  0  7  6  5  4 11 10  9  8 15 14 13 12 19 18 17 16 23 22 21 20 27 26<br/> 4  5  6  7  0  1  2  3 12 13 14 15  8  9 10 11 20 21 22 23 16 17 18 19 28 29<br/> 5  4  7  6  1  0  3  2 13 12 15 14  9  8 11 10 21 20 23 22 17 16 19 18 29 28<br/> 6  7  4  5  2  3  0  1 14 15 12 13 10 11  8  9 22 23 20 21 18 19 16 17 30 31<br/> 7  6  5  4  3  2  1  0 15 14 13 12 11 10  9  8 23 22 21 20 19 18 17 16 31 30<br/> 8  9 10 11 12 13 14 15  0  1  2  3  4  5  6  7 24 25 26 27 28 29 30 31 16 17<br/> 9  8 11 10 13 12 15 14  1  0  3  2  5  4  7  6 25 24 27 26 29 28 31 30 17 16<br/>10 11  8  9 14 15 12 13  2  3  0  1  6  7  4  5 26 27 24 25 30 31 28 29 18 19<br/>11 10  9  8 15 14 13 12  3  2  1  0  7  6  5  4 27 26 25 24 31 30 29 28 19 18<br/>12 13 14 15  8  9 10 11  4  5  6  7  0  1  2  3 28 29 30 31 24 25 26 27 20 21<br/>13 12 15 14  9  8 11 10  5  4  7  6  1  0  3  2 29 28 31 30 25 24 27 26 21 20<br/>14 15 12 13 10 11  8  9  6  7  4  5  2  3  0  1 30 31 28 29 26 27 24 25 22 23<br/>15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0 31 30 29 28 27 26 25 24 23 22<br/>16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  0  1  2  3  4  5  6  7  8  9<br/>17 16 19 18 21 20 23 22 25 24 27 26 29 28 31 30  1  0  3  2  5  4  7  6  9  8<br/>18 19 16 17 22 23 20 21 26 27 24 25 30 31 28 29  2  3  0  1  6  7  4  5 10 11<br/>19 18 17 16 23 22 21 20 27 26 25 24 31 30 29 28  3  2  1  0  7  6  5  4 11 10<br/>20 21 22 23 16 17 18 19 28 29 30 31 24 25 26 27  4  5  6  7  0  1  2  3 12 13<br/>21 20 23 22 17 16 19 18 29 28 31 30 25 24 27 26  5  4  7  6  1  0  3  2 13 12<br/>22 23 20 21 18 19 16 17 30 31 28 29 26 27 24 25  6  7  4  5  2  3  0  1 14 15<br/>23 22 21 20 19 18 17 16 31 30 29 28 27 26 25 24  7  6  5  4  3  2  1  0 15 14<br/>24 25 26 27 28 29 30 31 16 17 18 19 20 21 22 23  8  9 10 11 12 13 14 15  0  1<br/>25 24 27 26 29 28 31 30 17 16 19 18 21 20 23 22  9  8 11 10 13 12 15 14  1  0<br/>\u00a0</pre>"}, {"lang": "C", "loc": 44, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> hue_to_rgb<span class=\"br0\">(</span><span class=\"kw4\">double</span> hue<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> sat<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> x<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">255</span> <span class=\"sy0\">*</span> sat<span class=\"sy0\">;</span><br/>\thue <span class=\"sy0\">/=</span> <span class=\"nu0\">60</span><span class=\"sy0\">;</span><br/>\tx <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fabs.html\"><span class=\"kw3\">fabs</span></a><span class=\"br0\">(</span>fmod<span class=\"br0\">(</span>hue<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>hue<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span>\tp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>\tp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>\tp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span>\tp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span>\tp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">5</span><span class=\"sy0\">:</span>\tp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> <span class=\"nu0\">512</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>colors <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>size <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>pix <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>size <span class=\"sy0\">*</span> size <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\tFILE <span class=\"sy0\">*</span>fp<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\thue_to_rgb<span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">240</span>. <span class=\"sy0\">/</span> size<span class=\"sy0\">,</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">1</span>. <span class=\"sy0\">/</span> size<span class=\"sy0\">,</span> colors <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> p <span class=\"sy0\">=</span> pix<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> j<span class=\"sy0\">++,</span> p <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> colors <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">^</span> j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tfp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"xor.ppm\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"wb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span> <span class=\"st0\">\"P6<span class=\"es1\">\\n</span>%d\u00a0%d<span class=\"es1\">\\n</span>255<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> size<span class=\"sy0\">,</span> size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>pix<span class=\"sy0\">,</span> size <span class=\"sy0\">*</span> size <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 163, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">512</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> myBitmap<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, brush<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, clr<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, wid<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tDeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPINFO    bi<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>        <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>    <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>      <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>       <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>      <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>\tHDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\thdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\twidth <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span> BYTE clr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">memset</span><span class=\"br0\">(</span> pBits, clr, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setBrushColor<span class=\"br0\">(</span> DWORD bClr <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> brush <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbrush <span class=\"sy1\">=</span> CreateSolidBrush<span class=\"br0\">(</span> bClr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD c <span class=\"br0\">)</span> <span class=\"br0\">{</span> clr <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPenWidth<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w <span class=\"br0\">)</span>   <span class=\"br0\">{</span> wid <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> string path <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>\tBITMAPINFO       infoheader<span class=\"sy4\">;</span><br/>\tBITMAP           bitmap<span class=\"sy4\">;</span><br/>\tDWORD            wb<span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tHANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tCloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, wid, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HBITMAP bmp<span class=\"sy4\">;</span><br/>    HDC     hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span><br/>    HBRUSH  brush<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>    <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>     width, height, wid<span class=\"sy4\">;</span><br/>    DWORD   clr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> mSquares<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    mSquares<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        createPallete<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> draw<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tHDC dc <span class=\"sy1\">=</span> bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> BMP_SIZE<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> BMP_SIZE<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"br0\">(</span> x <span class=\"sy3\">^</span> y <span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">256</span><span class=\"sy4\">;</span><br/>\t\tSetPixel<span class=\"br0\">(</span> dc, x, y, clrs<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\tBitBlt<span class=\"br0\">(</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, BMP_SIZE, BMP_SIZE, dc, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, SRCCOPY <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"co1\">//bmp.saveBitmap( \"f:\\\\rc\\\\msquares_cpp.bmp\" );</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> createPallete<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">256</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\tclrs<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> x<span class=\"sy1\">&lt;&lt;</span><span class=\"nu0\">1</span>, x, x<span class=\"sy1\">&lt;&lt;</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"co1\">//rand()\u00a0% 180 + 50, rand()\u00a0% 200 + 50, rand()\u00a0% 180 + 50 );</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> clrs<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    myBitmap bmp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ShowWindow<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, SW_MAXIMIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    mSquares s<span class=\"sy4\">;</span> s.<span class=\"me1\">draw</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing.Imaging</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> XORPattern<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> size <span class=\"sy0\">=</span> 0x100<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> black <span class=\"sy0\">=</span> Color<span class=\"sy0\">.</span><span class=\"me1\">Black</span><span class=\"sy0\">.</span><span class=\"me1\">ToArgb</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> palette <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span>black, size<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>Color<span class=\"sy0\">.</span><span class=\"me1\">FromArgb</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">using</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> image <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Bitmap<span class=\"br0\">(</span>size, size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    image<span class=\"sy0\">.</span><span class=\"me1\">SetPixel</span><span class=\"br0\">(</span>x, y, palette<span class=\"br0\">[</span>x <span class=\"sy0\">^</span> y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            image<span class=\"sy0\">.</span><span class=\"me1\">Save</span><span class=\"br0\">(</span><span class=\"st0\">\"XORPatternCSharp.png\"</span>, ImageFormat<span class=\"sy0\">.</span><span class=\"me1\">Png</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">512</span><span class=\"sy0\">,</span> height <span class=\"sy0\">=</span> <span class=\"nu0\">512</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> f <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"xor_pattern.ppm\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"wb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    f.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"P6<span class=\"es1\">\\n</span>%d\u00a0%d<span class=\"es1\">\\n</span>255\"</span><span class=\"sy0\">,</span> width<span class=\"sy0\">,</span> height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">height</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">width</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">^</span> y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw4\">ubyte</span>.<span class=\"me1\">max</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> u3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">255</span> <span class=\"sy0\">-</span> c<span class=\"sy0\">,</span> c <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">rawWrite</span><span class=\"br0\">(</span>u3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 18, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'types<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>lib 'plot<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>size <span class=\"nu0\">512</span> <span class=\"nu0\">512</span><span class=\"br0\">)</span> <span class=\"co1\">;; for example</span><br/>\u00a0<br/><span class=\"co1\">;; use m = 16, 32, 44, .. to change the definition (number of losanges)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>munch <span class=\"br0\">(</span>m <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> PIX <span class=\"br0\">(</span>pixels<span class=\"sy0\">-&gt;</span>int32<span class=\"sy0\">-</span><span class=\"kw1\">vector</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; get canvas image</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>pcolor x y<span class=\"br0\">)</span> <span class=\"co1\">;; color at (x,y)</span><br/>\t\t<span class=\"br0\">(</span>hsv<span class=\"sy0\">-&gt;</span>rgb<br/>\t\t\t<span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span>bitwise<span class=\"sy0\">-</span>xor <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> x m<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> y m<span class=\"br0\">)</span><span class=\"br0\">)</span> m<span class=\"br0\">)</span><br/>\t\t\t<span class=\"nu0\">0.9</span><br/>\t\t\t<span class=\"nu0\">0.9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>pixels<span class=\"sy0\">-</span><span class=\"kw1\">map</span> pcolor PIX<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>vector<span class=\"sy0\">-&gt;</span>pixels PIX<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; draw canvas image</span><br/>\u00a0<br/><span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>much<span class=\"br0\">)</span> <span class=\"co1\">;; ESC to see tge drawing</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 21, "block": "<pre class=\"text highlighted_source\">USING: accessors images images.loader kernel math sequences\u00a0;<br/>IN: rosetta-code.munching-squares<br/>\u00a0<br/>: img-data ( -- seq ) 256 sq [ B{ 0 0 0 255 } ] replicate\u00a0;<br/>\u00a0<br/>: (munching) ( elt index -- elt' )<br/>    256 /mod bitxor [ rest ] dip prefix\u00a0;<br/>\u00a0<br/>: munching ( -- seq )<br/>    img-data [ (munching) ] map-index B{ } concat-as\u00a0;<br/>\u00a0<br/>: &lt;munching-img&gt; ( -- img )<br/>    &lt;image&gt;<br/>    { 256 256 }      &gt;&gt;dim<br/>    BGRA             &gt;&gt;component-order<br/>    ubyte-components &gt;&gt;component-type<br/>    munching         &gt;&gt;bitmap\u00a0;<br/>\u00a0<br/>: main ( -- ) &lt;munching-img&gt; \"munching.png\" save-graphic-image\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "FreeBASIC", "loc": 21, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 03-11-2016</span><br/><span class=\"co1\">' compile with: fbc -s gui</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong x, y, r, w = <span class=\"nu0\">256</span><br/>\u00a0<br/><span class=\"kw1\">ScreenRes</span> w, w, <span class=\"nu0\">32</span><br/>\u00a0<br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> w -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> w -<span class=\"nu0\">1</span><br/>        r =<span class=\"br0\">(</span>x <span class=\"kw1\">Xor</span> y<span class=\"br0\">)</span> And <span class=\"nu0\">255</span><br/>        <span class=\"kw1\">PSet</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>, <span class=\"kw1\">RGB</span><span class=\"br0\">(</span>r, r , r<span class=\"br0\">)</span>         <span class=\"co1\">' gray scale</span><br/>        <span class=\"co1\">' PSet(x, y), RGB(r, 255 - r, 0)  ' red + green</span><br/>        <span class=\"co1\">' PSet(x, y), RGB(r, 0, 0)        ' red</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">WindowTitle</span> <span class=\"st0\">\"Close window or hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "GLSL", "loc": 43, "block": "<pre class=\"glsl highlighted_source\"><span class=\"kw3\">vec3</span> color<span class=\"sy0\">;</span><br/><span class=\"kw3\">float</span> c<span class=\"sy0\">,</span>p<span class=\"sy0\">;</span><br/><span class=\"kw3\">vec2</span> b<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">void</span> main<span class=\"br0\">(</span><span class=\"kw3\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw3\">vec2</span> uv <span class=\"sy0\">=</span> <span class=\"kw6\">gl_FragCoord</span><span class=\"sy0\">.</span><span class=\"me1\">xy</span> <span class=\"sy0\">/</span> iResolution<span class=\"sy0\">.</span><span class=\"me1\">xy</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">float</span> scale <span class=\"sy0\">=</span> iResolution<span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">/</span> iResolution<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\tuv <span class=\"sy0\">=</span> uv<span class=\"sy0\">-</span><span class=\"nu0\">0.5</span><span class=\"sy0\">;</span><br/>\tuv<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">/=</span>scale<span class=\"sy0\">;</span><br/>\u00a0<br/>\tb    <span class=\"sy0\">=</span> uv<span class=\"sy0\">*</span><span class=\"nu0\">256.0</span><span class=\"sy0\">+</span><span class=\"nu0\">256.0</span><span class=\"sy0\">;</span><br/>\tc <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">float</span> i<span class=\"sy0\">=</span><span class=\"nu0\">16.0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&gt;=</span><span class=\"nu0\">1.0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">-=</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tp <span class=\"sy0\">=</span> <span class=\"kw5\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span><br/>\t\t   <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tc <span class=\"sy0\">+=</span> p<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tb<span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">-=</span> p<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tb<span class=\"sy0\">.</span><span class=\"me1\">y</span> <span class=\"sy0\">-=</span> p<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tc<span class=\"sy0\">=</span><span class=\"kw5\">mod</span><span class=\"br0\">(</span>c<span class=\"sy0\">/</span><span class=\"nu0\">128.0</span><span class=\"sy0\">,</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tcolor <span class=\"sy0\">=</span> <span class=\"kw3\">vec3</span><span class=\"br0\">(</span><span class=\"kw5\">sin</span><span class=\"br0\">(</span>c<span class=\"sy0\">+</span>uv<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">*</span><span class=\"kw5\">cos</span><span class=\"br0\">(</span>uv<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">*</span><span class=\"nu0\">1.2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw5\">tan</span><span class=\"br0\">(</span>c<span class=\"sy0\">+</span>uv<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">-</span><span class=\"nu0\">0.3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">1.1</span><span class=\"sy0\">,</span> <span class=\"kw5\">cos</span><span class=\"br0\">(</span>c<span class=\"sy0\">-</span>uv<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">+</span><span class=\"nu0\">0.9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw6\">gl_FragColor</span> <span class=\"sy0\">=</span> <span class=\"kw3\">vec4</span><span class=\"br0\">(</span>color<span class=\"sy0\">,</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Gnuplot", "loc": 4, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+pm3d%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">pm3d</span></a> map<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+size%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">size</span></a> square<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+isosamples%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">isosamples</span></a> <span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><br/><span class=\"kw1\">splot</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">255</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">255</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"br0\">)</span><span class=\"sy0\">^</span>floor<span class=\"br0\">(</span><span class=\"kw5\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>ByteString <span class=\"kw1\">as</span> BY <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:writeFile\"><span class=\"kw3\">writeFile</span></a><span class=\"sy0\">,</span> pack<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Bits <span class=\"br0\">(</span>xor<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  BY<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:writeFile\"><span class=\"kw3\">writeFile</span></a><br/>    <span class=\"st0\">\"out.pgm\"</span><br/>    <span class=\"br0\">(</span>BY<span class=\"sy0\">.</span>pack<br/>       <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a><span class=\"br0\">)</span> <span class=\"st0\">\"P5<span class=\"es0\">\\n</span>256 256<span class=\"es0\">\\n</span>256<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">++</span><br/>        <span class=\"br0\">[</span> x `xor` y<br/>        <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">255</span><span class=\"br0\">]</span> <br/>        <span class=\"sy0\">,</span> y <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">255</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 17, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"image\"</span><br/>    <span class=\"st0\">\"image/png\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    g <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewGray<span class=\"sy1\">(</span>image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">256</span><span class=\"sy1\">,</span> <span class=\"nu0\">256</span><span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> g<span class=\"sy3\">.</span>Pix <span class=\"sy1\">{</span><br/>        g<span class=\"sy3\">.</span>Pix<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">uint8</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span>&gt;&gt;<span class=\"nu0\">8</span> <span class=\"sy3\">^</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    f<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"st0\">\"xor.png\"</span><span class=\"sy1\">)</span><br/>    png<span class=\"sy3\">.</span><span class=\"me1\">Encode</span><span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> g<span class=\"sy1\">)</span><br/>    f<span class=\"sy3\">.</span><span class=\"me1\">Close</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 18, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span>   <span class=\"co1\">#: XOR graphic</span><br/>   wsize <span class=\"sy1\">:=</span> <span class=\"nu0\">512</span><br/>   cmax  <span class=\"sy1\">:=</span> <span class=\"nu0\">32768</span><br/>   wparms <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Xmas Xor Graphic\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"g\"</span><span class=\"sy1\">,</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"size=%d,%d\"</span><span class=\"sy1\">,</span>wsize<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\"bg=black\"</span><span class=\"br0\">]</span><br/>   <span class=\"sy1\">&amp;</span><span class=\"kw3\">window</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"sy1\">!</span>wparms <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Unable to open window\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> y <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> wsize <span class=\"sy1\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> wsize <span class=\"sy1\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>         c <span class=\"sy1\">:=</span> cmax<span class=\"sy1\">/</span>wsize <span class=\"sy1\">*</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>wsize<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"kw4\">ixor</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw5\">Fg</span><span class=\"br0\">(</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"%d,%d,%d\"</span><span class=\"sy1\">,</span>c<span class=\"sy1\">,</span>cmax<span class=\"sy1\">-</span>c<span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw5\">DrawPoint</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">until</span> <span class=\"kw5\">Event</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lpress</span>     <span class=\"co1\"># wait for left button to quit</span><br/>  <span class=\"kw4\">close</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">window</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   require <span class=\"st_h\">'viewmat'</span><br/>   viewmat ~:\"<span class=\"nu0\">1</span>/&amp;.#: ~ i.<span class=\"nu0\">256</span></pre>"}, {"lang": "Java", "loc": 31, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Color</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Graphics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.JFrame</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.JPanel</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> XorPattern <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> xorPanel<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> XorPattern<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        xorPanel <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            @Override<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paint<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>y<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"br0\">(</span>x <span class=\"sy0\">^</span> y<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">256</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>x, y, x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        add<span class=\"br0\">(</span>xorPanel<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setSize<span class=\"br0\">(</span><span class=\"nu0\">300</span>, <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setDefaultCloseOperation<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setVisible<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">new</span> XorPattern<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">jq -n -r -f Munching_squares.jq &gt; Munching_squares.svg</pre>"}, {"lang": "Kotlin", "loc": 47, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4-3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JFrame</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JPanel</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Graphics</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Graphics2D</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Color</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Dimension</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">BorderLayout</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">RenderingHints</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">SwingUtilities</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> XorPattern <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        preferredSize <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">256</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paint<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg as Graphics2D<br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, <br/>                           RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span> until height<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"br0\">(</span>x xor y<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">256</span>, <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>                g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>x, y, x, y<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            defaultCloseOperation <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>            title <span class=\"sy0\">=</span> <span class=\"st0\">\"Munching squares\"</span><br/>            isResizable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            add<span class=\"br0\">(</span>XorPattern<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>            pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>            isVisible <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 33, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"kw1\">nomainwin</span><br/>\u00a0<br/>    w <span class=\"sy0\">=</span><span class=\"nu0\">512</span><br/>    <span class=\"co1\">'   allow for title bar and window border</span><br/>    <span class=\"kw3\">WindowWidth</span>  <span class=\"sy0\">=</span>w <span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>    <span class=\"kw3\">WindowHeight</span> <span class=\"sy0\">=</span>w <span class=\"sy0\">+</span><span class=\"nu0\">34</span><br/>\u00a0<br/>    <span class=\"kw1\">open</span> <span class=\"st0\">\"XOR Pattern\"</span> <span class=\"kw1\">for</span> graphics_nsb_nf <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>w<br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"trapclose quit\"</span><br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"down\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> w <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> w <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            b <span class=\"sy0\">=</span><span class=\"br0\">(</span> x <span class=\"kw1\">xor</span> y<span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"nu0\">255</span><br/>            <span class=\"kw1\">print</span> b<br/>            <span class=\"sy0\">#</span>w <span class=\"st0\">\"color \"</span>; <span class=\"nu0\">255</span> <span class=\"sy0\">-</span>b; <span class=\"st0\">\" \"</span>; b <span class=\"sy0\">/</span><span class=\"nu0\">2</span>; <span class=\"st0\">\" \"</span>; b<br/>            <span class=\"sy0\">#</span>w <span class=\"st0\">\"set \"</span>; x; <span class=\"st0\">\" \"</span>; w <span class=\"sy0\">-</span>y <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">scan</span><br/>        <span class=\"kw1\">next</span> y<br/>    <span class=\"kw1\">next</span> x<br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"flush\"</span><br/>\u00a0<br/>    <span class=\"kw1\">wait</span><br/>\u00a0<br/>    <span class=\"kw1\">sub</span> quit j$<br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>w<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 29, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> clr <span class=\"sy0\">=</span>  <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> drawMSquares<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> pts <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> hei <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> wid <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            idx <span class=\"sy0\">=</span> bit<span class=\"sy0\">.</span>bxor<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> j <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">256</span><br/>            pts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> clr<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> clr<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> clr<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">}</span><br/>            love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>points<span class=\"br0\">(</span> pts <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> createPalette<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"kw1\">do</span><br/>        clr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> bit<span class=\"sy0\">.</span>band<span class=\"br0\">(</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">2.8</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> bit<span class=\"sy0\">.</span>band<span class=\"br0\">(</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">3.2</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> bit<span class=\"sy0\">.</span>band<span class=\"br0\">(</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">1.5</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>load<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    wid<span class=\"sy0\">,</span> hei <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    canvas <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>newCanvas<span class=\"br0\">(</span> wid<span class=\"sy0\">,</span> hei <span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><span class=\"sy0\">;</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><br/>    createPalette<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> drawMSquares<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">ListDensityPlot[<br/> Table[Table[<br/>   FromDigits[BitXor[IntegerDigits[x, 2, 8], IntegerDigits[y, 2, 8]], <br/>    2], {x, 0, 255}], {y, 0, 255}]]</pre>"}, {"lang": "MATLAB", "loc": 8, "block": "<pre class=\"matlab highlighted_source\"><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a> = <span class=\"nu0\">256</span>;<br/><span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/meshgrid.html\"><span class=\"kw2\">meshgrid</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>:size-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>c = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bitxor.html\"><span class=\"kw2\">bitxor</span></a><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>;<br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/colormap.html\"><span class=\"kw2\">colormap</span></a> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bone.html\"><span class=\"kw2\">bone</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">)</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/image.html\"><span class=\"kw2\">image</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/axis.html\"><span class=\"kw2\">axis</span></a> equal;</pre>"}, {"lang": "Microsoft Small Basic", "loc": 44, "block": "<pre class=\"text highlighted_source\">' Munching squares - smallbasic  - 27/07/2018<br/>  size=256<br/>  GraphicsWindow.Width=size<br/>  GraphicsWindow.Height=size<br/>  For i=0 To size-1<br/>    For j=0 To size-1<br/>      BitXor() 'color=i Xor j<br/>      GraphicsWindow.SetPixel(i,j,GraphicsWindow.GetColorFromRGB(0,color,color))<br/>    EndFor<br/>  EndFor<br/>\u00a0<br/>Sub BitXor '(i,j)-&gt;color<br/>  n=i<br/>  Int2Bit()<br/>  ib=ret<br/>  n=j<br/>  Int2Bit()<br/>  jb=ret<br/>  color=0<br/>  For k=1 to 8<br/>    ki=Text.GetSubText(ib,k,1)<br/>    kj=Text.GetSubText(jb,k,1)<br/>    If ki=\"1\" Or kj=\"1\" Then<br/>      kk=\"1\"<br/>    Else<br/>      kk=\"0\"<br/>    EndIf<br/>    If ki=\"1\" And kj=\"1\" Then<br/>      kk=\"0\"<br/>    EndIf<br/>    color=2*color+kk<br/>  EndFor<br/>EndSub <br/>\u00a0<br/>Sub Int2Bit 'n-&gt;ret<br/>  x=n<br/>  ret=\"\"<br/>  For k=1 to 8<br/>    t=Math.Floor(x/2)<br/>    r=Math.Remainder(x,2)<br/>    ret=Text.Append(r,ret)<br/>    x=t<br/>  EndFor<br/>EndSub </pre>"}, {"lang": "OCaml", "loc": 13, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Graphics.html\"><span class=\"kw2\">Graphics</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  open_graph <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>  resize_window <span class=\"nu0\">256</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> <span class=\"br0\">(</span>size_y<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> <span class=\"br0\">(</span>size_x<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> v <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"kw1\">lxor</span> y<span class=\"br0\">)</span> <span class=\"kw1\">land</span> 0xFF <span class=\"kw1\">in</span><br/>      set_color <span class=\"br0\">(</span>rgb v <span class=\"br0\">(</span><span class=\"nu0\">255</span> <span class=\"sy0\">-</span> v<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      plot x y<br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>read_key<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 8, "block": "<pre class=\"octave highlighted_source\"><a href=\"http://octave.sourceforge.net/octave/function/size.html\"><span class=\"kw5\">size</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">256</span><span class=\"sy5\">;</span><br/><span class=\"br0\">[</span>x<span class=\"sy5\">,</span>y<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/meshgrid.html\"><span class=\"kw6\">meshgrid</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy4\">:</span>size<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>\u00a0<br/>c <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/bitxor.html\"><span class=\"kw5\">bitxor</span></a><span class=\"br0\">(</span>x<span class=\"sy5\">,</span>y<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>\u00a0<br/><a href=\"http://octave.sourceforge.net/octave/function/colormap.html\"><span class=\"kw6\">colormap</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/jet.html\"><span class=\"kw6\">jet</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/size.html\"><span class=\"kw5\">size</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/image.html\"><span class=\"kw6\">image</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/axis.html\"><span class=\"kw6\">axis</span></a> equal<span class=\"sy5\">;</span></pre>"}, {"lang": "Perl", "loc": 12, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> GD<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$img</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> GD<span class=\"sy0\">::</span><span class=\"me2\">Image</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$color</span> <span class=\"sy0\">=</span> <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">colorAllocate</span><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"nu0\">255</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">-</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"re0\">$y</span> <span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">-</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setPixel</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$color</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">png</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$ppm</span> <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"st0\">\"munching0.ppm\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>w<span class=\"br0\">)</span> <span class=\"kw1\">or</span><br/>  <span class=\"kw1\">die</span> <span class=\"st0\">\"Can't create munching.ppm: $!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$ppm</span><span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"br0\">(</span>q <span class=\"sy0\">:</span>to <span class=\"st_h\">'EOT'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>P3<br/><span class=\"nu0\">256</span> <span class=\"nu0\">256</span><br/><span class=\"nu0\">255</span><br/>EOT<br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">255</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">255</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$col</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$color</span> <span class=\"sy0\">=</span> <span class=\"re0\">$row</span> <span class=\"sy0\">+^</span> <span class=\"re0\">$col</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$ppm</span><span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"0 $color 0 \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$ppm</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$ppm</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PHP", "loc": 24, "block": "<pre class=\"php highlighted_source\"><a href=\"http://www.php.net/header\"><span class=\"kw3\">header</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Content-Type: image/png\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$w</span> <span class=\"sy0\">=</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$im</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecreate\"><span class=\"kw3\">imagecreate</span></a><span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><br/>    or <a href=\"http://www.php.net/die\"><span class=\"kw3\">die</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Cannot Initialize new GD image stream\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$color</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">256</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/array_push\"><span class=\"kw3\">array_push</span></a><span class=\"br0\">(</span><span class=\"re0\">$color</span><span class=\"sy0\">,</span><a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"sy0\">,</span><a href=\"http://www.php.net/sin\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"nu19\">3.14</span><span class=\"sy0\">/</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">128</span><span class=\"sy0\">+</span><span class=\"nu0\">128</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$w</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$h</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>                <a href=\"http://www.php.net/imagesetpixel\"><span class=\"kw3\">imagesetpixel</span></a><span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"re0\">$j</span><span class=\"sy0\">,</span><span class=\"re0\">$color</span><span class=\"br0\">[</span><span class=\"re0\">$i</span>^<span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.php.net/imagepng\"><span class=\"kw3\">imagepng</span></a><span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/imagedestroy\"><span class=\"kw3\">imagedestroy</span></a><span class=\"br0\">(</span><span class=\"re0\">$im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 14, "block": "<pre class=\"text highlighted_source\">munch: procedure options (main); /* 21 May 2014 */<br/>\u00a0<br/>   declare screen (0:255, 0:255) bit(24) aligned;<br/>   declare b bit(8) aligned;<br/>   declare (x, y) unsigned fixed binary (8);<br/>\u00a0<br/>   do x = 0 upthru hbound(screen,2);<br/>      do y = 0 upthru hbound(screen,1);<br/>         b = unspec(x) ^ unspec(y);<br/>         screen(x,y) = b;<br/>      end;<br/>   end;<br/>   call writeppm(screen);<br/>end munch;</pre>"}, {"lang": "Prolog", "loc": 19, "block": "<pre class=\"prolog highlighted_source\">xor_pattern <span class=\"sy1\">:-</span><br/>\tnew<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'XOR Pattern'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> size<span class=\"br0\">(</span><span class=\"nu0\">512</span><span class=\"sy4\">,</span><span class=\"nu0\">512</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Img<span class=\"sy4\">,</span> image<span class=\"br0\">(</span><span class=\"sy5\">@</span>nil<span class=\"sy4\">,</span> width <span class=\"sy4\">:</span><span class=\"sy6\">=</span> <span class=\"nu0\">512</span><span class=\"sy4\">,</span> height <span class=\"sy4\">:</span><span class=\"sy6\">=</span> <span class=\"nu0\">512</span> <span class=\"sy4\">,</span> kind <span class=\"sy4\">:</span><span class=\"sy6\">=</span> pixmap<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">511</span><span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span>   forall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">511</span><span class=\"sy4\">,</span> J<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t  <span class=\"br0\">(</span>   V <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I xor J<span class=\"sy4\">,</span><br/>\t\t\t      R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>V <span class=\"sy3\">*</span> <span class=\"nu0\">1024</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">65536</span><span class=\"sy4\">,</span><br/>\t\t\t      G <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span><span class=\"nu0\">65536</span> <span class=\"sy3\">-</span> V <span class=\"sy3\">*</span> <span class=\"nu0\">1024</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">65536</span><span class=\"sy4\">,</span><br/>\t\t\t      <span class=\"br0\">(</span>\t  V <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span> <span class=\"sy1\">=:=</span> <span class=\"nu0\">0</span><br/>\t\t\t      <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  B <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  <span class=\"br0\">(</span>V <span class=\"sy3\">*</span> <span class=\"nu0\">4096</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">65536</span><br/>\t\t\t      <span class=\"sy4\">;</span>\t   B <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  <span class=\"br0\">(</span><span class=\"nu0\">65536</span> <span class=\"sy3\">-</span> <span class=\"br0\">(</span>V <span class=\"sy3\">*</span> <span class=\"nu0\">4096</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">65536</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t      send<span class=\"br0\">(</span>Img<span class=\"sy4\">,</span> pixel<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> J<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span><span class=\"sy5\">@</span>default<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tnew<span class=\"br0\">(</span>Bmp<span class=\"sy4\">,</span> bitmap<span class=\"br0\">(</span>Img<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Bmp<span class=\"sy4\">,</span> point<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 26, "block": "<pre class=\"purebasic highlighted_source\">#palletteSize <span class=\"sy0\">=</span> <span class=\"nu0\">128</span><br/><span class=\"kw1\">Procedure</span>.f XorPattern<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"co1\">;compute the gradient value from the pixel values</span><br/>  <span class=\"kw1\">Protected</span> result <span class=\"sy0\">=</span> x <span class=\"sy0\">!</span> y<br/>  <span class=\"kw1\">ProcedureReturn</span> Mod<span class=\"br0\">(</span>result, #palletteSize<span class=\"br0\">)</span> <span class=\"sy0\">/</span> #palletteSize<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> drawPattern<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">ImageOutput</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">DrawingMode</span><span class=\"br0\">(</span>#PB_2DDrawing_Gradient<span class=\"br0\">)</span><br/>    CustomGradient<span class=\"br0\">(</span>@XorPattern<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;specify a gradient pallette from which only specific indexes will be used</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #palletteSize <br/>      GradientColor<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> i, i <span class=\"sy0\">*</span> $BACE9B<span class=\"br0\">)</span> <span class=\"co1\">; or alternatively use $BEEFDEAD</span><br/>    <span class=\"kw1\">Next</span> <br/>    <span class=\"kw2\">Box</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"kw2\">ImageWidth</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">ImageHeight</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">128</span>, <span class=\"nu0\">128</span>, <span class=\"st0\">\"XOR Pattern\"</span>, #PB_Window_SystemMenu<span class=\"br0\">)</span><br/>  <span class=\"kw2\">CreateImage</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw2\">WindowWidth</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">WindowHeight</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  drawPattern<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">ImageGadget</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"kw2\">ImageWidth</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">ImageHeight</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">ImageID</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    event <span class=\"sy0\">=</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Until</span> event <span class=\"sy0\">=</span> #PB_Event_CloseWindow<br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> Image<span class=\"sy0\">,</span> ImageDraw<br/>\u00a0<br/>image <span class=\"sy0\">=</span> Image.<span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"RGB\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>drawingTool <span class=\"sy0\">=</span> ImageDraw.<span class=\"me1\">Draw</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>:<br/>        drawingTool.<span class=\"me1\">point</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> x^y<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">del</span> drawingTool<br/>image.<span class=\"me1\">save</span><span class=\"br0\">(</span><span class=\"st0\">\"xorpic.png\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"PNG\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require racket/draw)<br/>(define palette (for/vector ([x 256]) (make-object color% 0 0 x)))<br/>(define bm (make-object bitmap% 256 256))<br/>(define dc (new bitmap-dc% [bitmap bm]))<br/>(for* ([x 256] [y 256])<br/>  (define c (vector-ref palette (bitwise-xor x y)))<br/>  (send dc set-pixel x y c))<br/>bm<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 20, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program renders a  graphical pattern  by  coloring  each pixel   with   x XOR y  */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  from an arbitrary constructed color table. */</span><br/>rows=<span class=\"nu0\">25</span>                                          <span class=\"coMULTI\">/*the number of rows in the color table*/</span><br/>cols=<span class=\"nu0\">50</span>                                          <span class=\"coMULTI\">/* \"     \"    \" cols  \"  \"    \"     \"  */</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span> row  =<span class=\"nu0\">0</span> <span class=\"kw2\">for</span> rows<span class=\"sy0\">*</span><span class=\"nu0\">3</span>                     <span class=\"coMULTI\">/*construct a color table, size  25x50.*/</span><br/>         <span class=\"kw1\">do</span> col=<span class=\"nu0\">0</span> <span class=\"kw2\">for</span> cols<span class=\"sy0\">*</span><span class=\"nu0\">3</span><br/>                             $= <span class=\"br0\">(</span>row+col<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">255</span><br/>         @<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col= <span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span>$+<span class=\"nu0\">0</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">||</span>,       <span class=\"coMULTI\">/*ensure $ is converted\u2500\u2500\u25ba2 hex nibbles*/</span><br/>                    <span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span>$+<span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">||</span>,<br/>                    <span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span>$+<span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*col*/</span>                           <span class=\"coMULTI\">/* [\u2191]  construct a three-byte pixel.  */</span><br/>       <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*row*/</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span>   x=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> cols                        <span class=\"coMULTI\">/*create a graphical pattern with XORs.*/</span><br/>         <span class=\"kw1\">do</span> y=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> rows<br/>         @<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y=<span class=\"kw6\">bitxor</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>x, @<span class=\"sy0\">.</span>y<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*renders 3 bytes (a pixel) at a time. */</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*y*/</span><br/>       <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*x*/</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Munching squares<br/>\u00a0<br/>load \"guilib.ring\"<br/>\u00a0<br/>paint = null<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                  setwindowtitle(\"Archimedean spiral\")<br/>                  setgeometry(100,100,500,600)<br/>                  label1 = new qlabel(win1) {<br/>                              setgeometry(10,10,400,400)<br/>                              settext(\"\")<br/>                  }<br/>                  new qpushbutton(win1) {<br/>                          setgeometry(150,500,100,30)<br/>                          settext(\"draw\")<br/>                          setclickevent(\"draw()\")<br/>                  }<br/>                  show()<br/>        }<br/>        exec()<br/>        }<br/>\u00a0<br/>func draw<br/>        p1 = new qpicture()<br/>               color = new qcolor() {<br/>               setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>                 setcolor(color)<br/>                 setwidth(1)<br/>        }<br/>        paint = new qpainter() {<br/>                  begin(p1)<br/>                  setpen(pen)<br/>\u00a0<br/>        w = 100<br/>        for x = 0 to w<br/>             for y = 0 to w<br/>                   b = (x ^ y)<br/>                   color = new qcolor()<br/>                   color.setrgb(255 -b,b /2,b,255)<br/>                   pen.setcolor(color) <br/>                   setpen(pen)    <br/>                   drawpoint(x,w -y -1)<br/>             next<br/>         next<br/>\u00a0<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>        return<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 25, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">load</span> <span class=\"st0\">'raster_graphics.rb'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Pixmap<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">xor_pattern</span><span class=\"br0\">(</span>width, height, rgb1, rgb2<span class=\"br0\">)</span><br/>    <span class=\"co1\"># create colour table</span><br/>    size = <span class=\"nu0\">256</span><br/>    colours = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      RGBColour.<span class=\"me1\">new</span><span class=\"br0\">(</span><br/>        <span class=\"br0\">(</span>rgb1.<span class=\"me1\">red</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>rgb2.<span class=\"me1\">red</span> <span class=\"sy0\">-</span> rgb1.<span class=\"me1\">red</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">/</span> size<span class=\"br0\">)</span>, <br/>        <span class=\"br0\">(</span>rgb1.<span class=\"me1\">green</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>rgb2.<span class=\"me1\">green</span> <span class=\"sy0\">-</span> rgb1.<span class=\"me1\">green</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">/</span> size<span class=\"br0\">)</span>, <br/>        <span class=\"br0\">(</span>rgb1.<span class=\"me1\">blue</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>rgb2.<span class=\"me1\">blue</span> <span class=\"sy0\">-</span> rgb1.<span class=\"me1\">blue</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">/</span> size<span class=\"br0\">)</span>, <br/>      <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\"># create the image</span><br/>    pixmap = new<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>    pixmap.<span class=\"me1\">each_pixel</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span><br/>      pixmap<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> = colours<span class=\"br0\">[</span><span class=\"br0\">(</span>x^y<span class=\"br0\">)</span><span class=\"sy0\">%</span>size<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>    pixmap<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>img = Pixmap.<span class=\"me1\">xor_pattern</span><span class=\"br0\">(</span><span class=\"nu0\">384</span>, <span class=\"nu0\">384</span>, <span class=\"re2\">RGBColour::RED</span>, <span class=\"re2\">RGBColour::YELLOW</span><span class=\"br0\">)</span><br/>img.<span class=\"me1\">save_as_png</span><span class=\"br0\">(</span><span class=\"st0\">'xorpattern.png'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">w = 100<br/>graphic #g, w,w<br/>for x = 0 to w<br/>  for y = 0 to w<br/>    b = (x xor y) and 255<br/>    #g color(255 -b,b /2,b)<br/>    #g \"set \"; x; \" \"; w -y -1<br/>  next y<br/>next x<br/>render #g <br/>#g \"flush\"</pre>"}, {"lang": "Rust", "loc": 16, "block": "<pre class=\"text highlighted_source\">extern crate image;<br/>\u00a0<br/>use image::{ImageBuffer, Pixel, Rgb};<br/>\u00a0<br/>fn main() {<br/>    let mut img = ImageBuffer::new(256, 256);<br/>\u00a0<br/>    for x in 0..256 {<br/>        for y in 0..256 {<br/>            let pixel = Rgb::from_channels(0, x as u8 ^ y as u8, 0, 0);<br/>            img.put_pixel(x, y, pixel);<br/>        }<br/>    }<br/>\u00a0<br/>    let _ = img.save(\"output.png\");<br/>}</pre>"}, {"lang": "Scala", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">swing</span>.<span class=\"me1\">Swing</span>.<span class=\"me1\">pair2Dimension</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">swing</span>.<span class=\"br0\">{</span>Color, Graphics2D, MainFrame, Panel, SimpleSwingApplication<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> XorPattern <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> SimpleSwingApplication <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> top <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> MainFrame <span class=\"br0\">{</span><br/>    preferredSize <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">300</span>, <span class=\"nu0\">300</span><span class=\"br0\">)</span><br/>    title <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta Code &gt;&gt;&gt; Task: Munching squares | Language: Scala\"</span><br/>    contents <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Panel <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">protected</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span><br/>          y <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until size.<span class=\"me1\">getHeight</span>.<span class=\"me1\">toInt</span><br/>          x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until size.<span class=\"me1\">getWidth</span>.<span class=\"me1\">toInt</span><br/>        <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>          g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"br0\">(</span>x ^ y<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">256</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>x, y, x, y<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    centerOnScreen<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Imager'</span><span class=\"br0\">)</span><br/>\u00a0<br/>var img = <span class=\"sy0\">%</span>O<span class=\"sy0\">&lt;</span>Imager<span class=\"sy0\">&gt;</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">256</span>, ysize <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> y=<span class=\"br0\">(</span>^<span class=\"nu0\">256</span><span class=\"br0\">)</span>, x=<span class=\"br0\">(</span>^<span class=\"nu0\">256</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var rgb = <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">255</span> <span class=\"sy0\">-</span> x <span class=\"sy0\">-</span> y<span class=\"br0\">)</span>.<span class=\"me1\">abs</span>, <span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">-</span>x<span class=\"br0\">)</span>^y, x^<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">-</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    img.<span class=\"me1\">setpixel</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x, y <span class=\"sy0\">=&gt;</span> y, color <span class=\"sy0\">=&gt;</span> rgb<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>img.<span class=\"me1\">write</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'xor.png'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 27, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tk<br/>\u00a0<br/><span class=\"kw1\">proc</span> xorImage <span class=\"br0\">{</span>img table<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> data <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> h <span class=\"br0\">[</span>image height <span class=\"re0\">$img</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> w <span class=\"br0\">[</span>image width <span class=\"re0\">$img</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$h</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> row <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$w</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> row <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$table</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x</span>^<span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$table</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lappend</span> data <span class=\"re0\">$row</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$img</span> put <span class=\"re0\">$data</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> inRange <span class=\"br0\">{</span>i f t<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$f</span> + <span class=\"br0\">(</span><span class=\"re0\">$t</span>-<span class=\"re0\">$f</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span>/<span class=\"nu0\">255</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> mkTable <span class=\"br0\">{</span>rf rt gf gt bf bt<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">256</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> tbl <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"#%02x%02x%02x\"</span> \\<br/>\t    <span class=\"br0\">[</span>inRange <span class=\"re0\">$i</span> <span class=\"re0\">$rf</span> <span class=\"re0\">$rt</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>inRange <span class=\"re0\">$i</span> <span class=\"re0\">$gf</span> <span class=\"re0\">$gt</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>inRange <span class=\"re0\">$i</span> <span class=\"re0\">$bf</span> <span class=\"re0\">$bt</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$tbl</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> img <span class=\"br0\">[</span>image create photo -width <span class=\"nu0\">512</span> -height <span class=\"nu0\">512</span><span class=\"br0\">]</span><br/>xorImage <span class=\"re0\">$img</span> <span class=\"br0\">[</span>mkTable <span class=\"nu0\">0</span> <span class=\"nu0\">255</span> <span class=\"nu0\">64</span> <span class=\"nu0\">192</span> <span class=\"nu0\">255</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>pack <span class=\"br0\">[</span>label .l -image <span class=\"re0\">$img</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 77, "block": "<pre class=\"text highlighted_source\">PROGRAM:XORPATT<br/>\" \u2022.-,+-\u00b0-1+o*:\u03c0OX\"\u2192Str1<br/>\u00a0<br/>ClrHome<br/>\u00a0<br/>{0,0,0,0}\u2192L1<br/>{0,0,0,0)\u2192L2<br/>\u00a0<br/>For(I,1,8,1)<br/>For(J,1,16,1)<br/>J\u2192A<br/>I\u2192B<br/>\u00a0<br/>If A&gt;8<br/>Then<br/>A-8\u2192A<br/>1\u2192L1(1)<br/>Else<br/>0\u2192L1(1)<br/>End<br/>\u00a0<br/>If A&gt;4<br/>Then<br/>A-4\u2192A<br/>1\u2192L1(2)<br/>Else<br/>0\u2192L1(2)<br/>End<br/>\u00a0<br/>If A&gt;2<br/>Then<br/>A-2\u2192A<br/>1\u2192L1(3)<br/>Else<br/>0\u2192L1(3)<br/>End<br/>\u00a0<br/>If A&gt;1<br/>Then<br/>1\u2192L1(4)<br/>Else<br/>0\u2192L1(4)<br/>End<br/>\u00a0<br/>0\u2192L2(1)<br/>\u00a0<br/>If B&gt;4<br/>Then<br/>B-4\u2192B<br/>1\u2192L2(2)<br/>Else<br/>0\u2192L2(2)<br/>End<br/>\u00a0<br/>If B&gt;2<br/>Then<br/>B-2\u2192B<br/>1\u2192L2(3)<br/>Else<br/>0\u2192L2(3)<br/>End<br/>\u00a0<br/>If B&gt;1<br/>Then<br/>1\u2192L2(4)<br/>Else<br/>0\u2192L2(4)<br/>End<br/>\u00a0<br/>L1\u2260L2\u2192L3<br/>8L3(1)+4L3(2)+2L3(3)+L3(4)\u2192C<br/>Output(I,J,sub(Str1,C+1,1))<br/>\u00a0<br/>End<br/>End<br/>Pause<br/>\u00a0</pre>"}, {"lang": "Visual Basic .NET", "loc": 22, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"co1\">' Munching squares - 27/07/2018</span><br/><span class=\"kw1\">Public</span> <span class=\"kw1\">Class</span> MunchingSquares<br/>    <span class=\"kw1\">Const</span> xsize <span class=\"sy0\">=</span> <span class=\"nu0\">256</span><br/>    <span class=\"kw1\">Dim</span> BMP <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Drawing<span class=\"sy0\">.</span><span class=\"me1\">Bitmap</span><span class=\"br0\">(</span>xsize, xsize<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> GFX <span class=\"kw1\">As</span> Graphics <span class=\"sy0\">=</span> Graphics<span class=\"sy0\">.</span><span class=\"me1\">FromImage</span><span class=\"br0\">(</span>BMP<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> MunchingSquares_Paint<span class=\"br0\">(</span>sender <span class=\"kw1\">As</span> <span class=\"kw2\">Object</span>, e <span class=\"kw1\">As</span> PaintEventArgs<span class=\"br0\">)</span> <span class=\"kw1\">Handles</span> <span class=\"kw1\">Me</span><span class=\"sy0\">.</span><span class=\"me1\">Paint</span><br/>        <span class=\"co1\">'draw</span><br/>        <span class=\"kw1\">Dim</span> MyGraph <span class=\"kw1\">As</span> Graphics <span class=\"sy0\">=</span> <span class=\"kw1\">Me</span><span class=\"sy0\">.</span><span class=\"me1\">CreateGraphics</span><br/>        <span class=\"kw1\">Dim</span> nColor <span class=\"kw1\">As</span> Color<br/>        <span class=\"kw1\">Dim</span> i, j, cp <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        xPictureBox<span class=\"sy0\">.</span><span class=\"me1\">Image</span> <span class=\"sy0\">=</span> BMP<br/>        <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> xsize <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> xsize <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                cp <span class=\"sy0\">=</span> i <span class=\"kw1\">Xor</span> j<br/>                nColor <span class=\"sy0\">=</span> Color<span class=\"sy0\">.</span><span class=\"me1\">FromArgb</span><span class=\"br0\">(</span>cp, <span class=\"nu0\">0</span>, cp<span class=\"br0\">)</span><br/>                BMP<span class=\"sy0\">.</span><span class=\"me1\">SetPixel</span><span class=\"br0\">(</span>i, j, nColor<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Next</span> j<br/>        <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <span class=\"co1\">'Paint</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Class</span> </pre>"}, {"lang": "XPL0", "loc": 15, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>int X, Y;<br/>[SetVid($101);                  \\set 640x480 graphics with 8-bit color<br/>port($3C8):= 0;                 \\set color registers with beautiful shades<br/>for X:= 0 to 256-1 do<br/>        [port($3C9):= X&gt;&gt;1;     \\red<br/>         port($3C9):= X&gt;&gt;3;     \\green<br/>         port($3C9):= X;        \\blue<br/>         ];<br/>for Y:= 0 to 256-1 do           \\\"color table\" is array of 256 registers<br/>    for X:= 0 to 256-1 do<br/>        Point(X, Y, X|Y);       \\\"|\" = XOR, not OR which is \"!\"<br/>X:= ChIn(1);                    \\wait for keystroke<br/>SetVid(3);                      \\restore normal text mode<br/>]</pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">fcn muncher{<br/>   bitmap:=PPM(256,256);<br/>   coolness:=(1).random(0x10000);  // 55379, 18180, 40, 51950, 57619, 43514, 65465<br/>   foreach y,x in ([0 .. 255],[0 .. 255]){<br/>      b:=x.bitXor(y);\t// shades of blue<br/>//      rgb:=b*coolness;                 // kaleidoscopic image<br/>//      rgb:=(b*coolness + b)*coolness + b;  // more coolness<br/>      rgb:=(b*0x10000 + b)*0x10000 + b;  // copy ADA image<br/>      bitmap[x,y]=rgb;<br/>   }<br/>   bitmap.write(File(\"foo.ppm\",\"wb\"));<br/>}();</pre>"}]}