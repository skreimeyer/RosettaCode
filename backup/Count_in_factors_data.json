{"task": "Count_in_factors", "blocks": [{"lang": "360 Assembly", "loc": 74, "block": "<pre class=\"text highlighted_source\">*        Count in factors          24/03/2017<br/>COUNTFAC CSECT                     assist plig\\COUNTFAC<br/>         USING  COUNTFAC,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         L      R6,=F'1'           i=1<br/>       DO WHILE=(C,R6,LE,=F'40')   do i=1 to 40<br/>         LR     R7,R6                n=i<br/>         MVI    F,X'01'              f=true<br/>         MVC    PG,=CL80' '          clear buffer<br/>         LA     R10,PG               pgi=0<br/>         XDECO  R6,XDEC              edit i<br/>         MVC    0(12,R10),XDEC       output i<br/>         LA     R10,12(R10)          pgi=pgi+12<br/>         MVC    0(1,R10),=C'='       output '='<br/>         LA     R10,1(R10)           pgi=pgi+1<br/>       IF C,R7,EQ,=F'1' THEN         if n=1 then<br/>         MVI    0(R10),C'1'            output n<br/>       ELSE     ,                    else<br/>         LA     R8,2                   p=2<br/>       DO WHILE=(CR,R8,LE,R7)          do while p&lt;=n <br/>         LR     R4,R7                    n<br/>         SRDA   R4,32                    ~<br/>         DR     R4,R8                    /p<br/>       IF LTR,R4,Z,R4 THEN               if n//p=0 then<br/>       IF CLI,F,EQ,X'00' THEN              if not f then<br/>         MVC    0(1,R10),=C'*'               output '*'<br/>         LA     R10,1(R10)                   pgi=pgi+1<br/>       ELSE     ,                          else<br/>         MVI    F,X'00'                      f=false<br/>       ENDIF    ,                          endif<br/>         CVD    R8,PP                      convert bin p to packed pp<br/>         MVC    WORK12,MASX12              in fact L13<br/>         EDMK   WORK12,PP+2                edit and mark<br/>         LA     R9,WORK12+12               end of string(p)<br/>         SR     R9,R1                      li=lengh(p)  {r1 from edmk}<br/>         MVC    EDIT12,WORK12              L12&lt;-L13<br/>         LA     R4,EDIT12+12               source+12<br/>         SR     R4,R9                      -lengh(p)<br/>         LR     R5,R9                      lengh(p) <br/>         LR     R2,R10                     target ix<br/>         LR     R3,R9                      lengh(p) <br/>         MVCL   R2,R4                      f=f||p<br/>         AR     R10,R9                     ix=ix+lengh(p)<br/>         LR     R4,R7                      n<br/>         SRDA   R4,32                      ~<br/>         DR     R4,R8                      /p<br/>         LR     R7,R5                      n=n/p<br/>       ELSE     ,                        else<br/>         LA     R8,1(R8)                   p=p+1<br/>       ENDIF    ,                        endif<br/>       ENDDO    ,                      enddo while<br/>       ENDIF    ,                    endif<br/>         XPRNT  PG,L'PG              print buffer<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>F        DS     X                  flag first factor<br/>         DS     0D                 alignment for cvd<br/>PP       DS     PL8                packed  CL8<br/>EDIT12   DS     CL12               target  CL12<br/>WORK12   DS     CL13               char    CL13<br/>MASX12   DC     X'40',9X'20',X'212060'     CL13<br/>XDEC     DS     CL12               temp<br/>PG       DS     CL80               buffer<br/>         YREGS<br/>         END    COUNTFAC</pre>"}, {"lang": "Ada", "loc": 30, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_Line</span>, Ada.<span class=\"me1\">Text_IO</span>, Prime_Numbers;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Count <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Prime_Nums <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Prime_Numbers<br/>     <span class=\"br0\">(</span>Number =&gt; Natural, Zero =&gt; <span class=\"nu0\">0</span>, One =&gt; <span class=\"nu0\">1</span>, Two =&gt; <span class=\"nu0\">2</span><span class=\"br0\">)</span>; <span class=\"kw3\">use</span> Prime_Nums;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>List\u00a0: Number_List<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Index <span class=\"kw3\">in</span> List'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>List <span class=\"br0\">(</span>Index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Index /= List'Last <span class=\"kw1\">then</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\" x\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   N    \u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>   Max_N\u00a0: Natural\u00a0:= <span class=\"nu0\">15</span>; <span class=\"co1\">-- the default for Max_N</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"co1\">-- read Max_N from command line</span><br/>      Max_N\u00a0:= Integer'Value <span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>; <span class=\"co1\">-- else use the default</span><br/>   <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>N<span class=\"br0\">)</span> &amp; <span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span>Decompose <span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>      N\u00a0:= N + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> N &gt; Max_N;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Count;</pre>"}, {"lang": "ALGOL 68", "loc": 36, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">OP</span> <span class=\"sy1\">+:=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw4\">FLEX</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> b<span class=\"br0\">)</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"br0\">[</span><span class=\"sy1\">\u2308</span>a <span class=\"sy1\">+</span> 1<span class=\"br0\">]</span> <span class=\"kw3\">INT</span> c<span class=\"sy1\">;</span><br/>      c<span class=\"br0\">[</span><span class=\"sy1\">:\u2308</span>a<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> a<span class=\"sy1\">;</span><br/>      c<span class=\"br0\">[</span><span class=\"sy1\">\u2308</span>a<span class=\"sy1\">+</span>1<span class=\"sy1\">:</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> b<span class=\"sy1\">;</span><br/>      a <span class=\"sy1\">:=</span> c<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">PROC</span> factorize <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> nn<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw2\">IF</span> nn <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span> <span class=\"br0\">(</span>1<span class=\"br0\">)</span><br/>      <span class=\"kw2\">ELSE</span><br/>\t  <span class=\"kw3\">INT</span> k <span class=\"sy1\">:=</span> 2<span class=\"sy1\">,</span> n <span class=\"sy1\">:=</span> nn<span class=\"sy1\">;</span><br/>\t  <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>\t  <span class=\"kw2\">WHILE</span> n <span class=\"sy1\">&gt;</span> 1 <span class=\"kw2\">DO</span><br/>\t      <span class=\"kw2\">WHILE</span> n <span class=\"kw12\">MOD</span> k <span class=\"sy1\">=</span> 0 <span class=\"kw2\">DO</span><br/>\t\t  result <span class=\"sy1\">+:=</span> k<span class=\"sy1\">;</span><br/>\t\t  n <span class=\"sy1\">:=</span> n <span class=\"sy1\">%</span> k<br/>\t      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\t      k <span class=\"sy1\">+:=</span> 1<br/>\t  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\t  result<br/>      <span class=\"kw2\">FI</span> <br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw3\">INT</span> factors<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 22 <span class=\"kw2\">DO</span><br/>    factors <span class=\"sy1\">:=</span> factorize <span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw22\">whole</span> <span class=\"br0\">(</span>i<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" = \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> factors <span class=\"kw2\">DO</span><br/>       <span class=\"br0\">(</span>j <span class=\"sy1\">/=</span> 1 <span class=\"sy1\">|</span> <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\" \u00d7 \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw22\">whole</span> <span class=\"br0\">(</span>factors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"autohotkey highlighted_source\">factorize<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">return</span> false<br/>\tresult <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> m <span class=\"sy0\">:=</span> n<span class=\"sy0\">,</span> k <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">While</span> n <span class=\"sy0\">&gt;=</span> k<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">while</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tresult <span class=\"sy0\">.=</span> <span class=\"st0\">\" * \"</span> <span class=\"sy0\">.</span> k<span class=\"sy0\">,</span> m <span class=\"sy0\">/=</span> k<br/>\t\t<span class=\"br0\">}</span><br/>\t\tk<span class=\"sy0\">++</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>result<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">22</span><br/>   out <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\": \"</span> factorize<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% out</pre>"}, {"lang": "AWK", "loc": 28, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f COUNT_IN_FACTORS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    fmt = <span class=\"st0\">\"%d=%s<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">16</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span>fmt,i,factors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    i = <span class=\"nu0\">2144</span>; <span class=\"kw5\">printf</span><span class=\"br0\">(</span>fmt,i,factors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    i = <span class=\"nu0\">6358</span>; <span class=\"kw5\">printf</span><span class=\"br0\">(</span>fmt,i,factors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> factors<span class=\"br0\">(</span>n,  f,p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    p = <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p <span class=\"sy2\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy3\">%</span> p <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        f = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s%s*\"</span>,f,p<span class=\"br0\">)</span><br/>        n <span class=\"sy3\">/</span>= p<br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        p<span class=\"sy3\">++</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span>f,<span class=\"nu0\">1</span>,<span class=\"kw4\">length</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      FOR i% = 1 TO 20<br/>        PRINT i% \" = \" FNfactors(i%)<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNfactors(N%)<br/>      LOCAL P%, f$<br/>      IF N% = 1 THEN = \"1\"<br/>      P% = 2<br/>      WHILE P% &lt;= N%<br/>        IF (N% MOD P%) = 0 THEN<br/>          f$ += STR$(P%) + \" x \"<br/>          N% DIV= P%<br/>        ELSE<br/>          P% += 1<br/>        ENDIF<br/>      ENDWHILE<br/>      = LEFT$(f$, LEN(f$) - 3)<br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">1&gt;&gt;&gt;&gt;:.48*\"=\",,::1-#v_.v<br/>$&lt;&lt;&lt;^<a class=\"__cf_email__\" data-cfemail=\"491609\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#-\"e\":+1,+55$2&lt;&lt;&lt;<br/>v4_^#-1:/.:g00_00g1+&gt;&gt;0v<br/>&gt;8*\"x\",,:00g%!^!%g00:p0&lt;</pre>"}, {"lang": "C", "loc": 64, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> ULONG<span class=\"sy0\">;</span><br/>\u00a0<br/>ULONG get_prime<span class=\"br0\">(</span><span class=\"kw4\">int</span> idx<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">long</span> n_primes <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> alloc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">static</span> ULONG <span class=\"sy0\">*</span>primes <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        ULONG last<span class=\"sy0\">,</span> p<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>idx <span class=\"sy0\">&gt;=</span> n_primes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n_primes <span class=\"sy0\">&gt;=</span> alloc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        alloc <span class=\"sy0\">+=</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* be conservative */</span><br/>                        primes <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>primes<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>ULONG<span class=\"br0\">)</span> <span class=\"sy0\">*</span> alloc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n_primes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        primes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                        primes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>                        n_primes <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                last <span class=\"sy0\">=</span> primes<span class=\"br0\">[</span>n_primes<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>idx <span class=\"sy0\">&gt;=</span> n_primes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        last <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n_primes<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                p <span class=\"sy0\">=</span> primes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">*</span> p <span class=\"sy0\">&gt;</span> last<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                        primes<span class=\"br0\">[</span>n_primes<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> last<span class=\"sy0\">;</span><br/>                                        <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                                <span class=\"br0\">}</span><br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>last <span class=\"sy0\">%</span> p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> primes<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        ULONG n<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> p<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> first<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lld = \"</span><span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> first <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        p <span class=\"sy0\">=</span> get_prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                n <span class=\"sy0\">/=</span> p<span class=\"sy0\">;</span><br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>first<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" x \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                first <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lld\"</span><span class=\"sy0\">,</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> p <span class=\"sy0\">*</span> p<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>first<span class=\"br0\">)</span>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lld<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" x\u00a0%lld<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 39, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> getPrimeFactors<span class=\"br0\">(</span> <span class=\"kw4\">int</span> li <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> f <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> string res<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> li <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> res <span class=\"sy1\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> li <span class=\"sy2\">%</span> f <span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\t    <span class=\"br0\">{</span><br/>\t\tstringstream ss<span class=\"sy4\">;</span> ss <span class=\"sy1\">&lt;&lt;</span> f<span class=\"sy4\">;</span><br/>\t\tres <span class=\"sy2\">+</span><span class=\"sy1\">=</span> ss.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tli <span class=\"sy2\">/</span><span class=\"sy1\">=</span> f<span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> li <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\tres <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">\" x \"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">else</span> f<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> res <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">101</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> right <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span><span class=\"sy4\">;</span> <br/>\tgetPrimeFactors<span class=\"br0\">(</span> x <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">2144</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span><span class=\"sy4\">;</span> getPrimeFactors<span class=\"br0\">(</span> <span class=\"nu0\">2144</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 46, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> prog<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> MainClass<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">22</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span>\t\t\t\t<br/>\t\t\t\tList<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> f <span class=\"sy0\">=</span> Factorize<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\":  \"</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>f<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span> <span class=\"st0\">\" * \"</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Factorize<span class=\"br0\">(</span> <span class=\"kw4\">int</span> n <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tList<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> l <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tl<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> n <span class=\"sy0\">%</span> k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tl<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span> k <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\tn <span class=\"sy0\">/=</span> k<span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t\tk<span class=\"sy0\">++;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span>\t\t\t<br/>\t\t\t<span class=\"kw1\">return</span> l<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span>\t<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns listfactors<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn factors<br/>  <span class=\"st0\">\"Return a list of factors of N.\"</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span>factors n <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n k acc<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>     <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>empty? acc<span class=\"br0\">)</span><br/>               <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>               <span class=\"br0\">(</span>sort acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> k n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>empty? acc<span class=\"br0\">)</span><br/>                    <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>                    <span class=\"br0\">(</span>sort <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>quot n k<span class=\"br0\">)</span> k <span class=\"br0\">(</span><span class=\"kw1\">cons</span> k acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">(</span>recur n <span class=\"br0\">(</span>inc k<span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>q <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println q <span class=\"st0\">\" = \"</span> <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string/join <span class=\"st0\">\" x \"</span><span class=\"br0\">(</span>factors q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 40, "block": "<pre class=\"coffeescript highlighted_source\">count_primes = <span class=\"br0\">(</span>max<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># Count through the natural numbers and give their prime</span><br/>  <span class=\"co1\"># factorization.  This algorithm uses no division.</span><br/>  <span class=\"co1\"># Instead, each prime number starts a rolling odometer</span><br/>  <span class=\"co1\"># to help subsequent factorizations.  The algorithm works similar</span><br/>  <span class=\"co1\"># to the Sieve of Eratosthenes, as we note when each prime number's</span><br/>  <span class=\"co1\"># odometer rolls a digit.  (As it turns out, as long as your computer</span><br/>  <span class=\"co1\"># is not horribly slow at division, you're better off just doing simple</span><br/>  <span class=\"co1\"># prime factorizations on each new n vs. using this algorithm.)</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"1 = 1\"</span><br/>  primes = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  n = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">while</span> n <span class=\"sy0\">&lt;</span>= max<br/>    factors = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> prime_odometer <span class=\"kw1\">in</span> primes<br/>      <span class=\"co1\"># digits are an array w/least significant digit in</span><br/>      <span class=\"co1\"># position 0;  for example, [3, [0]] will roll as</span><br/>      <span class=\"co1\"># follows:</span><br/>      <span class=\"co1\">#    [0] -&gt; [1] -&gt; [2] -&gt; [0, 1]</span><br/>      <span class=\"br0\">[</span>base<span class=\"sy0\">,</span> digits<span class=\"br0\">]</span> = prime_odometer<br/>      i = <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">while</span> <span class=\"kw4\">true</span><br/>        digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> base<br/>        digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>        factors.<span class=\"me1\">push</span> base<br/>        i <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;</span>= digits.<span class=\"me1\">length</span><br/>          digits.<span class=\"me1\">push</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> factors.<span class=\"me1\">length</span> == <span class=\"nu0\">0</span><br/>      primes.<span class=\"me1\">push</span> <span class=\"br0\">[</span>n<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      factors.<span class=\"me1\">push</span> n<br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"#{n} = #{factors.join('*')}\"</span><br/>    n <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>\u00a0<br/>  primes.<span class=\"me1\">length</span><br/>\u00a0<br/>num_primes = count_primes <span class=\"nu0\">10000</span><br/>console.<span class=\"me1\">log</span> num_primes</pre>"}, {"lang": "Common Lisp", "loc": 27, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defparameter *primes*<br/>  <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">10</span> <span class=\"sy0\">:</span><span class=\"me1\">adjustable</span> t <span class=\"sy0\">:</span><span class=\"me1\">fill-pointer</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">mapc</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>vector-push x *primes*<span class=\"br0\">)</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> extend-primes <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>+ <span class=\"nu0\">2</span> <span class=\"br0\">(</span>elt *primes* <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> *primes*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for i <span class=\"sy0\">=</span> p then <span class=\"br0\">(</span>+ <span class=\"nu0\">2</span> i<span class=\"br0\">)</span><br/>\t  while <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>* i i<span class=\"br0\">)</span> n<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>primep i t<span class=\"br0\">)</span> <span class=\"br0\">(</span>vector-push-extend i *primes*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> primep <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional skip<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> skip<span class=\"br0\">)</span> <span class=\"br0\">(</span>extend-primes n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><br/>      <span class=\"br0\">(</span>loop for p across *primes* while <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>* p p<span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>\t    never <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod n p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factors <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>extend-primes n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with res for x across *primes* while <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"br0\">(</span>loop while <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> n <span class=\"br0\">(</span>/ n x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span>push x res<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tfinally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n res<span class=\"br0\">)</span> res<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for n from <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a: ~{~a~^ \u00d7 ~}~%\"</span> n <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>factors n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> factorize<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> n<span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>m <span class=\"sy0\">%</span> k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result <span class=\"sy0\">~=</span> k<span class=\"sy0\">;</span><br/>            m <span class=\"sy0\">/=</span> k<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        k<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">22</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%(%d \u00d7\u00a0%)\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i.<span class=\"me1\">factorize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 44, "block": "<pre class=\"dcl highlighted_source\">$ <span class=\"kw1\">close</span> <span class=\"re1\">/nolog </span>primes<br/>$ <span class=\"kw1\">on</span> control_y <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> clean<br/>$<br/>$ n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$<span class=\"re2\"> outer_loop:</span><br/>$  x <span class=\"sy0\">=</span> n<br/>$  <span class=\"kw1\">open</span> primes primes.txt<br/>$<br/>$  loop1:<br/>$   <span class=\"kw1\">read</span> <span class=\"re1\">/end_of_file </span><span class=\"sy0\">=</span> prime primes prime<br/>$   prime <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> prime <span class=\"br0\">)</span><br/>$   loop2:<br/>$    t <span class=\"sy0\">=</span> x / prime<br/>$    <span class=\"kw1\">if</span> t * prime <span class=\"sy0\">.eq.</span> x<br/>$    <span class=\"kw1\">then</span><br/>$     <span class=\"kw1\">if</span> <span class=\"kw2\">f$type</span><span class=\"br0\">(</span> factorization <span class=\"br0\">)</span> <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\"\"</span><br/>$     <span class=\"kw1\">then</span><br/>$      factorization <span class=\"sy0\">=</span> <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> prime <span class=\"br0\">)</span><br/>$     <span class=\"kw1\">else</span><br/>$      factorization <span class=\"sy0\">=</span> factorization + <span class=\"st0\">\"*\"</span> + <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> prime <span class=\"br0\">)</span><br/>$     <span class=\"kw1\">endif</span><br/>$     <span class=\"kw1\">if</span> t <span class=\"sy0\">.eq.</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> done<br/>$     x <span class=\"sy0\">=</span> t<br/>$     <span class=\"kw1\">goto</span> loop2<br/>$    <span class=\"kw1\">else</span><br/>$     <span class=\"kw1\">goto</span> loop1<br/>$    <span class=\"kw1\">endif</span><br/>$<span class=\"re2\"> prime:</span><br/>$  <span class=\"kw1\">if</span> <span class=\"kw2\">f$type</span><span class=\"br0\">(</span> factorization <span class=\"br0\">)</span> <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\"\"</span><br/>$  <span class=\"kw1\">then</span><br/>$   factorization <span class=\"sy0\">=</span> <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>$  <span class=\"kw1\">else</span><br/>$   factorization <span class=\"sy0\">=</span> factorization + <span class=\"st0\">\"*\"</span> + <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>$  <span class=\"kw1\">endif</span><br/>$<span class=\"re2\"> done:</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"kw2\">f$fao</span><span class=\"br0\">(</span> <span class=\"st0\">\"!4SL = \"</span>, n <span class=\"br0\">)</span>, factorization<br/>$  <span class=\"kw1\">delete</span> <span class=\"re1\">/symbol </span>factorization<br/>$  <span class=\"kw1\">close</span> primes<br/>$  n <span class=\"sy0\">=</span> n + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">if</span> n <span class=\"sy0\">.le.</span> <span class=\"nu0\">2144</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> outer_loop<br/>$  <span class=\"kw1\">exit</span><br/>$<br/>$<span class=\"re2\"> clean:</span><br/>$ <span class=\"kw1\">close</span> <span class=\"re1\">/nolog </span>primes</pre>"}, {"lang": "DWScript", "loc": 18, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> Factorize<span class=\"br0\">(</span>n <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> n &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">Exit</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">var</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">while</span> n &gt;<span class=\"sy3\">=</span> k <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> k<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>         Result <span class=\"sy3\">+=</span> <span class=\"st0\">' * '</span><span class=\"sy3\">+</span><span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> k<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">Inc</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span>SubStr<span class=\"br0\">(</span>Result<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>   PrintLn<span class=\"br0\">(</span><span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">': '</span> <span class=\"sy3\">+</span> Factorize<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "EchoLisp", "loc": 6, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task <span class=\"br0\">(</span>nfrom <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>range <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range nfrom <span class=\"br0\">(</span><span class=\"sy0\">+</span> nfrom range<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>     <span class=\"br0\">(</span>writeln i <span class=\"st0\">\"=\"</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>join <span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors i<span class=\"br0\">)</span> <span class=\"st0\">\" x \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 68, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tCOUNT_IN_FACTORS<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tdisplay_factor <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- Factors of all integers up to 'p'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tp_positive<span class=\"sy0\">:</span> p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tfactors<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> p <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>c.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\tfactors <span class=\"sy0\">:=</span> factor <span class=\"br0\">(</span>c.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\tacross<br/>\t\t\t\t\tfactors <span class=\"kw2\">as</span> f<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tio.<span class=\"me1\">put_integer</span> <span class=\"br0\">(</span>f.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> f.<span class=\"me1\">is_last</span> <span class=\"sy0\">=</span> <span class=\"kw3\">False</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\" x \"</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0<br/>        factor <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- Prime decomposition of 'p'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tp_positive<span class=\"sy0\">:</span> p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tdiv, i, next, rest<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw2\">if</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">force</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tdiv <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>\t\t\tnext <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\t\t\trest <span class=\"sy0\">:=</span> p<br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\trest <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\trest \\\\ div <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">force</span> <span class=\"br0\">(</span>div, i<span class=\"br0\">)</span><br/>\t\t\t\t\trest <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>rest <span class=\"sy0\">/</span> div<span class=\"br0\">)</span>.<span class=\"me1\">floor</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tdiv <span class=\"sy0\">:=</span> next<br/>\t\t\t\tnext <span class=\"sy0\">:=</span> next <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tis_divisor<span class=\"sy0\">:</span> across <span class=\"kw3\">Result</span> <span class=\"kw2\">as</span> r <span class=\"kw5\">all</span> p \\\\ r.<span class=\"me1\">item</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 12, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def factor(n), do: factor(n, 2, [])<br/>\u00a0<br/>  def factor(n, i, fact) when n &lt; i*i, do: Enum.reverse([n|fact])<br/>  def factor(n, i, fact) do<br/>    if rem(n,i)==0, do: factor(div(n,i), i, [i|fact]),<br/>                    else: factor(n, i+1, fact)<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(1..20, fn n -&gt;<br/>  IO.puts \"#{n}: #{Enum.join(RC.factor(n),\" x \")}\" end)</pre>"}, {"lang": "Euphoria", "loc": 28, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> factorize<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> result<br/>    <span class=\"kw2\">integer</span> k<br/>    <span class=\"kw1\">if</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>        k <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><br/>        result <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">while</span> n &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">while</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>n<span class=\"sy2\">,</span> k<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>                result <span class=\"sy1\">&amp;=</span> k<br/>                n <span class=\"sy1\">/=</span> k<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>            k <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>        <span class=\"kw1\">return</span> result<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> factors<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%d: \"</span><span class=\"sy2\">,</span> i<span class=\"br0\">)</span><br/>    factors <span class=\"sy1\">=</span> factorize<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%d * \"</span><span class=\"sy2\">,</span> factors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> factors<span class=\"br0\">[</span>$<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "F#", "loc": 11, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> factorsOf <span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>f, n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> genFactor <span class=\"br0\">(</span>f, n<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>            <span class=\"kw1\">if</span> f <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span> None<br/>            <span class=\"kw1\">elif</span> n <span class=\"sy0\">%</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> Some <span class=\"br0\">(</span>f, <span class=\"br0\">(</span>f, n<span class=\"sy0\">/</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span> genFactor <span class=\"br0\">(</span>f<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><br/>        genFactor <span class=\"br0\">(</span>f, n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>, num<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> showLines <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">concat</span> <span class=\"br0\">(</span><span class=\"kw4\">seq</span> <span class=\"br0\">{</span> <span class=\"kw1\">yield</span> <span class=\"kw4\">seq</span><span class=\"br0\">{</span> <span class=\"kw1\">yield</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">singleton</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"kw1\">yield</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">skip</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">initInfinite</span> factorsOf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>showLines <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iteri</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i f <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"%d =\u00a0%s\"</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" * \"</span>, <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toArray</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: math.parser math.primes.factors math.ranges\u00a0;<br/>IN: scratchpad \"1: 1\" print 2 20 [a,b] [ dup pprint \": \" write factors [ number&gt;string ] map \" x \" join print ] each<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 15, "block": "<pre class=\"text highlighted_source\">: .factors ( n -- )<br/>  2<br/>  begin  2dup dup * &gt;=<br/>  while  2dup /mod swap<br/>         if   drop  1+ 1 or    \\ next odd number<br/>         else -rot nip  dup . .\" x \"<br/>         then<br/>  repeat<br/>  drop .\u00a0;<br/>\u00a0<br/>: main ( n -- )<br/>  .\" 1\u00a0: 1\" cr<br/>  1+ 2\u00a0?do i . .\"\u00a0: \" i .factors cr loop\u00a0;<br/>\u00a0<br/>15 main bye</pre>"}, {"lang": "Fortran", "loc": 128, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Thu Jun  6 23:29:06</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make $a &amp;&amp; echo -2 | OMP_NUM_THREADS=2 $a</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none f.f08 -o f</span><br/><span class=\"co1\">! assert           1 = */           1</span><br/><span class=\"co1\">! assert           2 = */           2</span><br/><span class=\"co1\">! assert           3 = */           3</span><br/><span class=\"co1\">! assert           4 = */           2           2</span><br/><span class=\"co1\">! assert           5 = */           5</span><br/><span class=\"co1\">! assert           6 = */           2           3</span><br/><span class=\"co1\">! assert           7 = */           7</span><br/><span class=\"co1\">! assert           8 = */           2           2           2</span><br/><span class=\"co1\">! assert           9 = */           3           3</span><br/><span class=\"co1\">! assert          10 = */           2           5</span><br/><span class=\"co1\">! assert          11 = */          11</span><br/><span class=\"co1\">! assert          12 = */           3           2           2</span><br/><span class=\"co1\">! assert          13 = */          13</span><br/><span class=\"co1\">! assert          14 = */           2           7</span><br/><span class=\"co1\">! assert          15 = */           3           5</span><br/><span class=\"co1\">! assert          16 = */           2           2           2           2</span><br/><span class=\"co1\">! assert          17 = */          17</span><br/><span class=\"co1\">! assert          18 = */           3           2           3</span><br/><span class=\"co1\">! assert          19 = */          19</span><br/><span class=\"co1\">! assert          20 = */           2           2           5</span><br/><span class=\"co1\">! assert          21 = */           3           7</span><br/><span class=\"co1\">! assert          22 = */           2          11</span><br/><span class=\"co1\">! assert          23 = */          23</span><br/><span class=\"co1\">! assert          24 = */           3           2           2           2</span><br/><span class=\"co1\">! assert          25 = */           5           5</span><br/><span class=\"co1\">! assert          26 = */           2          13</span><br/><span class=\"co1\">! assert          27 = */           3           3           3</span><br/><span class=\"co1\">! assert          28 = */           2           2           7</span><br/><span class=\"co1\">! assert          29 = */          29</span><br/><span class=\"co1\">! assert          30 = */           5           2           3</span><br/><span class=\"co1\">! assert          31 = */          31</span><br/><span class=\"co1\">! assert          32 = */           2           2           2           2           2</span><br/><span class=\"co1\">! assert          33 = */           3          11</span><br/><span class=\"co1\">! assert          34 = */           2          17</span><br/><span class=\"co1\">! assert          35 = */           5           7</span><br/><span class=\"co1\">! assert          36 = */           3           3           2           2</span><br/><span class=\"co1\">! assert          37 = */          37</span><br/><span class=\"co1\">! assert          38 = */           2          19</span><br/><span class=\"co1\">! assert          39 = */           3          13</span><br/><span class=\"co1\">! assert          40 = */           5           2           2           2</span><br/>\u00a0<br/><span class=\"kw1\">module</span> prime_mod<br/>\u00a0<br/>  <span class=\"co1\">! sieve_table stores 0 in prime numbers, and a prime factor in composites.</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">sieve_table</span><br/>  <span class=\"kw3\">private</span> <span class=\"sy0\">::</span> <span class=\"me2\">PrimeQ</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"co1\">! setup routine must be called first!</span><br/>  <span class=\"kw1\">subroutine</span> sieve<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">! populate sieve_table.  If n is 0 it deallocates storage, invalidating sieve_table.</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"kw1\">status</span>, i, j<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>sieve_table<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>sieve_table<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>sieve_table<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, stat<span class=\"sy0\">=</span><span class=\"kw1\">status</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">status</span> <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">stop</span> <span class=\"st0\">'cannot allocate space'</span><br/>    sieve_table<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,<span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sieve_table<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> i<span class=\"sy0\">*</span>i, n, i<br/>             sieve_table<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> sieve<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> check_sieve<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"br0\">(</span><span class=\"kw4\">allocated</span><span class=\"br0\">(</span>sieve_table<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">le</span>.</span> n<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>n <span class=\"kw2\">.<span class=\"me1\">le</span>.</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>sieve_table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">stop</span> <span class=\"st0\">'Call sieve first'</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> check_sieve<br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span><br/>    <span class=\"kw1\">call</span> check_sieve<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    isPrime <span class=\"sy0\">=</span> PrimeQ<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> isPrime<br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> isComposite<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span><br/>    isComposite <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> isComposite<br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> PrimeQ<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span><br/>    PrimeQ <span class=\"sy0\">=</span> sieve_table<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> PrimeQ<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> prime_factors<span class=\"br0\">(</span>p, rv, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span> <span class=\"co1\">! number to factor</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rv</span> <span class=\"co1\">! the prime factors</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"co1\">! number of factors returned</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, m<br/>    <span class=\"kw1\">call</span> check_sieve<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    m <span class=\"sy0\">=</span> p<br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> PrimeQ<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>i <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>rv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          rv<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> sieve_table<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>          m <span class=\"sy0\">=</span> m<span class=\"sy0\">/</span>rv<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>          i <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"kw2\">.<span class=\"me1\">le</span>.</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>rv<span class=\"br0\">)</span><span class=\"br0\">)</span> rv<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> m<br/>    n <span class=\"sy0\">=</span> i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> prime_factors<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> prime_mod<br/>\u00a0<br/><span class=\"kw1\">program</span> count_in_factors<br/>  <span class=\"kw3\">use</span> prime_mod<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">factors</span><br/>  <span class=\"kw1\">call</span> sieve<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span>                <span class=\"co1\">! setup</span><br/>  <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">40</span><br/>     factors <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">call</span> prime_factors<span class=\"br0\">(</span>i, factors, n<span class=\"br0\">)</span><br/>     write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">'assert'</span>,i,<span class=\"st0\">'= */'</span>,factors<span class=\"br0\">(</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">call</span> sieve<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>                 <span class=\"co1\">! release memory</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> count_in_factors<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 38, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> getPrimeFactors<span class=\"br0\">(</span>factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">Dim</span> factor <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> factor = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> factors<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      factors<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><span class=\"br0\">)</span> = factor<br/>      n \\= factor<br/>      <span class=\"kw1\">If</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>    <span class=\"kw1\">Else</span><br/>      factor += <span class=\"nu0\">1</span>  <br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span>    <br/>  <span class=\"kw1\">Loop</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>  <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"##\"</span>; i;<br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\" = \"</span>;   <br/>  <span class=\"kw1\">If</span> i &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <br/>    <span class=\"kw1\">Erase</span> factors<br/>    getPrimeFactors factors<span class=\"br0\">(</span><span class=\"br0\">)</span>, i<br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Print</span> factors<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">If</span> j &lt; <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\" x \"</span>;<br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Print</span> i<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span> i <br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 6, "block": "<pre class=\"text highlighted_source\">i = 1<br/>while true<br/>{<br/>    println[join[\" x \", factorFlat[i]]]<br/>    i = i + 1<br/>}</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"1: 1\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d: \"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">var</span> x <span class=\"kw4\">string</span><br/>        <span class=\"kw1\">for</span> n<span class=\"sy1\">,</span> f <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> n <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> f<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> m <span class=\"sy2\">:=</span> n <span class=\"sy3\">%</span> f<span class=\"sy1\">;</span> m <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> m <span class=\"sy2\">=</span> n <span class=\"sy3\">%</span> f <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> f<span class=\"sy1\">)</span><br/>                x <span class=\"sy2\">=</span> <span class=\"st0\">\"\u00d7\"</span><br/>                n <span class=\"sy2\">/=</span> f<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 22, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> factors<span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>number <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> factors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> value <span class=\"sy0\">=</span> number<br/>    <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> possibleFactor <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>possibleFactor <span class=\"sy0\">&lt;=</span> value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">%</span> possibleFactor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factors <span class=\"sy0\">&lt;&lt;</span> possibleFactor<br/>            value /<span class=\"sy0\">=</span> possibleFactor<br/>        <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            possibleFactor<span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    factors<br/><span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a>.<span class=\"me1\">metaClass</span>.<span class=\"me1\">factors</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> factors<span class=\"br0\">(</span>delegate<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">6351</span>..<span class=\"nu0\">6359</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> number <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"$number = ${number.factors().join(' x ')}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>intercalate<span class=\"br0\">)</span><br/>\u00a0<br/>showFactors n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n <span class=\"sy0\">++</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">++</span> <span class=\"br0\">(</span>intercalate <span class=\"st0\">\" * \"</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> factorize<span class=\"br0\">)</span> n<br/><span class=\"co1\">-- Pointfree form</span><br/>showFactors <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\" = \"</span> <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> intercalate <span class=\"st0\">\" * \"</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> factorize<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Press ^C to terminate\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> f <span class=\"sy1\">:=</span> <span class=\"br0\">[</span>i<span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> factors<span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">writes</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span><span class=\"st0\">\"\u00a0: [\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,!</span>f<span class=\"sy1\">|</span><span class=\"st0\">\"]<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> factors</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">q:</pre>"}, {"lang": "Java", "loc": 41, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CountingInFactors<span class=\"br0\">{</span> <br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"st0\">\" = \"</span><span class=\"sy0\">+</span> countInFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">9991</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        \t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"st0\">\" = \"</span><span class=\"sy0\">+</span> countInFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> countInFactors<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        n <span class=\"sy0\">=</span> checkFactor<span class=\"br0\">(</span><span class=\"nu0\">2</span>, n, sb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        n <span class=\"sy0\">=</span> checkFactor<span class=\"br0\">(</span><span class=\"nu0\">3</span>, n, sb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            n <span class=\"sy0\">=</span> checkFactor<span class=\"br0\">(</span>i, n, sb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> checkFactor<span class=\"br0\">(</span><span class=\"kw4\">int</span> mult, <span class=\"kw4\">int</span> n, StringBuilder sb<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> mult <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>sb.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" x \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>mult<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">/=</span> mult<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 15, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy0\">+</span> factor<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" x \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> factor<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> factors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> p<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    factors<span class=\"br0\">[</span>factors.<span class=\"me1\">length</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>\t    n <span class=\"sy0\">/=</span> p<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> p<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> factors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 13, "block": "<pre class=\"text highlighted_source\">using Primes<br/>function strfactor(n::Integer)<br/>    n &gt; -2 || return \"-1 \u00d7 \" * strfactor(-n)<br/>    isprime(n) || n &lt; 2 &amp;&amp; return dec(n)<br/>    f = factor(Vector{typeof(n)}, n)<br/>    return join(f, \" \u00d7 \")<br/>end<br/>\u00a0<br/>lo, hi = -4, 40<br/>println(\"Factor print $lo to $hi:\")<br/>for n in lo:hi<br/>    @printf(\"%5d =\u00a0%s\\n\", n, strfactor(n))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 42, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun getPrimeFactors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factors <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> factors<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> || isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> factors<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> factor <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> factor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>factor<span class=\"br0\">)</span><br/>            nn /<span class=\"sy0\">=</span> factor<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> factors<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>nn<span class=\"br0\">)</span><span class=\"br0\">)</span> factor <span class=\"sy0\">=</span> nn<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>factor <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> factor +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> factor <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> <span class=\"br0\">(</span>MutableList<span class=\"br0\">(</span><span class=\"nu0\">22</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> it + <span class=\"nu0\">1</span> <span class=\"br0\">}</span> + <span class=\"nu0\">2144</span><span class=\"br0\">)</span> + <span class=\"nu0\">6358</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in list<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>4d<span class=\"st0\">\".format(i)} = ${getPrimeFactors(i).joinToString(\"</span> <span class=\"sy0\">*</span> <span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 19, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"co1\">'see Run BASIC solution</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1016</span><br/>  <span class=\"kw1\">print</span> i;<span class=\"st0\">\" = \"</span>; factorial$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">wait</span><br/><span class=\"kw1\">function</span> factorial$<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/> <span class=\"kw1\">if</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> factorial$ <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><br/> fct <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/> <span class=\"kw1\">while</span> fct <span class=\"sy0\">&lt;=</span> num<br/> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"kw1\">mod</span> fct<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>   factorial$ <span class=\"sy0\">=</span> factorial$\u00a0; x$\u00a0; fct<br/>   x$  <span class=\"sy0\">=</span> <span class=\"st0\">\" x \"</span><br/>   num <span class=\"sy0\">=</span> num <span class=\"sy0\">/</span> fct<br/>  <span class=\"kw1\">else</span><br/>   fct <span class=\"sy0\">=</span> fct <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/> <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/> <span class=\"kw1\">wend</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> </pre>"}, {"lang": "Lua", "loc": 24, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> factorize<span class=\"br0\">(</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    res <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">while</span> n <span class=\"sy0\">%</span> k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>\t    res<span class=\"br0\">[</span><span class=\"sy0\">#</span>res<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<br/> \t    n <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> k<br/>\t<span class=\"kw1\">end</span><br/> \tk <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> res<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\":  \"</span> <span class=\"br0\">)</span><br/>    fac <span class=\"sy0\">=</span> factorize<span class=\"br0\">(</span> i <span class=\"br0\">)</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> fac<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>fac <span class=\"kw1\">do</span><br/>\t<span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\" * \"</span><span class=\"sy0\">,</span> fac<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 24, "block": "<pre class=\"text highlighted_source\">factorNum\u00a0:= proc(n)<br/>\tlocal i, j, firstNum;<br/>\tif n = 1 then<br/>\t\tprintf(\"%a\", 1);<br/>\tend if;<br/>\tfirstNum\u00a0:= true:<br/>\tfor i in ifactors(n)[2] do<br/>\t\tfor j to i[2] do<br/>\t\t\tif firstNum then<br/>\t\t\t\tprintf (\"%a\", i[1]);<br/>\t\t\t\tfirstNum\u00a0:= false:<br/>\t\t\telse<br/>\t\t\t\tprintf(\" x\u00a0%a\", i[1]);<br/>\t\t\tend if;<br/>\t\tend do;<br/>\tend do;<br/>\tprintf(\"\\n\");<br/>\treturn NULL;<br/>end proc:<br/>\u00a0<br/>for i from 1 to 10 do<br/>\tprintf(\"%2a: \", i);<br/>\tfactorNum(i);<br/>end do;</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">n = 2; <br/>While[n &lt; 100, <br/> Print[Row[Riffle[Flatten[Map[Apply[ConstantArray, #] &amp;, FactorInteger[n]]],\"*\"]]]; <br/> n++]</pre>"}, {"lang": "NetRexx", "loc": 53, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method factor<span class=\"br0\">(</span>val<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  rv = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">if</span> val <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>    rv = <span class=\"st0\">''</span><br/>    <span class=\"kw1\">loop</span> n_ = val until n_ = <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">parse</span> checkFactor<span class=\"br0\">(</span><span class=\"nu0\">2</span>, n_, rv<span class=\"br0\">)</span> n_ rv<br/>      <span class=\"kw1\">if</span> n_ = <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> n_<br/>      <span class=\"kw1\">parse</span> checkFactor<span class=\"br0\">(</span><span class=\"nu0\">3</span>, n_, rv<span class=\"br0\">)</span> n_ rv<br/>      <span class=\"kw1\">if</span> n_ = <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> n_<br/>      <span class=\"kw1\">loop</span> m_ = <span class=\"nu0\">5</span> to n_ by <span class=\"nu0\">2</span> until n_ = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> m_ <span class=\"sy0\">//</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> m_<br/>        <span class=\"kw1\">parse</span> checkFactor<span class=\"br0\">(</span>m_, n_, rv<span class=\"br0\">)</span> n_ rv<br/>        <span class=\"kw3\">end</span> m_<br/>      <span class=\"kw3\">end</span> n_<br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> rv<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method checkFactor<span class=\"br0\">(</span>mult = long, n_ = long, fac<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span><br/>  msym = <span class=\"st0\">'x'</span><br/>  <span class=\"kw1\">loop</span> while n_ <span class=\"sy0\">//</span> mult = <span class=\"nu0\">0</span><br/>    fac = fac msym mult<br/>    n_ = n_\u00a0% mult<br/>    <span class=\"kw3\">end</span><br/>  fac = <span class=\"br0\">(</span>fac.<span class=\"kw6\">strip</span><span class=\"br0\">)</span>.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"st0\">'l'</span>, msym<span class=\"br0\">)</span>.<span class=\"kw6\">space</span><br/>  <span class=\"kw1\">return</span> n_ fac<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"co1\">-- input is a list of pairs of numbers - no checking is done</span><br/>  <span class=\"kw1\">if</span> arg = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> arg = <span class=\"st0\">'1 11    89 101    1000 1020    10000 10010'</span><br/>  <span class=\"kw1\">loop</span> while arg <span class=\"sy0\">\\</span>= <span class=\"st0\">''</span><br/>    <span class=\"kw1\">parse</span> arg lv rv arg<br/>    <span class=\"kw1\">say</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> lv.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"st0\">'to'</span> rv<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> fv = lv to rv<br/>      fac = factor<span class=\"br0\">(</span>fv<span class=\"br0\">)</span><br/>      pv = <span class=\"st0\">''</span><br/>      <span class=\"kw1\">if</span> fac.<span class=\"kw6\">words</span> = <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> fac <span class=\"sy0\">\\</span>= <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> pv = <span class=\"st0\">'&lt;prime&gt;'</span><br/>      <span class=\"kw1\">say</span> fv.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"st0\">'='</span> fac pv<br/>      <span class=\"kw3\">end</span> fv<br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 39, "block": "<pre class=\"text highlighted_source\">var primes = newSeq[int]()<br/>\u00a0<br/>proc getPrime(idx: int): int =<br/>  if idx &gt;= primes.len:<br/>    if primes.len == 0:<br/>      primes.add 2<br/>      primes.add 3<br/>\u00a0<br/>    var last = primes[primes.high]<br/>    while idx &gt;= primes.len:<br/>      last += 2<br/>      for i, p in primes:<br/>        if p * p &gt; last:<br/>          primes.add last<br/>          break<br/>        if last mod p == 0:<br/>          break<br/>\u00a0<br/>  return primes[idx]<br/>\u00a0<br/>for x in 1 ..&lt; int32.high.int:<br/>  stdout.write x, \" = \"<br/>  var n = x<br/>  var first = 1<br/>\u00a0<br/>  for i in 0 ..&lt; int32.high:<br/>    let p = getPrime(i)<br/>    while n mod p == 0:<br/>      n = n div p<br/>      if first == 0: stdout.write \" x \"<br/>      first = 0<br/>      stdout.write p<br/>\u00a0<br/>    if n &lt;= p * p:<br/>      break<br/>\u00a0<br/>  if first &gt; 0: echo n<br/>  elif n &gt; 1:   echo \" x \", n<br/>  else:         echo \"\"</pre>"}, {"lang": "Objeck", "loc": 55, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> CountingInFactors <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    count <span class=\"sy0\">:=</span> CountInFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"st0\">\"{$i} = {$count}\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">9991</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    count <span class=\"sy0\">:=</span> CountInFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"st0\">\"{$i} = {$count}\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> CountInFactors<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    sb <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    n <span class=\"sy0\">:=</span> CheckFactor<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> sb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> sb<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    n <span class=\"sy0\">:=</span> CheckFactor<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> sb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> sb<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n <span class=\"sy0\">:=</span> CheckFactor<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> sb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          break<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sb<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> CheckFactor<span class=\"br0\">(</span>mult <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> sb <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> mult <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>sb<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sb<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" x \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      sb<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>mult<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      n <span class=\"sy0\">/=</span> mult<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 22, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Big_int.html\"><span class=\"kw2\">Big_int</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> prime_decomposition x <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> inner c p <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> lt_big_int p <span class=\"br0\">(</span>square_big_int c<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"br0\">[</span>p<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> eq_big_int <span class=\"br0\">(</span>mod_big_int p c<span class=\"br0\">)</span> zero_big_int <span class=\"kw1\">then</span><br/>      c <span class=\"sy0\">::</span> inner c <span class=\"br0\">(</span>div_big_int p c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      inner <span class=\"br0\">(</span>succ_big_int c<span class=\"br0\">)</span> p<br/>  <span class=\"kw1\">in</span><br/>  inner <span class=\"br0\">(</span>succ_big_int <span class=\"br0\">(</span>succ_big_int zero_big_int<span class=\"br0\">)</span><span class=\"br0\">)</span> x<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux v <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> ps <span class=\"sy0\">=</span> prime_decomposition v <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"br0\">(</span>string_of_big_int v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\" = \"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\" x \"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map string_of_big_int ps<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    aux <span class=\"br0\">(</span>succ_big_int v<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux unit_big_int</pre>"}, {"lang": "Octave", "loc": 5, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">for</span> <span class=\"br0\">(</span>n <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a> <span class=\"br0\">(</span><span class=\"co4\">\"%i: \"</span><span class=\"sy5\">,</span> n<span class=\"br0\">)</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a> <span class=\"br0\">(</span><span class=\"co4\">\"%i \"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/factor.html\"><span class=\"kw6\">factor</span></a> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a> <span class=\"br0\">(</span><span class=\"co4\">\"\\n\"</span><span class=\"br0\">)</span><br/><span class=\"kw4\">endfor</span></pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">fnice<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu1\">2</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tf <span class=\"sy0\">=</span> <span class=\"kw1\">factor</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> f<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>f<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> s<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"^\"</span><span class=\"sy0\">,</span> f<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#f<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\ts1 <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"st0\">\" * \"</span><span class=\"sy0\">,</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> s1 <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> <span class=\"st0\">\"^\"</span><span class=\"sy0\">,</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> s1<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>n<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>n<span class=\"sy0\">++,</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span>fnice<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 45, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> CountInFactors<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TdynArray <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> factorize<span class=\"br0\">(</span>number<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> TdynArray<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    k<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> number <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      setlength<span class=\"br0\">(</span>factorize<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      factorize<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">begin</span><br/>      k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">while</span> number &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>\t<span class=\"kw1\">while</span> number <span class=\"kw1\">mod</span> k <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">begin</span><br/>\t  setlength<span class=\"br0\">(</span>factorize<span class=\"sy1\">,</span> length<span class=\"br0\">(</span>factorize<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t  factorize<span class=\"br0\">[</span>high<span class=\"br0\">(</span>factorize<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> k<span class=\"sy1\">;</span><br/>\t  number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> number <span class=\"kw1\">div</span> k<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\tinc<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  fac<span class=\"sy1\">:</span> TdynArray<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"st0\">':  '</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    fac <span class=\"sy1\">:</span><span class=\"sy3\">=</span> factorize<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>fac<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>fac<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">' * '</span><span class=\"sy1\">,</span> fac<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/factor/</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_ = \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" x \"</span><span class=\"sy0\">,</span> factor<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1000000000000000000</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1000000000000000010</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 21, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> factors<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> factors<span class=\"br0\">(</span>Int <span class=\"re0\">$remainder</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  gather <span class=\"kw1\">for</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$factor</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\"># if remainder &lt; factor\u00b2, we're done</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">*</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$remainder</span> <span class=\"br0\">{</span><br/>      take <span class=\"re0\">$remainder</span> <span class=\"kw1\">if</span> <span class=\"re0\">$remainder</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># How many times can we divide by this prime?</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$remainder</span> <span class=\"sy0\">%%</span> <span class=\"re0\">$factor</span> <span class=\"br0\">{</span><br/>        take <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$remainder</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"re0\">$factor</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"$_: \"</span><span class=\"sy0\">,</span> factors<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \u00d7 \"</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..*;</span></pre>"}, {"lang": "Phix", "loc": 24, "block": "<pre class=\"text highlighted_source\">function factorise(atom n)<br/>-- returns a list of all integer factors of n, that when multiplied together equal n<br/>--  (adapted from the standard builtin factors(), which does not return duplicates)<br/>sequence res = {}<br/>integer p = 2,<br/>        step = 1,<br/>        lim = floor(sqrt(n))<br/>\u00a0<br/>    while p&lt;=lim do<br/>        while remainder(n,p)=0 do<br/>            res = append(res,sprintf(\"%d\",p))<br/>            n = n/p<br/>            if n=p then exit end if<br/>            lim = floor(sqrt(n))<br/>        end while<br/>        p += step<br/>        step = 2<br/>    end while<br/>    return join(append(res,sprintf(\"%d\",n)),\" x \")<br/>end function<br/>\u00a0<br/>for i=1 to 10 do<br/>    printf(1,\"%2d:\u00a0%s\\n\",{i,factorise(i)})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">(de factor (N)<br/>   (make<br/>      (let (D 2  L (1 2 2 . (4 2 4 2 4 6 2 6 .))  M (sqrt N))<br/>         (while (&gt;= M D)<br/>            (if (=0 (% N D))<br/>               (setq M (sqrt (setq N (/ N (link D)))))<br/>               (inc 'D (pop 'L)) ) )<br/>         (link N) ) ) )<br/>\u00a0<br/>(for N 20<br/>   (prinl N \": \" (glue \" * \" (factor N))) )</pre>"}, {"lang": "PL/I", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cnt: procedure options (main);<br/>\tdeclare (i, k, n) fixed binary;<br/>\tdeclare first bit (1) aligned;<br/>\u00a0<br/>   do n = 1 to 40;<br/>      put skip list (n || ' =');<br/>      k = n; first = '1'b;<br/>repeat:<br/>      do i = 2 to k-1;<br/>\t\tif mod(k, i) = 0 then<br/>\t\t\tdo;<br/>\t\t\t\tk = k/i;<br/>                                if ^first then put edit (' x ')(A);<br/>                                first = '0'b;<br/>                                put edit (trim(i)) (A);<br/>\t\t\t\tgo to repeat;<br/>\t\t\tend;<br/>\u00a0<br/>\tend;<br/>        if ^first then put edit (' x ')(A);<br/>        if n = 1 then i = 1;<br/>        put edit (trim(i)) (A);<br/>   end;<br/>end cnt;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 34, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> eratosthenes <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$prime</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"re0\">$true</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span>; <span class=\"re0\">$j</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$n</span>; <span class=\"re0\">$j</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$n</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span><span class=\"br0\">{</span><span class=\"re0\">$prime</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"$n must be equal or greater than 1\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> prime<span class=\"sy0\">-</span>decomposition <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$array</span> <span class=\"sy0\">=</span> eratosthenes <span class=\"re0\">$n</span><br/>    <span class=\"re0\">$prime</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$p</span> <span class=\"kw3\">in</span> <span class=\"re0\">$array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">while</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span><span class=\"re0\">$p</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$n</span> <span class=\"sy0\">/=</span> <span class=\"re0\">$p</span><br/>            <span class=\"re0\">$prime</span> <span class=\"sy0\">+=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$prime</span><br/><span class=\"br0\">}</span><br/><a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\" x \"</span><br/><span class=\"st0\">\"$(prime-decomposition  2144)\"</span><br/><span class=\"st0\">\"$(prime-decomposition  100)\"</span><br/><span class=\"st0\">\"$(prime-decomposition  12)\"</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 38, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Factorize<span class=\"br0\">(</span>Number, List Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, Max<br/>  <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> Number <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    Number <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Wend</span><br/>  Max <span class=\"sy0\">=</span> Number<br/>  <span class=\"kw1\">While</span> I <span class=\"sy0\">&lt;=</span> Max <span class=\"kw1\">And</span> Number <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">While</span> Number <span class=\"sy0\">%</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      Factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> I<br/>      Number <span class=\"sy0\">/</span> I<br/>    <span class=\"kw1\">Wend</span><br/>    I <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> n<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> a<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>    text$<span class=\"sy0\">=</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"= \"</span><br/>    Factorize<span class=\"br0\">(</span>a,n<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>n<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">ResetList</span><span class=\"br0\">(</span>n<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">While</span> <span class=\"kw2\">NextElement</span><span class=\"br0\">(</span>n<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        text$ <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>n<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">ListIndex</span><span class=\"br0\">(</span>n<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><br/>          text$ <span class=\"sy0\">+</span> <span class=\"st0\">\"*\"</span><br/>        <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">Else</span><br/>      text$<span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"co1\">; To handle the '1', which is not really a prime...</span><br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>text$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> a<br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 35, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> functools <span class=\"kw1\">import</span> lru_cache<br/>\u00a0<br/>primes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">]</span>    <span class=\"co1\"># Will be extended</span><br/>\u00a0<br/><span class=\"sy0\">@</span>lru_cache<span class=\"br0\">(</span>maxsize<span class=\"sy0\">=</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">def</span> pfactor<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    n2 <span class=\"sy0\">=</span> n // <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> primes:<br/>        <span class=\"kw1\">if</span> p <span class=\"sy0\">&lt;=</span> n2:<br/>            d<span class=\"sy0\">,</span> m <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> m <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>                <span class=\"kw1\">if</span> d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>                    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>p<span class=\"br0\">]</span> + pfactor<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>                <span class=\"kw1\">else</span>:<br/>                    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>p<span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> primes<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span>:<br/>                primes.<span class=\"me1\">append</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    mx <span class=\"sy0\">=</span> <span class=\"nu0\">5000</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> mx + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        factors <span class=\"sy0\">=</span> pfactor<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span> <span class=\"kw1\">or</span> n <span class=\"sy0\">&gt;=</span> mx - <span class=\"nu0\">20</span>:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span> <span class=\"st0\">'%4i\u00a0%5s\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span><br/>                                   <span class=\"st0\">''</span> <span class=\"kw1\">if</span> factors <span class=\"sy0\">!=</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">or</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"st0\">'prime'</span><span class=\"sy0\">,</span><br/>                                   <span class=\"st0\">'x'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> factors<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">11</span>:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'...'</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Number of primes gathered up to'</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"st0\">'is'</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>primes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>pfactor.<span class=\"me1\">cache_info</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#initially I created a function which returns prime factors then I have created another function counts in the factors and #prints the values.<br/>\u00a0<br/>findfactors &lt;- function(num) {<br/>  x &lt;- c()<br/>  p1&lt;- 2 <br/>  p2 &lt;- 3<br/>  everyprime &lt;- num<br/>  while( everyprime\u00a0!= 1 ) {<br/>    while( everyprime%%p1 == 0 ) {<br/>      x &lt;- c(x, p1)<br/>      everyprime &lt;- floor(everyprime/ p1)<br/>    }<br/>    p1 &lt;- p2<br/>    p2 &lt;- p2 + 2<br/>  }<br/>  x<br/>}<br/>count_in_factors=function(x){<br/>  primes=findfactors(x)<br/>  x=c(1)<br/>  for (i in 1:length(primes)) {<br/>    x=paste(primes[i],\"x\",x)<br/>  }<br/>  return(x)<br/>}<br/>count_in_factors(72)<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">#lang typed/racket<br/>\u00a0<br/>(require math/number-theory)<br/>\u00a0<br/>(define (factorise-as-primes [n\u00a0: Natural])<br/>  (if<br/>   (= n 1)<br/>   '(1)<br/>   (let ((F (factorize n)))<br/>     (append*<br/>      (for/list\u00a0: (Listof (Listof Natural))<br/>        ((f (in-list F)))<br/>        (make-list (second f) (first f)))))))<br/>\u00a0<br/>(define (factor-count [start-inc\u00a0: Natural] [end-inc\u00a0: Natural])<br/>  (for ((i\u00a0: Natural (in-range start-inc (add1 end-inc))))<br/>    (define f (string-join (map number-&gt;string (factorise-as-primes i)) \" \u00d7 \"))<br/>    (printf \"~a:\\t~a~%\" i f)))<br/>\u00a0<br/>(factor-count 1 22)<br/>(factor-count 2140 2150)<br/>; tb</pre>"}, {"lang": "REXX", "loc": 34, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program lists the prime factors of a specified integer  (or a range of integers).*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span>;  @<span class=\"sy0\">.</span>0=<span class=\"st0\">\"{unity} \"</span>;  @<span class=\"sy0\">.</span>1=<span class=\"st0\">'[prime] '</span> <span class=\"coMULTI\">/*some tags  and  handy-dandy literals.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> low high <span class=\"sy0\">.</span>                             <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span>  low==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  low=<span class=\"nu0\">1</span>;  high=<span class=\"nu0\">40</span>;  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*No LOW &amp; HIGH?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> high==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> high=low;    tell= <span class=\"br0\">(</span>high<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*No HIGH?          \"   \"   \"     \"    */</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>high<span class=\"br0\">)</span>;   high=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>high<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*get maximum width for pretty output. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*maybe bump the precision of numbers. */</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*the number of primes found (so far). */</span><br/>    <span class=\"kw1\">do</span> n=low  <span class=\"kw2\">to</span> high;         f=factr<span class=\"br0\">(</span>n<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*process a single number  or  a range.*/</span><br/>    p=<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>f,,<span class=\"st0\">'x'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  -  <span class=\"br0\">(</span>n==<span class=\"nu0\">1</span><span class=\"br0\">)</span>        <span class=\"coMULTI\">/*P:  is the number of prime factors.  */</span><br/>    <span class=\"kw1\">if</span> p==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> #=#+<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/*bump the primes counter (exclude N=1)*/</span><br/>    <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>n, w<span class=\"br0\">)</span>   <span class=\"st0\">'='</span>   @<span class=\"sy0\">.</span>p <span class=\"kw6\">space</span><span class=\"br0\">(</span>f, <span class=\"nu0\">0</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*show if prime and factors.*/</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>#, w<span class=\"br0\">)</span>            <span class=\"st0\">' primes found.'</span>      <span class=\"coMULTI\">/*display the number of primes found.  */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>factr: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z <span class=\"nu0\">1</span> n,$;   <span class=\"kw1\">if</span> z<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> z <span class=\"coMULTI\">/*if Z too small, return Z*/</span><br/>     <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span> <span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>;  $=$ <span class=\"st0\">'x 2'</span>\u00a0;   z=z% <span class=\"nu0\">2</span>;  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*maybe add factor of   2 */</span><br/>     <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span> <span class=\"nu0\">3</span>==<span class=\"nu0\">0</span>;  $=$ <span class=\"st0\">'x 3'</span>\u00a0;   z=z% <span class=\"nu0\">3</span>;  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*  \"    \"     \"    \"   3 */</span><br/>     <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span> <span class=\"nu0\">5</span>==<span class=\"nu0\">0</span>;  $=$ <span class=\"st0\">'x 5'</span>\u00a0;   z=z% <span class=\"nu0\">5</span>;  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*  \"    \"     \"    \"   5 */</span><br/>     <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span> <span class=\"nu0\">7</span>==<span class=\"nu0\">0</span>;  $=$ <span class=\"st0\">'x 7'</span>\u00a0;   z=z% <span class=\"nu0\">7</span>;  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*  \"    \"     \"    \"   7 */</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">11</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">6</span>  <span class=\"kw2\">while</span> j<span class=\"sy0\">&lt;</span>=z                   <span class=\"coMULTI\">/*insure that  J  isn't divisible by 3.*/</span><br/>     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> j  <span class=\"st0\">''</span>  -<span class=\"nu0\">1</span>  _                      <span class=\"coMULTI\">/*get the last decimal digit of  J.    */</span><br/>     <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"nu0\">5</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> <span class=\"kw2\">while</span>  z<span class=\"sy0\">//</span>j==<span class=\"nu0\">0</span>;   $=$ <span class=\"st0\">'x'</span> j;   z=z%j;   <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*maybe reduce Z.*/</span><br/>     <span class=\"kw1\">if</span> _ ==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                      <span class=\"coMULTI\">/*if next number will be \u00f7 by 5,  skip.*/</span><br/>     <span class=\"kw1\">if</span> j<span class=\"sy0\">*</span>j<span class=\"sy0\">&gt;</span>n  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>                        <span class=\"coMULTI\">/*are we higher than the   \u221a N  \u00a0?     */</span><br/>     y=j+<span class=\"nu0\">2</span><br/>                    <span class=\"kw1\">do</span> <span class=\"kw2\">while</span>  z<span class=\"sy0\">//</span>y==<span class=\"nu0\">0</span>;   $=$ <span class=\"st0\">'x'</span> y;   z=z%y;   <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*maybe reduce Z.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">if</span> z==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> z=                                 <span class=\"coMULTI\">/*if residual is unity, then nullify it*/</span><br/><span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$ <span class=\"st0\">'x'</span> z<span class=\"br0\">)</span>, , <span class=\"st0\">\"x\"</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*elide a possible leading (extra) \"x\".*/</span></pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i = 1 to 20<br/>    see \"\" + i + \" = \" + factors(i) + nl<br/>next<br/>\u00a0<br/>func factors n<br/>     f = \"\"<br/>     if n = 1 return \"1\" ok<br/>     p = 2<br/>     while p &lt;= n<br/>           if (n\u00a0% p) = 0<br/>              f += string(p) + \" x \"<br/>              n = n/p<br/>           else p += 1 ok<br/>     end<br/>     return left(f, len(f) - 3)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'optparse'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/>\u00a0<br/>maximum = <span class=\"nu0\">10</span><br/>OptionParser.<span class=\"me1\">new</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>o<span class=\"sy0\">|</span><br/>  o.<span class=\"me1\">banner</span> = <span class=\"st0\">\"Usage: #{File.basename $0} [-m MAXIMUM]\"</span><br/>  o.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">\"-m MAXIMUM\"</span>, <span class=\"kw3\">Integer</span>,<br/>       <span class=\"st0\">\"Count up to MAXIMUM [#{maximum}]\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>m<span class=\"sy0\">|</span> maximum = m <span class=\"br0\">}</span><br/>  o.<span class=\"me1\">parse</span>! <span class=\"kw1\">rescue</span> <span class=\"br0\">(</span>$stderr.<span class=\"kw3\">puts</span> $!, o; <span class=\"kw3\">exit</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>$stderr.<span class=\"kw3\">puts</span> o; <span class=\"kw3\">exit</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> ARGV.<span class=\"me1\">size</span> == <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># 1 has no prime factors</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"1 is 1\"</span> <span class=\"kw1\">unless</span> maximum <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"nu0\">2</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span>maximum<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>  <span class=\"co1\"># i is 504 =&gt; i.prime_division is [[2, 3], [3, 2], [7, 1]]</span><br/>  f = i.<span class=\"me1\">prime_division</span>.<span class=\"me1\">map</span>! <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>factor, exponent<span class=\"sy0\">|</span><br/>    <span class=\"co1\"># convert [2, 3] to \"2 x 2 x 2\"</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span>factor<span class=\"br0\">]</span> <span class=\"sy0\">*</span> exponent<span class=\"br0\">)</span>.<span class=\"me1\">join</span> <span class=\"st0\">\" x \"</span><br/>  <span class=\"kw1\">end</span>.<span class=\"me1\">join</span> <span class=\"st0\">\" x \"</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{i} is #{f}\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">for i = 1000 to 1016<br/>  print i;\" = \"; factorial$(i)<br/>next<br/>wait<br/>function factorial$(num)<br/> if num = 1 then factorial$ = \"1\"<br/> fct = 2<br/> while fct &lt;= num<br/> if (num mod fct) = 0 then<br/>   factorial$ = factorial$\u00a0; x$\u00a0; fct<br/>   x$  = \" x \"<br/>   num = num / fct<br/>  else<br/>   fct = fct + 1<br/> end if<br/> wend<br/>end function</pre>"}, {"lang": "Scala", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> primeFactors<span class=\"br0\">(</span> n<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> primeStream<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    s.<span class=\"me1\">head</span> <span class=\"sy0\">#::</span> primeStream<span class=\"br0\">(</span>s.<span class=\"me1\">tail</span> filter <span class=\"br0\">{</span> <span class=\"sy0\">_</span> <span class=\"sy0\">%</span> s.<span class=\"me1\">head</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primes <span class=\"sy0\">=</span> primeStream<span class=\"br0\">(</span>Stream.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factors<span class=\"br0\">(</span> n<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> primes.<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span> <span class=\"sy0\">_</span> <span class=\"sy0\">&lt;=</span> n <span class=\"br0\">)</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span> n <span class=\"sy0\">%</span> <span class=\"sy0\">_</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span> Nil<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p <span class=\"sy0\">::</span> factors<span class=\"br0\">(</span> n/p <span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> factors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// A little test...</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nums <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">12</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span> <span class=\"sy0\">:</span>+ <span class=\"nu0\">2144</span> <span class=\"sy0\">:</span>+ <span class=\"nu0\">6358</span><br/>  nums.<span class=\"me1\">foreach</span><span class=\"br0\">(</span> n <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span> <span class=\"st0\">\"%6d\u00a0:\u00a0%s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> n, primeFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" * \"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 20, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define <span class=\"br0\">(</span>factors n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> facs <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">l</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>d <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span>? <span class=\"kw1\">l</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"br0\">(</span>* d d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>else <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>modulo x d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span>facs <span class=\"br0\">(</span><span class=\"kw1\">cons</span> d <span class=\"kw1\">l</span><span class=\"br0\">)</span> d <span class=\"br0\">(</span>/ x d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span>facs <span class=\"kw1\">l</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> d<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>show <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>display <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span>? <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>begin<br/>      <span class=\"br0\">(</span>display <span class=\"st0\">\" \u00d7 \"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>show <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>display <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1</span> <span class=\"br0\">(</span>+ i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>#f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>display i<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>display <span class=\"st0\">\" = \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>show <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>factors i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 39, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: writePrimeFactors (in var integer: number) is func<br/>  local<br/>    var boolean: laterElement is FALSE;<br/>    var integer: checker is 2;<br/>  begin<br/>    while checker * checker &lt;= number do<br/>      if number rem checker = 0 then<br/>        if laterElement then<br/>          write(\" * \");<br/>        end if;<br/>        laterElement\u00a0:= TRUE;<br/>        write(checker);<br/>        number\u00a0:= number div checker;<br/>      else<br/>        incr(checker);<br/>      end if;<br/>    end while;<br/>    if number &lt;&gt; 1 then<br/>      if laterElement then<br/>        write(\" * \");<br/>      end if;<br/>      laterElement\u00a0:= TRUE;<br/>      write(number);<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: number is 0;<br/>  begin<br/>    writeln(\"1: 1\");<br/>    for number range 2 to 2147483647 do<br/>      write(number &lt;&amp; \": \");<br/>      writePrimeFactors(number);<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 29, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Counter <span class=\"br0\">{</span><br/>    method factors<span class=\"br0\">(</span>n, <span class=\"kw3\">p</span>=<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var a = gather <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span>= <span class=\"kw3\">p</span><span class=\"sy0\">*</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw3\">p</span> <span class=\"st0\">`divides`</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    take<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>                    n <span class=\"sy0\">//</span>= <span class=\"kw3\">p</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw3\">p</span> = <span class=\"kw2\">self</span>.<span class=\"me1\">next_prime</span><span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> a.<span class=\"me1\">is_empty</span><span class=\"br0\">)</span>\u00a0? <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;&lt;</span> n<span class=\"br0\">)</span>\u00a0: a<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method is_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">factors</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">len</span> == <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method next_prime<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">p</span> == <span class=\"nu0\">2</span>\u00a0? <span class=\"br0\">(</span><span class=\"kw3\">p</span> = <span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0: <span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"sy0\">+</span>=<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>!<span class=\"kw2\">self</span>.<span class=\"me1\">is_prime</span><span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw3\">p</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"#{i} = #{Counter().factors(i).join(' \u00d7 ')}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 62, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> prime <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> primes <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">proc</span> restart <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> index -<span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">variable</span> primes<br/>\t<span class=\"kw1\">variable</span> current <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$primes</span> end<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> get_next_prime <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> primes<br/>\t<span class=\"kw1\">variable</span> index<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$index</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$primes</span><span class=\"br0\">]</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$primes</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> index<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">variable</span> current<br/>\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">incr</span> current <span class=\"nu0\">2</span><br/>\t    <span class=\"kw1\">set</span> p <span class=\"nu0\">1</span><br/>\t    <span class=\"kw1\">foreach</span> prime <span class=\"re0\">$primes</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$current</span> <span class=\"sy0\">%</span> <span class=\"re0\">$prime</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> p <span class=\"nu0\">0</span><br/>\t\t    <span class=\"kw1\">break</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$p</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">lappend</span> primes <span class=\"re0\">$current</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> index<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> factors <span class=\"br0\">{</span>num<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\trestart<br/>\t<span class=\"kw1\">set</span> factors <span class=\"br0\">[</span>dict create<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span>get_next_prime<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$num</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$num</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tdict <span class=\"kw2\">incr</span> factors <span class=\"re0\">$i</span><br/>\t\t<span class=\"kw1\">set</span> num <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$num</span> / <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">continue</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$num</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tdict <span class=\"kw2\">incr</span> factors <span class=\"re0\">$num</span><br/>\t\t<span class=\"kw1\">break</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> i <span class=\"br0\">[</span>get_next_prime<span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$factors</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Produce the factors in rendered form</span><br/>    <span class=\"kw1\">proc</span> factors.rendered <span class=\"br0\">{</span>num<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> factorDict <span class=\"br0\">[</span>factors <span class=\"re0\">$num</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>dict size <span class=\"re0\">$factorDict</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>\tdict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>factor times<span class=\"br0\">}</span> <span class=\"re0\">$factorDict</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> v <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lrepeat <span class=\"re0\">$times</span> <span class=\"re0\">$factor</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$v</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 59, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> CountFactors(n)<br/>\t<span class=\"kw3\">If</span> n = 1 <span class=\"kw3\">Then</span><br/>\t\tCountFactors = 1<br/>\t<span class=\"kw3\">Else</span><br/>\t\tarrP = Split(ListPrimes(n),<span class=\"st0\">\" \"</span>)<br/>\t\t<span class=\"kw4\">Set</span> arrList = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.ArrayList\"</span>)<br/>\t\tdivnum = n<br/>\t\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> divnum = 1<br/>\t\t\t<span class=\"co1\">'The -1 is to account for the null element of arrP<br/></span>\t\t\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrP)-1<br/>\t\t\t\t<span class=\"kw3\">If</span> divnum = 1 <span class=\"kw3\">Then</span><br/>\t\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t\t<span class=\"kw3\">ElseIf</span> divnum <span class=\"kw4\">Mod</span> arrP(i) = 0 <span class=\"kw3\">Then</span><br/>\t\t\t\t\tdivnum = divnum/arrP(i)<br/>\t\t\t\t\tarrList.Add arrP(i)<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Next</span><br/>\t\t<span class=\"kw3\">Loop</span><br/>\t\tarrList.Sort<br/>\t\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> arrList.Count - 1<br/>\t\t\t<span class=\"kw3\">If</span> i = arrList.Count - 1 <span class=\"kw3\">Then</span><br/>\t\t\t\tCountFactors = CountFactors &amp; arrList(i)<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tCountFactors = CountFactors &amp; arrList(i) &amp; <span class=\"st0\">\" * \"</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsPrime(n)<br/>\t<span class=\"kw3\">If</span> n = 2 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">ElseIf</span> n &lt;= 1 <span class=\"kw3\">Or</span> n <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t\t<span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> Int(Sqr(n)) <span class=\"kw3\">Step</span> 2<br/>\t\t\t<span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> ListPrimes(n)<br/>\tListPrimes = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>\t\t<span class=\"kw3\">If</span> IsPrime(i) <span class=\"kw3\">Then</span><br/>\t\t\tListPrimes = ListPrimes &amp; i &amp; <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Testing the fucntions.<br/></span>WScript.StdOut.Write <span class=\"st0\">\"2 = \"</span> &amp; CountFactors(2)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"2144 = \"</span> &amp; CountFactors(2144)<br/>WScript.StdOut.WriteLine</pre>"}, {"lang": "Visual Basic .NET", "loc": 42, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Module</span> CountingInFactors<br/>\u00a0<br/>    <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} = {1}\"</span>, i, CountingInFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">9991</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10000</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} = {1}\"</span>, i, CountingInFactors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>    <span class=\"kw1\">Private</span> <span class=\"kw1\">Function</span> CountingInFactors<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> n <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><br/>        <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"1\"</span><br/>\u00a0<br/>        <span class=\"kw1\">Dim</span> sb <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Text<span class=\"sy0\">.</span><span class=\"me1\">StringBuilder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        CheckFactor<span class=\"br0\">(</span><span class=\"nu0\">2</span>, n, sb<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        CheckFactor<span class=\"br0\">(</span><span class=\"nu0\">3</span>, n, sb<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"kw1\">To</span> n <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>            <span class=\"kw1\">If</span> i <span class=\"kw1\">Mod</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>\u00a0<br/>            CheckFactor<span class=\"br0\">(</span>i, n, sb<span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        <span class=\"kw1\">Return</span> sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>    <span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> CheckFactor<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> mult <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, <span class=\"kw1\">ByRef</span> n <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, <span class=\"kw1\">ByRef</span> sb <span class=\"kw1\">As</span> Text<span class=\"sy0\">.</span><span class=\"me1\">StringBuilder</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span> n <span class=\"kw1\">Mod</span> mult <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">If</span> sb<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> sb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" x \"</span><span class=\"br0\">)</span><br/>            sb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>mult<span class=\"br0\">)</span><br/>            n <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> mult<br/>        <span class=\"kw1\">Loop</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "XPL0", "loc": 17, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>int     N0, N, F;<br/>[N0:= 1;<br/>repeat  IntOut(0, N0);  Text(0, \" = \");<br/>        F:= 2;  N:= N0;<br/>        repeat  if rem(N/F) = 0 then<br/>                        [if N # N0 then Text(0, \" * \");<br/>                        IntOut(0, F);<br/>                        N:= N/F;<br/>                        ]<br/>                else F:= F+1;<br/>        until F&gt;N;<br/>        if N0=1 then IntOut(0, 1);      \\1 = 1<br/>        CrLf(0);<br/>        N0:= N0+1;<br/>until KeyHit;<br/>]</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">foreach n in ([1..*]){ println(n,\": \",primeFactors(n).concat(\"\\U2715;\")) }</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 11, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">PRINT</span> i;<span class=\"st0\">\" = \"</span>;<br/><span class=\"nu0\">30</span> <span class=\"kw1\">IF</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">90</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> p=<span class=\"nu0\">2</span>: <span class=\"kw1\">LET</span> n=i: <span class=\"kw1\">LET</span> f$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">IF</span> p&gt;n <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">80</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">IF</span> <span class=\"kw4\">NOT</span> FN m<span class=\"br0\">(</span>n,p<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> f$=f$+<span class=\"kw3\">STR</span>$ p+<span class=\"st0\">\" x \"</span>: <span class=\"kw1\">LET</span> n=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>n/p<span class=\"br0\">)</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">50</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> p=p+<span class=\"nu0\">1</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">50</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">PRINT</span> f$<span class=\"br0\">(</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span> f$-<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">100</span> STOP <br/><span class=\"nu0\">110</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b</pre>"}]}