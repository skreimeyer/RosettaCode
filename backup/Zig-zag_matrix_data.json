{"task": "Zig-zag_matrix", "blocks": [{"lang": "360 Assembly", "loc": 81, "block": "<pre class=\"text highlighted_source\">*        Zig-zag matrix            15/08/2015<br/>ZIGZAGMA CSECT<br/>         USING  ZIGZAGMA,R12       set base register<br/>         LR     R12,R15            establish addressability <br/>         LA     R9,N               n\u00a0: matrix size<br/>         LA     R6,1               i=1<br/>         LA     R7,1               j=1<br/>         LR     R11,R9             n<br/>         MR     R10,R9             *n<br/>         BCTR   R11,0              R11=n**2-1<br/>         SR     R8,R8              k=0<br/>LOOPK    CR     R8,R11             do k=0 to n**2-1<br/>         BH     ELOOPK             k&gt;limit<br/>         LR     R1,R6              i<br/>         BCTR   R1,0               -1<br/>         MR     R0,R9              *n<br/>         LR     R2,R7              j<br/>         BCTR   R2,0               -1<br/>         AR     R1,R2              (i-1)*n+(j-1)<br/>         SLA    R1,1               index=((i-1)*n+j-1)*2<br/>         STH    R8,T(R1)           t(i,j)=k<br/>         LR     R2,R6              i<br/>         AR     R2,R7              i+j<br/>         LA     R1,2               2<br/>         SRDA   R2,32              shift right r1 to r2<br/>         DR     R2,R1              (i+j)/2<br/>         LTR    R2,R2              if mod(i+j,2)=0<br/>         BNZ    ELSEMOD<br/>         CR     R7,R9              if j&lt;n<br/>         BNL    ELSE1<br/>         LA     R7,1(R7)           j=j+1<br/>         B      EIF1<br/>ELSE1    LA     R6,2(R6)           i=i+2<br/>EIF1     CH     R6,=H'1'           if i&gt;1<br/>         BNH    NOT1<br/>         BCTR   R6,0               i=i-1<br/>NOT1     B      NOT2<br/>ELSEMOD  CR     R6,R9              if i&lt;n<br/>         BNL    ELSE2<br/>         LA     R6,1(R6)           i=i+1<br/>         B      EIF2<br/>ELSE2    LA     R7,2(R7)           j=j+2<br/>EIF2     CH     R7,=H'1'           if j&gt;1<br/>         BNH    NOT2<br/>         BCTR   R7,0               j=j-1<br/>NOT2     LA     R8,1(R8)           k=k+1<br/>         B      LOOPK<br/>ELOOPK   LA     R6,1               end k; i=1<br/>LOOPI    CR     R6,R9              do i=1 to n<br/>         BH     ELOOPI             i&gt;n<br/>         LA     R10,0              ibuf=0  buffer index<br/>         MVC    BUFFER,=CL80' '<br/>         LA     R7,1               j=1<br/>LOOPJ    CR     R7,R9              do j=1 to n<br/>         BH     ELOOPJ             j&gt;n<br/>         LR     R1,R6              i<br/>         BCTR   R1,0               -1<br/>         MR     R0,R9              *n<br/>         LR     R2,R7              j<br/>         BCTR   R2,0               -1<br/>         AR     R1,R2              (i-1)*n+(j-1)<br/>         SLA    R1,1               index=((i-1)*n+j-1)*2<br/>         LH     R2,T(R1)           t(i,j)<br/>         LA     R3,BUFFER<br/>         AR     R3,R10<br/>         XDECO  R2,XDEC            edit t(i,j) length=12<br/>         MVC    0(4,R3),XDEC+8     move in buffer length=4<br/>         LA     R10,4(R10)         ibuf=ibuf+1<br/>         LA     R7,1(R7)           j=j+1<br/>         B      LOOPJ<br/>ELOOPJ   XPRNT  BUFFER,80          end j<br/>         LA     R6,1(R6)           i=i+1<br/>         B      LOOPI<br/>ELOOPI   XR     R15,R15            end i; return_code=0<br/>         BR     R14                return to caller<br/>N        EQU    5                  matrix size<br/>BUFFER   DS     CL80<br/>XDEC     DS     CL12<br/>T        DS     (N*N)H             t(n,n) matrix <br/>         YREGS<br/>         END    ZIGZAGMA</pre>"}, {"lang": "ActionScript", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>package <br/>{<br/>   public class ZigZagMatrix extends Array<br/>   {<br/>\u00a0<br/>      private var height:uint;<br/>      private var width:uint;<br/>      public var mtx:Array = [];<br/>\u00a0<br/>      public function ZigZagMatrix(size:uint)<br/>      {<br/>         this.height = size;<br/>         this.width = size;<br/>\u00a0<br/>         this.mtx = [];<br/>         for (var i:uint = 0; i &lt; size; i++) { <br/>            this.mtx[i] = [];<br/>         }<br/>         i = 1;<br/>         var j:uint = 1; <br/>         for (var e:uint = 0; e &lt; size*size; e++) {<br/>            this.mtx[i-1][j-1] = e;<br/>            if ((i + j)\u00a0% 2 == 0) {<br/>               // Even stripes<br/>               if (j &lt; size) j ++;<br/>               else       i += 2;<br/>               if (i &gt; 1) i --;<br/>            } else {<br/>               // Odd stripes<br/>               if (i &lt; size) i ++;<br/>               else       j += 2;<br/>               if (j &gt; 1) j --;<br/>            }<br/>         }<br/>      }  <br/>   }  <br/>}<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 50, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Zig_Zag <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Matrix <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;, Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural;<br/>   <span class=\"kw3\">function</span> Zig_Zag <span class=\"br0\">(</span>Size\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix <span class=\"kw1\">is</span><br/>      Data\u00a0: Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Size</span>, <span class=\"nu0\">1</span>..<span class=\"me1\">Size</span><span class=\"br0\">)</span>;<br/>      I, J\u00a0: Integer\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Data <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0:= <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">for</span> Element <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Size</span>**<span class=\"nu0\">2</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>I + J<span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"co1\">-- Even stripes</span><br/>            <span class=\"kw1\">if</span> J &lt; Size <span class=\"kw1\">then</span><br/>               J\u00a0:= J + <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">else</span><br/>               I\u00a0:= I + <span class=\"nu0\">2</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">if</span> I &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>               I\u00a0:= I - <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">else</span><br/>            <span class=\"co1\">-- Odd stripes</span><br/>            <span class=\"kw1\">if</span> I &lt; Size <span class=\"kw1\">then</span><br/>               I\u00a0:= I + <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">else</span><br/>               J\u00a0:= J + <span class=\"nu0\">2</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">if</span> J &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>               J\u00a0:= J - <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Data <span class=\"br0\">(</span>I, J<span class=\"br0\">)</span>\u00a0:= Element;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Data;<br/>   <span class=\"kw1\">end</span> Zig_Zag;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Data\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Data'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Data'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            Put <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>Data <span class=\"br0\">(</span>I, J<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put <span class=\"br0\">(</span>Zig_Zag <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Zig_Zag;</pre>"}, {"lang": "Agena", "loc": 48, "block": "<pre class=\"text highlighted_source\"># zig-zag matrix<br/>\u00a0<br/>makeZigZag\u00a0:= proc( n\u00a0:: number )\u00a0:: table is<br/>\u00a0<br/>    local move\u00a0:= proc( x\u00a0:: number, y\u00a0:: number, upRight\u00a0:: boolean ) is<br/>        if   y = n then<br/>            upRight\u00a0:= not upRight;<br/>            x\u00a0:= x + 1<br/>        elif x = 1 then<br/>            upRight\u00a0:= not upRight;<br/>            y\u00a0:= y + 1<br/>        else<br/>            x\u00a0:= x - 1;<br/>            y\u00a0:= y + 1<br/>        fi;<br/>        return x, y, upRight<br/>    end\u00a0;<br/>\u00a0<br/>    # create empty table<br/>    local result\u00a0:= [];<br/>    for i to n do<br/>        result[ i ]\u00a0:= [];<br/>        for j to n do result[ i, j ]\u00a0:= 0 od<br/>    od;<br/>\u00a0<br/>    # fill the table<br/>    local x, y, upRight\u00a0:= 1, 1, true;<br/>    for i to n * n do<br/>        result[ x, y ]\u00a0:= i - 1;<br/>        if upRight then<br/>            x, y, upRight\u00a0:= move( x, y, upRight )<br/>        else<br/>            y, x, upRight\u00a0:= move( y, x, upRight )<br/>        fi<br/>    od;<br/>\u00a0<br/>    return result<br/>end;<br/>\u00a0<br/>scope<br/>    local m\u00a0:= makeZigZag( 5 );<br/>    for i to size m do<br/>        for j to size m do<br/>            printf( \"\u00a0%3d\", m[ i, j ] )<br/>        od;<br/>        print()<br/>    od<br/>epocs</pre>"}, {"lang": "ALGOL 68", "loc": 37, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> zig zag <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw4\">PROC</span> move <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> i<span class=\"sy1\">,</span> j<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>        <span class=\"kw2\">IF</span> j <span class=\"sy1\">&lt;</span> n <span class=\"kw2\">THEN</span><br/>            i <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> i <span class=\"sy1\">&lt;=</span> 1 <span class=\"sy1\">|</span> 1 <span class=\"sy1\">|</span> i<span class=\"sy1\">-</span>1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            j <span class=\"sy1\">+:=</span> 1<br/>        <span class=\"kw2\">ELSE</span><br/>            i <span class=\"sy1\">+:=</span> 1<br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span>n<span class=\"sy1\">,</span> n<span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> x<span class=\"sy1\">:=</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">,</span> y<span class=\"sy1\">:=</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">FOR</span> v <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> n<span class=\"sy1\">**</span>2<span class=\"sy1\">-</span>1 <span class=\"kw2\">DO</span><br/>        a<span class=\"br0\">[</span>y<span class=\"sy1\">,</span> x<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> v<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> <span class=\"kw8\">ODD</span> <span class=\"br0\">(</span>x <span class=\"sy1\">+</span> y<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>            move<span class=\"br0\">(</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw2\">ELSE</span><br/>            move<span class=\"br0\">(</span>y<span class=\"sy1\">,</span> x<span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    a<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> dim <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">#IF formatted transput possible THEN<br/>  FORMAT d = $z-d$;<br/>  FORMAT row = $\"(\"n(dim-1)(f(d)\",\")f(d)\")\"$;<br/>  FORMAT block = $\"(\"n(dim-1)(f(row)\",\"lx)f(row)\")\"l$;<br/>\u00a0<br/>  printf((block, zig zag(dim)))<br/>ELSE#</span><br/>  <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> result <span class=\"sy1\">=</span> zig zag<span class=\"br0\">(</span>dim<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> dim <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>result<span class=\"br0\">[</span>i<span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"coMULTI\">#FI#</span></pre>"}, {"lang": "ALGOL W", "loc": 58, "block": "<pre class=\"text highlighted_source\">begin\u00a0% zig-zag matrix\u00a0%<br/>   \u00a0% z is returned holding a zig-zag matrix of order n, z must be at least n x n\u00a0%<br/>    procedure makeZigZag ( integer value n<br/>                        \u00a0; integer array z( *, * )<br/>                         )\u00a0;<br/>    begin<br/>        procedure move\u00a0;<br/>        begin<br/>            if   y = n then begin<br/>                upRight\u00a0:= not upRight;<br/>                x\u00a0:= x + 1<br/>                end<br/>            else if x = 1 then begin<br/>                upRight\u00a0:= not upRight;<br/>                y\u00a0:= y + 1<br/>                end<br/>            else begin<br/>                x\u00a0:= x - 1;<br/>                y\u00a0:= y + 1<br/>            end<br/>        end move\u00a0;<br/>        procedure swapXY\u00a0;<br/>        begin<br/>            integer swap;<br/>            swap\u00a0:= x;<br/>            x   \u00a0:= y;<br/>            y   \u00a0:= swap;<br/>        end swapXY\u00a0;<br/>        integer x, y;<br/>        logical upRight;<br/>       \u00a0% initialise the n x n matrix in z\u00a0%<br/>        for i\u00a0:= 1 until n do for j\u00a0:= 1 until n do z( i, j )\u00a0:= 0;<br/>       \u00a0% fill in the zig-zag matrix\u00a0%<br/>        x\u00a0:= y\u00a0:= 1;<br/>        upRight\u00a0:= true;<br/>        for i\u00a0:= 1 until n * n do begin<br/>            z( x, y )\u00a0:= i - 1;<br/>            if upRight then move<br/>            else begin<br/>                swapXY;<br/>                move;<br/>                swapXY<br/>            end;<br/>        end;<br/>    end makeZigZap\u00a0;<br/>\u00a0<br/>    begin<br/>        integer array zigZag( 1\u00a0:: 10, 1\u00a0:: 10 );<br/>        for n\u00a0:= 5 do begin<br/>            makeZigZag( n, zigZag );<br/>            for i\u00a0:= 1 until n do begin<br/>                 write( i_w\u00a0:= 4, s_w\u00a0:= 1, zigZag( i, 1 ) );<br/>                for j\u00a0:= 2 until n do writeon( i_w\u00a0:= 4, s_w\u00a0:= 1, zigZag( i, j ) );<br/>            end<br/>        end<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 8, "block": "<pre class=\"text highlighted_source\">      zz   \u2190  {\u2375\u2374\u2395IO-\u2368\u234b\u2283,/{(2|\u2374\u2375):\u233d\u2375\u22c4\u2375}\u00a8(\u2282w)/\u00a8\u2368w{\u2193\u2375\u2218.=\u2368\u222a\u2375}+/[1]\u2375\u22a4w\u2190\u2395IO-\u2368\u2373\u00d7/\u2375}   \u235d  General zigzag (any rectangle)<br/>      zzSq \u2190  {zz,\u2368\u2375}                                                           \u235d  Square zigzag<br/>      zzSq 5<br/> 0  1  5  6 14<br/> 2  4  7 13 15<br/> 3  8 12 16 21<br/> 9 11 17 20 22<br/>10 18 19 23 24</pre>"}, {"lang": "AppleScript", "loc": 37, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"nu0\">5</span> <span class=\"co1\">-- Size of zig-zag matrix (n^2 cells).</span><br/>\u00a0<br/><span class=\"co1\">-- Create an empty matrix.</span><br/><span class=\"kw3\">set</span> m <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> n<br/>\t<span class=\"kw3\">set</span> R <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> n<br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> R <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t<span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> m <span class=\"kw3\">to</span> R<br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/><span class=\"co1\">-- Populate the matrix in a zig-zag manner.</span><br/><span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y, v, d<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> v <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">if</span> <span class=\"nu0\">1</span> \u2264 x <span class=\"kw2\">and</span> x \u2264 n <span class=\"kw2\">and</span> <span class=\"nu0\">1</span> \u2264 y <span class=\"kw2\">and</span> y \u2264 n <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"br0\">{</span>m<span class=\"co2\">'</span>s <span class=\"kw1\">item</span> y<span class=\"co2\">'</span>s <span class=\"kw1\">item</span> x, x, y, v<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>v, x <span class=\"sy0\">+</span> d, y <span class=\"sy0\">-</span> d, v <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> x &gt; n <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y, d<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>n, y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span>d<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> y &gt; n <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y, d<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>, n, <span class=\"sy0\">-</span>d<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y, d<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, y, <span class=\"sy0\">-</span>d<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y, d<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>x, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span>d<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/><span class=\"co1\">--&gt; R = {{0, 1, 5, 6, 14}, {2, 4, 7, 13, 15}, {3, 8, 12, 16, 21}, {9, 11, 17, 20, 22}, {10, 18, 19, 23, 24}}</span><br/>\u00a0<br/><span class=\"co1\">-- Reformat the matrix into a table for viewing. </span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">in</span> m<br/>\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">in</span> i<br/>\t\t<span class=\"kw3\">set</span> j<span class=\"co2\">'</span>s <span class=\"kw1\">contents</span> <span class=\"kw3\">to</span>  <span class=\"br0\">(</span>characters <span class=\"sy0\">-</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> <span class=\"br0\">(</span>n <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"st0\">\"          \"</span> <span class=\"sy0\">&amp;</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t<span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> i <span class=\"kw3\">to</span> <span class=\"kw3\">return</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/><span class=\"kw3\">return</span> <span class=\"kw3\">return</span> <span class=\"sy0\">&amp;</span> m <span class=\"kw2\">as</span> <span class=\"kw1\">string</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 25, "block": "<pre class=\"text highlighted_source\">100 S = 5<br/>110 S2 = S ^ 2\u00a0: REM SQUARED<br/>120 H = S2 / 2\u00a0: REM HALFWAY<br/>130 S2 = S2 - 1<br/>140 DX = 1\u00a0: REM INITIAL<br/>150 DY = 0\u00a0: REM DIRECTION<br/>160 N = S - 1<br/>170 DIM A%(N, N)<br/>\u00a0<br/>200 FOR I = 0 TO H<br/>210     A%(X, Y) = I<br/>220     A%(N - X, N - Y) = S2 - I<br/>230     X = X + DX<br/>240     Y = Y + DY<br/>250     IF Y = 0 THEN DY = DY + 1\u00a0: IF DY THEN DX = -DX<br/>260     IF X = 0 THEN DX = DX + 1\u00a0: IF DX THEN DY = -DY<br/>270 NEXT I<br/>\u00a0<br/>300 FOR Y = 0 TO N<br/>310     FOR X = 0 TO N<br/>320         IF X THEN PRINT TAB(X * (LEN(STR$(S2)) + 1) + 1);<br/>330         PRINT A%(X, Y);<br/>340     NEXT X<br/>350     PRINT<br/>360 NEXT Y</pre>"}, {"lang": "ATS", "loc": 64, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_define.hats\" // defines some names<br/>#include<br/>\"share/atspre_staload.hats\" // for targeting C<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\" // for ...<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>Zig_zag_matrix(n: int): void<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>fun max(a: int, b: int): int =<br/>  if a &gt; b then a else b<br/>\u00a0<br/>fun movex(n: int, x: int, y: int): int =<br/>  if y &lt; n-1 then max(0, x-1) else x+1<br/>\u00a0<br/>fun movey(n: int, x: int, y: int): int =<br/>  if y &lt; n-1 then y+1 else y<br/>\u00a0<br/>fun zigzag(n: int, i: int, row: int, x: int, y: int): void =<br/>  if i = n*n then ()<br/>  else<br/>    let<br/>      val () = (if x = row then begin print i; print ','; end else ())<br/>      //val () = (begin print x; print ' '; print y; print ' '; print i; print ' '; end)<br/>      val nextX: int = if ((x+y)\u00a0% 2) = 0 then movex(n, x, y) else movey(n, y, x)<br/>      val nextY: int = if ((x+y)\u00a0% 2) = 0 then movey(n, x, y) else movex(n, y, x)<br/>    in<br/>      zigzag(n, i+1, row, nextX, nextY)<br/>    end<br/>\u00a0<br/>implement<br/>Zig_zag_matrix(n) =<br/>  let<br/>    fun loop(row: int): void =<br/>      if row = n then () else<br/>        let<br/>          val () = zigzag(n, 0, row, 0, 0)<br/>          val () = println!(\" \")<br/>        in<br/>          loop(row + 1)<br/>        end<br/>  in<br/>    loop(0)<br/>  end<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0() = () where<br/>{<br/>  val () = Zig_zag_matrix(5)<br/>} (* end of [main0] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 21, "block": "<pre class=\"autohotkey highlighted_source\">n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>                           <span class=\"co1\">; size</span><br/>v <span class=\"sy0\">:=</span> x <span class=\"sy0\">:=</span> y <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>                <span class=\"co1\">; initial values</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<span class=\"sy0\">*</span>n <span class=\"br0\">{</span>                    <span class=\"co1\">; for every array element</span><br/>   a_<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> v<span class=\"sy0\">++</span>             <span class=\"co1\">; assign the next index</span><br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span>y<span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>                 <span class=\"co1\">; odd diagonal</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span>                <span class=\"co1\">; while inside the square</span><br/>         y <span class=\"sy0\">-=</span> y<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">0</span>\u00a0: <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x<span class=\"sy0\">++</span>  <span class=\"co1\">; move right-up</span><br/>      <span class=\"kw1\">Else</span> y<span class=\"sy0\">++</span>                  <span class=\"co1\">; on the edge increment y, but not x: to even diagonal</span><br/>   <span class=\"kw1\">Else</span>                         <span class=\"co1\">; even diagonal</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span>                <span class=\"co1\">; while inside the square</span><br/>         x <span class=\"sy0\">-=</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">0</span>\u00a0: <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">++</span>  <span class=\"co1\">; move left-down</span><br/>      <span class=\"kw1\">Else</span> x<span class=\"sy0\">++</span>                  <span class=\"co1\">; on the edge increment x, but not y: to odd diagonal</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span> <span class=\"br0\">{</span>                      <span class=\"co1\">; generate printout</span><br/>   x <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a>                 <span class=\"co1\">; for each row</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span>                     <span class=\"co1\">; and for each column</span><br/>      t <span class=\"sy0\">.=</span> a_<span class=\"re0\">%x%</span>_<span class=\"re0\">%A_Index%</span> <span class=\"st0\">\"`t\"</span> <span class=\"co1\">; attach stored index</span><br/>   t <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span>                    <span class=\"co1\">; row is complete</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"re0\">%t%</span>                      <span class=\"co1\">; show output</span></pre>"}, {"lang": "AutoIt", "loc": 29, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;Array.au3&gt;</span><br/><span class=\"re0\">$Array</span> <span class=\"sy0\">=</span> ZigZag<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw4\">_ArrayDisplay</span><span class=\"br0\">(</span><span class=\"re0\">$Array</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> ZigZag<span class=\"br0\">(</span><span class=\"re0\">$int</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$av_array</span><span class=\"br0\">[</span><span class=\"re0\">$int</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$int</span><span class=\"br0\">]</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$I</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$int</span> <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"re0\">$av_array</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$I</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Mod.htm\"><span class=\"kw3\">Mod</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"co0\">;Even</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$int</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t\t<span class=\"re0\">$y</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t\t<span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$x</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a> <span class=\"co0\">; ODD</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$int</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t\t<span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t\t<span class=\"re0\">$y</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$y</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$y</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$av_array</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;ZigZag</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 30, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f ZIG-ZAG_MATRIX.AWK [-v offset={0|1}] [size]</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/><span class=\"co1\"># offset: \"0\" prints 0 to size^2-1 while \"1\" prints 1 to size^2</span><br/>    offset = <span class=\"br0\">(</span>offset <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">0</span> <span class=\"sy5\">:</span> offset<br/>    size = <span class=\"br0\">(</span><span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">5</span> <span class=\"sy5\">:</span> <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>offset <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span>01<span class=\"br0\">]</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>size <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    width = <span class=\"kw4\">length</span><span class=\"br0\">(</span>size <span class=\"sy3\">^</span> <span class=\"nu0\">2</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> offset<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>    i = j = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n=<span class=\"nu0\">0</span>; n<span class=\"sy2\">&lt;=</span>size<span class=\"sy3\">^</span><span class=\"nu0\">2</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span>; n<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># build array</span><br/>      arr<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span>,j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = n <span class=\"sy3\">+</span> offset<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy3\">+</span>j<span class=\"br0\">)</span> <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy2\">&lt;</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span> j<span class=\"sy3\">++</span> <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> i<span class=\"sy3\">+</span>=<span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> i<span class=\"sy3\">--</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&lt;</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span> i<span class=\"sy3\">++</span> <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> j<span class=\"sy3\">+</span>=<span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> j<span class=\"sy3\">--</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>row=<span class=\"nu0\">0</span>; row<span class=\"sy2\">&lt;</span>size; row<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># show array</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>col=<span class=\"nu0\">0</span>; col<span class=\"sy2\">&lt;</span>size; col<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%*d\"</span>,width,arr<span class=\"br0\">[</span>row,col<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">      Size% = 5<br/>      DIM array%(Size%-1,Size%-1)<br/>\u00a0<br/>      i% = 1<br/>      j% = 1<br/>      FOR e% = 0 TO Size%^2-1<br/>        array%(i%-1,j%-1) = e%<br/>        IF ((i% + j%) AND 1) = 0 THEN<br/>          IF j% &lt; Size% j% += 1 ELSE i% += 2<br/>          IF i% &gt; 1 i% -= 1<br/>        ELSE<br/>          IF i% &lt; Size% i% += 1 ELSE j% += 2<br/>          IF j% &gt; 1 j% -= 1<br/>        ENDIF<br/>      NEXT<br/>\u00a0<br/>      @% = &amp;904<br/>      FOR row% = 0 TO Size%-1<br/>        FOR col% = 0 TO Size%-1<br/>          PRINT array%(row%,col%);<br/>        NEXT<br/>        PRINT<br/>      NEXT row%</pre>"}, {"lang": "Befunge", "loc": 3, "block": "<pre class=\"text highlighted_source\">&gt;&gt; 5 &gt;&gt;00p0010p:1:&gt;20p030pv &gt;0g-:0`*:*-:00g:*1-55+/&gt;\\55+/:v  v:,*84&lt;<br/>v:++!\\**2p01:+1g01:g02$$_&gt;&gt;#^4#00#+p#1:#+1#g0#0g#3&lt;^/+ 55\\_$:&gt;55+/\\|<br/>&gt;55+,20g!00g10g`&gt;#^<a class=\"__cf_email__\" data-cfemail=\"58077c7c7c18\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^!`g03g00!g04++**2p03:+1g03!\\*+1*2g01:g04.$&lt;</pre>"}, {"lang": "C", "loc": 23, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* default size: 5 */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* alloc array*/</span><br/>\ts <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> m <span class=\"sy0\">*</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> m<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> i<span class=\"sy0\">-</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> i <span class=\"sy0\">&amp;&amp;</span> j <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\ts<span class=\"br0\">[</span><span class=\"br0\">(</span>i<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> j<span class=\"sy0\">*</span><span class=\"br0\">(</span>m<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>i <span class=\"sy0\">:</span> <span class=\"br0\">(</span>i<span class=\"sy0\">-</span>j<span class=\"br0\">)</span><span class=\"sy0\">*</span>m<span class=\"sy0\">+</span>j <span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">++;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m <span class=\"sy0\">*</span> m<span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>i <span class=\"sy0\">%</span> m<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span><span class=\"sy0\">:</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%3d\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* free(s) */</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 81, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;memory&gt;\t// for auto_ptr</span><br/><span class=\"co2\">#include &lt;cmath&gt;\t// for the log10 and floor functions</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;\t// for the setw function</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> vector<span class=\"sy1\">&lt;</span> <span class=\"kw4\">int</span> <span class=\"sy1\">&gt;</span> IntRow<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> vector<span class=\"sy1\">&lt;</span> IntRow <span class=\"sy1\">&gt;</span> IntTable<span class=\"sy4\">;</span><br/>\u00a0<br/>auto_ptr<span class=\"sy1\">&lt;</span> IntTable <span class=\"sy1\">&gt;</span> getZigZagArray<span class=\"br0\">(</span> <span class=\"kw4\">int</span> dimension <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tauto_ptr<span class=\"sy1\">&lt;</span> IntTable <span class=\"sy1\">&gt;</span> zigZagArrayPtr<span class=\"br0\">(</span> <span class=\"kw3\">new</span> IntTable<span class=\"br0\">(</span><br/>\t\tdimension, IntRow<span class=\"br0\">(</span> dimension <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// fill along diagonal stripes (oriented as \"/\")</span><br/>\t<span class=\"kw4\">int</span> lastValue <span class=\"sy1\">=</span> dimension <span class=\"sy2\">*</span> dimension <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> currNum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> currDiag <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> loopFrom<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> loopTo<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> row<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> col<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">do</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> currDiag <span class=\"sy1\">&lt;</span> dimension <span class=\"br0\">)</span> <span class=\"co1\">// if doing the upper-left triangular half</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tloopFrom <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t\tloopTo <span class=\"sy1\">=</span> currDiag<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"co1\">// doing the bottom-right triangular half</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tloopFrom <span class=\"sy1\">=</span> currDiag <span class=\"sy2\">-</span> dimension <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t\tloopTo <span class=\"sy1\">=</span> dimension <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> i <span class=\"sy1\">=</span> loopFrom<span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> loopTo<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> currDiag <span class=\"sy2\">%</span> <span class=\"nu0\">2</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"co1\">// want to fill upwards</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\trow <span class=\"sy1\">=</span> loopTo <span class=\"sy2\">-</span> i <span class=\"sy2\">+</span> loopFrom<span class=\"sy4\">;</span><br/>\t\t\t\tcol <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"co1\">// want to fill downwards</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\trow <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>\t\t\t\tcol <span class=\"sy1\">=</span> loopTo <span class=\"sy2\">-</span> i <span class=\"sy2\">+</span> loopFrom<span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"br0\">(</span> <span class=\"sy2\">*</span>zigZagArrayPtr <span class=\"br0\">)</span><span class=\"br0\">[</span> row <span class=\"br0\">]</span><span class=\"br0\">[</span> col <span class=\"br0\">]</span> <span class=\"sy1\">=</span> currNum<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tcurrDiag<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span> currDiag <span class=\"sy1\">&lt;=</span> lastValue <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> zigZagArrayPtr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printZigZagArray<span class=\"br0\">(</span> <span class=\"kw4\">const</span> auto_ptr<span class=\"sy1\">&lt;</span> IntTable <span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> zigZagArrayPtr <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">size_t</span> dimension <span class=\"sy1\">=</span> zigZagArrayPtr<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>size<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> fieldWidth <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span> <span class=\"kw4\">int</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">floor</span><span class=\"br0\">(</span> <span class=\"kw3\">log10</span><span class=\"br0\">(</span><br/>\t\t<span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span> <span class=\"kw4\">double</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> dimension <span class=\"sy2\">*</span> dimension <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">size_t</span> col<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> row <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> row <span class=\"sy1\">&lt;</span> dimension<span class=\"sy4\">;</span> row<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> col <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> col <span class=\"sy1\">&lt;</span> dimension<span class=\"sy4\">;</span> col<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> fieldWidth <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>zigZagArrayPtr <span class=\"br0\">)</span><span class=\"br0\">[</span> row <span class=\"br0\">]</span><span class=\"br0\">[</span> col <span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tprintZigZagArray<span class=\"br0\">(</span> getZigZagArray<span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 25, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> ZigZag<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n, n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// -1 for top-right move, +1 for bottom-left move</span><br/>    <span class=\"kw4\">int</span> start <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, end <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span><br/>    <span class=\"br0\">{</span><br/>        result<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> start<span class=\"sy0\">++;</span><br/>        result<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, n <span class=\"sy0\">-</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> end<span class=\"sy0\">--;</span><br/>\u00a0<br/>        i <span class=\"sy0\">+=</span> d<span class=\"sy0\">;</span> j <span class=\"sy0\">-=</span> d<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            i<span class=\"sy0\">++;</span> d <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>d<span class=\"sy0\">;</span> <span class=\"co1\">// top reached, reverse</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            j<span class=\"sy0\">++;</span> d <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>d<span class=\"sy0\">;</span> <span class=\"co1\">// left reached, reverse</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>start <span class=\"sy0\">&lt;</span> end<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy0\">==</span> end<span class=\"br0\">)</span><br/>        result<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 50, "block": "<pre class=\"text highlighted_source\">class ZigZag(Integer size) {<br/>\u00a0<br/>\tvalue data = Array {<br/>\t\tfor (i in 0:size)<br/>\t\tArray.ofSize(size, 0)<br/>\t};<br/>\u00a0<br/>\tvariable value i = 1;<br/>\tvariable value j = 1;<br/>\u00a0<br/>\tfor (element in 0\u00a0: size^2) {<br/>\t\tdata[j - 1]?.set(i - 1, element);<br/>\t\tif ((i + j).even) {<br/>\t\t\tif (j &lt; size) {<br/>\t\t\t\tj++;<br/>\t\t\t} <br/>\t\t\telse {<br/>\t\t\t\ti += 2;<br/>\t\t\t}<br/>\t\t\tif (i &gt; 1) {<br/>\t\t\t\ti--;<br/>\t\t\t}<br/>\t\t} <br/>\t\telse {<br/>\t\t\tif (i &lt; size) {<br/>\t\t\t\ti++;<br/>\t\t\t} <br/>\t\t\telse {<br/>\t\t\t\tj += 2;<br/>\t\t\t}<br/>\t\t\tif (j &gt; 1) {<br/>\t\t\t\tj--;<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tshared void display() {<br/>\t\tfor (row in data) {<br/>\t\t\tfor (element in row) {<br/>\t\t\t\tprocess.write(element.string.pad(3));<br/>\t\t\t}<br/>\t\t\tprint(\"\"); //newline<br/>\t\t}<br/>\t}<br/>}<br/>\u00a0<br/>shared void run() {<br/>\tvalue zz = ZigZag(5);<br/>\tzz.display();<br/>}</pre>"}, {"lang": "Clojure", "loc": 33, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> partitions <span class=\"br0\">[</span>sizes coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>lazy<span class=\"sy0\">-</span>seq<br/>   <span class=\"br0\">(</span><span class=\"kw1\">when-let</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">first</span> sizes<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">when-let</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span>seq coll<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> n coll<span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span>partitions <span class=\"br0\">(</span>next sizes<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">drop</span> n coll<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> take<span class=\"sy0\">-</span>from <span class=\"br0\">[</span>n colls<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>lazy<span class=\"sy0\">-</span>seq<br/>   <span class=\"br0\">(</span><span class=\"kw1\">when-let</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span>seq colls<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>first<span class=\"sy0\">-</span>n rest<span class=\"sy0\">-</span>n<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">split-at</span> n s<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">first</span> first<span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span>take<span class=\"sy0\">-</span>from n <span class=\"br0\">(</span><span class=\"kw1\">concat</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> seq <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">rest</span> first<span class=\"sy0\">-</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> rest<span class=\"sy0\">-</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> zig<span class=\"sy0\">-</span>zag <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span>partitions <span class=\"br0\">(</span><span class=\"kw1\">concat</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">%</span>1 <span class=\"sy0\">%</span>2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cycle</span> <span class=\"br0\">[</span><span class=\"kw1\">reverse</span> identity<span class=\"br0\">]</span><span class=\"br0\">)</span> ,<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>take<span class=\"sy0\">-</span>from n ,<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>zig<span class=\"sy0\">-</span>zag <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">13</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span> <span class=\"nu0\">3</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">16</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">17</span> <span class=\"nu0\">20</span> <span class=\"nu0\">22</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>zig<span class=\"sy0\">-</span>zag <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">13</span> <span class=\"nu0\">16</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span> <span class=\"nu0\">3</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">17</span> <span class=\"nu0\">24</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">18</span> <span class=\"nu0\">23</span> <span class=\"nu0\">27</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"nu0\">19</span> <span class=\"nu0\">22</span> <span class=\"nu0\">28</span> <span class=\"nu0\">31</span> <span class=\"nu0\">33</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span><span class=\"nu0\">20</span> <span class=\"nu0\">21</span> <span class=\"nu0\">29</span> <span class=\"nu0\">30</span> <span class=\"nu0\">34</span> <span class=\"nu0\">35</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 43, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"co1\"># Calculate a zig-zag pattern of numbers like so:</span><br/><span class=\"co1\">#   0 1 5</span><br/><span class=\"co1\">#   2 4 6</span><br/><span class=\"co1\">#   3 7 8</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># There are many interesting ways to solve this; we</span><br/><span class=\"co1\"># try for an algebraic approach, calculating triangle</span><br/><span class=\"co1\"># areas, so that me minimize space requirements.</span><br/>\u00a0<br/>zig_zag_value = <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\u00a0<br/>  upper_triangle_zig_zag = <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"co1\"># calculate the area of the triangle from the prior</span><br/>    <span class=\"co1\"># diagonals</span><br/>    diag = x <span class=\"sy0\">+</span> y<br/>    triangle_area = diag <span class=\"sy0\">*</span> <span class=\"br0\">(</span>diag<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"co1\"># then add the offset along the diagonal</span><br/>    <span class=\"kw1\">if</span> diag <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><br/>      triangle_area <span class=\"sy0\">+</span> y<br/>    <span class=\"kw1\">else</span><br/>      triangle_area <span class=\"sy0\">+</span> x<br/>\u00a0<br/>  <span class=\"kw1\">if</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">&lt;</span> n<br/>    upper_triangle_zig_zag x<span class=\"sy0\">,</span> y<br/>  <span class=\"kw1\">else</span><br/>    <span class=\"co1\"># For the bottom right part of the matrix, we essentially</span><br/>    <span class=\"co1\"># use reflection to count backward.</span><br/>    bottom_right_cell = n <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    n <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>    v = upper_triangle_zig_zag<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>x<span class=\"sy0\">,</span> n<span class=\"sy0\">-</span>y<span class=\"br0\">)</span><br/>    bottom_right_cell <span class=\"sy0\">-</span> v<br/>\u00a0<br/>zig_zag_matrix = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  row = <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>zig_zag_value i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>row i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>do <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span>..<span class=\"nu0\">6</span><span class=\"br0\">]</span><br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"---- n=#{n}\"</span><br/>    console.<span class=\"me1\">log</span> zig_zag_matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 14, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> zigzag <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>move <span class=\"br0\">(</span>i j<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> j <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">max</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop with a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"kw1\">integer</span><span class=\"br0\">)</span><br/>          with x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>          with y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>          for v from <span class=\"nu0\">0</span> below <span class=\"br0\">(</span>* n n<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a x y<span class=\"br0\">)</span> v<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> <span class=\"br0\">(</span>+ x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>values x y<span class=\"br0\">)</span> <span class=\"br0\">(</span>move x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>values y x<span class=\"br0\">)</span> <span class=\"br0\">(</span>move y x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> zigZag<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> move<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">int</span> j<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i<span class=\"sy0\">--;</span><br/>            j<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>            i<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> a <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>v<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        a<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> move<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">:</span> move<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%(%2d\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span>.<span class=\"me1\">zigZag</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 26, "block": "<pre class=\"e highlighted_source\"><span class=\"coMULTI\">/** Missing scalar multiplication, but we don't need it. */</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeVector2<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> vector <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> x<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return x <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> y<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return y <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> add<span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeVector2<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> other.<span class=\"me1\">x</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> other.<span class=\"me1\">y</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> clockwise<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeVector2<span class=\"br0\">(</span><span class=\"sy0\">-</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Bugs: (1) The printing is specialized. (2) No bounds check on the column. */</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeFlex2DArray<span class=\"br0\">(</span>rows<span class=\"sy0\">,</span> cols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> storage <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rows <span class=\"sy0\">*</span> cols<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> flex2DArray <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __printOn<span class=\"br0\">(</span>out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> y <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span>rows <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span>cols <span class=\"br0\">{</span><br/>          out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>import<span class=\"sy0\">:</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">makeString</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%3d\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>flex2DArray<span class=\"br0\">[</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> get<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span> return storage<span class=\"br0\">[</span>r <span class=\"sy0\">*</span> cols <span class=\"sy0\">+</span> c<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> put<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span> storage<span class=\"br0\">[</span>r <span class=\"sy0\">*</span> cols <span class=\"sy0\">+</span> c<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> v <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 46, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>extension op<br/>{<br/>    zigzagMatrix<br/>    [<br/>        intmatrix result\u00a0:= IntMatrix new int:self int:self.<br/>\u00a0<br/>        int i\u00a0:= 0.<br/>        int j\u00a0:= 0.<br/>        int d\u00a0:= -1.<br/>        int start\u00a0:= 0.<br/>        int end\u00a0:= self*self - 1.<br/>\u00a0<br/>        while (start &lt; end)<br/>        [<br/>            result write int:i int:j int:start. start\u00a0:= start + 1.<br/>            result write int(self - i - 1) int(self - j - 1) int:end. end\u00a0:= end - 1.<br/>\u00a0<br/>            i\u00a0:= i + d.<br/>            j\u00a0:= j - d.<br/>            if (i &lt; 0)<br/>            [<br/>                i:=i+1. d\u00a0:= d negative<br/>            ];<br/>            [<br/>                if (j &lt; 0)<br/>                [<br/>                    j\u00a0:= j + 1. d\u00a0:= d negative<br/>                ]<br/>            ]<br/>        ].<br/>\u00a0<br/>        if (start == end)<br/>        [<br/>            result write int:i int:j int:start.<br/>        ].<br/>\u00a0<br/>        ^ result<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(5 zigzagMatrix); readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  require Integer<br/>  def zigzag(n) do<br/>    fmt = \"~#{to_char_list(n*n-1) |&gt; length}w \"<br/>    (for x &lt;- 1..n, y &lt;- 1..n, do: {x,y})<br/>      |&gt; Enum.sort_by(fn{x,y}-&gt;{x+y, if(Integer.is_even(x+y), do: y, else: x)} end)<br/>      |&gt; Enum.with_index |&gt; Enum.sort<br/>      |&gt; Enum.each(fn {{_x,y},i} -&gt;<br/>          \u00a0:io.format fmt, [i]<br/>           if y==n, do: IO.puts \"\"<br/>         end)<br/>  end<br/>end<br/>\u00a0<br/>RC.zigzag(5)</pre>"}, {"lang": "Erlang", "loc": 30, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> zigzag <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>matrix<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">matrix</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">_X_Y</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Proplist</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> matrix_as_proplist<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">*</span> <span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re3\">columns</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Proplist</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">matrix</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">columns</span><span class=\"br0\">(</span> <span class=\"re5\">Column</span><span class=\"sy1\">,</span> <span class=\"re5\">Proplist</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">Value</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Proplist</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Column</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">matrix_as_proplist</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">X_Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Next</span> <span class=\"sy3\">=</span> <span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"re5\">X_Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">Next</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X_Y</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">}</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Y</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span>  <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Y</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">1</span>  <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span>  <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">1</span>  <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Y</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Y</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">next_indexes</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_Max</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 29, "block": "<pre class=\"text highlighted_source\">PROGRAM ZIG_ZAG<br/>\u00a0<br/>!$DYNAMIC<br/>     DIM ARRAY%[0,0]<br/>\u00a0<br/>BEGIN<br/>     SIZE%=5<br/>    \u00a0!$DIM ARRAY%[SIZE%-1,SIZE%-1]<br/>\u00a0<br/>     I%=1<br/>     J%=1<br/>     FOR E%=0 TO SIZE%^2-1 DO<br/>          ARRAY%[I%-1,J%-1]=E%<br/>          IF ((I%+J%) AND 1)=0 THEN<br/>              IF J%&lt;SIZE% THEN J%+=1 ELSE I%+=2 END IF<br/>              IF I%&gt;1 THEN I%-=1 END IF<br/>           ELSE<br/>              IF I%&lt;SIZE% THEN I%+=1 ELSE J%+=2 END IF<br/>              IF J%&gt;1 THEN J%-=1 END IF<br/>          END IF<br/>     END FOR<br/>\u00a0<br/>     FOR ROW%=0 TO SIZE%-1 DO<br/>         FOR COL%=0 TO SIZE%-1 DO<br/>            WRITE(\"###\";ARRAY%[ROW%,COL%];)<br/>         END FOR<br/>         PRINT<br/>     END FOR<br/>END PROGRAM</pre>"}, {"lang": "Euphoria", "loc": 20, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> zigzag<span class=\"br0\">(</span><span class=\"kw2\">integer</span> size<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> s<br/>    <span class=\"kw2\">integer</span> i<span class=\"sy2\">,</span> j<span class=\"sy2\">,</span> d<span class=\"sy2\">,</span> max<br/>    s <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span>size<span class=\"br0\">)</span><span class=\"sy2\">,</span>size<span class=\"br0\">)</span><br/>    i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>  j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>  d <span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    max <span class=\"sy1\">=</span> size<span class=\"sy1\">*</span>size<br/>    <span class=\"kw1\">for</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>max<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> n<br/>        s<span class=\"br0\">[</span>size<span class=\"sy1\">-</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>size<span class=\"sy1\">-</span>j<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> max<span class=\"sy1\">-</span>n<span class=\"sy1\">+</span><span class=\"nu0\">1</span><br/>        i <span class=\"sy1\">+=</span> d  j<span class=\"sy1\">-=</span> d<br/>        <span class=\"kw1\">if</span> i &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            i <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span>  d <span class=\"sy1\">=</span> <span class=\"sy1\">-</span>d<br/>        <span class=\"kw1\">elsif</span> j &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            j <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span>  d <span class=\"sy1\">=</span> <span class=\"sy1\">-</span>d<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"sy2\">?</span> zigzag<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 16, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">//Produce a zig zag matrix - Nigel Galloway: April 7th., 2015</span><br/><span class=\"kw1\">let</span> zz l a <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> N <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">create</span> l a <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gng <span class=\"br0\">(</span>n, i, g, e<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    N.<span class=\"br0\">[</span>n,i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> g<br/>    <span class=\"kw1\">match</span> e <span class=\"kw1\">with</span><br/>    | _ <span class=\"kw1\">when</span> i<span class=\"sy0\">=</span>a<span class=\"sy0\">-</span><span class=\"nu0\">1</span> &amp;&amp; n<span class=\"sy0\">=</span>l<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> N<br/>    | <span class=\"nu0\">1</span> <span class=\"kw1\">when</span> n <span class=\"sy0\">=</span> l<span class=\"sy0\">-</span><span class=\"nu0\">1</span>        <span class=\"sy0\">-&gt;</span> gng <span class=\"br0\">(</span>n, i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, g<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    | <span class=\"nu0\">2</span> <span class=\"kw1\">when</span> i <span class=\"sy0\">=</span> a<span class=\"sy0\">-</span><span class=\"nu0\">1</span>        <span class=\"sy0\">-&gt;</span> gng <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, i, g<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    | <span class=\"nu0\">1</span> <span class=\"kw1\">when</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>          <span class=\"sy0\">-&gt;</span> gng <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, g<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    | <span class=\"nu0\">2</span> <span class=\"kw1\">when</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>          <span class=\"sy0\">-&gt;</span> gng <span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, g<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    | <span class=\"nu0\">1</span>                     <span class=\"sy0\">-&gt;</span> gng <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, g<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    | _                     <span class=\"sy0\">-&gt;</span> gng <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, g<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  gng <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Fan", "loc": 91, "block": "<pre class=\"text highlighted_source\">using gfx  // for Point; convenient x/y wrapper<br/>\u00a0<br/>**<br/>** A couple methods for generating a 'zigzag' array like<br/>**<br/>**   0  1  5  6<br/>**   2  4  7 12<br/>**   3  8 11 13<br/>**   9 10 14 15<br/>**<br/>class ZigZag<br/>{<br/>  ** return an n x n array of uninitialized Int<br/>  static Int[][] makeSquareArray(Int n)<br/>  {<br/>    Int[][] grid\u00a0:= Int[][,] {it.size=n}<br/>    n.times |i| { grid[i] = Int[,] {it.size=n} }<br/>    return grid<br/>  }<br/>\u00a0<br/>\u00a0<br/>  Int[][] zig(Int n)<br/>  {<br/>    grid\u00a0:= makeSquareArray(n)<br/>\u00a0<br/>    move\u00a0:= |Int i, Int j-&gt;Point|<br/>    { return j &lt; n - 1\u00a0? Point(i &lt;= 0\u00a0? 0\u00a0: i-1, j+1)\u00a0: Point(i+1, j) }<br/>    pt\u00a0:= Point(0,0)<br/>    (n*n).times |i| {<br/>      grid[pt.y][pt.x] = i<br/>      if ((pt.x+pt.y)%2\u00a0!= 0) pt = move(pt.x,pt.y)<br/>      else {tmp:= move(pt.y,pt.x); pt = Point(tmp.y, tmp.x) }<br/>    }<br/>    return grid<br/>  }<br/>\u00a0<br/>  public static Int[][] zag(Int size)<br/>  {<br/>    data\u00a0:= makeSquareArray(size)<br/>\u00a0<br/>    Int i\u00a0:= 1<br/>    Int j\u00a0:= 1<br/>    for (element:=0; element &lt; size * size; element++)<br/>    {<br/>      data[i - 1][j - 1] = element<br/>      if((i + j)\u00a0% 2 == 0) {<br/>        // Even stripes<br/>        if (j &lt; size) {<br/>          j++<br/>        } else {<br/>          i += 2<br/>        }<br/>        if (i &gt; 1) {<br/>          i--<br/>        }<br/>      } else {<br/>        // Odd stripes<br/>        if (i &lt; size) {<br/>          i++;<br/>        } else {<br/>          j += 2<br/>        }<br/>        if (j &gt; 1) {<br/>          j--<br/>        }<br/>      }<br/>    }<br/>    return data;<br/>  }<br/>\u00a0<br/>  Void print(Int[][] data)<br/>  {<br/>    data.each |row|<br/>    {<br/>      buf\u00a0:= StrBuf()<br/>      row.each |num|<br/>      {<br/>        buf.add(num.toStr.justr(3))<br/>      }<br/>      echo(buf)<br/>    }<br/>  }<br/>\u00a0<br/>  Void main()<br/>  {<br/>    echo(\"zig method:\")<br/>    print(zig(8))<br/>    echo(\"\\nzag method:\")<br/>    print(zag(8))<br/>  }<br/>}</pre>"}, {"lang": "Forth", "loc": 50, "block": "<pre class=\"text highlighted_source\">0 value diag<br/>\u00a0<br/>: south  diag abs + cell+\u00a0;<br/>\u00a0<br/>' cell+ value zig<br/>' south value zag<br/>\u00a0<br/>: init ( n -- )<br/>  1- cells negate to diag<br/>  ['] cell+ to zig<br/>  ['] south to zag\u00a0;<br/>\u00a0<br/>: swap-diag   zig zag to zig to zag\u00a0;<br/>\u00a0<br/>: put ( n addr -- n+1 addr )<br/>  2dup\u00a0!  swap 1+ swap\u00a0;<br/>\u00a0<br/>: turn ( addr -- addr+E/S )<br/>  zig execute  swap-diag<br/>  diag negate to diag\u00a0;<br/>\u00a0<br/>: zigzag ( matrix n -- )<br/>  { n } n init<br/>  0 swap<br/>  n 1\u00a0?do<br/>    put turn<br/>    i 0 do put diag + loop<br/>  loop<br/>  swap-diag<br/>  n 1\u00a0?do<br/>    put turn<br/>    n i 1+\u00a0?do put diag + loop<br/>  loop<br/> \u00a0!\u00a0;<br/>\u00a0<br/>: .matrix ( n matrix -- )<br/>  over 0 do<br/>    cr<br/>    over 0 do<br/>      dup @ 3 .r cell+<br/>    loop<br/>  loop 2drop\u00a0;<br/>\u00a0<br/>: test ( n -- )  here over zigzag here .matrix\u00a0; <br/>5 test<br/>  0  1  5  6 14<br/>  2  4  7 13 15<br/>  3  8 12 16 21<br/>  9 11 17 20 22<br/> 10 18 19 23 24 ok</pre>"}, {"lang": "Fortran", "loc": 38, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> ZIGZAG<br/>\u00a0<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>    <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">PARAMETER</span> <span class=\"sy0\">::</span> <span class=\"kw4\">size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">zzarray</span><span class=\"br0\">(</span><span class=\"kw4\">size</span>,<span class=\"kw4\">size</span><span class=\"br0\">)</span>, x<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"sy0\">*</span><span class=\"kw4\">size</span><span class=\"br0\">)</span>, y<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"sy0\">*</span><span class=\"kw4\">size</span><span class=\"br0\">)</span>, i, j<br/>\u00a0<br/>    <span class=\"co1\">! index arrays</span><br/>    x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j, i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">)</span>, j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>    y <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">)</span>, j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">! Sort indices</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"kw4\">size</span><span class=\"sy0\">*</span><span class=\"kw4\">size</span><br/>       j <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>j&gt;<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">+</span>y<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; <span class=\"br0\">(</span>x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span>y<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>       x<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">cshift</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"br0\">)</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       y<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">cshift</span><span class=\"br0\">(</span>y<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"br0\">)</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>    <span class=\"co1\">! Create zig zag array</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"sy0\">*</span><span class=\"kw4\">size</span><br/>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span>y<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>          zzarray<span class=\"br0\">(</span>x<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,y<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">ELSE</span><br/>          zzarray<span class=\"br0\">(</span>y<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>    <span class=\"co1\">! Print zig zag array</span><br/>    <span class=\"kw1\">DO</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><br/>       <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><br/>          WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(I5)\"</span>, <span class=\"kw1\">ADVANCE</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> zzarray<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>       WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/> <span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> ZIGZAG</pre>"}, {"lang": "FreeBASIC", "loc": 74, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n<br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Input</span> <span class=\"st0\">\"Enter size of matrix \"</span>; n<br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> n &gt; <span class=\"nu0\">0</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> zigzag<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"co1\">'' all zero by default</span><br/>\u00a0<br/><span class=\"co1\">' enter the numbers 0 to (n^2 - 1) in the matrix's anti-diagonals</span><br/>zigzag<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/><span class=\"kw1\">If</span> n &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> row = <span class=\"nu0\">0</span>, col = <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Boolean down = <span class=\"kw1\">true</span>, increment = <span class=\"kw1\">true</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i = <span class=\"nu0\">0</span>, j = <span class=\"nu0\">2</span>, k<br/>  <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> down <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">For</span> k = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> j<br/>        i += <span class=\"nu0\">1</span><br/>        row += <span class=\"nu0\">1</span><br/>        col -= <span class=\"nu0\">1</span><br/>        zigzag<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span> = i<br/>      <span class=\"kw1\">Next</span>     <br/>      down = <span class=\"kw1\">false</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw1\">For</span> k = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> j<br/>        i += <span class=\"nu0\">1</span><br/>        row -= <span class=\"nu0\">1</span><br/>        col += <span class=\"nu0\">1</span><br/>        zigzag<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span> = i<br/>      <span class=\"kw1\">Next</span>   <br/>      down = <span class=\"kw1\">true</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">If</span> increment <span class=\"kw1\">Then</span><br/>      j += <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> j &gt; n <span class=\"kw1\">Then</span><br/>        j = n - <span class=\"nu0\">1</span><br/>        increment = <span class=\"kw1\">false</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Else</span><br/>      j -= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">If</span> down AndAlso increment <span class=\"kw1\">Then</span><br/>      col += <span class=\"nu0\">2</span><br/>      row -= <span class=\"nu0\">1</span>    <br/>    <span class=\"kw1\">ElseIf</span> <span class=\"kw1\">Not</span> Down AndAlso increment <span class=\"kw1\">Then</span><br/>      row += <span class=\"nu0\">2</span><br/>      col -= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ElseIf</span> down AndAlso <span class=\"kw1\">Not</span> increment <span class=\"kw1\">Then</span><br/>      col += <span class=\"nu0\">1</span> <br/>    <span class=\"kw1\">Else</span> <span class=\"co1\">'' Not down AndAlso NotIncrement </span><br/>      row += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span>       <br/>  <span class=\"kw1\">Loop</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"co1\">' print zigzag matrix if n &lt; 20 </span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">20</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>      <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"####\"</span>; zigzag<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">Else</span> <br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Matrix is too big to display on 80 column console\"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GAP", "loc": 36, "block": "<pre class=\"text highlighted_source\">ZigZag\u00a0:= function(n)<br/>  local a, i, j, k;<br/>  a\u00a0:= NullMat(n, n);<br/>  i\u00a0:= 1;<br/>  j\u00a0:= 1;<br/>  for k in [0 .. n*n - 1] do<br/>    a[i][j]\u00a0:= k;<br/>    if (i + j) mod 2 = 0 then<br/>      if j &lt; n then<br/>        j\u00a0:= j + 1;<br/>      else<br/>        i\u00a0:= i + 2;<br/>      fi;<br/>      if i &gt; 1 then<br/>        i\u00a0:= i - 1;<br/>      fi;<br/>    else<br/>      if i &lt; n then<br/>        i\u00a0:= i + 1;<br/>      else<br/>        j\u00a0:= j + 2;<br/>      fi;<br/>      if j &gt; 1 then<br/>        j\u00a0:= j - 1;<br/>      fi;<br/>    fi;<br/>  od;<br/>  return a;<br/>end;<br/>\u00a0<br/>PrintArray(ZigZag(5));  <br/># [ [   0,   1,   5,   6,  14 ],<br/>#   [   2,   4,   7,  13,  15 ],<br/>#   [   3,   8,  12,  16,  21 ],<br/>#   [   9,  11,  17,  20,  22 ],<br/>#   [  10,  18,  19,  23,  24 ] ]</pre>"}, {"lang": "Go", "loc": 47, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> zz<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy3\">*</span>n<span class=\"sy1\">)</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    n2 <span class=\"sy2\">:=</span> n <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> d &lt;<span class=\"sy2\">=</span> n2<span class=\"sy1\">;</span> d<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        x <span class=\"sy2\">:=</span> d <span class=\"sy3\">-</span> n<br/>        <span class=\"kw1\">if</span> x &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            x <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"sy1\">}</span><br/>        y <span class=\"sy2\">:=</span> d <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> y &gt; n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            y <span class=\"sy2\">=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>        j <span class=\"sy2\">:=</span> n2 <span class=\"sy3\">-</span> d<br/>        <span class=\"kw1\">if</span> j &gt; d <span class=\"sy1\">{</span><br/>            j <span class=\"sy2\">=</span> d<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> k &lt; j<span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> d&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                r<span class=\"sy1\">[(</span>x<span class=\"sy3\">+</span>k<span class=\"sy1\">)</span><span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>y<span class=\"sy3\">-</span>k<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                r<span class=\"sy1\">[(</span>y<span class=\"sy3\">-</span>k<span class=\"sy1\">)</span><span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>x<span class=\"sy3\">+</span>k<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">5</span><br/>    w <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span>n<span class=\"sy3\">*</span>n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> zz<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%*d \"</span><span class=\"sy1\">,</span> w<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span>n <span class=\"sy3\">==</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 11, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> zz <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span><br/>  grid <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span>, d <span class=\"sy0\">-</span> n<span class=\"br0\">)</span>, <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20min\"><span class=\"kw5\">min</span></a><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, d <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20min\"><span class=\"kw5\">min</span></a><span class=\"br0\">(</span>d, n<span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> d<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20times\"><span class=\"kw8\">times</span></a> <span class=\"br0\">{</span><br/>       grid<span class=\"br0\">[</span>d<span class=\"sy0\">%</span>2<span class=\"sy0\">?</span>y<span class=\"sy0\">-</span>it:x<span class=\"sy0\">+</span>it<span class=\"br0\">]</span><span class=\"br0\">[</span>d<span class=\"sy0\">%</span>2<span class=\"sy0\">?</span>x<span class=\"sy0\">+</span>it:y<span class=\"sy0\">-</span>it<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">++;</span><br/>      <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  grid<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 11, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array <span class=\"br0\">(</span>array<span class=\"sy0\">,</span> bounds<span class=\"sy0\">,</span> range<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Monoid <span class=\"br0\">(</span>mappend<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sortBy<span class=\"br0\">)</span><br/>\u00a0<br/>compZig <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"st0\">',y'</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span>x<span class=\"sy0\">+</span>y<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"st0\">'+y'</span><span class=\"br0\">)</span><br/>                        `mappend` <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> <span class=\"br0\">(</span>x<span class=\"sy0\">+</span>y<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> x x<span class=\"st0\">'<br/>                                                else compare y y'</span><br/>\u00a0<br/>zigZag upper <span class=\"sy0\">=</span> array b <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span>sortBy compZig <span class=\"br0\">(</span>range b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>upper<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 25, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>   n <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"kw4\">args</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">5</span><br/>   <span class=\"kw1\">every</span> <span class=\"sy1\">!</span><span class=\"br0\">(</span>A <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   A <span class=\"sy1\">:=</span> zigzag<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   show<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> show<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>A<span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> zigzag<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    x <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span>A<span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        x <span class=\"sy1\">:=</span> nextIndices<span class=\"br0\">(</span><span class=\"sy1\">*</span>A<span class=\"sy1\">,</span> x<span class=\"br0\">)</span><br/>        A<span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> i<br/>        <span class=\"br0\">}</span>   <br/>    <span class=\"kw1\">return</span> A<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> nextIndices<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">%</span>2 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>           <span class=\"kw1\">then</span> <span class=\"kw1\">if</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> n <span class=\"kw1\">then</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"br0\">[</span>max<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>           <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> n <span class=\"kw1\">then</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> max<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">(</span>$ [: /:@; &lt;@|.`&lt;/<a class=\"__cf_email__\" data-cfemail=\"446a042d6a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">)</span>@,~ <span class=\"nu0\">5</span><br/> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">14</span><br/> <span class=\"nu0\">2</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">13</span> <span class=\"nu0\">15</span><br/> <span class=\"nu0\">3</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">16</span> <span class=\"nu0\">21</span><br/> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">17</span> <span class=\"nu0\">20</span> <span class=\"nu0\">22</span><br/><span class=\"nu0\">10</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">24</span></pre>"}, {"lang": "Java", "loc": 31, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Zig_Zag<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span> size<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>size<span class=\"br0\">]</span><span class=\"br0\">[</span>size<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> <span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> element <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> element <span class=\"sy0\">&lt;</span> size <span class=\"sy0\">*</span> size<span class=\"sy0\">;</span> element<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>  data<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> element<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>   <span class=\"co1\">// Even stripes</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span><br/>    j<span class=\"sy0\">++;</span><br/>   <span class=\"kw1\">else</span><br/>    i<span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    i<span class=\"sy0\">--;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"br0\">{</span><br/>   <span class=\"co1\">// Odd stripes</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span><br/>    i<span class=\"sy0\">++;</span><br/>   <span class=\"kw1\">else</span><br/>    j<span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    j<span class=\"sy0\">--;</span><br/>  <span class=\"br0\">}</span><br/> <span class=\"br0\">}</span><br/> <span class=\"kw1\">return</span> data<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 32, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> ZigZagMatrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> e <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">*</span>n<span class=\"sy0\">;</span> e<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> e<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Even stripes</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> j <span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">else</span>       i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> i <span class=\"sy0\">--;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Odd stripes</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> i <span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">else</span>       j <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> j <span class=\"sy0\">--;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>ZigZagMatrix.<span class=\"kw1\">prototype</span> <span class=\"sy0\">=</span> Matrix.<span class=\"kw1\">prototype</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> z <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ZigZagMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>z <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ZigZagMatrix<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Joy", "loc": 52, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(*<br/>    From the library.<br/>*)<br/>DEFINE reverse == [] swap shunt;<br/>       shunt   == [swons] step.<br/>\u00a0<br/>(*<br/>    Split according to the parameter given.<br/>*)<br/>DEFINE take-drop  == [dup] swap dup [[] cons [take swap] concat concat] dip []<br/>                     cons concat [drop] concat.<br/>\u00a0<br/>(*<br/>    Take the first of a list of lists.<br/>*)<br/>DEFINE take-first == [] cons 3 [dup] times [dup] swap concat [take [first] map<br/>                     swap dup] concat swap concat [drop swap] concat swap<br/>                     concat [take [rest] step []] concat swap concat [[cons]<br/>                     times swap concat 1 drop] concat.<br/>\u00a0<br/>DEFINE zigzag ==<br/>\u00a0<br/>(*<br/>    Use take-drop to generate a list of lists.<br/>*)<br/>4 [dup] times 1 swap from-to-list swap pred 1 swap from-to-list reverse concat<br/>swap dup * pred 0 swap from-to-list swap [take-drop i] step [pop list] [cons]<br/>while<br/>\u00a0<br/>(*<br/>    The odd numbers must be modified with reverse.<br/>*)<br/>[dup size 2 div popd [1 =] [pop reverse] [pop] ifte] map<br/>\u00a0<br/>(*<br/>    Take the first of the first of n lists.<br/>*)<br/>swap dup take-first [i] cons times pop<br/>\u00a0<br/>(*<br/>    Merge the n separate lists.<br/>*)<br/>[] [pop list] [cons] while<br/>\u00a0<br/>(*<br/>    And print them.<br/>*)<br/>swap dup * pred 'd 1 1 format size succ [] cons 'd swons [1 format putchars]<br/>concat [step '\\n putch] cons step.<br/>\u00a0<br/>11 zigzag.</pre>"}, {"lang": "jq", "loc": 19, "block": "<pre class=\"text highlighted_source\"># Create an m x n matrix<br/> def matrix(m; n; init):<br/>   if m == 0 then []<br/>   elif m == 1 then [range(0;n)] | map(init)<br/>   elif m &gt; 0 then<br/>     matrix(1;n;init) as $row<br/>     | [range(0;m)] | map( $row )<br/>   else error(\"matrix\\(m);_;_) invalid\")<br/>   end\u00a0;<br/>\u00a0<br/># Print a matrix neatly, each cell occupying n spaces<br/>def neatly(n):<br/>  def right: tostring | ( \" \" * (n-length) + .);<br/>  . as $in<br/>  | length as $length<br/>  | reduce range (0;$length) as $i<br/>      (\"\"; . + reduce range(0;$length) as $j<br/>      (\"\"; \"\\(.) \\($in[$i][$j] | right )\" ) + \"\\n\" )\u00a0;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 25, "block": "<pre class=\"text highlighted_source\">function zigzag_matrix(n::Int)<br/>    matrix = zeros(Int, n, n)<br/>    x, y = 1, 1<br/>    for i = 0:(n*n-1)<br/>        matrix[y,x] = i<br/>        if (x + y)\u00a0% 2 == 0<br/>            # Even stripes<br/>            if x &lt; n<br/>                x += 1<br/>                y -= (y &gt; 1)<br/>            else<br/>                y += 1<br/>            end<br/>        else<br/>            # Odd stripes<br/>            if y &lt; n<br/>                x -= (x &gt; 1)<br/>                y += 1<br/>            else<br/>                x += 1<br/>            end<br/>        end<br/>    end<br/>    return matrix<br/>end</pre>"}, {"lang": "Kotlin", "loc": 37, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias Vector <span class=\"sy0\">=</span> IntArray<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>Vector<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>fun zigzagMatrix<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> down <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>col in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>down<span class=\"br0\">)</span> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in <span class=\"nu0\">0</span>..<span class=\"me1\">col</span><span class=\"br0\">)</span> result<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col - row<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count++<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in col downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> result<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col - row<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count++<br/>        down <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>down<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in <span class=\"nu0\">1</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>down<span class=\"br0\">)</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>col in n - <span class=\"nu0\">1</span> downTo row<span class=\"br0\">)</span> result<span class=\"br0\">[</span>row + n - <span class=\"nu0\">1</span> - col<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count++<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>col in row until n<span class=\"br0\">)</span> result<span class=\"br0\">[</span>row + n - <span class=\"nu0\">1</span> - col<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count++<br/>        down <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>down<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>fun printMatrix<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%2d \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    printMatrix<span class=\"br0\">(</span>zigzagMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span>zigzagMatrix<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 77, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>var(<br/>     'square'  = array<br/>    ,'size'    = integer( 5 )// for a 5 X 5 square<br/>    ,'row'     = array<br/>    ,'x'       = integer( 1 )<br/>    ,'y'       = integer( 1 )<br/>    ,'counter' = integer( 1 )<br/>);<br/>\u00a0<br/>// create place-holder matrix<br/>loop( $size );<br/>   $row = array;<br/>\u00a0<br/>   loop( $size );<br/>      $row-&gt;insert( 0 );<br/>\u00a0<br/>    /loop;<br/>\u00a0<br/>   $square-&gt;insert( $row );<br/>\u00a0<br/>/loop;<br/>\u00a0<br/>while( $counter &lt; $size * $size );<br/>   // check downward diagonal<br/>   if(<br/>         $x &gt; 1<br/>         &amp;&amp;<br/>         $y &lt; $square-&gt;size<br/>         &amp;&amp;<br/>         $square-&gt;get( $y + 1 )-&gt;get( $x - 1 ) == 0<br/>      );<br/>\u00a0<br/>         $x -= 1;<br/>         $y += 1;<br/>\u00a0<br/>   // check upward diagonal<br/>   else(<br/>         $x &lt; $square-&gt;size<br/>         &amp;&amp;<br/>         $y &gt; 1<br/>         &amp;&amp;<br/>         $square-&gt;get( $y - 1 )-&gt;get( $x + 1 ) == 0<br/>      );<br/>\u00a0<br/>         $x += 1;<br/>         $y -= 1;<br/>\u00a0<br/>   // check right<br/>   else(<br/>         (<br/>            $y == 1<br/>            ||<br/>            $y == $square-&gt;size<br/>         )<br/>         &amp;&amp;<br/>         $x &lt; $square-&gt;size<br/>         &amp;&amp;<br/>         $square-&gt;get( $y )-&gt;get( $x + 1 ) == 0<br/>      );<br/>\u00a0<br/>      $x += 1;<br/>\u00a0<br/>   // down<br/>   else;<br/>      $y += 1;<br/>\u00a0<br/>   /if;<br/>\u00a0<br/>   $square-&gt;get( $y )-&gt;get( $x ) = loop_count;<br/>\u00a0<br/>   $counter += 1;<br/>\u00a0<br/>/while;<br/>\u00a0<br/>$square;<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 78, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> zigzag <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> zigzag<span class=\"sy0\">.</span>new<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> a <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> i <span class=\"co1\">-- cols</span><br/>    <span class=\"kw1\">local</span> j <span class=\"co1\">-- rows</span><br/>\u00a0<br/>    a<span class=\"sy0\">.</span>n <span class=\"sy0\">=</span> n<br/>    a<span class=\"sy0\">.</span>val <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>        a<span class=\"sy0\">.</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>            a<span class=\"sy0\">.</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> di<br/>    <span class=\"kw1\">local</span> dj<br/>    <span class=\"kw1\">local</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> k <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">*</span> n <span class=\"kw1\">do</span><br/>        a<span class=\"sy0\">.</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<br/>        k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> n <span class=\"kw1\">then</span><br/>            j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            a<span class=\"sy0\">.</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<br/>            k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            di <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            dj <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> j <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            a<span class=\"sy0\">.</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<br/>            k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            di <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            dj <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> j <span class=\"sy0\">==</span> n <span class=\"kw1\">then</span><br/>            i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            a<span class=\"sy0\">.</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<br/>            k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            di <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            dj <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            a<span class=\"sy0\">.</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<br/>            k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            di <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            dj <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>        i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> di<br/>        j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> dj<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"br0\">{</span>__index <span class=\"sy0\">=</span> zigzag<span class=\"sy0\">,</span> __tostring <span class=\"sy0\">=</span> zigzag<span class=\"sy0\">.</span>__tostring<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> a<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> zigzag<span class=\"sy0\">:</span>__tostring<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> s <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> self<span class=\"sy0\">.</span>n <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> row <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> self<span class=\"sy0\">.</span>n <span class=\"kw1\">do</span><br/>            row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">'%d'</span><span class=\"sy0\">,</span> self<span class=\"sy0\">.</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        s<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>row<span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>zigzag<span class=\"sy0\">.</span>new<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M4", "loc": 30, "block": "<pre class=\"text highlighted_source\">divert(-1)<br/>\u00a0<br/>define(`set2d',`define(`$1[$2][$3]',`$4')')<br/>define(`get2d',`defn(`$1[$2][$3]')')<br/>define(`for',<br/>   `ifelse($#,0,``$0'',<br/>   `ifelse(eval($2&lt;=$3),1,<br/>   `pushdef(`$1',$2)$4`'popdef(`$1')$0(`$1',incr($2),$3,`$4')')')')<br/>define(`show2d',<br/>   `for(`x',0,decr($2),<br/>      `for(`y',0,decr($3),`format(`%2d',get2d($1,x,y)) ')<br/>')')<br/>\u00a0<br/>dnl  &lt;name&gt;,&lt;size&gt;<br/>define(`zigzag',<br/>   `define(`j',1)`'define(`k',1)`'for(`e',0,eval($2*$2-1),<br/>      `set2d($1,decr(j),decr(k),e)`'ifelse(eval((j+k)%2),0,<br/>         `ifelse(eval(k&lt;$2),1,<br/>            `define(`k',incr(k))',<br/>            `define(`j',eval(j+2))')`'ifelse(eval(j&gt;1),1,<br/>            `define(`j',decr(j))')',<br/>         `ifelse(eval(j&lt;$2),1,<br/>            `define(`j',incr(j))',<br/>            `define(`k',eval(k+2))')`'ifelse(eval(k&gt;1),1,<br/>            `define(`k',decr(k))')')')')<br/>\u00a0<br/>divert<br/>\u00a0<br/>zigzag(`a',5)<br/>show2d(`a',5,5)</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">ZigZag[size_Integer/;size&gt;0]:=Module[{empty=ConstantArray[0,{size,size}]},<br/> empty=ReplacePart[empty,{i_,j_}:&gt;1/2 (i+j)^2-(i+j)/2-i (1-Mod[i+j,2])-j Mod[i+j,2]];<br/> ReplacePart[empty,{i_,j_}/;i+j&gt;size+1:&gt; size^2-tmp[[size-i+1,size-j+1]]-1]<br/>]</pre>"}, {"lang": "MATLAB", "loc": 66, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> matrix = zigZag<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">%This is very unintiutive. This algorithm parameterizes the</span><br/>    <span class=\"co1\">%zig-zagging movement along the matrix indicies. The easiest way to see</span><br/>    <span class=\"co1\">%what this algorithm does is to go through line-by-line and write out</span><br/>    <span class=\"co1\">%what the algorithm does on a peace of paper. </span><br/>\u00a0<br/>    matrix = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    counter = <span class=\"nu0\">1</span>;<br/>    flipCol = true;<br/>    flipRow = false;<br/>\u00a0<br/>    <span class=\"co1\">%This for loop does the top-diagonal of the matrix</span><br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">2</span>:n<span class=\"br0\">)</span><br/>        row = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>;<br/>        column = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"co1\">%Causes the zig-zagging. Without these conditionals, </span><br/>        <span class=\"co1\">%you would end up with a diagonal matrix. </span><br/>        <span class=\"co1\">%To see what happens, comment these conditionals out.         </span><br/>        <span class=\"kw1\">if</span> flipCol<br/>            column = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>column<span class=\"br0\">)</span>;<br/>            flipRow = true;<br/>            flipCol = false;<br/>        <span class=\"kw1\">elseif</span> flipRow<br/>            row = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>row<span class=\"br0\">)</span>;<br/>            flipRow = false;<br/>            flipCol = true;           <br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%Selects a diagonal of the zig-zag matrix and places the </span><br/>        <span class=\"co1\">%correct integer value in each index along that diagonal</span><br/>        <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            matrix<span class=\"br0\">(</span>row<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span>,column<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> = counter;<br/>            counter = counter + <span class=\"nu0\">1</span>;<br/>        <span class=\"kw1\">end</span>   <br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%This for loop does the bottom-diagonal of the matrix</span><br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">2</span>:n<span class=\"br0\">)</span><br/>        row = <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>:n<span class=\"br0\">)</span>;<br/>        column = <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>:n<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"co1\">%Causes the zig-zagging. Without these conditionals, </span><br/>        <span class=\"co1\">%you would end up with a diagonal matrix. </span><br/>        <span class=\"co1\">%To see what happens comment these conditionals out. </span><br/>        <span class=\"kw1\">if</span> flipCol<br/>            column = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>column<span class=\"br0\">)</span>;<br/>            flipRow = true;<br/>            flipCol = false;<br/>        <span class=\"kw1\">elseif</span> flipRow<br/>            row = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>row<span class=\"br0\">)</span>;<br/>            flipRow = false;<br/>            flipCol = true;           <br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%Selects a diagonal of the zig-zag matrix and places the </span><br/>        <span class=\"co1\">%correct integer value in each index along that diagonal</span><br/>        <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            matrix<span class=\"br0\">(</span>row<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span>,column<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> = counter;<br/>            counter = counter + <span class=\"nu0\">1</span>;<br/>        <span class=\"kw1\">end</span>   <br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 22, "block": "<pre class=\"text highlighted_source\">zigzag(n)\u00a0:= block([a, i, j],<br/>a: zeromatrix(n, n),<br/>i: 1,<br/>j: 1,<br/>for k from 0 thru n*n - 1 do (<br/>   a[i, j]: k,<br/>   if evenp(i + j) then (<br/>      if j &lt; n then j: j + 1 else i: i + 2,<br/>      if i &gt; 1 then i: i - 1      <br/>   ) else (<br/>      if i &lt; n then i: i + 1 else j: j + 2,<br/>      if j &gt; 1 then j: j - 1<br/>   )<br/>),<br/>a)$<br/>\u00a0<br/>zigzag(5);<br/>/* matrix([ 0,  1,  5,  6, 14],<br/>          [ 2,  4,  7, 13, 15],<br/>          [ 3,  8, 12, 16, 21],<br/>          [ 9, 11, 17, 20, 22],<br/>          [10, 18, 19, 23, 24]) */</pre>"}, {"lang": "Modula-3", "loc": 48, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> ZigZag <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> Matrix <span class=\"sy0\">=</span> <span class=\"kw1\">REF</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Create<span class=\"br0\">(</span>size<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">PROCEDURE</span> move<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">BEGIN</span><br/>      <span class=\"kw1\">IF</span> j &lt; <span class=\"br0\">(</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>          i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>        <span class=\"kw1\">ELSE</span><br/>          i <span class=\"sy0\">:=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">ELSE</span><br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span> move;<br/>\u00a0<br/>  <span class=\"kw1\">VAR</span> data <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Matrix<span class=\"sy0\">,</span> size<span class=\"sy0\">,</span> size<span class=\"br0\">)</span>;<br/>      x<span class=\"sy0\">,</span> y<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> v <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> size <span class=\"sy0\">*</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      data<span class=\"br0\">[</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> v;<br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y<span class=\"br0\">)</span> <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        move<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">ELSE</span><br/>        move<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> data;<br/>  <span class=\"kw1\">END</span> Create;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Print<span class=\"br0\">(</span>data<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>data^<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>data^<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>        IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fmt.<span class=\"me1\">F</span><span class=\"br0\">(</span><span class=\"st0\">\"%3s\"</span><span class=\"sy0\">,</span> Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">END</span>;<br/>      IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> Print;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  Print<span class=\"br0\">(</span>Create<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> ZigZag.</pre>"}, {"lang": "NetRexx", "loc": 42, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>zigzag<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method zigzag<span class=\"br0\">(</span>msize<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  row = <span class=\"nu0\">1</span><br/>  col = <span class=\"nu0\">1</span><br/>\u00a0<br/>  ziggy = Rexx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> j_ = <span class=\"nu0\">0</span> for msize <span class=\"sy0\">*</span> msize<br/>    ziggy<span class=\"br0\">[</span>row, col<span class=\"br0\">]</span> = j_<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row + col<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> col <span class=\"sy0\">&lt;</span> msize <span class=\"kw3\">then</span> -<br/>        col = col + <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">else</span> row = row + <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">if</span> row <span class=\"sy0\">\\</span>== <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> -<br/>        row = row - <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> row <span class=\"sy0\">&lt;</span> msize <span class=\"kw3\">then</span> -<br/>        row = row + <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">else</span> col = col + <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">if</span> col <span class=\"sy0\">\\</span>== <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> -<br/>        col = col - <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span> j_<br/>\u00a0<br/>  L = <span class=\"br0\">(</span>msize <span class=\"sy0\">*</span> msize - <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me0\">length</span>             <span class=\"coMULTI\">/*for a constant element width.  */</span><br/>  <span class=\"kw1\">loop</span> row = <span class=\"nu0\">1</span> for msize                     <span class=\"coMULTI\">/*show all the matrix's rows.    */</span><br/>    rowOut = <span class=\"st0\">''</span><br/>    <span class=\"kw1\">loop</span> col = <span class=\"nu0\">1</span> for msize<br/>      rowOut = rowOut ziggy<span class=\"br0\">[</span>row, col<span class=\"br0\">]</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> col<br/>    <span class=\"kw1\">say</span> rowOut<br/>    <span class=\"kw3\">end</span> row<br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 36, "block": "<pre class=\"text highlighted_source\">import algorithm, strutils<br/>\u00a0<br/>type Pos = tuple[x, y: int]<br/>\u00a0<br/>template newSeqWith(len: int, init: expr): expr =<br/>  var result {.gensym.} = newSeq[type(init)](len)<br/>  for i in 0 .. &lt;len:<br/>    result[i] = init<br/>  result<br/>\u00a0<br/>proc `$`(m: seq[seq[int]]): string =<br/>  result = \"\"<br/>  for r in m:<br/>    for c in r:<br/>      result.add align($c, 2) &amp; \" \"<br/>    result.add \"\\n\"<br/>\u00a0<br/>proc zigzagMatrix(n): auto =<br/>  result = newSeqWith(n, newSeq[int](n))<br/>\u00a0<br/>  var indices = newSeq[Pos]()<br/>\u00a0<br/>  for x in 0 .. &lt;n:<br/>    for y in 0 .. &lt;n:<br/>      indices.add((x,y))<br/>\u00a0<br/>  sort(indices, proc(a, b: Pos): int =<br/>    result = a.x + a.y - b.x - b.y<br/>    if result == 0: result =<br/>      (if (a.x + a.y) mod 2 == 0: a.y else: -a.y) -<br/>      (if (b.x + b.y) mod 2 == 0: b.y else: -b.y))<br/>\u00a0<br/>  for i, p in indices:<br/>    result[p.x][p.y] = i<br/>\u00a0<br/>echo zigzagMatrix(6)</pre>"}, {"lang": "Objeck", "loc": 41, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> <span class=\"sy0\">:</span> native <span class=\"sy0\">:</span> ZigZag<span class=\"br0\">(</span>size <span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> ~ Int<span class=\"br0\">[</span>,<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>  data <span class=\"sy0\">:=</span> Int<span class=\"sy0\">-&gt;</span><span class=\"kw1\">New</span><span class=\"br0\">[</span>size, size<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  j <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> <span class=\"sy0\">:=</span> size <span class=\"sy0\">*</span> size<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>element <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> element <span class=\"sy0\">&lt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> <span class=\"sy0\">;</span> element <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    data<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> element<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"sy0\">#</span> even stripes<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        j <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>        i<span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        i <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>      <span class=\"sy0\">#</span> ddd stripes<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>        j<span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        j <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  return data<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 19, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> zigzag n <span class=\"sy0\">=</span><br/>  <span class=\"co1\">(* move takes references and modifies them directly *)</span><br/>  <span class=\"kw1\">let</span> move i j <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>      i <span class=\"sy0\">:=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">incr</span> j<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">incr</span> i<br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix n n <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">and</span> x <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> y <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> v <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    a<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> v<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>x <span class=\"sy0\">+</span> <span class=\"sy0\">!</span>y<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      move x y<br/>    <span class=\"kw1\">else</span><br/>      move y x<br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  a</pre>"}, {"lang": "Octave", "loc": 28, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> a <span class=\"sy3\">=</span> zigzag1<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span>n<span class=\"sy5\">;</span><br/>  u <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/repmat.html\"><span class=\"kw6\">repmat</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> n<span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  v <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"sy2\">.*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>j<span class=\"sy1\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  v <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/reshape.html\"><span class=\"kw5\">reshape</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>v<span class=\"sy5\">;</span> v<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>n<span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  a <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/zeros.html\"><span class=\"kw5\">zeros</span></a><span class=\"br0\">(</span>n<span class=\"sy5\">,</span> n<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span>n<br/>    a<span class=\"br0\">(</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span> <span class=\"sy3\">=</span> v<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy1\">+</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    v <span class=\"sy3\">+=</span> u<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> a <span class=\"sy3\">=</span> zigzag2<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  a <span class=\"sy3\">=</span> zigzag1<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  v <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">'</span><span class=\"sy2\">.^</span><span class=\"nu0\">2</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">:</span>n<br/>    a<span class=\"br0\">(</span>n<span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">-</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy4\">:</span>n<span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span> <span class=\"sy3\">-=</span> v<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;</span> zigzag2<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw3\">ans</span> <span class=\"sy3\">=</span><br/>\u00a0<br/>    <span class=\"nu0\">0</span>    <span class=\"nu0\">1</span>    <span class=\"nu0\">5</span>    <span class=\"nu0\">6</span>   <span class=\"nu0\">14</span><br/>    <span class=\"nu0\">2</span>    <span class=\"nu0\">4</span>    <span class=\"nu0\">7</span>   <span class=\"nu0\">13</span>   <span class=\"nu0\">15</span><br/>    <span class=\"nu0\">3</span>    <span class=\"nu0\">8</span>   <span class=\"nu0\">12</span>   <span class=\"nu0\">16</span>   <span class=\"nu0\">21</span><br/>    <span class=\"nu0\">9</span>   <span class=\"nu0\">11</span>   <span class=\"nu0\">17</span>   <span class=\"nu0\">20</span>   <span class=\"nu0\">22</span><br/>   <span class=\"nu0\">10</span>   <span class=\"nu0\">18</span>   <span class=\"nu0\">19</span>   <span class=\"nu0\">23</span>   <span class=\"nu0\">24</span></pre>"}, {"lang": "ooRexx", "loc": 44, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"kw1\">call</span> printArray zigzag<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> printArray zigzag<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> printArray zigzag<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>::routine zigzag<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> size<br/>\u00a0<br/>  data = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>size, size<span class=\"br0\">)</span><br/>  row = <span class=\"nu0\">1</span><br/>  col = <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> element = <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> <span class=\"br0\">(</span>size <span class=\"sy0\">*</span> size<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>      data<span class=\"br0\">[</span>row, col<span class=\"br0\">]</span> = element<br/>      <span class=\"co1\">-- even stripes</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row + col<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>          <span class=\"kw1\">if</span> col <span class=\"sy0\">&lt;</span> size <span class=\"kw3\">then</span> col += <span class=\"nu0\">1</span><br/>          <span class=\"kw3\">else</span> row += <span class=\"nu0\">2</span><br/>          <span class=\"kw1\">if</span> row <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> row -= <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>      <span class=\"co1\">-- odd rows</span><br/>      <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>          <span class=\"kw1\">if</span> row <span class=\"sy0\">&lt;</span> size <span class=\"kw3\">then</span> row += <span class=\"nu0\">1</span><br/>          <span class=\"kw3\">else</span> col += <span class=\"nu0\">2</span><br/>          <span class=\"kw1\">if</span> col <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> col -= <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> data<br/>\u00a0<br/>::routine printArray<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> array<br/>  dimension = array~dimension<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> dimension<br/>      line = <span class=\"st0\">\"|\"</span><br/>      <span class=\"kw1\">loop</span> j = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> dimension<br/>          line = line array<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span>~<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>      line = line <span class=\"st0\">\"|\"</span><br/>      <span class=\"kw1\">say</span> line<br/>   <span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 39, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%%            state          move   success     failure</span><br/>  States = <span class=\"kw1\">unit</span><span class=\"br0\">(</span>right:        <span class=\"br0\">[</span> 1<span class=\"sy0\">#</span> 0  downLeft    downInstead<span class=\"br0\">]</span><br/>                downInstead:  <span class=\"br0\">[</span> 0<span class=\"sy0\">#</span> 1  downLeft    terminate<span class=\"br0\">]</span><br/>                downLeft:     <span class=\"br0\">[</span><span class=\"sy0\">~</span>1<span class=\"sy0\">#</span> 1  downLeft    down<span class=\"br0\">]</span><br/>                down:         <span class=\"br0\">[</span> 0<span class=\"sy0\">#</span> 1  topRight    rightInstead<span class=\"br0\">]</span><br/>                rightInstead: <span class=\"br0\">[</span> 1<span class=\"sy0\">#</span> 0  topRight    terminate<span class=\"br0\">]</span><br/>                topRight:     <span class=\"br0\">[</span> 1<span class=\"sy0\">#~</span>1  topRight    right<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">CreateZigZag</span> N<span class=\"br0\">}</span><br/>     ZZ = <span class=\"br0\">{</span>Create2DTuple N N<span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"co1\">%% recursively walk through 2D tuple and set values</span><br/>     <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Walk</span> Pos=X<span class=\"sy0\">#</span>Y Count State<span class=\"br0\">}</span><br/>        <span class=\"br0\">[</span>Dir Success Failure<span class=\"br0\">]</span> = States<span class=\"sy0\">.</span>State<br/>        NextPos = <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>zip Pos Dir Number<span class=\"sy0\">.</span><span class=\"st0\">'+'</span><span class=\"br0\">}</span><br/>        Valid = <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>all NextPos <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> C<span class=\"br0\">}</span> C <span class=\"sy0\">&gt;</span> 0 <span class=\"kw1\">andthen</span> C <span class=\"sy0\">=&lt;</span> N <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>        NewPos = <span class=\"kw1\">if</span> Valid <span class=\"kw1\">then</span> NextPos <span class=\"kw1\">else</span> Pos <span class=\"kw1\">end</span><br/>        NewCount = <span class=\"kw1\">if</span> Valid <span class=\"kw1\">then</span> Count <span class=\"sy0\">+</span> 1 <span class=\"kw1\">else</span> Count <span class=\"kw1\">end</span><br/>        NewState = <span class=\"kw1\">if</span> Valid <span class=\"kw1\">then</span> Success <span class=\"kw1\">else</span> Failure <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">in</span><br/>        ZZ<span class=\"sy0\">.</span>Y<span class=\"sy0\">.</span>X = Count<br/>        <span class=\"kw1\">if</span> NewState <span class=\"sy0\">\\=</span> terminate <span class=\"kw1\">then</span><br/>           <span class=\"br0\">{</span>Walk NewPos NewCount NewState<span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Walk 1<span class=\"sy0\">#</span>1 0 right<span class=\"br0\">}</span><br/>     ZZ<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Create2DTuple</span> W H<span class=\"br0\">}</span><br/>     T = <span class=\"br0\">{</span>MakeTuple <span class=\"kw1\">unit</span> H<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>forAll T <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>MakeTuple <span class=\"kw1\">unit</span> W<span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>     T<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Inspect <span class=\"br0\">{</span>CreateZigZag 5<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 21, "block": "<pre class=\"parigp highlighted_source\">zz<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>M<span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>d<span class=\"sy0\">=-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>start<span class=\"sy0\">,</span>end<span class=\"sy0\">=</span>n<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>ct<span class=\"sy0\">--,</span><br/>\t\tM<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>j<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>start<span class=\"sy0\">;</span><br/>\t\tM<span class=\"br0\">[</span>n<span class=\"sy0\">-</span>i<span class=\"sy0\">,</span>n<span class=\"sy0\">-</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>end<span class=\"sy0\">;</span><br/>\t\tstart<span class=\"sy0\">++;</span><br/>\t\tend<span class=\"sy0\">--;</span><br/>\t\ti<span class=\"sy0\">+=</span>d<span class=\"sy0\">;</span><br/>\t\tj<span class=\"sy0\">-=</span>d<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><br/>\t\t\ti<span class=\"sy0\">++;</span><br/>\t\t\td<span class=\"sy0\">=-</span>d<br/>\t\t<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>j<span class=\"sy0\">&lt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><br/>\t\t\t\tj<span class=\"sy0\">++;</span><br/>\t\t\t\td<span class=\"sy0\">=-</span>d<br/>\t\t\t<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>start<span class=\"sy0\">&gt;</span>end<span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 67, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> zigzag<span class=\"br0\">(</span> input<span class=\"sy1\">,</span> output <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  size <span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  zzarray<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">size</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">size</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  element<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  direction<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  width<span class=\"sy1\">,</span> n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  direction <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> element <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>size<span class=\"sy3\">*</span>size<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    zzarray<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> element<span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> direction<span class=\"sy1\">;</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">-</span> direction<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        direction <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span>direction<span class=\"sy1\">;</span><br/>        i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j &gt; size<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">begin</span><br/>          j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> size<span class=\"sy1\">;</span><br/>          i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i &gt; size<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        direction <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span>direction<span class=\"sy1\">;</span><br/>        i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> size<span class=\"sy1\">;</span><br/>        j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        direction <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span>direction<span class=\"sy1\">;</span><br/>        j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i &gt; size<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">begin</span><br/>          j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>          i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> size<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j &gt; size<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        direction <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span>direction<span class=\"sy1\">;</span><br/>        j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> size<span class=\"sy1\">;</span><br/>        i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  width <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>  n     <span class=\"sy1\">:</span><span class=\"sy3\">=</span> size<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    width <span class=\"sy1\">:</span><span class=\"sy3\">=</span> width <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    n     <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> size <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> size <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>zzarray<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span>width<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 25, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> <span class=\"nu0\">5.010</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> zig_zag <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span>          <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max_number</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@matrix</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$number</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"sy0\">--</span><span class=\"re0\">$n</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><br/>            <span class=\"re0\">$j</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><br/>            <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$j</span><br/>            <span class=\"sy0\">:</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$j</span><br/>          <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$matrix</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"re0\">$i</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$number</span><span class=\"sy0\">++;</span><br/>            <span class=\"co1\">#next if $j == $n;</span><br/>            <span class=\"re0\">$matrix</span><span class=\"br0\">[</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"re0\">$i</span> <span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span> <span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"re0\">$i</span> <span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$max_number</span> <span class=\"sy0\">-</span> <span class=\"re0\">$number</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@matrix</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@zig_zag_matrix</span> <span class=\"sy0\">=</span> zig_zag<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>say <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@zig_zag_matrix</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 63, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Turtle <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@dv</span> <span class=\"sy0\">=</span>  <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$points</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"co1\"># 'compass' points of neighbors on grid: north=0, northeast=1, east=2, etc.</span><br/>\u00a0<br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">loc</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">dir</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">%</span><span class=\"sy0\">.</span><span class=\"me1\">world</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">maxegg</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">-</span><span class=\"kw1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">-</span>y<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> turn<span class=\"sy0\">-</span>left <span class=\"br0\">(</span><span class=\"re0\">$angle</span> <span class=\"sy0\">=</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$!dir</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">/</span> <span class=\"nu0\">45</span><span class=\"sy0\">;</span> <span class=\"re0\">$!dir</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$points</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> turn<span class=\"sy0\">-</span>right<span class=\"br0\">(</span><span class=\"re0\">$angle</span> <span class=\"sy0\">=</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$!dir</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">/</span> <span class=\"nu0\">45</span><span class=\"sy0\">;</span> <span class=\"re0\">$!dir</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$points</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> lay<span class=\"sy0\">-</span>egg<span class=\"br0\">(</span><span class=\"re0\">$egg</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">%!world</span><span class=\"br0\">{</span><span class=\"sy0\">~</span><span class=\"re0\">@!loc</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$egg</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$!maxegg</span> <span class=\"kw3\">max</span><span class=\"sy0\">=</span> <span class=\"re0\">$egg</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$!range</span><span class=\"sy0\">-</span><span class=\"kw1\">x</span> minmax<span class=\"sy0\">=</span> <span class=\"re0\">@!loc</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$!range</span><span class=\"sy0\">-</span>y minmax<span class=\"sy0\">=</span> <span class=\"re0\">@!loc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> look<span class=\"br0\">(</span><span class=\"re0\">$ahead</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$there</span> <span class=\"sy0\">=</span> <span class=\"re0\">@!loc</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"re0\">@dv</span><span class=\"br0\">[</span><span class=\"re0\">$!dir</span><span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00bb <span class=\"re0\">$ahead</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">%!world</span><span class=\"br0\">{</span><span class=\"sy0\">~</span><span class=\"re0\">$there</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> forward<span class=\"br0\">(</span><span class=\"re0\">$ahead</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$there</span> <span class=\"sy0\">=</span> <span class=\"re0\">@!loc</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"re0\">@dv</span><span class=\"br0\">[</span><span class=\"re0\">$!dir</span><span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00bb <span class=\"re0\">$ahead</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@!loc</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$there</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> showmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$form</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"%{$!maxegg.chars}s\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$endx</span> <span class=\"sy0\">=</span> <span class=\"re0\">$!range</span><span class=\"sy0\">-</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">$!range</span><span class=\"sy0\">-</span>y<span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"kw1\">X</span> <span class=\"re0\">$!range</span><span class=\"sy0\">-</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">print</span> <span class=\"br0\">(</span><span class=\"re0\">%!world</span><span class=\"br0\">{</span><span class=\"st0\">\"$x $y\"</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"re0\">$form</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">print</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$endx</span> <span class=\"sy0\">??</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span>Int <span class=\"re0\">$size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> Turtle<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>dir <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$counter</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$size</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$run</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$run</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">lay</span><span class=\"sy0\">-</span>egg<span class=\"br0\">(</span><span class=\"re0\">$counter</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$yaw</span> <span class=\"sy0\">=</span> <span class=\"re0\">$run</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">??</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">!!</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">turn</span><span class=\"sy0\">-</span>right<span class=\"br0\">(</span><span class=\"re0\">$yaw</span> <span class=\"sy0\">*</span> <span class=\"nu0\">135</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"sy0\">;</span> <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">turn</span><span class=\"sy0\">-</span>right<span class=\"br0\">(</span><span class=\"re0\">$yaw</span> <span class=\"sy0\">*</span> <span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">$size</span> <span class=\"sy0\">...</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$run</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$run</span> <span class=\"sy0\">-&gt;</span> $ <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">lay</span><span class=\"sy0\">-</span>egg<span class=\"br0\">(</span><span class=\"re0\">$counter</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">turn</span><span class=\"sy0\">-</span>left<span class=\"br0\">(</span><span class=\"nu0\">180</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$yaw</span> <span class=\"sy0\">=</span> <span class=\"re0\">$run</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">??</span> <span class=\"nu0\">1</span> <span class=\"sy0\">!!</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">turn</span><span class=\"sy0\">-</span>right<span class=\"br0\">(</span><span class=\"re0\">$yaw</span> <span class=\"sy0\">*</span> <span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"sy0\">;</span> <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">turn</span><span class=\"sy0\">-</span>left<span class=\"br0\">(</span><span class=\"re0\">$yaw</span> <span class=\"sy0\">*</span> <span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">showmap</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 27, "block": "<pre class=\"text highlighted_source\">integer n = 9<br/>integer zstart = 0, zend = n*n-1<br/>--integer zstart = 1, zend = n*n<br/>string fmt = sprintf(\"%%%dd\",length(sprintf(\"%d\",zend)))<br/>sequence m = repeat(repeat(\"??\",n),n)<br/>integer x = 1, y = 1, d = -1<br/>while 1 do<br/>    m[x][y] = sprintf(fmt,zstart)<br/>    if zstart=zend then exit end if<br/>    zstart += 1<br/>    m[n-x+1][n-y+1] = sprintf(fmt,zend)<br/>    zend -= 1<br/>    x += d<br/>    y -= d<br/>    if x&lt;1 then<br/>        x += 1<br/>        d = -d<br/>    elsif y&lt;1 then<br/>        y += 1<br/>        d = -d<br/>    end if<br/>end while<br/>\u00a0<br/>for i=1 to n do<br/>    m[i] = join(m[i])<br/>end for<br/>puts(1,join(m,\"\\n\"))</pre>"}, {"lang": "PHP", "loc": 32, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> ZigZagMatrix<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$matrix</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$num</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$matrix</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$e</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$e</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$num</span><span class=\"sy0\">*</span><span class=\"re0\">$num</span><span class=\"sy0\">;</span> <span class=\"re0\">$e</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$matrix</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$e</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$j</span><span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <br/>\t\t\t\t<span class=\"re0\">$i</span> <span class=\"sy0\">--;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <br/>\t\t\t\t<span class=\"re0\">$i</span><span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$j</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$j</span> <span class=\"sy0\">--;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$matrix</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 20, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(de zigzag (N)<br/>   (prog1 (grid N N)<br/>      (let (D '(north west  south east  .)  E '(north east .)  This 'a1)<br/>         (for Val (* N N)<br/>            (=: val Val)<br/>            (setq This<br/>               (or<br/>                  ((cadr D) ((car D) This))<br/>                  (prog<br/>                     (setq D (cddr D))<br/>                     ((pop 'E) This) )<br/>                  ((pop 'E) This) ) ) ) ) ) )<br/>\u00a0<br/>(mapc<br/>   '((L)<br/>      (for This L (prin (align 3 (: val))))<br/>      (prinl) )<br/>   (zigzag 5) )</pre>"}, {"lang": "PL/I", "loc": 51, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* Fill a square matrix with the values 0 to N**2-1,     */</span><br/><span class=\"coMULTI\">/* in a zig-zag fashion.                                 */</span><br/><span class=\"coMULTI\">/* N is the length of one side of the square.            */</span><br/><span class=\"coMULTI\">/* Written 22 February 2010.                             */</span><br/>\u00a0<br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Please type the size of the matrix:'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">get</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> A<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> inc<span class=\"sy0\">,</span> q<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">on</span> <span class=\"kw1\">subrg</span> <span class=\"kw1\">snap</span> <span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">do</span>  i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"sy0\">,*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">stop</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   A <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   inc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   i<span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>loop<span class=\"sy0\">:</span><br/>   <span class=\"kw1\">do</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> q <span class=\"sy0\">=</span> n<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">leave</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> j <span class=\"sy0\">=</span> n <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw1\">iand</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"coMULTI\">/* odd-sided matrix */</span><br/>            <span class=\"kw1\">do</span><span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> inc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>inc<span class=\"sy0\">;</span> iterate loop<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">else</span>  <span class=\"coMULTI\">/* an even-sided matrix */</span><br/>            <span class=\"kw1\">do</span><span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> inc<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> inc<span class=\"sy0\">;</span> iterate loop<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> inc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">if</span> i<span class=\"sy0\">+</span>inc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span> inc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>inc<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span> iterate loop<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> inc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">if</span> i<span class=\"sy0\">+</span>inc <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span> inc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>inc<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span> iterate loop<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> inc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">if</span> j<span class=\"sy0\">-</span>inc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span> inc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>inc<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span> iterate loop<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> inc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">if</span> j <span class=\"sy0\">-</span> inc <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span> inc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>inc<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span> iterate loop<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> inc<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> inc<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"coMULTI\">/* Display the square. */</span><br/>   <span class=\"kw1\">do</span>  i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"sy0\">,*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Plain TeX", "loc": 22, "block": "<pre class=\"text highlighted_source\">\\long\\def\\antefi#1#2\\fi{#2\\fi#1}<br/>\\def\\fornum#1=#2to#3(#4){%<br/>\t\\edef#1{\\number\\numexpr#2}\\edef\\fornumtemp{\\noexpand\\fornumi\\expandafter\\noexpand\\csname fornum\\string#1\\endcsname<br/>\t\t{\\number\\numexpr#3}{\\ifnum\\numexpr#4&lt;0 &lt;\\else&gt;\\fi}{\\number\\numexpr#4}\\noexpand#1}\\fornumtemp<br/>}<br/>\\long\\def\\fornumi#1#2#3#4#5#6{\\def#1{\\unless\\ifnum#5#3#2\\relax\\antefi{#6\\edef#5{\\number\\numexpr#5+(#4)\\relax}#1}\\fi}#1}<br/>\\def\\elem(#1,#2){\\numexpr(#1+#2)*(#1+#2-1)/2-(\\ifodd\\numexpr#1+#2\\relax#1\\else#2\\fi)\\relax}<br/>\\def\\zzmat#1{%<br/>\t\\noindent% quit vertical mode<br/>\t\\fornum\\yy=1to#1(+1){%<br/>\t\t\\fornum\\xx=1to#1(+1){%<br/>\t\t\t\\ifnum\\numexpr\\xx+\\yy\\relax&lt;\\numexpr#1+2\\relax<br/>\t\t\t\t\\hbox to 2em{\\hfil\\number\\elem(\\xx,\\yy)}%<br/>\t\t\t\\else<br/>\t\t\t\t\\hbox to 2em{\\hfil\\number\\numexpr#1*#1-1-\\elem(#1+1-\\xx,#1+1-\\yy)\\relax}%<br/>\t\t\t\\fi<br/>\t\t}%<br/>\t\t\\par\\noindent% next line + quit vertical mode<br/>\t}\\par<br/>}<br/>\\zzmat{5}<br/>\\bye</pre>"}, {"lang": "PostScript", "loc": 55, "block": "<pre class=\"text highlighted_source\">%!PS<br/>%%BoundingBox: 0 0 300 200<br/>/size 9 def\u00a0% defines row * column (9*9 -&gt; 81 numbers,<br/>           \u00a0% from 0 to 80)<br/>/itoa { 2 string cvs } bind def<br/>% visual bounding box...<br/>% 0 0 moveto 300 0 lineto 300 200 lineto 0 200 lineto<br/>% closepath stroke<br/>20 150 translate<br/>% it can be easily enhanced to support more columns and<br/>% rows. This limit is put here just to avoid more than 2<br/>% digits, mainly because of formatting<br/>size size mul 99 le {<br/>   /Helvetica findfont 14 scalefont setfont<br/>   /ulimit size size mul def<br/>   /sizem1 size 1 sub def<br/>  \u00a0% prepare the number list<br/>   0 ulimit 1 sub { dup 1 add } repeat<br/>   ulimit array astore<br/>   /di -1 def /dj 1 def<br/>   /ri 1 def /rj 0 def /pus true def<br/>   0 0 moveto<br/>   /i 0 def /j 0 def<br/>   { \u00a0% can be rewritten a lot better\u00a0:)<br/>      0.8 setgray i 30 mul j 15 mul neg lineto stroke<br/>      0 setgray i 30 mul j 15 mul neg moveto itoa show<br/>      i 30 mul j 15 mul neg moveto<br/>      pus {<br/>         i ri add size ge {<br/>             /ri 0 def /rj 1 def<br/>         } if<br/>         j rj add size ge {<br/>             /ri 1 def /rj 0 def<br/>         } if<br/>         /pus false def<br/>         /i i ri add def<br/>         /j j rj add def<br/>         /ri rj /rj ri def def<br/>      } {<br/>          i di add dup    0 le<br/>                  exch sizem1 ge or<br/>          j dj add dup    0 le<br/>                  exch sizem1 ge or<br/>             or {<br/>                /pus true def<br/>                /i i di add def /j j dj add def<br/>                /di di neg def /dj dj neg def<br/>          } {<br/>                /i i di add def /j j dj add def<br/>          } ifelse<br/>      } ifelse<br/>   } forall<br/>   stroke showpage<br/>} if<br/>%%EOF</pre>"}, {"lang": "PowerShell", "loc": 39, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> zigzag<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$zigzag</span><span class=\"sy0\">=</span><span class=\"kw1\">New-Object</span> <span class=\"st0\">'Object[,]'</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><br/>    <span class=\"re0\">$nodd</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">1</span><br/>    <span class=\"re0\">$nm1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>;<br/>    <span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>;<br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span> <span class=\"re0\">$k</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$zigzag</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$k</span><br/>        <span class=\"re0\">$iodd</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">1</span><br/>        <span class=\"re0\">$jodd</span> <span class=\"sy0\">=</span> <span class=\"re0\">$j</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$j</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$nm1</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> <span class=\"re0\">$iodd</span> <span class=\"kw4\">-ne</span> <span class=\"re0\">$nodd</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$i</span><span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">elseif</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$nm1</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> <span class=\"re0\">$jodd</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$nodd</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$j</span><span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">elseif</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> <span class=\"kw4\">-not</span> <span class=\"re0\">$jodd</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$j</span><span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">elseif</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$j</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$iodd</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$i</span><span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">elseif</span><span class=\"br0\">(</span> <span class=\"re0\">$iodd</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$jodd</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$i</span><span class=\"sy0\">--</span><br/>            <span class=\"re0\">$j</span><span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$i</span><span class=\"sy0\">++</span><br/>            <span class=\"re0\">$j</span><span class=\"sy0\">--</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"sy0\">,</span><span class=\"re0\">$zigzag</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> displayZigZag<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> zigzag <span class=\"re0\">$n</span><br/>    <span class=\"nu0\">0</span>..<span class=\"re0\">$n</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$b</span><span class=\"sy0\">=</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>        <span class=\"re0\">$pad</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.ToString<span class=\"br0\">(</span><span class=\"br0\">)</span>.Length<br/>        <span class=\"st0\">\"$(0..$n | ForEach-Object {<br/>            \"</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$pad</span><span class=\"br0\">}</span><span class=\"st0\">\" -f $a[$b,$_]<br/>        } )\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 78, "block": "<pre class=\"prolog highlighted_source\">zig_zag<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tzig_zag<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% compute zig_zag for a matrix of Lig lines of Col columns</span><br/>zig_zag<span class=\"br0\">(</span>Lig<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>M<span class=\"sy4\">,</span> Lig<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>init<span class=\"br0\">(</span>Col<span class=\"br0\">)</span><span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfill<span class=\"br0\">(</span>M<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> up<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% display the matrix</span><br/>\tmaplist<span class=\"br0\">(</span>print_line<span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>fill<span class=\"br0\">(</span>M<span class=\"sy4\">,</span> Cur<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> _<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tL <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tC <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> NC <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> M<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> Line<span class=\"sy4\">,</span> Cur<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>fill<span class=\"br0\">(</span>M<span class=\"sy4\">,</span> Cur<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> Sens<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnth0<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> M<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> Line<span class=\"sy4\">,</span> Cur<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tCur1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Cur <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tcompute_next<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> Sens<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"sy4\">,</span> Sens1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfill<span class=\"br0\">(</span>M<span class=\"sy4\">,</span> Cur1<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> C1<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> Sens1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>init<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% compute_next</span><br/><span class=\"co1\">% arg1\u00a0: Number of lnes of the matrix</span><br/><span class=\"co1\">% arg2\u00a0: number of columns of the matrix</span><br/><span class=\"co1\">% arg3\u00a0: current line</span><br/><span class=\"co1\">% arg4\u00a0: current column</span><br/><span class=\"co1\">% arg5\u00a0: current direction of movement</span><br/><span class=\"co1\">% arg6\u00a0: nect line</span><br/><span class=\"co1\">% arg7\u00a0: next column</span><br/><span class=\"co1\">% arg8\u00a0: next direction of movement</span><br/>compute_next<span class=\"br0\">(</span>_NL<span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> up<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Col1<span class=\"sy4\">,</span> down<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tCol <span class=\"sy6\">&lt;</span> NC <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tCol1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span>_NL<span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> up<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> down<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tCol <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> NC <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> _NC<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> down<span class=\"sy4\">,</span> Lig1<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> up<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tLig <span class=\"sy6\">&lt;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tLig1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> _NC<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> down<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> up<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tLig <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> _NC<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> down<span class=\"sy4\">,</span> Lig1<span class=\"sy4\">,</span> Col1<span class=\"sy4\">,</span> down<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tLig <span class=\"sy6\">&lt;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tLig1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tCol1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> _NC<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> down<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col1<span class=\"sy4\">,</span> up<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tLig <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tCol1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span>_NL<span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> up<span class=\"sy4\">,</span> Lig1<span class=\"sy4\">,</span> Col1<span class=\"sy4\">,</span> up<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tCol <span class=\"sy6\">&lt;</span> NC <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tLig1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tCol1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Col<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute_next<span class=\"br0\">(</span>_NL<span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> Lig<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> up<span class=\"sy4\">,</span> Lig1<span class=\"sy4\">,</span> Col<span class=\"sy4\">,</span> down<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tCol <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> NC <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tLig1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Lig <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>print_line<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>print_val<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/>print_val<span class=\"br0\">(</span>V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\twritef<span class=\"br0\">(</span><span class=\"st_h\">'%3r '</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 53, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> zigZag<span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, v, x, y<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span>  size <span class=\"sy0\">*</span> size  <span class=\"co1\">;loop once for each element</span><br/>    a<span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> v      <span class=\"co1\">;assign the next index</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>       <span class=\"co1\">;even diagonal (zero based count)</span><br/>      <span class=\"kw1\">If</span> x <span class=\"sy0\">&lt;</span> size            <span class=\"co1\">;while inside the square</span><br/>        <span class=\"kw1\">If</span> y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>             <span class=\"co1\">;move right-up</span><br/>          y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">EndIf</span> <br/>        x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Else</span><br/>        y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>                <span class=\"co1\">;on the edge increment y, but not x until diagonal is odd</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Else</span>                     <span class=\"co1\">;odd diagonal (zero based count)</span><br/>      <span class=\"kw1\">If</span> y <span class=\"sy0\">&lt;</span> size            <span class=\"co1\">;while inside the square</span><br/>        <span class=\"kw1\">If</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>             <span class=\"co1\">;move left-down</span><br/>          x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">EndIf</span>  <br/>        y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Else</span><br/>        x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>                <span class=\"co1\">;on the edge increment x, but not y until diagonal is even</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">EndIf</span> <br/>    v <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span> <br/>\u00a0<br/>\u00a0<br/>  <span class=\"co1\">;generate and show printout</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Zig-zag matrix of size \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"sy0\">+</span> #CRLF$<span class=\"br0\">)</span><br/>  maxDigitCount <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>size <span class=\"sy0\">*</span> size<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <br/>    <span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span>, maxDigitCount, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> <br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/>  zigZag<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  zigZag<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 13, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> zigzag<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    indexorder <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    key <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>: <span class=\"br0\">(</span>x+y<span class=\"sy0\">,</span> -y <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x+y<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span> <span class=\"kw1\">else</span> y<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">{</span>index: n <span class=\"kw1\">for</span> n<span class=\"sy0\">,</span>index <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>indexorder<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">def</span> printzz<span class=\"br0\">(</span>myarray<span class=\"br0\">)</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>myarray<span class=\"br0\">)</span>** <span class=\"nu0\">0.5</span> +<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">print</span> <span class=\"st0\">\"%2i\"</span>\u00a0% myarray<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"kw1\">print</span><br/>\u00a0<br/>printzz<span class=\"br0\">(</span>zigzag<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rascal", "loc": 3, "block": "<pre class=\"text highlighted_source\">0 (0,0), 1 (0,1), 3 (0,2)<br/>2 (1,0), 4 (1,1), 6 (1,2)<br/>5 (2,0), 7 (2,1), 8 (2,2)</pre>"}, {"lang": "Qi", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define odd? A -&gt; (= 1 (MOD A 2)))<br/>(define even? A -&gt; (= 0 (MOD A 2)))<br/>\u00a0<br/>(define zigzag-val<br/>  0 0 N -&gt; 0<br/>\u00a0<br/>  X 0 N -&gt; (1+ (zigzag-val (1- X) 0 N)) where (odd? X)<br/>  X 0 N -&gt; (1+ (zigzag-val (1- X) 1 N)) <br/>\u00a0<br/>  0 Y N -&gt; (1+ (zigzag-val 1 (1- Y) N)) where (odd? Y)<br/>  0 Y N -&gt; (1+ (zigzag-val 0 (1- Y) N))<br/>\u00a0<br/>  X Y N -&gt; (1+ (zigzag-val (MAX 0 (1- X)) (MIN (1- N) (1+ Y)) N)) where (even? (+ X Y))<br/>  X Y N -&gt; (1+ (zigzag-val (MIN (1- N) (1+ X)) (MAX 0 (1- Y)) N)))<br/>\u00a0<br/>(define range<br/>  E E -&gt; []<br/>  S E -&gt; [S|(range (1+ S) E)])<br/>\u00a0<br/>(define zigzag<br/>  N -&gt; (map (/. Y <br/>                (map (/. X <br/>                         (zigzag-val X Y N)) <br/>                     (range 0 N)))<br/>            (range 0 N)))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 25, "block": "<pre class=\"text highlighted_source\">zigzag &lt;- function(size)<br/>{<br/>   digits &lt;- seq_len(size^2) - 1<br/>   mat &lt;- matrix(0, nrow = size, ncol=size)<br/>   i &lt;- 1<br/>   j &lt;- 1<br/>   for(element in digits)<br/>   {<br/>      mat[i,j] &lt;- element<br/>      if((i + j)\u00a0%% 2 == 0)<br/>      {<br/>         # Even stripes<br/>         if(j &lt; size) j &lt;- j + 1 else i &lt;- i + 2<br/>         if(i &gt; 1) i &lt;- i - 1<br/>      } else<br/>      {<br/>         # Odd stripes<br/>         if(i &lt; size) i &lt;- i + 1 else j &lt;- j + 2<br/>         if(j &gt; 1) j &lt;- j - 1<br/>      }<br/>   }<br/>   mat<br/>}<br/>\u00a0<br/>zigzag(5)</pre>"}, {"lang": "Racket", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define/match (compare i j)<br/>  [((list x y) (list a b)) (or (&lt; x a) (and (= x a) (&lt; y b)))])<br/>\u00a0<br/>(define/match (key i)<br/>  [((list x y)) (list (+ x y) (if (even? (+ x y)) (- y) y))])<br/>\u00a0<br/>(define (zigzag-ht n)<br/>  (define indexorder<br/>    (sort (for*/list ([x n] [y n]) (list x y))<br/>          compare #:key key))<br/>  (for/hash ([(n i) (in-indexed indexorder)]) (values n i)))<br/>\u00a0<br/>(define (zigzag n)<br/>  (define ht (zigzag-ht n))<br/>  (for/list ([x n]) <br/>    (for/list ([y n])<br/>      (hash-ref ht (list x y)))))<br/>\u00a0<br/>(zigzag 4)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 23, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  produces and displays a    zig\u2500zag  matrix   (a square array).          */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n start inc <span class=\"sy0\">.</span>                          <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>     n==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>     n==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>     n=<span class=\"nu0\">5</span>          <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> start==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> start==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> start=<span class=\"nu0\">0</span>          <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span>   inc==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>   inc==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>   inc=<span class=\"nu0\">1</span>          <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>row=<span class=\"nu0\">1</span>;     col=<span class=\"nu0\">1</span>                                 <span class=\"coMULTI\">/*start with the  1st row,  1st column.*/</span><br/>size=n<span class=\"sy0\">**</span><span class=\"nu0\">2</span>                                        <span class=\"coMULTI\">/*the size of array.                   */</span><br/>           <span class=\"kw1\">do</span> j=start  <span class=\"kw2\">by</span> inc  <span class=\"kw2\">for</span> size;    @<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col=j<br/>           <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row+col<span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">if</span> col<span class=\"sy0\">&lt;</span>n    <span class=\"kw3\">then</span> col=col+<span class=\"nu0\">1</span>;  <span class=\"kw3\">else</span> row=row+<span class=\"nu0\">2</span><br/>                                         <span class=\"kw1\">if</span> row<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> row=row-<span class=\"nu0\">1</span><br/>                                    <span class=\"kw3\">end</span><br/>                               <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">if</span> row<span class=\"sy0\">&lt;</span>n    <span class=\"kw3\">then</span> row=row+<span class=\"nu0\">1</span>;  <span class=\"kw3\">else</span> col=col+<span class=\"nu0\">2</span><br/>                                         <span class=\"kw1\">if</span> col<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> col=col-<span class=\"nu0\">1</span><br/>                                    <span class=\"kw3\">end</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                           <span class=\"coMULTI\">/* [\u2191]     //    is REXX  \u00f7  remainder.*/</span><br/>\u00a0<br/>w=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>start<span class=\"br0\">)</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>start + size<span class=\"sy0\">*</span>inc<span class=\"br0\">)</span> <span class=\"br0\">)</span>  <span class=\"coMULTI\">/*maximum width of any matrix element. */</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span>      r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n \u00a0;   _=  <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>1, w<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*show all the rows of the matrix.     */</span><br/>       <span class=\"kw1\">do</span> c=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> n-<span class=\"nu0\">1</span>;   _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c, w<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*build a line for the output for a row*/</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                               <span class=\"coMULTI\">/* [\u2191]  matrix elements are aligned.   */</span><br/>  <span class=\"kw1\">say</span> _                                          <span class=\"coMULTI\">/*show the matrix row just constructed.*/</span><br/>  <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*r*/</span>                               <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 70, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project  Zig-zag matrix<br/>\u00a0<br/>load \"guilib.ring\"<br/>load \"stdlib.ring\"<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                  setwindowtitle(\"Zig-zag matrix\")<br/>                  setgeometry(100,100,600,400)<br/>                  n = 5<br/>                  a = newlist(n,n)<br/>                  zigzag = newlist(n,n)<br/>                  for j = 1 to n<br/>                       for i = 1 to n <br/>                            a[j][i] = 0<br/>                       next<br/>                  next<br/>                  i = 1<br/>                  j = 1<br/>                  k = 1<br/>                  while k &lt; n * n <br/>                          a[j][i] = k<br/>                          k = k + 1<br/>                          if i = n <br/>                             j = j + 1<br/>                             a[j][i] = k<br/>                             k = k + 1<br/>                             di = -1<br/>                             dj = 1<br/>                          ok<br/>                          if j = 1 <br/>                             i = i + 1<br/>                             a[j][i] = k<br/>                             k = k + 1<br/>                             di = -1<br/>                             dj = 1<br/>                          ok<br/>                          if j = n <br/>                             i = i + 1<br/>                             a[j][i] = k<br/>                             k = k + 1<br/>                             di = 1<br/>                             dj = -1<br/>                          ok<br/>                          if i = 1 <br/>                             j = j + 1<br/>                             a[j][i] = k<br/>                             k = k + 1<br/>                             di = 1<br/>                             dj = -1<br/>                          ok<br/>                          i = i + di<br/>                          j = j + dj<br/>                  end<br/>                  for p = 1 to n<br/>                       for m = 1 to n<br/>                            zigzag[p][m] = new qpushbutton(win1) {<br/>                                                  x = 150+m*40<br/>                                                  y = 30 + p*40<br/>                                                  setgeometry(x,y,40,40)<br/>                                                  settext(string(a[p][m]))<br/>                                                  }<br/>                       next<br/>                  next  <br/>        show()<br/>        }<br/>        exec()<br/>        }<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> zigzag<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>seq=<span class=\"sy0\">*</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span>seq<span class=\"br0\">)</span><br/>    .<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x,y<span class=\"sy0\">|</span> <span class=\"br0\">[</span>x<span class=\"sy0\">+</span>y, <span class=\"br0\">(</span>x<span class=\"sy0\">+</span>y<span class=\"br0\">)</span>.<span class=\"me1\">even</span>?\u00a0? y\u00a0: <span class=\"sy0\">-</span>y<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    .<span class=\"me1\">each_with_index</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:last<span class=\"br0\">)</span>.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> print_matrix<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"kw3\">format</span> = <span class=\"st0\">\"%#{m.flatten.max.to_s.size}d \"</span> <span class=\"sy0\">*</span> m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>  <span class=\"kw3\">puts</span> m.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> <span class=\"kw3\">format</span> <span class=\"sy0\">%</span> row<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>print_matrix zigzag<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 19, "block": "<pre class=\"scala highlighted_source\">  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> zigzag<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> l <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">(</span>i<span class=\"sy0\">%</span>n, i/n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lSorted <span class=\"sy0\">=</span> l.<span class=\"me1\">sortWith</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>, <span class=\"br0\">(</span>u,v<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x+y <span class=\"sy0\">==</span> u+v<span class=\"br0\">)</span> <br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x+y<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> x<span class=\"sy0\">&lt;</span>u <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> y<span class=\"sy0\">&lt;</span>v <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> x+y <span class=\"sy0\">&lt;</span> u+v <br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> res <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>n, n<span class=\"br0\">)</span><br/>    lSorted.<span class=\"me1\">zipWithIndex</span> foreach <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> res<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>    <span class=\"br0\">}</span><br/>    res<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  zigzag<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">{</span><br/>    ar <span class=\"sy0\">=&gt;</span> ar.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%3d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 19, "block": "<pre class=\"text highlighted_source\">function a = zigzag3(n)<br/>  a = zeros(n, n)<br/>  for k=1:n<br/>    j = modulo(k, 2)<br/>    d = (2*j-1)*(n-1)<br/>    m = (n-1)*(k-1)<br/>    a(k+(1-j)*m:d:k+j*m) = k*(k-1)/2:k*(k+1)/2-1<br/>    a(n*(n+1-k)+(1-j)*m:d:n*(n+1-k)+j*m) = n*n-k*(k+1)/2:n*n-k*(k-1)/2-1<br/>  end<br/>endfunction<br/>\u00a0<br/>--&gt;zigzag3(5)<br/> ans  =<br/>\u00a0<br/>    0.     1.     5.     6.     14.  <br/>    2.     4.     7.     13.    15.  <br/>    3.     8.     12.    16.    21.  <br/>    9.     11.    17.    20.    22.  <br/>    10.    18.    19.    23.    24.</pre>"}, {"lang": "Seed7", "loc": 45, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: matrix is array array integer;<br/>\u00a0<br/>const func matrix: zigzag (in integer: size) is func<br/>  result<br/>    var matrix: s is matrix.value;<br/>  local<br/>    var integer: i is 1;<br/>    var integer: j is 1;<br/>    var integer: d is -1;<br/>    var integer: max is 0;<br/>    var integer: n is 0;<br/>  begin<br/>    s\u00a0:= size times size times 0;<br/>    max\u00a0:= size ** 2;<br/>    for n range 1 to max div 2 + 1 do<br/>      s[i][j]\u00a0:= n;<br/>      s[size - i + 1][size - j + 1]\u00a0:= max - n + 1;<br/>      i +:= d;<br/>      j -:= d;<br/>      if i &lt; 1 then<br/>        incr(i);<br/>        d\u00a0:= -d;<br/>      elsif j &lt; 1 then<br/>        incr(j);<br/>        d\u00a0:= -d;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var matrix: s is matrix.value;<br/>    var integer: i is 0;<br/>    var integer: num is 0;<br/>  begin<br/>    s\u00a0:= zigzag(7);<br/>    for i range 1 to length(s) do<br/>      for num range s[i] do<br/>        write(num lpad 4);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 21, "block": "<pre class=\"ruby highlighted_source\">func zig_zag<span class=\"br0\">(</span>w, h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    var r = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    var n = <span class=\"nu0\">0</span><br/>\u00a0<br/>    h.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>e<span class=\"sy0\">|</span><br/>        w.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>f<span class=\"sy0\">|</span><br/>            <span class=\"br0\">[</span>e, f<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a, b<span class=\"sy0\">|</span><br/>           <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>           <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> is_even\u00a0? a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;=&gt;</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>                                \u00a0: a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;=&gt;</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span><br/>       r<span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> = n<span class=\"sy0\">++</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/>zig_zag<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> say .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"st0\">\"%4i\"</span> <span class=\"sy0\">%</span> i<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 22, "block": "<pre class=\"text highlighted_source\">function zigzag1(n) {<br/>\tj = 0::n-1<br/>\tu = J(1, n, (-1, 1))<br/>\tv = (j:*(2:*j:+3))<br/>\tv = rowshape((v,v:+1), 1)<br/>\ta = J(n, n, .)<br/>\tfor (i=1; i&lt;=n; i++) {<br/>\t\ta[i, .] = v[j:+i]<br/>\t\tv = v+u<br/>\t}<br/>\treturn(a)<br/>}<br/>\u00a0<br/>zigzag1(5)<br/>        1    2    3    4    5<br/>    +--------------------------+<br/>  1 |   0    1    5    6   14  |<br/>  2 |   2    4    7   13   16  |<br/>  3 |   3    8   12   17   25  |<br/>  4 |   9   11   18   24   31  |<br/>  5 |  10   19   23   32   40  |<br/>    +--------------------------+</pre>"}, {"lang": "Tcl", "loc": 36, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> zigzag <span class=\"br0\">{</span>size<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$size</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$size</span> .<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> dx -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> dy <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$size</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">incr</span> x -<span class=\"nu0\">1</span><br/>            <span class=\"kw2\">incr</span> y <span class=\"nu0\">2</span><br/>            negate dx dy<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$size</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">incr</span> x <span class=\"nu0\">2</span><br/>            <span class=\"kw2\">incr</span> y -<span class=\"nu0\">1</span><br/>            negate dx dy<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">incr</span> x<br/>            negate dx dy<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">incr</span> y<br/>            negate dx dy<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">lset</span> m <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"re0\">$i</span><br/>        <span class=\"kw2\">incr</span> x <span class=\"re0\">$dx</span><br/>        <span class=\"kw2\">incr</span> y <span class=\"re0\">$dy</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$m</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> negate <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> varname <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$varname</span> var<br/>        <span class=\"kw1\">set</span> var <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$var</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>print_matrix <span class=\"br0\">[</span>zigzag <span class=\"nu0\">5</span><span class=\"br0\">]</span></pre>"}, {"lang": "uBasic/4tH", "loc": 39, "block": "<pre class=\"text highlighted_source\">S = 5<br/>\u00a0<br/>i = 1<br/>j = 1<br/>\u00a0<br/>For e = 0 To (S*S)-1<br/>  @((i-1) * S + (j-1)) = e<br/>\u00a0<br/>  If (i + j)\u00a0% 2 = 0 Then<br/>\u00a0<br/>    If j &lt; S Then<br/>      j = j + 1<br/>    Else<br/>      i = i + 2<br/>    EndIf<br/>\u00a0<br/>    If i &gt; 1 Then<br/>      i = i - 1<br/>    EndIf<br/>  Else<br/>\u00a0<br/>    If i &lt; S<br/>      i = i + 1<br/>    Else<br/>      j = j + 2<br/>    EndIf<br/>\u00a0<br/>    If j &gt; 1<br/>      j = j - 1<br/>    EndIf<br/>  EndIf<br/>Next<br/>\u00a0<br/>For r = 0 To S-1<br/>  For c = 0 To S-1<br/>    Print Using \"___#\";@(r * S + c);<br/>  Next<br/>  Print<br/>Next</pre>"}, {"lang": "Ursala", "loc": 4, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>zigzag = ~&amp;mlPK2xnSS+ num+ ==+sum~~|<a class=\"__cf_email__\" data-cfemail=\"a29fdae99bdaf1eee2cbcbe992\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+ iota</pre>"}, {"lang": "VBA", "loc": 61, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Sub zigzag(n)<br/>Dim a() As Integer<br/>'populate a (1,1) to a(n,n) in zigzag pattern<br/>\u00a0<br/>'check if n too small<br/>If n &lt; 1 Then<br/>  Debug.Print \"zigzag: enter a number greater than 1\"<br/>  Exit Sub<br/>End If<br/>\u00a0<br/>'initialize<br/>ReDim a(1 To n, 1 To n)<br/>i = 1       'i is the row<br/>j = 1       'j is the column<br/>P = 0       'P is the next number<br/>a(i, j) = P 'fill in initial value<br/>\u00a0<br/>'now zigzag through the matrix and fill it in<br/>Do While (i &lt;= n) And (j &lt;= n)<br/>  'move one position to the right or down the rightmost column, if possible<br/>  If j &lt; n Then<br/>    j = j + 1<br/>  ElseIf i &lt; n Then<br/>    i = i + 1<br/>  Else<br/>    Exit Do<br/>  End If<br/>  'fill in<br/>  P = P + 1: a(i, j) = P<br/>  'move down to the left<br/>  While (j &gt; 1) And (i &lt; n)<br/>    i = i + 1: j = j - 1<br/>    P = P + 1: a(i, j) = P<br/>  Wend<br/>  'move one position down or to the right in the bottom row, if possible<br/>  If i &lt; n Then<br/>    i = i + 1<br/>  ElseIf j &lt; n Then<br/>    j = j + 1<br/>  Else<br/>    Exit Do<br/>  End If<br/>  P = P + 1: a(i, j) = P<br/>  'move back up to the right<br/>  While (i &gt; 1) And (j &lt; n)<br/>    i = i - 1: j = j + 1<br/>    P = P + 1: a(i, j) = P<br/>  Wend<br/>Loop<br/>\u00a0<br/>'print result<br/>Debug.Print \"Result for n=\"; n; \":\"<br/>For i = 1 To n<br/>  For j = 1 To n<br/>    Debug.Print a(i, j),<br/>  Next<br/>  Debug.Print<br/>Next<br/>End Sub<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 36, "block": "<pre class=\"vb highlighted_source\">ZigZag(Cint(WScript.Arguments(0)))<br/>\u00a0<br/><span class=\"kw2\">Function</span> ZigZag(n)<br/>\t<span class=\"kw4\">Dim</span> arrZ()<br/>\t<span class=\"kw4\">ReDim</span> arrZ(n-1,n-1)<br/>\ti = 1<br/>\tj = 1<br/>\t<span class=\"kw3\">For</span> e = 0 <span class=\"kw3\">To</span> (n^2) - 1<br/>\t\tarrZ(i-1,j-1) = e<br/>\t\t<span class=\"kw3\">If</span> ((i + j ) <span class=\"kw3\">And</span> 1) = 0 <span class=\"kw3\">Then</span><br/>\t\t\t<span class=\"kw3\">If</span> j &lt; n <span class=\"kw3\">Then</span><br/>\t\t\t\tj = j + 1<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\ti = i + 2<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">If</span> i &gt; 1 <span class=\"kw3\">Then</span><br/>\t\t\t\ti = i - 1<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\t<span class=\"kw3\">If</span> i &lt; n <span class=\"kw3\">Then</span><br/>\t\t\t\ti = i + 1<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tj = j + 2<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">If</span> j &gt; 1 <span class=\"kw3\">Then</span><br/>\t\t\t\tj = j - 1<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">For</span> k = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t<span class=\"kw3\">For</span> l = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t\tWScript.StdOut.Write Right(<span class=\"st0\">\"  \"</span> &amp; arrZ(k,l),3)<br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "XPL0", "loc": 23, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>def N=6;<br/>int A(N,N), X, Y, I, D;<br/>[I:=0; X:=0; Y:=0; D:=1;<br/>repeat  A(X,Y):=I;<br/>        case of<br/>         X+D&gt;=N: [D:=-D; Y:=Y+1];<br/>         Y-D&gt;=N: [D:=-D; X:=X+1];<br/>         X+D&lt;0:  [D:=-D; Y:=Y+1];<br/>         Y-D&lt;0:  [D:=-D; X:=X+1]<br/>        other    [X:=X+D; Y:=Y-D];<br/>        I:=I+1;<br/>until   I&gt;=N*N;<br/>for Y:=0 to N-1 do<br/>    [for X:=0 to N-1 do<br/>        [I:=A(X,Y);<br/>        ChOut(0,^ );<br/>        if I&lt;10 then ChOut(0,^ );<br/>        IntOut(0, I);<br/>        ];<br/>    CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn zz(n){<br/>   grid\u00a0:= (0).pump(n,List, (0).pump(n,List).copy).copy();<br/>   ri\u00a0:= Ref(0);<br/>   foreach d in ([1..n*2]){<br/>      x:=(0).max(d - n); y:=(n - 1).min(d - 1);<br/>      (0).pump(d.min(n*2 - d),Void,'wrap(it){<br/>         grid[if(d%2)y-it else x+it][if(d%2)x+it else y-it] = ri.inc();<br/>      });<br/>   }<br/>   grid.pump(String,'wrap(r){(\"%3s\"*n+\"\\n\").fmt(r.xplode())});<br/>}</pre>"}]}