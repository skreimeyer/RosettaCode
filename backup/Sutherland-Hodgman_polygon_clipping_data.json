{"task": "Sutherland-Hodgman_polygon_clipping", "blocks": [{"lang": "Ada", "loc": 113, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Doubly_Linked_Lists</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Main <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> FIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Float_IO</span> <span class=\"br0\">(</span>Float<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Point <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      X, Y\u00a0: Float;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Point<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Point <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Left.<span class=\"me1\">X</span> - Right.<span class=\"me1\">X</span>, Left.<span class=\"me1\">Y</span> - Right.<span class=\"me1\">Y</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"st0\">\"-\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Edge <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Point;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Point_Lists <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Doubly_Linked_Lists</span><br/>     <span class=\"br0\">(</span>Element_Type =&gt; Point<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> <span class=\"kw3\">type</span> Point_Lists.<span class=\"me1\">List</span>;<br/>   <span class=\"kw3\">subtype</span> Polygon <span class=\"kw1\">is</span> Point_Lists.<span class=\"me1\">List</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Inside <span class=\"br0\">(</span>P\u00a0: Point; E\u00a0: Edge<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>E <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">X</span> - E <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">X</span><span class=\"br0\">)</span> * <span class=\"br0\">(</span>P.<span class=\"me1\">Y</span> - E <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">Y</span><span class=\"br0\">)</span> &gt;<br/>             <span class=\"br0\">(</span>E <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">Y</span> - E <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">Y</span><span class=\"br0\">)</span> * <span class=\"br0\">(</span>P.<span class=\"me1\">X</span> - E <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">X</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Inside;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Intersecton <span class=\"br0\">(</span>P1, P2\u00a0: Point; E\u00a0: Edge<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Point <span class=\"kw1\">is</span><br/>      DE\u00a0: Point\u00a0:= E <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> - E <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      DP\u00a0: Point\u00a0:= P1 - P2;<br/>      N1\u00a0: Float\u00a0:= E <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">X</span> * E <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">Y</span> - E <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">Y</span> * E <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">X</span>;<br/>      N2\u00a0: Float\u00a0:= P1.<span class=\"me1\">X</span> * P2.<span class=\"me1\">Y</span> - P1.<span class=\"me1\">Y</span> * P2.<span class=\"me1\">X</span>;<br/>      N3\u00a0: Float\u00a0:= <span class=\"nu0\">1.0</span> / <span class=\"br0\">(</span>DE.<span class=\"me1\">X</span> * DP.<span class=\"me1\">Y</span> - DE.<span class=\"me1\">Y</span> * DP.<span class=\"me1\">X</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>N1 * DP.<span class=\"me1\">X</span> - N2 * DE.<span class=\"me1\">X</span><span class=\"br0\">)</span> * N3, <span class=\"br0\">(</span>N1 * DP.<span class=\"me1\">Y</span> - N2 * DE.<span class=\"me1\">Y</span><span class=\"br0\">)</span> * N3<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Intersecton;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Clip <span class=\"br0\">(</span>P, C\u00a0: Polygon<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Polygon <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Point_Lists;<br/>      A, B, S, E\u00a0: Cursor;<br/>      Inputlist \u00a0: List;<br/>      Outputlist\u00a0: List\u00a0:= P;<br/>      AB        \u00a0: Edge;<br/>   <span class=\"kw1\">begin</span><br/>      A\u00a0:= C.<span class=\"me1\">First</span>;<br/>      B\u00a0:= C.<span class=\"me1\">Last</span>;<br/>      <span class=\"kw1\">while</span> A /= No_Element <span class=\"kw1\">loop</span><br/>         AB       \u00a0:= <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>B<span class=\"br0\">)</span>, Element <span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         Inputlist\u00a0:= Outputlist;<br/>         Outputlist.<span class=\"me1\">Clear</span>;<br/>         S\u00a0:= Inputlist.<span class=\"me1\">Last</span>;<br/>         E\u00a0:= Inputlist.<span class=\"me1\">First</span>;<br/>         <span class=\"kw1\">while</span> E /= No_Element <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">if</span> Inside <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>E<span class=\"br0\">)</span>, AB<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Inside <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>S<span class=\"br0\">)</span>, AB<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  Outputlist.<span class=\"me1\">Append</span><br/>                    <span class=\"br0\">(</span>Intersecton <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>S<span class=\"br0\">)</span>, Element <span class=\"br0\">(</span>E<span class=\"br0\">)</span>, AB<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>               Outputlist.<span class=\"me1\">Append</span> <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">elsif</span> Inside <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>S<span class=\"br0\">)</span>, AB<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>               Outputlist.<span class=\"me1\">Append</span><br/>                 <span class=\"br0\">(</span>Intersecton <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>S<span class=\"br0\">)</span>, Element <span class=\"br0\">(</span>E<span class=\"br0\">)</span>, AB<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            S\u00a0:= E;<br/>            E\u00a0:= Next <span class=\"br0\">(</span>E<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         B\u00a0:= A;<br/>         A\u00a0:= Next <span class=\"br0\">(</span>A<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Outputlist;<br/>   <span class=\"kw1\">end</span> Clip;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print <span class=\"br0\">(</span>P\u00a0: Polygon<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Point_Lists;<br/>      C\u00a0: Cursor\u00a0:= P.<span class=\"me1\">First</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">while</span> C /= No_Element <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\" (\"</span><span class=\"br0\">)</span>;<br/>         FIO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>C<span class=\"br0\">)</span>.<span class=\"me1\">X</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>','<span class=\"br0\">)</span>;<br/>         FIO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>C<span class=\"br0\">)</span>.<span class=\"me1\">Y</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>'<span class=\"br0\">)</span>'<span class=\"br0\">)</span>;<br/>         C\u00a0:= Next <span class=\"br0\">(</span>C<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> C /= No_Element <span class=\"kw1\">then</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>','<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/>   Source \u00a0: Polygon;<br/>   Clipper\u00a0: Polygon;<br/>   Result \u00a0: Polygon;<br/><span class=\"kw1\">begin</span><br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">50.0</span>, <span class=\"nu0\">150.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">200.0</span>, <span class=\"nu0\">50.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">350.0</span>, <span class=\"nu0\">150.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">350.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">250.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">200.0</span>, <span class=\"nu0\">250.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">150.0</span>, <span class=\"nu0\">350.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">250.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Source.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">200.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Clipper.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">100.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Clipper.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">300.0</span>, <span class=\"nu0\">100.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Clipper.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">300.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Clipper.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Result\u00a0:= Clip <span class=\"br0\">(</span>Source, Clipper<span class=\"br0\">)</span>;<br/>   Print <span class=\"br0\">(</span>Result<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Main;</pre>"}, {"lang": "BBC BASIC", "loc": 77, "block": "<pre class=\"text highlighted_source\">      VDU 23,22,200;200;8,16,16,128<br/>      VDU 23,23,2;0;0;0;<br/>\u00a0<br/>      DIM SubjPoly{(8) x, y}<br/>      DIM ClipPoly{(3) x, y}<br/>      FOR v% = 0 TO 8\u00a0: READ SubjPoly{(v%)}.x, SubjPoly{(v%)}.y\u00a0: NEXT<br/>      DATA 50,150,200,50,350,150,350,300,250,300,200,250,150,350,100,250,100,200<br/>      FOR v% = 0 TO 3\u00a0: READ ClipPoly{(v%)}.x, ClipPoly{(v%)}.y\u00a0: NEXT<br/>      DATA 100,100, 300,100, 300,300, 100,300<br/>\u00a0<br/>      GCOL 4\u00a0: PROCplotpoly(SubjPoly{()}, 9)<br/>      GCOL 1\u00a0: PROCplotpoly(ClipPoly{()}, 4)<br/>      nvert% = FNsutherland_hodgman(SubjPoly{()}, ClipPoly{()}, Clipped{()})<br/>      GCOL 2\u00a0: PROCplotpoly(Clipped{()}, nvert%)<br/>      END<br/>\u00a0<br/>      DEF FNsutherland_hodgman(subj{()}, clip{()}, RETURN out{()})<br/>      LOCAL i%, j%, n%, o%, p1{}, p2{}, s{}, e{}, p{}, inp{()}<br/>      DIM p1{x,y}, p2{x,y}, s{x,y}, e{x,y}, p{x,y}<br/>      n% = DIM(subj{()},1) + DIM(clip{()},1)<br/>      DIM inp{(n%) x, y}, out{(n%) x,y}<br/>      FOR o% = 0 TO DIM(subj{()},1)\u00a0: out{(o%)} = subj{(o%)}\u00a0: NEXT<br/>      p1{} = clip{(DIM(clip{()},1))}<br/>      FOR i% = 0 TO DIM(clip{()},1)<br/>        p2{} = clip{(i%)}<br/>        FOR n% = 0 TO o% - 1\u00a0: inp{(n%)} = out{(n%)}\u00a0: NEXT\u00a0: o% = 0<br/>        IF n% &gt;= 2 THEN<br/>          s{} = inp{(n% - 1)}<br/>          FOR j% = 0 TO n% - 1<br/>            e{} = inp{(j%)}<br/>            IF FNside(e{}, p1{}, p2{}) THEN<br/>              IF NOT FNside(s{}, p1{}, p2{}) THEN<br/>                PROCintersection(p1{}, p2{}, s{}, e{}, p{})<br/>                out{(o%)} = p{}<br/>                o% += 1<br/>              ENDIF<br/>              out{(o%)} = e{}<br/>              o% += 1<br/>            ELSE<br/>              IF FNside(s{}, p1{}, p2{}) THEN<br/>                PROCintersection(p1{}, p2{}, s{}, e{}, p{})<br/>                out{(o%)} = p{}<br/>                o% += 1<br/>              ENDIF<br/>            ENDIF<br/>            s{} = e{}<br/>          NEXT<br/>        ENDIF<br/>        p1{} = p2{}<br/>      NEXT i%<br/>      = o%<br/>\u00a0<br/>      REM Which side of the line p1-p2 is the point p?<br/>      DEF FNside(p{}, p1{}, p2{})<br/>      =  (p2.x - p1.x) * (p.y - p1.y) &gt; (p2.y - p1.y) * (p.x - p1.x)<br/>\u00a0<br/>      REM Find the intersection of two lines p1-p2 and p3-p4<br/>      DEF PROCintersection(p1{}, p2{}, p3{}, p4{}, p{})<br/>      LOCAL a{}, b{}, k, l, m\u00a0: DIM a{x,y}, b{x,y}<br/>      a.x = p1.x - p2.x\u00a0: a.y = p1.y - p2.y<br/>      b.x = p3.x - p4.x\u00a0: b.y = p3.y - p4.y<br/>      k = p1.x * p2.y - p1.y * p2.x<br/>      l = p3.x * p4.y - p3.y * p4.x<br/>      m = 1 / (a.x * b.y - a.y * b.x)<br/>      p.x =  m * (k * b.x - l * a.x)<br/>      p.y =  m * (k * b.y - l * a.y)<br/>      ENDPROC<br/>\u00a0<br/>      REM plot a polygon<br/>      DEF PROCplotpoly(poly{()}, n%)<br/>      LOCAL i%<br/>      MOVE poly{(0)}.x, poly{(0)}.y<br/>      FOR i% = 1 TO n%-1<br/>        DRAW poly{(i%)}.x, poly{(i%)}.y<br/>      NEXT<br/>      DRAW poly{(0)}.x, poly{(0)}.y<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 179, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span> vec_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>vec<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">double</span> dot<span class=\"br0\">(</span>vec a<span class=\"sy0\">,</span> vec b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> a<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">*</span> b<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">+</span> a<span class=\"sy0\">-&gt;</span>y <span class=\"sy0\">*</span> b<span class=\"sy0\">-&gt;</span>y<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">double</span> cross<span class=\"br0\">(</span>vec a<span class=\"sy0\">,</span> vec b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> a<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">*</span> b<span class=\"sy0\">-&gt;</span>y <span class=\"sy0\">-</span> a<span class=\"sy0\">-&gt;</span>y <span class=\"sy0\">*</span> b<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> vec vsub<span class=\"br0\">(</span>vec a<span class=\"sy0\">,</span> vec b<span class=\"sy0\">,</span> vec res<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tres<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">=</span> a<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">-</span> b<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">;</span><br/>\tres<span class=\"sy0\">-&gt;</span>y <span class=\"sy0\">=</span> a<span class=\"sy0\">-&gt;</span>y <span class=\"sy0\">-</span> b<span class=\"sy0\">-&gt;</span>y<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* tells if vec c lies on the left side of directed edge a-&gt;b<br/> * 1 if left, -1 if right, 0 if colinear<br/> */</span><br/><span class=\"kw4\">int</span> left_of<span class=\"br0\">(</span>vec a<span class=\"sy0\">,</span> vec b<span class=\"sy0\">,</span> vec c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tvec_t tmp1<span class=\"sy0\">,</span> tmp2<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> x<span class=\"sy0\">;</span><br/>\tvsub<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>tmp1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvsub<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>tmp2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tx <span class=\"sy0\">=</span> cross<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>tmp1<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>tmp2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> line_sect<span class=\"br0\">(</span>vec x0<span class=\"sy0\">,</span> vec x1<span class=\"sy0\">,</span> vec y0<span class=\"sy0\">,</span> vec y1<span class=\"sy0\">,</span> vec res<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tvec_t dx<span class=\"sy0\">,</span> dy<span class=\"sy0\">,</span> d<span class=\"sy0\">;</span><br/>\tvsub<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> x0<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>dx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvsub<span class=\"br0\">(</span>y1<span class=\"sy0\">,</span> y0<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvsub<span class=\"br0\">(</span>x0<span class=\"sy0\">,</span> y0<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/* x0 + a dx = y0 + b dy -&gt;<br/>\t   x0 X dx = y0 X dx + b dy X dx -&gt;<br/>\t   b = (x0 - y0) X dx / (dy X dx) */</span><br/>\t<span class=\"kw4\">double</span> dyx <span class=\"sy0\">=</span> cross<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>dy<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>dx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>dyx<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tdyx <span class=\"sy0\">=</span> cross<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>d<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>dx<span class=\"br0\">)</span> <span class=\"sy0\">/</span> dyx<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dyx <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> dyx <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tres<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">=</span> y0<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">+</span> dyx <span class=\"sy0\">*</span> dy.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>\tres<span class=\"sy0\">-&gt;</span>y <span class=\"sy0\">=</span> y0<span class=\"sy0\">-&gt;</span>y <span class=\"sy0\">+</span> dyx <span class=\"sy0\">*</span> dy.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* === polygon stuff === */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">int</span> len<span class=\"sy0\">,</span> alloc<span class=\"sy0\">;</span> vec v<span class=\"sy0\">;</span> <span class=\"br0\">}</span> poly_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>poly<span class=\"sy0\">;</span><br/>\u00a0<br/>poly poly_new<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>poly<span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>poly_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> poly_free<span class=\"br0\">(</span>poly p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> poly_append<span class=\"br0\">(</span>poly p<span class=\"sy0\">,</span> vec v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">&gt;=</span> p<span class=\"sy0\">-&gt;</span>alloc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tp<span class=\"sy0\">-&gt;</span>alloc <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"sy0\">-&gt;</span>alloc<span class=\"br0\">)</span> p<span class=\"sy0\">-&gt;</span>alloc <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t\tp<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">=</span> <span class=\"br0\">(</span>vec<span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">-&gt;</span>v<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>vec_t<span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<span class=\"sy0\">-&gt;</span>alloc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tp<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>p<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>v<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* this works only if all of the following are true:<br/> *   1. poly has no colinear edges;<br/> *   2. poly has no duplicate vertices;<br/> *   3. poly has at least three vertices;<br/> *   4. poly is convex (implying 3).<br/>*/</span><br/><span class=\"kw4\">int</span> poly_winding<span class=\"br0\">(</span>poly p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> left_of<span class=\"br0\">(</span>p<span class=\"sy0\">-&gt;</span>v<span class=\"sy0\">,</span> p<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> p<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> poly_edge_clip<span class=\"br0\">(</span>poly sub<span class=\"sy0\">,</span> vec x0<span class=\"sy0\">,</span> vec x1<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> left<span class=\"sy0\">,</span> poly res<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> side0<span class=\"sy0\">,</span> side1<span class=\"sy0\">;</span><br/>\tvec_t tmp<span class=\"sy0\">;</span><br/>\tvec v0 <span class=\"sy0\">=</span> sub<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">+</span> sub<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> v1<span class=\"sy0\">;</span><br/>\tres<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tside0 <span class=\"sy0\">=</span> left_of<span class=\"br0\">(</span>x0<span class=\"sy0\">,</span> x1<span class=\"sy0\">,</span> v0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>side0 <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span>left<span class=\"br0\">)</span> poly_append<span class=\"br0\">(</span>res<span class=\"sy0\">,</span> v0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sub<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tv1 <span class=\"sy0\">=</span> sub<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span><br/>\t\tside1 <span class=\"sy0\">=</span> left_of<span class=\"br0\">(</span>x0<span class=\"sy0\">,</span> x1<span class=\"sy0\">,</span> v1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>side0 <span class=\"sy0\">+</span> side1 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> side0<span class=\"br0\">)</span><br/>\t\t\t<span class=\"coMULTI\">/* last point and current straddle the edge */</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line_sect<span class=\"br0\">(</span>x0<span class=\"sy0\">,</span> x1<span class=\"sy0\">,</span> v0<span class=\"sy0\">,</span> v1<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>tmp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tpoly_append<span class=\"br0\">(</span>res<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> sub<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>side1 <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span>left<span class=\"br0\">)</span> poly_append<span class=\"br0\">(</span>res<span class=\"sy0\">,</span> v1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tv0 <span class=\"sy0\">=</span> v1<span class=\"sy0\">;</span><br/>\t\tside0 <span class=\"sy0\">=</span> side1<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>poly poly_clip<span class=\"br0\">(</span>poly sub<span class=\"sy0\">,</span> poly clip<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tpoly p1 <span class=\"sy0\">=</span> poly_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> p2 <span class=\"sy0\">=</span> poly_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> tmp<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> dir <span class=\"sy0\">=</span> poly_winding<span class=\"br0\">(</span>clip<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tpoly_edge_clip<span class=\"br0\">(</span>sub<span class=\"sy0\">,</span> clip<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">+</span> clip<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> clip<span class=\"sy0\">-&gt;</span>v<span class=\"sy0\">,</span> dir<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> clip<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ttmp <span class=\"sy0\">=</span> p2<span class=\"sy0\">;</span> p2 <span class=\"sy0\">=</span> p1<span class=\"sy0\">;</span> p1 <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>p1<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tp2<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tpoly_edge_clip<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> clip<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> clip<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> dir<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tpoly_free<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> p2<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tvec_t c<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span><span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\">//vec_t c[] = {{100,300}, {300,300}, {300,100}, {100,100}};</span><br/>\tvec_t s<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\t<span class=\"br0\">{</span><span class=\"nu0\">50</span><span class=\"sy0\">,</span><span class=\"nu0\">150</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span><span class=\"nu0\">50</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span><span class=\"nu0\">150</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span><span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><span class=\"br0\">{</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span><span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><span class=\"br0\">{</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span><span class=\"nu0\">250</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">150</span><span class=\"sy0\">,</span><span class=\"nu0\">350</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">250</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">200</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#define clen (sizeof(c)/sizeof(vec_t))</span><br/><span class=\"co2\">#define slen (sizeof(s)/sizeof(vec_t))</span><br/>\tpoly_t clipper <span class=\"sy0\">=</span> <span class=\"br0\">{</span>clen<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> c<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\tpoly_t subject <span class=\"sy0\">=</span> <span class=\"br0\">{</span>slen<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> s<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tpoly res <span class=\"sy0\">=</span> poly_clip<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>subject<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>clipper<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> res<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%g\u00a0%g<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* long and arduous EPS printout */</span><br/>\tFILE <span class=\"sy0\">*</span> eps <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"test.eps\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"%%!PS-Adobe-3.0<span class=\"es1\">\\n</span>%%%%BoundingBox: 40 40 360 360<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"/l {lineto} def /m{moveto} def /s{setrgbcolor} def\"</span><br/>\t\t<span class=\"st0\">\"/c {closepath} def /gs {fill grestore stroke} def<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"0 setlinewidth\u00a0%g\u00a0%g m \"</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> clen<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"%g\u00a0%g l \"</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"c .5 0 0 s gsave 1 .7 .7 s gs<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"%g\u00a0%g m \"</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> slen<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"%g\u00a0%g l \"</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"c 0 .2 .5 s gsave .4 .7 1 s gs<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"2 setlinewidth [10 8] 0 setdash\u00a0%g\u00a0%g m \"</span><span class=\"sy0\">,</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> res<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"%g\u00a0%g l \"</span><span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"c .5 0 .5 s gsave .7 .3 .8 s gs<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span> <span class=\"st0\">\"%%%%EOF\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>eps<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"test.eps written<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 237, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Linq</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Text</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Windows</span><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace Sutherland<br/><span class=\"br0\">{</span><br/>    public <span class=\"kw4\">static</span> class SutherlandHodgman<br/>    <span class=\"br0\">{</span><br/>        <span class=\"co2\">#region Class: Edge</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// This represents a line segment</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        private class Edge<br/>        <span class=\"br0\">{</span><br/>            public Edge<span class=\"br0\">(</span>Point from<span class=\"sy0\">,</span> Point to<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                this.<span class=\"me1\">From</span> <span class=\"sy0\">=</span> from<span class=\"sy0\">;</span><br/>                this.<span class=\"me1\">To</span> <span class=\"sy0\">=</span> to<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            public readonly Point From<span class=\"sy0\">;</span><br/>            public readonly Point To<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co2\">#endregion</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// This clips the subject polygon against the clip polygon (gets the intersection of the two polygons)</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;remarks&gt;</span><br/>        <span class=\"co1\">/// Based on the psuedocode from:</span><br/>        <span class=\"co1\">/// http://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman</span><br/>        <span class=\"co1\">/// &lt;/remarks&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"subjectPoly\"&gt;Can be concave or convex&lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"clipPoly\"&gt;Must be convex&lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;returns&gt;The intersection of the two polygons (or null)&lt;/returns&gt;</span><br/>        public <span class=\"kw4\">static</span> Point<span class=\"br0\">[</span><span class=\"br0\">]</span> GetIntersectedPolygon<span class=\"br0\">(</span>Point<span class=\"br0\">[</span><span class=\"br0\">]</span> subjectPoly<span class=\"sy0\">,</span> Point<span class=\"br0\">[</span><span class=\"br0\">]</span> clipPoly<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>subjectPoly.<span class=\"me1\">Length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> clipPoly.<span class=\"me1\">Length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                throw new ArgumentException<span class=\"br0\">(</span>string.<span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"The polygons passed in must have at least 3 points: subject={0}, clip={1}\"</span><span class=\"sy0\">,</span> subjectPoly.<span class=\"me1\">Length</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> clipPoly.<span class=\"me1\">Length</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> outputList <span class=\"sy0\">=</span> subjectPoly.<span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">//\tMake sure it's clockwise</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>IsClockwise<span class=\"br0\">(</span>subjectPoly<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                outputList.<span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">//\tWalk around the clip polygon clockwise</span><br/>            foreach <span class=\"br0\">(</span>Edge clipEdge in IterateEdgesClockwise<span class=\"br0\">(</span>clipPoly<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> inputList <span class=\"sy0\">=</span> outputList.<span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\">//\tclone it</span><br/>                outputList.<span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inputList.<span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"co1\">//\tSometimes when the polygons don't intersect, this list goes to zero.  Jump out to avoid an index out of range exception</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                Point S <span class=\"sy0\">=</span> inputList<span class=\"br0\">[</span>inputList.<span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                foreach <span class=\"br0\">(</span>Point E in inputList<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsInside<span class=\"br0\">(</span>clipEdge<span class=\"sy0\">,</span> E<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>IsInside<span class=\"br0\">(</span>clipEdge<span class=\"sy0\">,</span> S<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            Point<span class=\"sy0\">?</span> point <span class=\"sy0\">=</span> GetIntersect<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> E<span class=\"sy0\">,</span> clipEdge.<span class=\"me1\">From</span><span class=\"sy0\">,</span> clipEdge.<span class=\"me1\">To</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>point <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">{</span><br/>                                throw new ApplicationException<span class=\"br0\">(</span><span class=\"st0\">\"Line segments don't intersect\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\">//\tmay be colinear, or may be a bug</span><br/>                            <span class=\"br0\">}</span><br/>                            <span class=\"kw1\">else</span><br/>                            <span class=\"br0\">{</span><br/>                                outputList.<span class=\"me1\">Add</span><span class=\"br0\">(</span>point.<span class=\"me1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>\u00a0<br/>                        outputList.<span class=\"me1\">Add</span><span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsInside<span class=\"br0\">(</span>clipEdge<span class=\"sy0\">,</span> S<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        Point<span class=\"sy0\">?</span> point <span class=\"sy0\">=</span> GetIntersect<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> E<span class=\"sy0\">,</span> clipEdge.<span class=\"me1\">From</span><span class=\"sy0\">,</span> clipEdge.<span class=\"me1\">To</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>point <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            throw new ApplicationException<span class=\"br0\">(</span><span class=\"st0\">\"Line segments don't intersect\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\">//\tmay be colinear, or may be a bug</span><br/>                        <span class=\"br0\">}</span><br/>                        <span class=\"kw1\">else</span><br/>                        <span class=\"br0\">{</span><br/>                            outputList.<span class=\"me1\">Add</span><span class=\"br0\">(</span>point.<span class=\"me1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>\u00a0<br/>                    S <span class=\"sy0\">=</span> E<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">//\tExit Function</span><br/>            <span class=\"kw1\">return</span> outputList.<span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co2\">#region Private Methods</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// This iterates through the edges of the polygon, always clockwise</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        private <span class=\"kw4\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>Edge<span class=\"sy0\">&gt;</span> IterateEdgesClockwise<span class=\"br0\">(</span>Point<span class=\"br0\">[</span><span class=\"br0\">]</span> polygon<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsClockwise<span class=\"br0\">(</span>polygon<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co2\">#region Already clockwise</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> cntr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> cntr <span class=\"sy0\">&lt;</span> polygon.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> cntr<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    yield <span class=\"kw1\">return</span> new Edge<span class=\"br0\">(</span>polygon<span class=\"br0\">[</span>cntr<span class=\"br0\">]</span><span class=\"sy0\">,</span> polygon<span class=\"br0\">[</span>cntr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                yield <span class=\"kw1\">return</span> new Edge<span class=\"br0\">(</span>polygon<span class=\"br0\">[</span>polygon.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> polygon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"co2\">#endregion</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co2\">#region Reverse</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> cntr <span class=\"sy0\">=</span> polygon.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> cntr <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> cntr<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    yield <span class=\"kw1\">return</span> new Edge<span class=\"br0\">(</span>polygon<span class=\"br0\">[</span>cntr<span class=\"br0\">]</span><span class=\"sy0\">,</span> polygon<span class=\"br0\">[</span>cntr <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                yield <span class=\"kw1\">return</span> new Edge<span class=\"br0\">(</span>polygon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> polygon<span class=\"br0\">[</span>polygon.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"co2\">#endregion</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Returns the intersection of the two lines (line segments are passed in, but they are treated like infinite lines)</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;remarks&gt;</span><br/>        <span class=\"co1\">/// Got this here:</span><br/>        <span class=\"co1\">/// http://stackoverflow.com/questions/14480124/how-do-i-detect-triangle-and-rectangle-intersection</span><br/>        <span class=\"co1\">/// &lt;/remarks&gt;</span><br/>        private <span class=\"kw4\">static</span> Point<span class=\"sy0\">?</span> GetIntersect<span class=\"br0\">(</span>Point line1From<span class=\"sy0\">,</span> Point line1To<span class=\"sy0\">,</span> Point line2From<span class=\"sy0\">,</span> Point line2To<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Vector direction1 <span class=\"sy0\">=</span> line1To <span class=\"sy0\">-</span> line1From<span class=\"sy0\">;</span><br/>            Vector direction2 <span class=\"sy0\">=</span> line2To <span class=\"sy0\">-</span> line2From<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> dotPerp <span class=\"sy0\">=</span> <span class=\"br0\">(</span>direction1.<span class=\"me1\">X</span> <span class=\"sy0\">*</span> direction2.<span class=\"me1\">Y</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>direction1.<span class=\"me1\">Y</span> <span class=\"sy0\">*</span> direction2.<span class=\"me1\">X</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// If it's 0, it means the lines are parallel so have infinite intersection points</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsNearZero<span class=\"br0\">(</span>dotPerp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Vector c <span class=\"sy0\">=</span> line2From <span class=\"sy0\">-</span> line1From<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> t <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c.<span class=\"me1\">X</span> <span class=\"sy0\">*</span> direction2.<span class=\"me1\">Y</span> <span class=\"sy0\">-</span> c.<span class=\"me1\">Y</span> <span class=\"sy0\">*</span> direction2.<span class=\"me1\">X</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> dotPerp<span class=\"sy0\">;</span><br/>            <span class=\"co1\">//if (t &lt; 0 || t &gt; 1)</span><br/>            <span class=\"co1\">//{</span><br/>            <span class=\"co1\">//    return null;\t\t//\tlies outside the line segment</span><br/>            <span class=\"co1\">//}</span><br/>\u00a0<br/>            <span class=\"co1\">//double u = (c.X * direction1.Y - c.Y * direction1.X) / dotPerp;</span><br/>            <span class=\"co1\">//if (u &lt; 0 || u &gt; 1)</span><br/>            <span class=\"co1\">//{</span><br/>            <span class=\"co1\">//    return null;\t\t//\tlies outside the line segment</span><br/>            <span class=\"co1\">//}</span><br/>\u00a0<br/>            <span class=\"co1\">//\tReturn the intersection point</span><br/>            <span class=\"kw1\">return</span> line1From <span class=\"sy0\">+</span> <span class=\"br0\">(</span>t <span class=\"sy0\">*</span> direction1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> bool IsInside<span class=\"br0\">(</span>Edge edge<span class=\"sy0\">,</span> Point test<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            bool<span class=\"sy0\">?</span> isLeft <span class=\"sy0\">=</span> IsLeftOf<span class=\"br0\">(</span>edge<span class=\"sy0\">,</span> test<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isLeft <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co1\">//\tColinear points should be considered inside</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>isLeft.<span class=\"me1\">Value</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        private <span class=\"kw4\">static</span> bool IsClockwise<span class=\"br0\">(</span>Point<span class=\"br0\">[</span><span class=\"br0\">]</span> polygon<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> cntr <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> cntr <span class=\"sy0\">&lt;</span> polygon.<span class=\"me1\">Length</span><span class=\"sy0\">;</span> cntr<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                bool<span class=\"sy0\">?</span> isLeft <span class=\"sy0\">=</span> IsLeftOf<span class=\"br0\">(</span>new Edge<span class=\"br0\">(</span>polygon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> polygon<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> polygon<span class=\"br0\">[</span>cntr<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isLeft <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">//\tsome of the points may be colinear.  That's ok as long as the overall is a polygon</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>isLeft.<span class=\"me1\">Value</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            throw new ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"All the points in the polygon are colinear\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Tells if the test point lies on the left side of the edge line</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        private <span class=\"kw4\">static</span> bool<span class=\"sy0\">?</span> IsLeftOf<span class=\"br0\">(</span>Edge edge<span class=\"sy0\">,</span> Point test<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Vector tmp1 <span class=\"sy0\">=</span> edge.<span class=\"me1\">To</span> <span class=\"sy0\">-</span> edge.<span class=\"me1\">From</span><span class=\"sy0\">;</span><br/>            Vector tmp2 <span class=\"sy0\">=</span> test <span class=\"sy0\">-</span> edge.<span class=\"me1\">To</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>tmp1.<span class=\"me1\">X</span> <span class=\"sy0\">*</span> tmp2.<span class=\"me1\">Y</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>tmp1.<span class=\"me1\">Y</span> <span class=\"sy0\">*</span> tmp2.<span class=\"me1\">X</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\">//\tdot product of perpendicular?</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co1\">//\tColinear points;</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> bool IsNearZero<span class=\"br0\">(</span><span class=\"kw4\">double</span> testValue<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> Math.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>testValue<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> .000000001d<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co2\">#endregion</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 120, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Vec2 <span class=\"br0\">{</span> <span class=\"co1\">// To be replaced with Phobos code.</span><br/>    <span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>    Vec2 opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"sy0\">=</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Vec2 other<span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Vec2<span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> other.<span class=\"me1\">x</span><span class=\"sy0\">,</span> <span class=\"kw2\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> other.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> cross<span class=\"br0\">(</span><span class=\"kw2\">in</span> Vec2 other<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> <span class=\"kw2\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">*</span> other.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span><span class=\"br0\">(</span>Vec2<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> clip<span class=\"br0\">(</span><span class=\"kw2\">in</span> Vec2<span class=\"br0\">[</span><span class=\"br0\">]</span> subjectPolygon<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Vec2<span class=\"br0\">[</span><span class=\"br0\">]</span> clipPolygon<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>subjectPolygon.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>clipPolygon.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Probably clipPolygon needs to be convex and probably</span><br/>    <span class=\"co1\">// its vertices need to be listed in a direction.</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> Edge <span class=\"sy0\">=</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>Vec2<span class=\"sy0\">,</span><span class=\"st0\">\"p\"</span><span class=\"sy0\">,</span> Vec2<span class=\"sy0\">,</span><span class=\"st0\">\"q\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">enum</span> isInside <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> Vec2 p<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Edge cle<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">(</span>cle.<span class=\"me1\">q</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> cle.<span class=\"me1\">p</span>.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>p.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> cle.<span class=\"me1\">p</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span><br/>        <span class=\"br0\">(</span>cle.<span class=\"me1\">q</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> cle.<span class=\"me1\">p</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>p.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> cle.<span class=\"me1\">p</span>.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> Vec2 intersection<span class=\"br0\">(</span><span class=\"kw2\">in</span> Edge se<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Edge cle<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> dc <span class=\"sy0\">=</span> cle.<span class=\"me1\">p</span> <span class=\"sy0\">-</span> cle.<span class=\"me1\">q</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> dp <span class=\"sy0\">=</span> se.<span class=\"me1\">p</span> <span class=\"sy0\">-</span> se.<span class=\"me1\">q</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> n1 <span class=\"sy0\">=</span> cle.<span class=\"me1\">p</span>.<span class=\"me1\">cross</span><span class=\"br0\">(</span>cle.<span class=\"me1\">q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> n2 <span class=\"sy0\">=</span> se.<span class=\"me1\">p</span>.<span class=\"me1\">cross</span><span class=\"br0\">(</span>se.<span class=\"me1\">q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> n3 <span class=\"sy0\">=</span> <span class=\"nu16\">1.0</span> <span class=\"sy0\">/</span> dc.<span class=\"me1\">cross</span><span class=\"br0\">(</span>dp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> Vec2<span class=\"br0\">(</span><span class=\"br0\">(</span>n1 <span class=\"sy0\">*</span> dp.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> n2 <span class=\"sy0\">*</span> dc.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<span class=\"sy0\">,</span><br/>                    <span class=\"br0\">(</span>n1 <span class=\"sy0\">*</span> dp.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> n2 <span class=\"sy0\">*</span> dc.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// How much slower is this compared to lower-level code?</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">enum</span> edges <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> Vec2<span class=\"br0\">[</span><span class=\"br0\">]</span> poly<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"sy0\">=&gt;</span><br/>        <span class=\"co1\">// poly[$ - 1 .. $].chain(poly).zip!Edge(poly);</span><br/>        poly<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">chain</span><span class=\"br0\">(</span>poly<span class=\"br0\">)</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>poly<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>Edge<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span><span class=\"br0\">(</span>Vec2<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> subjectPolygon.<span class=\"me1\">idup</span><span class=\"sy0\">;</span> <span class=\"co1\">// Not nothrow.</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> clipEdge<span class=\"sy0\">;</span> edges<span class=\"br0\">(</span>clipPolygon<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> inputList <span class=\"sy0\">=</span> result<span class=\"sy0\">;</span><br/>        result.<span class=\"me1\">destroy</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> inEdge<span class=\"sy0\">;</span> edges<span class=\"br0\">(</span>inputList<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isInside<span class=\"br0\">(</span>inEdge.<span class=\"me1\">q</span><span class=\"sy0\">,</span> clipEdge<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isInside<span class=\"br0\">(</span>inEdge.<span class=\"me1\">p</span><span class=\"sy0\">,</span> clipEdge<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    result <span class=\"sy0\">~=</span> intersection<span class=\"br0\">(</span>inEdge<span class=\"sy0\">,</span> clipEdge<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                result <span class=\"sy0\">~=</span> inEdge.<span class=\"me1\">q</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isInside<span class=\"br0\">(</span>inEdge.<span class=\"me1\">p</span><span class=\"sy0\">,</span> clipEdge<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                result <span class=\"sy0\">~=</span> intersection<span class=\"br0\">(</span>inEdge<span class=\"sy0\">,</span> clipEdge<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Code adapted from the C version.</span><br/><span class=\"kw4\">void</span> saveEPSImage<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> fileName<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Vec2<span class=\"br0\">[</span><span class=\"br0\">]</span> subjPoly<span class=\"sy0\">,</span><br/>                  <span class=\"kw2\">in</span> Vec2<span class=\"br0\">[</span><span class=\"br0\">]</span> clipPoly<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Vec2<span class=\"br0\">[</span><span class=\"br0\">]</span> clipped<span class=\"br0\">)</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>fileName.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>subjPoly.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>clipPoly.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>clipped.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> eps <span class=\"sy0\">=</span> File<span class=\"br0\">(</span>fileName<span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// The image bounding box is hard-coded, not computed.</span><br/>    eps.<span class=\"me1\">writeln</span><span class=\"br0\">(</span><br/><span class=\"st0\">\"%%!PS-Adobe-3.0<br/>%%%%BoundingBox: 40 40 360 360<br/>/l {lineto} def<br/>/m {moveto} def<br/>/s {setrgbcolor} def<br/>/c {closepath} def<br/>/gs {fill grestore stroke} def<br/>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    eps.<span class=\"me1\">writef</span><span class=\"br0\">(</span><span class=\"st0\">\"0 setlinewidth\u00a0%g\u00a0%g m \"</span><span class=\"sy0\">,</span> clipPoly<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">tupleof</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> cl<span class=\"sy0\">;</span> clipPoly<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        eps.<span class=\"me1\">writef</span><span class=\"br0\">(</span><span class=\"st0\">\"%g\u00a0%g l \"</span><span class=\"sy0\">,</span> cl.<span class=\"me1\">tupleof</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    eps.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"c 0.5 0 0 s gsave 1 0.7 0.7 s gs\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    eps.<span class=\"me1\">writef</span><span class=\"br0\">(</span><span class=\"st0\">\"%g\u00a0%g m \"</span><span class=\"sy0\">,</span> subjPoly<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">tupleof</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> s<span class=\"sy0\">;</span> subjPoly<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        eps.<span class=\"me1\">writef</span><span class=\"br0\">(</span><span class=\"st0\">\"%g\u00a0%g l \"</span><span class=\"sy0\">,</span> s.<span class=\"me1\">tupleof</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    eps.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"c 0 0.2 0.5 s gsave 0.4 0.7 1 s gs\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    eps.<span class=\"me1\">writef</span><span class=\"br0\">(</span><span class=\"st0\">\"2 setlinewidth [10 8] 0 setdash\u00a0%g\u00a0%g m \"</span><span class=\"sy0\">,</span><br/>               clipped<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">tupleof</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> clipped<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        eps.<span class=\"me1\">writef</span><span class=\"br0\">(</span><span class=\"st0\">\"%g\u00a0%g l \"</span><span class=\"sy0\">,</span> c.<span class=\"me1\">tupleof</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    eps.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"c 0.5 0 0.5 s gsave 0.7 0.3 0.8 s gs\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    eps.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"%%%%EOF\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    eps.<span class=\"me1\">close</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>fileName<span class=\"sy0\">,</span> <span class=\"st0\">\" written.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> V <span class=\"sy0\">=</span> Vec2<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> subjectPolygon <span class=\"sy0\">=</span> <span class=\"br0\">[</span>V<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                V<span class=\"br0\">(</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                V<span class=\"br0\">(</span><span class=\"nu0\">150</span><span class=\"sy0\">,</span> <span class=\"nu0\">350</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> clippingPolygon <span class=\"sy0\">=</span> <span class=\"br0\">[</span>V<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                 V<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> clipped <span class=\"sy0\">=</span> subjectPolygon.<span class=\"me1\">clip</span><span class=\"br0\">(</span>clippingPolygon<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> clipped<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    saveEPSImage<span class=\"br0\">(</span><span class=\"st0\">\"sutherland_hodgman_clipping_out.eps\"</span><span class=\"sy0\">,</span><br/>                 subjectPolygon<span class=\"sy0\">,</span> clippingPolygon<span class=\"sy0\">,</span> clipped<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 38, "block": "<pre class=\"text highlighted_source\">defmodule SutherlandHodgman do<br/>  defp inside(cp1, cp2, p), do: (cp2.x-cp1.x)*(p.y-cp1.y) &gt; (cp2.y-cp1.y)*(p.x-cp1.x)<br/>\u00a0<br/>  defp intersection(cp1, cp2, s, e) do<br/>    {dcx, dcy} = {cp1.x-cp2.x, cp1.y-cp2.y}<br/>    {dpx, dpy} = {s.x-e.x, s.y-e.y}<br/>    n1 = cp1.x*cp2.y - cp1.y*cp2.x<br/>    n2 = s.x*e.y - s.y*e.x<br/>    n3 = 1.0 / (dcx*dpy - dcy*dpx)<br/>   \u00a0%{x: (n1*dpx - n2*dcx) * n3, y: (n1*dpy - n2*dcy) * n3}<br/>  end<br/>\u00a0<br/>  def polygon_clipping(subjectPolygon, clipPolygon) do<br/>    Enum.chunk([List.last(clipPolygon) | clipPolygon], 2, 1)<br/>    |&gt; Enum.reduce(subjectPolygon, fn [cp1,cp2],acc -&gt;<br/>         Enum.chunk([List.last(acc) | acc], 2, 1)<br/>         |&gt; Enum.reduce([], fn [s,e],outputList -&gt;<br/>              case {inside(cp1, cp2, e), inside(cp1, cp2, s)} do<br/>                {true,  true} -&gt; [e | outputList]<br/>                {true, false} -&gt; [e, intersection(cp1,cp2,s,e) | outputList]<br/>                {false, true} -&gt; [intersection(cp1,cp2,s,e) | outputList]<br/>                _             -&gt; outputList<br/>              end<br/>            end)<br/>         |&gt; Enum.reverse<br/>       end)<br/>  end<br/>end<br/>\u00a0<br/>subjectPolygon = [[50, 150], [200, 50], [350, 150], [350, 300], [250, 300],<br/>                  [200, 250], [150, 350], [100, 250], [100, 200]]<br/>                 |&gt; Enum.map(fn [x,y] -&gt;\u00a0%{x: x, y: y} end)<br/>\u00a0<br/>clipPolygon = [[100, 100], [300, 100], [300, 300], [100, 300]]<br/>              |&gt; Enum.map(fn [x,y] -&gt;\u00a0%{x: x, y: y} end)<br/>\u00a0<br/>SutherlandHodgman.polygon_clipping(subjectPolygon, clipPolygon)<br/>|&gt; Enum.each(&amp;IO.inspect/1)</pre>"}, {"lang": "Fortran", "loc": 261, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">module</span> SutherlandHodgmanUtil<br/>  <span class=\"co1\">! functions and type needed for Sutherland-Hodgman algorithm</span><br/>\u00a0<br/>  <span class=\"co1\">! --------------------------------------------------------\u00a0!</span><br/>  <span class=\"kw3\">type</span> polygon<br/>    <span class=\"co1\">!type for polygons</span><br/>    <span class=\"co1\">! when you define a polygon, the first and the last vertices have to be the same</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">vertex</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> polygon<br/>\u00a0<br/>  <span class=\"kw1\">contains</span> <br/>\u00a0<br/>  <span class=\"co1\">! --------------------------------------------------------\u00a0!</span><br/>  <span class=\"kw1\">subroutine</span> sutherlandHodgman<span class=\"br0\">(</span> ref, clip, outputPolygon <span class=\"br0\">)</span><br/>    <span class=\"co1\">! Sutherland Hodgman algorithm for 2d polygons</span><br/>\u00a0<br/>    <span class=\"co1\">! -- parameters of the subroutine --</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>polygon<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">ref</span>, clip, outputPolygon<br/>\u00a0<br/>    <span class=\"co1\">! -- variables used is the subroutine</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>polygon<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">workPolygon</span>               <span class=\"co1\">! polygon clipped step by step </span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">y1</span>,y2    <span class=\"co1\">! vertices of edge to clip workPolygon</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>  <br/>\u00a0<br/>    <span class=\"co1\">! allocate workPolygon with the maximal possible size</span><br/>    <span class=\"co1\">!   the sum of the size of polygon ref and clip</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>workPolygon<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span> ref<span class=\"sy0\">%</span>n<span class=\"sy0\">+</span>clip<span class=\"sy0\">%</span>n , <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">!  initialise the work polygon with clip</span><br/>    workPolygon<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> clip<span class=\"sy0\">%</span>n<br/>    workPolygon<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>workPolygon<span class=\"sy0\">%</span>n,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> clip<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>workPolygon<span class=\"sy0\">%</span>n,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,ref<span class=\"sy0\">%</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"co1\">! for each edge i of the polygon ref</span><br/>      y1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> ref<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>i,<span class=\"sy0\">:</span><span class=\"br0\">)</span>   <span class=\"co1\">!  vertex 1 of edge i</span><br/>      y2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> ref<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"co1\">!  vertex 2 of edge i</span><br/>\u00a0<br/>      <span class=\"co1\">! clip the work polygon by edge i</span><br/>      <span class=\"kw1\">call</span> edgeClipping<span class=\"br0\">(</span> workPolygon, y1, y2, outputPolygon<span class=\"br0\">)</span><br/>      <span class=\"co1\">! workPolygon &lt;= outputPolygon</span><br/>      workPolygon<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> outputPolygon<span class=\"sy0\">%</span>n<br/>      workPolygon<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>workPolygon<span class=\"sy0\">%</span>n,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> outputPolygon<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>workPolygon<span class=\"sy0\">%</span>n,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> <br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>workPolygon<span class=\"sy0\">%</span>vertex<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> sutherlandHodgman<br/>\u00a0<br/>  <span class=\"co1\">! --------------------------------------------------------\u00a0!</span><br/>  <span class=\"kw1\">subroutine</span> edgeClipping<span class=\"br0\">(</span> poly, y1, y2, outputPoly <span class=\"br0\">)</span><br/>    <span class=\"co1\">! make the clipping  of the polygon by the line (x1x2)</span><br/>\u00a0<br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>polygon<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">poly</span>, outputPoly<br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">y1</span>, y2, x1, x2, intersecPoint<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span>  <span class=\"me2\">i</span>, c<br/>\u00a0<br/>    c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">! counter for the output polygon</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,poly<span class=\"sy0\">%</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"co1\">! for each edge i of poly</span><br/>      x1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> poly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>i,<span class=\"sy0\">:</span><span class=\"br0\">)</span>   <span class=\"co1\">! vertex 1 of edge i</span><br/>      x2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> poly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"co1\">! vertex 2 of edge i</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> inside<span class=\"br0\">(</span>x1, y1, y2<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"co1\">! if vertex 1 in inside clipping region</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> inside<span class=\"br0\">(</span>x2, y1, y2<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"co1\">! if vertex 2 in inside clipping region</span><br/>          <span class=\"co1\">! add the vertex 2 to the output polygon</span><br/>          c <span class=\"sy0\">=</span> c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>          outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">else</span> <span class=\"co1\">! vertex i+1 is outside</span><br/>          intersecPoint <span class=\"sy0\">=</span> intersection<span class=\"br0\">(</span>x1, x2, y1,y2<span class=\"br0\">)</span><br/>          c <span class=\"sy0\">=</span> c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>          outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> intersecPoint<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      <span class=\"kw1\">else</span> <span class=\"co1\">! vertex i is outside</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> inside<span class=\"br0\">(</span>x2, y1, y2<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          intersecPoint <span class=\"sy0\">=</span> intersection<span class=\"br0\">(</span>x1, x2, y1,y2<span class=\"br0\">)</span><br/>          c <span class=\"sy0\">=</span> c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>          outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> intersecPoint<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>\u00a0<br/>          c <span class=\"sy0\">=</span> c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>          outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"kw2\">.<span class=\"me1\">gt</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"co1\">! if the last vertice is not equal to the first one</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"sy0\">&amp;</span> <br/>           <span class=\"br0\">(</span>outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"kw1\">then</span><br/>        c<span class=\"sy0\">=</span>c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> outputPoly<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"co1\">! set the size of the outputPolygon</span><br/>    outputPoly<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> c<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> edgeClipping<br/>\u00a0<br/>  <span class=\"co1\">! --------------------------------------------------------\u00a0!</span><br/>  <span class=\"kw1\">function</span> intersection<span class=\"br0\">(</span> x1, x2, y1, y2<span class=\"br0\">)</span><br/>    <span class=\"co1\">! computes the intersection between segment [x1x2] </span><br/>    <span class=\"co1\">! and line the line (y1y2) </span><br/>\u00a0<br/>    <span class=\"co1\">! -- parameters of the function --</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x1</span>, x2, <span class=\"sy0\">&amp;</span>  <span class=\"co1\">! points of the segment</span><br/>                                      y1, y2     <span class=\"co1\">! points of the line</span><br/>\u00a0<br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">intersection</span>, vx, vy, x1y1 <br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>\u00a0<br/>    vx<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> x1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <br/>    vy<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> y2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> y1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">! if the vectors are colinear</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> crossProduct<span class=\"br0\">(</span>vx,vy<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span>.<span class=\"me1\">d0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      x1y1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> y1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> x1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">! if the the segment [x1x2] is included in the line (y1y2)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> crossProduct<span class=\"br0\">(</span>x1y1,vx<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span>.<span class=\"me1\">d0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"co1\">! the intersection is the last point of the segment</span><br/>        intersection<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">else</span> <span class=\"co1\">! the vectors are not colinear</span><br/>      <span class=\"co1\">! we want to find the inersection between [x1x2]</span><br/>      <span class=\"co1\">! and (y1,y2).</span><br/>      <span class=\"co1\">! mathematically, we want to find a in [0;1] such</span><br/>      <span class=\"co1\">! that\u00a0:</span><br/>      <span class=\"co1\">!     x1 + a vx = y1 + b vy        </span><br/>      <span class=\"co1\">! &lt;=&gt; a vx = x1y1 + b vy</span><br/>      <span class=\"co1\">! &lt;=&gt; a vx^vy = x1y1^vy      , ^ is cross product</span><br/>      <span class=\"co1\">! &lt;=&gt; a = x1y1^vy / vx^vy</span><br/>\u00a0<br/>      x1y1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> y1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> x1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <br/>      <span class=\"co1\">! we compute a</span><br/>      a <span class=\"sy0\">=</span> crossProduct<span class=\"br0\">(</span>x1y1,vy<span class=\"br0\">)</span><span class=\"sy0\">/</span>crossProduct<span class=\"br0\">(</span>vx,vy<span class=\"br0\">)</span><br/>      <span class=\"co1\">! if a is not in [0;1]</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>a <span class=\"kw2\">.<span class=\"me1\">gt</span>.</span> <span class=\"nu0\">1</span>.<span class=\"me1\">d0</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"br0\">(</span>a <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"co1\">! no intersection</span><br/>      <span class=\"kw1\">else</span><br/>        intersection<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> a<span class=\"sy0\">*</span>vx<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> intersection<br/>\u00a0<br/>\u00a0<br/>  <span class=\"co1\">! --------------------------------------------------------\u00a0!</span><br/>  <span class=\"kw1\">function</span> inside<span class=\"br0\">(</span> p, y1, y2<span class=\"br0\">)</span><br/>    <span class=\"co1\">! function that tells is the point p is at left of the line (y1y2)</span><br/>\u00a0<br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span>, y1, y2, v1, v2<br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">inside</span><br/>    v1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> y2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span>  y1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    v2<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> p<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>  <span class=\"sy0\">-</span>  y1<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>  <br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> crossProduct<span class=\"br0\">(</span>v1,v2<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">ge</span>.</span> <span class=\"nu0\">0</span>.<span class=\"me1\">d0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      inside <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>    <span class=\"kw1\">else</span> <br/>      inside <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>   <span class=\"kw1\">contains</span> <br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> inside<br/>\u00a0<br/>  <span class=\"co1\">! --------------------------------------------------------\u00a0!</span><br/>  <span class=\"kw1\">function</span> dotProduct<span class=\"br0\">(</span> v1, v2<span class=\"br0\">)</span><br/>    <span class=\"co1\">! compute the dot product of vectors v1 and v2</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">v1</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">v2</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">dotProduct</span><br/>    dotProduct <span class=\"sy0\">=</span> v1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>v2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> v1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>v2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> dotProduct<br/>\u00a0<br/>  <span class=\"co1\">! --------------------------------------------------------\u00a0!</span><br/>  <span class=\"kw1\">function</span> crossProduct<span class=\"br0\">(</span> v1, v2<span class=\"br0\">)</span><br/>    <span class=\"co1\">! compute the crossproduct of vectors v1 and v2</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">v1</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">v2</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">crossProduct</span><br/>    crossProduct <span class=\"sy0\">=</span> v1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>v2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> v1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>v2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> crossProduct<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> SutherlandHodgmanUtil<br/>\u00a0<br/><span class=\"kw1\">program</span> main<br/>\u00a0<br/>  <span class=\"co1\">! load the module for S-H algorithm</span><br/>  <span class=\"kw3\">use</span> SutherlandHodgmanUtil, <span class=\"kw1\">only</span> <span class=\"sy0\">:</span> polygon, <span class=\"sy0\">&amp;</span><br/>                                    sutherlandHodgman, <span class=\"sy0\">&amp;</span><br/>                                    edgeClipping<br/>\u00a0<br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>polygon<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p1</span>, p2, res<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span>, n <br/>  <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">y1</span>, y2<br/>\u00a0<br/>  <span class=\"co1\">! when you define a polygon, the first and the last vertices have to be the same</span><br/>\u00a0<br/>  <span class=\"co1\">! first polygon</span><br/>  p1<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>p1<span class=\"sy0\">%</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">50</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">150</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">200</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">50</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">350</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">150</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">350</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">250</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">200</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">250</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">7</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">150</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">7</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">350</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">8</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">8</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">250</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">9</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">9</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">200</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>  <span class=\"nu0\">50</span>.<span class=\"me1\">d0</span><br/>  p1<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">150</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  y1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span>, <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  y2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span>, <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">! second polygon</span><br/>  p2<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>p2<span class=\"sy0\">%</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span><br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span><br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span><br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span><br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">300</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span><br/>  p2<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"nu0\">100</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>res<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>p1<span class=\"sy0\">%</span>n<span class=\"sy0\">+</span>p2<span class=\"sy0\">%</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> sutherlandHodgman<span class=\"br0\">(</span> p2, p1, res<span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Suterland-Hodgman\"</span><br/>  <span class=\"kw1\">do</span> c<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, res<span class=\"sy0\">%</span>n<br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> res<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, res<span class=\"sy0\">%</span>vertex<span class=\"br0\">(</span>c,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>res<span class=\"sy0\">%</span>vertex<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> main<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 49, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> point <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    x<span class=\"sy1\">,</span> y <span class=\"kw4\">float32</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> subjectPolygon <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>point<span class=\"sy1\">{{</span><span class=\"nu0\">50</span><span class=\"sy1\">,</span> <span class=\"nu0\">150</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">200</span><span class=\"sy1\">,</span> <span class=\"nu0\">50</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">350</span><span class=\"sy1\">,</span> <span class=\"nu0\">150</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">350</span><span class=\"sy1\">,</span> <span class=\"nu0\">300</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">250</span><span class=\"sy1\">,</span> <span class=\"nu0\">300</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">200</span><span class=\"sy1\">,</span> <span class=\"nu0\">250</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">150</span><span class=\"sy1\">,</span> <span class=\"nu0\">350</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">250</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">200</span><span class=\"sy1\">}}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> clipPolygon <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>point<span class=\"sy1\">{{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">300</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">300</span><span class=\"sy1\">,</span> <span class=\"nu0\">300</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">300</span><span class=\"sy1\">}}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> cp1<span class=\"sy1\">,</span> cp2<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> e point<br/>    inside <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>p point<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">(</span>cp2<span class=\"sy3\">.</span>x<span class=\"sy3\">-</span>cp1<span class=\"sy3\">.</span>x<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>y<span class=\"sy3\">-</span>cp1<span class=\"sy3\">.</span>y<span class=\"sy1\">)</span> &gt; <span class=\"sy1\">(</span>cp2<span class=\"sy3\">.</span>y<span class=\"sy3\">-</span>cp1<span class=\"sy3\">.</span>y<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>x<span class=\"sy3\">-</span>cp1<span class=\"sy3\">.</span>x<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    intersection <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">(</span>p point<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        dcx<span class=\"sy1\">,</span> dcy <span class=\"sy2\">:=</span> cp1<span class=\"sy3\">.</span>x<span class=\"sy3\">-</span>cp2<span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> cp1<span class=\"sy3\">.</span>y<span class=\"sy3\">-</span>cp2<span class=\"sy3\">.</span>y<br/>        dpx<span class=\"sy1\">,</span> dpy <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>x<span class=\"sy3\">-</span>e<span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>y<span class=\"sy3\">-</span>e<span class=\"sy3\">.</span>y<br/>        n1 <span class=\"sy2\">:=</span> cp1<span class=\"sy3\">.</span>x<span class=\"sy3\">*</span>cp2<span class=\"sy3\">.</span>y <span class=\"sy3\">-</span> cp1<span class=\"sy3\">.</span>y<span class=\"sy3\">*</span>cp2<span class=\"sy3\">.</span>x<br/>        n2 <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>x<span class=\"sy3\">*</span>e<span class=\"sy3\">.</span>y <span class=\"sy3\">-</span> s<span class=\"sy3\">.</span>y<span class=\"sy3\">*</span>e<span class=\"sy3\">.</span>x<br/>        n3 <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"sy1\">(</span>dcx<span class=\"sy3\">*</span>dpy <span class=\"sy3\">-</span> dcy<span class=\"sy3\">*</span>dpx<span class=\"sy1\">)</span><br/>        p<span class=\"sy3\">.</span>x <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>n1<span class=\"sy3\">*</span>dpx <span class=\"sy3\">-</span> n2<span class=\"sy3\">*</span>dcx<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> n3<br/>        p<span class=\"sy3\">.</span>y <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>n1<span class=\"sy3\">*</span>dpy <span class=\"sy3\">-</span> n2<span class=\"sy3\">*</span>dcy<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> n3<br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    outputList <span class=\"sy2\">:=</span> subjectPolygon<br/>    cp1 <span class=\"sy2\">=</span> clipPolygon<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>clipPolygon<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> cp2 <span class=\"sy2\">=</span> <span class=\"kw1\">range</span> clipPolygon <span class=\"sy1\">{</span> <span class=\"co1\">// WP clipEdge is cp1,cp2 here</span><br/>        inputList <span class=\"sy2\">:=</span> outputList<br/>        outputList <span class=\"sy2\">=</span> <span class=\"kw2\">nil</span><br/>        s <span class=\"sy2\">=</span> inputList<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>inputList<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">=</span> <span class=\"kw1\">range</span> inputList <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> inside<span class=\"sy1\">(</span>e<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>inside<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    outputList <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>outputList<span class=\"sy1\">,</span> intersection<span class=\"sy1\">())</span><br/>                <span class=\"sy1\">}</span><br/>                outputList <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>outputList<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> inside<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                outputList <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>outputList<span class=\"sy1\">,</span> intersection<span class=\"sy1\">())</span><br/>            <span class=\"sy1\">}</span><br/>            s <span class=\"sy2\">=</span> e<br/>        <span class=\"sy1\">}</span><br/>        cp1 <span class=\"sy2\">=</span> cp2<br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>outputList<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 51, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> SuthHodgClip <span class=\"br0\">(</span>clipTo<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>\u00a0<br/><span class=\"kw1\">type</span>   Pt a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span>   Ln a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Pt a<span class=\"sy0\">,</span> Pt a<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> Poly a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Pt a<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- Return a polygon from a list of points.</span><br/>polyFrom ps <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> ps\u00a0: ps<br/>\u00a0<br/><span class=\"co1\">-- Return a list of lines from a list of points.</span><br/>linesFrom pps<span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>:ps<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> pps ps<br/>\u00a0<br/><span class=\"co1\">-- Return true if the point (x,y) is on or to the left of the oriented line</span><br/><span class=\"co1\">-- defined by (px,py) and (qx,qy).</span><br/><span class=\"br0\">(</span><span class=\"sy0\">.|</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Pt a <span class=\"sy0\">-&gt;</span> Ln a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"sy0\">.|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>px<span class=\"sy0\">,</span>py<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>qx<span class=\"sy0\">,</span>qy<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>qx<span class=\"sy0\">-</span>px<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>y<span class=\"sy0\">-</span>py<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span>qy<span class=\"sy0\">-</span>py<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">-</span>px<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Return the intersection of two lines.</span><br/><span class=\"br0\">(</span><span class=\"sy0\">&gt;&lt;</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> Ln a <span class=\"sy0\">-&gt;</span> Ln a <span class=\"sy0\">-&gt;</span> Pt a<br/><span class=\"br0\">(</span><span class=\"br0\">(</span>x1<span class=\"sy0\">,</span>y1<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>x2<span class=\"sy0\">,</span>y2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&lt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x3<span class=\"sy0\">,</span>y3<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>x4<span class=\"sy0\">,</span>y4<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span>s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x1<span class=\"sy0\">*</span>y2<span class=\"sy0\">-</span>y1<span class=\"sy0\">*</span>x2<span class=\"sy0\">,</span> x3<span class=\"sy0\">*</span>y4<span class=\"sy0\">-</span>y3<span class=\"sy0\">*</span>x4<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t<span class=\"sy0\">,</span>u<span class=\"sy0\">,</span>v<span class=\"sy0\">,</span>w<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x1<span class=\"sy0\">-</span>x2<span class=\"sy0\">,</span> y3<span class=\"sy0\">-</span>y4<span class=\"sy0\">,</span> y1<span class=\"sy0\">-</span>y2<span class=\"sy0\">,</span> x3<span class=\"sy0\">-</span>x4<span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> t<span class=\"sy0\">*</span>u<span class=\"sy0\">-</span>v<span class=\"sy0\">*</span>w <br/>    <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r<span class=\"sy0\">*</span>w<span class=\"sy0\">-</span>t<span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<span class=\"sy0\">,</span> <span class=\"br0\">(</span>r<span class=\"sy0\">*</span>u<span class=\"sy0\">-</span>v<span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">/</span>d<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Intersect the line segment (p0,p1) with the clipping line's left halfspace,</span><br/><span class=\"co1\">-- returning the point closest to p1.  In the special case where p0 lies outside</span><br/><span class=\"co1\">-- the halfspace and p1 lies inside we return both the intersection point and</span><br/><span class=\"co1\">-- p1.  This ensures we will have the necessary segment along the clipping line.</span><br/><span class=\"br0\">(</span><span class=\"sy0\">-|</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Ln a <span class=\"sy0\">-&gt;</span> Ln a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Pt a<span class=\"br0\">]</span><br/>ln<span class=\"sy0\">@</span><span class=\"br0\">(</span>p0<span class=\"sy0\">,</span> p1<span class=\"br0\">)</span> <span class=\"sy0\">-|</span> clipLn <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">case</span> <span class=\"br0\">(</span>p0 <span class=\"sy0\">.|</span> clipLn<span class=\"sy0\">,</span> p1 <span class=\"sy0\">.|</span> clipLn<span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>      <span class=\"br0\">(</span>False<span class=\"sy0\">,</span> False<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>False<span class=\"sy0\">,</span> True<span class=\"br0\">)</span>  <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>isect<span class=\"sy0\">,</span> p1<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>True<span class=\"sy0\">,</span>  False<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>isect<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>True<span class=\"sy0\">,</span>  True<span class=\"br0\">)</span>  <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>p1<span class=\"br0\">]</span><br/>    <span class=\"kw1\">where</span> isect <span class=\"sy0\">=</span> ln <span class=\"sy0\">&gt;&lt;</span> clipLn<br/>\u00a0<br/><span class=\"co1\">-- Intersect the polygon with the clipping line's left halfspace.</span><br/><span class=\"br0\">(</span><span class=\"sy0\">&lt;|</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Poly a <span class=\"sy0\">-&gt;</span> Ln a <span class=\"sy0\">-&gt;</span> Poly a<br/>poly <span class=\"sy0\">&lt;|</span> clipLn <span class=\"sy0\">=</span> polyFrom <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-|</span> clipLn<span class=\"br0\">)</span> <span class=\"br0\">(</span>linesFrom poly<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Intersect a target polygon with a clipping polygon.  The latter is assumed to</span><br/><span class=\"co1\">-- be convex.</span><br/>clipTo <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>Pt a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Pt a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Pt a<span class=\"br0\">]</span><br/>targPts `clipTo` clipPts <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> targPoly <span class=\"sy0\">=</span> polyFrom targPts<br/>        clipLines <span class=\"sy0\">=</span> linesFrom <span class=\"br0\">(</span>polyFrom clipPts<span class=\"br0\">)</span><br/>    <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a><span class=\"st0\">' (&lt;|) targPoly clipLines</span></pre>"}, {"lang": "J", "loc": 25, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. assumes counterclockwise orientation.</span><br/><span class=\"co1\">NB. determine whether point y is inside edge x.</span><br/>isinside=:<span class=\"nu0\">0</span>&lt; [:-/ .* {<a class=\"__cf_email__\" data-cfemail=\"0b254b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[ -~\"<span class=\"nu0\">1</span> {:@[,:]<br/>\u00a0<br/><span class=\"co1\">NB. (p0,:p1) intersection (p2,:p3)</span><br/>intersection=:|:@[ <span class=\"sy0\">(</span>+/ .* <span class=\"sy0\">(</span>,-.<span class=\"sy0\">))</span> [:{. ,.&amp;<span class=\"sy0\">(</span>-~/<span class=\"sy0\">)</span>\u00a0%.~ -&amp;{:<br/>\u00a0<br/>SutherlandHodgman=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span> <span class=\"co1\">NB. clip S-H subject</span><br/>  clip=.<span class=\"nu0\">2</span> ]\\ <span class=\"sy0\">(</span>,{.<span class=\"sy0\">)</span> <span class=\"kw2\">x</span><br/>  subject=.<span class=\"kw2\">y</span><br/>  <span class=\"re0\">for_edge.</span> clip <span class=\"kw1\">do.</span><br/>    S=.{:input=.subject<br/>    subject=.<span class=\"nu0\">0</span> <span class=\"nu0\">2</span>$<span class=\"nu0\">0</span><br/>    <span class=\"re0\">for_E.</span> input <span class=\"kw1\">do.</span><br/>      <span class=\"kw1\">if.</span> edge isinside E <span class=\"kw1\">do.</span><br/>        <span class=\"kw1\">if.</span> -.edge isinside S <span class=\"kw1\">do.</span><br/>          subject=.subject,edge intersection S,:E <span class=\"kw1\">end.</span><br/>        subject=.subject,E<br/>      <span class=\"kw1\">elseif.</span> edge isinside S <span class=\"kw1\">do.</span><br/>        subject=.subject,edge intersection S,:E <span class=\"kw1\">end.</span><br/>      S=.E<br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/>  subject<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 118, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.awt.geom.Line2D</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> SutherlandHodgman <span class=\"kw2\">extends</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/javax/swing/JFrame.html\"><span class=\"kw105\">JFrame</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    SutherlandHodgmanPanel panel<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/javax/swing/JFrame.html\"><span class=\"kw105\">JFrame</span></a> f = <span class=\"kw2\">new</span> SutherlandHodgman<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/javax/swing/JFrame.html\"><span class=\"kw105\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> SutherlandHodgman<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Container.html\"><span class=\"kw6\">Container</span></a> content = getContentPane<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        content.<span class=\"me1\">setLayout</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/BorderLayout.html\"><span class=\"kw6\">BorderLayout</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        panel = <span class=\"kw2\">new</span> SutherlandHodgmanPanel<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        content.<span class=\"me1\">add</span><span class=\"br0\">(</span>panel, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/BorderLayout.html\"><span class=\"kw6\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setTitle<span class=\"br0\">(</span><span class=\"st0\">\"SutherlandHodgman\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setLocationRelativeTo<span class=\"br0\">(</span><span class=\"kw4\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> SutherlandHodgmanPanel <span class=\"kw2\">extends</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/javax/swing/JPanel.html\"><span class=\"kw105\">JPanel</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> subject, clipper, result<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> SutherlandHodgmanPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Dimension.html\"><span class=\"kw6\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">600</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// these subject and clip points are assumed to be valid</span><br/>        <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> subjPoints = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">50</span>, <span class=\"nu0\">150</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">200</span>, <span class=\"nu0\">50</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">350</span>, <span class=\"nu0\">150</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">350</span>, <span class=\"nu0\">300</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span><span class=\"nu0\">250</span>, <span class=\"nu0\">300</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">200</span>, <span class=\"nu0\">250</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">150</span>, <span class=\"nu0\">350</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">100</span>, <span class=\"nu0\">250</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">100</span>, <span class=\"nu0\">200</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> clipPoints = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">300</span>, <span class=\"nu0\">100</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">300</span>, <span class=\"nu0\">300</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">100</span>, <span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        subject = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>subjPoints<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        result  = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span>subject<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        clipper = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>clipPoints<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        clipPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw3\">void</span> clipPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">int</span> len = clipper.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw3\">int</span> len2 = result.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> input = result<span class=\"sy0\">;</span><br/>            result = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span>len2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A = clipper.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i + len - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> B = clipper.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> j = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> len2<span class=\"sy0\">;</span> j++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> P = input.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">(</span>j + len2 - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Q = input.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isInside<span class=\"br0\">(</span>A, B, Q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isInside<span class=\"br0\">(</span>A, B, P<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        result.<span class=\"me1\">add</span><span class=\"br0\">(</span>intersection<span class=\"br0\">(</span>A, B, P, Q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    result.<span class=\"me1\">add</span><span class=\"br0\">(</span>Q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isInside<span class=\"br0\">(</span>A, B, P<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    result.<span class=\"me1\">add</span><span class=\"br0\">(</span>intersection<span class=\"br0\">(</span>A, B, P, Q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw3\">boolean</span> isInside<span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a, <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b, <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">return</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> intersection<span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a, <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b, <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p, <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> q<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">double</span> A1 = b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">double</span> B1 = a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">double</span> C1 = A1 <span class=\"sy0\">*</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + B1 <span class=\"sy0\">*</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">double</span> A2 = q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">double</span> B2 = p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - q<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">double</span> C2 = A2 <span class=\"sy0\">*</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + B2 <span class=\"sy0\">*</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">double</span> det = A1 <span class=\"sy0\">*</span> B2 - A2 <span class=\"sy0\">*</span> B1<span class=\"sy0\">;</span><br/>        <span class=\"kw3\">double</span> x = <span class=\"br0\">(</span>B2 <span class=\"sy0\">*</span> C1 - B1 <span class=\"sy0\">*</span> C2<span class=\"br0\">)</span> / det<span class=\"sy0\">;</span><br/>        <span class=\"kw3\">double</span> y = <span class=\"br0\">(</span>A1 <span class=\"sy0\">*</span> C2 - A2 <span class=\"sy0\">*</span> C1<span class=\"br0\">)</span> / det<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">new</span> <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>x, y<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a><br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Graphics.html\"><span class=\"kw6\">Graphics</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Graphics2D.html\"><span class=\"kw6\">Graphics2D</span></a> g2 = <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Graphics2D.html\"><span class=\"kw6\">Graphics2D</span></a><span class=\"br0\">)</span> g<span class=\"sy0\">;</span><br/>        g2.<span class=\"me1\">translate</span><span class=\"br0\">(</span><span class=\"nu0\">80</span>, <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g2.<span class=\"me1\">setStroke</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/BasicStroke.html\"><span class=\"kw6\">BasicStroke</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g2.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/RenderingHints.html\"><span class=\"kw6\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/RenderingHints.html\"><span class=\"kw6\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawPolygon<span class=\"br0\">(</span>g2, subject, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Color.html\"><span class=\"kw6\">Color</span></a>.<span class=\"me1\">blue</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawPolygon<span class=\"br0\">(</span>g2, clipper, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Color.html\"><span class=\"kw6\">Color</span></a>.<span class=\"me1\">red</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawPolygon<span class=\"br0\">(</span>g2, result, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Color.html\"><span class=\"kw6\">Color</span></a>.<span class=\"me1\">green</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw3\">void</span> drawPolygon<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Graphics2D.html\"><span class=\"kw6\">Graphics2D</span></a> g2, <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> points, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/Color.html\"><span class=\"kw6\">Color</span></a> color<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g2.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>color<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">int</span> len = points.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/geom/Line2D.html\"><span class=\"kw12\">Line2D</span></a> line = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/awt/geom/Line2D.Double.html\"><span class=\"kw12\">Line2D.<span class=\"me1\">Double</span></span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p1 = points.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p2 = points.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            line.<span class=\"me1\">setLine</span><span class=\"br0\">(</span>p1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, p2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g2.<span class=\"me1\">draw</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 71, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"sy0\">&lt;</span>html<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>head<span class=\"sy0\">&gt;</span><br/>\t<span class=\"sy0\">&lt;</span>script<span class=\"sy0\">&gt;</span><br/>        <span class=\"kw1\">function</span> clip <span class=\"br0\">(</span>subjectPolygon<span class=\"sy0\">,</span> clipPolygon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> cp1<span class=\"sy0\">,</span> cp2<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> e<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> inside <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">(</span>cp2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>cp1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>cp1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>cp2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>cp1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>cp1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> intersection <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> dc <span class=\"sy0\">=</span> <span class=\"br0\">[</span> cp1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> cp2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> cp1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> cp2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    dp <span class=\"sy0\">=</span> <span class=\"br0\">[</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> e<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> e<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    n1 <span class=\"sy0\">=</span> cp1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> cp2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> cp1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> cp2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    n2 <span class=\"sy0\">=</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> e<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> e<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>                    n3 <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>dc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> dp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> dc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> dp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>n1<span class=\"sy0\">*</span>dp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> n2<span class=\"sy0\">*</span>dc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<span class=\"sy0\">,</span> <span class=\"br0\">(</span>n1<span class=\"sy0\">*</span>dp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> n2<span class=\"sy0\">*</span>dc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> outputList <span class=\"sy0\">=</span> subjectPolygon<span class=\"sy0\">;</span><br/>            cp1 <span class=\"sy0\">=</span> clipPolygon<span class=\"br0\">[</span>clipPolygon.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> clipPolygon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> cp2 <span class=\"sy0\">=</span> clipPolygon<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">var</span> inputList <span class=\"sy0\">=</span> outputList<span class=\"sy0\">;</span><br/>                outputList <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                s <span class=\"sy0\">=</span> inputList<span class=\"br0\">[</span>inputList.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">//last on the input list</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> inputList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">var</span> e <span class=\"sy0\">=</span> inputList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inside<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>inside<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            outputList.<span class=\"me1\">push</span><span class=\"br0\">(</span>intersection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                        outputList.<span class=\"me1\">push</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inside<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        outputList.<span class=\"me1\">push</span><span class=\"br0\">(</span>intersection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    s <span class=\"sy0\">=</span> e<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                cp1 <span class=\"sy0\">=</span> cp2<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> outputList<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">function</span> drawPolygon<span class=\"br0\">(</span>context<span class=\"sy0\">,</span> polygon<span class=\"sy0\">,</span> strokeStyle<span class=\"sy0\">,</span> fillStyle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            context.<span class=\"me1\">strokeStyle</span> <span class=\"sy0\">=</span> strokeStyle<span class=\"sy0\">;</span><br/>            context.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> fillStyle<span class=\"sy0\">;</span><br/>            context.<span class=\"me1\">beginPath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            context.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>polygon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>polygon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//first vertex</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> polygon.<span class=\"me1\">length</span> <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                context.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>polygon<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>polygon<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            context.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>polygon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>polygon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//back to start</span><br/>            context.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            context.<span class=\"me1\">stroke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            context.<span class=\"me1\">closePath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        window.<span class=\"me1\">onload</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t        <span class=\"kw1\">var</span> context <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">'canvas'</span><span class=\"br0\">)</span>.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        <span class=\"kw1\">var</span> subjectPolygon <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">150</span><span class=\"sy0\">,</span> <span class=\"nu0\">350</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t            clipPolygon <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t        <span class=\"kw1\">var</span> clippedPolygon <span class=\"sy0\">=</span> clip<span class=\"br0\">(</span>subjectPolygon<span class=\"sy0\">,</span> clipPolygon<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        drawPolygon<span class=\"br0\">(</span>context<span class=\"sy0\">,</span> clipPolygon<span class=\"sy0\">,</span> <span class=\"st0\">'#888'</span><span class=\"sy0\">,</span><span class=\"st0\">'#88f'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        drawPolygon<span class=\"br0\">(</span>context<span class=\"sy0\">,</span> subjectPolygon<span class=\"sy0\">,</span> <span class=\"st0\">'#888'</span><span class=\"sy0\">,</span><span class=\"st0\">'#8f8'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        drawPolygon<span class=\"br0\">(</span>context<span class=\"sy0\">,</span> clippedPolygon<span class=\"sy0\">,</span> <span class=\"st0\">'#000'</span><span class=\"sy0\">,</span><span class=\"st0\">'#0ff'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    \t<span class=\"br0\">}</span><br/>        <span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;</span><br/>    \t<span class=\"sy0\">&lt;</span>canvas id<span class=\"sy0\">=</span><span class=\"st0\">'canvas'</span> width<span class=\"sy0\">=</span><span class=\"st0\">'400'</span> height<span class=\"sy0\">=</span><span class=\"st0\">'400'</span><span class=\"sy0\">&gt;&lt;/</span>canvas<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;/</span>body<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>html<span class=\"sy0\">&gt;</span><br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 105, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">geom</span>.<span class=\"me1\">Line2D</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> SutherlandHodgman <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> subject <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">50.0</span>, <span class=\"nu0\">150.0</span><span class=\"br0\">)</span>, doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">200.0</span>,  <span class=\"nu0\">50.0</span><span class=\"br0\">)</span>, doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">350.0</span>, <span class=\"nu0\">150.0</span><span class=\"br0\">)</span>, <br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">350.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span>, doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">250.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span>, doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">200.0</span>, <span class=\"nu0\">250.0</span><span class=\"br0\">)</span>, <br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">150.0</span>, <span class=\"nu0\">350.0</span><span class=\"br0\">)</span>, doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">250.0</span><span class=\"br0\">)</span>, doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">200.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> clipper <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">100.0</span><span class=\"br0\">)</span>, doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">300.0</span>, <span class=\"nu0\">100.0</span><span class=\"br0\">)</span>, <br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">300.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span>, doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> result <span class=\"sy0\">=</span> subject.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        preferredSize <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">600</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><br/>        clipPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun clipPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> clipper.<span class=\"me1\">size</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until len<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len2 <span class=\"sy0\">=</span> result.<span class=\"me1\">size</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> result<br/>            result <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>DoubleArray<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> clipper<span class=\"br0\">[</span><span class=\"br0\">(</span>i + len - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> clipper<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\u00a0<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until len2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> input<span class=\"br0\">[</span><span class=\"br0\">(</span>j + len2 - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len2<span class=\"br0\">]</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> input<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\u00a0<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isInside<span class=\"br0\">(</span>a, b, q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isInside<span class=\"br0\">(</span>a, b, p<span class=\"br0\">)</span><span class=\"br0\">)</span> result.<span class=\"me1\">add</span><span class=\"br0\">(</span>intersection<span class=\"br0\">(</span>a, b, p, q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    result.<span class=\"me1\">add</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span> <br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isInside<span class=\"br0\">(</span>a, b, p<span class=\"br0\">)</span><span class=\"br0\">)</span> result.<span class=\"me1\">add</span><span class=\"br0\">(</span>intersection<span class=\"br0\">(</span>a, b, p, q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun isInside<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> DoubleArray, b<span class=\"sy0\">:</span> DoubleArray, c<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun intersection<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> DoubleArray, b<span class=\"sy0\">:</span> DoubleArray, <br/>                             p<span class=\"sy0\">:</span> DoubleArray, q<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> DoubleArray <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a1 <span class=\"sy0\">=</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b1 <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c1 <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + b1 <span class=\"sy0\">*</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a2 <span class=\"sy0\">=</span> q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b2 <span class=\"sy0\">=</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - q<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c2 <span class=\"sy0\">=</span> a2 <span class=\"sy0\">*</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + b2 <span class=\"sy0\">*</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> b2 - a2 <span class=\"sy0\">*</span> b1<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b2 <span class=\"sy0\">*</span> c1 - b1 <span class=\"sy0\">*</span> c2<span class=\"br0\">)</span> / d<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> c2 - a2 <span class=\"sy0\">*</span> c1<span class=\"br0\">)</span> / d<br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> doubleArrayOf<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paintComponent<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g2 <span class=\"sy0\">=</span> g as Graphics2D         <br/>        g2.<span class=\"me1\">translate</span><span class=\"br0\">(</span><span class=\"nu0\">80</span>, <span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>        g2.<span class=\"me1\">stroke</span> <span class=\"sy0\">=</span> BasicStroke<span class=\"br0\">(</span>3.0f<span class=\"br0\">)</span><br/>        g2.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                            RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span> <br/>        drawPolygon<span class=\"br0\">(</span>g2, subject, Color.<span class=\"me1\">blue</span><span class=\"br0\">)</span><br/>        drawPolygon<span class=\"br0\">(</span>g2, clipper, Color.<span class=\"me1\">red</span><span class=\"br0\">)</span><br/>        drawPolygon<span class=\"br0\">(</span>g2, result, Color.<span class=\"me1\">green</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawPolygon<span class=\"br0\">(</span>g2<span class=\"sy0\">:</span> Graphics2D, points<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>DoubleArray<span class=\"sy0\">&gt;</span>, color<span class=\"sy0\">:</span> Color<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g2.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> color<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> points.<span class=\"me1\">size</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> Line2D.<span class=\"me1\">Double</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p1 <span class=\"sy0\">=</span> points<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p2 <span class=\"sy0\">=</span> points<span class=\"br0\">[</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len<span class=\"br0\">]</span><br/>            line.<span class=\"me1\">setLine</span><span class=\"br0\">(</span>p1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, p2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            g2.<span class=\"me1\">draw</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            defaultCloseOperation <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>            add<span class=\"br0\">(</span>SutherlandHodgman<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>            title <span class=\"sy0\">=</span> <span class=\"st0\">\"Sutherland-Hodgman\"</span><br/>            pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>            isVisible <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 62, "block": "<pre class=\"lua highlighted_source\">subjectPolygon <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">150</span><span class=\"sy0\">,</span> <span class=\"nu0\">350</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>clipPolygon <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> inside<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> cp1<span class=\"sy0\">,</span> cp2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>cp2<span class=\"sy0\">.</span>x<span class=\"sy0\">-</span>cp1<span class=\"sy0\">.</span>x<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"sy0\">.</span>y<span class=\"sy0\">-</span>cp1<span class=\"sy0\">.</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>cp2<span class=\"sy0\">.</span>y<span class=\"sy0\">-</span>cp1<span class=\"sy0\">.</span>y<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"sy0\">.</span>x<span class=\"sy0\">-</span>cp1<span class=\"sy0\">.</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> intersection<span class=\"br0\">(</span>cp1<span class=\"sy0\">,</span> cp2<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> dcx<span class=\"sy0\">,</span> dcy <span class=\"sy0\">=</span> cp1<span class=\"sy0\">.</span>x<span class=\"sy0\">-</span>cp2<span class=\"sy0\">.</span>x<span class=\"sy0\">,</span> cp1<span class=\"sy0\">.</span>y<span class=\"sy0\">-</span>cp2<span class=\"sy0\">.</span>y<br/>  <span class=\"kw1\">local</span> dpx<span class=\"sy0\">,</span> dpy <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span>x<span class=\"sy0\">-</span>e<span class=\"sy0\">.</span>x<span class=\"sy0\">,</span> s<span class=\"sy0\">.</span>y<span class=\"sy0\">-</span>e<span class=\"sy0\">.</span>y<br/>  <span class=\"kw1\">local</span> n1 <span class=\"sy0\">=</span> cp1<span class=\"sy0\">.</span>x<span class=\"sy0\">*</span>cp2<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> cp1<span class=\"sy0\">.</span>y<span class=\"sy0\">*</span>cp2<span class=\"sy0\">.</span>x<br/>  <span class=\"kw1\">local</span> n2 <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span>x<span class=\"sy0\">*</span>e<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> s<span class=\"sy0\">.</span>y<span class=\"sy0\">*</span>e<span class=\"sy0\">.</span>x<br/>  <span class=\"kw1\">local</span> n3 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>dcx<span class=\"sy0\">*</span>dpy <span class=\"sy0\">-</span> dcy<span class=\"sy0\">*</span>dpx<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n1<span class=\"sy0\">*</span>dpx <span class=\"sy0\">-</span> n2<span class=\"sy0\">*</span>dcx<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<br/>  <span class=\"kw1\">local</span> y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n1<span class=\"sy0\">*</span>dpy <span class=\"sy0\">-</span> n2<span class=\"sy0\">*</span>dcy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">{</span>x<span class=\"sy0\">=</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">=</span>y<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> clip<span class=\"br0\">(</span>subjectPolygon<span class=\"sy0\">,</span> clipPolygon<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> outputList <span class=\"sy0\">=</span> subjectPolygon<br/>  <span class=\"kw1\">local</span> cp1 <span class=\"sy0\">=</span> clipPolygon<span class=\"br0\">[</span><span class=\"sy0\">#</span>clipPolygon<span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> cp2 <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>clipPolygon<span class=\"br0\">)</span> <span class=\"kw1\">do</span>  <span class=\"co1\">-- WP clipEdge is cp1,cp2 here</span><br/>    <span class=\"kw1\">local</span> inputList <span class=\"sy0\">=</span> outputList<br/>    outputList <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> s <span class=\"sy0\">=</span> inputList<span class=\"br0\">[</span><span class=\"sy0\">#</span>inputList<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> e <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>inputList<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> inside<span class=\"br0\">(</span>e<span class=\"sy0\">,</span> cp1<span class=\"sy0\">,</span> cp2<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> inside<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> cp1<span class=\"sy0\">,</span> cp2<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          outputList<span class=\"br0\">[</span><span class=\"sy0\">#</span>outputList<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> intersection<span class=\"br0\">(</span>cp1<span class=\"sy0\">,</span> cp2<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        outputList<span class=\"br0\">[</span><span class=\"sy0\">#</span>outputList<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> e<br/>      <span class=\"kw1\">elseif</span> inside<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> cp1<span class=\"sy0\">,</span> cp2<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        outputList<span class=\"br0\">[</span><span class=\"sy0\">#</span>outputList<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> intersection<span class=\"br0\">(</span>cp1<span class=\"sy0\">,</span> cp2<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>      s <span class=\"sy0\">=</span> e<br/>    <span class=\"kw1\">end</span><br/>    cp1 <span class=\"sy0\">=</span> cp2<br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> outputList<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> mkpoints<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> p <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      p<span class=\"sy0\">.</span>x<span class=\"sy0\">,</span> p<span class=\"sy0\">.</span>y <span class=\"sy0\">=</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  mkpoints<span class=\"br0\">(</span>subjectPolygon<span class=\"br0\">)</span><br/>  mkpoints<span class=\"br0\">(</span>clipPolygon<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">local</span> outputList <span class=\"sy0\">=</span> clip<span class=\"br0\">(</span>subjectPolygon<span class=\"sy0\">,</span> clipPolygon<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> p <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>outputList<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'{%f,\u00a0%f},'</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw3\">format</span><span class=\"br0\">(</span>p<span class=\"sy0\">.</span>x<span class=\"sy0\">,</span> p<span class=\"sy0\">.</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">p1 = Polygon[{{50, 150}, {200, 50}, {350, 150}, {350, 300}, {250, 300}, {200, 250}, {150, 350}, {100, 250}, {100, 200}}];<br/>p2 = Polygon[{{100, 100}, {300, 100}, {300, 300}, {100, 300}}];<br/>\u00a0<br/>RegionIntersection[p1, p2]<br/>\u00a0<br/>Graphics[{Red, p1, Blue, p2, Green, RegionIntersection[p1, p2]}]</pre>"}, {"lang": "MATLAB / Octave", "loc": 87, "block": "<pre class=\"matlab highlighted_source\"><span class=\"co1\">%The inputs are a table of x-y pairs for the verticies of the subject</span><br/><span class=\"co1\">%polygon and boundary polygon. (x values in column 1 and y values in column</span><br/><span class=\"co1\">%2) The output is a table of x-y pairs for the clipped version of the </span><br/><span class=\"co1\">%subject polygon.</span><br/>\u00a0<br/><span class=\"kw1\">function</span> clippedPolygon = sutherlandHodgman<span class=\"br0\">(</span>subjectPolygon,clipPolygon<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">%% Helper Functions</span><br/>\u00a0<br/>    <span class=\"co1\">%computerIntersection() assumes the two lines intersect</span><br/>    <span class=\"kw1\">function</span> intersection = computeIntersection<span class=\"br0\">(</span>line1,line2<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">%this is an implementation of</span><br/>        <span class=\"co1\">%http://en.wikipedia.org/wiki/Line-line_intersection</span><br/>\u00a0<br/>        intersection = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>        detL1 = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span>line1<span class=\"br0\">)</span>;<br/>        detL2 = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span>line2<span class=\"br0\">)</span>;<br/>\u00a0<br/>        detL1x = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>line1<span class=\"br0\">(</span>:,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>;<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        detL1y = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>line1<span class=\"br0\">(</span>:,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>;<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>        detL2x = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>line2<span class=\"br0\">(</span>:,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>;<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        detL2y = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>line2<span class=\"br0\">(</span>:,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>;<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>        denominator = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>detL1x detL1y;detL2x detL2y<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>        intersection<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>detL1 detL1x;detL2 detL2x<span class=\"br0\">]</span><span class=\"br0\">)</span> / denominator;<br/>        intersection<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/det.html\"><span class=\"kw2\">det</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>detL1 detL1y;detL2 detL2y<span class=\"br0\">]</span><span class=\"br0\">)</span> / denominator;<br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%computeIntersection</span><br/>\u00a0<br/>    <span class=\"co1\">%inside() assumes the boundary is oriented counter-clockwise</span><br/>    <span class=\"kw1\">function</span> in = inside<span class=\"br0\">(</span>point,boundary<span class=\"br0\">)</span><br/>\u00a0<br/>        pointPositionVector = <span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diff.html\"><span class=\"kw2\">diff</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>point;boundary<span class=\"br0\">(</span><span class=\"nu0\">1</span>,:<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>        boundaryVector = <span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diff.html\"><span class=\"kw2\">diff</span></a><span class=\"br0\">(</span>boundary<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>        crossVector = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cross.html\"><span class=\"kw2\">cross</span></a><span class=\"br0\">(</span>pointPositionVector,boundaryVector<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> crossVector<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> &lt;= <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>            in = true;<br/>        <span class=\"kw1\">else</span><br/>            in = false;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%inside</span><br/>\u00a0<br/><span class=\"co1\">%% Sutherland-Hodgman Algorithm</span><br/>\u00a0<br/>    clippedPolygon = subjectPolygon;<br/>    numVerticies = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>clipPolygon,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    clipVertexPrevious = clipPolygon<span class=\"br0\">(</span><span class=\"kw1\">end</span>,:<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span> clipVertex = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:numVerticies<span class=\"br0\">)</span><br/>\u00a0<br/>        clipBoundary = <span class=\"br0\">[</span>clipPolygon<span class=\"br0\">(</span>clipVertex,:<span class=\"br0\">)</span>\u00a0; clipVertexPrevious<span class=\"br0\">]</span>;<br/>\u00a0<br/>        inputList = clippedPolygon;<br/>\u00a0<br/>        clippedPolygon = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>        <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span>inputList<span class=\"br0\">)</span>,<br/>            previousVertex = inputList<span class=\"br0\">(</span><span class=\"kw1\">end</span>,:<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> subjectVertex = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>inputList,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> inside<span class=\"br0\">(</span>inputList<span class=\"br0\">(</span>subjectVertex,:<span class=\"br0\">)</span>,clipBoundary<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span> not<span class=\"br0\">(</span>inside<span class=\"br0\">(</span>previousVertex,clipBoundary<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <br/>                    subjectLineSegment = <span class=\"br0\">[</span>previousVertex;inputList<span class=\"br0\">(</span>subjectVertex,:<span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>                    clippedPolygon<span class=\"br0\">(</span><span class=\"kw1\">end</span>+<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>:<span class=\"nu0\">2</span><span class=\"br0\">)</span> = computeIntersection<span class=\"br0\">(</span>clipBoundary,subjectLineSegment<span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">end</span><br/>\u00a0<br/>                clippedPolygon<span class=\"br0\">(</span><span class=\"kw1\">end</span>+<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>:<span class=\"nu0\">2</span><span class=\"br0\">)</span> = inputList<span class=\"br0\">(</span>subjectVertex,:<span class=\"br0\">)</span>;<br/>\u00a0<br/>            <span class=\"kw1\">elseif</span><span class=\"br0\">(</span> inside<span class=\"br0\">(</span>previousVertex,clipBoundary<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                    subjectLineSegment = <span class=\"br0\">[</span>previousVertex;inputList<span class=\"br0\">(</span>subjectVertex,:<span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>                    clippedPolygon<span class=\"br0\">(</span><span class=\"kw1\">end</span>+<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>:<span class=\"nu0\">2</span><span class=\"br0\">)</span> = computeIntersection<span class=\"br0\">(</span>clipBoundary,subjectLineSegment<span class=\"br0\">)</span>;                            <br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            previousVertex = inputList<span class=\"br0\">(</span>subjectVertex,:<span class=\"br0\">)</span>;<br/>            clipVertexPrevious = clipPolygon<span class=\"br0\">(</span>clipVertex,:<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%for subject verticies                </span><br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%for boundary verticies</span><br/><span class=\"kw1\">end</span> <span class=\"co1\">%sutherlandHodgman</span></pre>"}, {"lang": "OCaml", "loc": 51, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> is_inside <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ax,ay<span class=\"br0\">)</span>, <span class=\"br0\">(</span>bx,by<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>bx <span class=\"sy0\">-.</span> ax<span class=\"br0\">)</span> <span class=\"sy0\">*.</span> <span class=\"br0\">(</span>y <span class=\"sy0\">-.</span> ay<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>by <span class=\"sy0\">-.</span> ay<span class=\"br0\">)</span> <span class=\"sy0\">*.</span> <span class=\"br0\">(</span>x <span class=\"sy0\">-.</span> ax<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> intersection <span class=\"br0\">(</span>sx,sy<span class=\"br0\">)</span> <span class=\"br0\">(</span>ex,ey<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ax,ay<span class=\"br0\">)</span>, <span class=\"br0\">(</span>bx,by<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> dc_x, dc_y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ax <span class=\"sy0\">-.</span> bx, ay <span class=\"sy0\">-.</span> by<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> dp_x, dp_y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sx <span class=\"sy0\">-.</span> ex, sy <span class=\"sy0\">-.</span> ey<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> n1 <span class=\"sy0\">=</span> ax <span class=\"sy0\">*.</span> by <span class=\"sy0\">-.</span> ay <span class=\"sy0\">*.</span> bx <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> n2 <span class=\"sy0\">=</span> sx <span class=\"sy0\">*.</span> ey <span class=\"sy0\">-.</span> sy <span class=\"sy0\">*.</span> ex <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> n3 <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> <span class=\"br0\">(</span>dc_x <span class=\"sy0\">*.</span> dp_y <span class=\"sy0\">-.</span> dc_y <span class=\"sy0\">*.</span> dp_x<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>n1 <span class=\"sy0\">*.</span> dp_x <span class=\"sy0\">-.</span> n2 <span class=\"sy0\">*.</span> dc_x<span class=\"br0\">)</span> <span class=\"sy0\">*.</span> n3,<br/>   <span class=\"br0\">(</span>n1 <span class=\"sy0\">*.</span> dp_y <span class=\"sy0\">-.</span> n2 <span class=\"sy0\">*.</span> dc_y<span class=\"br0\">)</span> <span class=\"sy0\">*.</span> n3<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> last lst <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>hd <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev lst<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> polygon_iter_edges poly f init <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> poly <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> init <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">let</span> p0 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>hd poly <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux acc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>      <span class=\"sy0\">|</span> p1 <span class=\"sy0\">::</span> p2 <span class=\"sy0\">::</span> tl <span class=\"sy0\">-&gt;</span> aux <span class=\"br0\">(</span>f <span class=\"br0\">(</span>p1, p2<span class=\"br0\">)</span> acc<span class=\"br0\">)</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">::</span> tl<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> p <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>p, p0<span class=\"br0\">)</span> acc<br/>      <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> acc<br/>    <span class=\"kw1\">in</span><br/>    aux init poly<br/>\u00a0<br/><span class=\"kw1\">let</span> poly_clip subject_polygon clip_polygon <span class=\"sy0\">=</span><br/>  polygon_iter_edges clip_polygon <span class=\"br0\">(</span><span class=\"kw1\">fun</span> clip_edge input_list <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfst\"><span class=\"kw3\">fst</span></a> <span class=\"br0\">(</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>out, s<span class=\"br0\">)</span> e <span class=\"sy0\">-&gt;</span><br/>\u00a0<br/>        <span class=\"kw1\">match</span> <span class=\"br0\">(</span>is_inside e clip_edge<span class=\"br0\">)</span>, <span class=\"br0\">(</span>is_inside s clip_edge<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">true</span>, <span class=\"kw1\">false</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>e <span class=\"sy0\">::</span> <span class=\"br0\">(</span>intersection s e clip_edge<span class=\"br0\">)</span> <span class=\"sy0\">::</span> out<span class=\"br0\">)</span>, e<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">true</span>, <span class=\"kw1\">true</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>e <span class=\"sy0\">::</span> out<span class=\"br0\">)</span>, e<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">false</span>, <span class=\"kw1\">true</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>intersection s e clip_edge<span class=\"br0\">)</span> <span class=\"sy0\">::</span> out<span class=\"br0\">)</span>, e<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">false</span>, <span class=\"kw1\">false</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>out, e<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, last input_list<span class=\"br0\">)</span> input_list<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">)</span> subject_polygon<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> subject_polygon <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"nu0\">50.0</span>, <span class=\"nu0\">150.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">200.0</span>,  <span class=\"nu0\">50.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">350.0</span>, <span class=\"nu0\">150.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">350.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">250.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">200.0</span>, <span class=\"nu0\">250.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">150.0</span>, <span class=\"nu0\">350.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">250.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">200.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> clip_polygon <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">100.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">300.0</span>, <span class=\"nu0\">100.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">300.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">100.0</span>, <span class=\"nu0\">300.0</span><span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\" (%g,\u00a0%g)\\n\"</span> x y<span class=\"sy0\">;</span><br/>    <span class=\"br0\">)</span> <span class=\"br0\">(</span>poly_clip subject_polygon clip_polygon<span class=\"br0\">)</span></pre>"}, {"lang": "Phix", "loc": 109, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Sutherland_Hodgman_polygon_clipping.exw<br/>--<br/>enum X,Y<br/>\u00a0<br/>function inside(sequence cp1, sequence cp2, sequence p)<br/>    return (cp2[X]-cp1[X])*(p[Y]-cp1[Y])&gt;(cp2[Y]-cp1[Y])*(p[X]-cp1[X])<br/>end function<br/>\u00a0<br/>function intersection(sequence cp1, sequence cp2, sequence s, sequence e)<br/>atom {dcx,dcy} = {cp1[X]-cp2[X],cp1[Y]-cp2[Y]},<br/>     {dpx,dpy} = {s[X]-e[X],s[Y]-e[Y]},<br/>     n1 = cp1[X]*cp2[Y]-cp1[Y]*cp2[X],<br/>     n2 = s[X]*e[Y]-s[Y]*e[X],<br/>     n3 = 1/(dcx*dpy-dcy*dpx)<br/>    return {(n1*dpx-n2*dcx)*n3,(n1*dpy-n2*dcy)*n3}<br/>end function<br/>\u00a0<br/>function sutherland_hodgman(sequence subjectPolygon, sequence clipPolygon)<br/>sequence cp1, cp2, s, e, inputList, outputList = subjectPolygon<br/>    cp1 = clipPolygon[$]<br/>    for i=1 to length(clipPolygon) do<br/>        cp2 = clipPolygon[i]<br/>        inputList = outputList<br/>        outputList = {}<br/>        s = inputList[$]<br/>        for j=1 to length(inputList) do<br/>            e = inputList[j]<br/>            if inside(cp1,cp2,e) then<br/>                if not inside(cp1,cp2,s) then<br/>                    outputList = append(outputList,intersection(cp1,cp2,s,e))<br/>                end if<br/>                outputList = append(outputList,e)<br/>            elsif inside(cp1,cp2,s) then<br/>                outputList = append(outputList,intersection(cp1,cp2,s,e))<br/>            end if<br/>            s = e<br/>        end for<br/>        cp1 = cp2<br/>    end for<br/>    return outputList<br/>end function<br/>\u00a0<br/>constant subjectPolygon = {{50, 150}, {200, 50}, {350, 150}, {350, 300},<br/>                           {250, 300}, {200, 250}, {150, 350}, {100, 250},<br/>                           {100, 200}},<br/>         clipPolygon = {{100, 100}, {300, 100}, {300, 300}, {100, 300}}<br/>\u00a0<br/>sequence clippedPolygon = sutherland_hodgman(subjectPolygon,clipPolygon)<br/>\u00a0<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>procedure draw_poly(sequence poly)<br/>    cdCanvasBegin(cddbuffer,CD_FILL)<br/>    for i=1 to length(poly) do<br/>        atom {x,y} = poly[i]<br/>        cdCanvasVertex(cddbuffer,x,y)<br/>    end for<br/>    cdCanvasEnd(cddbuffer)<br/>end procedure<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>    cdCanvasActivate(cddbuffer)<br/>    cdCanvasClear(cddbuffer)<br/>    cdCanvasSetForeground(cddbuffer, CD_CYAN)<br/>    draw_poly(subjectPolygon)<br/>    cdCanvasSetForeground(cddbuffer, CD_MAGENTA)<br/>    draw_poly(clipPolygon)<br/>    cdCanvasSetForeground(cddbuffer, CD_ORANGE)<br/>    draw_poly(clippedPolygon)<br/>    cdCanvasFlush(cddbuffer)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    cdCanvasSetBackground(cddbuffer, CD_WHITE)<br/>    cdCanvasSetForeground(cddbuffer, CD_GRAY)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"400x400\")<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    dlg = IupDialog(canvas)<br/>    IupSetAttribute(dlg, \"TITLE\", \"Sutherland-Hodgman polygon clipping\")<br/>    IupSetAttribute(dlg, \"RESIZE\", \"NO\")<br/>    IupSetCallback(dlg, \"K_ANY\", Icallback(\"esc_close\"))<br/>\u00a0<br/>    IupShow(dlg)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "PHP", "loc": 49, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> clip <span class=\"br0\">(</span><span class=\"re0\">$subjectPolygon</span><span class=\"sy0\">,</span> <span class=\"re0\">$clipPolygon</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">function</span> inside <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp1</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$cp2</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"re0\">$cp1</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"re0\">$cp1</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$cp2</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"re0\">$cp1</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"re0\">$cp1</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">function</span> intersection <span class=\"br0\">(</span><span class=\"re0\">$cp1</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp2</span><span class=\"sy0\">,</span> <span class=\"re0\">$e</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$dc</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"re0\">$cp1</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$cp2</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp1</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$cp2</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$dp</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$e</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$e</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$n1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cp1</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cp2</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$cp1</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cp2</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$n2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$e</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$e</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$n3</span> <span class=\"sy0\">=</span> <span class=\"nu19\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$dc</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$dp</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$dc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$dp</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$n1</span><span class=\"sy0\">*</span><span class=\"re0\">$dp</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$n2</span><span class=\"sy0\">*</span><span class=\"re0\">$dc</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n3</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$n1</span><span class=\"sy0\">*</span><span class=\"re0\">$dp</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$n2</span><span class=\"sy0\">*</span><span class=\"re0\">$dc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$outputList</span> <span class=\"sy0\">=</span> <span class=\"re0\">$subjectPolygon</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$cp1</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/end\"><span class=\"kw3\">end</span></a><span class=\"br0\">(</span><span class=\"re0\">$clipPolygon</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$clipPolygon</span> <span class=\"kw1\">as</span> <span class=\"re0\">$cp2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$inputList</span> <span class=\"sy0\">=</span> <span class=\"re0\">$outputList</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$outputList</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/end\"><span class=\"kw3\">end</span></a><span class=\"br0\">(</span><span class=\"re0\">$inputList</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$inputList</span> <span class=\"kw1\">as</span> <span class=\"re0\">$e</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inside<span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp1</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>inside<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp1</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$outputList</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> intersection<span class=\"br0\">(</span><span class=\"re0\">$cp1</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp2</span><span class=\"sy0\">,</span> <span class=\"re0\">$e</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"re0\">$outputList</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$e</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inside<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp1</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$outputList</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> intersection<span class=\"br0\">(</span><span class=\"re0\">$cp1</span><span class=\"sy0\">,</span> <span class=\"re0\">$cp2</span><span class=\"sy0\">,</span> <span class=\"re0\">$e</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"re0\">$e</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$cp1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cp2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$outputList</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$subjectPolygon</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">350</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">150</span><span class=\"sy0\">,</span> <span class=\"nu0\">350</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$clipPolygon</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$clippedPolygon</span> <span class=\"sy0\">=</span> clip<span class=\"br0\">(</span><span class=\"re0\">$subjectPolygon</span><span class=\"sy0\">,</span> <span class=\"re0\">$clipPolygon</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/json_encode\"><span class=\"kw3\">json_encode</span></a><span class=\"br0\">(</span><span class=\"re0\">$clippedPolygon</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 84, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> point_f<br/>  x.f<br/>  y.f<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> isInside<span class=\"br0\">(</span><span class=\"sy0\">*</span>p.point_f, <span class=\"sy0\">*</span>cp1.point_f, <span class=\"sy0\">*</span>cp2.point_f<span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>cp2<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>cp1<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>cp1<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>cp2<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>cp1<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>cp1<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> intersection<span class=\"br0\">(</span><span class=\"sy0\">*</span>cp1.point_f, <span class=\"sy0\">*</span>cp2.point_f, <span class=\"sy0\">*</span>s.point_f, <span class=\"sy0\">*</span>e.point_f, <span class=\"sy0\">*</span>newPoint.point_f<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.point_f dc, dp<br/>  <span class=\"kw1\">Protected</span>.f n1, n2, n3<br/>  dc<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>cp1<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>cp2<span class=\"sy0\">\\</span>x: dc<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>cp1<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>cp2<span class=\"sy0\">\\</span>y<br/>  dp<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>e<span class=\"sy0\">\\</span>x: dp<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>e<span class=\"sy0\">\\</span>y<br/>  n1 <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>cp1<span class=\"sy0\">\\</span>x <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>cp2<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>cp1<span class=\"sy0\">\\</span>y <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>cp2<span class=\"sy0\">\\</span>x<br/>  n2 <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">\\</span>x <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>e<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">\\</span>y <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>e<span class=\"sy0\">\\</span>x<br/>  n3 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>dc<span class=\"sy0\">\\</span>x <span class=\"sy0\">*</span> dp<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> dc<span class=\"sy0\">\\</span>y <span class=\"sy0\">*</span> dp<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>newPoint<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n1 <span class=\"sy0\">*</span> dp<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> n2 <span class=\"sy0\">*</span> dc<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3: <span class=\"sy0\">*</span>newPoint<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n1 <span class=\"sy0\">*</span> dp<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> n2 <span class=\"sy0\">*</span> dc<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> clip<span class=\"br0\">(</span>List vPolygon.point_f<span class=\"br0\">(</span><span class=\"br0\">)</span>, List vClippedBy.point_f<span class=\"br0\">(</span><span class=\"br0\">)</span>, List vClippedPolygon.point_f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.point_f cp1, cp2, s, e, newPoint<br/>  CopyList<span class=\"br0\">(</span>vPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span>, vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>vClippedBy<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    cp1 <span class=\"sy0\">=</span> vClippedBy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">NewList</span> vPreClipped.point_f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ForEach</span> vClippedBy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      cp2 <span class=\"sy0\">=</span> vClippedBy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      CopyList<span class=\"br0\">(</span>vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span>, vPreClipped<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>vPreClipped<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        s <span class=\"sy0\">=</span> vPreClipped<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ForEach</span> vPreClipped<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          e <span class=\"sy0\">=</span> vPreClipped<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> isInside<span class=\"br0\">(</span>e, cp1, cp2<span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> isInside<span class=\"br0\">(</span>s, cp1, cp2<span class=\"br0\">)</span><br/>              intersection<span class=\"br0\">(</span>cp1, cp2, s, e, newPoint<span class=\"br0\">)</span><br/>              <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> newPoint<br/>            <span class=\"kw1\">EndIf</span> <br/>            <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> e<br/>          <span class=\"kw1\">ElseIf</span> isInside<span class=\"br0\">(</span>s, cp1, cp2<span class=\"br0\">)</span><br/>            intersection<span class=\"br0\">(</span>cp1, cp2, s, e, newPoint<span class=\"br0\">)</span><br/>            <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: vClippedPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> newPoint<br/>          <span class=\"kw1\">EndIf</span> <br/>          s <span class=\"sy0\">=</span> e<br/>        <span class=\"kw1\">Next</span><br/>      <span class=\"kw1\">EndIf</span> <br/>      cp1 <span class=\"sy0\">=</span> cp2<br/>    <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>  <span class=\"kw1\">Data</span>.f <span class=\"nu0\">50</span>,<span class=\"nu0\">150</span>, <span class=\"nu0\">200</span>,<span class=\"nu0\">50</span>, <span class=\"nu0\">350</span>,<span class=\"nu0\">150</span>, <span class=\"nu0\">350</span>,<span class=\"nu0\">300</span>, <span class=\"nu0\">250</span>,<span class=\"nu0\">300</span>, <span class=\"nu0\">200</span>,<span class=\"nu0\">250</span>, <span class=\"nu0\">150</span>,<span class=\"nu0\">350</span>, <span class=\"nu0\">100</span>,<span class=\"nu0\">250</span>, <span class=\"nu0\">100</span>,<span class=\"nu0\">200</span> <span class=\"co1\">;subjectPolygon's vertices (x,y)</span><br/>  <span class=\"kw1\">Data</span>.f <span class=\"nu0\">100</span>,<span class=\"nu0\">100</span>, <span class=\"nu0\">300</span>,<span class=\"nu0\">100</span>, <span class=\"nu0\">300</span>,<span class=\"nu0\">300</span>, <span class=\"nu0\">100</span>,<span class=\"nu0\">300</span> <span class=\"co1\">;clipPolygon's vertices (x,y)</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"kw1\">NewList</span> subjectPolygon.point_f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>subjectPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Read</span>.f subjectPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x<br/>  <span class=\"kw1\">Read</span>.f subjectPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<br/><span class=\"kw1\">Next</span> <br/>\u00a0<br/><span class=\"kw1\">NewList</span> clipPolygon.point_f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>clipPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Read</span>.f clipPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x<br/>  <span class=\"kw1\">Read</span>.f clipPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<br/><span class=\"kw1\">Next</span> <br/>\u00a0<br/><span class=\"kw1\">NewList</span> newPolygon.point_f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>clip<span class=\"br0\">(</span>subjectPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span>, clipPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span>, newPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> newPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrF</span><span class=\"br0\">(</span>newPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrF</span><span class=\"br0\">(</span>newPolygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 34, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> clip<span class=\"br0\">(</span>subjectPolygon<span class=\"sy0\">,</span> clipPolygon<span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> inside<span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">return</span><span class=\"br0\">(</span>cp2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>-cp1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>*<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>-cp1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>cp2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>-cp1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>*<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>-cp1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> computeIntersection<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>      dc <span class=\"sy0\">=</span> <span class=\"br0\">[</span> cp1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - cp2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> cp1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - cp2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>      dp <span class=\"sy0\">=</span> <span class=\"br0\">[</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - e<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - e<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>      n1 <span class=\"sy0\">=</span> cp1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * cp2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - cp1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> * cp2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      n2 <span class=\"sy0\">=</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * e<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> * e<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <br/>      n3 <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> / <span class=\"br0\">(</span>dc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * dp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - dc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> * dp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>n1*dp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - n2*dc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> * n3<span class=\"sy0\">,</span> <span class=\"br0\">(</span>n1*dp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - n2*dc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> * n3<span class=\"br0\">]</span><br/>\u00a0<br/>   outputList <span class=\"sy0\">=</span> subjectPolygon<br/>   cp1 <span class=\"sy0\">=</span> clipPolygon<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span> clipVertex <span class=\"kw1\">in</span> clipPolygon:<br/>      cp2 <span class=\"sy0\">=</span> clipVertex<br/>      inputList <span class=\"sy0\">=</span> outputList<br/>      outputList <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      s <span class=\"sy0\">=</span> inputList<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span> subjectVertex <span class=\"kw1\">in</span> inputList:<br/>         e <span class=\"sy0\">=</span> subjectVertex<br/>         <span class=\"kw1\">if</span> inside<span class=\"br0\">(</span>e<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> inside<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>               outputList.<span class=\"me1\">append</span><span class=\"br0\">(</span>computeIntersection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            outputList.<span class=\"me1\">append</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>         <span class=\"kw1\">elif</span> inside<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>            outputList.<span class=\"me1\">append</span><span class=\"br0\">(</span>computeIntersection<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         s <span class=\"sy0\">=</span> e<br/>      cp1 <span class=\"sy0\">=</span> cp2<br/>   <span class=\"kw1\">return</span><span class=\"br0\">(</span>outputList<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 57, "block": "<pre class=\"scheme highlighted_source\">#lang racket<br/>\u00a0<br/><span class=\"br0\">(</span>module sutherland<span class=\"sy0\">-</span>hodgman racket<br/>  <span class=\"br0\">(</span>provide clip<span class=\"sy0\">-</span>to<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>provide make<span class=\"sy0\">-</span>edges<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>provide <span class=\"br0\">(</span>struct<span class=\"sy0\">-</span>out point<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>struct point <span class=\"br0\">(</span>x y<span class=\"br0\">)</span> #:transparent<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>struct edge <span class=\"br0\">(</span>p1 p2<span class=\"br0\">)</span> #:transparent<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>struct polygon <span class=\"br0\">(</span>points edges<span class=\"br0\">)</span> #:transparent<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>edges points<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>points<span class=\"sy0\">-</span>shifted<br/>\t   <span class=\"br0\">(</span>match points<br/>\t     <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">list</span> a b ...<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> b <span class=\"br0\">(</span><span class=\"kw1\">list</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">map</span> edge points points<span class=\"sy0\">-</span>shifted<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>point<span class=\"sy0\">-</span>left? pt ln<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>match<span class=\"sy0\">-</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span>point x y<span class=\"br0\">)</span> pt<span class=\"br0\">]</span><br/>                <span class=\"br0\">[</span><span class=\"br0\">(</span>edge <span class=\"br0\">(</span>point px py<span class=\"br0\">)</span> <span class=\"br0\">(</span>point qx qy<span class=\"br0\">)</span><span class=\"br0\">)</span> ln<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> qx px<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> y py<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> qy py<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x px<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">;; Return the intersection of two lines</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>isect<span class=\"sy0\">-</span>lines l1 l2<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>match<span class=\"sy0\">-</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span>edge <span class=\"br0\">(</span>point x1 y1<span class=\"br0\">)</span> <span class=\"br0\">(</span>point x2 y2<span class=\"br0\">)</span><span class=\"br0\">)</span> l1<span class=\"br0\">]</span><br/>                <span class=\"br0\">[</span><span class=\"br0\">(</span>edge <span class=\"br0\">(</span>point x3 y3<span class=\"br0\">)</span> <span class=\"br0\">(</span>point x4 y4<span class=\"br0\">)</span><span class=\"br0\">)</span> l2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>r <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> x1 y2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> y1 x2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">s</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> x3 y4<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> y3 x4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                      <span class=\"br0\">[</span><span class=\"kw1\">t</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x1 x2<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>u <span class=\"br0\">(</span><span class=\"sy0\">-</span> y3 y4<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>v <span class=\"br0\">(</span><span class=\"sy0\">-</span> y1 y2<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>w <span class=\"br0\">(</span><span class=\"sy0\">-</span> x3 x4<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                      <span class=\"br0\">[</span><span class=\"kw1\">d</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"kw1\">t</span> u<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> v w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>point <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> r w<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"kw1\">t</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> r u<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> v <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">;; Intersect the line segment (p0,p1) with the clipping line's left halfspace, </span><br/>  <span class=\"co1\">;; returning the point closest to p1.  In the special case where p0 lies outside  </span><br/>  <span class=\"co1\">;; the halfspace and p1 lies inside we return both the intersection point and p1.  </span><br/>  <span class=\"co1\">;; This ensures we will have the necessary segment along the clipping line.</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>intersect segment clip<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>isect<span class=\"br0\">)</span> <span class=\"br0\">(</span>isect<span class=\"sy0\">-</span>lines segment clip<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>match<span class=\"sy0\">-</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span>edge p0 p1<span class=\"br0\">)</span> segment<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>match<span class=\"sy0\">/</span>values <span class=\"br0\">(</span>values <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>point<span class=\"sy0\">-</span>left? p0 clip<span class=\"sy0\">-</span>line<span class=\"br0\">)</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>point<span class=\"sy0\">-</span>left? p1 clip<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">[</span><span class=\"br0\">(</span>#f #f<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                             <span class=\"br0\">[</span><span class=\"br0\">(</span>#f #t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>isect<span class=\"br0\">)</span> p1<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                             <span class=\"br0\">[</span><span class=\"br0\">(</span>#t #f<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>isect<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                             <span class=\"br0\">[</span><span class=\"br0\">(</span>#t #t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> p1<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">;; Intersect the polygon with the clipping line's left halfspace</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>isect<span class=\"sy0\">-</span>polygon poly<span class=\"sy0\">-</span>edges clip<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span><span class=\"br0\">[</span>p '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">e</span>  poly<span class=\"sy0\">-</span>edges<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">append</span> p <span class=\"br0\">(</span>intersect <span class=\"kw1\">e</span> clip<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">;; Intersect a subject polygon with a clipping polygon.  The latter is assumed to be convex.</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>clip<span class=\"sy0\">-</span>to sp<span class=\"sy0\">-</span>pts cp<span class=\"sy0\">-</span>edges<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span><span class=\"br0\">[</span>out<span class=\"sy0\">-</span>poly sp<span class=\"sy0\">-</span>pts<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>clip<span class=\"sy0\">-</span>line cp<span class=\"sy0\">-</span>edges<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>isect<span class=\"sy0\">-</span>polygon <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>edges out<span class=\"sy0\">-</span>poly<span class=\"br0\">)</span> clip<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Ruby", "loc": 47, "block": "<pre class=\"ruby highlighted_source\">Point = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:x</span>,:y<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">def</span> to_s; <span class=\"st0\">\"(#{x}, #{y})\"</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> sutherland_hodgman<span class=\"br0\">(</span>subjectPolygon, clipPolygon<span class=\"br0\">)</span><br/>  <span class=\"co1\"># These inner functions reduce the argument passing to</span><br/>  <span class=\"co1\"># \"inside\" and \"intersection\".</span><br/>  cp1, cp2, s, e = <span class=\"kw2\">nil</span><br/>  inside = <span class=\"kw3\">proc</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span><br/>    <span class=\"br0\">(</span>cp2.<span class=\"me1\">x</span><span class=\"sy0\">-</span>cp1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw3\">p</span>.<span class=\"me1\">y</span><span class=\"sy0\">-</span>cp1.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>cp2.<span class=\"me1\">y</span><span class=\"sy0\">-</span>cp1.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw3\">p</span>.<span class=\"me1\">x</span><span class=\"sy0\">-</span>cp1.<span class=\"me1\">x</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  intersection = <span class=\"kw3\">proc</span> <span class=\"kw1\">do</span><br/>    dcx, dcy = cp1.<span class=\"me1\">x</span><span class=\"sy0\">-</span>cp2.<span class=\"me1\">x</span>, cp1.<span class=\"me1\">y</span><span class=\"sy0\">-</span>cp2.<span class=\"me1\">y</span><br/>    dpx, dpy = s.<span class=\"me1\">x</span><span class=\"sy0\">-</span>e.<span class=\"me1\">x</span>, s.<span class=\"me1\">y</span><span class=\"sy0\">-</span>e.<span class=\"me1\">y</span><br/>    n1 = cp1.<span class=\"me1\">x</span><span class=\"sy0\">*</span>cp2.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> cp1.<span class=\"me1\">y</span><span class=\"sy0\">*</span>cp2.<span class=\"me1\">x</span><br/>    n2 = s.<span class=\"me1\">x</span><span class=\"sy0\">*</span>e.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> s.<span class=\"me1\">y</span><span class=\"sy0\">*</span>e.<span class=\"me1\">x</span><br/>    n3 = <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>dcx<span class=\"sy0\">*</span>dpy <span class=\"sy0\">-</span> dcy<span class=\"sy0\">*</span>dpx<span class=\"br0\">)</span><br/>    Point<span class=\"br0\">[</span><span class=\"br0\">(</span>n1<span class=\"sy0\">*</span>dpx <span class=\"sy0\">-</span> n2<span class=\"sy0\">*</span>dcx<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3, <span class=\"br0\">(</span>n1<span class=\"sy0\">*</span>dpy <span class=\"sy0\">-</span> n2<span class=\"sy0\">*</span>dcy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  outputList = subjectPolygon<br/>  cp1 = clipPolygon.<span class=\"me1\">last</span><br/>  <span class=\"kw1\">for</span> cp2 <span class=\"kw1\">in</span> clipPolygon<br/>    inputList = outputList<br/>    outputList = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    s = inputList.<span class=\"me1\">last</span><br/>    <span class=\"kw1\">for</span> e <span class=\"kw1\">in</span> inputList<br/>      <span class=\"kw1\">if</span> inside<span class=\"br0\">[</span>e<span class=\"br0\">]</span><br/>        outputList <span class=\"sy0\">&lt;&lt;</span> intersection<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">unless</span> inside<span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>        outputList <span class=\"sy0\">&lt;&lt;</span> e<br/>      <span class=\"kw1\">elsif</span> inside<span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>        outputList <span class=\"sy0\">&lt;&lt;</span> intersection<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>      s = e<br/>    <span class=\"kw1\">end</span><br/>    cp1 = cp2<br/>  <span class=\"kw1\">end</span><br/>  outputList<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>subjectPolygon = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">50</span>, <span class=\"nu0\">150</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">200</span>, <span class=\"nu0\">50</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">350</span>, <span class=\"nu0\">150</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">350</span>, <span class=\"nu0\">300</span><span class=\"br0\">]</span>,<br/>                  <span class=\"br0\">[</span><span class=\"nu0\">250</span>, <span class=\"nu0\">300</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">200</span>, <span class=\"nu0\">250</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">150</span>, <span class=\"nu0\">350</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">250</span><span class=\"br0\">]</span>,<br/>                  <span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">200</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">collect</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pnt<span class=\"sy0\">|</span> Point<span class=\"br0\">[</span><span class=\"sy0\">*</span>pnt<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/>clipPolygon = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">300</span>, <span class=\"nu0\">100</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">300</span>, <span class=\"nu0\">300</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">300</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">collect</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pnt<span class=\"sy0\">|</span> Point<span class=\"br0\">[</span><span class=\"sy0\">*</span>pnt<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> sutherland_hodgman<span class=\"br0\">(</span>subjectPolygon, clipPolygon<span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 66, "block": "<pre class=\"text highlighted_source\">#[derive(Debug, Clone)]<br/>struct Point {<br/>    x: f64,<br/>    y: f64,<br/>}<br/>\u00a0<br/>#[derive(Debug, Clone)]<br/>struct Polygon(Vec&lt;Point&gt;);<br/>\u00a0<br/>fn is_inside(p: &amp;Point, cp1: &amp;Point, cp2: &amp;Point) -&gt; bool {<br/>    (cp2.x - cp1.x) * (p.y - cp1.y) &gt; (cp2.y - cp1.y) * (p.x - cp1.x)<br/>}<br/>\u00a0<br/>fn compute_intersection(cp1: &amp;Point, cp2: &amp;Point, s: &amp;Point, e: &amp;Point) -&gt; Point {<br/>    let dc = Point {<br/>        x: cp1.x - cp2.x,<br/>        y: cp1.y - cp2.y,<br/>    };<br/>    let dp = Point {<br/>        x: s.x - e.x,<br/>        y: s.y - e.y,<br/>    };<br/>    let n1 = cp1.x * cp2.y - cp1.y * cp2.x;<br/>    let n2 = s.x * e.y - s.y * e.x;<br/>    let n3 = 1.0 / (dc.x * dp.y - dc.y * dp.x);<br/>    Point {<br/>        x: (n1 * dp.x - n2 * dc.x) * n3,<br/>        y: (n1 * dp.y - n2 * dc.y) * n3,<br/>    }<br/>}<br/>\u00a0<br/>fn sutherland_hodgman_clip(subject_polygon: &amp;Polygon, clip_polygon: &amp;Polygon) -&gt; Polygon {<br/>    let mut result_ring = subject_polygon.0.clone();<br/>    let mut cp1 = clip_polygon.0.last().unwrap();<br/>    for cp2 in &amp;clip_polygon.0 {<br/>        let input = result_ring;<br/>        let mut s = input.last().unwrap();<br/>        result_ring = vec![];<br/>        for e in &amp;input {<br/>            if is_inside(e, cp1, cp2) {<br/>                if\u00a0!is_inside(s, cp1, cp2) {<br/>                    result_ring.push(compute_intersection(cp1, cp2, s, e));<br/>                }<br/>                result_ring.push(e.clone());<br/>            } else if is_inside(s, cp1, cp2) {<br/>                result_ring.push(compute_intersection(cp1, cp2, s, e));<br/>            }<br/>            s = e;<br/>        }<br/>        cp1 = cp2;<br/>    }<br/>    Polygon(result_ring)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let _p = |x: f64, y: f64| Point { x, y };<br/>    let subject_polygon = Polygon(vec![<br/>        _p(50.0, 150.0), _p(200.0, 50.0), _p(350.0, 150.0), _p(350.0, 300.0), _p(250.0, 300.0),<br/>        _p(200.0, 250.0), _p(150.0, 350.0), _p(100.0, 250.0), _p(100.0, 200.0),<br/>    ]);<br/>    let clip_polygon = Polygon(vec![<br/>        _p(100.0, 100.0),_p(300.0, 100.0),_p(300.0, 300.0),_p(100.0, 300.0),<br/>    ]);<br/>    let result = sutherland_hodgman_clip(&amp;subject_polygon, &amp;clip_polygon);<br/>    println!(\"{:?}\", result);<br/>}</pre>"}, {"lang": "Scala", "loc": 90, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"br0\">{</span> JFrame, JPanel <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SutherlandHodgman <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JFrame <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> App <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">BorderLayout</span><br/>\u00a0<br/>    setDefaultCloseOperation<span class=\"br0\">(</span>JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><br/>    setVisible<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> content <span class=\"sy0\">=</span> getContentPane<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    content.<span class=\"me1\">setLayout</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> BorderLayout<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    content.<span class=\"me1\">add</span><span class=\"br0\">(</span>SutherlandHodgmanPanel, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>    setTitle<span class=\"br0\">(</span><span class=\"st0\">\"SutherlandHodgman\"</span><span class=\"br0\">)</span><br/>    pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SutherlandHodgmanPanel <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JPanel <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"br0\">{</span> Color, Graphics, Graphics2D <span class=\"br0\">}</span><br/>\u00a0<br/>    setPreferredSize<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Dimension</span><span class=\"br0\">(</span><span class=\"nu0\">600</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// subject and clip points are assumed to be valid</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> subject <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"br0\">(</span>50D, 150D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>200D, 50D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>350D, 150D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>350D, 300D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>250D, 300D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>200D, 250D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>150D, 350D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>100D, 250D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>100D, 200D<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> clipper <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"br0\">(</span>100D, 100D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>300D, 100D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>300D, 300D<span class=\"br0\">)</span>, <span class=\"br0\">(</span>100D, 300D<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> result <span class=\"sy0\">=</span> subject<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> clipper.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len2 <span class=\"sy0\">=</span> result.<span class=\"me1\">size</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> result<br/>        result <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> A <span class=\"sy0\">=</span> clipper<span class=\"br0\">(</span><span class=\"br0\">(</span>i + len - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> B <span class=\"sy0\">=</span> clipper<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until len2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> P <span class=\"sy0\">=</span> input<span class=\"br0\">(</span><span class=\"br0\">(</span>j + len2 - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len2<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Q <span class=\"sy0\">=</span> input<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\u00a0<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>inside<span class=\"br0\">(</span>A, B, Q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>inside<span class=\"br0\">(</span>A, B, P<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    result <span class=\"sy0\">=</span> result <span class=\"sy0\">:</span>+ intersection<span class=\"br0\">(</span>A, B, P, Q<span class=\"br0\">)</span><br/>                result <span class=\"sy0\">=</span> result <span class=\"sy0\">:</span>+ Q<br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>inside<span class=\"br0\">(</span>A, B, P<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                result <span class=\"sy0\">=</span> result <span class=\"sy0\">:</span>+ intersection<span class=\"br0\">(</span>A, B, P, Q<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">RenderingHints</span>.<span class=\"sy0\">_</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g2 <span class=\"sy0\">=</span> g.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Graphics2D<span class=\"br0\">]</span><br/>        g2.<span class=\"me1\">translate</span><span class=\"br0\">(</span><span class=\"nu0\">80</span>, <span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>        g2.<span class=\"me1\">setStroke</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">BasicStroke</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        g2.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>KEY<span class=\"sy0\">_</span>ANTIALIASING, VALUE<span class=\"sy0\">_</span>ANTIALIAS<span class=\"sy0\">_</span>ON<span class=\"br0\">)</span><br/>        g2.<span class=\"me1\">draw_polygon</span><span class=\"br0\">(</span>subject, Color.<span class=\"me1\">blue</span><span class=\"br0\">)</span><br/>        g2.<span class=\"me1\">draw_polygon</span><span class=\"br0\">(</span>clipper, Color.<span class=\"me1\">red</span><span class=\"br0\">)</span><br/>        g2.<span class=\"me1\">draw_polygon</span><span class=\"br0\">(</span>result, Color.<span class=\"me1\">green</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> inside<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span>, b<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span>, c<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"br0\">(</span>a.<span class=\"sy0\">_</span>1 - c.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b.<span class=\"sy0\">_</span>2 - c.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>a.<span class=\"sy0\">_</span>2 - c.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b.<span class=\"sy0\">_</span>1 - c.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> intersection<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span>, b<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span>, p<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span>, q<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> A1 <span class=\"sy0\">=</span> b.<span class=\"sy0\">_</span>2 - a.<span class=\"sy0\">_</span>2<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> B1 <span class=\"sy0\">=</span> a.<span class=\"sy0\">_</span>1 - b.<span class=\"sy0\">_</span>1<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> C1 <span class=\"sy0\">=</span> A1 <span class=\"sy0\">*</span> a.<span class=\"sy0\">_</span>1 + B1 <span class=\"sy0\">*</span> a.<span class=\"sy0\">_</span>2<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> A2 <span class=\"sy0\">=</span> q.<span class=\"sy0\">_</span>2 - p.<span class=\"sy0\">_</span>2<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> B2 <span class=\"sy0\">=</span> p.<span class=\"sy0\">_</span>1 - q.<span class=\"sy0\">_</span>1<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> C2 <span class=\"sy0\">=</span> A2 <span class=\"sy0\">*</span> p.<span class=\"sy0\">_</span>1 + B2 <span class=\"sy0\">*</span> p.<span class=\"sy0\">_</span>2<br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> det <span class=\"sy0\">=</span> A1 <span class=\"sy0\">*</span> B2 - A2 <span class=\"sy0\">*</span> B1<br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>B2 <span class=\"sy0\">*</span> C1 - B1 <span class=\"sy0\">*</span> C2<span class=\"br0\">)</span> / det, <span class=\"br0\">(</span>A1 <span class=\"sy0\">*</span> C2 - A2 <span class=\"sy0\">*</span> C1<span class=\"br0\">)</span> / det<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">final</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Polygon<span class=\"sy0\">_</span>drawing<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> draw<span class=\"sy0\">_</span>polygon<span class=\"br0\">(</span>points<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span><span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span><span class=\"br0\">]</span>, color<span class=\"sy0\">:</span> Color<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>color<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> points.<span class=\"me1\">length</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">geom</span>.<span class=\"me1\">Line2D</span>.<span class=\"me1\">Double</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p1 <span class=\"sy0\">=</span> points<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p2 <span class=\"sy0\">=</span> points<span class=\"br0\">(</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len<span class=\"br0\">)</span><br/>                line.<span class=\"me1\">setLine</span><span class=\"br0\">(</span>p1.<span class=\"sy0\">_</span>1, p1.<span class=\"sy0\">_</span>2, p2.<span class=\"sy0\">_</span>1, p2.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><br/>                g.<span class=\"me1\">draw</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 53, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Point<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    method to_s <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"(#{'%.2f'\u00a0% x}, #{'%.2f'\u00a0% y})\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func sutherland_hodgman<span class=\"br0\">(</span>subjectPolygon, clipPolygon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var inside = <span class=\"br0\">{</span> <span class=\"sy0\">|</span>cp1, cp2, <span class=\"kw3\">p</span><span class=\"sy0\">|</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>cp2.<span class=\"me1\">x</span><span class=\"sy0\">-</span>cp1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw3\">p</span>.<span class=\"me1\">y</span><span class=\"sy0\">-</span>cp1.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>cp2.<span class=\"me1\">y</span><span class=\"sy0\">-</span>cp1.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw3\">p</span>.<span class=\"me1\">x</span><span class=\"sy0\">-</span>cp1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  var intersection = <span class=\"br0\">{</span> <span class=\"sy0\">|</span>cp1, cp2, s, e<span class=\"sy0\">|</span><br/>    var <span class=\"br0\">(</span>dcx, dcy<span class=\"br0\">)</span> = <span class=\"br0\">(</span>cp1.<span class=\"me1\">x</span><span class=\"sy0\">-</span>cp2.<span class=\"me1\">x</span>, cp1.<span class=\"me1\">y</span><span class=\"sy0\">-</span>cp2.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>    var <span class=\"br0\">(</span>dpx, dpy<span class=\"br0\">)</span> = <span class=\"br0\">(</span>s.<span class=\"me1\">x</span><span class=\"sy0\">-</span>e.<span class=\"me1\">x</span>, s.<span class=\"me1\">y</span><span class=\"sy0\">-</span>e.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>    var n1 = <span class=\"br0\">(</span>cp1.<span class=\"me1\">x</span><span class=\"sy0\">*</span>cp2.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> cp1.<span class=\"me1\">y</span><span class=\"sy0\">*</span>cp2.<span class=\"me1\">x</span><span class=\"br0\">)</span><br/>    var n2 = <span class=\"br0\">(</span>s.<span class=\"me1\">x</span><span class=\"sy0\">*</span>e.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> s.<span class=\"me1\">y</span><span class=\"sy0\">*</span>e.<span class=\"me1\">x</span><span class=\"br0\">)</span><br/>    var n3 = <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>dcx<span class=\"sy0\">*</span>dpy <span class=\"sy0\">-</span> dcy<span class=\"sy0\">*</span>dpx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Point<span class=\"br0\">(</span><span class=\"br0\">(</span>n1<span class=\"sy0\">*</span>dpx <span class=\"sy0\">-</span> n2<span class=\"sy0\">*</span>dcx<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3, <span class=\"br0\">(</span>n1<span class=\"sy0\">*</span>dpy <span class=\"sy0\">-</span> n2<span class=\"sy0\">*</span>dcy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n3<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  var outputList = subjectPolygon<br/>  var cp1 = clipPolygon.<span class=\"me1\">last</span><br/>  <span class=\"kw1\">for</span> cp2 <span class=\"kw1\">in</span> clipPolygon <span class=\"br0\">{</span><br/>    var inputList = outputList<br/>    outputList = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    var s = inputList.<span class=\"me1\">last</span><br/>    <span class=\"kw1\">for</span> e <span class=\"kw1\">in</span> inputList <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inside<span class=\"br0\">(</span>cp1, cp2, e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        outputList <span class=\"sy0\">&lt;&lt;</span> intersection<span class=\"br0\">(</span>cp1, cp2, s, e<span class=\"br0\">)</span> <span class=\"kw1\">if</span>\u00a0!inside<span class=\"br0\">(</span>cp1, cp2, s<span class=\"br0\">)</span><br/>        outputList <span class=\"sy0\">&lt;&lt;</span> e<br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">elsif</span><span class=\"br0\">(</span>inside<span class=\"br0\">(</span>cp1, cp2, s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        outputList <span class=\"sy0\">&lt;&lt;</span> intersection<span class=\"br0\">(</span>cp1, cp2, s, e<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      s = e<br/>    <span class=\"br0\">}</span><br/>    cp1 = cp2<br/>  <span class=\"br0\">}</span><br/>  outputList<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var subjectPolygon = <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">50</span>,  <span class=\"nu0\">150</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">200</span>,  <span class=\"nu0\">50</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">350</span>, <span class=\"nu0\">150</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">350</span>, <span class=\"nu0\">300</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">250</span>, <span class=\"nu0\">300</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">200</span>, <span class=\"nu0\">250</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">150</span>, <span class=\"nu0\">350</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">250</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">200</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pnt<span class=\"sy0\">|</span> Point<span class=\"br0\">(</span>pnt...<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var clipPolygon = <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">300</span>, <span class=\"nu0\">100</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span><span class=\"nu0\">300</span>, <span class=\"nu0\">300</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">100</span>, <span class=\"nu0\">300</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pnt<span class=\"sy0\">|</span> Point<span class=\"br0\">(</span>pnt...<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>sutherland_hodgman<span class=\"br0\">(</span>subjectPolygon, clipPolygon<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 121, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Find intersection of an arbitrary polygon with a convex one.</span><br/><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"co1\">#\tDoes the path (x0,y0)-&gt;(x1,y1)-&gt;(x2,y2) turn clockwise</span><br/><span class=\"co1\">#\tor counterclockwise?</span><br/><span class=\"kw1\">proc</span> cw <span class=\"br0\">{</span>x0 y0 x1 y1 x2 y2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> dx1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x1</span> - <span class=\"re0\">$x0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> dy1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y1</span> - <span class=\"re0\">$y0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> dx2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x2</span> - <span class=\"re0\">$x0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> dy2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y2</span> - <span class=\"re0\">$y0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># (0,0,$dx1*$dy2 - $dx2*$dy1) is the crossproduct of</span><br/>    <span class=\"co1\"># ($x1-$x0,$y1-$y0,0) and ($x2-$x0,$y2-$y0,0). </span><br/>    <span class=\"co1\"># Its z-component is positive if the turn</span><br/>    <span class=\"co1\"># is clockwise, negative if the turn is counterclockwise.</span><br/>    <span class=\"kw1\">set</span> pr1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$dx1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$dy2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> pr2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$dx2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$dy1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$pr1</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$pr2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Clockwise</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$pr1</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$pr2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Counter-clockwise</span><br/>\t<span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$dx1</span><span class=\"sy0\">*</span><span class=\"re0\">$dx2</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || <span class=\"re0\">$dy1</span><span class=\"sy0\">*</span><span class=\"re0\">$dy2</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># point 0 is the middle point</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$dx1</span><span class=\"sy0\">*</span><span class=\"re0\">$dx1</span> + <span class=\"re0\">$dy1</span><span class=\"sy0\">*</span><span class=\"re0\">$dy1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"re0\">$dx2</span><span class=\"sy0\">*</span><span class=\"re0\">$dx2</span> + <span class=\"re0\">$dy2</span>+<span class=\"re0\">$dy2</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># point 1 is the middle point</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># point 2 lies on the segment joining points 0 and 1</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#\tCalculate the point of intersection of two lines</span><br/><span class=\"co1\">#\tcontaining the line segments (x1,y1)-(x2,y2) and (x3,y3)-(x4,y4)</span><br/><span class=\"kw1\">proc</span> intersect <span class=\"br0\">{</span>x1 y1 x2 y2 x3 y3 x4 y4<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> d <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y4</span> - <span class=\"re0\">$y3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$x2</span> - <span class=\"re0\">$x1</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"re0\">$x4</span> - <span class=\"re0\">$x3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$y2</span> - <span class=\"re0\">$y1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> na <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x4</span> - <span class=\"re0\">$x3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$y1</span> - <span class=\"re0\">$y3</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"re0\">$y4</span> - <span class=\"re0\">$y3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$x1</span> - <span class=\"re0\">$x3</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$d</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x1</span> + <span class=\"re0\">$na</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$x2</span> - <span class=\"re0\">$x1</span><span class=\"br0\">)</span> / <span class=\"re0\">$d</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y1</span> + <span class=\"re0\">$na</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$y2</span> - <span class=\"re0\">$y1</span><span class=\"br0\">)</span> / <span class=\"re0\">$d</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$r</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#\tCoroutine that yields the elements of a list in pairs</span><br/><span class=\"kw1\">proc</span> pairs <span class=\"br0\">{</span><span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    yield <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>\tyield <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#\tCoroutine to clip one segment of a polygon against a line.</span><br/><span class=\"kw1\">proc</span> clipsegment <span class=\"br0\">{</span>inside0 cx0 cy0 cx1 cy1 sx0 sy0 sx1 sy1<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> inside1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>cw <span class=\"re0\">$cx0</span> <span class=\"re0\">$cy0</span> <span class=\"re0\">$cx1</span> <span class=\"re0\">$cy1</span> <span class=\"re0\">$sx1</span> <span class=\"re0\">$sy1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$inside1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$inside0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> int <span class=\"br0\">[</span>intersect <span class=\"re0\">$cx0</span> <span class=\"re0\">$cy0</span> <span class=\"re0\">$cx1</span> <span class=\"re0\">$cy1</span> \\<br/>\t\t    <span class=\"re0\">$sx0</span> <span class=\"re0\">$sy0</span> <span class=\"re0\">$sx1</span> <span class=\"re0\">$sy1</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$int</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tyield <span class=\"re0\">$int</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tyield <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$sx1</span> <span class=\"re0\">$sy1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$inside0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> int <span class=\"br0\">[</span>intersect <span class=\"re0\">$cx0</span> <span class=\"re0\">$cy0</span> <span class=\"re0\">$cx1</span> <span class=\"re0\">$cy1</span> \\<br/>\t\t    <span class=\"re0\">$sx0</span> <span class=\"re0\">$sy0</span> <span class=\"re0\">$sx1</span> <span class=\"re0\">$sy1</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$int</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tyield <span class=\"re0\">$int</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$inside1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#\tCoroutine to perform one step of Sutherland-Hodgman polygon clipping</span><br/><span class=\"kw1\">proc</span> clipstep <span class=\"br0\">{</span><span class=\"kw2\">source</span> cx0 cy0 cx1 cy1<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    yield <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> pt0 <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$source</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$pt0</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span><br/>    <span class=\"br0\">}</span><br/>    lassign <span class=\"re0\">$pt0</span> sx0 sy0<br/>    <span class=\"kw1\">set</span> inside0 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>cw <span class=\"re0\">$cx0</span> <span class=\"re0\">$cy0</span> <span class=\"re0\">$cx1</span> <span class=\"re0\">$cy1</span> <span class=\"re0\">$sx0</span> <span class=\"re0\">$sy0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> finished <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$finished</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> thispt <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$source</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$thispt</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> thispt <span class=\"re0\">$pt0</span><br/>\t    <span class=\"kw1\">set</span> finished <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>\tlassign <span class=\"re0\">$thispt</span> sx1 sy1<br/>\t<span class=\"kw1\">set</span> inside0 <span class=\"br0\">[</span>clipsegment <span class=\"re0\">$inside0</span> \\<br/>\t\t<span class=\"re0\">$cx0</span> <span class=\"re0\">$cy0</span> <span class=\"re0\">$cx1</span> <span class=\"re0\">$cy1</span> <span class=\"re0\">$sx0</span> <span class=\"re0\">$sy0</span> <span class=\"re0\">$sx1</span> <span class=\"re0\">$sy1</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> sx0 <span class=\"re0\">$sx1</span><br/>\t<span class=\"kw1\">set</span> sy0 <span class=\"re0\">$sy1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#\tPerform Sutherland-Hodgman polygon clipping</span><br/><span class=\"kw1\">proc</span> clippoly <span class=\"br0\">{</span>cpoly spoly<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> clipindx<br/>    <span class=\"kw1\">set</span> <span class=\"kw2\">source</span> <span class=\"br0\">[</span>coroutine clipper<span class=\"br0\">[</span><span class=\"kw2\">incr</span> clipindx<span class=\"br0\">]</span> pairs <span class=\"re0\">$spoly</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> cx0 <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cpoly</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> cy0 <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cpoly</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>cx1 cy1<span class=\"br0\">}</span> <span class=\"re0\">$cpoly</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> <span class=\"kw2\">source</span> <span class=\"br0\">[</span>coroutine clipper<span class=\"br0\">[</span><span class=\"kw2\">incr</span> clipindx<span class=\"br0\">]</span> \\<br/>\t\tclipstep <span class=\"re0\">$source</span> <span class=\"re0\">$cx0</span> <span class=\"re0\">$cy0</span> <span class=\"re0\">$cx1</span> <span class=\"re0\">$cy1</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> cx0 <span class=\"re0\">$cx1</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> cy0 <span class=\"re0\">$cy1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> pt <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$source</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$pt</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Yabasic", "loc": 104, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>open window 400, 400<br/>backcolor 0,0,0<br/>clear window<br/>\u00a0<br/>DPOL = 8<br/>DREC = 3<br/>CX = 1\u00a0: CY = 2<br/>\u00a0<br/>dim poligono(DPOL, 2)<br/>dim rectang(DREC, 2)<br/>dim clipped(DPOL + DREC, 2)<br/>\u00a0<br/>for n = 0 to DPOL\u00a0: read poligono(n, CX), poligono(n, CY)\u00a0: next n<br/>DATA 50,150, 200,50, 350,150, 350,300, 250,300, 200,250, 150,350, 100,250, 100,200<br/>for n = 0 to DREC\u00a0: read rectang(n, CX), rectang(n, CY)\u00a0: next n<br/>DATA 100,100, 300,100, 300,300, 100,300<br/>\u00a0<br/>\u00a0<br/>color 255,0,0<br/>dibuja(poligono(), DPOL)<br/>color 0,0,255<br/>dibuja(rectang(), DREC)<br/>\u00a0<br/>nvert = FNsutherland_hodgman(poligono(), rectang(), clipped(), DPOL + DREC)<br/>color 250,250,0<br/>dibuja(clipped(), nvert - 1)<br/>\u00a0<br/>\u00a0<br/>sub dibuja(figura(), i)<br/>\tlocal n<br/>\u00a0<br/>\tprint<br/>\tnew curve<br/>\tfor n = 0 to i<br/>\t\tline to figura(n, CX), figura(n, CY)<br/>\t\tprint figura(n, CX), \", \", figura(n, CY)<br/>\tnext n<br/>\tclose curve<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub FNsutherland_hodgman(subj(), clip(), out(), n)<br/>\tlocal i, j, o, tclip, p1(2), p2(2), s(2), e(2), p(2), inp(n, 2)<br/>\u00a0<br/>\tFOR o = 0 TO arraysize(subj(), 1)\u00a0: out(o, CX) = subj(o, CX)\u00a0: out(o, CY) = subj(o, CY)\u00a0: NEXT o<br/>\u00a0<br/>\ttclip = arraysize(clip(),1)<br/>\tp1(CX) = clip(tclip, CX)\u00a0: p1(CY) = clip(tclip, CY)<br/>\u00a0<br/>\tFOR i = 0 TO tclip<br/>\t    p2(CX) = clip(i, CX)\u00a0: p2(CY) = clip(i, CY)<br/>\t    FOR n = 0 TO o - 1\u00a0: inp(n, CX) = out(n, CX)\u00a0: inp(n, CY) = out(n, CY)\u00a0: NEXT n\u00a0: o = 0<br/>\t  \tIF n &gt;= 2 THEN<br/>\t            s(CX) = inp(n - 1, CX)\u00a0: s(CY) = inp(n - 1, CY)<br/>\u00a0<br/>\t    \t    FOR j = 0 TO n - 1<br/>\t      \t\te(CX) = inp(j, CX)\u00a0: e(CY) = inp(j, CY)<br/>\t      \t\tIF FNside(e(), p1(), p2()) THEN<br/>\t        \t\tIF NOT FNside(s(), p1(), p2()) THEN<br/>\t          \t\t\tPROCintersection(p1(), p2(), s(), e(), p())<br/>\t          \t\t\tout(o, CX) = round(p(CX))\u00a0: out(o, CY) = round(p(CY))<br/>\t          \t\t\to = o + 1<br/>\t        \t\tENDIF<br/>\t        \t\tout(o, CX) = round(e(CX))\u00a0: out(o, CY) = round(e(CY))<br/>\t        \t\to = o + 1<br/>\t      \t\tELSE<br/>\t        \t\tIF FNside(s(), p1(), p2()) THEN<br/>\t          \t\t\tPROCintersection(p1(), p2(), s(), e(), p())<br/>\t          \t\t\tout(o, CX) = round(p(CX))\u00a0: out(o, CY) = round(p(CY))<br/>\t          \t\t\to = o + 1<br/>\t        \t\tENDIF<br/>\t      \t\tENDIF<br/>\t      \t\ts(CX) = e(CX)\u00a0: s(CY) = e(CY)<br/>\t    \t    NEXT j<br/>\t  \tENDIF<br/>\t  \tp1(CX) = p2(CX)\u00a0: p1(CY) = p2(CY)<br/>\tNEXT i<br/>\treturn o<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub FNside(p(), p1(), p2())<br/>\treturn  (p2(CX) - p1(CX)) * (p(CY) - p1(CY)) &gt; (p2(CY) - p1(CY)) * (p(CX) - p1(CX))<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub PROCintersection(p1(), p2(), p3(), p4(), p())<br/>\tLOCAL a(2), b(2), k, l, m<br/>\u00a0<br/>\ta(CX) = p1(CX) - p2(CX)\u00a0: a(CY) = p1(CY) - p2(CY)<br/>\tb(CX) = p3(CX) - p4(CX)\u00a0: b(CY) = p3(CY) - p4(CY)<br/>\tk = p1(CX) * p2(CY) - p1(CY) * p2(CX)<br/>\tl = p3(CX) * p4(CY) - p3(CY) * p4(CX)<br/>\tm = 1 / (a(CX) * b(CY) - a(CY) * b(CX))<br/>\tp(CX) =  m * (k * b(CX) - l * a(CX))<br/>\tp(CY) =  m * (k * b(CY) - l * a(CY))<br/>\u00a0<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub round(n)<br/>\treturn int(n + .5)<br/>end sub</pre>"}, {"lang": "zkl", "loc": 48, "block": "<pre class=\"text highlighted_source\">class P{\t// point<br/>   fcn init(_x,_y){ var [const] x=_x.toFloat(), y=_y.toFloat() }<br/>   fcn __opSub(p) { self(x - p.x, y - p.y) }<br/>   fcn cross(p)   { x*p.y - y*p.x          }<br/>   fcn toString   { \"(%7.2f,%7.2f)\".fmt(x,y) }<br/>   var [const,proxy] ps=fcn{ T(x.toInt(),y.toInt()) };    // property<br/>}<br/>fcn shClipping(clip,polygon){<br/>   inputList,outputList,clipEdge:=List(), polygon.copy(), List(Void,clip[-1]);<br/>   foreach p in (clip){<br/>      clipEdge.del(0).append(p);<br/>      inputList.clear().extend(outputList);<br/>      outputList.clear();<br/>      S:=inputList[-1];<br/>      foreach E in (inputList){<br/>         if(leftOf(clipEdge,E)){<br/>\t    if(not leftOf(clipEdge,S))<br/>\t       outputList.append(intersection(S,E,clipEdge));<br/>\t    outputList.append(E);<br/>\t }<br/>\t else if(leftOf(clipEdge,S))<br/>\t         outputList.append(intersection(S,E,clipEdge));<br/>\t S=E;<br/>      }<br/>   }<br/>   outputList<br/>}<br/>fcn leftOf(line,p){ //--&gt;True (p is left of line), direction of line matters<br/>   p1,p2:=line;\t\t// line is (p1,p2)<br/>   (p2-p1).cross(p-p2)&gt;0;<br/>}<br/>fcn intersection(p1,p2, line){\t//--&gt;Point of intersection or False<br/>   p3,p4:=line;<br/>   dx,dy,d:=p2-p1, p3-p4, p1-p3;<br/>   // x0 + a dx = y0 + b dy -&gt;<br/>   // x0 X dx = y0 X dx + b dy X dx -&gt;<br/>   // b = (x0 - y0) X dx / (dy X dx)<br/>   dyx:=dy.cross(dx);<br/>   if(not dyx) return(False);  // parallel lines, could just throw on next line<br/>   dyx=d.cross(dx)/dyx;<br/>   P(p3.x + dyx*dy.x, p3.y + dyx*dy.y);<br/>}<br/>fcn drawPolygon(ppm,listOfPoints,rgb){<br/>   foreach n in (listOfPoints.len()-1){<br/>      ppm.line(listOfPoints[n].ps.xplode(),listOfPoints[n+1].ps.xplode(),rgb);<br/>   }<br/>   ppm.line(listOfPoints[0].ps.xplode(),listOfPoints[-1].ps.xplode(),rgb);<br/>}</pre>"}]}