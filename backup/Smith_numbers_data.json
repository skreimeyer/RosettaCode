{"task": "Smith_numbers", "blocks": [{"lang": "360 Assembly", "loc": 147, "block": "<pre class=\"text highlighted_source\">*        Smith numbers -           02/05/2017<br/>SMITHNUM CSECT<br/>         USING  SMITHNUM,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R10,PG             pgi=0<br/>         LA     R6,4               i=4<br/>       DO WHILE=(C,R6,LE,N)        do i=4 to n<br/>         LR     R1,R6                i<br/>         BAL    R14,SUMD             call sumd(i)<br/>         ST     R0,SS                ss=sumd(i)<br/>         LR     R1,R6                i<br/>         BAL    R14,SUMFACTR         call sumfactr(i)<br/>       IF C,R0,EQ,SS THEN            if sumd(i)=sumfactr(i) then<br/>         L      R2,NN                  nn<br/>         LA     R2,1(R2)               nn+1<br/>         ST     R2,NN                  nn=nn+1<br/>         XDECO  R6,XDEC                i<br/>         MVC    0(5,R10),XDEC+7        output i<br/>         LA     R10,5(R10)             pgi+=5<br/>         L      R4,IPG                 ipg<br/>         LA     R4,1(R4)               ipg+1<br/>         ST     R4,IPG                 ipg=ipg+1<br/>       IF C,R4,EQ,=F'16' THEN          if ipg=16 then<br/>         XPRNT  PG,80                    print buffer<br/>         MVC    PG,=CL80' '              clear buffer<br/>         LA     R10,PG                   pgi=0<br/>         MVC    IPG,=F'0'                ipg=0<br/>       ENDIF    ,                      endif<br/>       ENDIF    ,                    endif<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R4,IPG             ipg<br/>       IF LTR,R4,NZ,R4 THEN        if ipg&lt;&gt;0 then<br/>         XPRNT  PG,80                print buffer<br/>       ENDIF    ,                  endif<br/>         L      R1,NN              nn<br/>         XDECO  R1,XDEC            edit nn<br/>         MVC    PGT(4),XDEC+8      output nn<br/>         L      R1,N               n<br/>         XDECO  R1,XDEC            edit n<br/>         MVC    PGT+28(5),XDEC+7   output n<br/>         XPRNT  PGT,80             print<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>*------- ----   ----------------------------------------<br/>SUMD     EQU    *                  sumd(x)<br/>         SR     R0,R0              s=0<br/>       DO WHILE=(LTR,R1,NZ,R1)     do while x&lt;&gt;0 <br/>         LR     R2,R1                x<br/>         SRDA   R2,32                ~<br/>         D      R2,=F'10'            x/10<br/>         LR     R1,R3                x=x/10<br/>         AR     R0,R2                s=s+x//10<br/>       ENDDO    ,                  enddo while<br/>         BR     R14                return s<br/>*------- ----   ----------------------------------------<br/>SUMFACTR EQU    *                  sumfactr(z)<br/>         ST     R14,SAVER14        store r14<br/>         ST     R1,ZZ              z<br/>         SR     R8,R8              m=0<br/>         SR     R9,R9              f=0<br/>         L      R4,ZZ              z<br/>         SRDA   R4,32              ~<br/>         D      R4,=F'2'           z/2<br/>       DO WHILE=(LTR,R4,Z,R4)      do while z//2=0<br/>         LA     R8,2(R8)             m=m+2<br/>         LA     R9,1(R9)             f=f+1<br/>         L      R5,ZZ                z<br/>         SRA    R5,1                 z/2<br/>         ST     R5,ZZ                z=z/2<br/>         LA     R4,0                 z<br/>         D      R4,=F'2'             z/2<br/>       ENDDO    ,                  enddo while<br/>         L      R4,ZZ              z<br/>         SRDA   R4,32              ~<br/>         D      R4,=F'3'           z/3<br/>       DO WHILE=(LTR,R4,Z,R4)      do while z//3=0<br/>         LA     R8,3(R8)             m=m+3<br/>         LA     R9,1(R9)             f=f+1<br/>         L      R4,ZZ                z<br/>         SRDA   R4,32                ~<br/>         D      R4,=F'3'             z/3<br/>         ST     R5,ZZ                z=z/3<br/>         LA     R4,0                 z<br/>         D      R4,=F'3'             z/3<br/>       ENDDO    ,                  enddo while<br/>         LA     R7,5               do j=5 by 2 while j&lt;=z and j*j&lt;=n<br/>WHILEJ   C      R7,ZZ                if j&gt;z<br/>         BH     EWHILEJ              then leave while<br/>         LR     R5,R7                j<br/>         MR     R4,R7                *j<br/>         C      R5,N                 if j*j&gt;n<br/>         BH     EWHILEJ              then leave while<br/>         LR     R4,R7                j<br/>         SRDA   R4,32                ~<br/>         D      R4,=F'3'             j/3<br/>         LTR    R4,R4                if j//3=0<br/>         BZ     ITERJ                then goto iterj<br/>         L      R4,ZZ                z<br/>         SRDA   R4,32                ~<br/>         DR     R4,R7                z/j<br/>       DO WHILE=(LTR,R4,Z,R4)        do while z//j=0<br/>         LA     R9,1(R9)               f=f+1<br/>         LR     R1,R7                  j<br/>         BAL    R14,SUMD               call sumd(j)<br/>         AR     R8,R0                  m=m+sumd(j)<br/>         L      R4,ZZ                  z<br/>         SRDA   R4,32                  ~<br/>         DR     R4,R7                  z/j<br/>         ST     R5,ZZ                  z=z/j<br/>         LA     R4,0                   ~<br/>         DR     R4,R7                  z/j<br/>       ENDDO    ,                    enddo while<br/>ITERJ    LA     R7,2(R7)             j+=2<br/>         B      WHILEJ             enddo<br/>EWHILEJ  L      R4,ZZ              z<br/>       IF C,R4,NE,=F'1' THEN       if z&lt;&gt;1 then<br/>         LA     R9,1(R9)             f=f+1<br/>         L      R1,ZZ                z<br/>         BAL    R14,SUMD             call sumd(z)<br/>         AR     R8,R0                m=m+sumd(z)<br/>       ENDIF    ,                  endif<br/>       IF C,R9,LT,=F'2' THEN       if f&lt;2 then<br/>         SR     R8,R8                mm=0<br/>       ENDIF    ,                  endif<br/>         LR     R0,R8              return m <br/>         L      R14,SAVER14        restore r14<br/>         BR     R14                return<br/>SAVER14  DS     A                  save r14<br/>*        ----   ----------------------------------------<br/>N        DC     F'10000'           n<br/>NN       DC     F'0'               nn<br/>IPG      DC     F'0'               ipg<br/>SS       DS     F                  ss<br/>ZZ       DS     F                  z<br/>PG       DC     CL80' '            buffer<br/>PGT      DC     CL80'xxxx smith numbers found &lt;= xxxxx'<br/>XDEC     DS     CL12               temp<br/>         YREGS<br/>         END    SMITHNUM</pre>"}, {"lang": "Ada", "loc": 29, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> smith <span class=\"kw1\">is</span><br/>  <span class=\"kw3\">type</span> Vector <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive;<br/>  empty_vector\u00a0: <span class=\"kw3\">constant</span> Vector<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">0</span><span class=\"br0\">)</span>:= <span class=\"br0\">(</span><span class=\"kw3\">others</span>=&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"kw3\">function</span> digits_sum <span class=\"br0\">(</span>n\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive <span class=\"kw1\">is</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">10</span> <span class=\"kw1\">then</span> n <span class=\"kw1\">else</span> n <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> + digits_sum <span class=\"br0\">(</span>n / <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"kw3\">function</span> prime_factors <span class=\"br0\">(</span>n\u00a0: Positive; d\u00a0: Positive\u00a0:= <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Vector <span class=\"kw1\">is</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> empty_vector <span class=\"kw1\">elsif</span> n <span class=\"kw2\">mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> prime_factors <span class=\"br0\">(</span>n / d, d<span class=\"br0\">)</span> &amp; d<br/>   <span class=\"kw1\">else</span> prime_factors <span class=\"br0\">(</span>n, d + <span class=\"br0\">(</span><span class=\"kw1\">if</span> d=<span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"kw3\">function</span> vector_digits_sum <span class=\"br0\">(</span>v\u00a0: Vector<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> v'Length = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> digits_sum <span class=\"br0\">(</span>v<span class=\"br0\">(</span>v'First<span class=\"br0\">)</span><span class=\"br0\">)</span> + vector_digits_sum <span class=\"br0\">(</span>v<span class=\"br0\">(</span>v'First+<span class=\"nu0\">1</span>..<span class=\"me1\">v</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> n <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10000</span> <span class=\"kw1\">loop</span><br/>    <span class=\"kw1\">declare</span> <br/>      primes\u00a0: Vector\u00a0:= prime_factors <span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span>  primes'Length &gt; <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> vector_digits_sum <span class=\"br0\">(</span>primes<span class=\"br0\">)</span> = digits_sum <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>        Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">put</span> <span class=\"br0\">(</span>n'img<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>    <span class=\"kw1\">end</span>;<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; <br/><span class=\"kw1\">end</span> smith;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 73, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># sieve of Eratosthene: sets s[i] to TRUE if i is prime, FALSE otherwise #</span><br/><span class=\"kw4\">PROC</span> sieve <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> s <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"coMULTI\"># start with everything flagged as prime                             #</span> <br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> s<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># sieve out the non-primes                                           #</span><br/>        s<span class=\"br0\">[</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> s <span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> s<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> i <span class=\"sy1\">*</span> i <span class=\"kw2\">BY</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> s<span class=\"br0\">[</span> p <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">OD</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># sieve #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># construct a sieve of primes up to the maximum number required for the task #</span><br/><span class=\"kw3\">INT</span> max number <span class=\"sy1\">=</span> 10 000<span class=\"sy1\">;</span><br/><span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> max number <span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> is prime<span class=\"sy1\">;</span><br/>sieve<span class=\"br0\">(</span> is prime <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the sum of the digits of n                                         #</span><br/><span class=\"kw4\">OP</span> DIGITSUM <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>       <span class=\"kw3\">INT</span> sum  <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>       <span class=\"kw3\">INT</span> rest <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>       <span class=\"kw2\">WHILE</span> rest <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">DO</span><br/>           sum <span class=\"sy1\">+:=</span> rest <span class=\"kw12\">MOD</span> 10<span class=\"sy1\">;</span><br/>           rest <span class=\"kw17\">OVERAB</span> 10<br/>       <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>       sum <br/>   <span class=\"kw2\">END</span> <span class=\"coMULTI\"># DIGITSUM #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns TRUE if n is a Smith number, FALSE otherwise                       #</span><br/><span class=\"coMULTI\"># n must be between 1 and max number                                         #</span><br/><span class=\"kw4\">PROC</span> is smith <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> is prime<span class=\"br0\">[</span> <span class=\"kw8\">ABS</span> n <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>         <span class=\"coMULTI\"># primes are not Smith numbers                                      #</span><br/>         <span class=\"kw7\">FALSE</span><br/>     <span class=\"kw2\">ELSE</span><br/>         <span class=\"coMULTI\"># find the factors of n and sum the digits of the factors           #</span><br/>         <span class=\"kw3\">INT</span> rest             <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> factor digit sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> factor           <span class=\"sy1\">:=</span> 2<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">WHILE</span> factor <span class=\"sy1\">&lt;</span> max number <span class=\"kw16\">AND</span> rest <span class=\"sy1\">&gt;</span> 1 <span class=\"kw2\">DO</span><br/>             <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> is prime<span class=\"br0\">[</span> factor <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                 <span class=\"coMULTI\"># factor isn't a prime                                      #</span><br/>                 factor <span class=\"sy1\">+:=</span> 1<br/>             <span class=\"kw2\">ELSE</span><br/>                 <span class=\"coMULTI\"># factor is a prime                                         #</span><br/>                 <span class=\"kw2\">IF</span> rest <span class=\"kw12\">MOD</span> factor <span class=\"sy1\">/=</span> 0 <span class=\"kw2\">THEN</span><br/>                     <span class=\"coMULTI\"># factor isn't a factor of n                            #</span><br/>                     factor <span class=\"sy1\">+:=</span> 1<br/>                 <span class=\"kw2\">ELSE</span><br/>                     <span class=\"coMULTI\"># factor is a factor of n                               #</span><br/>                     rest <span class=\"kw17\">OVERAB</span> factor<span class=\"sy1\">;</span><br/>                     factor digit sum <span class=\"sy1\">+:=</span> DIGITSUM factor<br/>                 <span class=\"kw2\">FI</span><br/>             <span class=\"kw2\">FI</span><br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         <span class=\"br0\">(</span> factor digit sum <span class=\"sy1\">=</span> DIGITSUM n <span class=\"br0\">)</span><br/>     <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># is smith #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># print all the Smith numbers below the maximum required                     #</span><br/><span class=\"kw3\">INT</span> smith count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> max number <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> is smith<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># have a smith number #</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>7 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        smith count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> smith count <span class=\"kw12\">MOD</span> 10 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span><span class=\"sy1\">,</span> <span class=\"st0\">\"THere are \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> smith count<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>7 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" Smith numbers below \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max number<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>7 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 80, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> numPrimeFactors<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> pf <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">%</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                pf<span class=\"sy0\">++;</span><br/>                x <span class=\"sy0\">/=</span> p<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> pf<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"sy0\">++</span>p<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> primeFactors<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span><span class=\"sy0\">*</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> pf <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        arr<span class=\"br0\">[</span>pf<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">%</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                arr<span class=\"br0\">[</span>pf<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>                x <span class=\"sy0\">/=</span> p<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>                p<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> sumDigits<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        y <span class=\"sy0\">=</span> x <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        sum <span class=\"sy0\">+=</span> y<span class=\"sy0\">;</span><br/>        x <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> sumFactors<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"sy0\">*</span> arr<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        sum <span class=\"sy0\">+=</span> sumDigits<span class=\"br0\">(</span>arr<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> listAllSmithNumbers<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"sy0\">*</span>arr<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> numfactors <span class=\"sy0\">=</span> numPrimeFactors<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        arr <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>numfactors <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numfactors <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span>\t<br/>        primeFactors<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> arr<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> sumFactors<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span>numfactors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4u \"</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"All the Smith Numbers &lt; 10000 are:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    listAllSmithNumbers<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 47, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> primeFactors<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> n, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> r <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> f <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> n <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> r.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> n <span class=\"sy2\">%</span> f <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                r.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> f <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                n <span class=\"sy2\">/</span><span class=\"sy1\">=</span> f<span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> n <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> f<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">unsigned</span> sumDigits<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> n <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, m<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        m <span class=\"sy1\">=</span> n <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> m<span class=\"sy4\">;</span><br/>        n <span class=\"sy2\">-</span><span class=\"sy1\">=</span> m<span class=\"sy4\">;</span> n <span class=\"sy2\">/</span><span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">unsigned</span> sumDigits<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> v <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> sumDigits<span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> listAllSmithNumbers<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> n <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span> pf<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        primeFactors<span class=\"br0\">(</span> i, pf <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> pf.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> sumDigits<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy1\">==</span> sumDigits<span class=\"br0\">(</span> pf <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>        pf.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    listAllSmithNumbers<span class=\"br0\">(</span> <span class=\"nu0\">10000</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 26, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> divisible? <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>mod a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> prime? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not-any?</span> <span class=\"br0\">(</span>partial divisible? n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> prime<span class=\"sy0\">-</span>factors<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors n <span class=\"nu0\">2</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n candidate acc<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> acc<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>rem n candidate<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">recur</span><br/>                                  <span class=\"br0\">(</span><span class=\"sy0\">/</span> n candidate<span class=\"br0\">)</span><br/>                                  candidate<br/>                                  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> candidate acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     \u00a0:<span class=\"me1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">recur</span> n <span class=\"br0\">(</span><span class=\"kw1\">inc</span> candidate<span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> sum<span class=\"sy0\">-</span>digits <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>int <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>int \\<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> smith<span class=\"sy0\">-</span>number? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>prime? n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>digits n<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>digits <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string<span class=\"sy0\">/</span>join <span class=\"st0\">\"\"</span> <span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">filter</span> smith<span class=\"sy0\">-</span>number? <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 53, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> cnt<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span>_000<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> factors <span class=\"sy0\">=</span> primeFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>factors.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> sumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>f<span class=\"sy0\">;</span> factors<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sum <span class=\"sy0\">-=</span> sumDigits<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                writef<span class=\"br0\">(</span><span class=\"st0\">\"%4s  \"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                cnt<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cnt<span class=\"sy0\">==</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> primeFactors<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">array</span> <span class=\"sy0\">:</span> appender<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> appender<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> n<span class=\"sy0\">%</span>i<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> n<span class=\"sy0\">/=</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result.<span class=\"me1\">put</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">*</span>i<span class=\"sy0\">&lt;=</span>n<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span>i<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result.<span class=\"me1\">put</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n<span class=\"sy0\">/=</span>i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">!=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result.<span class=\"me1\">put</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result.<span class=\"me1\">data</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> sumDigits<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        n <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 21, "block": "<pre class=\"text highlighted_source\">defmodule Smith do<br/>  def number?(n) do<br/>    d = decomposition(n)<br/>    length(d)&gt;1 and sum_digits(n) == Enum.map(d, &amp;sum_digits/1) |&gt; Enum.sum<br/>  end<br/>\u00a0<br/>  defp sum_digits(n) do<br/>    Integer.digits(n) |&gt; Enum.sum<br/>  end<br/>\u00a0<br/>  defp decomposition(n, k\\\\2, acc\\\\[])  <br/>  defp decomposition(n, k, acc) when n &lt; k*k, do: [n | acc]<br/>  defp decomposition(n, k, acc) when rem(n, k) == 0, do: decomposition(div(n, k), k, [k | acc])<br/>  defp decomposition(n, k, acc), do: decomposition(n, k+1, acc)<br/>end<br/>\u00a0<br/>m = 10000<br/>smith = Enum.filter(1..m, &amp;Smith.number?/1)<br/>IO.puts \"#{length(smith)} smith numbers below #{m}:\"<br/>IO.puts \"First 10: #{Enum.take(smith,10) |&gt; Enum.join(\", \")}\"<br/>IO.puts \"Last  10: #{Enum.take(smith,-10) |&gt; Enum.join(\", \")}\"</pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">USING: formatting grouping io kernel math.primes<br/>math.primes.factors math.text.utils sequences sequences.deep\u00a0;<br/>IN: rosetta-code.smith-numbers<br/>\u00a0<br/>: smith? ( n --\u00a0? )<br/>    [ prime? not ]<br/>    [ 1 digit-groups sum ]<br/>    [ factors [ 1 digit-groups ] map flatten sum ] tri = and\u00a0;<br/>\u00a0<br/>10,000 iota [ smith? ] filter rest 10 group<br/>[ [ \"%4d \" printf ] each nl ] each</pre>"}, {"lang": "Fortran", "loc": 125, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> FACTORISE\t<span class=\"co1\">!Produce a little list...</span><br/>       <span class=\"kw3\">USE</span> PRIMEBAG\t\t<span class=\"co1\">!This is a common need.</span><br/>       <span class=\"kw3\">INTEGER</span> LASTP\t\t<span class=\"co1\">!Some size allowances.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>LASTP <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>\t<span class=\"co1\">!2*3*5*7*11*13*17*19*23*29 = 6,469,693,230, &gt; 2,147,483,647.</span><br/>       <span class=\"kw3\">TYPE</span> FACTORED\t\t<span class=\"co1\">!Represent a number fully factored.</span><br/>        <span class=\"kw3\">INTEGER</span> PVAL<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>LASTP<span class=\"br0\">)</span>\t<span class=\"co1\">!As a list of prime number indices with PVAL(0) the count.</span><br/>        <span class=\"kw3\">INTEGER</span> PPOW<span class=\"br0\">(</span>LASTP<span class=\"br0\">)</span>\t<span class=\"co1\">!And the powers. for the fingered primes.</span><br/>       <span class=\"kw1\">END</span> <span class=\"kw3\">TYPE</span> FACTORED\t<span class=\"co1\">!Rather than as a simple number multiplied out.</span><br/>\u00a0<br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!Now for the details.</span><br/>        <span class=\"kw1\">SUBROUTINE</span> SHOWFACTORS<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!First, to show an internal data structure.</span><br/>         <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>FACTORED<span class=\"br0\">)</span> N\t<span class=\"co1\">!It is supplied as a list of prime factors.</span><br/>         <span class=\"kw3\">INTEGER</span> I\t\t<span class=\"co1\">!A stepper.</span><br/>          <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Step along the list.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.1<span class=\"br0\">)</span> WRITE <span class=\"br0\">(</span>MSG,<span class=\"st0\">\"('x',$)\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Append a glyph for \"multiply\".</span><br/>            WRITE <span class=\"br0\">(</span>MSG,<span class=\"st0\">\"(I0,$)\"</span><span class=\"br0\">)</span> N.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!The prime number's value.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">PPOW</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>.<span class=\"me1\">GT</span>.1<span class=\"br0\">)</span> WRITE <span class=\"br0\">(</span>MSG,<span class=\"st0\">\"('^',I0,$)\"</span><span class=\"br0\">)</span> N.<span class=\"me1\">PPOW</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!With an interesting power?</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next element in the list.</span><br/>          WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> N.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!End the line</span><br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\": Factor count \"</span>,I0<span class=\"br0\">)</span>\t<span class=\"co1\">!With a count of prime factors.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SHOWFACTORS\t<span class=\"co1\">!Hopefully, this will not be needed often.</span><br/>\u00a0<br/>        <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>FACTORED<span class=\"br0\">)</span> <span class=\"kw1\">FUNCTION</span> FACTOR<span class=\"br0\">(</span>IT<span class=\"br0\">)</span>\t<span class=\"co1\">!Into a list of primes and their powers.</span><br/><span class=\"co1\">Careful! 1 is not a factor of N, but if N is prime, N is. N = product of its prime factors.</span><br/>         <span class=\"kw3\">INTEGER</span> IT,N\t<span class=\"co1\">!The number and a similar style copy to damage.</span><br/>         <span class=\"kw3\">INTEGER</span> F,FP\t<span class=\"co1\">!A factor and a power.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IT.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Factor only positive numbers!\"</span>\t<span class=\"co1\">!Or else...</span><br/>          FACTOR.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t<span class=\"co1\">!No prime factors have been found. One need not apply.</span><br/>          F <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!NEXTPRIME(F) will return 2, the first factor to try.</span><br/>          N <span class=\"sy0\">=</span> IT\t\t<span class=\"co1\">!A copy I can damage.</span><br/><span class=\"co1\">Collapse N into its prime factors.</span><br/>   <span class=\"nu0\">10</span>     <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>N.<span class=\"me1\">GT</span>.1<span class=\"br0\">)</span>\t<span class=\"co1\">!Carthaga delenda est?</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ISPRIME<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><span class=\"co1\">!If the remnant is a prime number,</span><br/>              F <span class=\"sy0\">=</span> N\t\t\t<span class=\"co1\">!Then it is the last factor.</span><br/>              FP <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Its power is one.</span><br/>              N <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!And the reduction is finished.</span><br/>             <span class=\"kw1\">ELSE</span>\t\t<span class=\"co1\">!Otherwise, continue trying larger factors.</span><br/>              FP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!It has no power yet.</span><br/>   <span class=\"nu0\">11</span>         F <span class=\"sy0\">=</span> NEXTPRIME<span class=\"br0\">(</span>F<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Go for the next possible factor.</span><br/>              <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>N,F<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span>\t<span class=\"co1\">!Well?</span><br/>                FP <span class=\"sy0\">=</span> FP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Count a factor..</span><br/>                N <span class=\"sy0\">=</span> N<span class=\"sy0\">/</span>F\t\t\t\t<span class=\"co1\">!Reduce the number.</span><br/>              <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!Until F's multiplicity is exhausted.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FP.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">11</span>\t<span class=\"co1\">!No presence? Try the next factor: N has some...</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!One way or another, F is a prime factor and FP its power.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FACTOR.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">GE</span>.<span class=\"me1\">LASTP</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Have I room in the list?</span><br/>              WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> IT,LASTP\t\t<span class=\"co1\">!Alas.</span><br/>    <span class=\"nu0\">1</span>         FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Factoring \"</span>,I0,<span class=\"st0\">\" but with provision for only \"</span>,\t<span class=\"co1\">!This shouldn't happen,</span><br/>     <span class=\"nu0\">1</span>         I0,<span class=\"st0\">\" distinct prime factors!\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!If LASTP is correct for the current INTEGER size.</span><br/>              <span class=\"kw1\">CALL</span> SHOWFACTORS<span class=\"br0\">(</span>FACTOR<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Show what has been found so far.</span><br/>              <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Not enough storage!\"</span>\t<span class=\"co1\">!Quite.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!But normally,</span><br/>            FACTOR.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> FACTOR.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Admit another factor.</span><br/>            FACTOR.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span>FACTOR.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> F\t<span class=\"co1\">!The prime number found to be a factor.</span><br/>            FACTOR.<span class=\"me1\">PPOW</span><span class=\"br0\">(</span>FACTOR.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> FP\t<span class=\"co1\">!Place its power.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!Now seee what has survived.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> FACTOR\t<span class=\"co1\">!Thus, a list of primes and their powers.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> FACTORISE\t<span class=\"co1\">!Careful! PVAL(0) is the number of prime factors.</span><br/>\u00a0<br/>      <span class=\"kw1\">MODULE</span> SMITHSTUFF\t<span class=\"co1\">!Now for the strange stuff.</span><br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!The two special workers.</span><br/>        <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">FUNCTION</span> DIGITSUM<span class=\"br0\">(</span>N,BASE<span class=\"br0\">)</span>\t<span class=\"co1\">!Sums the digits of N.</span><br/>         <span class=\"kw3\">INTEGER</span> N,IT\t<span class=\"co1\">!The number, and a copy I can damage.</span><br/>         <span class=\"kw3\">INTEGER</span> BASE\t<span class=\"co1\">!The base for arithmetic,</span><br/>         <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"DigitSum: negative numbers need not apply!\"</span><br/>          DIGITSUM <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t<span class=\"co1\">!Here we go.</span><br/>          IT <span class=\"sy0\">=</span> N\t<span class=\"co1\">!This value will be damaged.</span><br/>          <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>IT.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span>\t<span class=\"co1\">!Something remains?</span><br/>            DIGITSUM <span class=\"sy0\">=</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>IT,BASE<span class=\"br0\">)</span> <span class=\"sy0\">+</span> DIGITSUM\t<span class=\"co1\">!Yes. Grap the low-order digit.</span><br/>            IT <span class=\"sy0\">=</span> IT<span class=\"sy0\">/</span>BASE\t\t\t<span class=\"co1\">!And descend a power.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!Perhaps something still remains.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> DIGITSUM\t<span class=\"co1\">!Numerology.</span><br/>\u00a0<br/>        <span class=\"kw3\">LOGICAL</span> <span class=\"kw1\">FUNCTION</span> SMITHNUM<span class=\"br0\">(</span>N,BASE<span class=\"br0\">)</span>\t<span class=\"co1\">!Worse numerology.</span><br/>         <span class=\"kw3\">USE</span> FACTORISE\t\t<span class=\"co1\">!To find the prime factord of N.</span><br/>         <span class=\"kw3\">INTEGER</span> N\t\t<span class=\"co1\">!The number of interest.</span><br/>         <span class=\"kw3\">INTEGER</span> BASE\t\t<span class=\"co1\">!The base of the numerology.</span><br/>         <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>FACTORED<span class=\"br0\">)</span> F\t<span class=\"co1\">!A list.</span><br/>         <span class=\"kw3\">INTEGER</span> I,FD\t\t<span class=\"co1\">!Assistants.</span><br/>          F <span class=\"sy0\">=</span> FACTOR<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Hopefully, LASTP is large enough for N.</span><br/><span class=\"co1\">c          write (6,\"(a,I0,1x)\",advance=\"no\") \"N=\",N</span><br/><span class=\"co1\">c          call ShowFactors(F)</span><br/>          FD <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Attempts via the SUM facility involved too many requirements.</span><br/>          <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,F.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!For each of the prime factors found...</span><br/>            FD <span class=\"sy0\">=</span> DIGITSUM<span class=\"br0\">(</span>F.<span class=\"me1\">PVAL</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>,BASE<span class=\"br0\">)</span><span class=\"sy0\">*</span>F.<span class=\"me1\">PPOW</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">+</span> FD\t<span class=\"co1\">!Not forgetting the multiplicity.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next prime factor in the list.</span><br/>          SMITHNUM <span class=\"sy0\">=</span> FD.<span class=\"me1\">EQ</span>.<span class=\"me1\">DIGITSUM</span><span class=\"br0\">(</span>N,BASE<span class=\"br0\">)</span>\t<span class=\"co1\">!This is the rule.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> SMITHNUM\t<span class=\"co1\">!So, is N a joker?</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> SMITHSTUFF\t<span class=\"co1\">!Simple enough.</span><br/>\u00a0<br/>      <span class=\"kw3\">USE</span> PRIMEBAG\t<span class=\"co1\">!Gain access to GRASPPRIMEBAG.</span><br/>      <span class=\"kw3\">USE</span> SMITHSTUFF\t<span class=\"co1\">!The special stuff.</span><br/>      <span class=\"kw3\">INTEGER</span> LAST\t\t<span class=\"co1\">!Might as well document this.</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>LAST <span class=\"sy0\">=</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The specification is BELOW 10000...</span><br/>      <span class=\"kw3\">INTEGER</span> I,N,BASE\t\t<span class=\"co1\">!Workers.</span><br/>      <span class=\"kw3\">INTEGER</span> NB,BAG<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Prepare a line's worth of results.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t<span class=\"co1\">!Standard output.</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> LAST\t<span class=\"co1\">!Hello.</span><br/>    <span class=\"nu0\">1</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">'To find the \"Smith\" numbers up to '</span>,I0<span class=\"br0\">)</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>.<span class=\"kw4\">NOT</span>.<span class=\"me1\">GRASPPRIMEBAG</span><span class=\"br0\">(</span><span class=\"nu0\">66</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Gan't grab my file!\"</span>\t<span class=\"co1\">!Attempt in hope.</span><br/>\u00a0<br/>   <span class=\"nu0\">10</span> <span class=\"kw1\">DO</span> BASE <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>,<span class=\"nu0\">12</span>\t<span class=\"co1\">!Flexible numerology.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">11</span><span class=\"br0\">)</span> BASE\t<span class=\"co1\">!Here we go again.</span><br/>   <span class=\"nu0\">11</span>   FORMAT <span class=\"br0\">(</span><span class=\"sy0\">/</span>,<span class=\"st0\">\"Working in base \"</span>,I0<span class=\"br0\">)</span><br/>        N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!None found.</span><br/>        NB <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!So, none are bagged.</span><br/>        <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,LAST\t\t<span class=\"co1\">!Step through the span.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ISPRIME<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">CYCLE</span>\t\t<span class=\"co1\">!Prime numbers are boring Smith numbers. Skip them.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>SMITHNUM<span class=\"br0\">(</span>I,BASE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!So?</span><br/>            N <span class=\"sy0\">=</span> N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Count one in.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NB.<span class=\"me1\">GE</span>.20<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t\t<span class=\"co1\">!A full line's worth with another to come?</span><br/>              WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">12</span><span class=\"br0\">)</span> BAG\t\t\t<span class=\"co1\">!Yep. Roll the line to make space.</span><br/>   <span class=\"nu0\">12</span>         FORMAT <span class=\"br0\">(</span>20I6<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">!This will do for a nice table.</span><br/>              NB <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t\t\t<span class=\"co1\">!The line is now ready.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!So much for a line buffer.</span><br/>            NB <span class=\"sy0\">=</span> NB <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Count another entry.</span><br/>            BAG<span class=\"br0\">(</span>NB<span class=\"br0\">)</span> <span class=\"sy0\">=</span> I\t\t\t\t<span class=\"co1\">!Place it.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for a Smith style number.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next candidate number.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">12</span><span class=\"br0\">)</span> BAG<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>NB<span class=\"br0\">)</span><span class=\"co1\">!Wave the tail end.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">13</span><span class=\"br0\">)</span> N\t<span class=\"co1\">!Save the human some counting.</span><br/>   <span class=\"nu0\">13</span>   FORMAT <span class=\"br0\">(</span>I9,<span class=\"st0\">\" found.\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Just in case.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next base.</span><br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!That was strange.</span></pre>"}, {"lang": "FreeBASIC", "loc": 55, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> getPrimeFactors<span class=\"br0\">(</span>factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">Dim</span> factor <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> factor = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> factors<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      factors<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><span class=\"br0\">)</span> = factor<br/>      n \\= factor<br/>      <span class=\"kw1\">If</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"co1\">' non-prime factors will always give a remainder &gt; 0 as their own factors have already been removed</span><br/>      <span class=\"co1\">' so it's not worth checking that the next potential factor is prime  </span><br/>      factor += <span class=\"nu0\">1</span>  <br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span>    <br/>  <span class=\"kw1\">Loop</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <br/>\u00a0<br/><span class=\"kw1\">Function</span> sumDigits<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">10</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n<br/>  <span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">While</span> n &gt; <span class=\"nu0\">0</span><br/>    sum += n <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><br/>    n \\= <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Return</span> sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isSmith<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Dim</span> factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  getPrimeFactors factors<span class=\"br0\">(</span><span class=\"br0\">)</span>, n<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span>  <span class=\"co1\">'' n must be prime if there's only one factor</span><br/>  <span class=\"kw1\">Dim</span> primeSum <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><br/>    primeSum += sumDigits<span class=\"br0\">(</span>factors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> sumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = primeSum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The Smith numbers below 10000 are\u00a0: \"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9999</span><br/>  <span class=\"kw1\">If</span> isSmith<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span>  <br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"#####\"</span>; i;<br/>    count += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> count; <span class=\"st0\">\" numbers found\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 85, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> numPrimeFactors<span class=\"sy1\">(</span>x <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> p <span class=\"kw4\">uint</span> <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">var</span> pf <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">if</span> x <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>x <span class=\"sy3\">%</span> p<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\tpf<span class=\"sy2\">++</span><br/>\t\t\tx <span class=\"sy2\">/=</span> p<br/>\t\t\t<span class=\"kw1\">if</span> x <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">return</span> pf<br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\tp<span class=\"sy2\">++</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> primeFactors<span class=\"sy1\">(</span>x <span class=\"kw4\">uint</span><span class=\"sy1\">,</span> arr <span class=\"sy1\">[]</span><span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> p <span class=\"kw4\">uint</span> <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">var</span> pf <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">if</span> x <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\tarr<span class=\"sy1\">[</span>pf<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">return</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>x <span class=\"sy3\">%</span> p<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\tarr<span class=\"sy1\">[</span>pf<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<br/>\t\t\tpf<span class=\"sy2\">++</span><br/>\t\t\tx <span class=\"sy2\">/=</span> p<br/>\t\t\t<span class=\"kw1\">if</span> x <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">return</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\tp<span class=\"sy2\">++</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sumDigits<span class=\"sy1\">(</span>x <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"kw4\">uint</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> sum <span class=\"kw4\">uint</span><br/>\t<span class=\"kw1\">for</span> x <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\tsum <span class=\"sy2\">+=</span> x <span class=\"sy3\">%</span> <span class=\"nu0\">10</span><br/>\t\tx <span class=\"sy2\">/=</span> <span class=\"nu0\">10</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> sum<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sumFactors<span class=\"sy1\">(</span>arr <span class=\"sy1\">[]</span><span class=\"kw4\">uint</span><span class=\"sy1\">,</span> size <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">uint</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> sum <span class=\"kw4\">uint</span><br/>\t<span class=\"kw1\">for</span> a <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> a &lt; size<span class=\"sy1\">;</span> a<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tsum <span class=\"sy2\">+=</span> sumDigits<span class=\"sy1\">(</span>arr<span class=\"sy1\">[</span>a<span class=\"sy1\">])</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> sum<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> listAllSmithNumbers<span class=\"sy1\">(</span>maxSmith <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> arr <span class=\"sy1\">[]</span><span class=\"kw4\">uint</span><br/>\t<span class=\"kw1\">var</span> a <span class=\"kw4\">uint</span><br/>\t<span class=\"kw1\">for</span> a <span class=\"sy2\">=</span> <span class=\"nu0\">4</span><span class=\"sy1\">;</span> a &lt; maxSmith<span class=\"sy1\">;</span> a<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tnumfactors <span class=\"sy2\">:=</span> numPrimeFactors<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>\t\tarr <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">uint</span><span class=\"sy1\">,</span> numfactors<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> numfactors &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">continue</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tprimeFactors<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> arr<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> sumDigits<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> sumFactors<span class=\"sy1\">(</span>arr<span class=\"sy1\">,</span> numfactors<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%4d \"</span><span class=\"sy1\">,</span> a<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> maxSmith <span class=\"sy2\">=</span> <span class=\"nu0\">10000</span><br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"All the Smith Numbers less than\u00a0%d are:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> maxSmith<span class=\"sy1\">)</span><br/>\tlistAllSmithNumbers<span class=\"sy1\">(</span>maxSmith<span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 38, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Tuple <span class=\"br0\">(</span>swap<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/>\u00a0<br/>isSmith <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isSmith n <span class=\"sy0\">=</span> pfs <span class=\"sy0\">/=</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> sumDigits n <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> sumDigits<span class=\"br0\">)</span> <span class=\"nu0\">0</span> pfs<br/>  <span class=\"kw1\">where</span><br/>    sumDigits <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> baseDigits <span class=\"nu0\">10</span><br/>    root <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floor\"><span class=\"kw3\">floor</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a><br/>    pfs <span class=\"sy0\">=</span> primeFactors n<br/>    primeFactors n <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> fs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> root n<span class=\"br0\">]</span><br/>      <span class=\"kw1\">in</span> <span class=\"kw1\">case</span> fs <span class=\"kw1\">of</span><br/>           <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>           <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> fs <span class=\"sy0\">++</span> primeFactors <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a> n <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> fs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>baseDigits <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>baseDigits base <span class=\"sy0\">=</span> unfoldr remQuot<br/>  <span class=\"kw1\">where</span><br/>    remQuot <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> Nothing<br/>    remQuot x <span class=\"sy0\">=</span> Just <span class=\"br0\">(</span>swap <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quotRem\"><span class=\"kw3\">quotRem</span></a> x base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>lowSmiths <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>lowSmiths <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isSmith <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">9999</span><span class=\"br0\">]</span><br/>\u00a0<br/>lowSmithCount <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>lowSmithCount <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> lowSmiths<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"Count of Smith Numbers below 10k:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> lowSmithCount<br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>First 15 Smith Numbers:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">&lt;$&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">15</span> lowSmiths<span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Last 12 Smith Numbers below 10k:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">&lt;$&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span>lowSmithCount <span class=\"sy0\">-</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> lowSmiths<span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">digits=: <span class=\"nu0\">10</span>&amp;#.inv<br/>sumdig=: +/@,@digits<br/>notprime=: <a class=\"__cf_email__\" data-cfemail=\"4a67640a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;p:<span class=\"sy0\">)</span> <br/>smith=: #~  notprime * <span class=\"sy0\">(</span>=&amp;sumdig q:<span class=\"sy0\">)</span>every</pre>"}, {"lang": "Java", "loc": 45, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SmithNumbers <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span>_000<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> factors <span class=\"sy0\">=</span> primeFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>factors.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> sumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> f <span class=\"sy0\">:</span> factors<span class=\"br0\">)</span><br/>                    sum <span class=\"sy0\">-=</span> sumDigits<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> primeFactors<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> i<span class=\"br0\">)</span><br/>            result.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                result.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                n <span class=\"sy0\">/=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            result.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> sumDigits<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 93, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS -----------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> concat <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> unit <span class=\"sy0\">=</span> <span class=\"kw1\">typeof</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">'string'</span> <span class=\"sy0\">?</span> <span class=\"st0\">''</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> unit.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span>unit<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// range\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> range <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// dropWhile\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> dropWhile <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let lng <span class=\"sy0\">=</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> lng<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> p<span class=\"br0\">(</span>xs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// head\u00a0:: [a] -&gt; a</span><br/>    <span class=\"kw1\">const</span> head <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Int -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> take <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// drop\u00a0:: Int -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> drop <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// floor\u00a0:: Num a =&gt; a -&gt; Int</span><br/>    <span class=\"kw1\">const</span> floor <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// floor\u00a0:: Num -&gt; Num</span><br/>    <span class=\"kw1\">const</span> sqrt <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unwords\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> unwords <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// MAIN -----------------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// primeFactors\u00a0:: Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> primeFactors <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> fs <span class=\"sy0\">=</span> take<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>dropWhile<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">%</span> x <span class=\"sy0\">!==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> range<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> floor<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> fs.<span class=\"me1\">length</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> fs.<span class=\"me1\">concat</span><span class=\"br0\">(</span>primeFactors<span class=\"br0\">(</span>floor<span class=\"br0\">(</span>n <span class=\"sy0\">/</span> head<span class=\"br0\">(</span>fs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// digitSum\u00a0:: [Char] -&gt; Int</span><br/>    <span class=\"kw1\">const</span> digitSum <span class=\"sy0\">=</span> ds <span class=\"sy0\">=&gt;</span><br/>        ds<br/>        .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> parseInt<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> parseInt<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// isSmith\u00a0:: Int -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> isSmith <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> pfs <span class=\"sy0\">=</span> primeFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>head<span class=\"br0\">(</span>pfs<span class=\"br0\">)</span> <span class=\"sy0\">!==</span> n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            digitSum<span class=\"br0\">(</span>n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> digitSum<span class=\"br0\">(</span><br/>                concat<span class=\"br0\">(</span>pfs.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST ------------------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// lowSmiths\u00a0:: [Int]</span><br/>    <span class=\"kw1\">const</span> lowSmiths <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">filter</span><span class=\"br0\">(</span>isSmith<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// lowSmithCount\u00a0:: Int</span><br/>    <span class=\"kw1\">const</span> lowSmithCount <span class=\"sy0\">=</span> lowSmiths.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><br/>        <span class=\"st0\">\"Count of Smith Numbers below 10k:\"</span><span class=\"sy0\">,</span><br/>            show<span class=\"br0\">(</span>lowSmithCount<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">\"<span class=\"es0\">\\n</span>First 15 Smith Numbers:\"</span><span class=\"sy0\">,</span><br/>            unwords<span class=\"br0\">(</span>take<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span> lowSmiths<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">\"<span class=\"es0\">\\n</span>Last 12 Smith Numbers below 10000:\"</span><span class=\"sy0\">,</span><br/>            unwords<span class=\"br0\">(</span>drop<span class=\"br0\">(</span>lowSmithCount <span class=\"sy0\">-</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> lowSmiths<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>function sumdigits(n::Integer)<br/>    sum = 0<br/>    while n &gt; 0<br/>        sum += n\u00a0% 10<br/>        n = div(n, 10)<br/>    end<br/>    return sum<br/>end<br/>\u00a0<br/>using Primes<br/>issmith(n::Integer) =\u00a0!isprime(n) &amp;&amp; sumdigits(n) == sum(sumdigits(f) for f in factor(Vector, n))<br/>\u00a0<br/>smithnumbers = collect(n for n in 2:10000 if issmith(n))<br/>println(\"Smith numbers up to 10000:\\n$smithnumbers\")</pre>"}, {"lang": "Kotlin", "loc": 50, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun getPrimeFactors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factors <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> factors<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> factor <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> factor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>factor<span class=\"br0\">)</span><br/>            nn /<span class=\"sy0\">=</span> factor<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> factors<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>factor <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> factor +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> factor <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun sumDigits<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>        n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> -<span class=\"sy0\">&gt;</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>   -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sum +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                nn /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>            <span class=\"br0\">}</span><br/>            sum<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun isSmith<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factors <span class=\"sy0\">=</span> getPrimeFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>factors.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primeSum <span class=\"sy0\">=</span> factors.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> sumDigits<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> primeSum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The Smith numbers below 10000 are:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span> until <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isSmith<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"%5d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            count++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>$count numbers found\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 51, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Returns a boolean indicating whether n is prime</span><br/><span class=\"kw1\">function</span> isPrime <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Returns a table of the prime factors of n</span><br/><span class=\"kw1\">function</span> primeFactors <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> pfacs<span class=\"sy0\">,</span> divisor <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> pfacs <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> isPrime<span class=\"br0\">(</span>divisor<span class=\"br0\">)</span> <span class=\"kw1\">do</span> divisor <span class=\"sy0\">=</span> divisor <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">while</span> n <span class=\"sy0\">%</span> divisor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>            n <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> divisor<br/>            <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>pfacs<span class=\"sy0\">,</span> divisor<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        divisor <span class=\"sy0\">=</span> divisor <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> pfacs <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>pfacs<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> pfacs<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Returns the sum of the digits of n</span><br/><span class=\"kw1\">function</span> sumDigits <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> sum<span class=\"sy0\">,</span> nStr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw3\">tostring</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> digit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> nStr<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>nStr<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>digit<span class=\"sy0\">,</span> digit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> sum<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Returns a boolean indicating whether n is a Smith number</span><br/><span class=\"kw1\">function</span> isSmith <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> sumFacs <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>primeFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        sumFacs <span class=\"sy0\">=</span> sumFacs <span class=\"sy0\">+</span> sumDigits<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> sumFacs <span class=\"sy0\">==</span> sumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> isSmith<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>n <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 59, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      Set Fast\u00a0!<br/>      Form 80, 40<br/>      Refresh<br/>      Function Smith(max=10000) {<br/>            Function SumDigit(a$) {<br/>                  def long sum<br/>                  For i=1 to len(a$) {sum+=val(mid$(a$,i, 1)) }<br/>                  =sum<br/>            }      <br/>                  x=max<br/>                  \\\\ Euler's Sieve<br/>                        Dim r(x+1)=1<br/>                        k=2<br/>                        k2=k**2<br/>                        While k2&lt;x {<br/>                              For m=k2 to x step k {r(m)=0}<br/>                              Repeat {<br/>                              k++\u00a0:  k2=k**2<br/>                              } Until r(k)=1 or k2&gt;x<br/>                        }<br/>            r(0)=0<br/>            smith=0<br/>            smith2=0<br/>            lastI=0<br/>            inventory smithnumbers<br/>            Top=max div 100<br/>            c=4<br/>            For i=4 to max {<br/>                if c&gt; top then  print over $(0,6), ceil(i/max*100);\"%\"\u00a0: Refresh\u00a0: c=1<br/>                c++<br/>                  if r(i)=0 then {<br/>                        smith=sumdigit(str$(i))\u00a0: lastI=i<br/>                        smith2=0<br/>                        do {<br/>                              ii=int(sqrt(i))+1<br/>                              do {  ii--\u00a0:   while r(ii)&lt;&gt;1 {ii--} } until i mod ii=0 <br/>                               if ii&lt;2 then smith2+=sumdigit(str$(i)):exit<br/>                               smith3=sumdigit(str$(ii))<br/>                              do {<br/>                                   smith2+=smith3<br/>                                    i=i div ii\u00a0: if ii&lt;2  or i&lt;2 then exit<br/>                              } until  i mod ii&lt;&gt;0  or smith2&gt;smith<br/>                        } until i&lt;2 or smith2&gt;smith<br/>                       If  smith=smith2 then Append smithnumbers, lastI<br/>                  }<br/>            }<br/>            =smithnumbers<br/>      }<br/>      const MaxNumbers=10000<br/>      numbers= Smith(MaxNumbers)<br/>      Print<br/>      Print $(,5), numbers<br/>      Print<br/>      Print format$(\" {0} smith numbers found &lt;= {1}\", Len(numbers), MaxNumbers)<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">smithQ[n_]\u00a0:= Not[PrimeQ[n]] &amp;&amp; <br/>            Total[IntegerDigits[n]] == Total[IntegerDigits /@ Flatten[ConstantArray @@@ FactorInteger[n]],2];<br/>\u00a0<br/>Select[Range[2, 10000], smithQ]</pre>"}, {"lang": "Modula-2", "loc": 60, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> SmithNumbers;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> SumDigits<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span> sum <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        sum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"kw1\">MOD</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>        n <span class=\"sy0\">:=</span> n <span class=\"kw1\">DIV</span> <span class=\"nu0\">10</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> sum;<br/><span class=\"kw1\">END</span> SumDigits;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>fc<span class=\"sy0\">,</span>sum<span class=\"sy0\">,</span>rc <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    rc <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10000</span> <span class=\"kw1\">DO</span><br/>        n <span class=\"sy0\">:=</span> i;<br/>        fc <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>        sum <span class=\"sy0\">:=</span> SumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>\u00a0<br/>        j <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span>;<br/>        <span class=\"kw1\">WHILE</span> n <span class=\"kw1\">MOD</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>fc<span class=\"br0\">)</span>;<br/>            sum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">-</span> SumDigits<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>            n <span class=\"sy0\">:=</span> n <span class=\"kw1\">DIV</span> j;<br/>        <span class=\"kw1\">END</span>;<br/>\u00a0<br/>        j <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>;<br/>        <span class=\"kw1\">WHILE</span> j<span class=\"sy0\">*</span>j&lt;<span class=\"sy0\">=</span>n <span class=\"kw1\">DO</span><br/>            <span class=\"kw1\">WHILE</span> n <span class=\"kw1\">MOD</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>                <span class=\"kw3\">INC</span><span class=\"br0\">(</span>fc<span class=\"br0\">)</span>;<br/>                sum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">-</span> SumDigits<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>                n <span class=\"sy0\">:=</span> n <span class=\"kw1\">DIV</span> j;<br/>            <span class=\"kw1\">END</span>;<br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span>;<br/>\u00a0<br/>        <span class=\"kw1\">IF</span> n<span class=\"sy0\">#</span><span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>fc<span class=\"br0\">)</span>;<br/>            sum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">-</span> SumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span>;<br/>\u00a0<br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>fc&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%4i  \"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> i<span class=\"br0\">)</span>;<br/>            WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>rc<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">IF</span> rc<span class=\"sy0\">=</span><span class=\"nu0\">10</span> <span class=\"kw1\">THEN</span><br/>                rc <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>                WriteLn;<br/>            <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar;<br/><span class=\"kw1\">END</span> SmithNumbers.</pre>"}, {"lang": "Objeck", "loc": 50, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      factors <span class=\"sy0\">:=</span> PrimeFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>factors<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">:=</span> SumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> factors<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          sum <span class=\"sy0\">-=</span> SumDigits<span class=\"br0\">(</span>factors<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          n<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> PrimeFactors<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ IntVector <span class=\"br0\">{</span><br/>    result <span class=\"sy0\">:=</span> IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> i<span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      result<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        n <span class=\"sy0\">/=</span> i<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      result<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> SumDigits<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      sum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      n <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">isSmith<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>f<span class=\"sy0\">=</span><span class=\"kw1\">factor</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>#f~<span class=\"sy0\">==</span><span class=\"nu1\">1</span> <span class=\"sy0\">&amp;&amp;</span> f<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> #f~<span class=\"sy0\">,</span> sumdigits<span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>f<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> sumdigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">select</span><span class=\"br0\">(</span>isSmith<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">9999</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 283, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> SmithNum<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>  <span class=\"co2\">{$MODE objFPC}</span> <span class=\"co1\">//result and  useful for x64</span><br/>  <span class=\"co2\">{$CODEALIGN PROC=64}</span><br/><span class=\"co2\">{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tdigit  <span class=\"sy3\">=</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>  tSum    <span class=\"sy3\">=</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  base <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//maxDigitCnt *(base-1) &lt;= High(tSum)</span><br/>  <span class=\"co1\">//maxDigitCnt &lt;= High(tSum) DIV (base-1);</span><br/>  maxDigitCnt <span class=\"sy3\">=</span> <span class=\"nu0\">16</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  StartPrimNo <span class=\"sy3\">=</span> <span class=\"nu0\">6</span><span class=\"sy1\">;</span><br/>  csegsieveSIze <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"nu0\">5</span><span class=\"sy3\">*</span><span class=\"nu0\">7</span><span class=\"sy3\">*</span><span class=\"nu0\">11</span><span class=\"sy3\">*</span><span class=\"nu0\">13</span><span class=\"sy1\">;</span><span class=\"co1\">//prime 0..5</span><br/><span class=\"kw1\">type</span><br/>  tDgtSum <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>              dgtNum <span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/>              dgtSum <span class=\"sy1\">:</span> tSum<span class=\"sy1\">;</span><br/>              dgts   <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">maxDigitCnt</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> tdigit<span class=\"sy1\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tNumFactype <span class=\"sy3\">=</span> <span class=\"kw4\">word</span><span class=\"sy1\">;</span><br/>  tnumFactor <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                 numfacCnt<span class=\"sy1\">:</span> tNumFactype<span class=\"sy1\">;</span><br/>                 numfacts <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> tNumFactype<span class=\"sy1\">;</span><br/>               <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tpnumFactor<span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tnumFactor<span class=\"sy1\">;</span><br/>\u00a0<br/>  tsieveprim <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                 spPrim   <span class=\"sy1\">:</span> <span class=\"kw4\">Word</span><span class=\"sy1\">;</span><br/>                 spDgtsum <span class=\"sy1\">:</span> <span class=\"kw4\">Word</span><span class=\"sy1\">;</span><br/>                 spOffset <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/>               <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tpsieveprim <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tsieveprim<span class=\"sy1\">;</span><br/>\u00a0<br/>  tsievePrimarr  <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">6542</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> tsieveprim<span class=\"sy1\">;</span><br/>  tsegmSieve     <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">csegsieveSIze</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> tnumFactor<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  Primarr<span class=\"sy1\">:</span>tsievePrimarr<span class=\"sy1\">;</span><br/>  copySieve<span class=\"sy1\">,</span><br/>  actSieve <span class=\"sy1\">:</span> tsegmSieve<span class=\"sy1\">;</span><br/>  PrimDgtSum <span class=\"sy1\">:</span>tDgtSum<span class=\"sy1\">;</span><br/>  PrimCnt <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IncDgtSum<span class=\"br0\">(</span><span class=\"kw1\">var</span> ds<span class=\"sy1\">:</span>tDgtSum<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//add 1 to dgts and corrects sum of Digits</span><br/><span class=\"co1\">//return if overflow happens</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  inc<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgtNum</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw1\">IF</span> ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> &lt; Base<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    <span class=\"co1\">//add one and done</span><br/>    <span class=\"kw1\">Begin</span><br/>      inc<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgtSum</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">BREAK</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">Begin</span><br/>      ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgtSum</span><span class=\"sy1\">,</span>Base<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">until</span> i &lt; Low<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i &lt; Low<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> OutDgtSum<span class=\"br0\">(</span><span class=\"kw1\">const</span> ds<span class=\"sy1\">:</span>tDgtSum<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Low<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> i &gt; High<span class=\"br0\">(</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgts</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">' sum of digits\u00a0:  '</span><span class=\"sy1\">,</span>ds<span class=\"sy1\">.</span><span class=\"me1\">dgtSum</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> OutSieve<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span>tsegmSieve<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>j <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Low<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">with</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">Begin</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span>numfacCnt<span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">For</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> numfacCnt <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>numFacts<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> SieveForPrimes<span class=\"sy1\">;</span><br/><span class=\"co1\">// sieve for all primes &lt; High(Word)</span><br/><span class=\"kw1\">var</span><br/>  sieve <span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>  pS <span class=\"sy1\">:</span> pByte<span class=\"sy1\">;</span><br/>  p<span class=\"sy1\">,</span>i   <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  setlength<span class=\"br0\">(</span>sieve<span class=\"sy1\">,</span>High<span class=\"br0\">(</span><span class=\"kw4\">Word</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Fillchar<span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>Low<span class=\"br0\">(</span>sieve<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>length<span class=\"br0\">(</span>sieve<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  pS<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>sieve<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span> <span class=\"co1\">//zero based</span><br/>  dec<span class=\"br0\">(</span>pS<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">// make it one based</span><br/>  <span class=\"co1\">//sieve</span><br/>  p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"sy3\">*</span>p<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> i&gt; High<span class=\"br0\">(</span><span class=\"kw4\">Word</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">BREAK</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span> pS<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> inc<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">until</span> i &gt; High<span class=\"br0\">(</span><span class=\"kw4\">Word</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span> inc<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">until</span> pS<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//now fill array of primes</span><br/>  fillchar<span class=\"br0\">(</span>PrimDgtSum<span class=\"sy1\">,</span>SizeOf<span class=\"br0\">(</span>PrimDgtSum<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  IncDgtSum<span class=\"br0\">(</span>PrimDgtSum<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//1</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span><span class=\"kw4\">Word</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    IncDgtSum<span class=\"br0\">(</span>PrimDgtSum<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> pS<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      <span class=\"kw1\">with</span> PrimArr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        spOffset <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>p<span class=\"sy1\">;</span><span class=\"co1\">//start at 2*prime</span><br/>        spPrim   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"sy1\">;</span><br/>        spDgtsum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PrimDgtSum<span class=\"sy1\">.</span><span class=\"me1\">dgtSum</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  PrimCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> MarkWithPrime<span class=\"br0\">(</span>SpIdx<span class=\"sy1\">:</span>NativeInt<span class=\"sy1\">;</span><span class=\"kw1\">var</span> sf<span class=\"sy1\">:</span>tsegmSieve<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>  pSf <span class=\"sy1\">:</span><span class=\"sy2\">^</span>tnumFactor<span class=\"sy1\">;</span><br/>  MarkPrime <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">with</span> Primarr<span class=\"br0\">[</span>SpIdx<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    MarkPrime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> spPrim<span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  spOffSet<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> i &lt;<span class=\"sy3\">=</span> csegsieveSize <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      pSf <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>sf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">repeat</span><br/>        pSf<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">numFacts</span><span class=\"br0\">[</span>pSf<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">numfacCnt</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> SpIdx<span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>pSf<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">numfacCnt</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>pSf<span class=\"sy1\">,</span>MarkPrime<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>MarkPrime<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">until</span> i &gt; csegsieveSize<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    spOffset <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">-</span>csegsieveSize<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> InitcopySieve<span class=\"br0\">(</span><span class=\"kw1\">var</span> cs<span class=\"sy1\">:</span>tsegmSieve<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  pr<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  fillchar<span class=\"br0\">(</span>cs<span class=\"br0\">[</span>Low<span class=\"br0\">(</span>cs<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>sizeOf<span class=\"br0\">(</span>cs<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> Pr <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">with</span> Primarr<span class=\"br0\">[</span>pr<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>     spOffset <span class=\"sy1\">:</span><span class=\"sy3\">=</span> spPrim<span class=\"sy1\">;</span><span class=\"co1\">//mark the prime too</span><br/>    MarkWithPrime<span class=\"br0\">(</span>pr<span class=\"sy1\">,</span>cs<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> MarkNextSieve<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span>tsegmSieve<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  idx<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  s<span class=\"sy1\">:</span><span class=\"sy3\">=</span> copySieve<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> idx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> StartPrimNo <span class=\"kw1\">to</span> PrimCnt <span class=\"kw1\">do</span><br/>    MarkWithPrime<span class=\"br0\">(</span>idx<span class=\"sy1\">,</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> DgtSumInt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> NativeUInt<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeUInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  r <span class=\"sy1\">:</span> NativeUInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> base<span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>result<span class=\"sy1\">,</span>n<span class=\"sy3\">-</span>base<span class=\"sy3\">*</span>r<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> r<br/>  <span class=\"kw1\">until</span> r <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{function DgtSumOfFac(pN: tpnumFactor;dgtNo:tDgtSum):boolean;}</span><br/><span class=\"kw1\">function</span> TestSmithNum<span class=\"br0\">(</span>pN<span class=\"sy1\">:</span> tpnumFactor<span class=\"sy1\">;</span>dgtNo<span class=\"sy1\">:</span>tDgtSum<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>k<span class=\"sy1\">,</span>r<span class=\"sy1\">,</span>dgtSumI<span class=\"sy1\">,</span>dgtSumTarget <span class=\"sy1\">:</span> NativeUInt<span class=\"sy1\">;</span><br/>  pSp<span class=\"sy1\">:</span>tpsieveprim<span class=\"sy1\">;</span><br/>  pNumFact <span class=\"sy1\">:</span> <span class=\"sy2\">^</span>tNumFactype<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> dgtNo<span class=\"sy1\">.</span><span class=\"me1\">dgtNum</span><span class=\"sy1\">;</span><br/>  dgtSumTarget <span class=\"sy1\">:</span><span class=\"sy3\">=</span>dgtNo<span class=\"sy1\">.</span><span class=\"me1\">dgtSum</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  dgtSumI <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">with</span> pN<span class=\"sy2\">^</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> numfacCnt<span class=\"sy1\">;</span><br/>    pNumFact <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>numfacts<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> k<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    pSp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>PrimArr<span class=\"br0\">[</span>pNumFact<span class=\"sy2\">^</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"kw1\">DIV</span> pSp<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">spPrim</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> r<span class=\"sy1\">;</span><br/>      r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> r <span class=\"kw1\">DIV</span> pSp<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">spPrim</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>dgtSumI<span class=\"sy1\">,</span>pSp<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">spDgtsum</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> <span class=\"br0\">(</span>i <span class=\"sy3\">-</span> r<span class=\"sy3\">*</span> pSp<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">spPrim</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> dgtSumI &gt; dgtSumTarget <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>      EXIT<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>pNumFact<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">If</span> i &lt;&gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    inc<span class=\"br0\">(</span>dgtSumI<span class=\"sy1\">,</span>DgtSumInt<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> dgtSumI <span class=\"sy3\">=</span> dgtSumTarget<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CheckSmithNo<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span>tsegmSieve<span class=\"sy1\">;</span><span class=\"kw1\">var</span> dgtNo<span class=\"sy1\">:</span>tDgtSum<span class=\"sy1\">;</span>Lmt<span class=\"sy1\">:</span>NativeInt<span class=\"sy3\">=</span>csegsieveSIze<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeUInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  pNumFac <span class=\"sy1\">:</span> tpNumFactor<span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  pNumFac <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"kw1\">to</span> lmt <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    incDgtSum<span class=\"br0\">(</span>dgtNo<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> pNumFac<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">numfacCnt</span>&lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">IF</span> TestSmithNum<span class=\"br0\">(</span>pNumFac<span class=\"sy1\">,</span>dgtNo<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Begin</span><br/>        inc<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"co1\">//Mark as smith number</span><br/>        inc<span class=\"br0\">(</span>pNumFac<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">numfacCnt</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>pNumFac<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  limit <span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  actualNo <span class=\"sy1\">:</span>tDgtSum<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span>s <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  SieveForPrimes<span class=\"sy1\">;</span><br/>  InitcopySieve<span class=\"br0\">(</span>copySieve<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  s<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">6</span><span class=\"sy1\">;</span><span class=\"co1\">//- 2,3,5,7,11,13</span><br/>\u00a0<br/>  fillchar<span class=\"br0\">(</span>actualNo<span class=\"sy1\">,</span>SizeOf<span class=\"br0\">(</span>actualNo<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> i &lt; Limit<span class=\"sy3\">-</span>csegsieveSize <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    MarkNextSieve<span class=\"br0\">(</span>actSieve<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>CheckSmithNo<span class=\"br0\">(</span>actSieve<span class=\"sy1\">,</span>actualNo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> csegsieveSize<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//check the rest</span><br/>  MarkNextSieve<span class=\"br0\">(</span>actSieve<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  inc<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>CheckSmithNo<span class=\"br0\">(</span>actSieve<span class=\"sy1\">,</span>actualNo<span class=\"sy1\">,</span>Limit<span class=\"sy3\">-</span>i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span>s<span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"st0\">' smith-numbers up to '</span><span class=\"sy1\">,</span>actualNo<span class=\"sy1\">.</span><span class=\"me1\">dgtnum</span><span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/:all/</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@smith</span><span class=\"sy0\">;</span><br/>forcomposites <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@smith</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span>  <span class=\"kw1\">if</span> sumdigits<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> sumdigits<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>factor<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"nu0\">10000</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>say <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@smith</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" Smith numbers below 10000.\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"@smith\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 29, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> factors <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> factors <span class=\"br0\">(</span> Int <span class=\"re0\">$remainder</span> <span class=\"kw1\">is</span> copy <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  gather <span class=\"kw1\">for</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$factor</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\"># if remainder &lt; factor\u00b2, we're done</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">*</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$remainder</span> <span class=\"br0\">{</span><br/>      take <span class=\"re0\">$remainder</span> <span class=\"kw1\">if</span> <span class=\"re0\">$remainder</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># How many times can we divide by this prime?</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$remainder</span> <span class=\"sy0\">%%</span> <span class=\"re0\">$factor</span> <span class=\"br0\">{</span><br/>        take <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$remainder</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"re0\">$factor</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Code above here is verbatim from RC:Count_in_factors#Perl6</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is_smith_number <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> factors<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@s</span> <span class=\"sy0\">=</span> <span class=\"kw3\">grep</span> <span class=\"re0\">&amp;is_smith_number</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..^</span> <span class=\"nu0\">10</span>_000<span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"{@s.elems} Smith numbers below 10_000\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'First 10: '</span><span class=\"sy0\">,</span> <span class=\"re0\">@s</span><span class=\"br0\">[</span>  <span class=\"sy0\">^</span><span class=\"nu0\">10</span>      <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Last  10: '</span><span class=\"sy0\">,</span> <span class=\"re0\">@s</span><span class=\"br0\">[</span> <span class=\"sy0\">*-</span><span class=\"nu0\">10</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 30, "block": "<pre class=\"text highlighted_source\">function sum_digits(integer n, integer base=10)<br/>integer res = 0<br/>    while n do<br/>        res += remainder(n,base)<br/>        n = floor(n/base)<br/>    end while<br/>    return res<br/>end function<br/>\u00a0<br/>function smith(integer n)<br/>    sequence p = prime_factors(n)<br/>    integer sp = 0, w = n<br/>    for i=1 to length(p) do<br/>        integer pi = p[i],<br/>                spi = sum_digits(pi)<br/>        while mod(w,pi)=0 do<br/>            sp += spi<br/>            w = floor(w/pi)<br/>        end while<br/>    end for<br/>    return sum_digits(n)=sp<br/>end function<br/>\u00a0<br/>sequence s = {}<br/>for i=1 to 10000 do<br/>    if smith(i) then s &amp;= i end if<br/>end for<br/>?length(s)<br/>s[8..-8] = {\"...\"}<br/>?s</pre>"}, {"lang": "PicoLisp", "loc": 22, "block": "<pre class=\"text highlighted_source\">(de factor (N)<br/>   (make<br/>      (let (D 2  L (1 2 2 . (4 2 4 2 4 6 2 6 .))  M (sqrt N))<br/>         (while (&gt;= M D)<br/>            (if (=0 (% N D))<br/>               (setq M (sqrt (setq N (/ N (link D)))))<br/>               (inc 'D (pop 'L)) ) )<br/>         (link N) ) ) )<br/>(de sumdigits (N)<br/>   (sum format (chop N)) )<br/>(de smith (X)<br/>   (make<br/>      (for N X<br/>         (let R (factor N)<br/>            (and<br/>               (cdr R)<br/>               (= (sum sumdigits R) (sumdigits N))<br/>               (link N) ) ) ) ) )<br/>(let L (smith 10000)<br/>   (println 'first-10 (head 10 L))<br/>   (println 'last-10 (tail 10 L))<br/>   (println 'all (length L)) )</pre>"}, {"lang": "PureBasic", "loc": 81, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">DisableDebugger</span><br/>#ECHO<span class=\"sy0\">=</span>#True <span class=\"co1\">; #True: Print all results</span><br/><span class=\"kw1\">Global</span> <span class=\"kw1\">NewList</span> f.i<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i ePotenz<span class=\"br0\">(</span>Wert.i<span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">Define</span>.i var<span class=\"sy0\">=</span>Wert, i  <br/>  <span class=\"kw1\">While</span> var<br/>    i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    var<span class=\"sy0\">/</span><span class=\"nu0\">10</span>    <br/>  <span class=\"kw1\">Wend</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> i  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i n_Element<span class=\"br0\">(</span>Wert.i,Stelle.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">If</span> Stelle<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"br0\">(</span>Wert<span class=\"sy0\">%</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>,Stelle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>Wert<span class=\"sy0\">%</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>,Stelle<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>,Stelle<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>    <br/>  <span class=\"kw1\">EndIf</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i qSumma<span class=\"br0\">(</span>Wert.i<span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">Define</span>.i sum, pos  <br/>  <span class=\"kw1\">For</span> pos<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ePotenz<span class=\"br0\">(</span>Wert<span class=\"br0\">)</span><br/>    sum<span class=\"sy0\">+</span> n_Element<span class=\"br0\">(</span>Wert,pos<span class=\"br0\">)</span>    <br/>  <span class=\"kw1\">Next</span> pos  <br/>  <span class=\"kw1\">ProcedureReturn</span> sum  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b IsPrime<span class=\"br0\">(</span>n.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.i i<span class=\"sy0\">=</span><span class=\"nu0\">5</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>2<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>3<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">While</span> i<span class=\"sy0\">*</span>i<span class=\"sy0\">&lt;=</span>n<br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>    i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>    i<span class=\"sy0\">+</span><span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Wend</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> PFZ<span class=\"br0\">(</span>n.i,pf.i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">And</span> n<span class=\"sy0\">&lt;&gt;</span>pf<br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>pf<span class=\"sy0\">=</span><span class=\"nu0\">0</span>      <br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>pf<br/>      PFZ<span class=\"br0\">(</span>n<span class=\"sy0\">/</span>pf,pf<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> IsPrime<span class=\"br0\">(</span>pf<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: pf<span class=\"sy0\">+</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">Wend</span><br/>      PFZ<span class=\"br0\">(</span>n,pf<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ElseIf</span> n<span class=\"sy0\">=</span>pf<br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>pf<br/>  <span class=\"kw1\">EndIf</span>   <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Smith numbers\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">;upto=100\u00a0: sn=0\u00a0: Gosub Smith_loop</span><br/><span class=\"co1\">;upto=1000\u00a0: sn=0\u00a0: Gosub Smith_loop</span><br/>upto<span class=\"sy0\">=</span><span class=\"nu0\">10000</span>\u00a0: sn<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">Gosub</span> Smith_loop<br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span><br/>\u00a0<br/>Smith_loop:<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">To</span> upto<br/>    <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: qs<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    PFZ<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">CompilerIf</span> #ECHO\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+~</span><span class=\"st0\">\": \\t\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">CompilerEndIf</span><br/>    <span class=\"kw1\">ForEach</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CompilerIf</span> #ECHO\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">CompilerEndIf</span><br/>      qs<span class=\"sy0\">+</span>qSumma<span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">And</span> qSumma<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>qs <br/>      <span class=\"kw1\">CompilerIf</span> #ECHO\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"SMITH-NUMBER\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">CompilerEndIf</span><br/>      sn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">CompilerIf</span> #ECHO\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">CompilerEndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\n\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>sn<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" Smith number up to \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>upto<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Python", "loc": 50, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">sys</span> <span class=\"kw1\">import</span> stdout<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> factors<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    rt <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    f <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>        rt.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">while</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span> n\u00a0% f <span class=\"br0\">)</span>:<br/>                rt.<span class=\"me1\">append</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                n //<span class=\"sy0\">=</span> f<br/>                <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>                    <span class=\"kw1\">return</span> rt<br/>            <span class=\"kw1\">else</span>:<br/>                f +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> rt<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> sum_digits<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw2\">sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:<br/>        m <span class=\"sy0\">=</span> n\u00a0% <span class=\"nu0\">10</span><br/>        <span class=\"kw2\">sum</span> +<span class=\"sy0\">=</span> m<br/>        n -<span class=\"sy0\">=</span> m<br/>        n //<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> add_all_digits<span class=\"br0\">(</span>lst<span class=\"br0\">)</span>:<br/>    <span class=\"kw2\">sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span> <span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>lst<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">sum</span> +<span class=\"sy0\">=</span> sum_digits<span class=\"br0\">(</span>lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> list_smith_numbers<span class=\"br0\">(</span>cnt<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> cnt<span class=\"br0\">)</span>:<br/>        fac <span class=\"sy0\">=</span> factors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>fac<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">if</span> sum_digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> add_all_digits<span class=\"br0\">(</span>fac<span class=\"br0\">)</span>:<br/>                stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># entry point</span><br/>list_smith_numbers<span class=\"br0\">(</span><span class=\"nu0\">10</span>_000<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 27, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require math/number-theory)<br/>\u00a0<br/>(define (sum-of-digits n)<br/>  (let inr ((n n) (s 0))<br/>    (if (zero? n) s (let-values (([q r] (quotient/remainder n 10))) (inr q (+ s r))))))<br/>\u00a0<br/>(define (smith-number? n)<br/>  (and (not (prime? n))<br/>       (= (sum-of-digits n)<br/>          (for/sum ((pe (in-list (factorize n))))<br/>            (* (cadr pe) (sum-of-digits (car pe)))))))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-equal? (sum-of-digits 0) 0)<br/>  (check-equal? (sum-of-digits 33) 6)<br/>  (check-equal? (sum-of-digits 30) 3)<br/>\u00a0<br/>  (check-true (smith-number? 166)))<br/>\u00a0<br/>(module+ main<br/>  (let loop ((ns (filter smith-number? (range 1 (add1 10000)))))<br/>    (unless (null? ns)<br/>      (let-values (([l r] (split-at ns (min (length ns) 15))))<br/>        (displayln l)<br/>        (loop r)))))</pre>"}, {"lang": "REXX", "loc": 31, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  finds  (and maybe displays)  Smith  (or joke)  numbers up to a given  N.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">10000</span>                  <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>tell= <span class=\"br0\">(</span>N<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;            N=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> - <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*use the  \u2502N\u2502  for computing  (below).*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>                                      <span class=\"coMULTI\">/*W:  used for aligning Smith numbers. */</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*#:  Smith numbers found  (so far).   */</span><br/>@=;  <span class=\"kw1\">do</span> j=<span class=\"nu0\">4</span>  <span class=\"kw2\">to</span>  N;                              <span class=\"coMULTI\">/*process almost all numbers up to  N. */</span><br/>     <span class=\"kw1\">if</span> sumD<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== sumfactr<span class=\"br0\">(</span>j<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*Not a Smith number?   Then ignore it.*/</span><br/>     #=#+<span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*bump the Smith number counter.       */</span><br/>     <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>tell  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                      <span class=\"coMULTI\">/*Not showing the numbers? Keep looking*/</span><br/>     @<a class=\"__cf_email__\" data-cfemail=\"1b265b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, w<span class=\"br0\">)</span>;         <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">130</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;    <span class=\"kw1\">say</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>@, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;    @=;   <span class=\"kw3\">end</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                 <span class=\"coMULTI\">/* [\u2191]  if N&gt;0,  then display Smith #s.*/</span><br/>\u00a0<br/><span class=\"kw1\">if</span> @<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>@, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*if any residual Smith #s, display 'em*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2193]  display the number of Smith #s.*/</span><br/><span class=\"kw1\">say</span> #    <span class=\"st0\">' Smith numbers found  \u2264 '</span>   N<span class=\"st0\">\".\"</span>       <span class=\"coMULTI\">/*display number of Smith numbers found*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sumD:     <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> s <span class=\"nu0\">2</span>;   <span class=\"kw1\">do</span> d=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>-<span class=\"nu0\">1</span>; s=s+<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,d,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> s<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sumFactr: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z;       $=<span class=\"nu0\">0</span>;    f=<span class=\"nu0\">0</span>             <span class=\"coMULTI\">/*obtain the Z number. */</span><br/>             <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>;  $=$+<span class=\"nu0\">2</span>;  f=f+<span class=\"nu0\">1</span>;  z=z% <span class=\"nu0\">2</span>;  <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*maybe add factor of 2*/</span><br/>             <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span><span class=\"nu0\">3</span>==<span class=\"nu0\">0</span>;  $=$+<span class=\"nu0\">3</span>;  f=f+<span class=\"nu0\">1</span>;  z=z% <span class=\"nu0\">3</span>;  <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*  \"    \"     \"    \" 3*/</span><br/>                                                                 <span class=\"coMULTI\">/*                  ___*/</span><br/>             <span class=\"kw1\">do</span> j=<span class=\"nu0\">5</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">while</span> j<span class=\"sy0\">&lt;</span>=z  <span class=\"sy0\">&amp;</span>  j<span class=\"sy0\">*</span>j<span class=\"sy0\">&lt;</span>=n                 <span class=\"coMULTI\">/*minimum of Z or  \u221a N */</span><br/>             <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">3</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                            <span class=\"coMULTI\">/*skip factors that \u00f7 3*/</span><br/>                <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span>j==<span class=\"nu0\">0</span>; f=f+<span class=\"nu0\">1</span>; $=$+sumD<span class=\"br0\">(</span>j<span class=\"br0\">)</span>; z=z%j; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*maybe reduce  Z by J */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                         <span class=\"coMULTI\">/* [\u2193]  Z:  what's left*/</span><br/>          <span class=\"kw1\">if</span> z<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;      f=f+<span class=\"nu0\">1</span>; $=$+sumD<span class=\"br0\">(</span>z<span class=\"br0\">)</span>;        <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*Residual?  Then add Z*/</span><br/>          <span class=\"kw1\">if</span> f<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                                <span class=\"coMULTI\">/*Prime?   Not a Smith#*/</span><br/>                         <span class=\"kw1\">return</span> $                                <span class=\"coMULTI\">/*else return sum digs.*/</span></pre>"}, {"lang": "Ring", "loc": 57, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Smith numbers<br/>\u00a0<br/>see \"All the Smith Numbers &lt; 1000 are:\" + nl<br/>\u00a0<br/>for prime = 1 to 1000<br/>    decmp = []<br/>    sum1 = sumDigits(prime)<br/>    decomp(prime)<br/>    sum2 = 0<br/>    if len(decmp)&gt;1<br/>       for n=1 to len(decmp)<br/>           cstr = string(decmp[n])<br/>           for m= 1 to len(cstr)<br/>               sum2 = sum2 + number(cstr[m])<br/>           next<br/>       next<br/>    ok<br/>    if sum1 = sum2<br/>       see \"\" + prime + \" \" <br/>    ok<br/>next<br/>\u00a0<br/>func decomp nr<br/>     for i = 1 to nr<br/>         if isPrime(i) and nr\u00a0% i = 0<br/>            add(decmp, i)<br/>            pr = i<br/>            while true<br/>                  pr = pr * i<br/>                  if nr%pr = 0<br/>                     add(decmp, i)<br/>                  else<br/>                     exit<br/>                  ok <br/>            end<br/>         ok<br/>     next<br/>\u00a0<br/>func isPrime num<br/>     if (num &lt;= 1) return 0 ok<br/>        if (num\u00a0% 2 = 0 and num\u00a0!= 2) return 0 ok<br/>        for i = 3 to floor(num / 2) -1 step 2<br/>            if (num\u00a0% i = 0) return 0 ok<br/>        next<br/>        return 1<br/>\u00a0<br/>func sumDigits n<br/>     sum = 0<br/>     while n &gt; 0.5 <br/>           m = floor(n / 10)<br/>           digit = n - m * 10<br/>           sum = sum + digit<br/>           n = m<br/>     end<br/>     return sum<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 16, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"prime\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> smith?<br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> prime?<br/>    digits.<span class=\"me1\">sum</span> == prime_division.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pr,n<span class=\"sy0\">|</span> pr.<span class=\"me1\">digits</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">*</span> n<span class=\"br0\">}</span>.<span class=\"me1\">sum</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>n   = <span class=\"nu0\">10</span>_000<br/>res = <span class=\"nu0\">1</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"kw3\">select</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:smith?<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"#{res.size} smith numbers below #{n}:<br/>#{res.first(5).join(\"</span>, <span class=\"st0\">\")},... #{res.last(5).join(\"</span>, <span class=\"st0\">\")}\"</span></pre>"}, {"lang": "Rust", "loc": 28, "block": "<pre class=\"text highlighted_source\">fn main () {<br/>    //We just need the primes below 100<br/>    let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];<br/>    let mut solution = Vec::new();<br/>    let mut number;<br/>    for i in 4..10000 {<br/>        //Factorize each number below 10.000<br/>        let mut prime_factors = Vec::new();<br/>        number = i;<br/>        for j in &amp;primes {<br/>            while number\u00a0% j == 0 {<br/>                number = number / j;<br/>                prime_factors.push(j);<br/>            }<br/>            if number == 1 { break; }<br/>        }<br/>        //Number is 1 (not a prime factor) if the factorization is complete or a prime bigger than 100<br/>        if number\u00a0!= 1 { prime_factors.push(&amp;number); }<br/>        //Avoid the prime numbers<br/>        if prime_factors.len() &lt; 2 { continue; }<br/>        //Check the smith number definition<br/>        if prime_factors.iter().fold(0, |n,x| n + x.to_string().chars().map(|d| d.to_digit(10).unwrap()).fold(0, |n,x| n + x))  <br/>            == i.to_string().chars().map(|d| d.to_digit(10).unwrap()).fold(0, |n,x| n + x) {<br/>            solution.push(i);<br/>        }<br/>    }<br/>    println!(\"Smith numbers below 10000 ({})\u00a0: {:?}\",solution.len(), solution);<br/>}</pre>"}, {"lang": "Scala", "loc": 42, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SmithNumbers <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sumDigits<span class=\"br0\">(</span><span class=\"sy0\">_</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"sy0\">_</span>n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      sum +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>      n /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/>    sum<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> primeFactors<span class=\"br0\">(</span><span class=\"sy0\">_</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"sy0\">_</span>n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> collection.<span class=\"me1\">mutable</span>.<span class=\"me1\">ListBuffer</span><span class=\"br0\">[</span>Int<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      result +<span class=\"sy0\">=</span> i<br/>      n /<span class=\"sy0\">=</span> i<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">*</span> j <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> j <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result +<span class=\"sy0\">=</span> i<br/>        n /<span class=\"sy0\">=</span> j<br/>      <span class=\"br0\">}</span><br/>      j +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> result +<span class=\"sy0\">=</span> n<br/>    result.<span class=\"me1\">toList</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> until <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factors <span class=\"sy0\">=</span> primeFactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>factors.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> sumDigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>f <span class=\"sy0\">&lt;</span>- factors<span class=\"br0\">)</span> sum -<span class=\"sy0\">=</span> sumDigits<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sum <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 36, "block": "<pre class=\"ruby highlighted_source\">var primes = Enumerator<span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>callback<span class=\"sy0\">|</span><br/>    static primes = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    var <span class=\"kw3\">p</span> = <span class=\"nu0\">2</span><br/>    <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>        callback<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">p</span> = <span class=\"br0\">(</span>primes<span class=\"br0\">{</span><span class=\"kw3\">p</span><span class=\"br0\">}</span>\u00a0:= <span class=\"kw3\">p</span>.<span class=\"me1\">next_prime</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>func factors<span class=\"br0\">(</span>remainder<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    remainder == <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span><span class=\"br0\">(</span><span class=\"br0\">[</span>remainder<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    gather <span class=\"br0\">{</span><br/>        primes.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>factor<span class=\"sy0\">|</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>factor<span class=\"sy0\">*</span>factor <span class=\"sy0\">&gt;</span> remainder<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                take<span class=\"br0\">(</span>remainder<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>remainder <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>factor.<span class=\"me1\">divides</span><span class=\"br0\">(</span>remainder<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                take<span class=\"br0\">(</span>factor<span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>remainder <span class=\"sy0\">/</span>= factor<span class=\"br0\">)</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func is_smith_number<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   \u00a0!n.<span class=\"me1\">is_prime</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n.<span class=\"me1\">digits</span>.<span class=\"me1\">sum</span> == factors<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">join</span>.<span class=\"me1\">to_i</span>.<span class=\"me1\">digits</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var s = range<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">10</span>_000<span class=\"br0\">)</span>.<span class=\"me1\">grep</span> <span class=\"br0\">{</span> is_smith_number<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>say <span class=\"st0\">\"#{s.len} Smith numbers below 10_000\"</span><br/>say <span class=\"st0\">\"First 10: #{s.first(10)}\"</span><br/>say <span class=\"st0\">\"Last  10: #{s.last(10)}\"</span></pre>"}, {"lang": "Stata", "loc": 73, "block": "<pre class=\"text highlighted_source\">function factor(_n) {<br/>\tn = _n<br/>\ta = J(14, 2, .)<br/>\ti = 0<br/>\tif (mod(n, 2)==0) {<br/>\t\tj = 0<br/>\t\twhile (mod(n, 2)==0) {<br/>\t\t\tj++<br/>\t\t\tn = n/2<br/>\t\t}<br/>\t\ti++<br/>\t\ta[i,1] = 2<br/>\t\ta[i,2] = j<br/>\t}<br/>\tfor (k=3; k*k&lt;=n; k=k+2) {<br/>\t\tif (mod(n, k)==0) {<br/>\t\t\tj = 0<br/>\t\t\twhile (mod(n, k)==0) {<br/>\t\t\t\tj++<br/>\t\t\t\tn = n/k<br/>\t\t\t}<br/>\t\t\ti++<br/>\t\t\ta[i,1] = k<br/>\t\t\ta[i,2] = j<br/>\t\t}<br/>\t}<br/>\tif (n&gt;1) {<br/>\t\ti++<br/>\t\ta[i,1] = n<br/>\t\ta[i,2] = 1<br/>\t}<br/>\treturn(a[1::i,.])<br/>}<br/>\u00a0<br/>function sumdigits(_n) {<br/>\tn = _n<br/>\tfor (s=0; n&gt;0; n=floor(n/10)) s = s+mod(n,10)<br/>\treturn(s)<br/>}<br/>\u00a0<br/>function smith(n) {<br/>\ta = J(n, 1, .)<br/>\ti = 0<br/>\tfor (j=2; j&lt;=n; j++) {<br/>\t\tf = factor(j)<br/>\t\tm = rows(f)<br/>\t\tif (m&gt;1 | f[1,2]&gt;1) {<br/>\t\t\ts = 0<br/>\t\t\tfor (k=1; k&lt;=m; k++) s = s+sumdigits(f[k,1])*f[k,2]<br/>\t\t\tif (s==sumdigits(j)) a[++i] = j<br/>\t\t}<br/>\t}<br/>\treturn(a[1::i])<br/>}<br/>\u00a0<br/>a = smith(10000)<br/>n = rows(a)<br/>n<br/>  376<br/>\u00a0<br/>a[1::10]'<br/>\u00a0<br/>         1     2     3     4     5     6     7     8     9    10<br/>    +-------------------------------------------------------------+<br/>  1 |    4    22    27    58    85    94   121   166   202   265  |<br/>    +-------------------------------------------------------------+<br/>\u00a0<br/>a[n-9::n]'<br/>\u00a0<br/>          1      2      3      4      5      6      7      8      9     10<br/>    +-----------------------------------------------------------------------+<br/>  1 |  9843   9849   9861   9880   9895   9924   9942   9968   9975   9985  |<br/>    +-----------------------------------------------------------------------+</pre>"}, {"lang": "Tcl", "loc": 42, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> factors <span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># list the prime factors of x in ascending order</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$x</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> result <span class=\"re0\">$i</span><br/>            <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> / <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> result <span class=\"re0\">$x</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> digitsum <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>   \u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$n</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> smith<span class=\"sy0\">?</span> <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> fs <span class=\"br0\">[</span>factors <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$fs</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> false    <span class=\"sy0\">;</span><span class=\"co1\"># $n is prime</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>digitsum <span class=\"re0\">$n</span><span class=\"br0\">]</span> == <span class=\"br0\">[</span>digitsum <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$fs</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> range <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> result <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> smiths <span class=\"br0\">[</span>lmap i <span class=\"br0\">[</span>range <span class=\"nu0\">10000</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>smith<span class=\"sy0\">?</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>    <span class=\"kw1\">set</span> i<br/><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$smiths</span> <span class=\"nu0\">0</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span>...<br/><span class=\"kw2\">puts</span> ...<span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$smiths</span> end-<span class=\"nu0\">12</span> end<span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"([llength $smiths] total)\"</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">fcn smithNumbers(N=0d10_000){ // --&gt;(Smith numbers to N)<br/>   [2..N].filter(fcn(n){ <br/>      (pfs:=primeFactors(n)).len()&gt;1 and<br/>      n.split().sum(0)==primeFactors(n).apply(\"split\").flatten().sum(0) <br/>   })<br/>}</pre>"}]}