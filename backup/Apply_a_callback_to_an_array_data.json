{"task": "Apply_a_callback_to_an_array", "blocks": [{"lang": "8th", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[ 1 , 2, 3 ]<br/>' n:sqr<br/>a:map<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> apply-to-each <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>fn-to-<span class=\"kw1\">apply</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>sq-each <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fn-to-<span class=\"kw1\">apply</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ActionScript", "loc": 19, "block": "<pre class=\"actionscript highlighted_source\">package<br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">public</span> <span class=\"kw2\">class</span> ArrayCallback<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw2\">var</span> nums:<span class=\"kw3\">Array</span> = <span class=\"kw2\">new</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>            nums.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw2\">function</span><span class=\"br0\">(</span>n:<span class=\"kw3\">Number</span>, <span class=\"kw3\">index</span>:<span class=\"kw3\">int</span>, arr:<span class=\"kw3\">Array</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span> <span class=\"br0\">{</span> <span class=\"kw3\">trace</span><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span>; <span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>            <span class=\"co1\">// You can also pass a function reference</span><br/>            nums.<span class=\"me1\">map</span><span class=\"br0\">(</span>cube<span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">private</span> <span class=\"kw2\">function</span> cube<span class=\"br0\">(</span>n:<span class=\"kw3\">Number</span>, <span class=\"kw3\">index</span>:<span class=\"kw3\">int</span>, arr:<span class=\"kw3\">Array</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 37, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>;<br/> <span class=\"kw3\">with</span> Ada.<span class=\"me1\">Integer_text_IO</span>;<br/>\u00a0<br/> <span class=\"kw3\">procedure</span> Call_Back_Example <span class=\"kw1\">is</span><br/>    <span class=\"co1\">-- Purpose: Apply a callback to an array</span><br/>    <span class=\"co1\">-- Output: Prints the squares of an integer array to the console</span><br/>\u00a0<br/>    <span class=\"co1\">-- Define the callback procedure</span><br/>    <span class=\"kw3\">procedure</span> Display<span class=\"br0\">(</span>Location\u00a0: Positive; Value\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>    <span class=\"kw1\">begin</span><br/>       Ada.<span class=\"me1\">Text_Io</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"array(\"</span><span class=\"br0\">)</span>;<br/>       Ada.<span class=\"me1\">Integer_Text_Io</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Item =&gt; Location, Width =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>       Ada.<span class=\"me1\">Text_Io</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\") = \"</span><span class=\"br0\">)</span>;<br/>       Ada.<span class=\"me1\">Integer_Text_Io</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Item =&gt; Value * Value, Width =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>       Ada.<span class=\"me1\">Text_Io</span>.<span class=\"me1\">New_Line</span>;<br/>    <span class=\"kw1\">end</span> Display;<br/>\u00a0<br/>    <span class=\"co1\">-- Define an access type matching the signature of the callback procedure</span><br/>    <span class=\"kw3\">type</span> Call_Back_Access <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">procedure</span><span class=\"br0\">(</span>L\u00a0: Positive; V\u00a0: Integer<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">-- Define an unconstrained array type</span><br/>    <span class=\"kw3\">type</span> Value_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>\u00a0<br/>    <span class=\"co1\">-- Define the procedure performing the callback</span><br/>    <span class=\"kw3\">procedure</span> Map<span class=\"br0\">(</span>Values\u00a0: Value_Array; Worker\u00a0: Call_Back_Access<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>    <span class=\"kw1\">begin</span><br/>       <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Values'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span><br/>          Worker<span class=\"br0\">(</span>I, Values<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    <span class=\"kw1\">end</span> Map;<br/>\u00a0<br/>    <span class=\"co1\">-- Define and initialize the actual array</span><br/>    Sample\u00a0: Value_Array\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/> <span class=\"kw1\">begin</span><br/>    Map<span class=\"br0\">(</span>Sample, Display'<span class=\"kw3\">access</span><span class=\"br0\">)</span>;   <br/> <span class=\"kw1\">end</span> Call_Back_Example;</pre>"}, {"lang": "Aime", "loc": 19, "block": "<pre class=\"text highlighted_source\">void<br/>map(list l, void (*fp)(object))<br/>{<br/>    l.ucall(fp, 0);<br/>}<br/>\u00a0<br/>void<br/>out(object o)<br/>{<br/>    o_(o, \"\\n\");<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    list(0, 1, 2, 3).map(out);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 17, "block": "<pre class=\"algol68 highlighted_source\"> <span class=\"kw4\">PROC</span> call back proc <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> location<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> value<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/> <span class=\"br0\">(</span><br/>   <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"array[\"</span>g<span class=\"st0\">\"] = \"</span>gl$<span class=\"sy1\">,</span> location<span class=\"sy1\">,</span> value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw4\">PROC</span> map <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> array<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"sy1\">,</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> call back<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/> <span class=\"br0\">(</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> array <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> array <span class=\"kw2\">DO</span><br/>      call back<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">OD</span><br/> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> main<span class=\"sy1\">:</span><br/> <span class=\"br0\">(</span><br/>   <span class=\"br0\">[</span>4<span class=\"br0\">]</span><span class=\"kw3\">INT</span> array <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span> 9<span class=\"sy1\">,</span> 16 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   map<span class=\"br0\">(</span>array<span class=\"sy1\">,</span> call back proc<span class=\"br0\">)</span><br/> <span class=\"br0\">)</span></pre>"}, {"lang": "APL", "loc": 11, "block": "<pre class=\"text highlighted_source\">    - 1 2 3<br/>\u00af1 \u00af2 \u00af3<br/>    2 * 1 2 3 4<br/>2 4 8 16<br/>    2 \u00d7 \u23734<br/>2 4 6 8<br/>    3 * 3 3 \u2374 \u23739<br/>   3    9    27<br/>  81  243   729<br/>2187 6561 19683<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 11, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> callback for arg<br/>    <span class=\"co1\">-- Returns a string like \"arc has 3 letters\"</span><br/>    arg <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" has \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> arg<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" letters\"</span><br/><span class=\"kw3\">end</span> callback<br/>\u00a0<br/><span class=\"kw3\">set</span> alist <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"st0\">\"arc\"</span>, <span class=\"st0\">\"be\"</span>, <span class=\"st0\">\"circle\"</span><span class=\"br0\">}</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> aref <span class=\"kw3\">in</span> alist<br/>    <span class=\"co1\">-- Passes a reference to some item in alist</span><br/>    <span class=\"co1\">-- to callback, then speaks the return value.</span><br/>    say <span class=\"br0\">(</span>callback for aref<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span></pre>"}, {"lang": "AutoHotkey", "loc": 10, "block": "<pre class=\"autohotkey highlighted_source\">map<span class=\"br0\">(</span><span class=\"st0\">\"callback\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3,4,5\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>callback<span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> array<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>map<span class=\"br0\">(</span>callback<span class=\"sy0\">,</span> array<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"re0\">%callback%</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 6, "block": "<pre class=\"awk highlighted_source\">$ awk 'func psqr<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw5\">print</span> x,x<span class=\"sy3\">*</span>x<span class=\"br0\">}</span><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"1 2 3 4 5\"</span>,a<span class=\"br0\">)</span>;<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> a<span class=\"br0\">)</span>psqr<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span>'<br/><span class=\"nu0\">4</span> <span class=\"nu0\">16</span><br/><span class=\"nu0\">5</span> <span class=\"nu0\">25</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">3</span> <span class=\"nu0\">9</span></pre>"}, {"lang": "Babel", "loc": 1, "block": "<pre class=\"text highlighted_source\">sq { dup * } &lt;</pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      DIM a(4)<br/>      a() = 1, 2, 3, 4, 5<br/>      PROCmap(a(), FNsqrt())<br/>      FOR i = 0 TO 4<br/>        PRINT a(i)<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNsqrt(n) = SQR(n)<br/>\u00a0<br/>      DEF PROCmap(array(), RETURN func%)<br/>      LOCAL I%<br/>      FOR I% = 0 TO DIM(array(),1)<br/>        array(I%) = FN(^func%)(array(I%))<br/>      NEXT<br/>      ENDPROC<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 29, "block": "<pre class=\"text highlighted_source\">( ( callbackFunction1<br/>  =   location value<br/>    .  \u00a0!arg:(?location,?value)<br/>      &amp; out$(str$(array[\u00a0!location \"] = \"\u00a0!!value))<br/>  )<br/>&amp; ( callbackFunction2<br/>  =   location value<br/>    .  \u00a0!arg:(?location,?value)<br/>      &amp;\u00a0!!value^2:?!value<br/>  )<br/>&amp; ( mapar<br/>  =   arr len callback i<br/>    .  \u00a0!arg:(?arr,?len,?callback)<br/>      &amp; 0:?i<br/>      &amp;   whl<br/>        ' (\u00a0!i:&lt;!len<br/>          &amp;\u00a0!callback$(!i,!i$!arr)<br/>          &amp; 1+!i:?i<br/>          )<br/>  )<br/>&amp; tbl$(array,4)<br/>&amp; 1:?(0$array)<br/>&amp; 2:?(1$array)<br/>&amp; 3:?(2$array)<br/>&amp; 4:?(3$array)<br/>&amp; mapar$(array,4,callbackFunction1)<br/>&amp; mapar$(array,4,callbackFunction2)<br/>&amp; mapar$(array,4,callbackFunction1)<br/>);</pre>"}, {"lang": "Brat", "loc": 4, "block": "<pre class=\"text highlighted_source\">#Print out each element in array<br/>[:a\u00a0:b\u00a0:c\u00a0:d\u00a0:e].each { element |<br/>\tp element<br/>}</pre>"}, {"lang": "C", "loc": 16, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#ifndef CALLBACK_H</span><br/><span class=\"co2\">#define CALLBACK_H</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * By declaring the function in a separate file, we allow<br/> * it to be used by other source files.<br/> *<br/> * It also stops ICC from complaining.<br/> *<br/> * If you don't want to use it outside of callback.c, this<br/> * file can be removed, provided the static keyword is prepended<br/> * to the definition.<br/> */</span><br/><span class=\"kw4\">void</span> map<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span> array<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">void</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>callback<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#endif</span></pre>"}, {"lang": "C#", "loc": 11, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> intArray <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// Simplest method:  LINQ, functional</span><br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> squares1 <span class=\"sy0\">=</span> intArray<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Slightly fancier: LINQ, query expression</span><br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> squares2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">from</span> x <span class=\"kw1\">in</span> intArray<br/>                  <span class=\"kw1\">select</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Or, if you only want to call a function on each element, just use foreach</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"kw1\">in</span> intArray<span class=\"br0\">)</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 16, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt; //cout for printing</span><br/><span class=\"co2\">#include &lt;algorithm&gt; //for_each defined here</span><br/>\u00a0<br/><span class=\"co1\">//create the function (print the square)</span><br/><span class=\"kw4\">void</span> print_square<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy2\">*</span>i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">//create the array</span><br/>  <span class=\"kw4\">int</span> ary<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">=</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  <span class=\"co1\">//stl for_each</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">for_each</span><span class=\"br0\">(</span>ary,ary<span class=\"sy2\">+</span><span class=\"nu0\">5</span>,print_square<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//prints 1 4 9 16 25</span></pre>"}, {"lang": "Clean", "loc": 4, "block": "<pre class=\"text highlighted_source\">square x = x * x<br/>\u00a0<br/>values\u00a0:: {#Int}<br/>values = {x \\\\ x &lt;- [1 .. 10]}</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; apply a named function, inc</span><br/><span class=\"br0\">(</span>map inc <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 23, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> <span class=\"kw1\">Map</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  Table-<span class=\"kw3\">Size</span> CONSTANT <span class=\"nu0\">30</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  I <span class=\"kw3\">USAGE</span> UNSIGNED-INT<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  Table-Param<span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  Table-<span class=\"kw3\">Values</span> <span class=\"kw3\">USAGE</span> COMP-<span class=\"nu0\">2</span> <span class=\"kw3\">OCCURS</span> Table-<span class=\"kw3\">Size</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  Func-Id <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> Table-Param Func-Id<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> I <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> Table-<span class=\"kw3\">Size</span> &lt; I<br/>               <span class=\"kw2\">CALL</span> Func-Id <span class=\"kw3\">USING</span> <span class=\"kw3\">BY</span> <span class=\"kw3\">REFERENCE</span> Table-<span class=\"kw3\">Values</span> <span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 6, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>map = <span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"kw1\">for</span> e <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span><br/>arr = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>f = <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">*</span> x<br/>console.<span class=\"me1\">log</span> map arr<span class=\"sy0\">,</span> f <span class=\"co1\"># prints [1, 4, 9, 16, 25]</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>map <span class=\"kw1\">nil</span> #'<span class=\"kw1\">print</span> #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 56, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Callback;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>\tCallback <span class=\"sy0\">=</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;OUT doubled<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>\tCallback2 <span class=\"sy0\">=</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> Apply<span class=\"br0\">(</span>proc<span class=\"sy0\">:</span> Callback; <span class=\"kw1\">VAR</span> x<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span>;<br/>\t\t\tproc<span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span> Apply;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> Apply2<span class=\"br0\">(</span>func<span class=\"sy0\">:</span> Callback2; <span class=\"kw1\">VAR</span> x<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span>;<br/>\t\t\tx<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> func<span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span> Apply2;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> Double<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; OUT y<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span>\t<br/>\t\ty <span class=\"sy0\">:=</span> x <span class=\"sy0\">*</span> x;<br/>\t<span class=\"kw1\">END</span> Double;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> Double2<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> x <span class=\"sy0\">*</span> x<br/>\t<span class=\"kw1\">END</span> Double2;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t\tary<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">10</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/>\u00a0<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i <span class=\"kw1\">END</span>;<br/>\t\tApply<span class=\"br0\">(</span>Double<span class=\"sy0\">,</span>ary<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span>;<br/>\t\tApply2<span class=\"br0\">(</span>Double2<span class=\"sy0\">,</span>ary<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">FOR</span>  i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t        StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> Callback.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> items <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> m <span class=\"sy0\">=</span> items.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 19, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"co1\">// Declare the callback function</span><br/><span class=\"kw1\">procedure</span> callback<span class=\"br0\">(</span><span class=\"kw1\">const</span> AInt<span class=\"sy1\">:</span><span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>AInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  <span class=\"co1\">// Declare a static array</span><br/>  myArray<span class=\"sy1\">:</span><span class=\"kw1\">Array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Integer</span><span class=\"sy3\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  <span class=\"co1\">// Declare interator variable</span><br/>  i<span class=\"sy1\">:</span><span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// Iterate the array and apply callback</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span>myArray<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    callback<span class=\"br0\">(</span>myArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 8, "block": "<pre class=\"text highlighted_source\">!. map @++ [ 1 4 8 ]<br/>\u00a0<br/>#implemented roughly like this:<br/>#map f lst:<br/>#    ]<br/>#    for i in lst:<br/>#         f i<br/>#    [</pre>"}, {"lang": "E", "loc": 4, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> array <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> square<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    return value <span class=\"sy0\">*</span> value<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 13, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>vector<span class=\"sy0\">-</span><span class=\"kw1\">map</span> <span class=\"kw1\">sqrt</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">16</span> <span class=\"nu0\">49</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 #<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; or</span><br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">exp</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 #<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2.718281828459045</span> <span class=\"nu0\">7.38905609893065</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; or</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>elem #<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"v[%d] =\u00a0%a\"</span> i elem<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> elem elem<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    \u2192 #<span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Efene", "loc": 33, "block": "<pre class=\"text highlighted_source\">square = fn (N) {<br/>    N * N<br/>}<br/>\u00a0<br/># list comprehension<br/>squares1 = fn (Numbers) {<br/>    [square(N) for N in Numbers]<br/>}<br/>\u00a0<br/># functional form<br/>squares2a = fn (Numbers) {<br/>    lists.map(fn square:1, Numbers)<br/>}<br/>\u00a0<br/># functional form with lambda<br/>squares2b = fn (Numbers) {<br/>    lists.map(fn (N) { N * N }, Numbers)<br/>}<br/>\u00a0<br/># no need for a function<br/>squares3 = fn (Numbers) {<br/>    [N * N for N in Numbers]<br/>}<br/>\u00a0<br/>@public<br/>run = fn () {<br/>    Numbers = [1, 3, 5, 7]<br/>    io.format(\"squares1\u00a0: ~p~n\", [squares1(Numbers)])<br/>    io.format(\"squares2a: ~p~n\", [squares2a(Numbers)])<br/>    io.format(\"squares2b: ~p~n\", [squares2b(Numbers)])<br/>    io.format(\"squares3\u00a0: ~p~n\", [squares3(Numbers)])<br/>}<br/>\u00a0</pre>"}, {"lang": "EGL", "loc": 20, "block": "<pre class=\"text highlighted_source\">delegate callback( i int ) returns( int ) end<br/>\u00a0<br/>program ApplyCallbackToArray<br/>\tfunction main()<br/>\t\tvalues int[] = [ 1, 2, 3, 4, 5 ];<br/>\u00a0<br/>\t\tfunc callback = square;<br/>\t\tfor ( i int to values.getSize() )<br/>\t\t\tvalues[ i ] = func( values[ i ] );<br/>\t\tend<br/>\u00a0<br/>\t\tfor ( i int to values.getSize() )<br/>\t\t\tSysLib.writeStdout( values[ i ] );<br/>\t\tend<br/>\tend<br/>\u00a0<br/>\tfunction square( i int ) returns( int )<br/>\t\treturn( i * i );<br/>\tend<br/>end</pre>"}, {"lang": "Elena", "loc": 6, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>\u00a0<br/>public program<br/>[<br/>    (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) forEach(:n) [ console writeLine(n * n) ].<br/>]</pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Enum.map([1, 2, 3], fn(n) -&gt; n * 2 end)<br/>Enum.map [1, 2, 3], &amp;(&amp;1 * 2)<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 4, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"nu0\">1</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">L</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM CALLBACK<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>DIM A[5]<br/>\u00a0<br/>FUNCTION CBACK(X)<br/>   CBACK=2*X-1<br/>END FUNCTION<br/>\u00a0<br/>PROCEDURE PROCMAP(ZETA,DUMMY(X)-&gt;OUTP)<br/>   OUTP=DUMMY(ZETA)<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   A[1]=1  A[2]=2   A[3]=3  A[4]=4  A[5]=5<br/>   FOR I%=1 TO 5 DO<br/>      PROCMAP(A[I%],CBACK(X)-&gt;OUTP)<br/>      PRINT(OUTP;)<br/>   END FOR<br/>   PRINT<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 18, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> apply_to_all<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> f<span class=\"br0\">)</span><br/>    <span class=\"co1\">-- apply a function to all elements of a sequence</span><br/>    <span class=\"kw2\">sequence</span> result<br/>    result <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"co1\">-- we can call add1() here although it comes later in the program</span><br/>\tresult <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>result<span class=\"sy2\">,</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>f<span class=\"sy2\">,</span> <span class=\"br0\">{</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> add1<span class=\"br0\">(</span><span class=\"kw2\">atom</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> x <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"co1\">-- add1() is visible here, so we can ask for its routine id</span><br/><span class=\"sy2\">?</span> apply_to_all<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"sy2\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy2\">,</span> <span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"add1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- displays {2,3,4}</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">{ 1 2 3 4 } [ sq . ] each</pre>"}, {"lang": "Fantom", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    [1,2,3,4,5].each |Int i| { echo (i) }<br/>    Int[] result\u00a0:= [1,2,3,4,5].map |Int i-&gt;Int| { return i * i }<br/>    echo (result) <br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "FBSL", "loc": 17, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/>FOREACH <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> e IN MyMap<span class=\"br0\">(</span>Add42<span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> e<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/>PAUSE<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> MyMap<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> ret<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tFOREACH <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> e IN a<br/>\t\tret<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">NEXT</span><br/>\t<span class=\"kw1\">RETURN</span> ret<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Add42<span class=\"br0\">(</span>n<span class=\"br0\">)</span>: <span class=\"kw1\">RETURN</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">42</span>: <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: map ( addr n fn -- )<br/>   -rot cells bounds do  i @ over execute i\u00a0!  cell +loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 9, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> arrCallback<br/><span class=\"co1\">contains</span><br/>    elemental <span class=\"kw1\">function</span> cube<span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>        <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>        <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">cube</span><br/>        <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>        cube <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> cube<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> arrCallback</pre>"}, {"lang": "FP", "loc": 2, "block": "<pre class=\"text highlighted_source\">{square * . [id, id]}<br/>&amp; square: &lt;1,2,3,4,5&gt;</pre>"}, {"lang": "FreeBASIC", "loc": 19, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> PrintEx<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> n, n * n, n * n * n<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Proc<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, callback <span class=\"kw1\">As</span> <span class=\"kw1\">Sub</span><span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    callback<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" n\"</span>, <span class=\"st0\">\"n^2\"</span>, <span class=\"st0\">\"n^3\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" -\"</span>, <span class=\"st0\">\"---\"</span>, <span class=\"st0\">\"---\"</span><br/>Proc<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, @PrintEx<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit the program\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f = {|x| x^2}   // Anonymous function to square input<br/>a = [1,2,3,5,7]<br/>println[map[f, a]]<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> evenp x <span class=\"sy0\">=</span> x <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> result <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> evenp <span class=\"br0\">[</span>| <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span> |<span class=\"br0\">]</span></pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">[1, 2, 3].foreach( println )<br/>\u00a0<br/>[1, 2, 3].foreach( a -&gt; println(2a) )</pre>"}, {"lang": "Futhark", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>map f l<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 21, "block": "<pre class=\"text highlighted_source\">a\u00a0:= [1 .. 4];<br/>b\u00a0:= ShallowCopy(a);<br/>\u00a0<br/># Apply and replace values<br/>Apply(a, n -&gt; n*n);<br/>a;<br/># [ 1, 4, 9, 16 ]<br/>\u00a0<br/># Apply and don't change values<br/>List(b, n -&gt; n*n);<br/># [ 1, 4, 9, 16 ]<br/>\u00a0<br/># Apply and don't return anything (only side effects)<br/>Perform(b, Display);<br/>1<br/>2<br/>3<br/>4<br/>\u00a0<br/>b;<br/># [ 1 .. 4 ]</pre>"}, {"lang": "Go", "loc": 9, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">*</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> it <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">let</span> square x <span class=\"sy0\">=</span> x<span class=\"sy0\">*</span>x<br/><span class=\"kw1\">let</span> values <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> square values</pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> lst<br/>   lst <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">20</span><span class=\"sy1\">,</span> <span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">every</span> callback<span class=\"br0\">(</span><span class=\"kw4\">write</span><span class=\"sy1\">,!</span>lst<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> callback<span class=\"br0\">(</span>p<span class=\"sy1\">,</span>arg<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> p<span class=\"br0\">(</span><span class=\"st0\">\" -&gt; \"</span><span class=\"sy1\">,</span> arg<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">b <span class=\"sy0\">=</span> a<span class=\"sy0\">^</span><span class=\"nu0\">3</span></pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw3\">map</span><span class=\"br0\">(</span>squared<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   \"<span class=\"nu0\">_1</span></pre>"}, {"lang": "Java", "loc": 45, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ArrayCallback7 <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">interface</span> IntConsumer <span class=\"br0\">{</span><br/>        <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">interface</span> IntToInt <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> run<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> <span class=\"kw1\">forEach</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr, IntConsumer consumer<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">:</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            consumer.<span class=\"me1\">run</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> update<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr, IntToInt mapper<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> arr.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> mapper.<span class=\"me1\">run</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> numbers <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">forEach</span><span class=\"br0\">(</span>numbers, <span class=\"kw1\">new</span> IntConsumer<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        update<span class=\"br0\">(</span>numbers, <span class=\"kw1\">new</span> IntToInt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            @Override<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> run<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> x <span class=\"sy0\">*</span> x<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">forEach</span><span class=\"br0\">(</span>numbers, <span class=\"kw1\">new</span> IntConsumer<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> map<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> func<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> func<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>map<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> v <span class=\"sy0\">*</span> v<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1 2 3 4 5] [dup *] map.</pre>"}, {"lang": "jq", "loc": 15, "block": "<pre class=\"text highlighted_source\"># Illustration of map/1 using the builtin filter: exp<br/>map(exp)  # exponentiate each item in the input list<br/>\u00a0<br/># A compound expression can be specified as the argument to map, e.g.<br/>map( (. * .) + sqrt ) # x*x + sqrt(x)<br/>\u00a0<br/># The compound expression can also be a composition of filters, e.g.<br/>map( sqrt|floor )     # the floor of the sqrt<br/>\u00a0<br/># Array comprehension<br/>reduce .[] as $n ([]; . + [ exp ])<br/>\u00a0<br/># Elementwise operation <br/> [.[] + 1 ]   # add 1 to each element of the input array<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">numbers = [1, 3, 5, 7]<br/>\u00a0<br/>@show [n ^ 2 for n in numbers]                  # list comprehension<br/>square(x) = x ^ 2; @show map(square, numbers)   # functional form<br/>@show map(x -&gt; x ^ 2, numbers)                  # functional form with anonymous function<br/>@show [n * n for n in numbers]    \t\t\t\t# no need for a function,<br/>@show numbers .* numbers                        # element-wise operation<br/>@show numbers .^ 2                              # includes .+, .-, ./, comparison, and bitwise operations as well</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> array <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span>  <span class=\"co1\">// build</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> function <span class=\"sy0\">=</span> <span class=\"br0\">{</span> i<span class=\"sy0\">:</span> Int -<span class=\"sy0\">&gt;</span> i <span class=\"sy0\">*</span> i <span class=\"br0\">}</span> <span class=\"co1\">// function to apply</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> array.<span class=\"me1\">map</span> <span class=\"br0\">{</span> function<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"co1\">// process each item</span><br/>    println<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"co1\">// print results</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 3, "block": "<pre class=\"text highlighted_source\">: square(*)  dup *\u00a0;<br/>[1 2 3 4 5] square        . \"\\n\" .<br/>[1 2 3 4 5] 'square apply . \"\\n\" .</pre>"}, {"lang": "Lasso", "loc": 12, "block": "<pre class=\"text highlighted_source\">define cube(n::integer) =&gt; #n*#n*#n<br/>\u00a0<br/>local(<br/>\tmynumbers = array(1, 2, 3, 4, 5),<br/>\tmycube = array<br/>)<br/>\u00a0<br/>#mynumbers -&gt; foreach =&gt; {<br/>\t#mycube -&gt; insert(cube(#1))<br/>}<br/>\u00a0<br/>#mycube</pre>"}, {"lang": "Lisaac", "loc": 14, "block": "<pre class=\"text highlighted_source\">+ a\u00a0: ARRAY(INTEGER);<br/>+ b\u00a0: {INTEGER;};<br/>\u00a0<br/>a\u00a0:= ARRAY(INTEGER).create 1 to 3;<br/>1.to 3 do { i\u00a0: INTEGER;<br/>  a.put i to i;<br/>};<br/>\u00a0<br/>b\u00a0:= { arg\u00a0: INTEGER;<br/>  (arg * arg).print;<br/>  '\\n'.print;<br/>};<br/>\u00a0<br/>a.foreach b;</pre>"}, {"lang": "Logo", "loc": 6, "block": "<pre class=\"text highlighted_source\">to square\u00a0:x<br/>  output\u00a0:x *\u00a0:x<br/>end<br/>show map \"square [1 2 3 4 5] \u00a0; [1 4 9 16 25]<br/>show map [? *\u00a0?] [1 2 3 4 5] \u00a0; [1 4 9 16 25]<br/>foreach [1 2 3 4 5] [print square\u00a0?] \u00a0; 1 4 9 16 25, one per line</pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\">myArray <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\\\ a is a pointer to an array<br/>a=(1,2,3,4,5)<br/>\\\\ b is the lambda function to apply to a<br/>b=lambda  (x)-&gt;x**2<br/>\\\\ ArrayMap take an array and any number of lambda functions<br/>ArrayMap=Lambda (a as array) -&gt; {<br/>      \\\\ First inspect current stack<br/>      If empty then exit<br/>      \\\\ [] is a stack object with anyting in current stack, and leave current stack empty<br/>      \\\\ Array(stackobject) return an array with a copy of items (here they are lambda functions)<br/>      FunArray=Array([])<br/>      \\\\ m  and f are iteraror objects<br/>      \\\\ thet need a While IteratorObject {} to iterate from start to end (here is default from start to end)<br/>      m=each(a)     <br/>      While m {<br/>            f=each(FunArray)<br/>            While F {<br/>                \\\\ we put a copy of lambda in fun<br/>                        fun=Array(FunArray)<br/>                        Return m, m^:=fun(Array(m))<br/>                        \\\\ if we have some state in fun and we wish to save it then<br/>                        \\\\  we have to remove Rem or better to split line to unhide Return<br/>                        Rem\u00a0: Return FunArray, FunArray^:=fun<br/>            }<br/>      }<br/>}<br/>\\\\ we can pass any number of functions and  each one apply to same item<br/>Call ArrayMap(a, b, b)<br/>\\\\ M2000 can print all array items from a pointer to array or an array<br/>\\\\ using colums<br/>Print a  ' 1 16 81 256  625<br/>Print  ' send a CR<br/>\u00a0</pre>"}, {"lang": "M4", "loc": 9, "block": "<pre class=\"text highlighted_source\">define(`foreach', `pushdef(`$1')_foreach(<a class=\"__cf_email__\" data-cfemail=\"193d59\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)popdef(`$1')')dnl<br/>define(`_arg1', `$1')dnl<br/>define(`_foreach', `ifelse(`$2', `()', `',<br/>   `define(`$1', _arg1$2)$3`'$0(`$1', (shift$2), `$3')')')dnl<br/>dnl<br/>define(`apply',`foreach(`x',$1,`$2(x)')')dnl<br/>dnl<br/>define(`z',`eval(`$1*2') ')dnl<br/>apply(`(1,2,3)',`z')</pre>"}, {"lang": "Maple", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; map( sqrt, [ 1.1, 3.2, 5.7 ] );<br/>                [1.048808848, 1.788854382, 2.387467277]<br/>\u00a0<br/>&gt; map( x -&gt; x + 1, { 1, 3, 5 } );<br/>                               {2, 4, 6}<br/>\u00a0<br/>&gt; sqrt~( [ 1.1, 3.2, 5.7 ] );<br/>                [1.048808848, 1.788854382, 2.387467277]<br/>\u00a0<br/>&gt; (x -&gt; x + 1)~( { 1, 3, 5 } );<br/>                               {2, 4, 6}<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">(#*#)&amp; /@ {1, 2, 3, 4}<br/>\u00a0<br/>Map[Function[#*#], {1, 2, 3, 4}]<br/>\u00a0<br/>Map[((#*#)&amp;,{1,2,3,4}]<br/>\u00a0<br/>Map[Function[w,w*w],{1,2,3,4}]</pre>"}, {"lang": "MATLAB", "loc": 35, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; array = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>\u00a0<br/>array =<br/>\u00a0<br/>     <span class=\"nu0\">1</span>     <span class=\"nu0\">2</span>     <span class=\"nu0\">3</span>     <span class=\"nu0\">4</span>     <span class=\"nu0\">5</span><br/>\u00a0<br/>&gt;&gt; arrayfun<span class=\"br0\">(</span>@<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sin.html\"><span class=\"kw2\">sin</span></a>,array<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>  Columns <span class=\"nu0\">1</span> through <span class=\"nu0\">4</span><br/>\u00a0<br/>   <span class=\"nu0\">0.841470984807897</span>   <span class=\"nu0\">0.909297426825682</span>   <span class=\"nu0\">0.141120008059867</span>  -<span class=\"nu0\">0.756802495307928</span><br/>\u00a0<br/>  Column <span class=\"nu0\">5</span><br/>\u00a0<br/>  -<span class=\"nu0\">0.958924274663138</span><br/>\u00a0<br/>&gt;&gt; cellarray = <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">}</span><br/>\u00a0<br/>cellarray = <br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>    <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>    <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>    <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>    <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>\u00a0<br/>&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cellfun.html\"><span class=\"kw2\">cellfun</span></a><span class=\"br0\">(</span>@<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/tan.html\"><span class=\"kw2\">tan</span></a>,cellarray<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>  Columns <span class=\"nu0\">1</span> through <span class=\"nu0\">4</span><br/>\u00a0<br/>   <span class=\"nu0\">1.557407724654902</span>  -<span class=\"nu0\">2.185039863261519</span>  -<span class=\"nu0\">0.142546543074278</span>   <span class=\"nu0\">1.157821282349578</span><br/>\u00a0<br/>  Column <span class=\"nu0\">5</span><br/>\u00a0<br/>  -<span class=\"nu0\">3.380515006246586</span></pre>"}, {"lang": "Maxima", "loc": 8, "block": "<pre class=\"text highlighted_source\">/* for lists or sets */<br/>\u00a0<br/>map(sin, [1, 2, 3, 4]);<br/>map(sin, {1, 2, 3, 4});<br/>\u00a0<br/>/* for matrices */<br/>\u00a0<br/>matrixmap(sin, matrix([1, 2], [2, 4]));</pre>"}, {"lang": "Modula-3", "loc": 26, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Callback <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> CallBack <span class=\"sy0\">=</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>a<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>; b<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/>     Values <span class=\"sy0\">=</span> <span class=\"kw1\">REF</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> sample <span class=\"sy0\">:=</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span>;<br/>    callback <span class=\"sy0\">:=</span> Display;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Display<span class=\"br0\">(</span>loc<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>; val<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"array[\"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>loc<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"] = \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>val <span class=\"sy0\">*</span> val<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> Display;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Map<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> values<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>; size<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>; worker<span class=\"sy0\">:</span> CallBack<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span> lvalues <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Values<span class=\"sy0\">,</span> size<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>lvalues^<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>lvalues^<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      worker<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> Map;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  Map<span class=\"br0\">(</span>sample<span class=\"sy0\">,</span> <span class=\"kw3\">NUMBER</span><span class=\"br0\">(</span>sample<span class=\"br0\">)</span><span class=\"sy0\">,</span> callback<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Callback.</pre>"}, {"lang": "Nemerle", "loc": 2, "block": "<pre class=\"text highlighted_source\">def seg = array[1, 2, 3, 5, 8, 13];<br/>def squares = seq.Map(x =&gt; x*x);</pre>"}, {"lang": "NewLISP", "loc": 3, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#map\"><span class=\"kw1\">map</span></a> <span class=\"br0\">(</span>fn <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "NGS", "loc": 3, "block": "<pre class=\"text highlighted_source\">{<br/>\t[1, 2, 3, 4, 5].map(F(x) x*x)<br/>}</pre>"}, {"lang": "Nial", "loc": 2, "block": "<pre class=\"text highlighted_source\">each (* [first, first] ) 1 2 3 4<br/>=1 4 9 16</pre>"}, {"lang": "Nim", "loc": 2, "block": "<pre class=\"text highlighted_source\">var arr = @[1,2,3,4]<br/>arr.apply proc(some: var int) = echo(some, \" squared = \", some*some)</pre>"}, {"lang": "Oberon-2", "loc": 90, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> ApplyCallBack;<br/><span class=\"kw1\">IMPORT</span><br/>  Out <span class=\"sy0\">:=</span> NPCT<span class=\"sy0\">:</span>Console;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>  Fun <span class=\"sy0\">=</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  Ptr2Ary <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">5</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>  x<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">3</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>  r<span class=\"sy0\">:</span> Ptr2Ary;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Min<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> x &lt;<span class=\"sy0\">=</span> y <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> x <span class=\"kw1\">ELSE</span> <span class=\"kw1\">RETURN</span> y <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> Min;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Init<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span>;<br/>    a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>;<br/>    a<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">4</span>;<br/>  <span class=\"kw1\">END</span> Init;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Fun1<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> x <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">END</span> Fun1;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Fun2<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> x <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span>;<br/>  <span class=\"kw1\">END</span> Fun2;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Fun3<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">3</span>;<br/>  <span class=\"kw1\">END</span> Fun3;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Map<span class=\"br0\">(</span>F<span class=\"sy0\">:</span> Fun; <span class=\"kw1\">VAR</span> x<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span> <br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> F<span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span> Map;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Map2<span class=\"br0\">(</span>F<span class=\"sy0\">:</span> Fun; a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>; <span class=\"kw1\">VAR</span> r<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">,</span>l<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    l <span class=\"sy0\">:=</span> Min<span class=\"br0\">(</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> l <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> <br/>      r<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> F<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span> Map2;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Map3<span class=\"br0\">(</span>F<span class=\"sy0\">:</span> Fun; a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Ptr2Ary;<br/>  <span class=\"kw1\">VAR</span><br/>    r<span class=\"sy0\">:</span> Ptr2Ary;<br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      r<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> F<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> r<br/>  <span class=\"kw1\">END</span> Map3;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Show<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">END</span> Show;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  Init<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;Map<span class=\"br0\">(</span>Fun1<span class=\"sy0\">,</span>a<span class=\"br0\">)</span>;Show<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/>  Init<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;Map2<span class=\"br0\">(</span>Fun2<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>x<span class=\"br0\">)</span>;Show<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>  Init<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;r <span class=\"sy0\">:=</span> Map3<span class=\"br0\">(</span>Fun3<span class=\"sy0\">,</span>a<span class=\"br0\">)</span>;Show<span class=\"br0\">(</span>r^<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> ApplyCallBack.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 23, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> Structure<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      Run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> Run<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      values <span class=\"sy0\">:=</span> IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      squares <span class=\"sy0\">:=</span> values<span class=\"sy0\">-&gt;</span><span class=\"me1\">Apply</span><span class=\"br0\">(</span>Square<span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> squares<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        squares<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Square<span class=\"br0\">(</span>value <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> value <span class=\"sy0\">*</span> value<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>map</pre>"}, {"lang": "Octave", "loc": 7, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> <a href=\"http://octave.sourceforge.net/octave/function/e.html\"><span class=\"kw10\">e</span></a> <span class=\"sy3\">=</span> f<span class=\"br0\">(</span>x<span class=\"sy5\">,</span> y<span class=\"br0\">)</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/e.html\"><span class=\"kw10\">e</span></a> <span class=\"sy3\">=</span> x<span class=\"sy2\">^</span><span class=\"nu0\">2</span> <span class=\"sy1\">+</span> <a href=\"http://octave.sourceforge.net/octave/function/exp.html\"><span class=\"kw5\">exp</span></a><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"br0\">(</span>y<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"co2\">% f([2,3], [1,4]) gives and error, but</span><br/><a href=\"http://octave.sourceforge.net/octave/function/arrayfun.html\"><span class=\"kw6\">arrayfun</span></a><span class=\"br0\">(</span><span class=\"co7\">@f</span><span class=\"sy5\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy5\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"co2\">% works</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">0 #+ [ 1, 2, 3, 4, 5 ] apply</pre>"}, {"lang": "Ol", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(for-each<br/>   (lambda (element)<br/>      (display element))<br/>   '(1 2 3 4 5))<br/>; ==&gt; 12345<br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 24, "block": "<pre class=\"oorexx highlighted_source\">start = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"st0\">\"Rick\"</span>, <span class=\"st0\">\"Mike\"</span>, <span class=\"st0\">\"David\"</span>, <span class=\"st0\">\"Mark\"</span><span class=\"br0\">)</span><br/>new = map<span class=\"br0\">(</span>start, <span class=\"sy0\">.</span>routines~reversit<span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> map new, <span class=\"sy0\">.</span>routines~sayit<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- a function to perform an iterated callback over an array</span><br/><span class=\"co1\">-- using the provided function.  Returns an array containing</span><br/><span class=\"co1\">-- each function result</span><br/>::routine map<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> array, function<br/>  resultArray = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>array~items<span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> item <span class=\"kw2\">over</span> array<br/>     resultArray~append<span class=\"br0\">(</span>function~<span class=\"kw1\">call</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> resultArray<br/>\u00a0<br/>::routine reversit<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> string<br/>  <span class=\"kw1\">return</span> string~<span class=\"kw6\">reverse</span><br/>\u00a0<br/>::routine sayit<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> string<br/>  <span class=\"kw1\">say</span> string<br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>true   <span class=\"co1\">-- called as a function, so a result is required</span></pre>"}, {"lang": "Order", "loc": 10, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span> 8tuple_map<span class=\"br0\">(</span>8fn<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8times<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> 8tuple<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"co1\">// -&gt; (1,4,9,16,25)</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span> 8seq_map<span class=\"br0\">(</span>8fn<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8times<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> 8seq<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"co1\">// -&gt; (1)(4)(9)(16)(25)</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span> 8seq_for_each<span class=\"br0\">(</span>8fn<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8print<span class=\"br0\">(</span>8X 8comma<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> 8seq<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"co1\">// prints 1,2,3,4,5, and returns 8nil</span></pre>"}, {"lang": "Oz", "loc": 13, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span><span class=\"br0\">{</span><span class=\"re1\">Square</span> A<span class=\"br0\">}</span><br/>    A<span class=\"sy0\">*</span>A<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Lst = <span class=\"br0\">[</span>1 2 3 4 5<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">%% apply a PROCEDURE to every element</span><br/>  <span class=\"br0\">{</span>ForAll Lst Show<span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% apply a FUNCTION to every element</span><br/>  Result = <span class=\"br0\">{</span>Map Lst Square<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show Result<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">callback<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">+</span>n<span class=\"sy0\">;</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>callback<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 30, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># create array</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># create callback function</span><br/><span class=\"kw2\">sub</span> mycallback <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># use array indexing</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"mycallback($a[$i]) = \"</span><span class=\"sy0\">,</span> mycallback<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># using foreach</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"mycallback($x) = \"</span><span class=\"sy0\">,</span> mycallback<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># using map (useful for transforming an array)</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> mycallback<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span>                <span class=\"co1\"># @b is now (2, 4, 6, 8, 10)</span><br/>\u00a0<br/><span class=\"co1\"># and the same using an anonymous function</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@c</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span>                     <span class=\"co1\"># @c is now (2, 4, 6, 8, 10)</span><br/>\u00a0<br/><span class=\"co1\"># use a callback stored in a variable</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$func</span> <span class=\"sy0\">=</span> <span class=\"re0\">\\&amp;mycallback</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@d</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"re0\">$func</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span>                  <span class=\"co1\"># @d is now (2, 4, 6, 8, 10)</span><br/>\u00a0<br/><span class=\"co1\"># filter an array </span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@e</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span>               <span class=\"co1\"># @e is now (2, 4)</span></pre>"}, {"lang": "Perl", "loc": 30, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># create array</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># create callback function</span><br/><span class=\"kw2\">sub</span> mycallback <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># use array indexing</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"mycallback($a[$i]) = \"</span><span class=\"sy0\">,</span> mycallback<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># using foreach</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"mycallback($x) = \"</span><span class=\"sy0\">,</span> mycallback<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># using map (useful for transforming an array)</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> mycallback<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span>                <span class=\"co1\"># @b is now (2, 4, 6, 8, 10)</span><br/>\u00a0<br/><span class=\"co1\"># and the same using an anonymous function</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@c</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span>                     <span class=\"co1\"># @c is now (2, 4, 6, 8, 10)</span><br/>\u00a0<br/><span class=\"co1\"># use a callback stored in a variable</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$func</span> <span class=\"sy0\">=</span> <span class=\"re0\">\\&amp;mycallback</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@d</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"re0\">$func</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span>                  <span class=\"co1\"># @d is now (2, 4, 6, 8, 10)</span><br/>\u00a0<br/><span class=\"co1\"># filter an array </span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@e</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span>               <span class=\"co1\"># @e is now (2, 4)</span></pre>"}, {"lang": "Perl 6", "loc": 20, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> function <span class=\"br0\">{</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$^x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@array</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># via map function</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;function</span><span class=\"sy0\">,</span> <span class=\"re0\">@array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># via map method</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">@array</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"re0\">&amp;function</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># via for loop</span><br/><span class=\"kw1\">for</span> <span class=\"re0\">@array</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> function<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># via the \"hyper\" metaoperator and method indirection</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">@array</span>\u00bb<span class=\"sy0\">.</span><span class=\"re0\">&amp;function</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># we neither need a variable for the array nor for the function</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;&gt;.&amp;</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"re0\">$^x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 13, "block": "<pre class=\"text highlighted_source\">function apply(integer f, sequence s)<br/>-- apply function f to all elements of sequence s<br/>    for i = 1 to length(s) do<br/>        s[i] = call_func(f, {s[i]})<br/>    end for<br/>    return s<br/>end function<br/>\u00a0<br/>function add1(integer x)<br/>    return x + 1<br/>end function<br/>\u00a0<br/>? apply(routine_id(\"add1\"),{1,2,3})</pre>"}, {"lang": "PHP", "loc": 8, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> cube<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_map\"><span class=\"kw3\">array_map</span></a><span class=\"br0\">(</span><span class=\"st0\">\"cube\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 16, "block": "<pre class=\"text highlighted_source\">: (mapc println (1 2 3 4 5))  # Print numbers<br/>1<br/>2<br/>3<br/>4<br/>5<br/>-&gt; 5<br/>\u00a0<br/>: (mapcar '((N) (* N N)) (1 2 3 4 5))  # Calculate squares<br/>-&gt; (1 4 9 16 25)<br/>\u00a0<br/>: (mapcar ** (1 2 3 4 5) (2 .))  # Same, using a circular list<br/>-&gt; (1 4 9 16 25)<br/>\u00a0<br/>: (mapcar if '(T NIL T NIL) '(1 2 3 4) '(5 6 7 8))  # Conditional function<br/>-&gt; (1 6 3 8)</pre>"}, {"lang": "Pike", "loc": 8, "block": "<pre class=\"pike highlighted_source\">int cube<span class=\"br0\">(</span>int n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> a <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> b <span class=\"sy0\">=</span> cube<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>      <span class=\"co1\">// automap operator</span><br/>array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> c <span class=\"sy0\">=</span> map<span class=\"br0\">(</span>a, cube<span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"co1\">// conventional map function</span></pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"text highlighted_source\">   declare x(5) initial (1,3,5,7,8);<br/>   x = sqrt(x);<br/>   x = sin(x);</pre>"}, {"lang": "PL/SQL", "loc": 76, "block": "<pre class=\"plsql highlighted_source\"><span class=\"co1\">-- Let's create a generic class with one method to be used as an interface:</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TYPE\"><span class=\"kw1\">TYPE</span></a> callback <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AS\"><span class=\"kw1\">AS</span></a> OBJECT <span class=\"br0\">(</span><br/>    <span class=\"co1\">-- A class needs at least one member even though we don't use it</span><br/>    <span class=\"co1\">-- There's no generic OBJECT type, so let's call it NUMBER</span><br/>    dummy <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">,</span><br/>    <span class=\"co1\">-- Here's our function, and since PL/SQL doesn't have generics,</span><br/>    <span class=\"co1\">-- let's use type NUMBER for our params</span><br/>    MEMBER <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> exec<span class=\"br0\">(</span>n <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><br/><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NOT\"><span class=\"kw1\">NOT</span></a> FINAL <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NOT\"><span class=\"kw1\">NOT</span></a> instantiable<span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span><br/>\u00a0<br/><span class=\"co1\">-- Now let's inherit from that, defining a class with one method. We'll have ours square a number.</span><br/><span class=\"co1\">-- We can pass this class into any function that takes type callback:</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TYPE\"><span class=\"kw1\">TYPE</span></a> CB_SQUARE under callback <span class=\"br0\">(</span><br/>    OVERRIDING MEMBER <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> exec<span class=\"br0\">(</span>n <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><br/><span class=\"br0\">)</span><br/><span class=\"sy0\">/</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TYPE\"><span class=\"kw1\">TYPE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BODY\"><span class=\"kw1\">BODY</span></a> CB_SQUARE <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AS\"><span class=\"kw1\">AS</span></a><br/>    OVERRIDING MEMBER <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> exec<span class=\"br0\">(</span>n <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> exec<span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span><br/>\u00a0<br/><span class=\"co1\">-- And a package to hold our test</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a> <br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PACKAGE\"><span class=\"kw1\">PACKAGE</span></a> PKG_CALLBACK <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AS\"><span class=\"kw1\">AS</span></a> <br/>    myCallback cb_square<span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TYPE\"><span class=\"kw1\">TYPE</span></a> intTable <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TABLE\"><span class=\"kw1\">TABLE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OF\"><span class=\"kw1\">OF</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INDEX\"><span class=\"kw1\">INDEX</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BY\"><span class=\"kw1\">BY</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BINARY_INTEGER\"><span class=\"kw1\">BINARY_INTEGER</span></a><span class=\"sy0\">;</span><br/>    ints intTable<span class=\"sy0\">;</span><br/>    i <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PLS_INTEGER\"><span class=\"kw1\">PLS_INTEGER</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PROCEDURE\"><span class=\"kw1\">PROCEDURE</span></a> test_callback<span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> PKG_CALLBACK<span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PACKAGE\"><span class=\"kw1\">PACKAGE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BODY\"><span class=\"kw1\">BODY</span></a> PKG_CALLBACK <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AS\"><span class=\"kw1\">AS</span></a><br/>    <span class=\"co1\">-- Our generic mapping function that takes a \"method\" and a collection</span><br/>    <span class=\"co1\">-- Note that it takes the generic callback type </span><br/>    <span class=\"co1\">-- that doesn't know anything about squaring</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PROCEDURE\"><span class=\"kw1\">PROCEDURE</span></a> do_callback<span class=\"br0\">(</span>myCallback <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> callback<span class=\"sy0\">,</span> ints <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OUT\"><span class=\"kw1\">OUT</span></a> intTable<span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>        i <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PLS_INTEGER\"><span class=\"kw1\">PLS_INTEGER</span></a><span class=\"sy0\">;</span><br/>        myInt <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FOR\"><span class=\"kw1\">FOR</span></a> i <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> ints<span class=\"sy0\">.</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>            myInt <span class=\"sy0\">:=</span> ints<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">-- PL/SQL call's the child's method</span><br/>            ints<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> myCallback<span class=\"sy0\">.</span>exec<span class=\"br0\">(</span>myInt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> do_callback<span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PROCEDURE\"><span class=\"kw1\">PROCEDURE</span></a> test_callback <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>        myCallback <span class=\"sy0\">:=</span> cb_square<span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FOR\"><span class=\"kw1\">FOR</span></a> i <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>            ints<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> i<span class=\"sy0\">;</span><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>        do_callback<span class=\"br0\">(</span>myCallback<span class=\"sy0\">,</span> ints<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        i <span class=\"sy0\">:=</span> ints<span class=\"sy0\">.</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FIRST\"><span class=\"kw2\">FIRST</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHILE\"><span class=\"kw1\">WHILE</span></a> i <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NOT\"><span class=\"kw1\">NOT</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DBMS_OUTPUT\"><span class=\"kw3\">DBMS_OUTPUT</span></a><span class=\"sy0\">.</span>put_line<span class=\"br0\">(</span>ints<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            i <span class=\"sy0\">:=</span> ints<span class=\"sy0\">.</span>next<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> test_callback<span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> PKG_CALLBACK<span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  PKG_CALLBACK<span class=\"sy0\">.</span>TEST_CALLBACK<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span></pre>"}, {"lang": "Pop11", "loc": 10, "block": "<pre class=\"text highlighted_source\">;;; Define a procedure<br/>define proc(x);<br/>    printf(x*x, '%p,');<br/>enddefine;<br/>\u00a0<br/>;;; Create array<br/>lvars ar = { 1 2 3 4 5};<br/>\u00a0<br/>;;; Apply procedure to array<br/>appdata(ar, proc);</pre>"}, {"lang": "PostScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1 2 3 4 5] { dup mul = } forall</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">*</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 6, "block": "<pre class=\"prolog highlighted_source\"> <span class=\"sy1\">?-</span> assert<span class=\"br0\">(</span><span class=\"br0\">(</span>fun<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> Y <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">?-</span> maplist<span class=\"br0\">(</span>fun<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span><span class=\"nu0\">4</span><span class=\"sy4\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>L <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><span class=\"nu0\">4</span><span class=\"sy4\">,</span><span class=\"nu0\">6</span><span class=\"sy4\">,</span><span class=\"nu0\">8</span><span class=\"sy4\">,</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 14, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Cube<span class=\"br0\">(</span>Array param.i<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Protected</span> n.i<br/>    <span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>param<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Debug</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>param<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"^3 = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>param<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> param<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> param<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> <br/><span class=\"kw1\">EndProcedure</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> AnArray.i<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>AnArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    AnArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> <br/>\u00a0<br/>Cube<span class=\"br0\">(</span>AnArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> square<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> n * n<br/>\u00a0<br/>numbers <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><br/>\u00a0<br/>squares1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>square<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> numbers<span class=\"br0\">]</span>     <span class=\"co1\"># list comprehension</span><br/>\u00a0<br/>squares2a <span class=\"sy0\">=</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span>square<span class=\"sy0\">,</span> numbers<span class=\"br0\">)</span>            <span class=\"co1\"># functional form</span><br/>\u00a0<br/>squares2b <span class=\"sy0\">=</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x: x*x<span class=\"sy0\">,</span> numbers<span class=\"br0\">)</span>     <span class=\"co1\"># functional form with `lambda`</span><br/>\u00a0<br/>squares3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>n * n <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> numbers<span class=\"br0\">]</span>         <span class=\"co1\"># no need for a function,</span><br/>                                            <span class=\"co1\"># anonymous or otherwise</span><br/>\u00a0<br/>isquares1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n * n <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> numbers<span class=\"br0\">)</span>        <span class=\"co1\"># iterator, lazy</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">itertools</span><br/>isquares2 <span class=\"sy0\">=</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">imap</span><span class=\"br0\">(</span>square<span class=\"sy0\">,</span> numbers<span class=\"br0\">)</span> <span class=\"co1\"># iterator, lazy</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">cube &lt;- function(x) x*x*x<br/>elements &lt;- 1:5<br/>cubes &lt;- cube(elements)</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; using the `for/vector' comprehension form<br/>(for/vector ([i #(1 2 3 4 5)]) (sqr i))<br/>\u00a0<br/>;; the usual functional `map'<br/>(vector-map sqr #(1 2 3 4 5))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 2, "block": "<pre class=\"text highlighted_source\"># To print the squared elements<br/>[1 2 3 4 5] each dup * print</pre>"}, {"lang": "REBOL", "loc": 26, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Array Callback\"<br/>    URL: http://rosettacode.org/wiki/Apply_a_callback_to_an_Array<br/>]</span><br/>\u00a0<br/>map: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Apply a function across an array.\"</span><br/>\tf <span class=\"br0\">[</span>native<span class=\"sy0\">!</span> <span class=\"kw2\">function</span><span class=\"sy0\">!</span><span class=\"br0\">]</span> <span class=\"st0\">\"Function to apply to each element of array.\"</span><br/>\ta <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span> <span class=\"st0\">\"Array to process.\"</span><br/>\t<span class=\"sy0\">/</span>local x<br/><span class=\"br0\">]</span><span class=\"br0\">[</span>x: <span class=\"kw3\">copy</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>  <span class=\"kw2\">forall</span> a <span class=\"br0\">[</span><span class=\"kw3\">append</span> x <span class=\"kw2\">do</span> <span class=\"br0\">[</span>f a<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>  x<span class=\"br0\">]</span><br/>\u00a0<br/>square: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Tests:</span><br/>\u00a0<br/>assert: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>code<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"kw2\">either</span> <span class=\"kw2\">do</span> code <span class=\"br0\">[</span><span class=\"st0\">\"  ok\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"FAIL\"</span><span class=\"br0\">]</span>  <span class=\"kw3\">mold</span> code<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Simple loop, modify in place:\"</span><br/>assert <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">100</span> <span class=\"nu0\">81</span><span class=\"br0\">]</span> = <span class=\"br0\">(</span>a: <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">10</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span>  <span class=\"kw2\">forall</span> a <span class=\"br0\">[</span>a<span class=\"sy0\">/</span><span class=\"nu0\">1</span>: square a<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>crlf <span class=\"st0\">\"Functional style with 'map':\"</span><span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"nu0\">16</span> <span class=\"nu0\">36</span><span class=\"br0\">]</span> = map\u00a0:square <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>crlf <span class=\"st0\">\"Applying native function with 'map':\"</span><span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> = map\u00a0:<span class=\"kw3\">square-root</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"nu0\">16</span> <span class=\"nu0\">36</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">[ 1 2 3 4 5 ] ^array'fromQuote [ 10 * ] ^array'map ^array'display</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm applies a callback to an array (using factorials for demonstration)*/</span><br/>a<span class=\"sy0\">.</span>=;     b<span class=\"sy0\">.</span>=;         a<span class=\"sy0\">.</span>0  =  <span class=\"nu0\">0</span><br/>                      a<span class=\"sy0\">.</span>1  =  <span class=\"nu0\">1</span><br/>                      a<span class=\"sy0\">.</span>2  =  <span class=\"nu0\">2</span><br/>                      a<span class=\"sy0\">.</span>3  =  <span class=\"nu0\">3</span><br/>                      a<span class=\"sy0\">.</span>4  =  <span class=\"nu0\">4</span><br/>                      a<span class=\"sy0\">.</span>5  =  <span class=\"nu0\">5</span><br/>                      a<span class=\"sy0\">.</span>6  =  <span class=\"nu0\">6</span><br/>                      a<span class=\"sy0\">.</span>7  =  <span class=\"nu0\">7</span><br/>                      a<span class=\"sy0\">.</span>8  =  <span class=\"nu0\">8</span><br/>                      a<span class=\"sy0\">.</span>9  =  <span class=\"nu0\">9</span><br/>                      a<span class=\"sy0\">.</span>10 = <span class=\"nu0\">10</span><br/><span class=\"kw1\">call</span> listAB  <span class=\"st0\">'before'</span><br/><span class=\"kw1\">call</span> bangit  <span class=\"st0\">'a'</span>,<span class=\"st0\">'b'</span>           <span class=\"coMULTI\">/*factorialize the A array, store results\u2500\u2500\u2500\u25baB.*/</span><br/><span class=\"kw1\">call</span> listAB  <span class=\"st0\">' after'</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>bangit:   <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>;    _=<span class=\"kw2\">value</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">'.'</span>i<span class=\"br0\">)</span>;         <span class=\"kw1\">if</span> _==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>          <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">'.'</span>i, fact<span class=\"br0\">(</span>_<span class=\"br0\">)</span><br/>          <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*i*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fact: <span class=\"kw1\">procedure</span>;\u00a0!=<span class=\"nu0\">1</span>;        <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;  \u00a0!=!<span class=\"sy0\">*</span>j;   <span class=\"kw3\">end</span>;         <span class=\"kw1\">return</span>\u00a0!<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>listAB:   <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> a<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;    <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">'a.'</span>j<span class=\"st0\">\"=\"</span>a<span class=\"sy0\">.</span>j;    <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span>;  <span class=\"kw1\">say</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> b<span class=\"sy0\">.</span>k<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;    <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">'b.'</span>k<span class=\"st0\">\"=\"</span>b<span class=\"sy0\">.</span>k;    <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">return</span></pre>"}, {"lang": "RLaB", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;&gt; x = rand(2,4)<br/> 0.707213207   0.275298961   0.396757763   0.232312312<br/> 0.215619868   0.207078017   0.565700032   0.666090571<br/>&gt;&gt; sin(x)<br/> 0.649717845   0.271834652   0.386430003   0.230228332<br/> 0.213952984   0.205601224   0.536006923   0.617916954<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for x in [1,2,3,4,5]<br/>    x = x*x<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>   <span class=\"kw3\">puts</span> i<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 9, "block": "<pre class=\"text highlighted_source\">fn echo(n: &amp;i32) {<br/>    println!(\"{}\", n);<br/>}<br/>\u00a0<br/>fn main() {<br/>    let a: [i32; 5];<br/>    a = [1, 2, 3, 4, 5];<br/>    let _: Vec&lt;_&gt; = a.into_iter().map(echo).collect();<br/>}</pre>"}, {"lang": "Salmon", "loc": 7, "block": "<pre class=\"text highlighted_source\">function apply(list, ageless to_apply)<br/>  (comprehend(x; list) (to_apply(x)));<br/>\u00a0<br/>function square(x) (x*x);<br/>\u00a0<br/>iterate(x; apply([0...9], square))<br/>    x!;</pre>"}, {"lang": "Sather", "loc": 12, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  do_something(i:INT):INT is<br/>    return i * i;<br/>  end;<br/>\u00a0<br/>  main is<br/>    a:ARRAY{INT}\u00a0:= |1, 2, 3, 4, 5|;<br/>    -- we use an anonymous closure to apply our do_something \"callback\"<br/>    a.map(bind(do_something(_)));<br/>    loop #OUT + a.elt! + \"\\n\"; end;<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> l <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>l.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span>i <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 3, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>square n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> x #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> square <span class=\"br0\">(</span>vector<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">func callback<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> say i<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 22, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>   \u00a0! APPLIES A CALLBACK FUNCTION TO AN ARRAY\u00a0;<br/>    PROCEDURE APPLY(ARR, FUN);<br/>        REAL ARRAY ARR;<br/>        PROCEDURE FUN IS REAL PROCEDURE FUN(X); REAL X;;<br/>    BEGIN<br/>        INTEGER I;<br/>        FOR I\u00a0:= LOWERBOUND(ARR, 1) STEP 1 UNTIL UPPERBOUND(ARR, 1) DO<br/>            ARR(I)\u00a0:= FUN(ARR(I));<br/>    END APPLY;<br/>\u00a0<br/>   \u00a0! CALLBACK\u00a0;<br/>    REAL PROCEDURE SQUARE(X); REAL X; SQUARE\u00a0:= X * X;<br/>\u00a0<br/>    REAL ARRAY A(1:5);<br/>    INTEGER I;<br/>    FOR I\u00a0:= 1 STEP 1 UNTIL 5 DO A(I)\u00a0:= I;<br/>    APPLY(A, SQUARE);<br/>    FOR I\u00a0:= 1 STEP 1 UNTIL 5 DO OUTFIX(A(I), 2, 8); OUTIMAGE;<br/>\u00a0<br/>END.</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">#( 1 2 3 4 5 ) collect: [|\u00a0:n | n * n].</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re2\">#<span class=\"br0\">(</span> <span class=\"re5\">1</span> 2 3 4 5 <span class=\"br0\">)</span></span> collect: <span class=\"br0\">[</span>:<span class=\"re5\">n</span> | n * <span class=\"re5\">n</span><span class=\"br0\">]</span>.</pre>"}, {"lang": "Sparkling", "loc": 4, "block": "<pre class=\"text highlighted_source\">let numbers = { 1, 2, 3, 4 };<br/>foreach(numbers, function(idx, num) {<br/>    print(num);<br/>});</pre>"}, {"lang": "Standard ML", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>map f l<br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 23, "block": "<pre class=\"text highlighted_source\">function map(f,a) {<br/>\tnr = rows(a)<br/>\tnc = cols(a)<br/>\tb = J(nr,nc,.)<br/>\tfor (i=1;i&lt;=nr;i++) {<br/>\t\tfor (j=1;j&lt;=nc;j++) b[i,j] = (*f)(a[i,j])<br/>\t}<br/>\treturn(b)<br/>}<br/>\u00a0<br/>function maps(f,a) {<br/>\tnr = rows(a)<br/>\tnc = cols(a)<br/>\tb = J(nr,nc,\"\")<br/>\tfor (i=1;i&lt;=nr;i++) {<br/>\t\tfor (j=1;j&lt;=nc;j++) b[i,j] = (*f)(a[i,j])<br/>\t}<br/>\treturn(b)<br/>}<br/>\u00a0<br/>function square(x) {<br/>\treturn(x*x)<br/>}</pre>"}, {"lang": "SuperCollider", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1, 2, 3].squared  // returns [1, 4, 9]</pre>"}, {"lang": "Swift", "loc": 13, "block": "<pre class=\"text highlighted_source\">func square(n: Int) -&gt; Int {<br/>    return n * n<br/>}<br/>\u00a0<br/>let numbers = [1, 3, 5, 7]<br/>\u00a0<br/>let squares1a = numbers.map(square)         // map method on array<br/>\u00a0<br/>let squares1b = numbers.map {x in x*x}      // map method on array with anonymous function<br/>\u00a0<br/>let squares1b = numbers.map { $0 * $0 }      // map method on array with anonymous function and unnamed parameters<br/>\u00a0<br/>let isquares1 = numbers.lazy.map(square)   // lazy sequence</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">foreach</span> var <span class=\"re0\">$dat</span> <span class=\"br0\">{</span><br/>    myfunc <span class=\"re0\">$var</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a9 For no return value<br/>Define foreach(fe_cname,fe_list) = Prgm<br/>  Local fe_i<br/>  For fe_i,1,dim(fe_list)<br/>    #fe_cname(fe_list[fe_i])<br/>  EndFor<br/>EndPrgm<br/>\u00a0<br/>\u00a9 For a list of results<br/>Define map(map_cnam,map_list) = seq(#map_cnam(map_list[map_i]),map_i,1,dim(map_list))<br/>\u00a0<br/>Define callback(elem) = Prgm<br/>  Disp elem<br/>EndPrgm<br/>\u00a0<br/>foreach(\"callback\", {1,2,3,4,5})<br/>Disp map(\"\u221a\", {1,2,3,4,5})</pre>"}, {"lang": "TIScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>a.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> v <span class=\"sy0\">*</span> v<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Toka", "loc": 17, "block": "<pre class=\"text highlighted_source\">( array count function -- )<br/>{<br/>  value| array fn |<br/>  [ i array ] is I<br/>  [ to fn swap to array 0 swap [ I array.get\u00a0:stack fn invoke I array.put ] countedLoop ]<br/>} is map-array<br/>\u00a0<br/>( Build an array )<br/>5 cells is-array a<br/>10 0 a array.put<br/>11 1 a array.put<br/>12 2 a array.put<br/>13 3 a array.put<br/>14 4 a array.put<br/>\u00a0<br/>( Add 1 to each item in the array )<br/>a 5  [ 1 + ] map-array</pre>"}, {"lang": "TorqueScript", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function map(%array,%arrayCount,%function)<br/>{<br/>\tfor(%i=0;%i&lt;%arrayCount;%i++)<br/>\t{<br/>\t\teval(\"%a = \"@%<a class=\"__cf_email__\" data-cfemail=\"38594a4a594178\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"[\"@%<a class=\"__cf_email__\" data-cfemail=\"eb82ab\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"];\");<br/>\t\teval(\"\"@%<a class=\"__cf_email__\" data-cfemail=\"86e0f3e8e5f2efe9e8c6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"(\"@%<a class=\"__cf_email__\" data-cfemail=\"741534\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\");\");<br/>\t}<br/>}<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 11, "block": "<pre class=\"bash highlighted_source\">$ txr <span class=\"re5\">-e</span> <span class=\"st_h\">'[mapdo prinl #(1 2 3 4 5 6 7 8 9 10)]'</span><br/><span class=\"nu0\">1</span><br/><span class=\"nu0\">2</span><br/><span class=\"nu0\">3</span><br/><span class=\"nu0\">4</span><br/><span class=\"nu0\">5</span><br/><span class=\"nu0\">6</span><br/><span class=\"nu0\">7</span><br/><span class=\"nu0\">8</span><br/><span class=\"nu0\">9</span><br/><span class=\"nu0\">10</span></pre>"}, {"lang": "uBasic/4tH", "loc": 62, "block": "<pre class=\"text highlighted_source\">S = 5                                  ' Size of the array<br/>\u00a0<br/>For x = 0 To S - 1                     ' Initialize array<br/>  @(x) = x + 1<br/>Next<br/>\u00a0<br/>Proc _MapArray (_SquareRoot, S)        ' Call mapping procedure<br/>\u00a0<br/>For x = 0 To S - 1                     ' Print results<br/>  Print \"SQRT(\";x+1;\") = \";Using \"#.####\";@(x)<br/>Next<br/>\u00a0<br/>For x = 0 To S - 1                     ' Reinitialize array<br/>  @(x) = x + 1<br/>Next<br/>\u00a0<br/>Proc _MapArray (_Cosine, S)            ' Call mapping procedure<br/>\u00a0<br/>Print\u00a0: For x = 0 To S - 1             ' Print results<br/>  Print \"COS(\";x+1;\") = \";Using \"#.####\";@(x)<br/>Next<br/>\u00a0<br/>End<br/>\u00a0<br/>\u00a0<br/>_MapArray Param(2)                     ' Param(1) = function<br/>  Local (1)                            ' Param(2) = array size<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"8cefcc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 To <a class=\"__cf_email__\" data-cfemail=\"c6a486\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1<br/>    @(<a class=\"__cf_email__\" data-cfemail=\"8cefcc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = FUNC(<a class=\"__cf_email__\" data-cfemail=\"3e5f7e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(@(<a class=\"__cf_email__\" data-cfemail=\"6e0d2e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)))<br/>  Next<br/>Return<br/>\u00a0<br/>\u00a0<br/>_SquareRoot Param (1)                  ' This is an integer SQR subroutine<br/>  Local (2)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"b2d0f2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = (10^(4*2)) * <a class=\"__cf_email__\" data-cfemail=\"3a5b7a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                 ' Output is scaled by 10^4<br/>  <a class=\"__cf_email__\" data-cfemail=\"4d2c0d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"593b19\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>  Do<br/>    <a class=\"__cf_email__\" data-cfemail=\"e88ba8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = (<a class=\"__cf_email__\" data-cfemail=\"e081a0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + (<a class=\"__cf_email__\" data-cfemail=\"88eac8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / <a class=\"__cf_email__\" data-cfemail=\"c0a180\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))/2<br/>  Until (Abs(<a class=\"__cf_email__\" data-cfemail=\"630223\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - <a class=\"__cf_email__\" data-cfemail=\"127152\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) &lt; 2)<br/>    <a class=\"__cf_email__\" data-cfemail=\"95f4d5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"573417\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Loop<br/>\u00a0<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"b4d7f4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>\u00a0<br/>\u00a0<br/>_Cosine Param(1)                       ' This is an integer COS subroutine<br/>  Push Abs((<a class=\"__cf_email__\" data-cfemail=\"7a1b3a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*10000)%62832)           ' Output is scaled by 10^4<br/>  If Tos()&gt;31416 Then Push 62832-Pop()<br/>  Let <a class=\"__cf_email__\" data-cfemail=\"107150\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>=Tos()&gt;15708<br/>  If <a class=\"__cf_email__\" data-cfemail=\"b7d6f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Then Push 31416-Pop()<br/>  Push Tos()<br/>  Push (Pop()*Pop())/10000<br/>  Push 10000+((10000*-(Tos()/56))/10000)<br/>  Push 10000+((Pop()*-(Tos()/30))/10000)<br/>  Push 10000+((Pop()*-(Tos()/12))/10000)<br/>  Push 10000+((Pop()*-(Pop()/2))/10000)<br/>  If <a class=\"__cf_email__\" data-cfemail=\"711031\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Then Push -Pop()               ' Result is directly transferred<br/>Return                                 ' through the stack</pre>"}, {"lang": "UNIX Shell", "loc": 7, "block": "<pre class=\"bash highlighted_source\">map<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re2\">map_command</span>=<span class=\"re4\">$1</span><br/>\t<span class=\"kw3\">shift</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">do</span> <span class=\"st0\">\"<span class=\"es2\">$map_command</span>\"</span> <span class=\"st0\">\"<span class=\"es2\">$i</span>\"</span>; <span class=\"kw1\">done</span><br/><span class=\"br0\">}</span><br/><span class=\"re2\">list</span>=<span class=\"nu0\">1</span>:<span class=\"nu0\">2</span>:<span class=\"nu0\">3</span><br/><span class=\"br0\">(</span><span class=\"re2\">IFS</span>=:; map <span class=\"kw3\">echo</span> <span class=\"re1\">$list</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>#cast\u00a0%nL<br/>\u00a0<br/>demo = successor* &lt;325,32,67,1,3,7,315&gt;</pre>"}, {"lang": "V", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1 2 3 4] [dup *] map</pre>"}, {"lang": "VBA", "loc": 22, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> arr, i<br/>    <span class=\"co1\">'init<br/></span>    arr = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)<br/>\u00a0<br/>    <span class=\"co1\">'Loop and apply a function (Fibonacci) to each element<br/></span>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(arr) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr): arr(i) = Fibonacci(arr(i)): <span class=\"kw3\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">'return<br/></span>    Debug.<span class=\"kw4\">Print</span> Join(arr, <span class=\"st0\">\", \"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Fibonacci(N) <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>    <span class=\"kw3\">If</span> N &lt;= 1 <span class=\"kw3\">Then</span><br/>        Fibonacci = N<br/>    <span class=\"kw3\">Else</span><br/>        Fibonacci = Fibonacci(N - 1) + Fibonacci(N - 2)<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 18, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>class callback<br/>\t<span class=\"kw4\">dim</span> sRule<br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">let</span> rule( x )<br/>\t\tsRule = x<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> default <span class=\"kw2\">function</span> applyTo(a)<br/>\t\t<span class=\"kw4\">dim</span> p1<br/>\t\t<span class=\"kw3\">for</span> i = <span class=\"kw4\">lbound</span>( a ) <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>( a )<br/>\t\t\tp1 = a( i )<br/>\t\t\ta( i ) = eval( sRule )<br/>\t\t<span class=\"kw3\">next</span><br/>\t\tapplyTo = a<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/><span class=\"kw3\">end</span> class<br/>\u00a0</pre>"}, {"lang": "Vim Script", "loc": 4, "block": "<pre class=\"vim highlighted_source\"><span class=\"kw1\">echo</span> <span class=\"kw1\">map</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span><span class=\"br0\">]</span>, <span class=\"st0\">'v:val * v:val'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">echo</span> <span class=\"kw1\">map</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">30</span><span class=\"br0\">]</span>, <span class=\"st0\">'\"Element \" . v:key . \" = \" . v:val'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">echo</span> <span class=\"kw1\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"foo\"</span>, <span class=\"st0\">\"b\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"Bar\"</span>, <span class=\"st0\">\"c\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"BaZ\"</span><span class=\"br0\">}</span>, <span class=\"st0\">'toupper(v:val)'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">echo</span> <span class=\"kw1\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"foo\"</span>, <span class=\"st0\">\"b\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"Bar\"</span>, <span class=\"st0\">\"c\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"BaZ\"</span><span class=\"br0\">}</span>, <span class=\"st0\">'toupper(v:key)'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Vorpal", "loc": 1, "block": "<pre class=\"text highlighted_source\">A.map(F)</pre>"}, {"lang": "Wart", "loc": 1, "block": "<pre class=\"text highlighted_source\">map prn '(1 2 3 4 5)</pre>"}, {"lang": "WDTE", "loc": 9, "block": "<pre class=\"text highlighted_source\">let a =&gt; import 'arrays';<br/>let s =&gt; import 'stream';<br/>\u00a0<br/>let example =&gt; [3; 5; 2];<br/>\u00a0<br/>let double =&gt; a.stream example<br/>-&gt; s.map (* 2)<br/>-&gt; s.collect<br/>;</pre>"}, {"lang": "Wren", "loc": 5, "block": "<pre class=\"text highlighted_source\">var arr = [1, 2, 3, 4, 5]<br/>arr = arr.map { |x| x * 2 }.toList<br/>arr = arr.map(Fn.new {|x| x / 2}).toList<br/>arr.each {|x| System.print(x) }<br/>\u00a0</pre>"}, {"lang": "Yabasic", "loc": 31, "block": "<pre class=\"text highlighted_source\">sub map(f$, t())<br/>    local i<br/>\u00a0<br/>    for i = 1 to arraysize(t(), 1)<br/>        t(i) = execute(f$, t(i))<br/>    next i<br/>end sub<br/>\u00a0<br/>sub add1(x)<br/>    return x + 1<br/>end sub<br/>\u00a0<br/>sub square(x)<br/>    return x * x<br/>end sub<br/>\u00a0<br/>dim t(10)<br/>\u00a0<br/>for i = 1 to 10<br/>    t(i) = i<br/>    print t(i), \"\\t\";<br/>next i<br/>print<br/>\u00a0<br/>//map(\"add1\", t())<br/>map(\"square\", t())<br/>\u00a0<br/>for i = 1 to 10<br/>    print t(i), \"\\t\";<br/>next i<br/>print</pre>"}, {"lang": "Yacas", "loc": 6, "block": "<pre class=\"text highlighted_source\">Sin /@ {1, 2, 3, 4}<br/>\u00a0<br/>MapSingle(Sin, {1,2,3,4})<br/>\u00a0<br/>MapSingle({{x}, x^2}, {1,2,3,4})<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">L(1,2,3,4,5).apply('+(5))</pre>"}, {"lang": "zonnon", "loc": 41, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module Main;<br/>type<br/>\tCallback = procedure (integer): integer;<br/>\tVector = array {math} * of integer;<br/>\u00a0<br/>procedure Power(i:integer):integer;<br/>begin<br/>\treturn i*i;<br/>end Power;<br/>\u00a0<br/>procedure Map(x: Vector;p: Callback): Vector;<br/>var<br/>\ti: integer;<br/>\tr: Vector;<br/>begin<br/>\tr\u00a0:= new Vector(len(x));<br/>\tfor i\u00a0:= 0 to len(x) - 1 do\t<br/>\t\tr[i]\u00a0:= p(i);<br/>\tend;<br/>\treturn r<br/>end Map;<br/>\u00a0<br/>procedure Write(x: Vector);<br/>var<br/>\ti: integer;<br/>begin<br/>\tfor i\u00a0:= 0 to len(x) - 1 do<br/>\t\twrite(x[i]:4)<br/>\tend;<br/>\twriteln<br/>end Write;<br/>\u00a0<br/>var<br/>\tx,y: Vector;<br/>\u00a0<br/>begin<br/>\tx\u00a0:= [1,2,3,4,5];<br/>\tWrite(Map(x,Power))<br/>end Main.<br/>\u00a0</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 11, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> a$=<span class=\"st0\">\"x+x\"</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> b$=<span class=\"st0\">\"x*x\"</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> c$=<span class=\"st0\">\"x+x^2\"</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> f$=c$: <span class=\"co3\">REM Assign a$, b$ or c$</span><br/><span class=\"nu0\">150</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">160</span> READ x<br/><span class=\"nu0\">170</span> <span class=\"kw1\">PRINT</span> x;<span class=\"st0\">\" = \"</span>;<span class=\"kw3\">VAL</span> f$<br/><span class=\"nu0\">180</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">190</span> STOP <br/><span class=\"nu0\">200</span> DATA <span class=\"nu0\">2</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">100</span><br/>\u00a0</pre>"}]}