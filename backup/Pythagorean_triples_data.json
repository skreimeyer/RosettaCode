{"task": "Pythagorean_triples", "blocks": [{"lang": "360 Assembly", "loc": 127, "block": "<pre class=\"text highlighted_source\">*        Pythagorean triples -     12/06/2018<br/>PYTHTRI  CSECT<br/>         USING  PYTHTRI,R13        base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         SAVE   (14,12)            save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         MVC    PMAX,=F'1'         pmax=1<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,=F'6')    do i=1 to 6<br/>         L      R5,PMAX              pmax<br/>         MH     R5,=H'10'            *10<br/>         ST     R5,PMAX              pmax=pmax*10<br/>         MVC    PRIM,=F'0'           prim=0<br/>         MVC    COUNT,=F'0'          count=0     <br/>         L      R1,PMAX              pmax<br/>         BAL    R14,ISQRT            isqrt(pmax)<br/>         SRA    R0,1                 /2<br/>         ST     R0,NMAX              nmax=isqrt(pmax)/2<br/>         LA     R7,1                 n=1<br/>       DO WHILE=(C,R7,LE,NMAX)       do n=1 to nmax<br/>         LA     R9,1(R7)               m=n+1<br/>         LR     R5,R9                  m<br/>         AR     R5,R7                  +n<br/>         MR     R4,R9                  *m<br/>         SLA    R5,1                   *2<br/>         LR     R8,R5                  p=2*m*(m+n)<br/>       DO WHILE=(C,R8,LE,PMAX)         do while p&lt;=pmax <br/>         LR     R1,R9                    m<br/>         LR     R2,R7                    n<br/>         BAL    R14,GCD                  gcd(m,n)<br/>       IF C,R0,EQ,=F'1' THEN             if gcd(m,n)=1 then<br/>         L      R2,PRIM                    prim<br/>         LA     R2,1(R2)                   +1<br/>         ST     R2,PRIM                    prim=prim+1<br/>         L      R4,PMAX                    pmax<br/>         SRDA   R4,32                      ~<br/>         DR     R4,R8                      /p<br/>         A      R5,COUNT                   +count<br/>         ST     R5,COUNT                   count=count+pmax/p<br/>       ENDIF    ,                        endif<br/>         LA     R9,2(R9)                 m=m+2<br/>         LR     R5,R9                    m<br/>         AR     R5,R7                    +n<br/>         MR     R4,R9                    *m<br/>         SLA    R5,1                     *2<br/>         LR     R8,R5                    p=2*m*(m+n)<br/>       ENDDO    ,                      enddo n<br/>         LA     R7,1(R7)               n++<br/>       ENDDO    ,                    enddo n<br/>         L      R1,PMAX              pmax<br/>         XDECO  R1,XDEC              edit pmax<br/>         MVC    PG+15(9),XDEC+3      output pmax<br/>         L      R1,COUNT             count<br/>         XDECO  R1,XDEC              edit count<br/>         MVC    PG+33(9),XDEC+3      output count<br/>         L      R1,PRIM              prim<br/>         XDECO  R1,XDEC              edit prim<br/>         MVC    PG+55(9),XDEC+3      output prim<br/>         XPRNT  PG,L'PG              print<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         RETURN (14,12),RC=0       restore registers from calling sav<br/>NMAX     DS     F                  nmax<br/>PMAX     DS     F                  pmax<br/>COUNT    DS     F                  count<br/>PRIM     DS     F                  prim<br/>PG     DC CL80'Max Perimeter: ........., Total: ........., Primitive:'<br/>XDEC     DS     CL12<br/>GCD      EQU    *  --------------- function gcd(a,b)<br/>         STM    R2,R7,GCDSA        save context<br/>         LR     R3,R1              c=a<br/>         LR     R4,R2              d=b      <br/>GCDLOOP  LR     R6,R3              c<br/>         SRDA   R6,32              ~<br/>         DR     R6,R4              /d<br/>         LTR    R6,R6              if c mod d=0<br/>         BZ     GCDELOOP           then leave loop<br/>         LR     R5,R6              e=c mod d<br/>         LR     R3,R4              c=d<br/>         LR     R4,R5              d=e<br/>         B      GCDLOOP            loop<br/>GCDELOOP LR     R0,R4              return(d)<br/>         LM     R2,R7,GCDSA        restore context<br/>         BR     R14                return<br/>GCDSA    DS     6A                 context store<br/>ISQRT    EQU    *  --------------- function isqrt(n)                   <br/>         STM    R3,R10,ISQRTSA     save context<br/>         LR     R6,R1              n=r1<br/>         LR     R10,R6             sqrtn=n<br/>         SRA    R10,1              sqrtn=n/2<br/>       IF LTR,R10,Z,R10 THEN       if sqrtn=0 then <br/>         LA     R10,1                sqrtn=1<br/>       ELSE     ,                  else <br/>         LA     R9,0                 snm2=0<br/>         LA     R8,0                 snm1=0<br/>         LA     R7,0                 sn=0<br/>         LA     R3,0                 okexit=0<br/>       DO UNTIL=(C,R3,EQ,=A(1))      do until okexit=1 <br/>         AR     R10,R7                 sqrtn=sqrtn+sn<br/>         LR     R9,R8                  snm2=snm1<br/>         LR     R8,R7                  snm1=sn<br/>         LR     R4,R6                  n<br/>         SRDA   R4,32                  ~<br/>         DR     R4,R10                 /sqrtn<br/>         SR     R5,R10                 -sqrtn<br/>         SRA    R5,1                   /2<br/>         LR     R7,R5                  sn=(n/sqrtn-sqrtn)/2<br/>       IF C,R7,EQ,=F'0',OR,CR,R7,EQ,R9 THEN  if sn=0 or sn=snm2 then<br/>         LA     R3,1                     okexit=1<br/>       ENDIF    ,                      endif<br/>       ENDDO    ,                    enddo until<br/>       ENDIF    ,                  endif<br/>         LR     R5,R10             sqrtn<br/>         MR     R4,R10             *sqrtn<br/>       IF CR,R5,GT,R6 THEN         if sqrtn*sqrtn&gt;n then<br/>         BCTR   R10,0                sqrtn=sqrtn-1<br/>       ENDIF    ,                  endif<br/>         LR     R0,R10             return(sqrtn)<br/>         LM     R3,R10,ISQRTSA     restore context<br/>         BR     R14                return<br/>ISQRTSA  DS     8A                 context store<br/>         YREGS<br/>         END    PYTHTRI</pre>"}, {"lang": "Ada", "loc": 33, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Pythagorean_Triples <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Large_Natural <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span>**<span class=\"nu0\">63</span>-<span class=\"nu0\">1</span>;<br/>     <span class=\"co1\">-- this is the maximum for gnat</span><br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> New_Triangle<span class=\"br0\">(</span>A, B, C: Large_Natural;<br/>                          Max_Perimeter: Large_Natural;<br/>                          Total_Cnt, Primitive_Cnt: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Large_Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Perimeter: <span class=\"kw3\">constant</span> Large_Natural\u00a0:= A + B + C;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Perimeter &lt;= Max_Perimeter <span class=\"kw1\">then</span><br/>         Primitive_Cnt\u00a0:= Primitive_Cnt + <span class=\"nu0\">1</span>;<br/>         Total_Cnt    \u00a0:= Total_Cnt + Max_Perimeter / Perimeter;<br/>         New_Triangle<span class=\"br0\">(</span>A-<span class=\"nu0\">2</span>*B+<span class=\"nu0\">2</span>*C,     <span class=\"nu0\">2</span>*A-B+<span class=\"nu0\">2</span>*C,    <span class=\"nu0\">2</span>*A-<span class=\"nu0\">2</span>*B+<span class=\"nu0\">3</span>*C,   Max_Perimeter, Total_Cnt, Primitive_Cnt<span class=\"br0\">)</span>;<br/>         New_Triangle<span class=\"br0\">(</span>A+<span class=\"nu0\">2</span>*B+<span class=\"nu0\">2</span>*C,     <span class=\"nu0\">2</span>*A+B+<span class=\"nu0\">2</span>*C,    <span class=\"nu0\">2</span>*A+<span class=\"nu0\">2</span>*B+<span class=\"nu0\">3</span>*C,   Max_Perimeter, Total_Cnt, Primitive_Cnt<span class=\"br0\">)</span>;<br/>         New_Triangle<span class=\"br0\">(</span><span class=\"nu0\">2</span>*B+<span class=\"nu0\">2</span>*C-A,     B+<span class=\"nu0\">2</span>*C-<span class=\"nu0\">2</span>*A,    <span class=\"nu0\">2</span>*B+<span class=\"nu0\">3</span>*C-<span class=\"nu0\">2</span>*A,   Max_Perimeter, Total_Cnt, Primitive_Cnt<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> New_Triangle;<br/>\u00a0<br/>   T_Cnt, P_Cnt: Large_Natural;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">9</span> <span class=\"kw1\">loop</span><br/>      T_Cnt\u00a0:= <span class=\"nu0\">0</span>;<br/>      P_Cnt\u00a0:= <span class=\"nu0\">0</span>;<br/>      New_Triangle<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>**I, Total_Cnt =&gt; T_Cnt, Primitive_Cnt =&gt; P_Cnt<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Up to 10 **\"</span> &amp; Integer'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"\u00a0:\"</span> &amp;<br/>                             Large_Natural'Image<span class=\"br0\">(</span>T_Cnt<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" Triples,\"</span> &amp;<br/>                             Large_Natural'Image<span class=\"br0\">(</span>P_Cnt<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" Primitives\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Pythagorean_Triples;</pre>"}, {"lang": "ANSI Standard BASIC", "loc": 43, "block": "<pre class=\"text highlighted_source\">100 DECLARE EXTERNAL SUB tri<br/>110\u00a0!<br/>120 PUBLIC NUMERIC U0(3,3), U1(3,3), U2(3,3), all, prim<br/>130 DIM seed(3)<br/>140 MAT READ U0, U1, U2<br/>150 DATA 1, -2, 2, 2, -1, 2, 2, -2, 3<br/>160 DATA 1, 2, 2, 2, 1, 2, 2, 2, 3<br/>170 DATA -1, 2, 2, -2, 1, 2, -2, 2, 3<br/>180\u00a0!<br/>190 MAT READ seed<br/>200 DATA 3, 4, 5<br/>210 FOR power  = 1 TO 7<br/>220    LET all  = 0<br/>230    LET prim  = 0<br/>240    CALL tri(seed, 10^power , all , prim)<br/>250    PRINT \"Up to 10^\";power,<br/>260    PRINT USING \"######### triples ######### primitives\":all,prim<br/>270 NEXT power<br/>280 END<br/>290\u00a0!<br/>300 EXTERNAL SUB tri(i(), mp, all, prim)<br/>310 DECLARE EXTERNAL FUNCTION SUM<br/>320 DECLARE NUMERIC t(3)<br/>330\u00a0!<br/>340 IF SUM(i) &gt; mp THEN EXIT SUB<br/>350 LET prim = prim + 1<br/>360 LET all  = all + INT(mp  / SUM(i))<br/>370\u00a0!<br/>380 MAT t = U0 * i<br/>390 CALL tri(t, mp , all , prim)<br/>400 MAT t = U1 * i<br/>410 CALL tri(t, mp , all , prim)<br/>420 MAT t = U2 * i<br/>430 CALL tri(t, mp , all , prim)<br/>440 END SUB<br/>450\u00a0!<br/>460 EXTERNAL FUNCTION SUM(a())<br/>470 LET temp = 0<br/>480 FOR i=LBOUND(a) TO UBOUND(a)<br/>490    LET temp = temp + a(i)<br/>500 NEXT i<br/>510 LET SUM = temp<br/>520 END FUNCTION</pre>"}, {"lang": "AutoHotkey", "loc": 30, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a><span class=\"sy0\">,</span> Force<br/>\u00a0<br/><span class=\"co1\">; Greatest common divisor, from http://rosettacode.org/wiki/Greatest_common_divisor#AutoHotkey</span><br/>gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">Return</span> b<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Abs</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span>\u00a0: Gcd<span class=\"br0\">(</span>b<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>count_triples<span class=\"br0\">(</span>max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tprimitives <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> triples <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> m <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">while</span> m <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>max <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">0.5</span><br/>\t<span class=\"br0\">{</span><br/>\t\tn <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"sy0\">,</span>p <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>m<span class=\"sy0\">*</span><span class=\"br0\">(</span>m <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> delta <span class=\"sy0\">:=</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>m<br/>\t\t<span class=\"kw1\">while</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw1\">and</span> p <span class=\"sy0\">&lt;=</span> max<br/>\t\t\tgcd<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t? <span class=\"br0\">(</span>primitives<span class=\"sy0\">++</span><br/>\t\t\t\t<span class=\"sy0\">,</span> triples <span class=\"sy0\">+=</span> max <span class=\"sy0\">//</span> p<span class=\"br0\">)</span><br/>\t\t\t\t: <span class=\"st0\">\"\"</span><br/>\t\t\t<span class=\"sy0\">,</span> n <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"sy0\">,</span> p <span class=\"sy0\">+=</span> delta<br/>\t\tm<span class=\"sy0\">++</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> primitives <span class=\"st0\">\" primitives out of \"</span> triples <span class=\"st0\">\" triples\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% <span class=\"nu0\">10</span><span class=\"sy0\">**</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\": \"</span> count_triples<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 27, "block": "<pre class=\"text highlighted_source\">      DIM U0%(2,2), U1%(2,2), U2%(2,2), seed%(2)<br/>      U0%() =  1, -2, 2,  2, -1, 2,  2, -2, 3<br/>      U1%() =  1,  2, 2,  2,  1, 2,  2,  2, 3<br/>      U2%() = -1,  2, 2, -2,  1, 2, -2,  2, 3<br/>\u00a0<br/>      seed%() = 3, 4, 5<br/>      FOR power% = 1 TO 7<br/>        all% = 0\u00a0: prim% = 0<br/>        PROCtri(seed%(), 10^power%, all%, prim%)<br/>        PRINT \"Up to 10^\"; power%, \": \" all% \" triples\" prim% \" primitives\"<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF PROCtri(i%(), mp%, RETURN all%, RETURN prim%)<br/>      LOCAL t%()\u00a0: DIM t%(2)<br/>\u00a0<br/>      IF SUM(i%()) &gt; mp% ENDPROC<br/>      prim% += 1<br/>      all% += mp% DIV SUM(i%())<br/>\u00a0<br/>      t%() = U0%() . i%()<br/>      PROCtri(t%(), mp%, all%, prim%)<br/>      t%() = U1%() . i%()<br/>      PROCtri(t%(), mp%, all%, prim%)<br/>      t%() = U2%() . i%()<br/>      PROCtri(t%(), mp%, all%, prim%)<br/>      ENDPROC</pre>"}, {"lang": "Bracmat", "loc": 54, "block": "<pre class=\"text highlighted_source\">(pythagoreanTriples=<br/>  total prim max-peri U<br/>.       (.(1,-2,2) (2,-1,2) (2,-2,3))<br/>        (.(1,2,2) (2,1,2) (2,2,3))<br/>        (.(-1,2,2) (-2,1,2) (-2,2,3))<br/>   \u00a0:\u00a0?U<br/>  &amp; ( new-tri<br/>    =     i t p Urows Urow Ucols<br/>        , a b c loop A B C<br/>      .    \u00a0!arg:(,?a,?b,?c)<br/>          &amp;\u00a0!a+!b+!c:~&gt;!max-peri:?p<br/>          &amp; 1+!prim:?prim<br/>          &amp; div$(!max-peri.!p)+!total:?total<br/>          &amp;\u00a0!U:?Urows<br/>          &amp; ( loop<br/>            =  \u00a0!Urows:(.?Urow)\u00a0?Urows<br/>              &amp;\u00a0!Urow:?Ucols<br/>              &amp;\u00a0:?t<br/>              &amp;   whl<br/>                ' (\u00a0!Ucols:(?A,?B,?C)\u00a0?Ucols<br/>                  &amp; (!t,!a*!A+!b*!B+!c*!C):?t<br/>                  )<br/>              &amp; new-tri$!t<br/>              &amp;\u00a0!loop<br/>            )<br/>          &amp;\u00a0!loop<br/>        |<br/>    )<br/>  &amp; ( Main<br/>    =   seed<br/>      .   (,3,4,5):?seed<br/>        &amp; 10:?max-peri<br/>        &amp;   whl<br/>          ' ( 0:?total:?prim<br/>            &amp; new-tri$!seed<br/>            &amp;   out<br/>              $ ( str<br/>                $ ( \"Up to \"<br/>                   \u00a0!max-peri<br/>                    \": \"<br/>                   \u00a0!total<br/>                    \" triples, \"<br/>                   \u00a0!prim<br/>                    \" primitives.\"<br/>                  )<br/>                )<br/>            &amp;\u00a0!max-peri*10:~&gt;10000000:?max-peri<br/>            )<br/>    )<br/>  &amp; Main$<br/>);<br/>\u00a0<br/>pythagoreanTriples$;      <br/>\u00a0</pre>"}, {"lang": "C", "loc": 46, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> xint<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> ulong<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> ulong gcd<span class=\"br0\">(</span>ulong m<span class=\"sy0\">,</span> ulong n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ulong t<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> t <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> m <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span> m <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ulong a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> pytha <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> prim <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> max_p <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>    xint aa<span class=\"sy0\">,</span> bb<span class=\"sy0\">,</span> cc<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> max_p <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        aa <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xint<span class=\"br0\">)</span>a <span class=\"sy0\">*</span> a<span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"a =\u00a0%lu<span class=\"es1\">\\r</span>\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* show that we are working */</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/*  max_p/2: valid limit, because one side of triangle<br/>         *  must be less than the sum of the other two<br/>         */</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;</span> max_p<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            bb <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xint<span class=\"br0\">)</span>b <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> max_p<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                cc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xint<span class=\"br0\">)</span>c <span class=\"sy0\">*</span> c<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>aa <span class=\"sy0\">+</span> bb <span class=\"sy0\">&lt;</span> cc<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> c <span class=\"sy0\">&gt;</span> max_p<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>aa <span class=\"sy0\">+</span> bb <span class=\"sy0\">==</span> cc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    pytha<span class=\"sy0\">++;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> prim<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Up to\u00a0%lu, there are\u00a0%lu triples, of which\u00a0%lu are primitive<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        max_p<span class=\"sy0\">,</span> pytha<span class=\"sy0\">,</span> prim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 40, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>\u00a0<br/>namespace RosettaCode.<span class=\"me1\">CSharp</span><br/><span class=\"br0\">{</span><br/>    class Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Count_New_Triangle<span class=\"br0\">(</span>ulong A<span class=\"sy0\">,</span> ulong B<span class=\"sy0\">,</span> ulong C<span class=\"sy0\">,</span> ulong Max_Perimeter<span class=\"sy0\">,</span> ref ulong Total_Cnt<span class=\"sy0\">,</span> ref ulong Primitive_Cnt<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            ulong Perimeter <span class=\"sy0\">=</span> A <span class=\"sy0\">+</span> B <span class=\"sy0\">+</span> C<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Perimeter <span class=\"sy0\">&lt;=</span> Max_Perimeter<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Primitive_Cnt <span class=\"sy0\">=</span> Primitive_Cnt <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                Total_Cnt <span class=\"sy0\">=</span> Total_Cnt <span class=\"sy0\">+</span> Max_Perimeter <span class=\"sy0\">/</span> Perimeter<span class=\"sy0\">;</span><br/>                Count_New_Triangle<span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> C <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> B<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> A <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> C <span class=\"sy0\">-</span> B<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> A <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> C <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> B<span class=\"sy0\">,</span> Max_Perimeter<span class=\"sy0\">,</span> ref Total_Cnt<span class=\"sy0\">,</span> ref Primitive_Cnt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Count_New_Triangle<span class=\"br0\">(</span>A <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> B <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> C<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> A <span class=\"sy0\">+</span> B <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> C<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> A <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> B <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> C<span class=\"sy0\">,</span> Max_Perimeter<span class=\"sy0\">,</span> ref Total_Cnt<span class=\"sy0\">,</span> ref Primitive_Cnt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Count_New_Triangle<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> B <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> C <span class=\"sy0\">-</span> A<span class=\"sy0\">,</span> B <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> C <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> A<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> B <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> C <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> A<span class=\"sy0\">,</span> Max_Perimeter<span class=\"sy0\">,</span> ref Total_Cnt<span class=\"sy0\">,</span> ref Primitive_Cnt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Count_Pythagorean_Triples<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            ulong T_Cnt<span class=\"sy0\">,</span> P_Cnt<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> I <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> I<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                T_Cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                P_Cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                ulong ExponentNumberValue <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ulong<span class=\"br0\">)</span>Math.<span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> I<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Count_New_Triangle<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> ExponentNumberValue<span class=\"sy0\">,</span> ref T_Cnt<span class=\"sy0\">,</span> ref P_Cnt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Perimeter up to 10E\"</span> <span class=\"sy0\">+</span> I <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy0\">+</span> T_Cnt <span class=\"sy0\">+</span> <span class=\"st0\">\" Triples, \"</span> <span class=\"sy0\">+</span> P_Cnt <span class=\"sy0\">+</span> <span class=\"st0\">\" Primitives\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Count_Pythagorean_Triples<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 17, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> gcd <span class=\"br0\">[</span>a b<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> b<span class=\"br0\">)</span> a <span class=\"br0\">(</span><span class=\"kw1\">recur</span> b <span class=\"br0\">(</span>mod a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> pyth <span class=\"br0\">[</span>peri<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>m <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sqrt <span class=\"br0\">(</span><span class=\"sy0\">/</span> peri <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        n <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>mod m <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> m <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">; n&lt;m, opposite polarity</span><br/>       \u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span>p <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> m <span class=\"br0\">(</span><span class=\"sy0\">+</span> m n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>      <span class=\"co1\">; = a+b+c for this (m,n)</span><br/>       \u00a0:<span class=\"me1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> p peri<span class=\"br0\">)</span><br/>       \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>gcd m n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       \u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span>m2 <span class=\"br0\">(</span><span class=\"sy0\">*</span> m m<span class=\"br0\">)</span>, n2 <span class=\"br0\">(</span><span class=\"sy0\">*</span> n n<span class=\"br0\">)</span>, <br/>              <span class=\"br0\">[</span>a b<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">-</span> m2 n2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> m n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, c <span class=\"br0\">(</span><span class=\"sy0\">+</span> m2 n2<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        k <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>quot peri p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> k <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> k a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> k b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> k c<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rcount <span class=\"br0\">[</span>ts<span class=\"br0\">]</span> <span class=\"co1\">; (-&gt;&gt; peri pyth rcount) produces [total, primitive] counts</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>total prims<span class=\"br0\">]</span> t<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">inc</span> total<span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> prims<span class=\"br0\">)</span> prims<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    ts<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 35, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>gcd = <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">return</span> x <span class=\"kw1\">if</span> y == <span class=\"nu0\">0</span><br/>  gcd<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x <span class=\"sy0\">%</span> y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># m,n generate primitive Pythag triples</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># preconditions:</span><br/><span class=\"co1\">#   m, n are integers of different parity</span><br/><span class=\"co1\">#   m &gt; n</span><br/><span class=\"co1\">#   gcd(m,n) == 1 (coprime)</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># m, n generate: [m*m - n*n, 2*m*n, m*m + n*n]</span><br/><span class=\"co1\"># perimeter is 2*m*m + 2*m*n = 2 * m * (m+n)</span><br/>count_triples = <span class=\"br0\">(</span>max_perim<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  num_primitives = <span class=\"nu0\">0</span><br/>  num_triples = <span class=\"nu0\">0</span><br/>  m = <span class=\"nu0\">2</span><br/>  upper_limit = Math.<span class=\"me1\">sqrt</span> max_perim <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">while</span> m <span class=\"sy0\">&lt;</span>= upper_limit<br/>    n = m <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    p = <span class=\"nu0\">2</span><span class=\"sy0\">*</span>m<span class=\"sy0\">*</span>m <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>m<span class=\"sy0\">*</span>n<br/>    delta = <span class=\"nu0\">4</span><span class=\"sy0\">*</span>m<br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw2\">and</span> p <span class=\"sy0\">&lt;</span>= max_perim<br/>      <span class=\"kw1\">if</span> gcd<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>        num_primitives <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>        num_triples <span class=\"sy0\">+</span>= Math.<span class=\"me1\">floor</span> max_perim <span class=\"sy0\">/</span> p<br/>      n <span class=\"sy0\">+</span>= <span class=\"nu0\">2</span><br/>      p <span class=\"sy0\">+</span>= delta<br/>    m <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  console.<span class=\"me1\">log</span> num_primitives<span class=\"sy0\">,</span> num_triples<br/>\u00a0<br/>max_perim = Math.<span class=\"me1\">pow</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"co1\"># takes under a minute</span><br/>count_triples<span class=\"br0\">(</span>max_perim<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mmul <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for x in a collect<br/>    <span class=\"br0\">(</span>loop for y in x<br/>          for z in b sum <span class=\"br0\">(</span>* y z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-tri <span class=\"br0\">(</span>lim<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>prim <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>cnt <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>count1 <span class=\"br0\">(</span>tr<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>peri <span class=\"br0\">(</span>reduce #'+ tr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> peri lim<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>incf prim<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>incf cnt <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> lim peri<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>count1 <span class=\"br0\">(</span>mmul '<span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> -<span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> -<span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> -<span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> tr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>count1 <span class=\"br0\">(</span>mmul '<span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> tr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>count1 <span class=\"br0\">(</span>mmul '<span class=\"br0\">(</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span>  <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">2</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">2</span>  <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> tr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>count1 '<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a: ~a prim, ~a all~%\"</span> lim prim cnt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for p from <span class=\"nu0\">2</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span>count-tri <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> triples <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"sy0\">=&gt;</span><br/>        iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>z <span class=\"sy0\">=&gt;</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> z <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> iota<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> z <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>y <span class=\"sy0\">=&gt;</span> tuple<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">joiner</span>.<span class=\"me1\">joiner</span><br/>        .<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>t <span class=\"sy0\">=&gt;</span> t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> t<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">only</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>t <span class=\"sy0\">=&gt;</span> tuple<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">gcd</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> xs <span class=\"sy0\">=</span> triples<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Up to 100 there are \"</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">count</span><span class=\"sy0\">,</span> <span class=\"st0\">\" triples, \"</span><span class=\"sy0\">,</span><br/>            xs.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>.<span class=\"me1\">count</span><span class=\"sy0\">,</span> <span class=\"st0\">\" are primitive.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 49, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tperimeter<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tperimeter <span class=\"sy0\">:=</span> <span class=\"nu0\">100</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tperimeter <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1000000</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\ttotal <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t\tprimitive_triples <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t\tcount_pythagorean_triples <span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, perimeter<span class=\"br0\">)</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"There are \"</span> <span class=\"sy0\">+</span> total.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" triples, below \"</span> <span class=\"sy0\">+</span> perimeter.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\". Of which \"</span> <span class=\"sy0\">+</span> primitive_triples.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" are primitives.<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\tperimeter <span class=\"sy0\">:=</span> perimeter <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tcount_pythagorean_triples <span class=\"br0\">(</span>a, b, c, perimeter<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- Total count of pythagorean triples and total count of primitve triples below perimeter.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tp<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tp <span class=\"sy0\">:=</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> c<br/>\t\t\t<span class=\"kw2\">if</span> p <span class=\"sy0\">&lt;=</span> perimeter <span class=\"kw2\">then</span><br/>\t\t\t\tprimitive_triples <span class=\"sy0\">:=</span> primitive_triples <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\ttotal <span class=\"sy0\">:=</span> total <span class=\"sy0\">+</span> perimeter <span class=\"sy0\">//</span> p<br/>\t\t\t\tcount_pythagorean_triples <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> b <span class=\"sy0\">+</span> c<span class=\"br0\">)</span>, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"sy0\">-</span> b, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-</span> b <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> c, perimeter<span class=\"br0\">)</span><br/>\t\t\t\tcount_pythagorean_triples <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b <span class=\"sy0\">+</span> c<span class=\"br0\">)</span>, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> b, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> c, perimeter<span class=\"br0\">)</span><br/>\t\t\t\tcount_pythagorean_triples <span class=\"br0\">(</span><span class=\"sy0\">-</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b <span class=\"sy0\">+</span> c<span class=\"br0\">)</span>, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> a <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> b, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> c, perimeter<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tprimitive_triples<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\u00a0<br/>\ttotal<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def count_triples(limit), do: count_triples(limit,3,4,5)<br/>\u00a0<br/>  defp count_triples(limit, a, b, c) when limit&lt;(a+b+c), do: {0,0}<br/>  defp count_triples(limit, a, b, c) do<br/>    {p1, t1} = count_triples(limit, a-2*b+2*c, 2*a-b+2*c, 2*a-2*b+3*c)<br/>    {p2, t2} = count_triples(limit, a+2*b+2*c, 2*a+b+2*c, 2*a+2*b+3*c)<br/>    {p3, t3} = count_triples(limit,-a+2*b+2*c,-2*a+b+2*c,-2*a+2*b+3*c)<br/>    {1+p1+p2+p3, div(limit, a+b+c)+t1+t2+t3}<br/>  end<br/>end<br/>\u00a0<br/>list = for n &lt;- 1..8, do: Enum.reduce(1..n, 1, fn(_,acc)-&gt;10*acc end)<br/>Enum.each(list, fn n -&gt; IO.inspect {n, RC.count_triples(n)} end)</pre>"}, {"lang": "Erlang", "loc": 45, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">%%</span><br/><span class=\"co1\">%% Pythagorian triples in Erlang, J.W. Luiten</span><br/><span class=\"co1\">%%</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>triples<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% Transformations t1, t2 and t3 to generate new triples    </span><br/><span class=\"re3\">t1</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">A</span><span class=\"sy3\">-</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">A</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/><span class=\"re3\">t2</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">A</span><span class=\"sy3\">+</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">A</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/><span class=\"re3\">t3</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy3\">-</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">A</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% Generation of triples</span><br/><span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">Tot_acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt_acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_perimeter</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy3\">+</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"sy3\">=&lt;</span> <span class=\"re5\">Max_perimeter</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Tot1</span> <span class=\"sy3\">=</span> <span class=\"re5\">Tot_acc</span> <span class=\"sy3\">+</span> <span class=\"re5\">Max_perimeter</span> <span class=\"kw2\">div</span> <span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy3\">+</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">A1</span><span class=\"sy1\">,</span> <span class=\"re5\">B1</span><span class=\"sy1\">,</span> <span class=\"re5\">C1</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">t1</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Tot2</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt2</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">A1</span><span class=\"sy1\">,</span> <span class=\"re5\">B1</span><span class=\"sy1\">,</span> <span class=\"re5\">C1</span><span class=\"sy1\">,</span> <span class=\"re5\">Tot1</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt_acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_perimeter</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>  <span class=\"br0\">{</span><span class=\"re5\">A2</span><span class=\"sy1\">,</span> <span class=\"re5\">B2</span><span class=\"sy1\">,</span> <span class=\"re5\">C2</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">t2</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Tot3</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt3</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">A2</span><span class=\"sy1\">,</span> <span class=\"re5\">B2</span><span class=\"sy1\">,</span> <span class=\"re5\">C2</span><span class=\"sy1\">,</span> <span class=\"re5\">Tot2</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt2</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_perimeter</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>  <span class=\"br0\">{</span><span class=\"re5\">A3</span><span class=\"sy1\">,</span> <span class=\"re5\">B3</span><span class=\"sy1\">,</span> <span class=\"re5\">C3</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">t3</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Tot4</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt4</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">A3</span><span class=\"sy1\">,</span> <span class=\"re5\">B3</span><span class=\"sy1\">,</span> <span class=\"re5\">C3</span><span class=\"sy1\">,</span> <span class=\"re5\">Tot3</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt3</span><span class=\"sy1\">,</span> <span class=\"re5\">Max_perimeter</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Tot4</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt4</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">_A</span><span class=\"sy1\">,</span> <span class=\"re5\">_B</span><span class=\"sy1\">,</span> <span class=\"re5\">_C</span><span class=\"sy1\">,</span> <span class=\"re5\">Tot_acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt_acc</span><span class=\"sy1\">,</span> <span class=\"re5\">_Max_perimeter</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Tot_acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Cnt_acc</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">Pow</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Max</span> <span class=\"sy3\">=</span> <span class=\"kw3\">trunc</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"re5\">Pow</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Tot</span><span class=\"sy1\">,</span> <span class=\"re5\">Prim</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span><span class=\"re5\">Pow</span><span class=\"sy1\">,</span> <span class=\"re5\">Tot</span><span class=\"sy1\">,</span> <span class=\"re5\">Prim</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">Pow</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"re5\">Pow</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% Display a single result.</span><br/><span class=\"re3\">display_result</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">Pow</span><span class=\"sy1\">,</span> <span class=\"re5\">Tot</span><span class=\"sy1\">,</span> <span class=\"re5\">Prim</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Up to 10 ** ~w\u00a0: ~w triples, ~w primitives~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Pow</span><span class=\"sy1\">,</span> <span class=\"re5\">Tot</span><span class=\"sy1\">,</span> <span class=\"re5\">Prim</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"re5\">Max</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">L</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">Answer</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">count_triples</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">Result</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">display_result</span><span class=\"br0\">(</span><span class=\"re5\">Result</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Answer</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 59, "block": "<pre class=\"text highlighted_source\">PROGRAM PIT<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>  PRINT(CHR$(12);)\u00a0!CLS<br/>  PRINT(TIME$)<br/>\u00a0<br/>  FOR POWER=1 TO 7 DO<br/>    PLIMIT=10#^POWER<br/>    UPPERBOUND=INT(1+PLIMIT^0.5)<br/>    PRIMITIVES=0<br/>    TRIPLES=0<br/>    EXTRAS=0         \u00a0! will count the in-range multiples of any primitive<br/>\u00a0<br/>    FOR M=2 TO UPPERBOUND DO<br/>        FOR N=1+(M MOD 2=1) TO M-1 STEP 2 DO<br/>            TERM1=2*M*N<br/>            TERM2=M*M-N*N<br/>            TERM3=M*M+N*N<br/>            PERIMETER=TERM1+TERM2+TERM3<br/>\u00a0<br/>            IF PERIMETER&lt;=PLIMIT THEN TRIPLES=TRIPLES+1<br/>\u00a0<br/>            A=TERM1<br/>            B=TERM2<br/>\u00a0<br/>            REPEAT<br/>                R=A-B*INT(A/B)<br/>                A=B<br/>                B=R<br/>            UNTIL R&lt;=0<br/>\u00a0<br/>           \u00a0! we've found a primitive triple if a = 1, since hcf =1.<br/>           \u00a0! and it is inside perimeter range. Save it in an array<br/>            IF (A=1) AND (PERIMETER&lt;=PLIMIT) THEN<br/>                PRIMITIVES=PRIMITIVES+1<br/>\u00a0<br/>               \u00a0!-----------------------------------------------<br/>               \u00a0!swap so in increasing order of side length<br/>               \u00a0!-----------------------------------------------<br/>                IF TERM1&gt;TERM2 THEN SWAP(TERM1,TERM2)<br/>               \u00a0!-----------------------------------------------<br/>               \u00a0!we have the primitive &amp; removed any multiples.<br/>               \u00a0!Now calculate ALL the multiples in range.<br/>               \u00a0!-----------------------------------------------<br/>                NEX=INT(PLIMIT/PERIMETER)<br/>                EXTRAS=EXTRAS+NEX<br/>            END IF<br/>\u00a0<br/>           \u00a0!scan<br/>        END FOR<br/>    END FOR<br/>\u00a0<br/>    PRINT(\"Primit. with perimeter &lt;=\";10#^power;\"is\";primitives;\"&amp;\";extras;\"non-prim.triples.\")<br/>    PRINT(TIME$)<br/>  END FOR<br/>\u00a0<br/>  PRINT PRINT(\"** End **\")<br/>END PROGRAM</pre>"}, {"lang": "Euphoria", "loc": 21, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> tri<span class=\"br0\">(</span><span class=\"kw2\">atom</span> lim<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> in<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> r<br/>    <span class=\"kw2\">atom</span> p<br/>    p <span class=\"sy1\">=</span> in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> p &gt; lim <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    r <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>lim <span class=\"sy1\">/</span> p<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    r <span class=\"sy1\">+=</span> tri<span class=\"br0\">(</span>lim<span class=\"sy2\">,</span> <span class=\"br0\">{</span> in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>  <span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>  <span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">3</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    r <span class=\"sy1\">+=</span> tri<span class=\"br0\">(</span>lim<span class=\"sy2\">,</span> <span class=\"br0\">{</span> in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>  <span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>  <span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">3</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    r <span class=\"sy1\">+=</span> tri<span class=\"br0\">(</span>lim<span class=\"sy2\">,</span> <span class=\"br0\">{</span><span class=\"sy1\">-</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy2\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy2\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"nu0\">3</span><span class=\"sy1\">*</span>in<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">atom</span> max_peri<br/>max_peri <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><br/><span class=\"kw1\">while</span> max_peri &lt;<span class=\"sy1\">=</span> <span class=\"nu0\">100000000</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%d: \"</span><span class=\"sy2\">,</span> max_peri<span class=\"br0\">)</span><br/>    <span class=\"sy2\">?</span> tri<span class=\"br0\">(</span>max_peri<span class=\"sy2\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span> <span class=\"nu0\">4</span><span class=\"sy2\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    max_peri <span class=\"sy1\">*=</span> <span class=\"nu0\">10</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span></pre>"}, {"lang": "F#", "loc": 32, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> isqrt n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> iter t <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> t<span class=\"sy0\">*</span>t<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> d<span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>d <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">+</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">// t*t &lt;= n &lt; (t+1)*(t+1)</span><br/>        <span class=\"kw1\">then</span> t <span class=\"kw1\">else</span> iter <span class=\"br0\">(</span><span class=\"br0\">(</span>t<span class=\"sy0\">+</span><span class=\"br0\">(</span>n<span class=\"sy0\">/</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    iter <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gcd a b <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> t <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> b<br/>    <span class=\"kw1\">if</span> t <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> b <span class=\"kw1\">else</span> gcd b t<br/>\u00a0<br/><span class=\"kw1\">let</span> coprime a b <span class=\"sy0\">=</span> gcd a b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">let</span> num_to ms <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">mutable</span> ctr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">mutable</span> prim_ctr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">let</span> max_m <span class=\"sy0\">=</span> isqrt <span class=\"br0\">(</span>ms<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> max_m <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>m<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> m<span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> coprime m n <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>m<span class=\"sy0\">*</span><span class=\"br0\">(</span>m<span class=\"sy0\">+</span>n<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> s <span class=\"sy0\">&lt;=</span> ms <span class=\"kw1\">then</span><br/>                    ctr <span class=\"sy0\">&lt;-</span> ctr <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ms<span class=\"sy0\">/</span>s<span class=\"br0\">)</span><br/>                    prim_ctr <span class=\"sy0\">&lt;-</span> prim_ctr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">(</span>ctr, prim_ctr<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> show i <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> s, p <span class=\"sy0\">=</span> num_to i <span class=\"kw1\">in</span><br/>    printfn <span class=\"st0\">\"For perimeters up to\u00a0%d there are\u00a0%d total and\u00a0%d primitive\"</span> i s p<span class=\"sy0\">;;</span><br/>\u00a0<br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> show <span class=\"br0\">[</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> <span class=\"nu0\">100000</span><span class=\"sy0\">;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> <span class=\"nu0\">10000000</span><span class=\"sy0\">;</span> <span class=\"nu0\">100000000</span> <span class=\"br0\">]</span></pre>"}, {"lang": "Factor", "loc": 43, "block": "<pre class=\"text highlighted_source\">USING: accessors arrays formatting kernel literals math<br/>math.functions math.matrices math.ranges sequences\u00a0;<br/>IN: rosettacode.pyth<br/>\u00a0<br/>CONSTANT: T1 { <br/>  {  1  2  2 }<br/>  { -2 -1 -2 }<br/>  {  2  2  3 }<br/>}<br/>CONSTANT: T2 {<br/>  {  1  2  2 }<br/>  {  2  1  2 }<br/>  {  2  2  3 }<br/>}<br/>CONSTANT: T3 {<br/>  { -1 -2 -2 }<br/>  {  2  1  2 }<br/>  {  2  2  3 }<br/>}<br/>\u00a0<br/>CONSTANT: base { 3 4 5 }<br/>\u00a0<br/>TUPLE: triplets-count primitives total\u00a0;<br/>: &lt;0-triplets-count&gt; ( -- a ) 0 0 \\ triplets-count boa\u00a0;<br/>: next-triplet ( triplet T -- triplet' ) [ 1array ] [ m. ] bi* first\u00a0;<br/>: candidates-triplets ( seed -- candidates )<br/>  ${ T1 T2 T3 } [ next-triplet ] with map\u00a0;<br/>: add-triplets ( current-triples limit triplet -- stop )<br/>  sum 2dup &gt; [<br/>   /i [ + ] curry change-total<br/>   [ 1 + ] change-primitives drop t <br/>  ] [ 3drop f ] if\u00a0;<br/>: all-triplets ( current-triples limit seed -- triplets )<br/>  3dup add-triplets [ <br/>    candidates-triplets [ all-triplets ] with swapd reduce<br/>  ] [ 2drop ] if\u00a0;<br/>: count-triplets ( limit -- count )<br/>  &lt;0-triplets-count&gt; swap base all-triplets\u00a0;<br/>: pprint-triplet-count ( limit count -- )<br/>  [ total&gt;&gt; ] [ primitives&gt;&gt; ] bi <br/>  \"Up to\u00a0%d:\u00a0%d triples,\u00a0%d primitives.\\n\" printf\u00a0;<br/>: pyth ( -- )<br/>  8 [1,b] [ 10^ dup count-triplets pprint-triplet-count ] each\u00a0;</pre>"}, {"lang": "Forth", "loc": 174, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>\u00a0<br/>\\ Two methods to create Pythagorean Triples<br/>\\ this code has been tested using Win32Forth and gforth<br/>\u00a0<br/>: pythag_fibo ( f1 f0 -- )<br/>     \\ Create Pythagorean Triples from 4 element Fibonacci series<br/>     \\ this is called with the first two members of a 4 element Fibonacci series<br/>     \\ Price and Burkhart have two good articles about this method<br/>     \\ \"Pythagorean Tree: A New Species\" and<br/>     \\ \"Heron's Formula, Descartes Circles, and Pythagorean Triangles\"<br/>     \\ Horadam found out how to compute Pythagorean Triples from Fibonacci series<br/>\u00a0<br/>     \\ compute the two other members of the Fibonacci series and put them in<br/>     \\ local variables.  I was unable to do this with out using locals<br/>     2DUP + 2DUP + 2OVER 2DUP + 2DUP +<br/>     LOCALS| f3 f2 f1 f0 |<br/>\u00a0<br/>     wk_level @  9 .r f0 8 .r  f1 8 .r  f2 8 .r  f3 8 .r<br/>\u00a0<br/>     \\ this block calculates the sides of the Pythagorean Triangle using single precision<br/>     \\ f0 f3 * 14 .r                 \\ side a  (always odd)<br/>     \\ 2 f1 * f2 * 10 .r             \\ side b  (a multiple of 4)<br/>     \\ f0 f2 * f1 f3 * + 10 .r       \\ side c, the hyponenuse, (always odd)<br/>\u00a0<br/>     \\ this block calculates double precision values<br/>     f0 f3 um* 15 d.r                    \\ side a  (always odd)<br/>     2 f1 * f2 um* 15 d.r                \\ side b  (a multiple of 4)<br/>     f0 f2 um* f1 f3 um* d+ 17 d.r  cr   \\ side c, the hypotenuse, (always odd)<br/>\u00a0<br/>     MAX_LEVEL @ wk_LEVEL @ U&gt; IF   \\ TRUE if MAX_LEVEL &gt; WK_LEVEL<br/>     wk_level @ 1+ wk_level\u00a0!<br/>\u00a0<br/>     \\ this creates a teranary tree of Pythagorean triples<br/>     \\ use a two of the members of the Fibonacci series as seeds for the<br/>     \\ next level<br/>     \\ It's the same tree created by Barning or Hall using matrix multiplication<br/>     f3 f1 recurse<br/>     f3 f2 recurse<br/>     f0 f2 recurse<br/>\u00a0<br/>     wk_level @ 1- wk_level\u00a0!<br/>\u00a0<br/>     else<br/>     then<br/>\u00a0<br/>     drop drop drop drop\u00a0;<br/>\u00a0<br/>\\ implements the Fibonacci series -- Pythagorean triple<br/>\\ the stack contents sets how many iteration levels there will be<br/>: pf_test<br/>     \\ the stack contents set up the maximum level<br/>     max_level\u00a0!<br/>     0 wk_level\u00a0!<br/>     cr<br/>\u00a0<br/>     \\ call the function with the first two elements of the base Fibonacci series<br/>     1 1 pythag_fibo \u00a0;<br/>\u00a0<br/>: gcd ( a b -- gcd )<br/>  begin\u00a0?dup while tuck mod repeat\u00a0;<br/>\u00a0<br/>\\ this is the classical algorithm, known to Euclid, it is explained in many<br/>\\ books on Number Theory<br/>\\ this generates all primitive Pythagorean triples<br/>\u00a0<br/>\\ i -- inner loop index or current loop index<br/>\\ j -- outer loop index<br/>\\ stack contents is the upper limit for j<br/>\\ i and j can not both be odd<br/>\\ the gcd( i, j ) must be 1<br/>\\ j is greater than i<br/>\\ the stack contains the upper limit of the j variable<br/>: pythag_ancn  ( limit -- )<br/>     cr<br/>     1 + 2 do<br/>        i 1 and if 2 else 1 then<br/>        \\ this sets the start value of the inner loop so that<br/>        \\ if the outer loop index is odd only even inner loop indices happen<br/>        \\ if the outer loop index is even only odd inner loop indices happen<br/>        i swap do<br/>             i j gcd 1 - 0&gt; if else  \\ do this if gcd( i, j ) is 1<br/>             j 5 .r i 5 .r<br/>\u00a0<br/>             \\ j j * i i * - 12 .r   \\ a side of Pythagorean triangle (always odd)<br/>             \\ i j * 2 * 9 .r        \\ b side of Pythagorean triangle (multiple of 4)<br/>             \\ i i * j j * + 9 .r    \\ hypotenuse of Pythagorean triangle (always odd)<br/>\u00a0<br/>             \\ this block calculates double precision Pythagorean triple values<br/>             j j um* i i um* d- 15 d.r    \\ a side of Pythagorean triangle (always odd)<br/>             i j um* d2* 15 d.r           \\ b side of Pythagorean triangle (multiple of 4)<br/>             i i um* j j um* d+ 17 d.r    \\ hypotenuse of Pythagorean triangle (always odd)<br/>\u00a0<br/>             cr then 2 +loop       \\ keep i being all odd or all even<br/>     loop\u00a0;<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>Current directory: C:\\Forth ok<br/>FLOAD 'C:\\Forth\\ancien_fibo_pythag.F'  ok<br/>  ok<br/>\u00a0<br/>  ok<br/>  ok<br/>3 pf_test <br/>        0       1       1       2       3              3              4                5<br/>        1       3       1       4       5             15              8               17<br/>        2       5       1       6       7             35             12               37<br/>        3       7       1       8       9             63             16               65<br/>        3       7       6      13      19            133            156              205<br/>        3       5       6      11      17             85            132              157<br/>        2       5       4       9      13             65             72               97<br/>        3      13       4      17      21            273            136              305<br/>        3      13       9      22      31            403            396              565<br/>        3       5       9      14      23            115            252              277<br/>        2       3       4       7      11             33             56               65<br/>        3      11       4      15      19            209            120              241<br/>        3      11       7      18      25            275            252              373<br/>        3       3       7      10      17             51            140              149<br/>        1       3       2       5       7             21             20               29<br/>        2       7       2       9      11             77             36               85<br/>        3      11       2      13      15            165             52              173<br/>        3      11       9      20      29            319            360              481<br/>        3       7       9      16      25            175            288              337<br/>        2       7       5      12      17            119            120              169<br/>        3      17       5      22      27            459            220              509<br/>        3      17      12      29      41            697            696              985<br/>        3       7      12      19      31            217            456              505<br/>        2       3       5       8      13             39             80               89<br/>        3      13       5      18      23            299            180              349<br/>        3      13       8      21      29            377            336              505<br/>        3       3       8      11      19             57            176              185<br/>        1       1       2       3       5              5             12               13<br/>        2       5       2       7       9             45             28               53<br/>        3       9       2      11      13            117             44              125<br/>        3       9       7      16      23            207            224              305<br/>        3       5       7      12      19             95            168              193<br/>        2       5       3       8      11             55             48               73<br/>        3      11       3      14      17            187             84              205<br/>        3      11       8      19      27            297            304              425<br/>        3       5       8      13      21            105            208              233<br/>        2       1       3       4       7              7             24               25<br/>        3       7       3      10      13             91             60              109<br/>        3       7       4      11      15            105             88              137<br/>        3       1       4       5       9              9             40               41<br/> ok<br/>  ok<br/>10 pythag_ancn <br/>    2    1              3              4                5<br/>    3    2              5             12               13<br/>    4    1             15              8               17<br/>    4    3              7             24               25<br/>    5    2             21             20               29<br/>    5    4              9             40               41<br/>    6    1             35             12               37<br/>    6    5             11             60               61<br/>    7    2             45             28               53<br/>    7    4             33             56               65<br/>    7    6             13             84               85<br/>    8    1             63             16               65<br/>    8    3             55             48               73<br/>    8    5             39             80               89<br/>    8    7             15            112              113<br/>    9    2             77             36               85<br/>    9    4             65             72               97<br/>    9    8             17            144              145<br/>   10    1             99             20              101<br/>   10    3             91             60              109<br/>   10    7             51            140              149<br/>   10    9             19            180              181<br/> ok<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 46, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> triples<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">max_peri</span>, prim, total<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">u</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">reshape</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span>,  <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>,  <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">&amp;</span><br/>                                 <span class=\"nu0\">1</span>,  <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span>,  <span class=\"nu0\">2</span>,  <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>,  <span class=\"nu0\">2</span>,  <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">&amp;</span><br/>                                <span class=\"sy0\">-</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>,  <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>,  <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span>, <span class=\"sy0\">&amp;</span><br/>                                <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">9</span>, <span class=\"nu0\">3</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> new_tri<span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw3\">in</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">t</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, p<br/>\u00a0<br/>  p <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p &gt; max_peri<span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>\u00a0<br/>  prim <span class=\"sy0\">=</span> prim <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  total <span class=\"sy0\">=</span> total <span class=\"sy0\">+</span> max_peri <span class=\"sy0\">/</span> p<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><br/>    t<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>u<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">in</span><span class=\"br0\">)</span><br/>    t<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>u<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">:</span><span class=\"nu0\">6</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">in</span><span class=\"br0\">)</span><br/>    t<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>u<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">:</span><span class=\"nu0\">9</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">in</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> new_tri<span class=\"br0\">(</span>t<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> new_tri<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> triples<br/>\u00a0<br/><span class=\"kw1\">program</span> Pythagorean<br/>  <span class=\"kw3\">use</span> triples<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">seed</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/>  max_peri <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">do</span><br/>    total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    prim <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">call</span> new_tri<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a, i10, 2(i10, a))\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Up to\"</span>, max_peri, total, <span class=\"st0\">\" triples\"</span>,  prim, <span class=\"st0\">\" primitives\"</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>max_peri <span class=\"sy0\">==</span> <span class=\"nu0\">100000000</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>    max_peri <span class=\"sy0\">=</span> max_peri <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Pythagorean</pre>"}, {"lang": "FreeBASIC", "loc": 90, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 30-05-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' primitive pythagoras triples</span><br/><span class=\"co1\">' a = m^2 - n^2, b = 2mn, c = m^2 + n^2</span><br/><span class=\"co1\">' m, n are positive integers and m &gt; n</span><br/><span class=\"co1\">' m - n = odd and GCD(m, n) = 1</span><br/><span class=\"co1\">' p = a + b + c</span><br/>\u00a0<br/><span class=\"co1\">' max m for give perimeter</span><br/><span class=\"co1\">' p = m^2 - n^2 + 2mn + m^2 + n^2</span><br/><span class=\"co1\">' p = 2mn + m^2 + m^2 + n^2 - n^2 = 2mn + 2m^2</span><br/><span class=\"co1\">' m &gt;&gt; n and n = 1 ==&gt; p = 2m + 2m^2 = 2m(1 + m)</span><br/><span class=\"co1\">' m &gt;&gt; 1 ==&gt; p = 2m(m) = 2m^2</span><br/><span class=\"co1\">' max m for given perimeter = sqr(p / 2)</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> gcd<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> t<br/>\u00a0<br/>    <span class=\"kw1\">While</span> y<br/>        t = y<br/>        y = x <span class=\"kw1\">Mod</span> y<br/>        x = t<br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">Return</span> x<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Sub</span> pyth_trip<span class=\"br0\">(</span>limit <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, <span class=\"kw1\">ByRef</span> trip <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, <span class=\"kw1\">ByRef</span> prim <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> perimeter, lby2 = limit <span class=\"kw1\">Shr</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> m, n<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> a, b, c<br/>\u00a0<br/>    <span class=\"kw1\">For</span> m = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>limit / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>m And <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>m - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>            <span class=\"co1\">' common divisor, try next n</span><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span>gcd<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>            a = <span class=\"kw1\">CULngInt</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> * m - n * n<br/>            b = <span class=\"kw1\">CULngInt</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> * n * <span class=\"nu0\">2</span><br/>            c = <span class=\"kw1\">CULngInt</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> * m + n * n<br/>            perimeter = a + b + c<br/>            <span class=\"co1\">' perimeter &gt; limit, since n goes up try next m</span><br/>            <span class=\"kw1\">If</span> perimeter &gt;= limit <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span>, <span class=\"kw1\">For</span><br/>            prim += <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">If</span> perimeter &lt; lby2 <span class=\"kw1\">Then</span><br/>                trip += limit \\ perimeter<br/>            <span class=\"kw1\">Else</span><br/>                trip += <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span> n<br/>    <span class=\"kw1\">Next</span> m<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> str1, buffer = <span class=\"kw1\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> limit, trip, prim<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> t, t1 = <span class=\"kw1\">Timer</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"below           triples   primitive            time\"</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">For</span> x <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">12</span><br/>    t = <span class=\"kw1\">Timer</span><br/>    limit = <span class=\"nu0\">10</span> ^ x\u00a0: trip = <span class=\"nu0\">0</span>\u00a0: prim = <span class=\"nu0\">0</span><br/>    pyth_trip<span class=\"br0\">(</span>limit, trip, prim<span class=\"br0\">)</span><br/>    <span class=\"kw1\">LSet</span> buffer, <span class=\"kw1\">Str</span><span class=\"br0\">(</span>prim<span class=\"br0\">)</span>\u00a0: str1 = buffer<br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"10^##  ################   \"</span>; x; trip;<br/>    <span class=\"kw1\">If</span> x &gt; <span class=\"nu0\">7</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> str1;<br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"  ######.## sec.\"</span>; <span class=\"kw1\">Timer</span> - t<br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Print</span> str1<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span> x<br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"Total time needed #######.## sec.\"</span>; <span class=\"kw1\">Timer</span> - t1<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 25, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> total<span class=\"sy1\">,</span> prim<span class=\"sy1\">,</span> maxPeri <span class=\"kw4\">int64</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newTri<span class=\"sy1\">(</span>s0<span class=\"sy1\">,</span> s1<span class=\"sy1\">,</span> s2 <span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> p <span class=\"sy2\">:=</span> s0 <span class=\"sy3\">+</span> s1 <span class=\"sy3\">+</span> s2<span class=\"sy1\">;</span> p &lt;<span class=\"sy2\">=</span> maxPeri <span class=\"sy1\">{</span><br/>        prim<span class=\"sy2\">++</span><br/>        total <span class=\"sy2\">+=</span> maxPeri <span class=\"sy3\">/</span> p<br/>        newTri<span class=\"sy1\">(</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">,</span> <span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">,</span> <span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">)</span><br/>        newTri<span class=\"sy1\">(</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">,</span> <span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">,</span> <span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">)</span><br/>        newTri<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s0<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>s1<span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span>s2<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> maxPeri <span class=\"sy2\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span> maxPeri &lt;<span class=\"sy2\">=</span> <span class=\"nu1\">1e11</span><span class=\"sy1\">;</span> maxPeri <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>        prim <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        total <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        newTri<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Up to\u00a0%d: \u00a0%d triples,\u00a0%d primitives<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>            maxPeri<span class=\"sy1\">,</span> total<span class=\"sy1\">,</span> prim<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 36, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Triple <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> a, b, c<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> getPerimeter<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">with</span> <span class=\"br0\">{</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> c <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20boolean\"><span class=\"kw4\">boolean</span></a> isValid<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">with</span> <span class=\"br0\">{</span> a<span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span>b <span class=\"sy0\">==</span> c<span class=\"sy0\">*</span>c <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> initCounts <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>n..<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> 10g<span class=\"sy0\">**</span>it <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a> <span class=\"br0\">(</span><span class=\"br0\">[</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=Map&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map</span></a> map, <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> perimeterLimit <span class=\"sy0\">-&gt;</span><br/>        map <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>perimeterLimit<span class=\"br0\">)</span>: <span class=\"br0\">[</span>primative: 0g, total: 0g<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> findPythagTriples, findChildTriples<br/>\u00a0<br/>findPythagTriples <span class=\"sy0\">=</span> <span class=\"br0\">{</span>Triple t <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Triple<span class=\"br0\">(</span>a:<span class=\"nu0\">3</span>, b:<span class=\"nu0\">4</span>, c:<span class=\"nu0\">5</span><span class=\"br0\">)</span>, <a href=\"http://www.google.de/search?as_q=Map&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map</span></a> counts <span class=\"sy0\">=</span> initCounts<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> p <span class=\"sy0\">=</span> t.<span class=\"me1\">perimeter</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> currentCounts <span class=\"sy0\">=</span> counts.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> pLimit, tripleCounts <span class=\"sy0\">-&gt;</span> p <span class=\"sy0\">&lt;=</span> pLimit <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span> currentCounts <span class=\"sy0\">||</span> <span class=\"sy0\">!</span> t.<span class=\"me1\">valid</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">}</span><br/>    currentCounts.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> pLimit, tripleCounts <span class=\"sy0\">-&gt;</span><br/>        tripleCounts.<span class=\"me1\">with</span> <span class=\"br0\">{</span> primative <span class=\"sy0\">++;</span> total <span class=\"sy0\">+=</span> pLimit.<span class=\"me1\">intdiv</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    findChildTriples<span class=\"br0\">(</span>t, currentCounts<span class=\"br0\">)</span><br/>    counts<br/><span class=\"br0\">}</span><br/>\u00a0<br/>findChildTriples <span class=\"sy0\">=</span> <span class=\"br0\">{</span> Triple t, <a href=\"http://www.google.de/search?as_q=Map&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map</span></a> counts <span class=\"sy0\">-&gt;</span><br/>    t.<span class=\"me1\">with</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span> a <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,  <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">-</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,  <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,  <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,  <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">]</span>,<br/>            <span class=\"br0\">[</span><span class=\"sy0\">-</span>a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><span class=\"sy0\">*</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> aa, bb, cc <span class=\"sy0\">-&gt;</span><br/>            findPythagTriples<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Triple<span class=\"br0\">(</span>a:aa, b:bb, c:cc<span class=\"br0\">)</span>, counts<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 22, "block": "<pre class=\"haskell highlighted_source\">pytr <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>pytr n <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a><br/>    <span class=\"br0\">(</span>\\<span class=\"br0\">(</span><span class=\"sy0\">_,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> c <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">(</span>prim a b c<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> a <span class=\"sy0\">&lt;-</span> xs <br/>    <span class=\"sy0\">,</span> b <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> a xs <br/>    <span class=\"sy0\">,</span> c <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> b xs <br/>    <span class=\"sy0\">,</span> a <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> b <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> c <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    xs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> n<span class=\"br0\">]</span><br/>    prim a b <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:gcd\"><span class=\"kw3\">gcd</span></a> a b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>  <span class=\"st0\">\"Up to 100 there are \"</span> <span class=\"sy0\">++</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> xs<span class=\"br0\">)</span> <span class=\"sy0\">++</span><br/>  <span class=\"st0\">\" triples, of which \"</span> <span class=\"sy0\">++</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"sy0\">_,</span> <span class=\"sy0\">_,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x<span class=\"br0\">)</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" are primitive.\"</span><br/>  <span class=\"kw1\">where</span><br/>    xs <span class=\"sy0\">=</span> pytr <span class=\"nu0\">100</span></pre>"}, {"lang": "Icon and Unicon", "loc": 39, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">link</span> numbers<br/><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span>  <span class=\"co1\"># P-triples</span><br/>\u00a0<br/>   plimit <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">100</span> <span class=\"co1\"># get perimiter limit</span><br/>\u00a0<br/>   nonprimitiveS <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\"># record unique non-primitives triples</span><br/>   primitiveS <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span>     <span class=\"co1\"># record unique primitive triples</span><br/>\u00a0<br/>   u <span class=\"sy1\">:=</span>  <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span>g <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>u <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">3</span> <span class=\"sy1\">*</span> u <span class=\"sy1\">+</span> <span class=\"nu0\">2</span> <span class=\"sy1\">&lt;</span> plimit <span class=\"sy1\">/</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">every</span> v <span class=\"sy1\">:=</span> <span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>         a <span class=\"sy1\">:=</span> g <span class=\"sy1\">+</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>u<span class=\"sy1\">*</span>v<span class=\"br0\">)</span><br/>         b <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>h <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>v<span class=\"sy1\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> i<br/>         c <span class=\"sy1\">:=</span> g <span class=\"sy1\">+</span> h <span class=\"sy1\">+</span> i<br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy1\">:=</span> a <span class=\"sy1\">+</span> b <span class=\"sy1\">+</span> c<span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> plimit <span class=\"kw1\">then</span> <span class=\"kw1\">break</span> <br/>\u00a0<br/>         <span class=\"kw4\">insert</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>gcd<span class=\"br0\">(</span>u<span class=\"sy1\">,</span>v<span class=\"br0\">)</span><span class=\"sy1\">=</span><span class=\"nu0\">1</span> <span class=\"sy1\">&amp;</span> u<span class=\"sy1\">%</span>2<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> primitiveS<span class=\"br0\">)</span> <span class=\"sy1\">|</span> nonprimitiveS<span class=\"sy1\">,</span> memo<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"sy1\">,</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>         <span class=\"kw1\">every</span> k <span class=\"sy1\">:=</span> <span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span>      <span class=\"co1\"># k is for larger non-primitives          </span><br/>            <span class=\"kw1\">if</span> k<span class=\"sy1\">*</span>p <span class=\"sy1\">&gt;</span> plimit <span class=\"kw1\">then</span> <span class=\"kw1\">break</span>      <br/>            <span class=\"kw4\">insert</span><span class=\"br0\">(</span>nonprimitiveS<span class=\"sy1\">,</span>memo<span class=\"br0\">(</span>a<span class=\"sy1\">*</span>k<span class=\"sy1\">,</span>b<span class=\"sy1\">*</span>k<span class=\"sy1\">,</span>c<span class=\"sy1\">*</span>k<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>printf<span class=\"br0\">(</span><span class=\"st0\">\"Under perimiter=%d: Pythagorean Triples=%d including primitives=%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>       plimit<span class=\"sy1\">,*</span>nonprimitiveS<span class=\"sy1\">+*</span>primitiveS<span class=\"sy1\">,*</span>primitiveS<span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>gcol <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>  <span class=\"sy1\">,</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">collections</span><span class=\"br0\">)</span><br/>printf<span class=\"br0\">(</span><span class=\"st0\">\"Time=%d, Collections: total=%d string=%d block=%d\"</span><span class=\"sy1\">,&amp;</span><span class=\"kw3\">time</span><span class=\"sy1\">,</span>gcol<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>gcol<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>gcol<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">procedure</span> memo<span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">#: return a csv string of arguments in sorted order</span><br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>s <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> <span class=\"sy1\">!</span><span class=\"kw4\">sort</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">do</span> s <span class=\"sy1\">||:=</span> <span class=\"st0\">\",\"</span><br/><span class=\"kw1\">return</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 14, "block": "<pre class=\"j highlighted_source\">pytr=: <span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  r=. i. <span class=\"nu0\">0</span> <span class=\"nu0\">3</span><br/>  <span class=\"re0\">for_a.</span> <span class=\"nu0\">1</span> + i. &lt;.<span class=\"sy0\">(</span><span class=\"kw2\">y</span>-<span class=\"nu0\">1</span><span class=\"sy0\">)</span>%<span class=\"nu0\">3</span> <span class=\"kw1\">do.</span><br/>    b=. <span class=\"nu0\">1</span> + a + i. &lt;.<span class=\"sy0\">(</span><span class=\"kw2\">y</span>%<span class=\"nu0\">2</span><span class=\"sy0\">)</span>-<span class=\"nu0\">3</span>*a%<span class=\"nu0\">2</span><br/>    c=. a +&amp;.*: b<br/>    keep=. <span class=\"sy0\">(</span>c = &lt;.c<span class=\"sy0\">)</span> *. <span class=\"kw2\">y</span> &gt;: a+b+c<br/>    <span class=\"kw1\">if.</span> <span class=\"nu0\">1</span> e. keep <span class=\"kw1\">do.</span><br/>      r=. r, a,.b ,.&amp;<span class=\"sy0\">(</span>keep&amp;#<span class=\"sy0\">)</span> c <br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/>  <span class=\"sy0\">(</span>,.~ prim\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>r<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>prim=: <span class=\"nu0\">1</span> = <span class=\"nu0\">2</span> +./@{. |:</pre>"}, {"lang": "Java", "loc": 52, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">math</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PythTrip<span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> tripCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, primCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//change this to whatever perimeter limit you want;the RAM's the limit</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> periLimit <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>,<br/>                peri2 <span class=\"sy0\">=</span> periLimit.<span class=\"me1\">divide</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>                peri3 <span class=\"sy0\">=</span> periLimit.<span class=\"me1\">divide</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> a <span class=\"sy0\">=</span> ONE<span class=\"sy0\">;</span> a.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>peri3<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> a <span class=\"sy0\">=</span> a.<span class=\"me1\">add</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> aa <span class=\"sy0\">=</span> a.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> b <span class=\"sy0\">=</span> a.<span class=\"me1\">add</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    b.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>peri2<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> b <span class=\"sy0\">=</span> b.<span class=\"me1\">add</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> bb <span class=\"sy0\">=</span> b.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> ab <span class=\"sy0\">=</span> a.<span class=\"me1\">add</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> aabb <span class=\"sy0\">=</span> aa.<span class=\"me1\">add</span><span class=\"br0\">(</span>bb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> c <span class=\"sy0\">=</span> b.<span class=\"me1\">add</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        c.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>peri2<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">=</span> c.<span class=\"me1\">add</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> compare <span class=\"sy0\">=</span> aabb.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>c.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"co1\">//if a+b+c &gt; periLimit</span><br/>                    <span class=\"kw1\">if</span><span class=\"br0\">(</span>ab.<span class=\"me1\">add</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>periLimit<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"co1\">//if a^2 + b^2\u00a0!= c^2</span><br/>                    <span class=\"kw1\">if</span><span class=\"br0\">(</span>compare <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>compare <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        tripCount<span class=\"sy0\">++;</span><br/>                        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                        <span class=\"co1\">//does binary GCD under the hood</span><br/>                        <span class=\"kw1\">if</span><span class=\"br0\">(</span>a.<span class=\"me1\">gcd</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" primitive\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            primCount<span class=\"sy0\">++;</span><br/>                        <span class=\"br0\">}</span><br/>                        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Up to a perimeter of \"</span> <span class=\"sy0\">+</span> periLimit <span class=\"sy0\">+</span> <span class=\"st0\">\", there are \"</span><br/>                <span class=\"sy0\">+</span> tripCount <span class=\"sy0\">+</span> <span class=\"st0\">\" triples, of which \"</span> <span class=\"sy0\">+</span> primCount <span class=\"sy0\">+</span> <span class=\"st0\">\" are primitive.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 55, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Arguments: predicate, maximum perimeter</span><br/>    <span class=\"co1\">// pythTripleCount\u00a0:: ((Int, Int, Int) -&gt; Bool) -&gt; Int -&gt; Int</span><br/>    <span class=\"kw1\">const</span> pythTripleCount <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> maxPerim<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> xs <span class=\"sy0\">=</span> enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>maxPerim <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span>  concatMap<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span><br/>                concatMap<span class=\"br0\">(</span>y <span class=\"sy0\">=&gt;</span><br/>                concatMap<span class=\"br0\">(</span>z <span class=\"sy0\">=&gt;</span><br/>                    <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y <span class=\"sy0\">+</span> z <span class=\"sy0\">&lt;=</span> maxPerim<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                        <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">===</span> z <span class=\"sy0\">*</span> z<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                        p<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><br/>                        <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span><br/>                    <span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\">// (Empty lists disappear under concatenation)</span><br/>                xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> xs<br/>            <span class=\"br0\">)</span><br/>            .<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS --------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> concatMap <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromTo\u00a0:: Enum a =&gt; a -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> enumFromTo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> m <span class=\"sy0\">!==</span> <span class=\"st0\">'number'</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            enumFromToChar<br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> enumFromToInt<span class=\"br0\">)</span><br/>        .<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromToInt\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> enumFromToInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        n <span class=\"sy0\">&gt;=</span> m <span class=\"sy0\">?</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// gcd\u00a0:: Int -&gt; Int -&gt; Int</span><br/>    <span class=\"kw1\">const</span> gcd <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> _gcd <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>b <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> a <span class=\"sy0\">:</span> _gcd<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> _gcd<span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// MAIN ---------------------------------------------------</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">]</span><br/>        .<span class=\"me1\">map</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            maxPerimeter<span class=\"sy0\">:</span> n<span class=\"sy0\">,</span><br/>            triples<span class=\"sy0\">:</span> pythTripleCount<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            primitives<span class=\"sy0\">:</span> pythTripleCount<span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> _<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> gcd<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 38, "block": "<pre class=\"text highlighted_source\">def gcd(a; b):<br/>  def _gcd:<br/>    if .[1] == 0 then .[0]<br/>    else [.[1], .[0]\u00a0% .[1]] | _gcd<br/>    end;<br/>  [a,b] | _gcd\u00a0;<br/>\u00a0<br/># Return: [total, primitives] for pythagorean triangles having<br/># perimeter no larger than peri.<br/># The following uses Euclid's formula with the convention: m &gt; n.<br/>def count(peri):<br/>\u00a0<br/>  # The inner function can be used to count for a given value of m:<br/>  def _count:<br/>    # state [n,m,p, [total, primitives]]<br/>    .[0] as $n | .[1] as $m | .[2] as $p<br/>    | if $n &lt; $m and $p &lt;= peri then<br/>        if (gcd($m;$n) == 1)<br/>        then .[3] | [ (.[0] + ((peri/$p)|floor) ),  (.[1] + 1)]<br/>        else .[3]<br/>        end<br/>        | [$n+2, $m, $p+4*$m, .] | _count<br/>      else .<br/>      end;<br/>\u00a0<br/>  # m^2 &lt; m*(m+1) &lt;= m*(m+n) = perimeter/2<br/>  reduce range(2;  (peri/2) | sqrt + 1) as $m<br/>    ( [1, 2, 12, [0,0]];<br/>      (($m\u00a0% 2) + 1) as $n<br/>      | (2 * $m * ($m + $n) ) as $p   # a+b+c for this (m,n)<br/>      | [$n, $m, $p, .[3]] | _count<br/>    ) | .[3]\u00a0;<br/>\u00a0<br/># '''Example''':<br/>&lt;lang jq&gt;def pow(i): . as $in | reduce range(0; i) as $j (1; . * $in);<br/>\u00a0<br/>range(1; 9) | . as $i | 10|pow($i) as $i | \"\\($i):  \\(count($i) )\"<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function primitiven{T&lt;:Integer}(m::T)<br/>    1 &lt; m || return T[]<br/>    m\u00a0!= 2 || return T[1]<br/>   \u00a0!isprime(m) || return T[2:2:m-1]<br/>    rp = trues(m-1)<br/>    if isodd(m)<br/>        rp[1:2:m-1] = false<br/>    end<br/>    for p in keys(factor(m))<br/>        rp[p:p:m-1] = false<br/>    end<br/>    T[1:m-1][rp]<br/>end<br/>\u00a0<br/>function pythagoreantripcount{T&lt;:Integer}(plim::T)<br/>    primcnt = 0<br/>    fullcnt = 0<br/>    11 &lt; plim || return (primcnt, fullcnt)<br/>    for m in 2:plim<br/>        p = 2m^2<br/>        p+2m &lt;= plim || break<br/>        for n in primitiven(m)<br/>            q = p + 2m*n<br/>            q &lt;= plim || break<br/>            primcnt += 1<br/>            fullcnt += div(plim, q)<br/>        end<br/>    end<br/>    return (primcnt, fullcnt)<br/>end<br/>\u00a0<br/>println(\"Counting Pythagorian Triplets within perimeter limits:\")<br/>println(\"    Limit          All   Primitive\")<br/>for om in 1:10<br/>    (pcnt, fcnt) = pythagoreantripcount(10^om)<br/>    println(@sprintf \"    10^%02d \u00a0%11d  \u00a0%9d\" om fcnt pcnt)<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> total <span class=\"sy0\">=</span> 0L<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> prim <span class=\"sy0\">=</span> 0L<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxPeri <span class=\"sy0\">=</span> 0L<br/>\u00a0<br/>fun newTri<span class=\"br0\">(</span>s0<span class=\"sy0\">:</span> Long, s1<span class=\"sy0\">:</span> Long, s2<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> s0 + s1 + s2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;=</span> maxPeri<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        prim++<br/>        total +<span class=\"sy0\">=</span> maxPeri / p<br/>        newTri<span class=\"br0\">(</span> s0 - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s1 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s2,  <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s0 - s1 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s2,  <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s0 - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s1 + <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> s2<span class=\"br0\">)</span><br/>        newTri<span class=\"br0\">(</span> s0 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s1 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s2,  <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s0 + s1 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s2,  <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s0 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s1 + <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> s2<span class=\"br0\">)</span><br/>        newTri<span class=\"br0\">(</span>-s0 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s1 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s2, -<span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s0 + s1 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s2, -<span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s0 + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s1 + <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> s2<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    maxPeri <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>maxPeri <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        prim <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        newTri<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Up to $maxPeri: $total triples, $prim primatives\"</span><span class=\"br0\">)</span><br/>        maxPeri <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 19, "block": "<pre class=\"text highlighted_source\">// Brute Force: Too slow for large numbers<br/>define num_pythagorean_triples(max_perimeter::integer) =&gt; {<br/>   local(max_b) = (#max_perimeter / 3)*2<br/>\u00a0<br/>   return (<br/>      with a in 1 to (#max_b - 1)<br/>      sum integer(<br/>         with b in (#a + 1) to #max_b<br/>         let c = math_sqrt(#a*#a + #b*#b)<br/>         where #c == integer(#c)<br/>         where #c &gt; #b<br/>         where (#a+#b+#c) &lt;= #max_perimeter<br/>         sum 1<br/>      )<br/>   )<br/>}<br/>stdout(`Number of Pythagorean Triples in a Perimeter of 100: `)<br/>stdoutnl(num_pythagorean_triples(100))<br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 46, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">print</span> <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> power <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">6</span><br/>    perimeterLimit <span class=\"sy0\">=</span><span class=\"nu0\">10</span>^power<br/>    upperBound     <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span>perimeterLimit^<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>    primitives     <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    triples        <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    extras         <span class=\"sy0\">=</span><span class=\"nu0\">0</span>   <span class=\"co1\">'   will count the in-range multiples of any primitive</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> m <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> upperBound<br/>        <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span><span class=\"br0\">(</span> m <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">to</span> m <span class=\"sy0\">-</span><span class=\"nu0\">1</span> step <span class=\"nu0\">2</span><br/>            term1      <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span>m <span class=\"sy0\">*</span>n<br/>            term2      <span class=\"sy0\">=</span>m <span class=\"sy0\">*</span>m <span class=\"sy0\">-</span>n <span class=\"sy0\">*</span>n<br/>            term3      <span class=\"sy0\">=</span>m <span class=\"sy0\">*</span>m <span class=\"sy0\">+</span>n <span class=\"sy0\">*</span>n<br/>            perimeter  <span class=\"sy0\">=</span>term1 <span class=\"sy0\">+</span>term2 <span class=\"sy0\">+</span>term3<br/>\u00a0<br/>            <span class=\"kw1\">if</span> perimeter <span class=\"sy0\">&lt;=</span>perimeterLimit <span class=\"kw1\">then</span> triples <span class=\"sy0\">=</span>triples <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\u00a0<br/>            a     <span class=\"sy0\">=</span>term1<br/>            b     <span class=\"sy0\">=</span>term2<br/>\u00a0<br/>            <span class=\"kw1\">do</span><br/>                r <span class=\"sy0\">=</span> a <span class=\"kw1\">mod</span> b<br/>                a <span class=\"sy0\">=</span>b<br/>                b <span class=\"sy0\">=</span>r<br/>            <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> r <span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> a <span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span> perimeter <span class=\"sy0\">&lt;=</span>perimeterLimit<span class=\"br0\">)</span> <span class=\"kw1\">then</span>                       <span class=\"co1\">'we've found a primitive triple if a =1, since hcf =1. And it is inside perimeter range. Save it in an array</span><br/>                primitives <span class=\"sy0\">=</span>primitives <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>                <span class=\"kw1\">if</span> term1 <span class=\"sy0\">&gt;</span>term2 <span class=\"kw1\">then</span> temp <span class=\"sy0\">=</span>term1<span class=\"sy0\">:</span> term1 <span class=\"sy0\">=</span>term2<span class=\"sy0\">:</span> term2 <span class=\"sy0\">=</span>temp         <span class=\"co1\">'swap so in increasing order of side length</span><br/>                nEx <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> perimeterLimit <span class=\"sy0\">/</span>perimeter<span class=\"br0\">)</span>                     <span class=\"co1\">'We have the primitive &amp; removed any multiples. Now calculate ALL the multiples in range.</span><br/>                extras <span class=\"sy0\">=</span>extras <span class=\"sy0\">+</span>nEx<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>            <span class=\"kw1\">scan</span><br/>        <span class=\"kw1\">next</span> n<br/>    <span class=\"kw1\">next</span> m<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"  Number of primitives having perimeter below \"</span>; <span class=\"nu0\">10</span>^power<span class=\"sy0\">,</span> <span class=\"st0\">\" was \"</span>; primitives<span class=\"sy0\">,</span> <span class=\"st0\">\" &amp; \"</span>; extras<span class=\"sy0\">,</span> <span class=\"st0\">\" non-primitive triples.\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> power<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"End\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">pythag[n_]\u00a0:= Block[{soln = Solve[{a^2 + b^2 == c^2, a + b + c &lt;= n, 0 &lt; a &lt; b &lt; c}, {a, b, c}, Integers]},<br/>        {Length[soln], Count[GCD[a, b] == GCD[b, c] == GCD[c, a] == 1 /. soln, True]}<br/>      ]</pre>"}, {"lang": "MATLAB / Octave", "loc": 16, "block": "<pre class=\"matlab highlighted_source\">N=  <span class=\"nu0\">100</span>;<br/>  a = <span class=\"nu0\">1</span>:N;<br/>  b = a<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ones.html\"><span class=\"kw2\">ones</span></a><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,:<span class=\"br0\">)</span>.^<span class=\"nu0\">2</span>;<br/>  b = b+b';<br/>  b = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>b<span class=\"br0\">)</span>;  <span class=\"br0\">[</span>y,x<span class=\"br0\">]</span>=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>b==<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fix.html\"><span class=\"kw2\">fix</span></a><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">% test </span><br/>  <span class=\"co1\">% here some alternative tests</span><br/>  <span class=\"co1\">% b = b.^(1/k); [y,x]=find(b==fix(b));\u00a0% test 2</span><br/>  <span class=\"co1\">% [y,x]=find(b==(fix(b.^(1/k)).^k)); \u00a0% test 3</span><br/>  <span class=\"co1\">% b=b.^(1/k); [y,x]=find(abs(b - round(b)) &lt;= 4*eps*b);</span><br/>\u00a0<br/>  z  = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>x.^<span class=\"nu0\">2</span>+y.^<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>  ix = <span class=\"br0\">(</span>z+x+y&lt;<span class=\"nu0\">100</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>x &lt; y<span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>y &lt; z<span class=\"br0\">)</span>; <br/>  p  = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/gcd.html\"><span class=\"kw2\">gcd</span></a><span class=\"br0\">(</span>x<span class=\"br0\">(</span>ix<span class=\"br0\">)</span>,y<span class=\"br0\">(</span>ix<span class=\"br0\">)</span><span class=\"br0\">)</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"co1\">% find primitive triples</span><br/>\u00a0<br/>  printf<span class=\"br0\">(</span><span class=\"co2\">'There are\u00a0%i Pythagorean Triples and\u00a0%i primitive triples with a perimeter smaller than\u00a0%i.\\n'</span>,<span class=\"sy0\">...</span><br/>         <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>ix<span class=\"br0\">)</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span>, N<span class=\"br0\">)</span>;  </pre>"}, {"lang": "Modula-3", "loc": 31, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> PyTriple64 <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> tcnt<span class=\"sy0\">,</span> pcnt<span class=\"sy0\">,</span> max<span class=\"sy0\">,</span> i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> NewTriangle<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; <span class=\"kw1\">VAR</span> tcount<span class=\"sy0\">,</span> pcount<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span> perim <span class=\"sy0\">:=</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> c;      <br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> perim &lt;<span class=\"sy0\">=</span> max <span class=\"kw1\">THEN</span><br/>      pcount <span class=\"sy0\">:=</span> pcount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>      tcount <span class=\"sy0\">:=</span> tcount <span class=\"sy0\">+</span> max <span class=\"kw1\">DIV</span> perim;<br/>      NewTriangle<span class=\"br0\">(</span>a<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">-</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"sy0\">,</span> tcount<span class=\"sy0\">,</span> pcount<span class=\"br0\">)</span>;<br/>      NewTriangle<span class=\"br0\">(</span>a<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"sy0\">,</span> tcount<span class=\"sy0\">,</span> pcount<span class=\"br0\">)</span>;<br/>      NewTriangle<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c<span class=\"sy0\">-</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> tcount<span class=\"sy0\">,</span> pcount<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> NewTriangle;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  i <span class=\"sy0\">:=</span> <span class=\"nu0\">100</span>;<br/>\u00a0<br/>  <span class=\"kw1\">REPEAT</span><br/>    max <span class=\"sy0\">:=</span> i;<br/>    tcnt <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    pcnt <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    NewTriangle<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> tcnt<span class=\"sy0\">,</span> pcnt<span class=\"br0\">)</span>;<br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> &amp; <span class=\"st0\">\": \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>tcnt<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" Triples, \"</span> &amp;<br/>      Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>pcnt<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" Primitives<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>    i <span class=\"sy0\">:=</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">10</span>;<br/>  <span class=\"kw1\">UNTIL</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">10000000</span>;<br/><span class=\"kw1\">END</span> PyTriple64.</pre>"}, {"lang": "Nim", "loc": 25, "block": "<pre class=\"text highlighted_source\">const u = [[ 1, -2,  2,  2, -1,  2,  2, -2,  3],<br/>           [ 1,  2,  2,  2,  1,  2,  2,  2,  3],<br/>           [-1,  2,  2, -2,  1,  2, -2,  2,  3]]<br/>\u00a0<br/>var<br/>  total, prim = 0<br/>  maxPeri = 10<br/>\u00a0<br/>proc newTri(ins: array[0..2, int]) =<br/>  var p = ins[0] + ins[1] + ins[2]<br/>  if p &gt; maxPeri: return<br/>  inc(prim)<br/>  total += maxPeri div p<br/>\u00a0<br/>  for i in 0..2:<br/>    newTri([u[i][0] * ins[0] + u[i][1] * ins[1] + u[i][2] * ins[2],<br/>            u[i][3] * ins[0] + u[i][4] * ins[1] + u[i][5] * ins[2],<br/>            u[i][6] * ins[0] + u[i][7] * ins[1] + u[i][8] * ins[2]])<br/>\u00a0<br/>while maxPeri &lt;= 100_000_000:<br/>  total = 0<br/>  prim = 0<br/>  newTri([3, 4, 5])<br/>  echo \"Up to \", maxPeri, \": \", total, \" triples, \", prim, \" primitives\"<br/>  maxPeri *= 10</pre>"}, {"lang": "OCaml", "loc": 33, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> isqrt n <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> iter t <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> t<span class=\"sy0\">*</span>t <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> d<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&lt;</span> t<span class=\"sy0\">+</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">(* t*t &lt;= n &lt; (t+1)*(t+1) *)</span><br/>      <span class=\"kw1\">then</span> t <span class=\"kw1\">else</span> iter <span class=\"br0\">(</span><span class=\"br0\">(</span>t<span class=\"sy0\">+</span><span class=\"br0\">(</span>n<span class=\"sy0\">/</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">in</span> iter <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gcd a b <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> t <span class=\"sy0\">=</span> a <span class=\"kw1\">mod</span> b <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">if</span> t <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> b <span class=\"kw1\">else</span> gcd b t<br/>\u00a0<br/><span class=\"kw1\">let</span> coprime a b <span class=\"sy0\">=</span> gcd a b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">let</span> num_to ms <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> ctr <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> prim_ctr <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> max_m <span class=\"sy0\">=</span> isqrt <span class=\"br0\">(</span>ms<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">for</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> max_m <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>m<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>         <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> m<span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>         <span class=\"kw1\">if</span> coprime m n <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>m<span class=\"sy0\">*</span><span class=\"br0\">(</span>m<span class=\"sy0\">+</span>n<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>            <span class=\"kw1\">if</span> s <span class=\"sy0\">&lt;=</span> ms <span class=\"kw1\">then</span><br/>               <span class=\"br0\">(</span>ctr <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>ctr <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ms<span class=\"sy0\">/</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">incr</span> prim_ctr<span class=\"br0\">)</span><br/>      <span class=\"kw1\">done</span><br/>   <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">!</span>ctr, <span class=\"sy0\">!</span>prim_ctr<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> show i <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s, p <span class=\"sy0\">=</span> num_to i <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"For perimeters up to\u00a0%d there are\u00a0%d total and\u00a0%d primitive\\n%!\"</span> i s p<span class=\"sy0\">;;</span><br/>\u00a0<br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter show <span class=\"br0\">[</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> <span class=\"nu0\">100000</span><span class=\"sy0\">;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> <span class=\"nu0\">10000000</span><span class=\"sy0\">;</span> <span class=\"nu0\">100000000</span> <span class=\"br0\">]</span></pre>"}, {"lang": "PARI/GP", "loc": 15, "block": "<pre class=\"parigp highlighted_source\">do<span class=\"br0\">(</span>lim<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>prim<span class=\"sy0\">,</span>total<span class=\"sy0\">,</span>P<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  lim<span class=\"sy0\">\\=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>m<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">sqrtint</span><span class=\"br0\">(</span>lim<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">+</span>m<span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">min</span><span class=\"br0\">(</span><span class=\"kw1\">sqrtint</span><span class=\"br0\">(</span>lim<span class=\"sy0\">-</span>m<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>m<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><br/>      P<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span>m<span class=\"sy0\">*</span><span class=\"br0\">(</span>m<span class=\"sy0\">+</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">gcd</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu1\">1</span> <span class=\"sy0\">&amp;&amp;</span> P<span class=\"sy0\">&lt;=</span>lim<span class=\"sy0\">,</span><br/>        prim<span class=\"sy0\">++;</span><br/>        total<span class=\"sy0\">+=</span>lim<span class=\"sy0\">\\</span>P<br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span>prim<span class=\"sy0\">,</span>total<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>do<span class=\"br0\">(</span><span class=\"nu1\">100</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 31, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> PythagoreanTriples <span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  total<span class=\"sy1\">,</span> prim<span class=\"sy1\">,</span> maxPeri<span class=\"sy1\">:</span> int64<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> newTri<span class=\"br0\">(</span>s0<span class=\"sy1\">,</span> s1<span class=\"sy1\">,</span> s2<span class=\"sy1\">:</span> int64<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    p<span class=\"sy1\">:</span> int64<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s0 <span class=\"sy3\">+</span> s1 <span class=\"sy3\">+</span> s2<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> p &lt;<span class=\"sy3\">=</span> maxPeri <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      inc<span class=\"br0\">(</span>prim<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      total <span class=\"sy1\">:</span><span class=\"sy3\">=</span> total <span class=\"sy3\">+</span> maxPeri <span class=\"kw1\">div</span> p<span class=\"sy1\">;</span><br/>      newTri<span class=\"br0\">(</span> s0 <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"sy3\">-</span>s1<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span><span class=\"sy1\">,</span>  <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span> s0<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span> <span class=\"sy3\">-</span> s1<span class=\"sy1\">,</span>  <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span> s0<span class=\"sy3\">-</span>s1<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span> <span class=\"sy3\">+</span> s2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      newTri<span class=\"br0\">(</span> s0 <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span> s1<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span><span class=\"sy1\">,</span>  <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span> s0<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span> <span class=\"sy3\">+</span> s1<span class=\"sy1\">,</span>  <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span> s0<span class=\"sy3\">+</span>s1<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span> <span class=\"sy3\">+</span> s2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      newTri<span class=\"br0\">(</span><span class=\"sy3\">-</span>s0 <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span> s1<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span><span class=\"sy1\">,</span>  <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"sy3\">-</span>s0<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span> <span class=\"sy3\">+</span> s1<span class=\"sy1\">,</span>  <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"sy3\">-</span>s0<span class=\"sy3\">+</span>s1<span class=\"sy3\">+</span>s2<span class=\"br0\">)</span> <span class=\"sy3\">+</span> s2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  maxPeri <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> maxPeri &lt;<span class=\"sy3\">=</span> 1e10 <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    prim <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    total <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    newTri<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Up to '</span><span class=\"sy1\">,</span> maxPeri<span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> total<span class=\"sy1\">,</span> <span class=\"st0\">' triples, '</span><span class=\"sy1\">,</span> prim<span class=\"sy1\">,</span> <span class=\"st0\">' primitives.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    maxPeri <span class=\"sy1\">:</span><span class=\"sy3\">=</span> maxPeri <span class=\"sy3\">*</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 27, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> gcd <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$m</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tripel <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$pmax</span>  <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$prim</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$nmax</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$pmax</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span><span class=\"sy0\">&lt;=</span><span class=\"re0\">$nmax</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span><span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">$m</span><span class=\"sy0\">=</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"re0\">*$m</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">+</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$pmax</span><span class=\"sy0\">;</span> <span class=\"re0\">$m</span><span class=\"sy0\">+=</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"nu0\">1</span><span class=\"sy0\">==</span>gcd<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$prim</span><span class=\"sy0\">++;</span><br/>            <span class=\"re0\">$count</span> <span class=\"sy0\">+=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <span class=\"re0\">$pmax</span><span class=\"sy0\">/</span><span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Max. perimeter:\u00a0%d, Total:\u00a0%d, Primitive:\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$pmax</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"sy0\">,</span> <span class=\"re0\">$prim</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>tripel <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> limit <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"sy0\">^</span>limit<span class=\"br0\">]</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>\\a<span class=\"sy0\">,</span> \\b<span class=\"sy0\">,</span> \\c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span> b <span class=\"sy0\">&lt;</span> c <span class=\"kw1\">and</span> a<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> b<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> c<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">atom total, prim, maxPeri = 10<br/>\u00a0<br/>procedure tri(atom s0, s1, s2)<br/>atom p = s0 + s1 + s2<br/>    if p&lt;=maxPeri then<br/>        prim += 1<br/>        total += floor(maxPeri/p)<br/>        tri( s0+2*(-s1+s2), 2*( s0+s2)-s1, 2*( s0-s1+s2)+s2);<br/>        tri( s0+2*( s1+s2), 2*( s0+s2)+s1, 2*( s0+s1+s2)+s2);<br/>        tri(-s0+2*( s1+s2), 2*(-s0+s2)+s1, 2*(-s0+s1+s2)+s2);<br/>    end if<br/>end procedure<br/>\u00a0<br/>while maxPeri&lt;=1e8 do<br/>    prim\u00a0:= 0;<br/>    total\u00a0:= 0;<br/>    tri(3, 4, 5);<br/>    printf(1,\"Up to\u00a0%d:\u00a0%d triples,\u00a0%d primitives.\\n\", {maxPeri,total,prim})<br/>    maxPeri *= 10;<br/>end while</pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(for (Max 10  (&gt;= 100000000 Max)  (* Max 10))<br/>   (let (Total 0  Prim 0  In (3 4 5))<br/>      (recur (In)<br/>         (let P (apply + In)<br/>            (when (&gt;= Max P)<br/>               (inc 'Prim)<br/>               (inc 'Total (/ Max P))<br/>               (for Row<br/>                  (quote<br/>                     (( 1 -2 2) ( 2 -1 2) ( 2 -2 3))<br/>                     (( 1  2 2) ( 2  1 2) ( 2  2 3))<br/>                     ((-1  2 2) (-2  1 2) (-2  2 3)) )<br/>                  (recurse<br/>                     (mapcar '((U) (sum * U In)) Row) ) ) ) ) )<br/>      (prinl \"Up to \" Max \": \" Total \" triples, \" Prim \" primitives.\") ) )</pre>"}, {"lang": "PL/I", "loc": 90, "block": "<pre class=\"text highlighted_source\">*process source attributes xref or(!);<br/> /*********************************************************************<br/> * REXX pgm counts number of  Pythagorean triples<br/> * that exist given a max perimeter of  N,<br/> * and also counts how many of them are primatives.<br/> * 05.05.2013 Walter Pachl  translated from REXX version 2<br/> *********************************************************************/<br/> pyt: Proc Options(main);<br/> Dcl sysprint Print;<br/> Dcl (addr,mod,right) Builtin;<br/> Dcl memn Bin Fixed(31) Init(0);<br/> Dcl mabca(300) Char(12);<br/> Dcl 1 mabc,<br/>      2 ma Dec fixed(7),<br/>      2 mb Dec fixed(7),<br/>      2 mc Dec fixed(7);<br/> Dcl mabce Char(12) Based(addr(mabc));<br/> Dcl 1 abc,<br/>      2 a Dec fixed(7),<br/>      2 b Dec fixed(7),<br/>      2 c Dec fixed(7);<br/> Dcl abce Char(12) Based(addr(abc));<br/> Dcl (prims,trips,m,n,aa,aabb,cc,aeven,ab) Dec Fixed(7);<br/> mabca='';<br/> trips=0;<br/> prims=0;<br/> n=100;<br/> la:<br/> Do a=3 To n/3;<br/>    aa=a*a;                       /* limit side to 1/3 of perimeter.*/<br/>    aeven=mod(a,2)=0;<br/> lb:Do b=a+1 By 1+aeven;          /* triangle can't be isosceles.   */<br/>      ab=a+b;                     /* compute partial perimeter.     */<br/>      If ab&gt;=n Then<br/>        Iterate la;               /* a+b&gt;perimeter?  Try different A*/<br/>      aabb=aa+b*b;                /* compute sum of  a\u00b2 + b\u00b2 (cheat)*/<br/>      Do c=b+1 By 1;<br/>        cc=c*c;                   /* 3rd side:   also compute  c\u00b2   */<br/>        If aeven Then<br/>          If mod(c,2)=0 Then<br/>            Iterate;<br/>        If ab+c&gt;n Then<br/>          Iterate la;              /* a+b+c &gt; perimeter?  Try diff A.*/<br/>        If cc&gt;aabb Then<br/>          Iterate lb;              /* c\u00b2 &gt;  a\u00b2+b\u00b2\u00a0?  Try different B.*/<br/>        If cc^=aabb Then<br/>          Iterate;                 /* c\u00b2 \u00ac= a\u00b2+b\u00b2\u00a0?  Try different C.*/<br/>        If mema(abce) Then<br/>          Iterate;<br/>        trips=trips+1;             /* eureka.                        */<br/>        prims=prims+1;             /* count this primitive triple.   */<br/>        Put Edit(a,b,c,'   ',right(a**2+b**2,5),right(c**2,5),a+b+c)<br/>                (Skip,f(4),2(f(5)),a,2(f(6)),f(9));<br/>        Do m=2 By 1;<br/>          ma=a*m;<br/>          mb=b*m;<br/>          mc=c*m;                  /* gen non-primitives.            */<br/>          If ma+mb+mc&gt;n Then<br/>            Leave;<br/>                                   /* is this multiple a triple\u00a0?    */<br/>          trips=trips+1;           /* yuppers, then we found another.*/<br/>          If mod(m,2)=1 Then       /* store as even multiple.        */<br/>            call mems(mabce);<br/>          Put Edit(ma,mb,mc,' * ',<br/>                          right(ma**2+mb**2,5),right(mc**2,5),ma+mb+mc)<br/>                (Skip,f(4),2(f(5)),a,2(f(6)),f(9));<br/>          End;                     /* m                              */<br/>        End;                       /* c                              */<br/>      End;                         /* b                              */<br/>    End;                           /* a                              */<br/>  Put Edit('max perimeter = ',n,   /* show a single line of output.  */<br/>           'Pythagorean triples =',trips,<br/>           'primitives =',prims)<br/>          (Skip,a,f(5),2(x(9),a,f(4)));<br/>\u00a0<br/> mems: Proc(e);<br/> Dcl e Char(12);<br/> memn+=1;<br/> mabca(memn)=e;<br/> End;<br/>\u00a0<br/> mema: Proc(e) Returns(bit(1));<br/> Dcl e Char(12);<br/> Do memi=1 To memn;<br/>   If mabca(memi)=e Then Return('1'b);<br/>   End;<br/> Return('0'b);<br/> End;<br/>\u00a0<br/> End;</pre>"}, {"lang": "PowerShell", "loc": 52, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> triples<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$p</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># ai + bi + ci = pi &lt;= p</span><br/>        <span class=\"co1\"># ai &lt; bi &lt; ci --&gt; 3ai &lt; pi &lt;= p and ai + 2bi &lt; pi &lt;= p</span><br/>        <span class=\"re0\">$pa</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$pa</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$ai</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>            <span class=\"re0\">$pb</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">-</span><span class=\"re0\">$ai</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"re0\">$ai</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"re0\">$pb</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$bi</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>                <span class=\"re0\">$pc</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span><span class=\"sy0\">-</span><span class=\"re0\">$ai</span><span class=\"sy0\">-</span><span class=\"re0\">$bi</span><br/>                <span class=\"br0\">(</span><span class=\"re0\">$bi</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"re0\">$pc</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$ci</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>                    <span class=\"re0\">$pi</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ai</span> <span class=\"sy0\">+</span> <span class=\"re0\">$bi</span> <span class=\"sy0\">+</span> <span class=\"re0\">$ci</span><br/>                    <span class=\"re0\">$ci</span><span class=\"sy0\">*</span><span class=\"re0\">$ci</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$ai</span><span class=\"sy0\">*</span><span class=\"re0\">$ai</span> <span class=\"sy0\">+</span> <span class=\"re0\">$bi</span><span class=\"sy0\">*</span><span class=\"re0\">$bi</span><br/>                 <span class=\"br0\">}</span> <span class=\"sy0\">|</span> <br/>                <span class=\"kw3\">foreach</span> <span class=\"br0\">{</span> <br/>                    <span class=\"br0\">[</span>pscustomobject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                        a <span class=\"sy0\">=</span> <span class=\"st0\">\"$ai\"</span><br/>                        b <span class=\"sy0\">=</span> <span class=\"st0\">\"$bi\"</span><br/>                        c <span class=\"sy0\">=</span> <span class=\"st0\">\"$ci\"</span><br/>                        p <span class=\"sy0\">=</span> <span class=\"st0\">\"$pi\"</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Write-Error</span> <span class=\"st0\">\"$p is not greater than 4\"</span><br/>    <span class=\"br0\">}</span>   <br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> gcd <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">function</span> pgcd <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$m</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><span class=\"br0\">{</span>pgcd <span class=\"re0\">$n</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">%</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span> <span class=\"br0\">{</span>pgcd <span class=\"re0\">$m</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>pgcd <span class=\"re0\">$n</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$triples</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>triples <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re0\">$coprime</span> <span class=\"sy0\">=</span> <span class=\"re0\">$triples</span> <span class=\"sy0\">|</span> <br/><span class=\"kw3\">where</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"br0\">(</span>gcd <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.a <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.b<span class=\"br0\">)</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>gcd <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.a <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.c<span class=\"br0\">)</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">-and</span>  <span class=\"br0\">(</span><span class=\"br0\">(</span>gcd <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.b <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.c<span class=\"br0\">)</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"st0\">\"There are $(($triples).Count) Pythagorean triples with perimeter no larger than 100<br/> and $(($coprime).Count) of them are coprime.\"</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 70, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i ConsoleWrite<span class=\"br0\">(</span>t.s<span class=\"br0\">)</span>  <span class=\"co1\">; compile using /CONSOLE option</span><br/>        <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">PrintN</span> <span class=\"br0\">(</span>t.s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i StdOut<span class=\"br0\">(</span>t.s<span class=\"br0\">)</span>  <span class=\"co1\">; compile using /CONSOLE option</span><br/>        <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">Print</span><span class=\"br0\">(</span>t.s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i gcDiv<span class=\"br0\">(</span>n,m<span class=\"br0\">)</span> <span class=\"co1\">; greatest common divisor</span><br/><span class=\"kw1\">if</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span>:<span class=\"kw1\">ProcedureReturn</span> m:<span class=\"kw1\">endif</span><br/><span class=\"kw1\">while</span> m <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> m<br/>    n <span class=\"sy0\">-</span> m<br/>  <span class=\"kw1\">else</span><br/>    m <span class=\"sy0\">-</span> n<br/>  <span class=\"kw1\">endif</span><br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">ProcedureReturn</span> n<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>st<span class=\"sy0\">=</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>nmax      <span class=\"sy0\">=</span><span class=\"nu0\">10000</span><br/>power     <span class=\"sy0\">=</span><span class=\"nu0\">8</span><br/>\u00a0<br/><span class=\"kw1\">dim</span> primitiveA<span class=\"br0\">(</span>power<span class=\"br0\">)</span><br/><span class=\"kw1\">dim</span> alltripleA<span class=\"br0\">(</span>power<span class=\"br0\">)</span><br/><span class=\"kw1\">dim</span> pmaxA<span class=\"br0\">(</span>power<span class=\"br0\">)</span><br/>\u00a0<br/>x<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> power<br/>  x<span class=\"sy0\">*</span><span class=\"nu0\">10</span>:pmaxA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">next</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nmax<br/>  <span class=\"kw1\">for</span> m<span class=\"sy0\">=</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>nmax<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">step</span> <span class=\"nu0\">2</span> <span class=\"co1\">; assure m-n is odd</span><br/>    d<span class=\"sy0\">=</span>gcDiv<span class=\"br0\">(</span>n,m<span class=\"br0\">)</span><br/>    p<span class=\"sy0\">=</span>m<span class=\"sy0\">*</span>m<span class=\"sy0\">+</span>m<span class=\"sy0\">*</span>n<br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> power<br/>      <span class=\"kw1\">if</span> p<span class=\"sy0\">&lt;=</span>pmaxA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> d <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        primitiveA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>        <span class=\"co1\">; right here we have the primitive perimeter \"seed\" 'p'</span><br/>        k<span class=\"sy0\">=</span><span class=\"nu0\">1</span>:q<span class=\"sy0\">=</span>p<span class=\"sy0\">*</span>k              <span class=\"co1\">; set k to one to include p\u00a0: use q as the 'p*k'</span><br/>          <span class=\"kw1\">while</span> q<span class=\"sy0\">&lt;=</span>pmaxA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>          alltripleA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>      <span class=\"co1\">; accumulate multiples of this perimeter while q &lt;= pmaxA(i)</span><br/>          k<span class=\"sy0\">+</span><span class=\"nu0\">1</span>:q<span class=\"sy0\">=</span>p<span class=\"sy0\">*</span>k<br/>          <span class=\"kw1\">wend</span><br/>        <span class=\"kw1\">endif</span><br/>      <span class=\"kw1\">endif</span><br/>    <span class=\"kw1\">next</span><br/>  <span class=\"kw1\">next</span><br/><span class=\"kw1\">next</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> power<br/>  t.s<span class=\"sy0\">=</span><span class=\"st0\">\"Up to \"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>pmaxA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\": \"</span><br/>  t.s<span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>alltripleA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" triples, \"</span><br/>  t.s<span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>primitiveA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" primitives.\"</span><br/>  ConsoleWrite<span class=\"br0\">(</span>t.s<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/>ConsoleWrite<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>et<span class=\"sy0\">=</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>st:ConsoleWrite<span class=\"br0\">(</span><span class=\"st0\">\"Elapsed time = \"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>et<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" milliseconds\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 57, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> fractions <span class=\"kw1\">import</span> gcd<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> pt1<span class=\"br0\">(</span>maxperimeter<span class=\"sy0\">=</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<br/># Naive method<br/>    '''</span><br/>    trips <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> maxperimeter<span class=\"br0\">)</span>:<br/>        aa <span class=\"sy0\">=</span> a*a<br/>        <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> maxperimeter-a+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            bb <span class=\"sy0\">=</span> b*b<br/>            <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> maxperimeter-b-a+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>                cc <span class=\"sy0\">=</span> c*c<br/>                <span class=\"kw1\">if</span> a+b+c <span class=\"sy0\">&gt;</span> maxperimeter <span class=\"kw1\">or</span> cc <span class=\"sy0\">&gt;</span> aa + bb: <span class=\"kw1\">break</span><br/>                <span class=\"kw1\">if</span> aa + bb <span class=\"sy0\">==</span> cc:<br/>                    trips.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> trips<br/>\u00a0<br/><span class=\"kw1\">def</span> pytrip<span class=\"br0\">(</span>trip<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>perim<span class=\"sy0\">=</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> prim<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    a0<span class=\"sy0\">,</span> b0<span class=\"sy0\">,</span> c0 <span class=\"sy0\">=</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>trip<span class=\"br0\">)</span><br/>    t<span class=\"sy0\">,</span> firstprim <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> prim<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> a + b + c <span class=\"sy0\">&lt;=</span> perim:<br/>        t.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> firstprim<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> firstprim <span class=\"sy0\">=</span> a+a0<span class=\"sy0\">,</span> b+b0<span class=\"sy0\">,</span> c+c0<span class=\"sy0\">,</span> <span class=\"kw2\">False</span><br/>    <span class=\"co1\">#</span><br/>    t2 <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> firstprim <span class=\"kw1\">in</span> t:<br/>        a2<span class=\"sy0\">,</span> a5<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> b5<span class=\"sy0\">,</span> c2<span class=\"sy0\">,</span> c3<span class=\"sy0\">,</span> c7 <span class=\"sy0\">=</span> a*<span class=\"nu0\">2</span><span class=\"sy0\">,</span> a*<span class=\"nu0\">5</span><span class=\"sy0\">,</span> b*<span class=\"nu0\">2</span><span class=\"sy0\">,</span> b*<span class=\"nu0\">5</span><span class=\"sy0\">,</span> c*<span class=\"nu0\">2</span><span class=\"sy0\">,</span> c*<span class=\"nu0\">3</span><span class=\"sy0\">,</span> c*<span class=\"nu0\">7</span><br/>        <span class=\"kw1\">if</span>  a5 - b5 + c7 <span class=\"sy0\">&lt;=</span> perim:<br/>            t2 |<span class=\"sy0\">=</span> pytrip<span class=\"br0\">(</span><span class=\"br0\">(</span> a - b2 + c2<span class=\"sy0\">,</span>  a2 - b + c2<span class=\"sy0\">,</span>  a2 - b2 + c3<span class=\"br0\">)</span><span class=\"sy0\">,</span> perim<span class=\"sy0\">,</span> firstprim<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span>  a5 + b5 + c7 <span class=\"sy0\">&lt;=</span> perim:<br/>            t2 |<span class=\"sy0\">=</span> pytrip<span class=\"br0\">(</span><span class=\"br0\">(</span> a + b2 + c2<span class=\"sy0\">,</span>  a2 + b + c2<span class=\"sy0\">,</span>  a2 + b2 + c3<span class=\"br0\">)</span><span class=\"sy0\">,</span> perim<span class=\"sy0\">,</span> firstprim<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> -a5 + b5 + c7 <span class=\"sy0\">&lt;=</span> perim:<br/>            t2 |<span class=\"sy0\">=</span> pytrip<span class=\"br0\">(</span><span class=\"br0\">(</span>-a + b2 + c2<span class=\"sy0\">,</span> -a2 + b + c2<span class=\"sy0\">,</span> -a2 + b2 + c3<span class=\"br0\">)</span><span class=\"sy0\">,</span> perim<span class=\"sy0\">,</span> firstprim<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> t | t2<br/>\u00a0<br/><span class=\"kw1\">def</span> pt2<span class=\"br0\">(</span>maxperimeter<span class=\"sy0\">=</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<br/># Parent/child relationship method:<br/># http://en.wikipedia.org/wiki/Formulas_for_generating_Pythagorean_triples#XI.<br/>    '''</span><br/>    trips <span class=\"sy0\">=</span> pytrip<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> maxperimeter<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> trips<br/>\u00a0<br/><span class=\"kw1\">def</span> printit<span class=\"br0\">(</span>maxperimeter<span class=\"sy0\">=</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> pt<span class=\"sy0\">=</span>pt1<span class=\"br0\">)</span>:<br/>    trips <span class=\"sy0\">=</span> pt<span class=\"br0\">(</span>maxperimeter<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"  Up to a perimeter of\u00a0%i there are\u00a0%i triples, of which\u00a0%i are primitive\"</span><br/>         \u00a0% <span class=\"br0\">(</span>maxperimeter<span class=\"sy0\">,</span><br/>             <span class=\"kw2\">len</span><span class=\"br0\">(</span>trips<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>             <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"br0\">[</span>prim <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>prim <span class=\"kw1\">in</span> trips <span class=\"kw1\">if</span> prim<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> algo<span class=\"sy0\">,</span> mn<span class=\"sy0\">,</span> mx <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pt1<span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"sy0\">,</span> <span class=\"nu0\">2500</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>pt2<span class=\"sy0\">,</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"nu0\">20000</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>algo.__doc__<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> maxperimeter <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>mn<span class=\"sy0\">,</span> mx+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> mn<span class=\"br0\">)</span>:<br/>        printit<span class=\"br0\">(</span>maxperimeter<span class=\"sy0\">,</span> algo<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 45, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>#| Euclid's enumeration formula and counting is fast enough for extra credit.<br/>\u00a0<br/> For maximum perimeter P\u2080, the primitive triples are enumerated by n,m with:<br/>\u00a0<br/>   1 \u2264 n &lt; m<br/>   perimeter P(n, m) \u2264 P\u2080 where P(n, m) = (m\u00b2 - n\u00b2) + 2mn + (m\u00b2 + n\u00b2) = 2m(m+n)<br/>   m and n of different parity and coprime.<br/>\u00a0<br/> Since n &lt; m, a simple close non-tight bound on n is P(n, n) &lt; P\u2080.<br/> For each of these the exact set of m's can be enumerated.<br/>\u00a0<br/> Each primitive triple with perimeter p represents one triple for each kp \u2264 P\u2080,<br/>  of which there are floor(P\u2080/p) k's. |#<br/>\u00a0<br/>(define (P n m) (* 2 m (+ m n)))<br/>(define (number-of-triples P\u2080)<br/>  (for/fold ([primitive 0] [all 0])<br/>    ([n (in-naturals 1)]<br/>     #:break (&gt;= (P n n) P\u2080))<br/>    (for*/fold ([primitive\u2032 primitive] [all\u2032 all])<br/>      ([m (in-naturals (+ n 1))]<br/>       #:break (&gt; (P n m) P\u2080)<br/>       #:when (and (odd? (- m n)) (coprime? m n)))<br/>      (values (+ primitive\u2032 1)<br/>              (+ all\u2032 (quotient P\u2080 (P n m)))))))<br/>\u00a0<br/>\u00a0<br/>(define (print-results P\u2080)<br/>  (define-values (primitive all) (number-of-triples P\u2080))<br/>  (printf \"~a ~a:\\n  ~a, ~a.\\n\"<br/>          \"Number of Pythagorean triples and primitive triples with perimeter \u2264\"<br/>          P\u2080<br/>          all primitive))<br/>(print-results 100)<br/>(time (print-results (* 100 1000 1000)))<br/>\u00a0<br/>#|<br/>   Number of Pythagorean triples and primitive triples with perimeter \u2264 100:<br/>     17, 7.<br/>   Number of Pythagorean triples and primitive triples with perimeter \u2264 100000000:<br/>     113236940, 7023027.<br/>   cpu time: 11976 real time: 12215 gc time: 2381<br/>|#</pre>"}, {"lang": "REXX", "loc": 25, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program counts the number of  Pythagorean triples  that exist given a maximum    */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 perimeter of  N, and also counts how many of them are primitives.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> n=<span class=\"nu0\">100</span>                    <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>T=<span class=\"nu0\">0</span>;  P=<span class=\"nu0\">0</span>                                        <span class=\"coMULTI\">/*set the number of Triples, Primitives*/</span><br/>              <span class=\"kw1\">do</span> a=<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> N%3;   aa=a<span class=\"sy0\">*</span>a           <span class=\"coMULTI\">/*limit  side  to 1/3 of the perimeter.*/</span><br/>                 <span class=\"kw1\">do</span> b=a+<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/*the triangle can't be  isosceles.    */</span><br/>                 ab=a + b                        <span class=\"coMULTI\">/*compute a partial perimeter (2 sides)*/</span><br/>                 <span class=\"kw1\">if</span> ab<span class=\"sy0\">&gt;</span>=N  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> a        <span class=\"coMULTI\">/*is  a+b \u2265 perimeter?  Try different A*/</span><br/>                 aabb=aa + b<span class=\"sy0\">*</span>b                   <span class=\"coMULTI\">/*compute the sum of  a\u00b2+b\u00b2  (shortcut)*/</span><br/>                    <span class=\"kw1\">do</span> c=b+<span class=\"nu0\">1</span>                     <span class=\"coMULTI\">/*compute the value of the third side. */</span><br/>                    <span class=\"kw1\">if</span> ab+c <span class=\"sy0\">&gt;</span> N   <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> a <span class=\"coMULTI\">/*is  a+b+c &gt; perimeter?  Try diff.  A.*/</span><br/>                    cc=c<span class=\"sy0\">*</span>c                       <span class=\"coMULTI\">/*compute the value of  C\u00b2.            */</span><br/>                    <span class=\"kw1\">if</span> cc <span class=\"sy0\">&gt;</span> aabb  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> b <span class=\"coMULTI\">/*is  c\u00b2 &gt;  a\u00b2+b\u00b2\u00a0?  Try a different B.*/</span><br/>                    <span class=\"kw1\">if</span> cc<span class=\"sy0\">\\</span>==aabb  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/*is  c\u00b2 \u00ac= a\u00b2+b\u00b2\u00a0?  Try a different C.*/</span><br/>                    T=T + <span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/*eureka. We found a Pythagorean triple*/</span><br/>                    P=P + <span class=\"br0\">(</span>gcd<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span>         <span class=\"coMULTI\">/*is this  triple  a primitive triple? */</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>                 <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*b*/</span><br/>              <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*a*/</span><br/>_=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>                                    <span class=\"coMULTI\">/*for padding the output with 7 blanks.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'max perimeter ='</span>    N   _    <span class=\"st0\">\"Pythagorean triples =\"</span>    T    _    <span class=\"st0\">'primitives ='</span>    P<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>gcd: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;  <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> y==<span class=\"nu0\">0</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> x<span class=\"sy0\">//</span>y y <span class=\"kw2\">with</span> y x; <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span> x</pre>"}, {"lang": "Ring", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>size = 100<br/>sum = 0<br/>prime = 0<br/>for i = 1 to size<br/>   for j = i + 1 to size<br/>       for k = 1 to size<br/>           if pow(i,2) + pow(j,2) = pow(k,2) and (i+j+k) &lt; 101<br/>              if gcd(i,j) = 1 prime += 1 ok<br/>              sum += 1  <br/>              see \"\" + i + \" \" + j + \" \" + k + nl ok<br/>       next<br/>   next<br/>next<br/>see \"Total\u00a0: \" + sum + nl<br/>see \"Primitives\u00a0: \" + prime + nl<br/>\u00a0<br/>func gcd gcd, b<br/>     while b<br/>           c   = gcd<br/>           gcd = b<br/>           b   = c\u00a0% b<br/>     end<br/>     return gcd<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 29, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> PythagoranTriplesCounter<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/>    <span class=\"re1\">@limit</span> = limit<br/>    <span class=\"re1\">@total</span> = <span class=\"nu0\">0</span><br/>    <span class=\"re1\">@primitives</span> = <span class=\"nu0\">0</span><br/>    generate_triples<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  attr_reader <span class=\"re3\">:total</span>, <span class=\"re3\">:primitives</span><br/>\u00a0<br/>  private<br/>  <span class=\"kw1\">def</span> generate_triples<span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span><br/>    perim = a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> c<br/>    <span class=\"kw2\">return</span> <span class=\"kw1\">if</span> perim <span class=\"sy0\">&gt;</span> <span class=\"re1\">@limit</span><br/>\u00a0<br/>    <span class=\"re1\">@primitives</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"re1\">@total</span> <span class=\"sy0\">+</span>= <span class=\"re1\">@limit</span> <span class=\"sy0\">/</span> perim<br/>\u00a0<br/>    generate_triples<span class=\"br0\">(</span> a<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">-</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/>    generate_triples<span class=\"br0\">(</span> a<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/>    generate_triples<span class=\"br0\">(</span><span class=\"sy0\">-</span>a<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>a<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>b<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>perim = <span class=\"nu0\">10</span><br/><span class=\"kw1\">while</span> perim <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100</span>_000_000 <br/>  c = PythagoranTriplesCounter.<span class=\"me1\">new</span> perim<br/>  <span class=\"kw3\">p</span> <span class=\"br0\">[</span>perim, c.<span class=\"me1\">total</span>, c.<span class=\"me1\">primitives</span><span class=\"br0\">]</span><br/>  perim <span class=\"sy0\">*</span>= <span class=\"nu0\">10</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 46, "block": "<pre class=\"text highlighted_source\">use std::thread;<br/>\u00a0<br/>fn f1 (a\u00a0: u64, b\u00a0: u64, c\u00a0: u64, d\u00a0: u64) -&gt; u64 {<br/>    let mut primitive_count = 0;<br/>    for triangle in [[a - 2*b + 2*c, 2*a - b + 2*c, 2*a - 2*b + 3*c], <br/>                     [a + 2*b + 2*c, 2*a + b + 2*c, 2*a + 2*b + 3*c],<br/>                     [2*b + 2*c - a, b + 2*c - 2*a, 2*b + 3*c - 2*a]] .iter() {<br/>        let l  = triangle[0] + triangle[1] + triangle[2];<br/>        if l &gt; d { continue; }<br/>        primitive_count +=  1 + f1(triangle[0], triangle[1], triangle[2], d);<br/>    }<br/>    primitive_count<br/>}<br/>\u00a0<br/>fn f2 (a\u00a0: u64, b\u00a0: u64, c\u00a0: u64, d\u00a0: u64) -&gt; u64 {<br/>    let mut triplet_count = 0;<br/>    for triangle in [[a - 2*b + 2*c, 2*a - b + 2*c, 2*a - 2*b + 3*c], <br/>                     [a + 2*b + 2*c, 2*a + b + 2*c, 2*a + 2*b + 3*c],<br/>                     [2*b + 2*c - a, b + 2*c - 2*a, 2*b + 3*c - 2*a]] .iter() {<br/>        let l  = triangle[0] + triangle[1] + triangle[2];<br/>        if l &gt; d { continue; }<br/>        triplet_count +=  (d/l) + f2(triangle[0], triangle[1], triangle[2], d);<br/>    }<br/>    triplet_count<br/>}<br/>\u00a0<br/>fn main () {<br/>    let new_th_1 = thread::Builder::new().stack_size(32 * 1024 * 1024).spawn (move || {<br/>        let mut i = 100;<br/>        while i &lt;= 100_000_000_000 {<br/>            println!(\" Primitive triples below {}\u00a0: {}\", i, f1(3, 4, 5, i) + 1);<br/>            i *= 10;<br/>        }<br/>    }).unwrap();<br/>\u00a0<br/>    let new_th_2 =thread::Builder::new().stack_size(32 * 1024 * 1024).spawn (move || {<br/>        let mut i = 100;<br/>        while i &lt;= 100_000_000_000 {<br/>            println!(\" Triples below {}\u00a0: {}\", i, f2(3, 4, 5, i) + i/12);<br/>            i *= 10;<br/>        }<br/>    }).unwrap();<br/>\u00a0<br/>    new_th_1.join().unwrap();<br/>    new_th_2.join().unwrap();<br/>}</pre>"}, {"lang": "Scala", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PythagoreanTriples <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"               Limit Primatives          All\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span>e <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">2</span> to <span class=\"nu0\">7</span><br/>       limit <span class=\"sy0\">=</span> math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, e<span class=\"br0\">)</span>.<span class=\"me1\">longValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> primCount, tripCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parChild<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> BigInt, b<span class=\"sy0\">:</span> BigInt, c<span class=\"sy0\">:</span> BigInt<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perim <span class=\"sy0\">=</span> a + b + c<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>a2, b2, c2, c3<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> a, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> b, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> c, <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> c<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>limit <span class=\"sy0\">&gt;=</span> perim<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        primCount +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        tripCount +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>limit / perim<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>        parChild<span class=\"br0\">(</span>a - b2 + c2, a2 - b + c2, a2 - b2 + c3<span class=\"br0\">)</span><br/>        parChild<span class=\"br0\">(</span>a + b2 + c2, a2 + b + c2, a2 + b2 + c3<span class=\"br0\">)</span><br/>        parChild<span class=\"br0\">(</span>-a + b2 + c2, -a2 + b + c2, -a2 + b2 + c3<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    parChild<span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, BigInt<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, BigInt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>f<span class=\"st0\">\"a + b + c &lt;= ${limit.toFloat}%3.1e  $primCount%9d $tripCount%12d\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use srfi<span class=\"sy0\">-</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>py perim<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> prim <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>values<br/>    <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>ec<br/>      <span class=\"br0\">(</span>: c perim<span class=\"br0\">)</span> <span class=\"br0\">(</span>: b c<span class=\"br0\">)</span> <span class=\"br0\">(</span>: a b<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> a b c<span class=\"br0\">)</span> perim<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>square c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>square b<span class=\"br0\">)</span> <span class=\"br0\">(</span>square a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">gcd</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">!</span> prim<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    prim<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scratch", "loc": 31, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>var bigInteger: total is 0_;<br/>var bigInteger: prim is 0_;<br/>var bigInteger: max_peri is 10_;<br/>\u00a0<br/>const proc: new_tri (in bigInteger: a, in bigInteger: b, in bigInteger: c) is func<br/>  local<br/>    var bigInteger: p is 0_;<br/>  begin<br/>    p\u00a0:= a + b + c;<br/>    if p &lt;= max_peri then<br/>      incr(prim);<br/>      total +:= max_peri div p;<br/>      new_tri( a - 2_*b + 2_*c,  2_*a - b + 2_*c,  2_*a - 2_*b + 3_*c);<br/>      new_tri( a + 2_*b + 2_*c,  2_*a + b + 2_*c,  2_*a + 2_*b + 3_*c);<br/>      new_tri(-a + 2_*b + 2_*c, -2_*a + b + 2_*c, -2_*a + 2_*b + 3_*c);<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    while max_peri &lt;= 100000000_ do<br/>      total\u00a0:= 0_;<br/>      prim\u00a0:= 0_;<br/>      new_tri(3_, 4_, 5_);<br/>      writeln(\"Up to \" &lt;&amp; max_peri &lt;&amp; \": \" &lt;&amp; total &lt;&amp; \" triples, \" &lt;&amp; prim &lt;&amp; \" primitives.\");<br/>      max_peri *:= 10_;<br/>    end while;<br/>  end func;</pre>"}, {"lang": "Seed7", "loc": 31, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>var bigInteger: total is 0_;<br/>var bigInteger: prim is 0_;<br/>var bigInteger: max_peri is 10_;<br/>\u00a0<br/>const proc: new_tri (in bigInteger: a, in bigInteger: b, in bigInteger: c) is func<br/>  local<br/>    var bigInteger: p is 0_;<br/>  begin<br/>    p\u00a0:= a + b + c;<br/>    if p &lt;= max_peri then<br/>      incr(prim);<br/>      total +:= max_peri div p;<br/>      new_tri( a - 2_*b + 2_*c,  2_*a - b + 2_*c,  2_*a - 2_*b + 3_*c);<br/>      new_tri( a + 2_*b + 2_*c,  2_*a + b + 2_*c,  2_*a + 2_*b + 3_*c);<br/>      new_tri(-a + 2_*b + 2_*c, -2_*a + b + 2_*c, -2_*a + 2_*b + 3_*c);<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    while max_peri &lt;= 100000000_ do<br/>      total\u00a0:= 0_;<br/>      prim\u00a0:= 0_;<br/>      new_tri(3_, 4_, 5_);<br/>      writeln(\"Up to \" &lt;&amp; max_peri &lt;&amp; \": \" &lt;&amp; total &lt;&amp; \" triples, \" &lt;&amp; prim &lt;&amp; \" primitives.\");<br/>      max_peri *:= 10_;<br/>    end while;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 21, "block": "<pre class=\"ruby highlighted_source\">func triples<span class=\"br0\">(</span>limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var primitive = <span class=\"nu0\">0</span><br/>    var civilized = <span class=\"nu0\">0</span><br/>\u00a0<br/>    func oyako<span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>var perim = a<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> limit <span class=\"sy0\">||</span> <span class=\"br0\">(</span><br/>            primitive<span class=\"sy0\">++</span><br/>            civilized <span class=\"sy0\">+</span>= int<span class=\"br0\">(</span>limit <span class=\"sy0\">/</span> perim<span class=\"br0\">)</span><br/>            oyako<span class=\"br0\">(</span> a <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,  <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">-</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,  <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/>            oyako<span class=\"br0\">(</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,  <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c,  <span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/>            oyako<span class=\"br0\">(</span><span class=\"sy0\">-</span>a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>b <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    oyako<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    <span class=\"st0\">\"#{limit} =&gt; (#{primitive} #{civilized})\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Inf</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say triples<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 23, "block": "<pre class=\"text highlighted_source\">var total = 0<br/>var prim = 0<br/>var maxPeri = 100<br/>\u00a0<br/>func newTri(s0:Int, _ s1:Int, _ s2: Int) -&gt; () {<br/>\u00a0<br/>    let p = s0 + s1 + s2<br/>    if p &lt;= maxPeri {<br/>        prim += 1<br/>        total += maxPeri / p<br/>        newTri( s0 + 2*(-s1+s2), 2*( s0+s2) - s1, 2*( s0-s1+s2) + s2)<br/>        newTri( s0 + 2*( s1+s2), 2*( s0+s2) + s1, 2*( s0+s1+s2) + s2)<br/>        newTri(-s0 + 2*( s1+s2), 2*(-s0+s2) + s1, 2*(-s0+s1+s2) + s2)<br/>    }<br/>}<br/>\u00a0<br/>while maxPeri &lt;= 100_000_000 {<br/>    prim = 0<br/>    total = 0<br/>    newTri(3, 4, 5)<br/>    print(\"Up to \\(maxPeri)\u00a0: \\(total) triples \\( prim) primitives.\")<br/>    maxPeri *= 10<br/>}</pre>"}, {"lang": "Tcl", "loc": 25, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> countPythagoreanTriples <span class=\"br0\">{</span>limit<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> q <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">set</span> idx <span class=\"br0\">[</span><span class=\"kw1\">set</span> count <span class=\"br0\">[</span><span class=\"kw1\">set</span> prim <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$q</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> a <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$q</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$q</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> idx<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$q</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> idx<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">incr</span> idx<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> + <span class=\"re0\">$b</span> + <span class=\"re0\">$c</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">incr</span> prim<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$a</span>+<span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$b</span>+<span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$c</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">incr</span> count<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">lappend</span> q \\<br/>        <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> + <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$c</span>-<span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$a</span>+<span class=\"re0\">$c</span><span class=\"br0\">)</span> - <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$a</span>-<span class=\"re0\">$b</span><span class=\"br0\">)</span> + <span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"re0\">$c</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>        <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> + <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$b</span>+<span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$a</span>+<span class=\"re0\">$c</span><span class=\"br0\">)</span> + <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$a</span>+<span class=\"re0\">$b</span><span class=\"br0\">)</span> + <span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"re0\">$c</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>        <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$b</span>+<span class=\"re0\">$c</span><span class=\"br0\">)</span> - <span class=\"re0\">$a</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$c</span>-<span class=\"re0\">$a</span><span class=\"br0\">)</span> + <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$b</span>-<span class=\"re0\">$a</span><span class=\"br0\">)</span> + <span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"re0\">$c</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$count</span> <span class=\"re0\">$prim</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10000000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>countPythagoreanTriples <span class=\"re0\">$i</span><span class=\"br0\">]</span> count primitive<br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"perimeter limit $i =&gt; $count triples, $primitive primitive\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 38, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw3\">For</span> i=1 <span class=\"kw3\">To</span> 8<br/>\tWScript.StdOut.WriteLine triples(10^i)<br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> triples(pmax)<br/>\tprim=0\u00a0: count=0\u00a0: nmax=Sqr(pmax)/2\u00a0: n=1<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> n &lt;= nmax<br/>\t\tm=n+1\u00a0: p=2*m*(m+n)<br/>\t\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> p &lt;= pmax<br/>\t\t\t<span class=\"kw3\">If</span> gcd(m,n)=1 <span class=\"kw3\">Then</span><br/>\t\t\t\tprim=prim+1<br/>\t\t\t\tcount=count+Int(pmax/p)<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\tm=m+2<br/>\t\t\tp=2*m*(m+n)<br/>\t\t<span class=\"kw3\">Loop</span><br/>\t\tn=n+1<br/>\t<span class=\"kw3\">Loop</span> <br/>\ttriples = <span class=\"st0\">\"Max Perimeter: \"</span> &amp; pmax &amp;_<br/>\t\t\t\t<span class=\"st0\">\", Total: \"</span> &amp; count &amp;_<br/>\t\t\t\t<span class=\"st0\">\", Primitive: \"</span> &amp; prim<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> gcd(a,b)<br/>\tc = a\u00a0: d = b<br/>\t<span class=\"kw3\">Do</span><br/>\t\t<span class=\"kw3\">If</span> c <span class=\"kw4\">Mod</span> d &gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\te = c <span class=\"kw4\">Mod</span> d<br/>\t\t\tc = d<br/>\t\t\td = e<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tgcd = d<br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">Do</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Loop</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn tri(lim,a=3,b=4,c=5){<br/>    p:=a + b + c;<br/>    if(p&gt;lim) return(0,0);<br/>    T(1,lim/p).zipWith('+,<br/>       tri(lim,  a - 2*b + 2*c,  2*a - b + 2*c,  2*a - 2*b + 3*c),<br/>       tri(lim,  a + 2*b + 2*c,  2*a + b + 2*c,  2*a + 2*b + 3*c),<br/>       tri(lim, -a + 2*b + 2*c, -2*a + b + 2*c, -2*a + 2*b + 3*c)<br/>    );<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 11, "block": "<pre class=\"zxbasic highlighted_source\">   <span class=\"nu0\">1</span> <span class=\"kw1\">LET</span> Y=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> X=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> Z=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> V=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> U=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> L=<span class=\"nu0\">10</span>: <span class=\"kw1\">LET</span> T=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> P=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> N=<span class=\"nu0\">4</span>: <span class=\"kw1\">LET</span> M=<span class=\"nu0\">0</span>: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"limit   trip.   prim.\"</span><br/>   <span class=\"nu0\">2</span> <span class=\"kw1\">FOR</span> U=<span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">INT</span> <span class=\"br0\">(</span><span class=\"kw3\">SQR</span> <span class=\"br0\">(</span>L/<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> Y=U-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>U/<span class=\"nu0\">2</span><span class=\"br0\">)</span>*<span class=\"nu0\">2</span>: <span class=\"kw1\">LET</span> N=N+<span class=\"nu0\">4</span>: <span class=\"kw1\">LET</span> M=U*U*<span class=\"nu0\">2</span>: <span class=\"kw1\">IF</span> Y=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> M=M-U-U<br/>   <span class=\"nu0\">3</span> <span class=\"kw1\">FOR</span> V=<span class=\"nu0\">1</span>+Y <span class=\"kw1\">TO</span> U-<span class=\"nu0\">1</span> <span class=\"kw4\">STEP</span> <span class=\"nu0\">2</span>: <span class=\"kw1\">LET</span> M=M+N: <span class=\"kw1\">LET</span> X=U: <span class=\"kw1\">LET</span> Y=V<br/>   <span class=\"nu0\">4</span> <span class=\"kw1\">LET</span> Z=Y: <span class=\"kw1\">LET</span> Y=X-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>X/Y<span class=\"br0\">)</span>*Y: <span class=\"kw1\">LET</span> X=Z: <span class=\"kw1\">IF</span> Y&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span><br/>   <span class=\"nu0\">5</span> <span class=\"kw1\">IF</span> X&gt;<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">8</span><br/>   <span class=\"nu0\">6</span> <span class=\"kw1\">IF</span> M&gt;L <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span><br/>   <span class=\"nu0\">7</span> <span class=\"kw1\">LET</span> P=P+<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> T=T+<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>L/M<span class=\"br0\">)</span><br/>   <span class=\"nu0\">8</span> <span class=\"kw1\">NEXT</span> V<br/>   <span class=\"nu0\">9</span> <span class=\"kw1\">NEXT</span> U<br/>  <span class=\"nu0\">10</span> <span class=\"kw1\">PRINT</span> L;TAB <span class=\"nu0\">8</span>;T;TAB <span class=\"nu0\">16</span>;P<br/>  <span class=\"nu0\">11</span> <span class=\"kw1\">LET</span> N=<span class=\"nu0\">4</span>: <span class=\"kw1\">LET</span> T=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> P=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> L=L*<span class=\"nu0\">10</span>: <span class=\"kw1\">IF</span> L&lt;=<span class=\"nu0\">100000</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span></pre>"}]}