{"task": "Extensible_prime_generator", "blocks": [{"lang": "Ada", "loc": 71, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Miller_Rabin;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Prime_Gen <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Num <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span>**<span class=\"nu0\">63</span>-<span class=\"nu0\">1</span>; <span class=\"co1\">-- maximum for the gnat Ada compiler</span><br/>\u00a0<br/>   MR_Iterations: <span class=\"kw3\">constant</span> Positive\u00a0:= <span class=\"nu0\">25</span>; <br/>     <span class=\"co1\">-- the probability Pr[Is_Prime(N, MR_Iterations) = Probably_Prime] </span><br/>     <span class=\"co1\">-- is 1 for prime N and &lt; 4**(-MR_Iterations) for composed N</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Next<span class=\"br0\">(</span>P: Num<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Num <span class=\"kw1\">is</span><br/>      N: Num\u00a0:= P+<span class=\"nu0\">1</span>;<br/>      <span class=\"kw3\">package</span> MR <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Miller_Rabin<span class=\"br0\">(</span>Num<span class=\"br0\">)</span>; <span class=\"kw3\">use</span> MR;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>Is_Prime<span class=\"br0\">(</span>N, MR_Iterations<span class=\"br0\">)</span> = Probably_Prime<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>\t N\u00a0:= N + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> N;<br/>   <span class=\"kw1\">end</span> Next;<br/>\u00a0<br/>   Current: Num;<br/>   Count: Num\u00a0:= <span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- show the first twenty primes</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"First 20 primes:\"</span><span class=\"br0\">)</span>;<br/>   Current\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">20</span> <span class=\"kw1\">loop</span><br/>      Current\u00a0:= Next<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Num'Image<span class=\"br0\">(</span>Current<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- show the primes between 100 and 150</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Primes between 100 and 150:\"</span><span class=\"br0\">)</span>;<br/>   Current\u00a0:= <span class=\"nu0\">99</span>;<br/>   <span class=\"kw1\">loop</span><br/>      Current\u00a0:= Next<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Current &gt; <span class=\"nu0\">150</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Num'Image<span class=\"br0\">(</span>Current<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- count primes between 7700 and 8000</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Number of primes between 7700 and 8000:\"</span><span class=\"br0\">)</span>;<br/>   Current\u00a0:= <span class=\"nu0\">7699</span>;<br/>   <span class=\"kw1\">loop</span><br/>      Current\u00a0:= Next<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Current &gt; <span class=\"nu0\">8000</span>;<br/>      Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Num'Image<span class=\"br0\">(</span>Count<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Count\u00a0:= <span class=\"nu0\">10</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Print the K_i'th prime, for $K=10**i:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>\t Current\u00a0:= <span class=\"nu0\">1</span>;<br/>\t <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Count</span> <span class=\"kw1\">loop</span><br/>\t    Current\u00a0:= Next<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Num'Image<span class=\"br0\">(</span>Count<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"th prime:\"</span> &amp; <br/>\t\t\tNum'Image<span class=\"br0\">(</span>Current<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t Count\u00a0:= Count * <span class=\"nu0\">10</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">exception</span><br/>      <span class=\"kw3\">when</span> Constraint_Error =&gt; <br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\" can't compute the\"</span> &amp; Num'Image<span class=\"br0\">(</span>Count<span class=\"br0\">)</span> &amp;<br/>\t\t\t\t<span class=\"st0\">\"th prime:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span>;</pre>"}, {"lang": "AutoHotkey", "loc": 46, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>p <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">;p functions as the counter</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span> <span class=\"br0\">{</span><br/>\tp <span class=\"sy0\">:=</span> NextPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>\t\ta <span class=\"sy0\">.=</span> p <span class=\"st0\">\", \"</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">151</span> <span class=\"sy0\">&amp;&amp;</span> p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span><br/>\t\tb <span class=\"sy0\">.=</span> p <span class=\"st0\">\", \"</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8001</span> <span class=\"sy0\">&amp;&amp;</span> p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">7699</span><span class=\"br0\">)</span><br/>\t\tc<span class=\"sy0\">++</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"First twenty primes: \"</span> RTrim<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`nPrimes between 100 and 150: \"</span> RTrim<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`nNumber of primes between 7,700 and 8,000: \"</span> RTrim<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`nThe 10,000th prime: \"</span> p<br/>\u00a0<br/>NextPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsPrime<span class=\"br0\">(</span><span class=\"sy0\">++</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> n<br/><span class=\"br0\">}</span><br/>\u00a0<br/>IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tr <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tf <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>f <span class=\"sy0\">&lt;=</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"br0\">(</span>f <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t\t\tf <span class=\"sy0\">+=</span> <span class=\"nu0\">6</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 98, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define CHUNK_BYTES (32 &lt;&lt; 8)</span><br/><span class=\"co2\">#define CHUNK_SIZE (CHUNK_BYTES &lt;&lt; 6)</span><br/>\u00a0<br/><span class=\"kw4\">int</span> field<span class=\"br0\">[</span>CHUNK_BYTES<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#define GET(x) (field[(x)&gt;&gt;6] &amp;  1&lt;&lt;((x)&gt;&gt;1&amp;31))</span><br/><span class=\"co2\">#define SET(x) (field[(x)&gt;&gt;6] |= 1&lt;&lt;((x)&gt;&gt;1&amp;31))</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> uint<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>        uint <span class=\"sy0\">*</span>e<span class=\"sy0\">;</span><br/>        uint cap<span class=\"sy0\">,</span> len<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> uarray<span class=\"sy0\">;</span><br/>uarray primes<span class=\"sy0\">,</span> offset<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> push<span class=\"br0\">(</span>uarray <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> uint n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>len <span class=\"sy0\">&gt;=</span> a<span class=\"sy0\">-&gt;</span>cap<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>cap <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> a<span class=\"sy0\">-&gt;</span>cap <span class=\"sy0\">=</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>                a<span class=\"sy0\">-&gt;</span>e <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>e<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>uint<span class=\"br0\">)</span> <span class=\"sy0\">*</span> a<span class=\"sy0\">-&gt;</span>cap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        a<span class=\"sy0\">-&gt;</span>e<span class=\"br0\">[</span>a<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>uint low<span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> init<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        uint p<span class=\"sy0\">,</span> q<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> f<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        push<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>primes<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        push<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>offset<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">16</span><span class=\"sy0\">;</span> p <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>q <span class=\"sy0\">=</span> p<span class=\"sy0\">*</span>p<span class=\"sy0\">;</span> q <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">16</span><span class=\"sy0\">;</span> q <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>p<span class=\"br0\">)</span> f<span class=\"br0\">[</span>q<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                push<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>primes<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                push<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>offset<span class=\"sy0\">,</span> q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        low <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sieve<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        uint i<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> hi<span class=\"sy0\">,</span> ptop<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>low<span class=\"br0\">)</span> init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>field<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        hi <span class=\"sy0\">=</span> low <span class=\"sy0\">+</span> CHUNK_SIZE<span class=\"sy0\">;</span><br/>        ptop <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>hi<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> primes.<span class=\"me1\">e</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> ptop<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>q <span class=\"sy0\">=</span> offset.<span class=\"me1\">e</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> low<span class=\"sy0\">;</span> q <span class=\"sy0\">&lt;</span> CHUNK_SIZE<span class=\"sy0\">;</span> q <span class=\"sy0\">+=</span> p<span class=\"br0\">)</span><br/>                        SET<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                offset.<span class=\"me1\">e</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> q <span class=\"sy0\">+</span> low<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;</span> CHUNK_SIZE<span class=\"sy0\">;</span> p <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>GET<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> push<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>primes<span class=\"sy0\">,</span> low <span class=\"sy0\">+</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        low <span class=\"sy0\">=</span> hi<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        uint i<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>primes.<span class=\"me1\">len</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> sieve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"First 20:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%u\"</span><span class=\"sy0\">,</span> primes.<span class=\"me1\">e</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>primes.<span class=\"me1\">e</span><span class=\"br0\">[</span>primes.<span class=\"me1\">len</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">150</span><span class=\"br0\">)</span> sieve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Between 100 and 150:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> primes.<span class=\"me1\">len</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"sy0\">=</span> primes.<span class=\"me1\">e</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&amp;&amp;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">150</span><span class=\"br0\">)</span><br/>                        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%u\"</span><span class=\"sy0\">,</span> primes.<span class=\"me1\">e</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>primes.<span class=\"me1\">e</span><span class=\"br0\">[</span>primes.<span class=\"me1\">len</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8000</span><span class=\"br0\">)</span> sieve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> primes.<span class=\"me1\">len</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"sy0\">=</span> primes.<span class=\"me1\">e</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">7700</span> <span class=\"sy0\">&amp;&amp;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8000</span><span class=\"br0\">)</span> c<span class=\"sy0\">++;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%u primes between 7700 and 8000<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100000000</span><span class=\"sy0\">;</span> c <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>primes.<span class=\"me1\">len</span> <span class=\"sy0\">&lt;</span> c<span class=\"br0\">)</span> sieve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%uth prime:\u00a0%u<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> primes.<span class=\"me1\">e</span><span class=\"br0\">[</span>c<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 52, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">ns</span> test<span class=\"sy0\">-</span>project<span class=\"sy0\">-</span>intellij<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">gen-class</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">as</span> string<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> primes<br/><span class=\"st0\">\" The following routine produces a infinite sequence of primes <br/>  (i.e. can be infinite since the evaluation is lazy in that it <br/>  only produces values as needed).  The method is from clojure primes.clj library<br/>  which produces primes based upon O'Neill's paper:<br/>  'The Genuine Sieve of Eratosthenes'.  <br/>\u00a0<br/>   Produces primes based upon trial division on previously found primes up to<br/>   (sqrt number), and uses 'wheel' to avoid<br/>   testing numbers which are divisors of 2, 3, 5, or 7.<br/>   A full explanation of the method is available at:<br/>   [https://github.com/stuarthalloway/programming-clojure/pull/12] \"</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">concat</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>lazy<span class=\"sy0\">-</span>seq<br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>primes<span class=\"sy0\">-</span>from   <span class=\"co1\">; generates primes by only checking if primes </span><br/>                          <span class=\"co1\">; numbers which are not divisible by 2, 3, 5, or 7</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">fn</span> primes<span class=\"sy0\">-</span>from <span class=\"br0\">[</span>n <span class=\"br0\">[</span>f <span class=\"sy0\">&amp;</span> r<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>some #<span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>rem n <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> #<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span> primes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n f<span class=\"br0\">)</span> r<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>lazy<span class=\"sy0\">-</span>seq <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n <span class=\"br0\">(</span>primes<span class=\"sy0\">-</span>from <span class=\"br0\">(</span><span class=\"sy0\">+</span> n f<span class=\"br0\">)</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"co1\">; wheel provides offsets from previous number to insure we are not landing on a divisor of 2, 3, 5, 7</span><br/>            wheel <span class=\"br0\">(</span><span class=\"kw1\">cycle</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">6</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">2</span><br/>                          <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">6</span><br/>                          <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">10</span> <span class=\"nu0\">2</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span>primes<span class=\"sy0\">-</span>from <span class=\"nu0\">11</span> wheel<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> between <span class=\"br0\">[</span>lo hi<span class=\"br0\">]</span><br/>  <span class=\"st0\">\"Primes between lo and hi value \"</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> #<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"sy0\">%</span> hi<span class=\"br0\">)</span> primes<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"sy0\">%</span> lo<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"st0\">\"First twenty:\"</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">20</span> primes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Between 100 and 150:\"</span> <span class=\"br0\">(</span>between <span class=\"nu0\">100</span> <span class=\"nu0\">150</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Number between 7,7700 and 8,000:\"</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>between <span class=\"nu0\">7700</span> <span class=\"nu0\">8000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"st0\">\"10,000th prime:\"</span> <span class=\"br0\">(</span>nth primes <span class=\"br0\">(</span><span class=\"kw1\">dec</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">; decrement by one since nth starts counting from 0</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> sieve_of_eratosthenes3<span class=\"sy0\">;</span><br/>\u00a0<br/>    Prime prime<span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"First twenty primes:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>prime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Primes primes between 100 and 150:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>            <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>prime.<span class=\"me1\">until</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">150</span><span class=\"br0\">}</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">99</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Number of primes between 7,700 and 8,000: \"</span><span class=\"sy0\">,</span><br/>            <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>prime.<span class=\"me1\">until</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">8</span>_000<span class=\"br0\">}</span><br/>            .<span class=\"me1\">filter</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">7</span>_699<span class=\"br0\">}</span>.<span class=\"me1\">walkLength</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"10,000th prime: \"</span><span class=\"sy0\">,</span> prime<span class=\"br0\">(</span><span class=\"nu0\">9</span>_999<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 38, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">; the first twenty primes</span><br/><span class=\"br0\">(</span>primes <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">{</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; a stream to generate primes from a</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>primes-from a<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>next-prime a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>stream-<span class=\"kw1\">cons</span> p <span class=\"br0\">(</span>primes-from p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; primes between 100,150</span><br/><span class=\"br0\">(</span>for/<span class=\"kw1\">list</span>  <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>primes-from <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  #<span class=\"sy0\">:</span><span class=\"kw1\">break</span>  <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> p <span class=\"nu0\">150</span><span class=\"br0\">)</span> p<span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">101</span> <span class=\"nu0\">103</span> <span class=\"nu0\">107</span> <span class=\"nu0\">109</span> <span class=\"nu0\">113</span> <span class=\"nu0\">127</span> <span class=\"nu0\">131</span> <span class=\"nu0\">137</span> <span class=\"nu0\">139</span> <span class=\"nu0\">149</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; the built-in function (primes-pi )counts the number of primes &lt; a</span><br/><span class=\"co1\">; count in [7700 ...  8000]</span><br/><span class=\"br0\">(</span>- <span class=\"br0\">(</span>primes-pi <span class=\"nu0\">8000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>primes-pi <span class=\"nu0\">7700</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">30</span><br/>\u00a0<br/><span class=\"co1\">; nth-prime </span><br/><span class=\"br0\">(</span>nth-prime <span class=\"nu0\">10000</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">104729</span><br/>\u00a0<br/><span class=\"co1\">;; big ones</span><br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>p-digits n<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span>printf <span class=\"st0\">\"(next-prime \u00a0%d\u00a0! ) has\u00a0%d digits\"</span> n <br/>  <span class=\"br0\">(</span>number-<span class=\"kw1\">length</span> <span class=\"br0\">(</span>next-prime <span class=\"br0\">(</span>factorial n <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>next-prime <span class=\"nu0\">0</span><span class=\"sy0\">!</span> <span class=\"br0\">)</span> has <span class=\"nu0\">1</span> digits<br/><span class=\"br0\">(</span>next-prime <span class=\"nu0\">10</span><span class=\"sy0\">!</span> <span class=\"br0\">)</span> has <span class=\"nu0\">7</span> digits<br/><span class=\"br0\">(</span>next-prime <span class=\"nu0\">100</span><span class=\"sy0\">!</span> <span class=\"br0\">)</span> has <span class=\"nu0\">158</span> digits<br/><span class=\"br0\">(</span>next-prime <span class=\"nu0\">200</span><span class=\"sy0\">!</span> <span class=\"br0\">)</span> has <span class=\"nu0\">375</span> digits<br/><span class=\"br0\">(</span>next-prime <span class=\"nu0\">300</span><span class=\"sy0\">!</span> <span class=\"br0\">)</span> has <span class=\"nu0\">615</span> digits<br/><span class=\"br0\">(</span>next-prime <span class=\"nu0\">400</span><span class=\"sy0\">!</span> <span class=\"br0\">)</span> has <span class=\"nu0\">869</span> digits <span class=\"co1\">;; 9400 msec (FireFox)</span><br/>\u00a0<br/><span class=\"co1\">; is prime (1 + 116!)\u00a0?</span><br/><span class=\"br0\">(</span>prime? <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>factorial <span class=\"nu0\">116</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  \u2192 #t<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 21, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">// Extensible sequence of prime numbers. Nigel Galloway: November 19th., 2017</span><br/><span class=\"kw1\">let</span> primes<span class=\"sy0\">=</span><span class=\"kw4\">seq</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">let</span> p<span class=\"sy0\">=</span>System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span>.<span class=\"me1\">SortedSet</span><span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> s<span class=\"sy0\">=</span>set<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">7</span><span class=\"sy0\">;</span><span class=\"nu0\">11</span><span class=\"sy0\">;</span><span class=\"nu0\">13</span><span class=\"sy0\">;</span><span class=\"nu0\">17</span><span class=\"sy0\">;</span><span class=\"nu0\">19</span><span class=\"sy0\">;</span><span class=\"nu0\">23</span><span class=\"sy0\">;</span><span class=\"nu0\">29</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fN<span class=\"sy0\">=</span>function|<span class=\"br0\">(</span>n,g<span class=\"br0\">)</span> <span class=\"kw1\">when</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>30<span class=\"br0\">)</span>s<span class=\"sy0\">-&gt;</span>p.<span class=\"me1\">Add</span><span class=\"br0\">(</span>n,g<span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span>ignore|<span class=\"br0\">(</span>n,g<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>fN <span class=\"br0\">(</span>n<span class=\"sy0\">+</span>g<span class=\"sy0\">+</span>g,g<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fG n <span class=\"br0\">(</span>g:<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> i<span class=\"sy0\">=</span><span class=\"kw4\">seq</span><span class=\"br0\">{</span><span class=\"kw1\">match</span> <span class=\"br0\">(</span>n, p.<span class=\"me1\">Min</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>                               |<span class=\"br0\">(</span>n,<span class=\"br0\">(</span>pn,pg<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> n<span class=\"sy0\">&gt;</span>pn<span class=\"sy0\">-&gt;</span>fN<span class=\"br0\">(</span>pn<span class=\"sy0\">+</span>pg<span class=\"sy0\">+</span>pg,pg<span class=\"br0\">)</span><span class=\"sy0\">;</span> p.<span class=\"me1\">Remove</span><span class=\"br0\">(</span>pn,pg<span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span>ignore<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fG n g i<br/>                               |<span class=\"br0\">(</span>n,<span class=\"br0\">(</span>pn,pg<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> n<span class=\"sy0\">=</span>pn<span class=\"sy0\">-&gt;</span>fN<span class=\"br0\">(</span>pn<span class=\"sy0\">+</span>pg<span class=\"sy0\">+</span>pg,pg<span class=\"br0\">)</span><span class=\"sy0\">;</span> p.<span class=\"me1\">Remove</span><span class=\"br0\">(</span>pn,pg<span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span>ignore<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fG<span class=\"br0\">(</span>n<span class=\"sy0\">+</span>g.<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> g <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>8<span class=\"br0\">)</span><br/>                               |<span class=\"br0\">(</span>n,_<span class=\"br0\">)</span>                <span class=\"sy0\">-&gt;</span><span class=\"kw1\">yield</span> n<span class=\"sy0\">;</span> fN<span class=\"br0\">(</span>n<span class=\"sy0\">+</span>n<span class=\"sy0\">+</span>n,n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fG <span class=\"br0\">(</span>n<span class=\"sy0\">+</span>g.<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> g <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>8<span class=\"br0\">)</span><br/>                              <span class=\"br0\">}</span><br/>  p.<span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">49</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span>ignore<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fG <span class=\"nu0\">11</span> <span class=\"br0\">[</span>|<span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span>|<span class=\"br0\">]</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">let</span> pCache <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">cache</span> primes<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span>  isPrime n <span class=\"sy0\">=</span><br/> <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fN i g e l <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> l<span class=\"sy0\">&gt;=</span>e <span class=\"kw1\">then</span> <span class=\"kw1\">true</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> i<span class=\"sy0\">%</span>l<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <span class=\"kw1\">else</span> fN i <span class=\"br0\">(</span>g<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>i<span class=\"sy0\">/</span>l<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">item</span> <span class=\"br0\">(</span>g<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> pCache<span class=\"br0\">)</span><br/> <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <span class=\"kw1\">else</span> <span class=\"kw1\">match</span> n<span class=\"sy0\">%</span>30 <span class=\"kw1\">with</span><br/>                        |<span class=\"nu0\">2</span>|<span class=\"nu0\">3</span>|<span class=\"nu0\">5</span> <span class=\"kw1\">as</span> g           <span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">=</span>g<br/>                        |<span class=\"nu0\">1</span>|<span class=\"nu0\">7</span>|<span class=\"nu0\">11</span>|<span class=\"nu0\">13</span>|<span class=\"nu0\">17</span>|<span class=\"nu0\">19</span>|<span class=\"nu0\">23</span>|<span class=\"nu0\">29</span><span class=\"sy0\">-&gt;</span>fN n <span class=\"nu0\">0</span> n <span class=\"nu0\">2</span><br/>                        |_                    <span class=\"sy0\">-&gt;</span><span class=\"kw1\">false</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 4, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>F<span class=\"sy0\">*</span>F &lt;<span class=\"sy0\">=</span> LST<span class=\"br0\">)</span>         <span class=\"co1\">!But, F*F might overflow the integer limit so instead,</span><br/>      <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>F &lt;<span class=\"sy0\">=</span> LST<span class=\"sy0\">/</span>F<span class=\"br0\">)</span>                      <span class=\"co1\">!Except, LST might also overflow the integer limit, so </span><br/>      <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>F &lt;<span class=\"sy0\">=</span> <span class=\"br0\">(</span>IST <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>SBITS <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>F<span class=\"br0\">)</span>    <span class=\"co1\">!Which becomes...</span><br/>      <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>F &lt;<span class=\"sy0\">=</span> IST<span class=\"sy0\">/</span>F <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>IST,F<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>SBITS <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>F<span class=\"br0\">)</span> <span class=\"co1\">!Preserving the remainder from IST/F.</span></pre>"}, {"lang": "FreeBASIC", "loc": 100, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0</span><br/>\u00a0<br/><span class=\"kw1\">Enum</span> SieveLimitType<br/>  number <br/>  between<br/>  countBetween<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Enum</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> printPrimes<span class=\"br0\">(</span>low <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, high <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, slt <span class=\"kw1\">As</span> SieveLimitType<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> high &lt; low OrElse low &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span>               <span class=\"co1\">' too small</span><br/>  <span class=\"kw1\">If</span> slt &lt;&gt; number AndAlso slt &lt;&gt; between AndAlso slt &lt;&gt; countBetween <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">If</span> slt &lt;&gt; number AndAlso <span class=\"br0\">(</span>low &lt; <span class=\"nu0\">2</span> OrElse high &lt; <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span>  <br/>  <span class=\"kw1\">If</span> slt &lt;&gt; number AndAlso high &gt; <span class=\"nu0\">1000000000</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"co1\">' too big </span><br/>  <span class=\"kw1\">If</span> slt = number  AndAlso high &gt; <span class=\"nu0\">50000000</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span>   <span class=\"co1\">' too big</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n<br/>  <span class=\"kw1\">If</span> slt = number <span class=\"kw1\">Then</span><br/>    n = <span class=\"nu0\">20</span> * high <span class=\"co1\">'' big enough to accomodate 50 million primes to which this procedure is limited</span><br/>  <span class=\"kw1\">Else</span><br/>    n = high<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span>  <br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean <span class=\"co1\">'' only uses 1 byte per element</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n\u00a0: a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"kw1\">True</span>\u00a0: <span class=\"kw1\">Next</span> <span class=\"co1\">'' set all elements to True to start with</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> p = <span class=\"nu0\">2</span>, q<br/>  <span class=\"co1\">' mark non-prime numbers by setting the corresponding array element to False</span><br/>\u00a0<br/>  <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = p * p <span class=\"kw1\">To</span> n <span class=\"kw1\">Step</span> p<br/>      a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> = <span class=\"kw1\">False</span><br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"co1\">' look for next True element in array after 'p'</span><br/>    q = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = p + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        q = j<br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j    <br/>    <span class=\"kw1\">If</span> q = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>    p = q<br/>  <span class=\"kw1\">Loop</span><br/>\u00a0<br/>  Select <span class=\"kw1\">Case</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> slt<br/>     <span class=\"kw1\">Case</span> number<br/>       <span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>         <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>           count += <span class=\"nu0\">1</span><br/>           <span class=\"kw1\">If</span> count &gt;= low AndAlso count &lt;= high <span class=\"kw1\">Then</span><br/>             <span class=\"kw1\">Print</span> i; <span class=\"st0\">\" \"</span>;<br/>           <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>           <span class=\"kw1\">If</span> count = high <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> Select<br/>         <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>       <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Case</span> between<br/>       <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = low <span class=\"kw1\">To</span> high<br/>         <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>           <span class=\"kw1\">Print</span> i; <span class=\"st0\">\" \"</span>;<br/>         <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>       <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Case</span> countBetween<br/>       <span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = low <span class=\"kw1\">To</span> high<br/>         <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> count += <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">Next</span><br/>       <span class=\"kw1\">Print</span> count;<br/>\u00a0<br/>  <span class=\"kw1\">End</span> Select<br/>  <span class=\"kw1\">Print</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The first 20 primes are\u00a0:\"</span><br/><span class=\"kw1\">Print</span><br/>printPrimes<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">20</span>, number<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The primes between 100 and 150 are\u00a0:\"</span><br/><span class=\"kw1\">Print</span><br/>printPrimes<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">150</span>, between<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The number of primes between 7700 and 8000 is\u00a0:\"</span>;<br/>printPrimes<span class=\"br0\">(</span><span class=\"nu0\">7700</span>, <span class=\"nu0\">8000</span>, countBetween<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The 10000th prime is\u00a0:\"</span>;<br/><span class=\"kw1\">Dim</span> t <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"kw1\">timer</span> <br/>printPrimes<span class=\"br0\">(</span><span class=\"nu0\">10000</span>, <span class=\"nu0\">10000</span>, number<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Computed in \"</span>; <span class=\"kw1\">CInt</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">timer</span> - t<span class=\"br0\">)</span> * <span class=\"nu0\">1000</span> + <span class=\"nu0\">0.5</span><span class=\"br0\">)</span>; <span class=\"st0\">\" ms\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The 1000000th prime is\u00a0:\"</span>; <br/>t = <span class=\"kw1\">timer</span><br/>printPrimes<span class=\"br0\">(</span><span class=\"nu0\">1000000</span>, <span class=\"nu0\">1000000</span>, number<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Computed in \"</span>;<span class=\"kw1\">CInt</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">timer</span> - t<span class=\"br0\">)</span> * <span class=\"nu0\">1000</span> + <span class=\"nu0\">0.5</span><span class=\"br0\">)</span>; <span class=\"st0\">\" ms\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The 50000000th prime is\u00a0:\"</span>; <br/>t = <span class=\"kw1\">timer</span><br/>printPrimes<span class=\"br0\">(</span><span class=\"nu0\">50000000</span>, <span class=\"nu0\">50000000</span>, number<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Computed in \"</span>;<span class=\"kw1\">CInt</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">timer</span> - t<span class=\"br0\">)</span> * <span class=\"nu0\">1000</span> + <span class=\"nu0\">0.5</span><span class=\"br0\">)</span>; <span class=\"st0\">\" ms\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 86, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"container/heap\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    p <span class=\"sy2\">:=</span> newP<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"First twenty: \"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">20</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>p<span class=\"sy1\">(),</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Between 100 and 150: \"</span><span class=\"sy1\">)</span><br/>    n <span class=\"sy2\">:=</span> p<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">for</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">100</span> <span class=\"sy1\">{</span><br/>        n <span class=\"sy2\">=</span> p<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n &lt; <span class=\"nu0\">150</span><span class=\"sy1\">;</span> n <span class=\"sy2\">=</span> p<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">7700</span> <span class=\"sy1\">{</span><br/>        n <span class=\"sy2\">=</span> p<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n &lt; <span class=\"nu0\">8000</span><span class=\"sy1\">;</span> n <span class=\"sy2\">=</span> p<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        c<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Number beween 7,700 and 8,000:\"</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>    p <span class=\"sy2\">=</span> newP<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">10000</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        p<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"10,000th prime:\"</span><span class=\"sy1\">,</span> p<span class=\"sy1\">())</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newP<span class=\"sy1\">()</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">var</span> pq pQueue<br/>    top <span class=\"sy2\">:=</span> &amp;pMult<span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            n<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">if</span> n &lt; top<span class=\"sy3\">.</span>pMult <span class=\"sy1\">{</span> <span class=\"co1\">// n is a new prime</span><br/>                heap<span class=\"sy3\">.</span>Push<span class=\"sy1\">(</span>&amp;pq<span class=\"sy1\">,</span> &amp;pMult<span class=\"sy1\">{</span>prime<span class=\"sy1\">:</span> n<span class=\"sy1\">,</span> pMult<span class=\"sy1\">:</span> n <span class=\"sy3\">*</span> n<span class=\"sy1\">})</span><br/>                top <span class=\"sy2\">=</span> pq<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>                <span class=\"kw1\">return</span> n<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"co1\">// n was next on the queue, it's a composite</span><br/>            <span class=\"kw1\">for</span> top<span class=\"sy3\">.</span>pMult <span class=\"sy3\">==</span> n <span class=\"sy1\">{</span><br/>                top<span class=\"sy3\">.</span>pMult <span class=\"sy2\">+=</span> top<span class=\"sy3\">.</span>prime<br/>                heap<span class=\"sy3\">.</span>Fix<span class=\"sy1\">(</span>&amp;pq<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>                top <span class=\"sy2\">=</span> pq<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pMult <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    prime <span class=\"kw4\">int</span><br/>    pMult <span class=\"kw4\">int</span><br/>    index <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pQueue <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>pMult<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>q pQueue<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>           <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>q<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>q pQueue<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> q<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>pMult &lt; q<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>pMult <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>q pQueue<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    q<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> q<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> q<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> q<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>    q<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>index <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>    q<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>index <span class=\"sy2\">=</span> j<br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>pQueue<span class=\"sy1\">)</span> Push<span class=\"sy1\">(</span>x <span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">{</span><br/>    q <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span>p<br/>    e <span class=\"sy2\">:=</span> x<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>pMult<span class=\"sy1\">)</span><br/>    e<span class=\"sy3\">.</span>index <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>q<span class=\"sy1\">)</span><br/>    <span class=\"sy3\">*</span>p <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>q<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>pQueue<span class=\"sy1\">)</span> Pop<span class=\"sy1\">()</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{}</span> <span class=\"sy1\">{</span><br/>    q <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span>p<br/>    last <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>q<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    e <span class=\"sy2\">:=</span> q<span class=\"sy1\">[</span>last<span class=\"sy1\">]</span><br/>    <span class=\"sy3\">*</span>p <span class=\"sy2\">=</span> q<span class=\"sy1\">[:</span>last<span class=\"sy1\">]</span><br/>    <span class=\"kw1\">return</span> e<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env runghc<br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Numbers<span class=\"sy0\">.</span>Primes<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><br/>\u00a0<br/>firstNPrimes <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>firstNPrimes n <span class=\"sy0\">=</span> genericTake n primes<br/>\u00a0<br/>primesBetweenInclusive <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>primesBetweenInclusive lo hi <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> lo<span class=\"br0\">)</span> <span class=\"sy0\">$</span> takeWhile <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> hi<span class=\"br0\">)</span> primes<br/>\u00a0<br/>nthPrime <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>nthPrime n <span class=\"sy0\">=</span> genericIndex primes <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">-- beware 0-based indexing</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  hSetBuffering stdout NoBuffering<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"First 20 primes: \"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> firstNPrimes <span class=\"nu0\">20</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"Primes between 100 and 150: \"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> primesBetweenInclusive <span class=\"nu0\">100</span> <span class=\"nu0\">150</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"Number of primes between 7700 and 8000: \"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> genericLength <span class=\"sy0\">$</span> primesBetweenInclusive <span class=\"nu0\">7700</span> <span class=\"nu0\">8000</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"The 10000th prime: \"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> nthPrime <span class=\"nu0\">10000</span></pre>"}, {"lang": "Icon and Unicon", "loc": 1, "block": "<pre class=\"unicon highlighted_source\"><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>nc <span class=\"sy0\">:=</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>nc <span class=\"sy0\">+:=</span> <span class=\"sy0\">|</span>wheel2345<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">   p:i.<span class=\"nu0\">20</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span><br/>   <span class=\"sy0\">(</span>#~ &gt;:&amp;<span class=\"nu0\">100</span><span class=\"sy0\">)</span>i.&amp;.<span class=\"sy0\">(</span>p:inv<span class=\"sy0\">)</span> <span class=\"nu0\">150</span><br/><span class=\"nu0\">101</span> <span class=\"nu0\">103</span> <span class=\"nu0\">107</span> <span class=\"nu0\">109</span> <span class=\"nu0\">113</span> <span class=\"nu0\">127</span> <span class=\"nu0\">131</span> <span class=\"nu0\">137</span> <span class=\"nu0\">139</span> <span class=\"nu0\">149</span><br/>   #<span class=\"sy0\">(</span>#~ &gt;:&amp;<span class=\"nu0\">7700</span><span class=\"sy0\">)</span>i.&amp;.<span class=\"sy0\">(</span>p:inv<span class=\"sy0\">)</span> <span class=\"nu0\">8000</span><br/><span class=\"nu0\">30</span><br/>   p:<span class=\"nu0\">10000</span>-<span class=\"nu0\">1</span><br/><span class=\"nu0\">104729</span></pre>"}, {"lang": "JavaScript", "loc": 41, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> primeGenerator<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> showPrimes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy0\">,</span><br/>      arr <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> isPrime<span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// try primes &lt;= 16</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><br/>      num <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">==</span> <span class=\"nu0\">5</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">==</span> <span class=\"nu0\">7</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">==</span> <span class=\"nu0\">11</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">==</span> <span class=\"nu0\">13</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// cull multiples of 2, 3, 5 or 7</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">%</span> <span class=\"nu0\">7</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// cull square numbers ending in 1, 3, 7 or 9</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;=</span> num<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> num <span class=\"sy0\">==</span> <span class=\"st0\">\"number\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> arr.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> num<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> arr.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// first x primes</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>showPrimes<span class=\"br0\">)</span> <span class=\"kw1\">return</span> arr<span class=\"sy0\">;</span><br/>    <span class=\"co1\">// xth prime</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> arr.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">Array</span>.<span class=\"me1\">isArray</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> num<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> num<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> arr.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// primes between x .. y</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>showPrimes<span class=\"br0\">)</span> <span class=\"kw1\">return</span> arr<span class=\"sy0\">;</span><br/>    <span class=\"co1\">// number of primes between x .. y</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> arr.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">// throw a default error if nothing returned yet</span><br/>  <span class=\"co1\">// (surrogate for a quite long and detailed try-catch-block anywhere before)</span><br/>  <span class=\"kw1\">throw</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid arguments for primeGenerator()\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 9, "block": "<pre class=\"text highlighted_source\"># Recent versions of jq include the following definition:<br/># until/2 loops until cond is satisfied,<br/># and emits the value satisfying the condition:<br/>def until(cond; next):<br/>  def _until:<br/>    if cond then . else (next|_until) end;<br/>  _until;<br/>\u00a0<br/>def count(cond): reduce .[] as $x (0; if $x|cond then .+1 else . end);</pre>"}, {"lang": "Julia", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Primes <br/>\u00a0<br/>sum = 2<br/>currentprime = 2<br/>for i in 2:100000<br/>    currentprime = nextprime(currentprime + 1)<br/>    sum += currentprime<br/>end<br/>println(\"The sum of the first 100,000 primes is $sum\")<br/>\u00a0<br/>curprime = 1<br/>arr = zeros(Int, 20)<br/>for i in 1:20<br/>    curprime = nextprime(curprime + 1)<br/>    arr[i] = curprime<br/>end<br/>println(\"The first 20 primes are \", arr)<br/>\u00a0<br/>println(\"the primes between 100 and 150 are \", primes(100,150))<br/>println(\"The number of primes between 7,700 and 8,000 is \", length(primes(7700, 8000)))<br/>println(\"The 10,000th prime is \", prime(10000))<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 36, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/><span class=\"co1\">// compiled with flag -Xcoroutines=enable to suppress 'experimental' warning</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">coroutines</span>.<span class=\"me1\">experimental</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun generatePrimes<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    buildSequence <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;=</span> Int.<span class=\"me1\">MAX_VALUE</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>           p +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primes <span class=\"sy0\">=</span> generatePrimes<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"co1\">// generate first 10,000 primes</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"First 20 primes\u00a0: ${primes.take(20).toList()}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Primes between 100 and 150\u00a0: ${primes.filter { it in 100..150 }.toList()}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Number of primes between 7700 and 8000 = ${primes.filter { it in 7700..8000 }.count()}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"10,000th prime = ${primes.last()}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 105, "block": "<pre class=\"text highlighted_source\">-- parent script \"sieve\"<br/>property _sieve<br/>\u00a0<br/>----------------------------------------<br/>-- @constructor<br/>----------------------------------------<br/>on new (me)<br/>    me._sieve = []<br/>    me._primeSieve(100) -- arbitrary initial size of sieve<br/>    return me<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Returns sorted list of first n primes p with p &gt;= a (default: a=1)<br/>----------------------------------------<br/>on getNPrimes (me, n, a)<br/>    if voidP(a) then a = 1<br/>    i = a<br/>    res = []<br/>    repeat while TRUE<br/>        if i&gt;me._sieve.count then me._primeSieve(2*i)<br/>        if me._sieve[i] then res.add(i)<br/>        if res.count=n then return res<br/>        i = i +1<br/>    end repeat<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Returns sorted list of primes p with a &lt;= p &lt;= b<br/>----------------------------------------<br/>on getPrimesInRange (me, a, b)<br/>    if me._sieve.count&lt;b then me._primeSieve(b)<br/>    primes = []<br/>    repeat with i = a to b<br/>        if me._sieve[i] then primes.add(i)<br/>    end repeat<br/>    return primes<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Returns nth prime<br/>----------------------------------------<br/>on getNthPrime (me, n)<br/>    if me._sieve.count&lt;2*n then me._primeSieve(2*n)<br/>    i = 0<br/>    found = 0<br/>    repeat while TRUE<br/>        i = i +1<br/>        if i&gt;me._sieve.count then me._primeSieve(2*i)<br/>        if me._sieve[i] then found=found+1<br/>        if found=n then return i<br/>    end repeat<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Sieve of Eratosthenes<br/>----------------------------------------<br/>on _primeSieve (me, limit)<br/>    if me._sieve.count&gt;=limit then<br/>        return<br/>    else if me._sieve.count&gt;0 then<br/>        return me._complementSieve(limit)<br/>    end if<br/>    me._sieve = [0]<br/>    repeat with i = 2 to limit<br/>        me._sieve[i] = 1<br/>    end repeat<br/>    c = sqrt(limit)<br/>    repeat with i = 2 to c<br/>        if (me._sieve[i]=0) then next repeat<br/>        j = i*i<br/>        repeat while (j&lt;=limit)<br/>            me._sieve[j] = 0<br/>            j = j + i<br/>        end repeat<br/>    end repeat<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Expands existing sieve to new limit<br/>----------------------------------------<br/>on _complementSieve (me, n)<br/>    n1 = me._sieve.count<br/>    repeat with i = n1+1 to n<br/>        me._sieve[i] = 1<br/>    end repeat<br/>    c1 = sqrt(n1)<br/>    repeat with i = 2 to c1<br/>        if (me._sieve[i]=0) then next repeat<br/>        j = n1 - (n1 mod i)<br/>        repeat while (j&lt;=n)<br/>            me._sieve[j] = 0<br/>            j = j + i<br/>        end repeat<br/>    end repeat<br/>    c = sqrt(n)<br/>    repeat with i = c1+1 to c<br/>        if (me._sieve[i]=0) then next repeat<br/>        j = i*i<br/>        repeat while (j&lt;=n)<br/>            me._sieve[j] = 0<br/>            j = j + i<br/>        end repeat<br/>    end repeat<br/>end</pre>"}, {"lang": "M2000 Interpreter", "loc": 81, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckPrimes {<br/>      \\\\ Inventories are lists, Known and Known1 are poiners to Inventories<br/>      Inventory Known=1:<a class=\"__cf_email__\" data-cfemail=\"fdc0cfbd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,2:<a class=\"__cf_email__\" data-cfemail=\"dfe2ec9f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>      Inventory <a class=\"__cf_email__\" data-cfemail=\"aee5c0c1d9c09f939cee\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"9cafdc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>      \\\\ In a lambda all closures are copies<br/>      \\\\ but Known and Know1 are copies of pointers<br/>      \\\\ so are closures like by reference<br/>      PrimeNth=lambda  Known, Known1  (n as long) -&gt; {<br/>            if n&lt;1 then Error \"Only &gt;=1\"<br/>            if exist(known, n) then =eval(known)\u00a0: exit<br/>            x=5<br/>            i=2<br/>            { <br/>                  if i=n then  =known(n)\u00a0: exit<br/>                  while exist(Known1,x) { if not exist(known, i) then append known, i:=x<br/>                  x++\u00a0: i++<br/>                  }<br/>                  ok=false<br/>                  if x&lt;=5 OR frac(x) then {<br/>                        if x == 2 OR x == 3 OR x == 5 then ok=true<br/>                        goto 1000<br/>                  }<br/>                  if frac(x/2) else 1000<br/>                  if frac(x/3) else 1000<br/>                  x1=sqrt(x)\u00a0: <a class=\"__cf_email__\" data-cfemail=\"9cf8a1a9dc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>                  {if frac(x/d ) else 1000<br/>                        d += 2: if d&gt;x1 then ok=true\u00a0: goto 1000<br/>                        if frac(x/d) else 1000<br/>                        d += 4: if d&lt;= x1 else ok=true: goto 1000<br/>                        loop<br/>                   }<br/>      1000    If ok then i++:Append Known, i:=x \u00a0: if not exist(Known1, x) then Append Known1, x<br/>                   x++\u00a0: Loop }<br/>      }<br/>      \\\\ IsPrime has same closure, Known1<br/>      IsPrime=lambda  Known1 (x as decimal) -&gt; {<br/>            if exist(Known1, x) then =true\u00a0: exit<br/>            if x&lt;=5 OR frac(x) then {<br/>                  if x == 2 OR x == 3 OR x == 5 then Append Known1, x \u00a0: =true<br/>                  Break<br/>            }<br/>            if frac(x/2 ) else exit<br/>            if frac(x/3) else exit<br/>            x1=sqrt(x):d = <a class=\"__cf_email__\" data-cfemail=\"3f0a7f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>            {if frac(x/d ) else exit<br/>                  d += 2: if d&gt;x1 then Append Known1, x\u00a0: =true\u00a0: exit<br/>                  if frac(x/d) else exit<br/>                  d += 4: if d&lt;= x1 else Append Known1, x\u00a0:  =true: exit<br/>                  loop<br/>             }<br/>      }<br/>      Print \"First twenty primes\"<br/>      n=PrimeNth(20)<br/>      For i=1 to 20 \u00a0: Print Known(i),: Next i<br/>      Print<br/>      Print \"Primes between 100 and 150:\"<br/>      c=0<br/>      For i=100 to 150<br/>            If IsPrime(i) Then print i,\u00a0: c++<br/>      Next i<br/>      Print<br/>      Print \"Count:\", c<br/>      Print \"Primes between 7700 and 8000:\"<br/>      c=0<br/>      For i=7700  to 8000<br/>            If IsPrime(i) Then print i,\u00a0: c++<br/>      Next i<br/>      Print<br/>      Print \"Count:\", c<br/>      Print \"200th Prime:\"<br/>      Print PrimeNth(200)<br/>      Print \"List from 190th to 199th Prime:\"<br/>      For i=190 to 199\u00a0: Print Known(i),\u00a0: Next i<br/>      Print<br/>      Rem 1\u00a0: Print Known<br/>      Rem  2: Print Known1<br/>}<br/>CheckPrimes<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 8, "block": "<pre class=\"text highlighted_source\">Prime[Range[20]]<br/>{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71}<br/>Select[Range[100,150], PrimeQ]<br/>{101, 103, 107, 109, 113, 127, 131, 137, 139, 149}<br/>PrimePi[8000] - PrimePi[7700]<br/>30<br/>Prime[10000]<br/>104729</pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">void</span><br/>showprimes<span class=\"br0\">(</span>GEN lower<span class=\"sy0\">,</span> GEN upper<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  forprime_t T<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>forprime_init<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>T<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>forprime_next<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>T<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    pari_printf<span class=\"br0\">(</span><span class=\"st0\">\"%Ps<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> T.<span class=\"me1\">pp</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 655, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> emirp<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>  <span class=\"co2\">{$MODE DELPHI}</span><br/>  <span class=\"co2\">{$OPTIMIZATION ON,REGVAR,PEEPHOLE,CSE,ASMCSE}</span><br/>  <span class=\"co2\">{$CODEALIGN proc=8}</span><br/><span class=\"co1\">//  {$R+,V+,O+}</span><br/><span class=\"co2\">{$ELSE}</span><br/>  <span class=\"co2\">{$APPLICATION CONSOLE}</span><br/><span class=\"co2\">{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tSievenum      <span class=\"sy3\">=</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  cBitSize       <span class=\"sy3\">=</span> SizeOf<span class=\"br0\">(</span>tSievenum<span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy1\">;</span><br/>  cAndMask       <span class=\"sy3\">=</span> cBitSize<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  InitPrim      <span class=\"sy1\">:</span><span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">11</span><span class=\"sy1\">,</span><span class=\"nu0\">13</span><span class=\"sy1\">,</span><span class=\"nu0\">17</span><span class=\"sy1\">,</span><span class=\"nu0\">19</span><span class=\"sy1\">,</span><span class=\"nu0\">23</span><span class=\"sy1\">,</span><span class=\"nu0\">29</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\">(*<br/>  {MAXANZAHL     =  2*3*5*7*11*13*17*19;*PRIM}<br/>  MAXANZAHL    \u00a0:array [0..8] of Longint =(2,6,30,210,2310,30030,<br/>                                         510510,9699690,223092870);<br/>  {WIFEMAXLAENGE =  1*2*4*6*10*12*16*18; *(PRIM-1)}<br/>  WIFEMAXLAENGE\u00a0:array [0..8] of longint =(1,2,8,48,480,5760,<br/>                                         92160,1658880,36495360);<br/>*)</span><br/><span class=\"co1\">//Don't sieve with primes that are multiples of 2..InitPrim[BIS]</span><br/>  BIS           <span class=\"sy3\">=</span>     <span class=\"nu0\">5</span><span class=\"sy1\">;</span><br/>  MaxMulFac     <span class=\"sy3\">=</span>    <span class=\"nu0\">22</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{array [0..9] of byte= (2,4,6,10,14,22,26,34,40,50);}</span><br/>  cMaxZahl      <span class=\"sy3\">=</span> <span class=\"nu0\">30030</span><span class=\"sy1\">;</span><br/>  cRepFldLen    <span class=\"sy3\">=</span>  <span class=\"nu0\">5760</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  MaxUpperLimit <span class=\"sy3\">=</span>  <span class=\"nu0\">100</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  MAXIMUM       <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>MaxUpperLimit<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> cMaxZahl<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span>cMaxZahl<span class=\"sy1\">;</span><br/>  MAXSUCHE      <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>MAXIMUM<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> cMaxZahl<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span>cRepFldLen<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">DIV</span> cBitSize<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  tRpFldIdx  <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">cRepFldLen</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  pNativeUint <span class=\"sy3\">=</span> <span class=\"sy2\">^</span> NativeUint<span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\">(* numberField as Bit array *)</span><br/>  tsearchFld   <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> tSievenum<span class=\"sy1\">;</span><br/>\u00a0<br/>  tSegment       <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                     dOfs<span class=\"sy1\">,</span><br/>                     dSegment    <span class=\"sy1\">:</span>tSievenum<span class=\"sy1\">;</span><br/>                  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tpSegment     <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tSegment<span class=\"sy1\">;</span><br/>  tMulFeld    <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">MaxMulFac</span> <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> tSegment<span class=\"sy1\">;</span><br/>  tnumberField<span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">cMaxZahl</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">word</span><span class=\"sy1\">;</span> <span class=\"co1\">//word-&gt;  0..cRepFldLen-1</span><br/>  tRevIdx     <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span>tRpFldIdx<span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">word</span><span class=\"sy1\">;</span><span class=\"co1\">//word-&gt;  0..cMaxZahl-1</span><br/>  tDiffFeld   <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span>tRpFldIdx<span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>  tNewPosFeld <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span>tRpFldIdx<span class=\"br0\">]</span> <span class=\"kw1\">of</span> Uint64<span class=\"sy1\">;</span><br/>\u00a0<br/>  tRecPrime   <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                  rpPrime<span class=\"sy1\">,</span><br/>                  rpsvPos <span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/>                  rpOfs<span class=\"sy1\">,</span><br/>                  rpSeg   <span class=\"sy1\">:</span>LongWord<span class=\"sy1\">;</span><br/>                <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  BitSet<span class=\"sy1\">,</span><br/>  BitClr <span class=\"sy1\">:</span> <span class=\"kw4\">Array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">cAndMask</span><span class=\"br0\">]</span> <span class=\"kw1\">Of</span> NativeUint<span class=\"sy1\">;</span><br/>  deltaNewPos <span class=\"sy1\">:</span> tNewPosFeld<span class=\"sy1\">;</span><br/>  MulFeld   <span class=\"sy1\">:</span> tMulFeld<span class=\"sy1\">;</span><br/>  searchFld <span class=\"sy1\">:</span> tsearchFld<span class=\"sy1\">;</span><br/>  number    <span class=\"sy1\">:</span> tnumberField<span class=\"sy1\">;</span><br/>  DiffFld   <span class=\"sy1\">:</span> tDiffFeld<span class=\"sy1\">;</span><br/>  RevIdx    <span class=\"sy1\">:</span> tRevIdx<span class=\"sy1\">;</span><br/>  actSquare   <span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/>  NewStartPos<span class=\"sy1\">,</span><br/>  MaxPos    <span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/><span class=\"co1\">//K1  = $0101010101010101;</span><br/>  K55 <span class=\"sy3\">=</span> <span class=\"re0\">$5555555555555555</span><span class=\"sy1\">;</span><br/>  K33 <span class=\"sy3\">=</span> <span class=\"re0\">$3333333333333333</span><span class=\"sy1\">;</span><br/>  KF1 <span class=\"sy3\">=</span> <span class=\"re0\">$0F0F0F0F0F0F0F0F</span><span class=\"sy1\">;</span><br/>  KF2 <span class=\"sy3\">=</span> <span class=\"re0\">$00FF00FF00FF00FF</span><span class=\"sy1\">;</span><br/>  KF4 <span class=\"sy3\">=</span> <span class=\"re0\">$0000FFFF0000FFFF</span><span class=\"sy1\">;</span><br/>  KF8 <span class=\"sy3\">=</span> <span class=\"re0\">$00000000FFFFFFFF</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><span class=\"kw1\">inline</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  c<span class=\"sy1\">,</span>b<span class=\"sy1\">,</span>k <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NativeUint<span class=\"br0\">(</span>K55<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  <span class=\"br0\">(</span>b <span class=\"kw1\">shr</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"sy1\">;</span> b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NativeUint<span class=\"br0\">(</span>K33<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span>  <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span>b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NativeUint<span class=\"br0\">(</span>KF1<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span>  <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span>b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NativeUint<span class=\"br0\">(</span>KF2<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span>  <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span>b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NativeUint<span class=\"br0\">(</span>KF4<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span>b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NativeUint<span class=\"br0\">(</span>KF8<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  <span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> c<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>LongWord<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  c<span class=\"sy1\">,</span>k <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  result  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> result <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    EXIT<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LongWord<span class=\"br0\">(</span>K55<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  <span class=\"br0\">(</span>result  <span class=\"kw1\">shr</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"sy1\">;</span> result  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>result  <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LongWord<span class=\"br0\">(</span>K33<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result  <span class=\"kw1\">shr</span>  <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span>result  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>result  <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LongWord<span class=\"br0\">(</span>KF1<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result  <span class=\"kw1\">shr</span>  <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span>result  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>result  <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LongWord<span class=\"br0\">(</span>KF2<span class=\"br0\">)</span><span class=\"sy1\">;</span>c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result  <span class=\"kw1\">shr</span>  <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span>result  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>result  <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LongWord<span class=\"br0\">(</span>KF4<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  <span class=\"br0\">(</span>result  <span class=\"kw1\">shr</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> k <span class=\"sy3\">+</span><span class=\"br0\">(</span>result  <span class=\"kw3\">AND</span> k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Init<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{simple sieve of erathosthenes only eliminating small primes}</span><br/><span class=\"kw1\">var</span><br/>  pr<span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>j<span class=\"sy1\">,</span>Ofs <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"co1\">//Init Bitmasks</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> cAndMask <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    BitSet<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> J<span class=\"sy1\">;</span><br/>    BitClr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NativeUint<span class=\"br0\">(</span><span class=\"kw1\">NOT</span><span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    j<span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<span class=\"sy3\">+</span>j<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//building number wheel excluding multiples of small primes</span><br/>  Fillchar<span class=\"br0\">(</span>number<span class=\"sy1\">,</span>SizeOf<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> BIS <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    pr <span class=\"sy1\">:</span><span class=\"sy3\">=</span> InitPrim<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>High<span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"kw1\">div</span> pr<span class=\"br0\">)</span><span class=\"sy3\">*</span>pr<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      number<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>j<span class=\"sy1\">,</span>pr<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> j &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// build reverse Index and save distances</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  RevIdx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    Ofs <span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>ofs<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> number<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    DiffFld<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ofs<span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    RevIdx<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> i <span class=\"sy3\">=</span> High<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  DiffFld<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">//calculate a bitnumber-index into cRepFldLen</span><br/>  Fillchar<span class=\"br0\">(</span>number<span class=\"sy1\">,</span>SizeOf<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Ofs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> cRepFldLen<span class=\"sy3\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    inc<span class=\"br0\">(</span>Ofs<span class=\"sy1\">,</span>DiffFld<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    number<span class=\"br0\">[</span>ofs<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">//direct index into Mulfeld 2-&gt;0 ,4-&gt; 1 ...</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> cRepFldLen<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>DiffFld<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    DiffFld<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CalcPos<span class=\"br0\">(</span>m<span class=\"sy1\">:</span> Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{search right position of m}</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>res <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  res <span class=\"sy1\">:</span><span class=\"sy3\">=</span> m <span class=\"kw1\">div</span> cMaxZahl<span class=\"sy1\">;</span><br/>  i   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> m<span class=\"sy3\">-</span>res<span class=\"sy3\">*</span> Uint64<span class=\"br0\">(</span>cMaxzahl<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//m mod cMaxZahl</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>number<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>i &lt;&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">iF</span> i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">begin</span><br/>      Dec<span class=\"br0\">(</span>res<span class=\"sy1\">,</span>cRepFldLen<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cMaxzahl<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{while}</span><br/>  CalcPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> res <span class=\"sy3\">*</span>Uint64<span class=\"br0\">(</span>cRepFldLen<span class=\"br0\">)</span> <span class=\"sy3\">+</span>number<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> CalcSqrOfs<span class=\"br0\">(</span>out Segment<span class=\"sy1\">,</span>Ofs <span class=\"sy1\">:</span>Uint64<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  Segment  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> actSquare <span class=\"kw1\">div</span> cMaxZahl<span class=\"sy1\">;</span><br/>  Ofs      <span class=\"sy1\">:</span><span class=\"sy3\">=</span> actSquare<span class=\"sy3\">-</span>Segment<span class=\"sy3\">*</span>cMaxZahl<span class=\"sy1\">;</span> <span class=\"co1\">//ofs Mod cMaxZahl</span><br/>  Segment  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment<span class=\"sy3\">*</span>cRepFldLen<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> MulTab<span class=\"br0\">(</span>sievePr<span class=\"sy1\">:</span>Nativeint<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/> k<span class=\"sy1\">,</span>Segment<span class=\"sy1\">,</span>Segment0<span class=\"sy1\">,</span>Rest<span class=\"sy1\">,</span>Rest0<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"coMULTI\">{multiplication-table of differences}</span><br/>  <span class=\"coMULTI\">{2* sievePr,4* ,6* ...MaxMulFac*sievePr }</span><br/>  sievePr <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sievePr<span class=\"sy3\">+</span>sievePr<span class=\"sy1\">;</span><br/>  Segment0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sievePr <span class=\"kw1\">div</span> cMaxzahl<span class=\"sy1\">;</span><br/>\u00a0<br/>  Rest0    <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sievePr<span class=\"sy3\">-</span>Segment0<span class=\"sy3\">*</span>cMaxzahl<span class=\"sy1\">;</span><br/>  Segment0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment0 <span class=\"sy3\">*</span> cRepFldLen<span class=\"sy1\">;</span><br/>\u00a0<br/>  Segment <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment0<span class=\"sy1\">;</span><br/>  Rest <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Rest0<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">with</span> MulFeld<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    dOfs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Rest0<span class=\"sy1\">;</span><br/>    dSegment<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment0<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> MaxMulFac <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    Segment <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment<span class=\"sy3\">+</span>Segment0<span class=\"sy1\">;</span><br/>    Rest    <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Rest<span class=\"sy3\">+</span>Rest0<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> Rest &gt;<span class=\"sy3\">=</span> cMaxzahl <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      Rest<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Rest<span class=\"sy3\">-</span>cMaxzahl<span class=\"sy1\">;</span><br/>      Segment <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment<span class=\"sy3\">+</span>cRepFldLen<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">with</span> MulFeld<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      dOfs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Rest<span class=\"sy1\">;</span><br/>      dSegment<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> CalcDeltaNewPos<span class=\"br0\">(</span>sievePr<span class=\"sy1\">,</span>MulPos<span class=\"sy1\">:</span>NativeUint<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  Ofs<span class=\"sy1\">,</span>Segment<span class=\"sy1\">,</span>prevPos<span class=\"sy1\">,</span>actPos <span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  MulTab<span class=\"br0\">(</span>sievePr<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//start at sqr sievePrime</span><br/>  CalcSqrOfs<span class=\"br0\">(</span>Segment<span class=\"sy1\">,</span>Ofs<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  NewStartPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment<span class=\"sy3\">+</span>number<span class=\"br0\">[</span>Ofs<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  prevPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NewStartPos<span class=\"sy1\">;</span><br/>  deltaNewPos<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> prevPos<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> cRepFldLen<span class=\"sy3\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    inc<span class=\"br0\">(</span>mulpos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> mulpos &gt;<span class=\"sy3\">=</span> cRepFldLen <span class=\"kw1\">then</span><br/>      mulpos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">With</span> MulFeld<span class=\"br0\">[</span>DiffFld<span class=\"br0\">[</span>mulpos<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      Ofs<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Ofs<span class=\"sy3\">+</span>dOfs<span class=\"sy1\">;</span><br/>      Segment <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment<span class=\"sy3\">+</span>dSegment<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">If</span> Ofs &gt;<span class=\"sy3\">=</span> cMaxZahl <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      Ofs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Ofs<span class=\"sy3\">-</span>cMaxZahl<span class=\"sy1\">;</span><br/>      Segment <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment<span class=\"sy3\">+</span>cRepFldLen<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    actPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Segment<span class=\"sy3\">+</span>number<span class=\"br0\">[</span>Ofs<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    deltaNewPos<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> actPos <span class=\"sy3\">-</span> prevPos<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> actPos&gt; maxPos <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">BREAK</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    prevPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> actPos<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  deltaNewPos<span class=\"br0\">[</span>cRepFldLen<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NewStartPos<span class=\"sy3\">+</span>cRepFldLen<span class=\"sy3\">*</span>sievePr<span class=\"sy3\">-</span>prevPos<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> SieveByOnePrime<span class=\"br0\">(</span><span class=\"kw1\">var</span> sf<span class=\"sy1\">:</span>tsearchFld<span class=\"sy1\">;</span>sievePr<span class=\"sy1\">:</span>NativeUint<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  pNewPos <span class=\"sy1\">:</span> <span class=\"sy2\">^</span>Uint64<span class=\"sy1\">;</span><br/>  pSiev0<span class=\"sy1\">,</span><br/>  pSiev   <span class=\"sy1\">:</span> <span class=\"sy2\">^</span>tSievenum<span class=\"sy1\">;</span><span class=\"co1\">// dynamic arrays are slow</span><br/>  Ofs      <span class=\"sy1\">:</span> Int64<span class=\"sy1\">;</span><br/>  Position <span class=\"sy1\">:</span> UINt64<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Begin</span><br/>  pSiev0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>sf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  Ofs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MaxPos<span class=\"sy3\">-</span>sievePr <span class=\"sy3\">*</span>cRepFldLen<span class=\"sy1\">;</span><br/>  Position <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NewStartPos<span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\">{unmark multiples of sieve prime}</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw1\">IF</span> Position &lt; Ofs <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      pNewPos<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>deltaNewPos<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Low<span class=\"br0\">(</span>deltaNewPos<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>deltaNewPos<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        pSiev <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pSiev0<span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>pSiev<span class=\"sy1\">,</span>Position <span class=\"kw1\">DIV</span> cBitSize<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"co1\">//pSiev^ == @sf[Position DIV cBitSize]</span><br/>        pSiev<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pSiev<span class=\"sy2\">^</span> <span class=\"kw3\">AND</span> BitCLR<span class=\"br0\">[</span>Position <span class=\"kw3\">AND</span> cAndMask<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>Position<span class=\"sy1\">,</span>pNewPos<span class=\"sy2\">^</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>pNewPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">Begin</span><br/>      pNewPos<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>deltaNewPos<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Low<span class=\"br0\">(</span>deltaNewPos<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>deltaNewPos<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        <span class=\"kw1\">IF</span> Position &gt;<span class=\"sy3\">=</span> MaxPos <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">Break</span><span class=\"sy1\">;</span><br/>        pSiev <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pSiev0<span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>pSiev<span class=\"sy1\">,</span>Position <span class=\"kw1\">DIV</span> cBitSize<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        pSiev<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pSiev<span class=\"sy2\">^</span> <span class=\"kw3\">AND</span> BitCLR<span class=\"br0\">[</span>Position <span class=\"kw3\">AND</span> cAndMask<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>Position<span class=\"sy1\">,</span>pNewPos<span class=\"sy2\">^</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>pNewPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> Position &gt;<span class=\"sy3\">=</span> MaxPos<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> SieveAll<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span><br/>  sievePr<span class=\"sy1\">,</span><br/>  PrimPos<span class=\"sy1\">,</span><br/>  srPrPos  <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Begin</span><br/>  Init<span class=\"sy1\">;</span><br/>  MaxPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CalcPos<span class=\"br0\">(</span>MaxUpperLimit<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\">{start of prime sieving}</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>MaxPos<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> cBitSize<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>searchFld<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> Length<span class=\"br0\">(</span>searchFld<span class=\"br0\">)</span> &lt;&gt; i <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Not enough memory'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Halt<span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">227</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>searchFld<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>     searchFld<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> NativeUint<span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\">{the first prime}</span><br/>  srPrPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  PrimPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  sievePr <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  actSquare <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sievePr<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"coMULTI\">{next prime}</span><br/>    inc<span class=\"br0\">(</span>srPrPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span>DiffFld<span class=\"br0\">[</span>PrimPos<span class=\"br0\">]</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//binom (a+b)^2; a^2 already known</span><br/>    actSquare <span class=\"sy1\">:</span><span class=\"sy3\">=</span> actSquare<span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>sievePr<span class=\"sy3\">+</span>i<span class=\"br0\">)</span><span class=\"sy3\">*</span>i<span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>sievePr<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> actSquare &gt; MaxUpperLimit <span class=\"kw1\">THEN</span><br/>      <span class=\"kw1\">BREAK</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\">{if sievePr == prime then sieve with sievePr}</span><br/>    <span class=\"kw1\">if</span> BitSet<span class=\"br0\">[</span>srPrPos <span class=\"kw3\">AND</span> cAndMask<span class=\"br0\">]</span> <span class=\"kw3\">AND</span><br/>      searchFld<span class=\"br0\">[</span>srPrPos <span class=\"kw1\">DIV</span> cBitSize<span class=\"br0\">]</span> &lt;&gt; 0then<br/>    <span class=\"kw1\">Begin</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>sievePr<span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"re1\">#8</span><span class=\"re1\">#8</span><span class=\"re1\">#8</span><span class=\"re1\">#8</span><span class=\"re1\">#8</span><span class=\"re1\">#8</span><span class=\"re1\">#8</span><span class=\"re1\">#8</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      CalcDeltaNewPos<span class=\"br0\">(</span>sievePr<span class=\"sy1\">,</span>PrimPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      SieveByOnePrime<span class=\"br0\">(</span>searchFld<span class=\"sy1\">,</span>sievePr<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>PrimPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> PrimPos <span class=\"sy3\">=</span> cRepFldLen <span class=\"kw1\">then</span><br/>      dec<span class=\"br0\">(</span>PrimPos<span class=\"sy1\">,</span>PrimPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//\u00a0:= 0;</span><br/>  <span class=\"kw1\">until</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> InitRecPrime<span class=\"br0\">(</span>pr<span class=\"sy1\">:</span> UInt64<span class=\"br0\">)</span><span class=\"sy1\">:</span>tRecPrime<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  svPos<span class=\"sy1\">,</span>sg <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  svPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CalcPos<span class=\"br0\">(</span>pr<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  sg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> svPos <span class=\"kw1\">DIV</span> cRepFldLen<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">with</span> result <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    rpsvPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> svPos<span class=\"sy1\">;</span><br/>    rpSeg   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sg<span class=\"sy1\">;</span><br/>    rpOfs   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> svPos <span class=\"sy3\">-</span> sg<span class=\"sy3\">*</span>cRepFldLen<span class=\"sy1\">;</span><br/>    rpPrime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> RevIdx<span class=\"br0\">[</span>rpOfs<span class=\"br0\">]</span><span class=\"sy3\">+</span> sg<span class=\"sy3\">*</span>cMaxZahl<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> InitPrimeSvPos<span class=\"br0\">(</span>svPos<span class=\"sy1\">:</span> Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span>tRecPrime<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  sg <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  sg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> svPos <span class=\"kw1\">DIV</span> cRepFldLen<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">with</span> result <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    rpsvPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> svPos<span class=\"sy1\">;</span><br/>    rpSeg   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sg<span class=\"sy1\">;</span><br/>    rpOfs   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> svPos <span class=\"sy3\">-</span> sg<span class=\"sy3\">*</span>cRepFldLen<span class=\"sy1\">;</span><br/>    rpPrime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> RevIdx<span class=\"br0\">[</span>rpOfs<span class=\"br0\">]</span><span class=\"sy3\">+</span> sg<span class=\"sy3\">*</span>cMaxZahl<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> NextPrime<span class=\"br0\">(</span><span class=\"kw1\">var</span> pr<span class=\"sy1\">:</span>  tRecPrime<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  ofs <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/>  svPos <span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">with</span> pr <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    svPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> rpsvPos<span class=\"sy1\">;</span><br/>    Ofs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> rpOfs<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      inc<span class=\"br0\">(</span>svPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> svPos &gt; MaxPos <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Begin</span><br/>        result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>        EXIT<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>Ofs<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> Ofs &gt;<span class=\"sy3\">=</span> cRepFldLen <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Begin</span><br/>        ofs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>rpSeg<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> BitSet<span class=\"br0\">[</span>svPos <span class=\"kw3\">AND</span> cAndMask<span class=\"br0\">]</span> <span class=\"kw3\">AND</span><br/>      searchFld<span class=\"br0\">[</span>svPos <span class=\"kw1\">DIV</span> cBitSize<span class=\"br0\">]</span> &lt;&gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    rpPrime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> rpSeg<span class=\"sy3\">*</span>Uint64<span class=\"br0\">(</span>cMaxZahl<span class=\"br0\">)</span><span class=\"sy3\">+</span>RevIdx<span class=\"br0\">[</span>Ofs<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    rpSvPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> svPos<span class=\"sy1\">;</span><br/>    rpOfs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Ofs<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> GetNthPrime<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span>tRecPrime<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> longWord<span class=\"sy1\">;</span><br/>  cnt<span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">IF</span> n &gt; MaxPos <span class=\"kw1\">then</span><br/>    EXIT<span class=\"sy1\">;</span><br/>\u00a0<br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Bis<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">DIV</span> cBitSize <span class=\"kw1\">do</span><br/>    inc<span class=\"br0\">(</span>cnt<span class=\"sy1\">,</span>PopCnt<span class=\"br0\">(</span>NativeUint<span class=\"br0\">(</span>searchFld<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">DIV</span> cBitSize<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> cnt &lt; n <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    inc<span class=\"br0\">(</span>cnt<span class=\"sy1\">,</span>PopCnt<span class=\"br0\">(</span>NativeUint<span class=\"br0\">(</span>searchFld<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  dec<span class=\"br0\">(</span>cnt<span class=\"sy1\">,</span>PopCnt<span class=\"br0\">(</span>NativeUint<span class=\"br0\">(</span>searchFld<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> InitPrimeSvPos<span class=\"br0\">(</span>i<span class=\"sy3\">*</span>Uint64<span class=\"br0\">(</span>cBitSize<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> cnt &lt; n <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">IF</span> NextPrime<span class=\"br0\">(</span>Result<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      inc<span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">Break</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ShowPrimes<span class=\"br0\">(</span>loLmt<span class=\"sy1\">,</span>HiLmt<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  p1 <span class=\"sy1\">:</span>tRecPrime<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">IF</span> HiLmt &lt; loLmt <span class=\"kw1\">then</span><br/>    exit<span class=\"sy1\">;</span><br/>  p1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> InitRecPrime<span class=\"br0\">(</span>loLmt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> p1<span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span> &lt; LoLmt <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">IF</span> <span class=\"kw1\">Not</span><span class=\"br0\">(</span>NextPrime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      EXIT<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>p1<span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span><span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> <span class=\"kw1\">Not</span><span class=\"br0\">(</span>NextPrime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Break</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> p1<span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span> &gt; HiLmt<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CountPrimes<span class=\"br0\">(</span>loLmt<span class=\"sy1\">,</span>HiLmt<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">:</span>LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  p1 <span class=\"sy1\">:</span>tRecPrime<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> HiLmt &lt; loLmt <span class=\"kw1\">then</span><br/>    exit<span class=\"sy1\">;</span><br/>  p1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> InitRecPrime<span class=\"br0\">(</span>loLmt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> p1<span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span> &lt; LoLmt <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">IF</span> <span class=\"kw1\">Not</span><span class=\"br0\">(</span>NextPrime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      EXIT<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    inc<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> <span class=\"kw1\">Not</span><span class=\"br0\">(</span>NextPrime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Break</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> p1<span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span> &gt; HiLmt<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> WriteCntSmallPrimes<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span>prPos<span class=\"sy1\">,</span>svPos <span class=\"sy1\">:</span> nativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  dec<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> n &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    EXIT<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'First '</span><span class=\"sy1\">,</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st0\">' primes '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> n &lt; Bis <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>InitPrim<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> BIS <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>InitPrim<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>n<span class=\"sy1\">,</span>Bis<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    svPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    PrPos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    p     <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> n&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">Begin</span><br/>      <span class=\"coMULTI\">{next prime}</span><br/>      inc<span class=\"br0\">(</span>svPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>p<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span>DiffFld<span class=\"br0\">[</span>prPos<span class=\"br0\">]</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> BitSet<span class=\"br0\">[</span>svPos <span class=\"kw3\">AND</span> cAndMask<span class=\"br0\">]</span> <span class=\"kw3\">AND</span> searchFld<span class=\"br0\">[</span>svPos <span class=\"kw1\">DIV</span> cBitSize<span class=\"br0\">]</span> &lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Begin</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>p<span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        dec<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>prPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> prPos <span class=\"sy3\">=</span> cRepFldLen <span class=\"kw1\">then</span><br/>        dec<span class=\"br0\">(</span>prPos<span class=\"sy1\">,</span>prPos<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//\u00a0:= 0;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> RvsNumL<span class=\"br0\">(</span><span class=\"kw1\">var</span> n<span class=\"sy1\">:</span> Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span>Uint64<span class=\"sy1\">;</span><br/><span class=\"co1\">//reverse and last digit, most of the time n &gt; base therefor repeat</span><br/><span class=\"kw1\">const</span><br/>  base <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  q<span class=\"sy1\">,</span> c<span class=\"sy1\">:</span> Int64<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  q <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    c<span class=\"sy1\">:</span><span class=\"sy3\">=</span> result <span class=\"kw1\">div</span> Base<span class=\"sy1\">;</span><br/>    q <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result<span class=\"sy3\">+</span> <span class=\"br0\">(</span>q<span class=\"sy3\">-</span>c<span class=\"br0\">)</span><span class=\"sy3\">*</span>Base<span class=\"sy1\">;</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> c<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> result &lt; Base<span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> q<span class=\"sy3\">*</span>Base<span class=\"sy3\">+</span>result<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IsEmirp<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/> lastDgt<span class=\"sy1\">:</span>NativeUint<span class=\"sy1\">;</span><br/> ofs<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/> seg <span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  seg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  lastDgt<span class=\"sy1\">:</span><span class=\"sy3\">=</span> RvsNumL<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>seg <span class=\"sy3\">=</span> n<span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>n&gt; MaxUpperLimit<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    EXIT<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">IF</span> lastDgt <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    seg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> cMaxZahl<span class=\"sy1\">;</span><br/>    ofs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy3\">-</span>seg<span class=\"sy3\">*</span> cMaxzahl<span class=\"sy1\">;</span><span class=\"co1\">//m mod cMaxZahl</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>Number<span class=\"br0\">[</span>ofs<span class=\"br0\">]</span> &lt;&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>ofs<span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      seg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> seg <span class=\"sy3\">*</span>cRepFldLen<span class=\"sy3\">+</span>number<span class=\"br0\">[</span>ofs<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> BitSet<span class=\"br0\">[</span>seg <span class=\"kw3\">AND</span> cAndMask<span class=\"br0\">]</span>  <span class=\"kw3\">AND</span> searchFld<span class=\"br0\">[</span>seg <span class=\"kw1\">DIV</span> cBitSize<span class=\"br0\">]</span> &lt;&gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> GetEmirps<span class=\"br0\">(</span>loLmt<span class=\"sy1\">,</span>HiLmt<span class=\"sy1\">:</span> Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  p1 <span class=\"sy1\">:</span>tRecPrime<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <br/>  <span class=\"kw1\">IF</span> HiLmt &lt; loLmt <span class=\"kw1\">then</span><br/>    exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> loLmt &gt; MaxUpperLimit <span class=\"kw1\">then</span><br/>    Exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> HiLmt &gt; MaxUpperLimit <span class=\"kw1\">then</span><br/>    HiLmt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MaxUpperLimit<span class=\"sy1\">;</span><br/>\u00a0<br/>  p1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> InitRecPrime<span class=\"br0\">(</span>loLmt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> p1<span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span> &lt; LoLmt <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">IF</span> <span class=\"kw1\">Not</span><span class=\"br0\">(</span>NextPrime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      EXIT<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw1\">if</span> isEmirp<span class=\"br0\">(</span>p1<span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      inc<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">iF</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span>NextPrime<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">BREAK</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> p1<span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span> &gt; HiLmt<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  T1<span class=\"sy1\">,</span>T0<span class=\"sy1\">:</span> TDateTime<span class=\"sy1\">;</span><br/>  Anzahl <span class=\"sy1\">:</span>Uint64<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span>j<span class=\"sy1\">,</span>dgtCnt<span class=\"sy1\">,</span>totalCnt <span class=\"sy1\">:</span> Uint64<span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  T0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> now<span class=\"sy1\">;</span><br/>  SieveAll<span class=\"sy1\">;</span><br/>  T1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> now<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'         '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'time for sieving '</span><span class=\"sy1\">,</span>FormatDateTime<span class=\"br0\">(</span><span class=\"st0\">'NN:SS.ZZZ'</span><span class=\"sy1\">,</span>T1<span class=\"sy3\">-</span>T0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Anzahl <span class=\"sy1\">:</span><span class=\"sy3\">=</span> BIS<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MaxPos <span class=\"kw1\">DIV</span> cBitSize<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    inc<span class=\"br0\">(</span>Anzahl<span class=\"sy1\">,</span>PopCnt<span class=\"br0\">(</span>NativeUint<span class=\"br0\">(</span>searchFld<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MaxPos <span class=\"kw3\">AND</span> cAndMask<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> n &gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    dec<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      <span class=\"kw1\">IF</span> BitSet<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw3\">AND</span> searchFld<span class=\"br0\">[</span>MaxPos <span class=\"kw1\">DIV</span> cBitSize<span class=\"br0\">]</span> &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        inc<span class=\"br0\">(</span>Anzahl<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> n&lt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'there are '</span><span class=\"sy1\">,</span>Anzahl<span class=\"sy1\">,</span><span class=\"st0\">' primes til '</span><span class=\"sy1\">,</span>MaxUpperLimit<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  WriteCntSmallPrimes<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'primes between 100 and 150: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  ShowPrimes<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span><span class=\"nu0\">150</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'count of primes between 7700 and 8000 '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>CountPrimes<span class=\"br0\">(</span><span class=\"nu0\">7700</span><span class=\"sy1\">,</span><span class=\"nu0\">8000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'the '</span><span class=\"sy1\">,</span>i<span class=\"sy1\">,</span> <span class=\"st0\">' th prime '</span><span class=\"sy1\">,</span>GetNthPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">rpPrime</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">*</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> i<span class=\"sy3\">*</span><span class=\"nu0\">25</span> &gt; MaxUpperLimit<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Count Emirps'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'             Emirp           Total'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Decimals     Count           Count'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  totalCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>  dgtCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span>  <span class=\"co1\">// 13 is not present so 13&lt;-&gt;31 isnt found</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>dgtCnt<span class=\"sy1\">,</span>GetEmirps<span class=\"br0\">(</span>  j<span class=\"sy1\">,</span>  j<span class=\"sy3\">+</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//10..00-&gt;19..99</span><br/>    inc<span class=\"br0\">(</span>dgtCnt<span class=\"sy1\">,</span>GetEmirps<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span>j<span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span>j<span class=\"sy3\">+</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//30..00-&gt;39..99</span><br/>    inc<span class=\"br0\">(</span>dgtCnt<span class=\"sy1\">,</span>GetEmirps<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy3\">*</span>j<span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy3\">*</span>j<span class=\"sy3\">+</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//70..00-&gt;79..99</span><br/>    inc<span class=\"br0\">(</span>dgtCnt<span class=\"sy1\">,</span>GetEmirps<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy3\">*</span>j<span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy3\">*</span>j<span class=\"sy3\">+</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//90..00-&gt;99..99</span><br/>    inc<span class=\"br0\">(</span>TotalCnt<span class=\"sy1\">,</span>dgtCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>dgtCnt<span class=\"sy1\">:</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span>TotalCnt<span class=\"sy1\">:</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    j<span class=\"sy1\">:</span><span class=\"sy3\">=</span>j<span class=\"sy3\">*</span><span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    dgtCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span>    <br/>  <span class=\"kw1\">until</span> j &gt;<span class=\"sy3\">=</span> MaxUpperLimit<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Prime</span><span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>nth_prime prime_count primes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># Direct solutions.</span><br/><span class=\"co1\"># primes([start],end) returns an array reference with all primes in the range</span><br/><span class=\"co1\"># prime_count([start],end) uses sieving or LMO to return fast prime counts</span><br/><span class=\"co1\"># nth_prime(n) does just that.  It runs quite fast for native size inputs.</span><br/>say <span class=\"st0\">\"First 20: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span>primes<span class=\"br0\">(</span>nth_prime<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"Between 100 and 150: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span>primes<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">150</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>say prime_count<span class=\"br0\">(</span><span class=\"nu0\">7700</span><span class=\"sy0\">,</span><span class=\"nu0\">8000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" primes between 7700 and 8000\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"${_}th prime: \"</span><span class=\"sy0\">,</span> nth_prime<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">=</span> lazy gather <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"me1\">take</span> <span class=\"kw1\">if</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"The first twenty primes:<span class=\"es0\">\\n</span>   \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"[{@primes[^20].fmt(\"</span><span class=\"re0\">%d</span><span class=\"st0\">\", ', ')}]\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"The primes between 100 and 150:<span class=\"es0\">\\n</span>   \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"[{@primes.&amp;between(100, 150).fmt(\"</span><span class=\"re0\">%d</span><span class=\"st0\">\", ', ')}]\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"The number of primes between 7,700 and 8,000:<span class=\"es0\">\\n</span>   \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">+</span><span class=\"re0\">@primes</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;between</span><span class=\"br0\">(</span><span class=\"nu0\">7700</span><span class=\"sy0\">,</span> <span class=\"nu0\">8000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"The 10,000th prime:<span class=\"es0\">\\n</span>   \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@primes</span><span class=\"br0\">[</span><span class=\"nu0\">9999</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> between <span class=\"br0\">(</span><span class=\"re0\">@p</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"sy0\">,</span> <span class=\"re0\">$u</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"kw1\">for</span> <span class=\"re0\">@p</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"me1\">take</span> <span class=\"kw1\">if</span> <span class=\"re0\">$l</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$_</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$u</span><span class=\"sy0\">;</span> <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$_</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$u</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 59, "block": "<pre class=\"text highlighted_source\">sequence primes = {2,3,5,7}<br/>atom sieved = 10<br/>\u00a0<br/>procedure add_block()<br/>integer N = min((sieved-1)*sieved,400000)<br/>sequence sieve = repeat(1,N)    -- sieve[i] is really i+sieved<br/>    for i=2 to length(primes) do -- (evens filtered on output)<br/>        atom p = primes[i], p2 = p*p<br/>        if p2&gt;sieved+N then exit end if<br/>        if p2&lt;sieved+1 then<br/>            p2 += ceil((sieved+1-p2)/p)*p<br/>        end if<br/>        p2 -= sieved<br/>        if and_bits(p2,1)=0 then p2 += p end if<br/>--      if sieve[p2] then           -- dang!<br/>            for k=p2 to N by p*2 do<br/>                sieve[k] = 0<br/>            end for<br/>--      end if<br/>    end for<br/>    for i=1 to N by 2 do<br/>        if sieve[i] then<br/>            primes &amp;= i+sieved<br/>        end if<br/>    end for<br/>    sieved += N<br/>end procedure<br/>\u00a0<br/>function is_prime(integer n)<br/>    while sieved&lt;n do<br/>        add_block()<br/>    end while<br/>    return binary_search(n,primes)&gt;0<br/>end function<br/>\u00a0<br/>atom t0 = time()<br/>while length(primes)&lt;20 do add_block() end while<br/>printf(1,\"The first 20 primes are: \")  \u00a0?primes[1..20]<br/>while sieved&lt;150 do add_block() end while<br/>sequence s = {}<br/>for k=abs(binary_search(100,primes)) to length(primes) do<br/>    integer p = primes[k]<br/>    if p&gt;150 then exit end if<br/>    s &amp;= p<br/>end for<br/>printf(1,\"The primes between 100 and 150 are: \")   \u00a0?s<br/>s = {}<br/>for i=7700 to 8000 do<br/>    if is_prime(i) then s&amp;=i end if<br/>end for<br/>printf(1,\"There are\u00a0%d primes between 7700 and 8000.\\n\",length(s))<br/>for i=1 to 8 do<br/>    integer k = power(10,i)<br/>    while length(primes)&lt;k do<br/>        add_block()<br/>    end while<br/>    printf(1,\"The\u00a0%dth prime is\u00a0:\u00a0%d\\n\",{k,primes[k]})<br/>end for<br/>?time()-t0</pre>"}, {"lang": "PicoLisp", "loc": 37, "block": "<pre class=\"text highlighted_source\">(de prime? (N Lst)<br/>   (let S (sqrt N)<br/>      (for D Lst<br/>         (T (&gt; D S) T)<br/>         (T (=0 (% N D)) NIL) ) ) )<br/>(de primeseq (A B)<br/>   (let (I 1 R)<br/>      (nth<br/>         (make<br/>            (link 2)<br/>            (while (&gt; A (inc 'I 2))<br/>               (and (prime? I (made)) (link I)) )<br/>            (setq R (length (made)))<br/>            (while (&gt; B I)<br/>               (and (prime? I (made)) (link I))<br/>               (inc 'I 2) ) )<br/>         (inc R) ) ) )<br/>(de take (N)<br/>   (let I 1<br/>      (make<br/>         (link 2)<br/>         (do (dec N)<br/>            (until (prime? (inc 'I 2) (made)))<br/>            (link I) ) ) ) )<br/>\u00a0<br/>(prin \"First 20 primes: \")<br/>(println (take 20))<br/>(prin \"Primes between 100 and 150: \")<br/>(println (primeseq 100 150))<br/>(prinl<br/>   \"Number of primes between 7700 and 8000: \"<br/>   (length (primeseq 7700 8000)) )<br/>(for N (10 100 1000 10000 100000 1000000)<br/>   (prinl<br/>      N<br/>      \"th prime: \"<br/>      (last (take N)) ) )</pre>"}, {"lang": "PureBasic", "loc": 54, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">DisableDebugger</span><br/><span class=\"kw1\">Define</span> StartTime.i<span class=\"sy0\">=</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b IsPrime<span class=\"br0\">(</span>n.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i.i<span class=\"sy0\">=</span><span class=\"nu0\">5</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>2<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>3<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">While</span> i<span class=\"sy0\">*</span>i<span class=\"sy0\">&lt;=</span>n<br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>    i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">%</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>    i<span class=\"sy0\">+</span><span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Wend</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Extensible prime generator\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> c.i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, n.i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"First twenty: \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> c<span class=\"sy0\">&lt;</span><span class=\"nu0\">20</span><br/>    <span class=\"kw1\">If</span> IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>      c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndIf</span><br/>    n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\nBetween 100 and 150: \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">100</span> <span class=\"kw1\">To</span> <span class=\"nu0\">150</span><br/>    <span class=\"kw1\">If</span> IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\nNumber beween 7'700 and 8'000: \"</span><span class=\"br0\">)</span><br/>  c<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">7700</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8000</span><br/>    c<span class=\"sy0\">+</span>IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\n10'000th prime: \"</span><span class=\"br0\">)</span><br/>  c<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">While</span> c<span class=\"sy0\">&lt;</span><span class=\"nu0\">10000</span><br/>    n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    c<span class=\"sy0\">+</span>IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span>    <br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">EndIf</span><br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\nRuntime milliseconds: \"</span><span class=\"sy0\">+</span><br/>      <span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>StartTime<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\">islice<span class=\"br0\">(</span>count<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 33, "block": "<pre class=\"scheme highlighted_source\">#lang racket<br/><span class=\"co1\">;; Using the prime functions from:</span><br/><span class=\"br0\">(</span>require math<span class=\"sy0\">/</span>number<span class=\"sy0\">-</span>theory<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>displayln <span class=\"st0\">\"Show the first twenty primes.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>next<span class=\"sy0\">-</span>primes <span class=\"nu0\">1</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>displayln <span class=\"st0\">\"Show the primes between 100 and 150.\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; Note that in each of the in-range filters I \"add1\" to the stop value, so that (in this case) 150 is</span><br/><span class=\"co1\">;; considered. I'm pretty sure it's not prime... but technology moves so fast nowadays that things</span><br/><span class=\"co1\">;; might have changed!</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>sequence<span class=\"sy0\">-</span>filter prime? <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">100</span> <span class=\"br0\">(</span>add1 <span class=\"nu0\">150</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> i<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>displayln <span class=\"st0\">\"Show the number of primes between 7,700 and 8,000.\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; (for/sum (...) 1) counts the values in a sequence</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">/</span>sum <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>sequence<span class=\"sy0\">-</span>filter prime? <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">7700</span> <span class=\"br0\">(</span>add1 <span class=\"nu0\">8000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>displayln <span class=\"st0\">\"Show the 10,000th prime.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>nth<span class=\"sy0\">-</span>prime <span class=\"br0\">(</span>sub1 <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; (nth-prime 0) =&gt; 2</span><br/>\u00a0<br/><span class=\"co1\">;; If a languages in-built prime generator is extensible or is guaranteed to generate primes up to a</span><br/><span class=\"co1\">;; system limit, (2^31 or memory overflow for example), then this may be used as long as an</span><br/><span class=\"co1\">;; explanation of the limits of the prime generator is also given. (Which may include a link</span><br/><span class=\"co1\">;; to/excerpt from, language documentation). </span><br/><span class=\"co1\">;;</span><br/><span class=\"co1\">;; Full details in:</span><br/><span class=\"co1\">;; [[http://docs.racket-lang.org/math/number-theory.html?q=prime%3F#%28part._primes%29]]</span><br/><span class=\"co1\">;; When reading the manual, note that \"Integer\" and \"Natural\" are unlimited (or bounded by whatever</span><br/><span class=\"co1\">;; big number representation there is (and the computational complexity of the work being asked).</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"nu0\">2</span><span class=\"sy0\">^</span><span class=\"nu0\">256</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">2</span><span class=\"sy0\">^</span><span class=\"nu0\">256</span><br/><span class=\"br0\">(</span>next<span class=\"sy0\">-</span>prime <span class=\"nu0\">2</span><span class=\"sy0\">^</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; (Oh, and this is a 64-bit laptop, I left my 256-bit PC in the office.)</span></pre>"}, {"lang": "REXX", "loc": 46, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates and displays primes using an extendible prime number generator*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> f <span class=\"sy0\">.</span>;    <span class=\"kw1\">if</span> f==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> f=<span class=\"nu0\">20</span>            <span class=\"coMULTI\">/*allow specifying number for  1 \u2500\u2500\u25ba F.*/</span><br/><span class=\"kw1\">call</span> primes f;              <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> f;   $=$ @<span class=\"sy0\">.</span>j;    <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">say</span> <span class=\"st0\">'first'</span>    f    <span class=\"st0\">'primes are:'</span>    $<br/>        <span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> primes -<span class=\"nu0\">150</span>;           <span class=\"kw1\">do</span> j=<span class=\"nu0\">100</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">150</span>;   <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>j==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;  $=$ j; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">say</span> <span class=\"st0\">'the primes between 100 to 150 (inclusive) are:'</span>    $<br/>        <span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> primes -<span class=\"nu0\">8000</span>;          <span class=\"kw1\">do</span> j=<span class=\"nu0\">7700</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">8000</span>; <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>j==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;  $=$ j; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">say</span> <span class=\"st0\">'the number of primes between 7700 and 8000 (inclusive) is:'</span>  <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> primes <span class=\"nu0\">10000</span><br/>        <span class=\"kw1\">say</span> <span class=\"st0\">'the 10000th prime is:'</span>   @<span class=\"sy0\">.</span>10000<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>primes: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span> s<span class=\"sy0\">.</span> @<span class=\"sy0\">.</span> $ #;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> H,,$;           Hneg=H<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>;      H=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>H<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span><span class=\"st0\">'!.0'</span><span class=\"br0\">)</span>==<span class=\"st0\">\"LIT\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>         <span class=\"coMULTI\">/*1st time here?  Then initialize stuff*/</span><br/>                                     \u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;  @<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;  s<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>   <span class=\"coMULTI\">/*!.x=a prime; @.n=Nth prime.*/</span><br/>                                      L=<span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span>    <span class=\"coMULTI\">/*gen some low primes.*/</span><br/>                                         <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>;  p=<span class=\"kw6\">word</span><span class=\"br0\">(</span>L, #<span class=\"br0\">)</span>; @<span class=\"sy0\">.</span>#=p;\u00a0!<span class=\"sy0\">.</span>p=<span class=\"nu0\">1</span><br/>                                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/>                                      #=#-<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>0=#;  s<span class=\"sy0\">.</span>#<a class=\"__cf_email__\" data-cfemail=\"a29fe2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"coMULTI\">/*set #\u2261numb. of primes*/</span><br/>                                      <span class=\"kw3\">end</span><br/>        <span class=\"kw1\">if</span> Hneg  <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span>  H<span class=\"sy0\">&lt;</span><a class=\"__cf_email__\" data-cfemail=\"3f027f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>   <span class=\"coMULTI\">/*do we have a high enough  P  already?*/</span><br/>                                   <span class=\"kw3\">else</span> <span class=\"kw1\">nop</span>      <span class=\"coMULTI\">/*this is used to match the above THEN.*/</span><br/>                 <span class=\"kw3\">else</span>  <span class=\"kw1\">if</span>  H<span class=\"sy0\">&lt;</span>=#    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>   <span class=\"coMULTI\">/*are there enough primes currently\u00a0?  */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  gen more primes within range.  */</span><br/>           <span class=\"kw1\">do</span> <a class=\"__cf_email__\" data-cfemail=\"99f3a4d9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span># + <span class=\"nu0\">2</span>   <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>                   <span class=\"coMULTI\">/*find primes until have   H   Primes. */</span><br/>           <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">3</span> ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>             <span class=\"coMULTI\">/*is  J  divisible by three?           */</span><br/>           <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> j <span class=\"st0\">''</span> -<span class=\"nu0\">1</span> _;  <span class=\"kw1\">if</span> _==<span class=\"nu0\">5</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>     <span class=\"coMULTI\">/*is the right\u2500most digit a 5?*/</span><br/>           <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">7</span> ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>             <span class=\"coMULTI\">/*is  J  divisible by  seven?          */</span><br/>           <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">11</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>             <span class=\"coMULTI\">/* \"  \"       \"     \"  eleven?         */</span><br/>           <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">13</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>             <span class=\"coMULTI\">/* \"  \"       \"     \"  thirteen?       */</span><br/>           <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">17</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>             <span class=\"coMULTI\">/* \"  \"       \"     \"  seventeen?      */</span><br/>           <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">19</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>             <span class=\"coMULTI\">/* \"  \"       \"     \"  nineteen?       */</span><br/>                                                 <span class=\"coMULTI\">/*[\u2191]  above divisors go up to  L  end.*/</span><br/>                 <span class=\"kw1\">do</span> k=!<span class=\"sy0\">.</span>0  <span class=\"kw2\">while</span>  s<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>=j         <span class=\"coMULTI\">/*divide by the known  odd  primes.    */</span><br/>                 <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span>@<span class=\"sy0\">.</span>k==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j    <span class=\"coMULTI\">/*Is  J  \u00f7 by a prime?  \u00acprime.     ___*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                     <span class=\"coMULTI\">/* [\u2191]  divide by odd primes up to \u221a J */</span><br/>           #=#+<span class=\"nu0\">1</span>                                 <span class=\"coMULTI\">/*bump the number of primes found.     */</span><br/>           @<span class=\"sy0\">.</span>#=j;        s<span class=\"sy0\">.</span>#=j <span class=\"sy0\">*</span> j;     \u00a0!<span class=\"sy0\">.</span>j=<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*assign to sparse array;  prime\u00b2;  P#.*/</span><br/>           <span class=\"kw1\">if</span> Hneg  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> H<span class=\"sy0\">&lt;</span><a class=\"__cf_email__\" data-cfemail=\"5c611c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>   <span class=\"coMULTI\">/*is this a high enough prime?         */</span><br/>                                    <span class=\"kw3\">else</span> <span class=\"kw1\">nop</span>     <span class=\"coMULTI\">/*used to match the above  THEN.       */</span><br/>                    <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> H<span class=\"sy0\">&lt;</span>=#    <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>   <span class=\"coMULTI\">/*have enough primes been generated?   */</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                           <span class=\"coMULTI\">/* [\u2191]  keep generating until enough.  */</span><br/>        <span class=\"kw1\">return</span>                                   <span class=\"coMULTI\">/*return to invoker with more primes.  */</span></pre>"}, {"lang": "Ring", "loc": 40, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see \"first twenty primes\u00a0: \"<br/>i = 1<br/>nr = 0<br/>while i &lt;= 20<br/>      nr += 1     <br/>      if isPrime(nr) see \" \" + nr i += 1 ok<br/>end<br/>\u00a0<br/>see \"primes between 100 and 150\u00a0: \"<br/>for nr = 100 to 150<br/>    if isPrime(nr) see \" \" + nr ok<br/>next<br/>see nl<br/>\u00a0<br/>see \"primes between 7,700 and 8,000\u00a0: \"<br/>i = 0<br/>for nr = 7700 to 8000<br/>    if isPrime(nr) i += 1 ok<br/>next<br/>see i + nl<br/>\u00a0<br/>see \"The 10,000th prime\u00a0: \"<br/>i = 1<br/>nr = 0<br/>while i &lt;= 10000<br/>      nr += 1     <br/>      if isPrime(nr) i += 1 ok<br/>end<br/>see nr + nl<br/>\u00a0<br/>func isPrime n<br/>     if n &lt;= 1 return false ok<br/>     if n &lt;= 3 return true ok<br/>     if (n &amp; 1) = 0 return false ok<br/>     for t = 3 to sqrt(n) step 2<br/>         if (n\u00a0% t) = 0 return false ok<br/>     next<br/>     return true<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"prime\"</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> Prime.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> Prime.<span class=\"me1\">each</span><span class=\"br0\">(</span><span class=\"nu0\">150</span><span class=\"br0\">)</span>.<span class=\"me1\">drop_while</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pr<span class=\"sy0\">|</span> pr <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> Prime.<span class=\"me1\">each</span><span class=\"br0\">(</span><span class=\"nu0\">8000</span><span class=\"br0\">)</span>.<span class=\"me1\">drop_while</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pr<span class=\"sy0\">|</span> pr <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7700</span><span class=\"br0\">}</span>.<span class=\"me1\">count</span><br/><span class=\"kw3\">puts</span> Prime.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>_000<span class=\"br0\">)</span>.<span class=\"me1\">last</span></pre>"}, {"lang": "Rust", "loc": 15, "block": "<pre class=\"text highlighted_source\">mod pagesieve;<br/>\u00a0<br/>use pagesieve::{count_primes_paged, primes_paged};<br/>\u00a0<br/>fn main() {<br/>    println!(\"First 20 primes:\\n {:?}\",<br/>             primes_paged().take(20).collect::&lt;Vec&lt;_&gt;&gt;());<br/>    println!(\"Primes between 100 and 150:\\n {:?}\",<br/>             primes_paged().skip_while(|&amp;x| x &lt; 100)<br/>                           .take_while(|&amp;x| x &lt; 150)<br/>                           .collect::&lt;Vec&lt;_&gt;&gt;());<br/>    let diff = count_primes_paged(8000) - count_primes_paged(7700);<br/>    println!(\"There are {} primes between 7,700 and 8,000\", diff);<br/>    println!(\"The 10,000th prime is {}\", primes_paged().nth(10_000).unwrap());<br/>}</pre>"}, {"lang": "Seed7", "loc": 64, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: isPrime (in integer: number) is func<br/>  result<br/>    var boolean: prime is FALSE;<br/>  local<br/>    var integer: count is 2;<br/>  begin<br/>    if number = 2 then<br/>      prime\u00a0:= TRUE;<br/>    elsif number &gt; 2 then<br/>      while number rem count &lt;&gt; 0 and count * count &lt;= number do<br/>        incr(count);<br/>      end while;<br/>      prime\u00a0:= number rem count &lt;&gt; 0;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>var integer: currentPrime is 1;<br/>var integer: primeNum is 0;<br/>\u00a0<br/>const func integer: getPrime is func<br/>  result<br/>    var integer: nextPrime is 0;<br/>  begin<br/>    repeat<br/>      incr(currentPrime);<br/>    until isPrime(currentPrime);<br/>    nextPrime\u00a0:= currentPrime;<br/>    incr(primeNum);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: aPrime is 0;<br/>    var integer: count is 0;<br/>  begin<br/>    write(\"First twenty primes:\");<br/>    while primeNum &lt; 20 do<br/>      write(\" \" &lt;&amp; getPrime);<br/>    end while;<br/>    writeln;<br/>    repeat<br/>      aPrime\u00a0:= getPrime;<br/>    until aPrime &gt;= 100;<br/>    write(\"Primes between 100 and 150:\");<br/>    while aPrime &lt;= 150 do<br/>      write(\" \" &lt;&amp; aPrime);<br/>      aPrime\u00a0:= getPrime;<br/>    end while;<br/>    writeln;<br/>    repeat<br/>      aPrime\u00a0:= getPrime;<br/>    until aPrime &gt;= 7700;<br/>    while aPrime &lt;= 8000 do<br/>      incr(count);<br/>      aPrime\u00a0:= getPrime;<br/>    end while;<br/>    writeln(\"Number of primes between 7,700 and 8,000: \" &lt;&amp; count);<br/>    repeat<br/>      aPrime\u00a0:= getPrime;<br/>    until primeNum = 10000;<br/>    writeln(\"The 10,000th prime: \" &lt;&amp; getPrime);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">var nt = frequire<span class=\"br0\">(</span><span class=\"st0\">'ntheory'</span><span class=\"br0\">)</span><br/>\u00a0<br/>say <span class=\"br0\">(</span><span class=\"st0\">\"First 20: \"</span>, nt.<span class=\"me1\">primes</span><span class=\"br0\">(</span>nt.<span class=\"me1\">nth_prime</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span><span class=\"st0\">\"Between 100 and 150: \"</span>, nt.<span class=\"me1\">primes</span><span class=\"br0\">(</span><span class=\"nu0\">100</span>,<span class=\"nu0\">150</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>nt.<span class=\"me1\">prime_count</span><span class=\"br0\">(</span><span class=\"nu0\">7700</span>,<span class=\"nu0\">8000</span><span class=\"br0\">)</span>, <span class=\"st0\">\" primes between 7700 and 8000\"</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span><span class=\"st0\">\"10,000th prime: \"</span>, nt.<span class=\"me1\">nth_prime</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>_000<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 54, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"co1\"># An iterative version of the Sieve of Eratosthenes.</span><br/><span class=\"co1\"># Effective limit is the size of memory.</span><br/>coroutine primes apply <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    yield<br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span>yield <span class=\"br0\">[</span>coroutine primes_<span class=\"br0\">[</span><span class=\"kw2\">incr</span> p<span class=\"br0\">]</span> apply <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tyield <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> plist <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">2</span><span class=\"br0\">}</span> true <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> found <span class=\"nu0\">0</span><br/>\t    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$plist</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span><span class=\"re0\">$p</span>==<span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> found <span class=\"nu0\">1</span><br/>\t\t    <span class=\"kw1\">break</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$found</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> plist <span class=\"re0\">$n</span><br/>\t\tyield <span class=\"re0\">$n</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> p <span class=\"br0\">[</span>primes<span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> primes <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$primes</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> primes <span class=\"br0\">[</span><span class=\"re0\">$p</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> 1st20=<span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$primes</span> ,<span class=\"br0\">]</span><br/><span class=\"kw1\">rename</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> p <span class=\"br0\">[</span>primes<span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> primes <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">150</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">100</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">150</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> primes <span class=\"re0\">$n</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"nu0\">100</span>-<span class=\"nu0\">150</span>=<span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$primes</span> ,<span class=\"br0\">]</span><br/><span class=\"kw1\">rename</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> p <span class=\"br0\">[</span>primes<span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> count <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">8000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">incr</span> count <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">7700</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span><span class=\"sy0\">&lt;</span>=<span class=\"nu0\">8000</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> count7700-<span class=\"nu0\">8000</span>=<span class=\"re0\">$count</span><br/><span class=\"kw1\">rename</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> p <span class=\"br0\">[</span>primes<span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> count <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> count<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> prime <span class=\"br0\">[</span><span class=\"re0\">$p</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> prime10000=<span class=\"re0\">$prime</span><br/><span class=\"kw1\">rename</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 74, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> Primes() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, n <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, temp$<br/><span class=\"kw4\">Dim</span> t <span class=\"kw4\">As</span> <span class=\"kw1\">Single</span><br/>    t = Timer<br/>\u00a0<br/>    n = 133218295 <span class=\"co1\">'limit for an Array of Longs with VBA on my computer<br/></span>    Primes = ListPrimes(n)<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"For N = \"</span> &amp; Format(n, <span class=\"st0\">\"#,##0\"</span>) &amp; <span class=\"st0\">\", execution time\u00a0: \"</span> &amp; _<br/>        Format(Timer - t, <span class=\"st0\">\"0.000 s\"</span>) &amp; <span class=\"st0\">\", \"</span> &amp; _<br/>        Format(<span class=\"kw4\">UBound</span>(Primes) + 1, <span class=\"st0\">\"#,##0\"</span>) &amp; <span class=\"st0\">\" primes numbers.\"</span><br/>\u00a0<br/>    <span class=\"co1\">'First twenty primes<br/></span>    <span class=\"kw3\">For</span> n = 0 <span class=\"kw3\">To</span> 19<br/>        temp = temp &amp; <span class=\"st0\">\", \"</span> &amp; Primes(n)<br/>    <span class=\"kw3\">Next</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"First twenty primes\u00a0: \"</span>; Mid(temp, 3)<br/>    <span class=\"co1\">'Primes between 100 and 150<br/></span>    n = 0: temp = vbNullString<br/>    <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> Primes(n) &lt; 100<br/>        n = n + 1<br/>    <span class=\"kw3\">Loop</span><br/>    <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> Primes(n) &lt; 150<br/>        temp = temp &amp; <span class=\"st0\">\", \"</span> &amp; Primes(n)<br/>        n = n + 1<br/>    <span class=\"kw3\">Loop</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Primes between 100 and 150\u00a0: \"</span> &amp; Mid(temp, 3)<br/>    <span class=\"co1\">'Number of primes between 7,700 and 8,000<br/></span>    <span class=\"kw4\">Dim</span> ccount <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    n = 0<br/>    <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> Primes(n) &lt; 7700<br/>        n = n + 1<br/>    <span class=\"kw3\">Loop</span><br/>    <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> Primes(n) &lt; 8000<br/>        ccount = ccount + 1<br/>        n = n + 1<br/>    <span class=\"kw3\">Loop</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Number of primes between 7,700 and 8,000\u00a0: \"</span> &amp; ccount<br/>    <span class=\"co1\">'The 10 x Xth prime<br/></span>    n = 1<br/>    <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> n &lt;= 100000<br/>        n = n * 10<br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"The \"</span> &amp; n &amp; <span class=\"st0\">\"th prime: \"</span>; Format(Primes(n - 1), <span class=\"st0\">\"#,##0\"</span>)<br/>    <span class=\"kw3\">Loop</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"VBA has a limit in array's dim\"</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"With my computer, the limit for an array of Long is\u00a0: 133 218 295\"</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"The last prime I could find is the\u00a0: \"</span> &amp; _<br/>        Format(<span class=\"kw4\">UBound</span>(Primes), <span class=\"st0\">\"#,##0\"</span>) &amp; <span class=\"st0\">\"th, Value\u00a0: \"</span> &amp; _<br/>        Format(Primes(<span class=\"kw4\">UBound</span>(Primes)), <span class=\"st0\">\"#,##0\"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> ListPrimes(MAX <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>()<br/><span class=\"kw4\">Dim</span> t() <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, L() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, c <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, s <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">ReDim</span> t(2 <span class=\"kw3\">To</span> MAX)<br/>    <span class=\"kw4\">ReDim</span> L(MAX \\ 2)<br/>    s = Sqr(MAX)<br/>    <span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> s <span class=\"kw3\">Step</span> 2<br/>        <span class=\"kw3\">If</span> t(i) = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>            <span class=\"kw3\">For</span> j = i * i <span class=\"kw3\">To</span> MAX <span class=\"kw3\">Step</span> i<br/>                t(j) = <span class=\"kw5\">True</span><br/>            <span class=\"kw3\">Next</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    L(0) = 2<br/>    <span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> MAX <span class=\"kw3\">Step</span> 2<br/>        <span class=\"kw3\">If</span> t(i) = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>            c = c + 1<br/>            L(c) = i<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> L(c)<br/>    ListPrimes = L<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "zkl", "loc": 30, "block": "<pre class=\"text highlighted_source\">// http://stackoverflow.com/revisions/10733621/4<br/>\u00a0<br/>fcn postponed_sieve(){            # postponed sieve, by Will Ness      <br/>   vm.yield(2); vm.yield(3);\t  # original code David Eppstein, <br/>   vm.yield(5); vm.yield(7);      #        ActiveState Recipe 2002<br/>   D:=Dictionary();               <br/>   ps:=Utils.Generator(postponed_sieve);  # a separate Primes Supply:<br/>   p:=ps.pump(2,Void);            # (3) a Prime to add to dict<br/>   q:=p*p;                        # (9) when its sQuare is <br/>   c:=9;                          # the next Candidate<br/>   while(1){<br/>      if (not D.holds(c)){        # not a multiple of any prime seen so far:<br/>         if (c &lt; q) vm.yield(c);  #   a prime, or<br/>\t else{   # (c==q):        #   the next prime's square:<br/>            add(D,c + 2*p,2*p);   #     (9+6,6\u00a0: 15,21,27,33,...)<br/>\t    p=ps.next();          #     (5)<br/>\t    q=p*p;                #     (25)<br/>\t }<br/>      }else{                      # 'c' is a composite:<br/>\t s\u00a0:= D.pop(c);           #   step of increment<br/>\t add(D,c + s,s);          #   next multiple, same step<br/>      }<br/>      c += 2;                     # next odd candidate<br/>   }<br/>}<br/>\u00a0<br/>fcn add(D,x,s){                   # make no multiple keys in Dict<br/>   while(D.holds(x)){ x += s }    # increment by the given step<br/>   D[x] = s;<br/>}</pre>"}]}