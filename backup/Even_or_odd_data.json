{"task": "Even_or_odd", "blocks": [{"lang": "0815", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>}:s:|=&lt;:2:x~#:e:=/~%~&lt;:20:~$=&lt;:73:x&lt;:69:~$~$~&lt;:20:~$=^:o:&lt;:65:<br/>x&lt;:76:=$=$~$&lt;:6E:~$&lt;:a:~$^:s:}:o:&lt;:6F:x&lt;:64:x~$~$$&lt;:a:~$^:s:<br/>\u00a0</pre>"}, {"lang": "6502 Assembly", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>        .lf  evenodd6502.lst<br/>        .cr  6502<br/>        .tf  evenodd6502.obj,ap1<br/>;------------------------------------------------------<br/>; Even or Odd for the 6502 by barrym95838 2014.12.10<br/>; Thanks to sbprojects.com for a very nice assembler!<br/>; The target for this assembly is an Apple II with<br/>;   mixed-case output capabilities.  Apple IIs like to<br/>;   work in '+128' ascii, and this version is tailored<br/>;   to that preference.<br/>; Tested and verified on AppleWin 1.20.0.0<br/>;------------------------------------------------------<br/>; Constant Section<br/>;<br/>CharIn   =   $fd0c     \u00a0;Specific to the Apple II<br/>CharOut  =   $fded     \u00a0;Specific to the Apple II<br/>;------------------------------------------------------<br/>; The main program<br/>;<br/>main    ldy  #sIntro-sbase<br/>        jsr  puts      \u00a0;Print Intro<br/>loop    jsr  CharIn    \u00a0;Get a char from stdin<br/>        cmp  #$83      \u00a0;Ctrl-C?<br/>        beq  done      \u00a0;  yes:  end program<br/>        jsr  CharOut   \u00a0;Echo char<br/>        ldy  #sOdd-sbase\u00a0;Pre-load odd string<br/>        lsr            \u00a0;LSB of char to carry flag<br/>        bcs  isodd<br/>        ldy  #sEven-sbase<br/>isodd   jsr  puts      \u00a0;Print appropriate response<br/>        beq  loop      \u00a0;Always taken<br/>; Output NUL-terminated string @ offset Y<br/>;<br/>puts    lda  sbase,y   \u00a0;Get string char<br/>        beq  done      \u00a0;Done if NUL<br/>        jsr  CharOut   \u00a0;Output the char<br/>        iny            \u00a0;Point to next char<br/>        bne  puts      \u00a0;Loop up to 255 times<br/>done    rts            \u00a0;Return to caller<br/>;------------------------------------------------------<br/>; String Constants (in '+128' ascii, Apple II style)<br/>;<br/>sbase:                 \u00a0;String base address<br/>sIntro  .az     -\"Hit any key (Ctrl-C to quit):\",-#13<br/>sEven   .az     -\" is even.\",-#13<br/>sOdd    .az     -\" is odd.\",-#13<br/>;------------------------------------------------------<br/>        .en<br/>\u00a0</pre>"}, {"lang": "8th", "loc": 4, "block": "<pre class=\"text highlighted_source\">: odd? \\ n -- boolean<br/>    dup 1 n:band 1 n:=\u00a0;<br/>: even? \\ n -- boolean <br/>    odd? not\u00a0;</pre>"}, {"lang": "ABAP", "loc": 13, "block": "<pre class=\"abap highlighted_source\">\u00a0<br/>cl_demo_output<span class=\"sy0\">=&gt;</span><span class=\"me2\">display</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">VALUE</span> string_table<span class=\"br0\">(</span><br/>    <span class=\"kw4\">FOR</span> i <span class=\"sy1\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">6</span> <span class=\"br0\">(</span><br/>      COND <span class=\"kw4\">string</span><span class=\"br0\">(</span><br/>        LET r <span class=\"sy1\">=</span> i <span class=\"kw4\">MOD</span> <span class=\"nu0\">2</span> <span class=\"kw4\">IN</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> r <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw4\">THEN</span> |<span class=\"br0\">{</span> i <span class=\"br0\">}</span> <span class=\"kw4\">is</span> even|<br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">ELSE</span></a> |<span class=\"br0\">{</span> i <span class=\"br0\">}</span> <span class=\"kw4\">is</span> odd|<br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 15, "block": "<pre class=\"ada highlighted_source\"><span class=\"co1\">-- Ada has bitwise operators in package Interfaces,</span><br/><span class=\"co1\">-- but they work with Interfaces.Unsigned_*** types only.</span><br/><span class=\"co1\">-- Use rem or mod for Integer types, and let the compiler</span><br/><span class=\"co1\">-- optimize it.</span><br/><span class=\"kw1\">declare</span><br/>   N\u00a0: Integer\u00a0:= <span class=\"nu0\">5</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> N <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Even number\"</span><span class=\"br0\">)</span>;<br/>   elseif N <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> /= <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Odd number\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">else</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Something went really wrong!\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">end</span>;</pre>"}, {"lang": "Aime", "loc": 5, "block": "<pre class=\"text highlighted_source\">if (x &amp; 1) {<br/>    # x is odd<br/>} else {<br/>    # x is even<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 9, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># Algol 68 has a standard operator: ODD which returns TRUE if its integer  #</span><br/><span class=\"coMULTI\"># operand is odd and FALSE if it is even                                   #</span><br/><span class=\"coMULTI\"># E.g.:                                                                    #</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> n<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Enter an integer: \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>read<span class=\"br0\">(</span> <span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" is \"</span><span class=\"sy1\">,</span> <span class=\"kw2\">IF</span> <span class=\"kw8\">ODD</span> n <span class=\"kw2\">THEN</span> <span class=\"st0\">\"odd\"</span> <span class=\"kw2\">ELSE</span> <span class=\"st0\">\"even\"</span> <span class=\"kw2\">FI</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ALGOL W", "loc": 8, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% the Algol W standard procedure odd returns true if its integer \u00a0%<br/>   \u00a0% parameter is odd, false if it is even                          \u00a0%<br/>    for i\u00a0:= 1, 1702, 23, -26<br/>    do begin<br/>        write( i, \" is \", if odd( i ) then \"odd\" else \"even\" )<br/>    end for_i<br/>end.</pre>"}, {"lang": "AntLang", "loc": 2, "block": "<pre class=\"text highlighted_source\">odd: {x mod 2}<br/>even: {1 - x mod 2}</pre>"}, {"lang": "APL", "loc": 4, "block": "<pre class=\"text highlighted_source\">      2|28<br/>0<br/>      2|37<br/>1</pre>"}, {"lang": "AppleScript", "loc": 8, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> nList <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> n <span class=\"kw3\">in</span> nList<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span> <span class=\"kw3\">then</span><br/>        log <span class=\"st0\">\"Value \"</span> <span class=\"sy0\">&amp;</span> n <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" is even.\"</span><br/>    <span class=\"kw3\">else</span><br/>        log <span class=\"st0\">\"Value \"</span> <span class=\"sy0\">&amp;</span> n <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" is odd.\"</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span></pre>"}, {"lang": "Arendelle", "loc": 1, "block": "<pre>( input , \"Please enter a number: \" )\n\n{ @input\u00a0% 2 = 0 ,\n\n\t\"| @input | is even!\"\n,\n\t\"| @input | is odd!\"\n}</pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"ahk highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span> int <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"co1\">; do odd stuff</span><br/><span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t<span class=\"co1\">; do even stuff</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 7, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> isodd<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw6\">return</span> <span class=\"br0\">(</span>x<span class=\"sy3\">%</span>2<span class=\"br0\">)</span><span class=\"sy2\">!=</span><span class=\"nu0\">0</span>; <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> iseven<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw6\">return</span> <span class=\"br0\">(</span>x<span class=\"sy3\">%</span>2<span class=\"br0\">)</span><span class=\"sy2\">==</span><span class=\"nu0\">0</span>; <br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 5, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Even or odd</span><br/><span class=\"kw1\">OPTION</span> MEMTYPE <span class=\"kw1\">int</span><br/>SPLIT ARGUMENT$ BY <span class=\"st0\">\" \"</span> <span class=\"kw1\">TO</span> arg$ SIZE <span class=\"kw1\">dim</span><br/>n = <span class=\"kw1\">IIF</span>$<span class=\"br0\">(</span><span class=\"kw1\">dim</span> &lt; <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span>, <span class=\"kw1\">VAL</span><span class=\"br0\">(</span>arg$<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> n, <span class=\"st0\">\" is \"</span>, <span class=\"kw1\">IIF</span>$<span class=\"br0\">(</span>EVEN<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"st0\">\"even\"</span>, <span class=\"st0\">\"odd\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">10 INPUT \"ENTER A NUMBER: \";N<br/>20 IF N/2 &lt;&gt; INT(N/2) THEN PRINT \"THE NUMBER IS ODD\":GOTO 40<br/>30 PRINT \"THE NUMBER IS EVEN\"<br/>40 END</pre>"}, {"lang": "Batch File", "loc": 16, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p i=Insert number: <br/><span class=\"co2\"><br/>::bitwise and</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"test1=<span class=\"sy0\">%</span><span class=\"re3\">i</span><span class=\"sy0\">%&amp;</span>1\"<br/><span class=\"co2\"><br/>::divide last character by 2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a test2=<span class=\"sy0\">%</span><span class=\"re3\">i</span>:~-1<span class=\"sy0\">%</span>/2<br/><span class=\"co2\"><br/>::modulo</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a test3=<span class=\"sy0\">%</span><span class=\"re3\">i</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 2<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> test<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">      IF FNisodd%(14) PRINT \"14 is odd\" ELSE PRINT \"14 is even\"<br/>      IF FNisodd%(15) PRINT \"15 is odd\" ELSE PRINT \"15 is even\"<br/>      IF FNisodd#(9876543210#) PRINT \"9876543210 is odd\" ELSE PRINT \"9876543210 is even\"<br/>      IF FNisodd#(9876543211#) PRINT \"9876543211 is odd\" ELSE PRINT \"9876543211 is even\"<br/>      END<br/>\u00a0<br/>      REM Works for -2^31 &lt;= n% &lt; 2^31<br/>      DEF FNisodd%(n%) = (n% AND 1) &lt;&gt; 0<br/>\u00a0<br/>      REM Works for -2^53 &lt;= n# &lt;= 2^53<br/>      DEF FNisodd#(n#) = n# &lt;&gt; 2 * INT(n# / 2)</pre>"}, {"lang": "bc", "loc": 8, "block": "<pre class=\"text highlighted_source\">i = -3<br/>\u00a0<br/>/* Assumes that i is an integer. */<br/>scale = 0<br/>if (i\u00a0% 2 == 0) \"i is even<br/>\"<br/>if (i\u00a0% 2) \"i is odd<br/>\"</pre>"}, {"lang": "Befunge", "loc": 1, "block": "<pre class=\"text highlighted_source\">&amp;2%52**\"E\"+,@</pre>"}, {"lang": "Bracmat", "loc": 29, "block": "<pre class=\"text highlighted_source\">( ( even<br/>  =<br/>    . @(\u00a0!arg<br/>      \u00a0:  \u00a0?<br/>           [-2<br/>           ( 0<br/>           | 2<br/>           | 4<br/>           | 6<br/>           | 8<br/>           )<br/>       )<br/>  )<br/>&amp; (odd=.~(even$!arg))<br/>&amp; ( eventest<br/>  =<br/>    .   out<br/>      $ (!arg is (even$!arg&amp;|not) even)<br/>  )<br/>&amp; ( oddtest<br/>  =<br/>    .   out<br/>      $ (!arg is (odd$!arg&amp;|not) odd)<br/>  )<br/>&amp; eventest$5556<br/>&amp; oddtest$5556<br/>&amp; eventest$857234098750432987502398457089435<br/>&amp; oddtest$857234098750432987502398457089435<br/>)</pre>"}, {"lang": "Brainf***", "loc": 8, "block": "<pre class=\"bf highlighted_source\"><span class=\"sy3\">,</span><span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">,</span><span class=\"sy0\">----------</span><span class=\"sy1\">]</span><span class=\"co1\"> Read until newline</span><br/><span class=\"sy0\">++</span><span class=\"sy2\">&lt;</span><span class=\"co1\">             Get a 2 and move into position</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">-</span><span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"co1\">     Do</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">+</span><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">]</span><span class=\"co1\">   divmod</span><br/><span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;</span><span class=\"sy1\">]</span><span class=\"co1\">          magic</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy1\">]</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">++++++++</span><span class=\"co1\">   Clear and get an 8</span><br/><span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">++++++</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">-</span><span class=\"sy1\">]</span><span class=\"co1\">     to get a 48</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">-</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">.</span><span class=\"co1\">       to get n\u00a0% 2 to ASCII and print</span></pre>"}, {"lang": "Burlesque", "loc": 1, "block": "<pre class=\"text highlighted_source\">2.%</pre>"}, {"lang": "C", "loc": 5, "block": "<pre class=\"c highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* x is odd */</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* or not */</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 41, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">namespace</span> RosettaCode<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> EvenOrOdd<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsEvenBitwise<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>number <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsOddBitwise<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>number <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsEvenRemainder<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> remainder<span class=\"sy0\">;</span><br/>            Math<span class=\"sy0\">.</span><span class=\"me1\">DivRem</span><span class=\"br0\">(</span>number, <span class=\"nu0\">2</span>, <span class=\"kw1\">out</span> remainder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> remainder <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsOddRemainder<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> remainder<span class=\"sy0\">;</span><br/>            Math<span class=\"sy0\">.</span><span class=\"me1\">DivRem</span><span class=\"br0\">(</span>number, <span class=\"nu0\">2</span>, <span class=\"kw1\">out</span> remainder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> remainder <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsEvenModulo<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>number <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsOddModulo<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>number <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">bool</span> isOdd<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> x <span class=\"sy2\">%</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isEven<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span>x <span class=\"sy2\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>even? some<span class=\"sy0\">-</span>var<span class=\"br0\">)</span> <span class=\"br0\">(</span>do<span class=\"sy0\">-</span>even<span class=\"sy0\">-</span>stuff<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>odd? some<span class=\"sy0\">-</span>var<span class=\"br0\">)</span> <span class=\"br0\">(</span>do<span class=\"sy0\">-</span>odd<span class=\"sy0\">-</span>stuff<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 5, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw1\">IF</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">REM</span><span class=\"br0\">(</span>Num<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>           <span class=\"kw2\">DISPLAY</span> Num <span class=\"st0\">\" is even.\"</span><br/>       <span class=\"kw3\">ELSE</span><br/>           <span class=\"kw2\">DISPLAY</span> Num <span class=\"st0\">\" is odd.\"</span><br/>       END-<span class=\"kw1\">IF</span></pre>"}, {"lang": "CoffeeScript", "loc": 1, "block": "<pre class=\"coffeescript highlighted_source\">isEven = <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>2<span class=\"br0\">)</span></pre>"}, {"lang": "ColdFusion", "loc": 5, "block": "<pre class=\"cfm highlighted_source\">\u00a0<br/>function f(numeric n) {<br/>   return n mod 2?\"odd\":\"even\"<br/>}<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> some-var<span class=\"br0\">)</span> <span class=\"br0\">(</span>do-even-stuff<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">oddp</span> some-other-var<span class=\"br0\">)</span> <span class=\"br0\">(</span>do-odd-stuff<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 55, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> EvenOdd;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Args<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> BitwiseOdd<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">RETURN</span> <span class=\"nu0\">0</span> <span class=\"kw1\">IN</span> BITS<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> BitwiseOdd;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Odd<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">RETURN</span> <span class=\"br0\">(</span>i <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">#</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">END</span> Odd;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> CongruenceOdd<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">RETURN</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">END</span> CongruenceOdd;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tp<span class=\"sy0\">:</span> Args.<span class=\"me1\">Params</span>;<br/>\ti<span class=\"sy0\">,</span>done<span class=\"sy0\">,</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tArgs.<span class=\"me1\">Get</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Builtin function: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> i &lt; p.<span class=\"me1\">argc</span> <span class=\"kw1\">DO</span><br/>\t\tStrings.<span class=\"me1\">StringToInt</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is:&gt; \"</span><span class=\"br0\">)</span>; <br/>\t\t<span class=\"kw1\">IF</span> <span class=\"kw3\">ODD</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"odd\"</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"even\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Bitwise: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;i<span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> i &lt; p.<span class=\"me1\">argc</span> <span class=\"kw1\">DO</span><br/>\t\tStrings.<span class=\"me1\">StringToInt</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is:&gt; \"</span><span class=\"br0\">)</span>; <br/>\t\t<span class=\"kw1\">IF</span> BitwiseOdd<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"odd\"</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"even\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Module: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> i &lt; p.<span class=\"me1\">argc</span> <span class=\"kw1\">DO</span><br/>\t\tStrings.<span class=\"me1\">StringToInt</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is:&gt; \"</span><span class=\"br0\">)</span>; <br/>\t\t<span class=\"kw1\">IF</span> Odd<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"odd\"</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"even\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Congruences: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> i &lt; p.<span class=\"me1\">argc</span> <span class=\"kw1\">DO</span><br/>\t\tStrings.<span class=\"me1\">StringToInt</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is:&gt; \"</span><span class=\"br0\">)</span>; <br/>\t\t<span class=\"kw1\">IF</span> CongruenceOdd<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"odd\"</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"even\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Do;<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 31, "block": "<pre class=\"text highlighted_source\">#Using bitwise shift<br/>  def isEven_bShift(n)<br/>    n == ((n &gt;&gt; 1) &lt;&lt; 1)<br/>  end<br/>  def isOdd_bShift(n)<br/>    n\u00a0!= ((n &gt;&gt; 1) &lt;&lt; 1)<br/>  end<br/>#Using modulo operator<br/>  def isEven_mod(n)<br/>    (n\u00a0% 2) == 0<br/>  end<br/>  def isOdd_mod(n)<br/>    (n\u00a0% 2)\u00a0!= 0<br/>  end<br/># Using bitwise \"and\"<br/>  def isEven_bAnd(n)<br/>    (n &amp; 1) ==  0<br/>  end<br/>  def isOdd_bAnd(n)<br/>    (n &amp; 1)\u00a0!= 0<br/>  end<br/>\u00a0<br/>puts isEven_bShift(7)<br/>puts isOdd_bShift(7)<br/>\u00a0<br/>puts isEven_mod(12)<br/>puts isOdd_mod(12)<br/>\u00a0<br/>puts isEven_bAnd(21)<br/>puts isOdd_bAnd(21)<br/>\u00a0</pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> i.<span class=\"me1\">BigInt</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 8, "block": "<pre class=\"dcl highlighted_source\"><span class=\"co0\">$! in DCL, for integers, the least significant bit determines the logical value, where 1 is true and 0 is false</span><br/>$<br/>$ i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><br/>$ loop1:<br/>$  <span class=\"kw1\">if</span> i <span class=\"kw1\">then</span> $ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> i, <span class=\"st0\">\" is odd\"</span><br/>$  <span class=\"kw1\">if</span> <span class=\"sy0\">.not.</span> i <span class=\"kw1\">then</span> $ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> i, <span class=\"st0\">\" is even\"</span><br/>$  i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">if</span> i <span class=\"sy0\">.le.</span> <span class=\"nu0\">6</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> loop1</pre>"}, {"lang": "DWScript", "loc": 1, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">var</span> isOdd <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Odd</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 11, "block": "<pre class=\"text highlighted_source\">even n:<br/>    = 0\u00a0% n 2<br/>\u00a0<br/>odd:<br/>    not even<br/>\u00a0<br/>!. odd 0<br/>!. even 0<br/>!. odd 7<br/>!. even 7<br/>\u00a0</pre>"}, {"lang": "EDSAC order code", "loc": 33, "block": "<pre class=\"text highlighted_source\">[ Even or odd<br/>  ===========<br/>\u00a0<br/>  A program for the EDSAC<br/>\u00a0<br/>  Determines whether the number stored at<br/>  address <a class=\"__cf_email__\" data-cfemail=\"7e4f4b3e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> is even or odd, and prints<br/>  'E' or 'O' accordingly<br/>\u00a0<br/>  Works with Initial Orders 2 ]<br/>\u00a0<br/>       T56K   [ load point ]<br/>       GK     [ base address ]<br/>\u00a0<br/>       <a class=\"__cf_email__\" data-cfemail=\"450a747405\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   [ print letter shift ]<br/>       <a class=\"__cf_email__\" data-cfemail=\"4f1b7e7f0f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   [ clear accumulator ]<br/>       <a class=\"__cf_email__\" data-cfemail=\"9bd3aaaedb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   [ multiplier\u00a0:= n ]<br/>       <a class=\"__cf_email__\" data-cfemail=\"c182f0f381\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   [ acc +:= mult AND 1 ]<br/>       <a class=\"__cf_email__\" data-cfemail=\"dc8fedee9c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   [ acc -:= 1 ]<br/>       <a class=\"__cf_email__\" data-cfemail=\"fdbac5bd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>    [ branch on negative ]<br/>       <a class=\"__cf_email__\" data-cfemail=\"2867191c68\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   [ print 'O' ]<br/>       ZF     [ halt ]<br/>[ 8 ]  <a class=\"__cf_email__\" data-cfemail=\"2867191b68\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   [ print 'E' ]<br/>       ZF     [ halt ]<br/>\u00a0<br/>[ 10 ] P0F    [ used to clear acc ]<br/>[ 11 ] *F     [ letter shift character ]<br/>[ 12 ] P0D    [ const: 1 ]<br/>[ 13 ] EF     [ character 'E' ]<br/>[ 14 ] OF     [ character 'O' ]<br/>[ 15 ] P18D   [ number to test: 37 ]<br/>\u00a0<br/>       EZPF   [ branch to load point ]</pre>"}, {"lang": "Eiffel", "loc": 14, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"co1\">--bit testing</span><br/><span class=\"kw2\">if</span> i.<span class=\"me1\">bit_and</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t<span class=\"co1\">-- i is even</span><br/><span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"co1\">--built-in bit testing (uses bit_and)</span><br/><span class=\"kw2\">if</span> i.<span class=\"me1\">bit_test</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t<span class=\"co1\">-- i is odd</span><br/><span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"co1\">--integer remainder (modulo)</span><br/><span class=\"kw2\">if</span> i \\\\ <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t<span class=\"co1\">-- i is even</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  import Integer<br/>\u00a0<br/>  def even_or_odd(n) when is_even(n), do: \"#{n} is even\"<br/>  def even_or_odd(n)                , do: \"#{n} is odd\"<br/>      # In second \"def\", the guard clauses of \"is_odd(n)\" is unnecessary.<br/>\u00a0<br/>  # Another definition way<br/>  def even_or_odd2(n) do<br/>    if is_even(n), do: \"#{n} is even\", else: \"#{n} is odd\"<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(-2..3, fn n -&gt; IO.puts RC.even_or_odd(n) end)</pre>"}, {"lang": "Emacs Lisp", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun odd (n)<br/>  (if (oddp n) (format \"%d is odd\\n\" n)<br/>    (format \"%d is even\\n\" n)))<br/>\u00a0<br/>(defun even (n)<br/>  (if (evenp n) (format \"%d is even\\n\" n)<br/>    (format \"%d is odd\\n\" n)))<br/>\u00a0<br/>(progn<br/>  (insert (even 3) )<br/>  (insert (odd 2) )))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 14, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">%% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>even_odd<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy3\">==</span><span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span><br/>\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"odd<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\ttrue <span class=\"sy1\">-&gt;</span><br/>\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"even<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span>\t\t\t<br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 20, "block": "<pre class=\"text highlighted_source\">PROGRAM ODD_EVEN<br/>\u00a0<br/>! works for -2^15 &lt;= n% &lt; 2^15<br/>\u00a0<br/>FUNCTION ISODD%(N%)<br/>      ISODD%=(N% AND 1)&lt;&gt;0<br/>END FUNCTION<br/>\u00a0<br/>! works for -2^38 &lt;= n# &lt;= 2^38<br/>FUNCTION ISODD#(N#)<br/>      ISODD#=N#&lt;&gt;2*INT(N#/2)<br/>END FUNCTION<br/>\u00a0<br/>BEGIN<br/>  IF ISODD%(14) THEN PRINT(\"14 is odd\") ELSE PRINT(\"14 is even\") END IF<br/>  IF ISODD%(15) THEN PRINT(\"15 is odd\") ELSE PRINT(\"15 is even\") END IF<br/>  IF ISODD#(9876543210) THEN PRINT(\"9876543210 is odd\") ELSE PRINT(\"9876543210 is even\") END IF<br/>  IF ISODD#(9876543211) THEN PRINT(\"9876543211 is odd\") ELSE PRINT(\"9876543211 is even\") END IF<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 7, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>math.e<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>        <span class=\"sy2\">?</span> <span class=\"br0\">{</span>i<span class=\"sy2\">,</span> is_even<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0</pre>"}, {"lang": "Excel", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>=MOD(33;2)<br/>=MOD(18;2)<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> isEven x <span class=\"sy0\">=</span><br/>  x <span class=\"sy0\">&amp;&amp;&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>( scratchpad ) <b>20 even? .</b>\nt\n( scratchpad ) <b>35 even? .</b>\nf\n( scratchpad ) <b>20 odd? .</b>\nf\n( scratchpad ) <b>35 odd? .</b>\nt\n</pre>"}, {"lang": "Fish", "loc": 4, "block": "<pre class=\"text highlighted_source\">&lt;v\"Please enter a number:\"a<br/> &gt;l0)?!vo     v          &lt;                        v    o&lt;<br/>^      &gt;i:a=?v&gt;i:a=?v$a*+^&gt;\"The number is even.\"ar&gt;l0=?!^&gt;<br/>             &gt;      &gt;2%0=?^\"The number is odd.\"ar ^</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: odd? ( n --\u00a0? ) 1 and\u00a0;</pre>"}, {"lang": "Fortran", "loc": 80, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Tue May 21 20:22:56</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make $a &amp;&amp; OMP_NUM_THREADS=2 $a &lt; unixdict.txt</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -ffree-form -fall-intrinsics f.f08 -o f</span><br/><span class=\"co1\">! n     odd    even</span><br/><span class=\"co1\">!-6    F    T</span><br/><span class=\"co1\">!-5    T    F</span><br/><span class=\"co1\">!-4    F    T</span><br/><span class=\"co1\">!-3    T    F</span><br/><span class=\"co1\">!-2    F    T</span><br/><span class=\"co1\">!-1    T    F</span><br/><span class=\"co1\">! 0    F    T</span><br/><span class=\"co1\">! 1    T    F</span><br/><span class=\"co1\">! 2    F    T</span><br/><span class=\"co1\">! 3    T    F</span><br/><span class=\"co1\">! 4    F    T</span><br/><span class=\"co1\">! 5    T    F</span><br/><span class=\"co1\">! 6    F    T</span><br/><span class=\"co1\">! -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6       n</span><br/><span class=\"co1\">!  F  T  F  T  F  T  F  T  F  T  F  T  F     odd</span><br/><span class=\"co1\">!  T  F  T  F  T  F  T  F  T  F  T  F  T    even</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Tue May 21 20:22:56</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">module</span> bit0parity<br/>\u00a0<br/>  <span class=\"kw1\">interface</span> odd<br/>    <span class=\"kw1\">module</span> <span class=\"kw1\">procedure</span> odd_scalar, odd_list<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/>  <span class=\"kw1\">interface</span> even<br/>    <span class=\"kw1\">module</span> <span class=\"kw1\">procedure</span> even_scalar, even_list<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> odd_scalar<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    odd_scalar <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>a, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> odd_scalar<br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> even_scalar<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    even_scalar <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> odd_scalar<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> even_scalar<br/>\u00a0<br/>  <span class=\"kw1\">function</span> odd_list<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>rv<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw3\">logical</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rv</span><br/>    rv <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>a, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> odd_list<br/>\u00a0<br/>  <span class=\"kw1\">function</span> even_list<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>rv<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw3\">logical</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rv</span><br/>    rv <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> odd_list<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> even_list<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> bit0parity<br/>\u00a0<br/><span class=\"kw1\">program</span> oe<br/>  <span class=\"kw3\">use</span> bit0parity<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">j</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(a2,2a8)'</span><span class=\"br0\">)</span> <span class=\"st0\">'n'</span>, <span class=\"st0\">'odd'</span>, <span class=\"st0\">'even'</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"st0\">'(i2,2l5)'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>i, odd_scalar<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, even_scalar<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, i<span class=\"sy0\">=-</span><span class=\"nu0\">6</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> i<span class=\"sy0\">=-</span><span class=\"nu0\">6</span>, <span class=\"nu0\">6</span><br/>    j<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"st0\">'((13i3),a8/(13l3),a8/(13l3),a8)'</span><span class=\"br0\">)</span> j, <span class=\"st0\">'n'</span>, odd<span class=\"br0\">(</span>j<span class=\"br0\">)</span>, <span class=\"st0\">'odd'</span>, even<span class=\"br0\">(</span>j<span class=\"br0\">)</span>, <span class=\"st0\">'even'</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> oe<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 19, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Enter an integer or 0 to finish\u00a0: \"</span>;<br/>  <span class=\"kw1\">Input</span> <span class=\"st0\">\"\"</span>, n<br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">ElseIf</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Your number is even\"</span><br/>    <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Your number is odd\"</span><br/>    <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Futhark", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun main(x: int): bool = (x &amp; 1) == 0<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 15, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sAnswer, sMessage <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/>sAnswer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=inputbox+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Input an integer\"</span>, <span class=\"st0\">\"Odd or even\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/isinteger\"><span class=\"kw2\">IsInteger</span></a><span class=\"br0\">(</span>sAnswer<span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> Odd<span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/val\"><span class=\"kw2\">Val</span></a><span class=\"br0\">(</span>sAnswer<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sMessage <span class=\"sy0\">=</span> <span class=\"st0\">\"' is an odd number\"</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> Even<span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/val\"><span class=\"kw2\">Val</span></a><span class=\"br0\">(</span>sAnswer<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sMessage <span class=\"sy0\">=</span> <span class=\"st0\">\"' is an even number\"</span><br/><a href=\"http://gambasdoc.org/help/lang/else\"><span class=\"kw1\">Else</span></a><br/>  sMessage <span class=\"sy0\">=</span> <span class=\"st0\">\"' does not compute!!\"</span><br/><a href=\"http://gambasdoc.org/help/lang/endif\"><span class=\"kw1\">Endif</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">&amp;</span> sAnswer <span class=\"sy0\">&amp;</span> sMessage<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 2, "block": "<pre class=\"text highlighted_source\">IsEvenInt(n);<br/>IsOddInt(n);</pre>"}, {"lang": "Go", "loc": 48, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    test<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>    test<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    test<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>    testBig<span class=\"sy1\">(</span><span class=\"st0\">\"-222222222222222222222222222222222222\"</span><span class=\"sy1\">)</span><br/>    testBig<span class=\"sy1\">(</span><span class=\"st0\">\"-1\"</span><span class=\"sy1\">)</span><br/>    testBig<span class=\"sy1\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy1\">)</span><br/>    testBig<span class=\"sy1\">(</span><span class=\"st0\">\"1\"</span><span class=\"sy1\">)</span><br/>    testBig<span class=\"sy1\">(</span><span class=\"st0\">\"222222222222222222222222222222222222\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> test<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Testing integer\u00a0%3d:  \"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// &amp; 1 is a good way to test</span><br/>    <span class=\"kw1\">if</span> n&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"even \"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" odd \"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// Careful when using\u00a0%: negative n\u00a0% 2 returns -1.  So, the code below</span><br/>    <span class=\"co1\">// works, but can be broken by someone thinking they can reverse the</span><br/>    <span class=\"co1\">// test by testing n\u00a0% 2 == 1.  The valid reverse test is n\u00a0% 2\u00a0!= 0.</span><br/>    <span class=\"kw1\">if</span> n<span class=\"sy3\">%</span><span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"even\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\" odd\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> testBig<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    b<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Testing big integer\u00a0%v:  \"</span><span class=\"sy1\">,</span> b<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// the Bit function is the only sensible test for big ints.</span><br/>    <span class=\"kw1\">if</span> b<span class=\"sy3\">.</span>Bit<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"even\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"odd\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isOdd <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> i <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20boolean\"><span class=\"kw4\">boolean</span></a> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isEven <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> i <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">!</span> isOdd<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\">Prelude<span class=\"sy0\">&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> <span class=\"nu0\">5</span><br/>False<br/>Prelude<span class=\"sy0\">&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> <span class=\"nu0\">42</span><br/>True<br/>Prelude<span class=\"sy0\">&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"nu0\">5</span><br/>True<br/>Prelude<span class=\"sy0\">&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"nu0\">42</span><br/>False</pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> isEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> n<span class=\"sy0\">%</span>2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">2</span> | <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/>   <span class=\"nu0\">2</span>|<span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> + <span class=\"sy0\">(</span><span class=\"nu0\">2</span>^<span class=\"nu0\">89x</span><span class=\"sy0\">)</span>-<span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 3, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isEven<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 4, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> isEven<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def is_even: type == \"number\" and floor == 0 and .\u00a0% 2 == 0;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">iseven(i), isodd(i)</pre>"}, {"lang": "K", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>oddp: {:[x!2;1;0]} /Returns 1 if arg. is odd<br/>evenp: {~oddp[x]}  /Returns 1 if arg. is even<br/>\u00a0<br/>Examples:<br/>   oddp 32<br/>0<br/>   evenp 32<br/>1<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.5-2</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"Enter an integer or 0 to finish\u00a0: \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        when <span class=\"br0\">{</span><br/>            n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>     -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>            n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Your number is even\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>       -<span class=\"sy0\">&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Your number is odd\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "L++", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn bool isEven <span class=\"br0\">(</span>int x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "LabVIEW", "loc": 4, "block": "<pre class=\"text highlighted_source\">: even?  2\u00a0% not\u00a0;<br/>: odd?  2\u00a0%\u00a0;<br/>1 even? .   # 0<br/>1 odd? .    # 1</pre>"}, {"lang": "Lang5", "loc": 4, "block": "<pre class=\"text highlighted_source\">: even?  2\u00a0% not\u00a0;<br/>: odd?  2\u00a0%\u00a0;<br/>1 even? .   # 0<br/>1 odd? .    # 1</pre>"}, {"lang": "Lasso", "loc": 5, "block": "<pre class=\"text highlighted_source\">define isoddoreven(i::integer) =&gt; {<br/>\t#i\u00a0% 2\u00a0? return 'odd'<br/>\treturn 'even'<br/>}<br/>isoddoreven(12)</pre>"}, {"lang": "LC3 Assembly", "loc": 21, "block": "<pre class=\"text highlighted_source\">      .ORIG      0x3000<br/>\u00a0<br/>      LD         R0,NUM<br/>      AND        R1,R0,1<br/>      BRZ        EVEN<br/>\u00a0<br/>      LEA        R0,ODD<br/>      BRNZP      DISP<br/>\u00a0<br/>EVEN  LEA        R0,EVN<br/>\u00a0<br/>DISP  PUTS<br/>\u00a0<br/>      HALT<br/>\u00a0<br/>NUM   .FILL      0x1C<br/>\u00a0<br/>EVN   .STRINGZ   \"EVEN\\n\"<br/>ODD   .STRINGZ   \"ODD\\n\"<br/>\u00a0<br/>      .END</pre>"}, {"lang": "Liberty BASIC", "loc": 3, "block": "<pre class=\"lb highlighted_source\">n<span class=\"sy0\">=</span><span class=\"nu0\">12</span><br/>\u00a0<br/><span class=\"kw1\">if</span> n <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"even\"</span> <span class=\"kw1\">else</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"odd\"</span></pre>"}, {"lang": "Lingo", "loc": 7, "block": "<pre class=\"text highlighted_source\">on even (n)<br/>  return n mod 2 = 0<br/>end<br/>\u00a0<br/>on odd (n)<br/>  return n mode 2 &lt;&gt; 0<br/>end</pre>"}, {"lang": "LiveCode", "loc": 7, "block": "<pre class=\"text highlighted_source\">function odd n<br/>    return (n bitand 1) = 1<br/>end odd<br/>\u00a0<br/>function notEven n<br/>    return (n mod 2) = 1<br/>end notEven</pre>"}, {"lang": "Logo", "loc": 3, "block": "<pre class=\"text highlighted_source\">to even?\u00a0:num<br/>    output equal? 0 modulo\u00a0:num 2<br/>end</pre>"}, {"lang": "Logtalk", "loc": 19, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(even_odd).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(test_mod<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    test_mod(<span class=\"re0\">I</span>) <span class=\"sy2\">:-</span><br/>        (   <span class=\"re0\">I</span> <span class=\"kw7\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw4\">write</span>(even), <span class=\"kw5\">nl</span><br/>        <span class=\"sy1\">;</span>   <span class=\"kw4\">write</span>(odd), <span class=\"kw5\">nl</span><br/>        ).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(test_bit<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    test_bit(<span class=\"re0\">I</span>) <span class=\"sy2\">:-</span><br/>        (   <span class=\"re0\">I</span> <span class=\"sy1\">/\\</span> <span class=\"nu0\">1</span> <span class=\"sy1\">=:=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw4\">write</span>(odd), <span class=\"kw5\">nl</span><br/>        <span class=\"sy1\">;</span>   <span class=\"kw4\">write</span>(even), <span class=\"kw5\">nl</span><br/>        ).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 9, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- test for even number</span><br/><span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"The number is even\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- test for odd number</span><br/><span class=\"kw1\">if</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"The number is odd\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 1, "block": "<pre>Function F {\n      Read x\n      code here\n}\n</pre>"}, {"lang": "M4", "loc": 8, "block": "<pre class=\"text highlighted_source\">define(`even', `ifelse(eval(`$1'%2),0,True,False)')<br/>define(`odd',  `ifelse(eval(`$1'%2),0,False,True)')<br/>\u00a0<br/>even(13)<br/>even(8)<br/>\u00a0<br/>odd(5)<br/>odd(0)</pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">EvenOrOdd\u00a0:= proc( x::integer )<br/>   if x mod 2 = 0 then<br/>      print(\"Even\"):<br/>   else<br/>      print(\"Odd\"):<br/>   end if:<br/>end proc:<br/>EvenOrOdd(9);</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">EvenQ[8]</pre>"}, {"lang": "MATLAB / Octave", "loc": 2, "block": "<pre class=\"matlab highlighted_source\">   isOdd  =  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/logical.html\"><span class=\"kw2\">logical</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bitand.html\"><span class=\"kw2\">bitand</span></a><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   isEven = ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/logical.html\"><span class=\"kw2\">logical</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bitand.html\"><span class=\"kw2\">bitand</span></a><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; </pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">evenp(n);<br/>oddp(n);</pre>"}, {"lang": "Mercury", "loc": 10, "block": "<pre class=\"text highlighted_source\">even(N) \u00a0% in a body, suceeeds iff N is even.<br/>odd(N). \u00a0% in a body, succeeds iff N is odd.<br/>\u00a0<br/>% rolling our own:<br/>:- pred even(int::in) is semidet.<br/>\u00a0<br/>% It's an error to have all three in one module, mind; even/1 would fail to check as semidet.<br/>even(N)\u00a0:- N mod 2 = 0.  \u00a0% using division that truncates towards -infinity<br/>even(N)\u00a0:- N rem 2 = 0.  \u00a0% using division that truncates towards zero<br/>even(N)\u00a0:- N /\\ 1 = 0.   \u00a0% using bit-wise and.</pre>"}, {"lang": "MIPS Assembly", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>.data<br/>\teven_str: .asciiz \"Even\"<br/>\todd_str: .asciiz \"Odd\"<br/>\u00a0<br/>.text<br/>\t#set syscall to get integer from user<br/>\tli $v0,5<br/>\tsyscall<br/>\u00a0<br/>\t#perform bitwise AND and store in $a0<br/>\tand $a0,$v0,1<br/>\u00a0<br/>\t#set syscall to print dytomh<br/>\tli $v0,4<br/>\u00a0<br/>\t#jump to odd if the result of the AND operation<br/>\tbeq $a0,1,odd<br/>even:\t<br/>\t#load even_str message, and print\t<br/>\tla $a0,even_str<br/>\tsyscall<br/>\u00a0<br/>\t#exit program<br/>\tli $v0,10<br/>\tsyscall<br/>\u00a0<br/>odd:<br/>\t#load odd_str message, and print<br/>\tla $a0,odd_str<br/>\tsyscall<br/>\u00a0<br/>\t#exit program<br/>\tli $v0,10<br/>\tsyscall<br/>\u00a0</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre class=\"text highlighted_source\">/\t2\t{x}\t\u0417\u041d</pre>"}, {"lang": "ML", "loc": 11, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">fun</span> odd <br/>\t\t<span class=\"br0\">(</span>x rem <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span> <br/>\t<span class=\"sy0\">|</span> \t_ \t      <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><br/><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> even <br/>\t\t<span class=\"br0\">(</span>x rem <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span> <br/>\t<span class=\"sy0\">|</span> \t_ \t      <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><br/><span class=\"sy0\">;</span>\t<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 15, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> EvenOrOdd;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=-</span><span class=\"nu0\">5</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span> <span class=\"kw1\">DO</span><br/>        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i is even:\u00a0%b<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> EvenOrOdd.</pre>"}, {"lang": "Neko", "loc": 7, "block": "<pre class=\"text highlighted_source\">var number = 6;<br/>\u00a0<br/>if(number\u00a0% 2 == 0) {<br/>\t$print(\"Even\");<br/>} else {<br/>\t$print(\"Odd\");<br/>}</pre>"}, {"lang": "NESL", "loc": 4, "block": "<pre class=\"text highlighted_source\">function even(n) = mod(n, 2) == 0;<br/>\u00a0<br/>% test the function by applying it to the first ten positive integers:\u00a0%<br/>{even(n)\u00a0: n in [1:11]};</pre>"}, {"lang": "NetRexx", "loc": 44, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Val'</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"st0\">': mod  - ver  - pos  - bits'</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'---'</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"st0\">': ---- + ---- + ---- + ----'</span><br/><span class=\"kw1\">loop</span> nn = -<span class=\"nu0\">15</span> to <span class=\"nu0\">15</span> by <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">say</span> nn.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"st0\">':'</span> eo<span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>nn<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">'-'</span> eo<span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>nn, <span class=\"st0\">'v'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">'-'</span> eo<span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>nn, <span class=\"st0\">'p'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">'-'</span> eo<span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>nn, <span class=\"st0\">'b'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span> nn<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- Overloaded method.  Default is to use the remainder specialization below</span><br/>method isEven<span class=\"br0\">(</span>anInt, meth = <span class=\"st0\">'R'</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">select</span> <span class=\"kw2\">case</span> meth.<span class=\"kw6\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">when</span> <span class=\"st0\">'R'</span> <span class=\"kw3\">then</span> eo = isEvenRemainder<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span><br/>    <span class=\"kw3\">when</span> <span class=\"st0\">'V'</span> <span class=\"kw3\">then</span> eo = isEvenVerify<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span><br/>    <span class=\"kw3\">when</span> <span class=\"st0\">'P'</span> <span class=\"kw3\">then</span> eo = isEvenPos<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span><br/>    <span class=\"kw3\">when</span> <span class=\"st0\">'B'</span> <span class=\"kw3\">then</span> eo = isEvenBits<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span><br/>    <span class=\"kw3\">otherwise</span>     eo = isEvenRemainder<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span> <span class=\"co1\">-- default</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> eo<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method isEvenRemainder<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> anInt <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method isEvenVerify<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> anInt.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"kw6\">verify</span><span class=\"br0\">(</span><span class=\"st0\">'02468'</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method isEvenPos<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> <span class=\"st0\">'13579'</span>.<span class=\"me0\">pos</span><span class=\"br0\">(</span>anInt.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method isEvenBits<span class=\"br0\">(</span>anInt<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span><span class=\"br0\">(</span>anInt.<span class=\"kw6\">d2x</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"kw6\">x2b</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method eo<span class=\"br0\">(</span>state = boolean<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">if</span> state <span class=\"kw3\">then</span> sv = <span class=\"st0\">'Even'</span><br/>           <span class=\"kw3\">else</span> sv = <span class=\"st0\">'Odd'</span><br/>  <span class=\"kw1\">return</span> sv.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 2, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span>odd? <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>even? <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\"># Least signficant bit:<br/>proc isOdd(i: int): bool = (i and 1)\u00a0!= 0<br/>proc isEven(i: int): bool = (i and 1) == 0<br/>\u00a0<br/># Modulo:<br/>proc isOdd2(i: int): bool = (i mod 2)\u00a0!= 0<br/>proc isEven2(i: int): bool = (i mod 2) == 0<br/>\u00a0<br/># Bit Shifting:<br/>proc isOdd3(n: int): bool = n\u00a0!= ((n shr 1) shl 1)<br/>proc isEven3(n: int): bool = n == ((n shr 1) shl 1)<br/>\u00a0<br/>echo isEven(1)<br/>echo isOdd2(5)</pre>"}, {"lang": "Oberon-2", "loc": 23, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> EvenOrOdd;<br/><span class=\"kw1\">IMPORT</span> <br/>  S <span class=\"sy0\">:=</span> SYSTEM<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">VAR</span><br/>  x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>  s<span class=\"sy0\">:</span> <span class=\"kw4\">SET</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  x <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">IF</span> <span class=\"kw3\">ODD</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" odd\"</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" even\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>; <br/>  Out.<span class=\"me1\">Ln</span>;<br/>\u00a0<br/>  x <span class=\"sy0\">:=</span> <span class=\"nu0\">11</span>;s <span class=\"sy0\">:=</span> S.<span class=\"me1\">VAL</span><span class=\"br0\">(</span><span class=\"kw4\">SET</span><span class=\"sy0\">,</span><span class=\"kw3\">LONG</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">IF</span> <span class=\"nu0\">0</span> <span class=\"kw1\">IN</span> s <span class=\"kw1\">THEN</span> Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" odd\"</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" even\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">Ln</span>;  <br/>\u00a0<br/>  x <span class=\"sy0\">:=</span> <span class=\"nu0\">12</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">IF</span> x <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"sy0\">#</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" odd\"</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" even\"</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> EvenOrOdd.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 7, "block": "<pre class=\"objeck highlighted_source\">a <span class=\"sy0\">:=</span> Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"st0\">\"even\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>  <span class=\"st0\">\"odd\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> is_even d <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>d <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> is_odd d <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>d <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">12 isEven<br/>12 isOdd</pre>"}, {"lang": "OOC", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// Using the modulo operator<br/>even: func (n: Int) -&gt; Bool {<br/>  (n\u00a0% 2) == 0<br/>}<br/>\u00a0<br/>// Using bitwise and<br/>odd: func (n: Int) -&gt; Bool {<br/>  (n &amp; 1) == 1<br/>}<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">odd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 1, "block": "<pre class=\"pascal highlighted_source\">isOdd <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">odd</span><span class=\"br0\">(</span>someIntegerNumber<span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_ is \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>even odd<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">subset</span> Even <span class=\"kw1\">of</span> Int <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">subset</span> Odd <span class=\"kw1\">of</span> Int <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"nu0\">1</span> <span class=\"sy0\">~~</span> Even<span class=\"sy0\">;</span> <span class=\"co1\"># false</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">1</span> <span class=\"sy0\">~~</span> Odd<span class=\"sy0\">;</span>  <span class=\"co1\"># true</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">1.5</span> <span class=\"sy0\">~~</span> Odd <span class=\"co1\"># false ( 1.5 is not an Int )</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">for i = -5 to 5 do<br/>   \u00a0? {i, and_bits(i,1), remainder(i,2)}<br/>end for</pre>"}, {"lang": "PHP", "loc": 9, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"co1\">// using bitwise and to check least significant digit</span><br/><span class=\"kw1\">echo</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0? <span class=\"st_h\">'odd'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'even'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0? <span class=\"st_h\">'odd'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'even'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// using modulo</span><br/><span class=\"kw1\">echo</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0? <span class=\"st_h\">'odd'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'even'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0? <span class=\"st_h\">'odd'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'even'</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">: (bit? 1 3)<br/>-&gt; 1  # Odd<br/>\u00a0<br/>: (bit? 1 4)<br/>-&gt; NIL  # Even</pre>"}, {"lang": "Pike", "loc": 5, "block": "<pre class=\"pike highlighted_source\">&gt; int i <span class=\"sy0\">=</span> <span class=\"nu0\">73</span><span class=\"sy0\">;</span><br/>&gt; <span class=\"br0\">(</span>i<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">1</span><br/>&gt; i<span class=\"sy0\">%</span>2<span class=\"sy0\">;</span><br/>Result: <span class=\"nu0\">1</span></pre>"}, {"lang": "PL/I", "loc": 1, "block": "<pre class=\"text highlighted_source\">i = iand(i,1)</pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$IsOdd</span>  <span class=\"sy0\">=</span> <span class=\"kw4\">-not</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span>.IsEven<br/><span class=\"re0\">$IsEven</span> <span class=\"sy0\">=</span>      <span class=\"br0\">(</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span>.IsEven<br/>\u00a0</pre>"}, {"lang": "Processing", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>boolean isEven(int i){<br/>  return i%2 == 0;<br/>}<br/>\u00a0<br/>boolean isOdd(int i){<br/>  return i%2 == 1;<br/>}<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 5, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>  even<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>     <span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> inf<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>     <span class=\"nu0\">0</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 7, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">;use last bit method</span><br/>isOdd <span class=\"sy0\">=</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span>         <span class=\"co1\">;isOdd is non-zero if i is odd</span><br/>isEven <span class=\"sy0\">=</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">!</span> <span class=\"nu0\">1</span>    <span class=\"co1\">;isEven is non-zero if i is even</span><br/>\u00a0<br/><span class=\"co1\">;use modular method</span><br/>isOdd <span class=\"sy0\">=</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span>         <span class=\"co1\">;isOdd is non-zero if i is odd</span><br/>isEven <span class=\"sy0\">=</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!</span> <span class=\"nu0\">1</span>    <span class=\"co1\">;isEven is non-zero if i is even</span></pre>"}, {"lang": "Python", "loc": 9, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> is_odd<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">bool</span><span class=\"br0\">(</span>i &amp; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> is_even<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw1\">not</span> is_odd<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span> is_odd<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span> is_even<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 5, "block": "<pre class=\"text highlighted_source\">is.even &lt;- function(x)\u00a0!is.odd(x)<br/>\u00a0<br/>is.odd &lt;- function(x) intToBits(x)[1] == 1<br/>#or<br/>is.odd &lt;- function(x) x\u00a0%% 2 == 1</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">(even? 6)\u00a0; -&gt; true<br/>(even? 5)\u00a0; -&gt; false<br/>(odd? 6)\u00a0; -&gt; false<br/>(odd? 5)\u00a0; -&gt; true </pre>"}, {"lang": "Rascal", "loc": 2, "block": "<pre class=\"text highlighted_source\">public bool isEven(int n) = (n\u00a0% 2) == 0;<br/>public bool isOdd(int n) = (n\u00a0% 2) == 1;</pre>"}, {"lang": "REXX", "loc": 76, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program tests and displays if an integer is  even or odd  using different styles.*/</span><br/>!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">8</span>;  \u00a0!<span class=\"sy0\">.</span>j=<span class=\"nu0\">1</span>;   <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*assign  0,2,4,6,8  to a \"true\" value.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  assigns even digits to  \"true\".*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">1000</span>                              <span class=\"coMULTI\">/*handle most huge numbers from the CL.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x _ <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*get an argument from the command line*/</span><br/><span class=\"kw1\">if</span> x==<span class=\"st0\">''</span>               <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> terr <span class=\"st0\">\"no integer input (argument).\"</span><br/><span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> terr <span class=\"st0\">\"too many arguments: \"</span>          _  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x, <span class=\"st0\">'N'</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> terr <span class=\"st0\">\"argument isn't numeric: \"</span>      x<br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> terr <span class=\"st0\">\"argument isn't an integer: \"</span>   x<br/>y=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*in case  X  is negative or malformed,*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  remainder of neg # might be -1.*/</span><br/>                                                 <span class=\"coMULTI\">/*malformed #s: 007  9.0  4.8e1  .21e2 */</span><br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'remainder method (oddness)'</span><br/><span class=\"kw1\">if</span> y<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  x  <span class=\"st0\">'is odd'</span><br/>         <span class=\"kw3\">else</span> <span class=\"kw1\">say</span>  x  <span class=\"st0\">'is even'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  uses division to get remainder.*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'rightmost digit using BIF (not evenness)'</span><br/>_=<span class=\"kw6\">right</span><span class=\"br0\">(</span>y, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>_, <span class=\"nu0\">86420</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is odd'</span><br/>                     <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is even'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  uses 2 BIF (built\u2500in functions)*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'rightmost digit using BIF (evenness)'</span><br/>_=<span class=\"kw6\">right</span><span class=\"br0\">(</span>y, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>_, <span class=\"nu0\">86420</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is even'</span><br/>                      <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is odd'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  uses 2 BIF (built\u2500in functions)*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'even rightmost digit using array (evenness)'</span><br/>_=<span class=\"kw6\">right</span><span class=\"br0\">(</span>y, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is even'</span><br/>        <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is odd'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  uses a BIF (built\u2500in function).*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'remainder of division via function invoke (evenness)'</span><br/><span class=\"kw1\">if</span> even<span class=\"br0\">(</span>y<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is even'</span><br/>            <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is odd'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  uses (even) function invocation*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'remainder of division via function invoke (oddness)'</span><br/><span class=\"kw1\">if</span> odd<span class=\"br0\">(</span>y<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is odd'</span><br/>           <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is even'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  uses (odd)  function invocation*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'rightmost digit using BIF (not oddness)'</span><br/>_=<span class=\"kw6\">right</span><span class=\"br0\">(</span>y, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>_, <span class=\"nu0\">13579</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is even'</span><br/>                     <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is odd'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  uses 2 BIF (built\u2500in functions)*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'rightmost (binary) bit (oddness)'</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">x2b</span><span class=\"br0\">(</span><span class=\"kw6\">d2x</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is odd'</span><br/>                          <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is even'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  requires extra numeric digits. */</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'parse statement using BIF (not oddness)'</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  y   <span class=\"st0\">''</span>  -<span class=\"nu0\">1</span>  _                         <span class=\"coMULTI\">/*obtain last decimal digit of the Y #.*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>_, 02468<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is odd'</span><br/>                     <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> x <span class=\"st0\">'is even'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  uses a BIF (built\u2500in function).*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> tell <span class=\"st0\">'parse statement using array (evenness)'</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  y   <span class=\"st0\">''</span>  -<span class=\"nu0\">1</span>  _                         <span class=\"coMULTI\">/*obtain last decimal digit of the Y #.*/</span><br/><span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  x  <span class=\"st0\">'is even'</span><br/>        <span class=\"kw3\">else</span> <span class=\"kw1\">say</span>  x  <span class=\"st0\">'is odd'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  this is the fastest algorithm. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>even:                     <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span>  <span class=\"coMULTI\">/*returns \"evenness\" of arg, version 1.*/</span><br/>even:                     <span class=\"kw1\">return</span>    <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span> <span class=\"coMULTI\">/*   \"         \"      \"  \"      \"    2.*/</span><br/>even: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> <span class=\"st0\">''</span> -<span class=\"nu0\">1</span> _;  <span class=\"kw1\">return</span>\u00a0!<span class=\"sy0\">.</span>_             <span class=\"coMULTI\">/*   \"         \"      \"  \"      \"    3.*/</span><br/>                                                 <span class=\"coMULTI\">/*last version shown is the fastest.   */</span><br/>odd:                      <span class=\"kw1\">return</span>   <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">2</span>     <span class=\"coMULTI\">/*returns  \"oddness\" of the argument.  */</span><br/>tell: <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'using the'</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">79</span>, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span>;                    <span class=\"kw1\">return</span><br/>terr: <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> <span class=\"st0\">'***error***'</span>;     <span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"kw1\">say</span>;          <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>size = 10<br/>for i = 1 to size<br/>    if i\u00a0% 2 = 1 see \"\" + i + \" is odd\" + nl<br/>    else see \"\" + i + \" is even\" + nl ok<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">print</span> <span class=\"st0\">\"evens: \"</span><br/><span class=\"kw3\">p</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:even?<span class=\"br0\">)</span><br/><span class=\"kw3\">print</span> <span class=\"st0\">\"odds: \"</span><br/><span class=\"kw3\">p</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:odd?<span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">for i = 1 to 10<br/>  if i and 1 then print i;\" is odd\" else print i;\" is even\"<br/>next i</pre>"}, {"lang": "Rust", "loc": 2, "block": "<pre class=\"text highlighted_source\">let is_odd = |x: i32| x &amp; 1 == 1;<br/>let is_even = |x: i32| x &amp; 1 == 0;</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isEven<span class=\"br0\">(</span> v<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> v <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isOdd<span class=\"br0\">(</span> v<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> v <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">even?</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>#f<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">even?</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>#t<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">odd?</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>#t<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">odd?</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>#f</pre>"}, {"lang": "Seed7", "loc": 1, "block": "<pre class=\"text highlighted_source\">odd(aNumber)</pre>"}, {"lang": "SequenceL", "loc": 2, "block": "<pre class=\"text highlighted_source\">even(x)\u00a0:= x mod 2 = 0;<br/>odd(x)\u00a0:= x mod 2 = 1;</pre>"}, {"lang": "SETL", "loc": 5, "block": "<pre class=\"text highlighted_source\">xs\u00a0:= {1..10};<br/>evens\u00a0:= {x in xs | even( x )};<br/>odds\u00a0:= {x in xs | odd( x )};<br/>print( evens );<br/>print( odds );</pre>"}, {"lang": "Shen", "loc": 7, "block": "<pre class=\"text highlighted_source\">(define even?<br/>    0 -&gt; true<br/>    X -&gt; (odd? (- X 1)))<br/>\u00a0<br/>(define odd?<br/>    0 -&gt; false<br/>    X -&gt; (even? (- X 1)))</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var n = <span class=\"nu0\">42</span>;<br/>say n.<span class=\"me1\">is_odd</span>;       <span class=\"co1\"># false</span><br/>say n.<span class=\"me1\">is_even</span>;      <span class=\"co1\"># true</span></pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"nu0\">5</span> even<br/><span class=\"nu0\">5</span> odd</pre>"}, {"lang": "SNOBOL4", "loc": 10, "block": "<pre class=\"text highlighted_source\">      DEFINE('even(n)')                        \u00a0:(even_end)<br/>even  even = (EQ(REMDR(n, 2), 0) 'even', 'odd')\u00a0:(RETURN)<br/>even_end<br/>\u00a0<br/>      OUTPUT = \"-2 is \" even(-2)<br/>      OUTPUT = \"-1 is \" even(-1)<br/>      OUTPUT = \"0 is \" even(0)<br/>      OUTPUT = \"1 is \" even(1)<br/>      OUTPUT = \"2 is \" even(2)<br/>END</pre>"}, {"lang": "SNUSP", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$====!/?\\==even#<br/>      - -<br/>#odd==\\?/<br/>\u00a0</pre>"}, {"lang": "SPL", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt; n, 0..9<br/> \u00a0? #.even(n), #.output(n,\" even\")<br/> \u00a0? #.odd(n), #.output(n,\" odd\")<br/>&lt;</pre>"}, {"lang": "SQL", "loc": 13, "block": "<pre class=\"sql highlighted_source\"><span class=\"co1\">-- Setup a table with some integers</span><br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> ints<span class=\"br0\">(</span><span class=\"kw1\">INT</span> <span class=\"kw1\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> ints <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> ints <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> ints <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> ints <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">-- Are they even or odd?</span><br/><span class=\"kw1\">SELECT</span><br/>  <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">CASE</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span><span class=\"kw1\">INT</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">WHEN</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"st0\">'Even'</span> <span class=\"kw1\">ELSE</span> <span class=\"st0\">'Odd'</span> <span class=\"kw1\">END</span><br/><span class=\"kw1\">FROM</span><br/>  ints;</pre>"}, {"lang": "SSEM", "loc": 15, "block": "<pre class=\"text highlighted_source\">11110000000000100000000000000000   0. -15 to c<br/>00000000000000110000000000000000   1. Test<br/>11110000000001100000000000000000   2. c to 15<br/>11110000000000100000000000000000   3. -15 to c<br/>00001000000001100000000000000000   4. c to 16<br/>00001000000000100000000000000000   5. -16 to c<br/>01110000000000010000000000000000   6. Sub. 14<br/>11110000000001100000000000000000   7. c to 15<br/>10110000000000010000000000000000   8. Sub. 13<br/>00000000000000110000000000000000   9. Test<br/>01110000000000000000000000000000  10. 14 to CI<br/>11110000000000100000000000000000  11. -15 to c<br/>00000000000001110000000000000000  12. Stop<br/>10000000000000000000000000000000  13. 1<br/>01000000000000000000000000000000  14. 2</pre>"}, {"lang": "Standard ML", "loc": 15, "block": "<pre class=\"text highlighted_source\">fun even n = <br/>  n mod 2 = 0;<br/>\u00a0<br/>fun odd n = <br/>  n mod 2 &lt;&gt; 0;<br/>\u00a0<br/>(* bitwise and *)<br/>\u00a0<br/>type werd = Word.word;<br/>\u00a0<br/>fun evenbitw(w: werd) = <br/>  Word.andb(w, 0w2) = 0w0;<br/>\u00a0<br/>fun oddbitw(w: werd) = <br/>  Word.andb(w, 0w2) &lt;&gt; 0w0;</pre>"}, {"lang": "Stata", "loc": 9, "block": "<pre class=\"text highlighted_source\">mata<br/>function iseven(n) {<br/>\treturn(mod(n,2)==0)<br/>}<br/>\u00a0<br/>function isodd(n) {<br/>\treturn(mod(n,2)==1)<br/>}<br/>end</pre>"}, {"lang": "Swift", "loc": 13, "block": "<pre class=\"text highlighted_source\">func isEven(n:Int) -&gt; Bool {<br/>\u00a0<br/>    // Bitwise check<br/>    if (n &amp; 1\u00a0!= 0) {<br/>        return false<br/>    }<br/>\u00a0<br/>    // Mod check<br/>    if (n\u00a0% 2\u00a0!= 0) {<br/>        return false<br/>    }<br/>    return true<br/>}</pre>"}, {"lang": "Symsyn", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>n\u00a0: 23<br/>\u00a0<br/> if n bit 0<br/>    'n is odd' []<br/> else<br/>    'n is even' []<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 9, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Bitwise test is the most efficient</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">isOdd</span> x  <span class=\"br0\">{</span> <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">isEven</span> x <span class=\"br0\">{</span> <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\" # O E\"</span><br/><span class=\"kw2\">puts</span> <span class=\"nu0\">24</span>:<span class=\"br0\">[</span><span class=\"kw1\">expr</span> isOdd<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"kw1\">expr</span> isEven<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"nu0\">49</span>:<span class=\"br0\">[</span><span class=\"kw1\">expr</span> isOdd<span class=\"br0\">(</span><span class=\"nu0\">49</span><span class=\"br0\">)</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"kw1\">expr</span> isEven<span class=\"br0\">(</span><span class=\"nu0\">49</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>If fPart(.5Ans<br/>Then<br/>Disp \"ODD<br/>Else<br/>Disp \"EVEN<br/>End<br/>\u00a0</pre>"}, {"lang": "TUSCRIPT", "loc": 10, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>LOOP n=-5,5<br/>x=MOD(n,2)<br/>SELECT x<br/>CASE 0<br/>PRINT n,\" is even\"<br/>DEFAULT<br/>PRINT n,\" is odd\"<br/>ENDSELECT<br/>ENDLOOP</pre>"}, {"lang": "UNIX Shell", "loc": 4, "block": "<pre class=\"text highlighted_source\">iseven() {<br/>    [[ $(($1%2)) -eq 0 ]] &amp;&amp; return 0<br/>    return 1<br/>}</pre>"}, {"lang": "Ursa", "loc": 7, "block": "<pre class=\"text highlighted_source\">decl int input<br/>set input (in int console)<br/>if (= (mod input 2) 1)<br/>        out \"odd\" endl console<br/>else<br/>        out \"even\" endl console<br/>end if</pre>"}, {"lang": "\u0b89\u0baf\u0bbf\u0bb0\u0bcd/Uyir", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u0bae\u0bc1\u0ba4\u0ba9\u0bcd\u0bae\u0bc8 \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bbf\u0ba9\u0bcd \u0bb5\u0b95\u0bc8 \u0b8e\u0ba3\u0bcd \u0baa\u0ba3\u0bbf {{<br/>        \u0b8e \u0b87\u0ba9\u0bcd \u0bb5\u0b95\u0bc8 \u0b8e\u0ba3\u0bcd{$5} = 0;<br/>        \u0baa\u0b9f\u0bc8 \u0bb5\u0b95\u0bc8 \u0b9a\u0bb0\u0bae\u0bcd;<br/>\u00a0<br/>        \"\u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0b95\u0bcd \u0b95\u0bca\u0b9f\u0bc1\u0b99\u0bcd\u0b95\u0bb3\u0bcd? \") \u0b90 \u0ba4\u0bbf\u0bb0\u0bc8.\u0b87\u0b9f\u0bc1;<br/>\u00a0<br/>        \u0b8e = \u0b8e\u0ba3\u0bcd{$5} \u0b90 \u0bb5\u0bbf\u0b9a\u0bc8.\u0b8e\u0b9f\u0bc1;<br/>\u00a0<br/>        \u0b92\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bbe\u0bb2\u0bcd (\u0b8e.\u0b87\u0bb0\u0bc1\u0bae\u0bae\u0bcd(0) == 1) \u0b86\u0b95\u0bbf\u0bb2\u0bcd {<br/>                \u0baa\u0b9f\u0bc8 = \"\u0b92\u0bb1\u0bcd\u0bb1\u0bc8\";<br/>        } \u0b87\u0bb2\u0bcd\u0bb2\u0bc8\u0baf\u0bc7\u0bb2\u0bcd {<br/>                \u0baa\u0b9f\u0bc8 = \"\u0b87\u0bb0\u0b9f\u0bcd\u0b9f\u0bc8 \";<br/>        }<br/>\u00a0<br/>        {\u0b8e, \" \u0b92\u0bb0\u0bc1 \", \u0baa\u0b9f\u0bc8, \"\u0baa\u0bcd\u0baa\u0b9f\u0bc8 \u0b8e\u0ba3\u0bcd \u0b86\u0b95\u0bc1\u0bae\u0bcd\"} \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bc8 \u0ba4\u0bbf\u0bb0\u0bc8.\u0b87\u0b9f\u0bc1;<br/>\u00a0<br/>        \u0bae\u0bc1\u0ba4\u0ba9\u0bcd\u0bae\u0bc8  = 0;<br/>}};</pre>"}, {"lang": "VBA", "loc": 1, "block": "<pre>4 ways = 4 Functions\u00a0:\nIsEven ==&gt; Use the even and odd predicates\nIsEven2 ==&gt; Check the least significant digit. With binary integers, i bitwise-and 1 equals 0 iff i is even\nIsEven3 ==&gt; Divide i by 2. The remainder equals 0 if i is even.\nIsEven4 ==&gt; Use modular congruences</pre>"}, {"lang": "VBScript", "loc": 14, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> odd_or_even(n)<br/>\t<span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>\t\todd_or_even = <span class=\"st0\">\"Even\"</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\todd_or_even = <span class=\"st0\">\"Odd\"</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"Please enter a number: \"</span><br/>n = WScript.StdIn.ReadLine<br/>WScript.StdOut.Write n &amp; <span class=\"st0\">\" is \"</span> &amp; odd_or_even(CInt(n))<br/>WScript.StdOut.WriteLine<br/>\u00a0</pre>"}, {"lang": "WDTE", "loc": 15, "block": "<pre class=\"text highlighted_source\">let s =&gt; import 'stream';<br/>let str =&gt; import 'strings';<br/>\u00a0<br/>let evenOrOdd n =&gt; (<br/>\tlet even n =&gt; == (% n 2) 0;<br/>\tswitch n {<br/>\t\teven =&gt; 'even';<br/>\t\tdefault =&gt; 'odd';<br/>\t};<br/>);<br/>\u00a0<br/>s.range 10<br/>-&gt; s.map (@ s n =&gt; str.format '{} is {}.' n (evenOrOdd n))<br/>-&gt; s.map (io.writeln io.stdout)<br/>-&gt; s.drain;</pre>"}, {"lang": "xEec", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;100 p i# jz-1 o# t h#1 ms jz2003 p &gt;0110 h#2 r ms t h#1 ms p <br/>jz1002 h? jz2003 p jn0110 h#10 o$ p jn100 &gt;2003 p p h#0 h#10 <br/>h$d h$d h$o h#32 h$s h$i h#32 jn0000 &gt;1002 p p h#0 h#10 <br/>h$n h$e h$v h$e h#32 h$s h$i h#32 &gt;0000 o$ p jn0000 jz100<br/>\u00a0</pre>"}, {"lang": "XLISP", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> my-<span class=\"kw1\">evenp</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">logand</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> my-<span class=\"kw1\">oddp</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">logand</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 9, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>int I;<br/>[for I:= -4 to +3 do<br/>        [IntOut(0, I);<br/>        Text(0, if I&amp;1 then \" is odd   \" else \" is even  \"); <br/>        Text(0, if rem(I/2)#0 then \"odd\" else \"even\");<br/>        CrLf(0);<br/>        ];<br/>]</pre>"}, {"lang": "Yabasic", "loc": 4, "block": "<pre class=\"text highlighted_source\">for i = -5 to 5<br/>    print i, and(i,1), mod(i,2)<br/>next<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">[-3..4].pump(fcn(n){ println(n,\" is \",n.isEven and \"even\" or \"odd\") })</pre>"}, {"lang": "zonnon", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module Main;<br/>var<br/>\tx: integer;<br/>\ts: set;<br/>begin<br/>\tx\u00a0:= 10;writeln(x:3,\" is odd?\",odd(x));<br/>\ts\u00a0:= set(s);writeln(x:3,\" is odd?\",0 in s); (* check right bit *)<br/>\tx\u00a0:= 11;writeln(x:3,\" is odd?\",odd(x));<br/>\ts\u00a0:= set(x);writeln(x:3,\" is odd?\",0 in s); (* check right bit *)<br/>end Main.<br/>\u00a0</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 6, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">FOR</span> n=-<span class=\"nu0\">3</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">30</span>: <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">20</span> STOP <br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> odd=FN m<span class=\"br0\">(</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">PRINT</span> n;<span class=\"st0\">\" is \"</span>;<span class=\"br0\">(</span><span class=\"st0\">\"Even\"</span> <span class=\"kw4\">AND</span> odd=<span class=\"nu0\">0</span><span class=\"br0\">)</span>+<span class=\"br0\">(</span><span class=\"st0\">\"Odd\"</span> <span class=\"kw4\">AND</span> odd=<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">60</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b</pre>"}]}