{"task": "SHA-1", "blocks": [{"lang": "Ada", "loc": 8, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">SHA1</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Main <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"SHA1 (\"</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"st0\">\") = \"</span> &amp;<br/>                         GNAT.<span class=\"me1\">SHA1</span>.<span class=\"me1\">Digest</span> <span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Main;</pre>"}, {"lang": "Astro", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> crypto <span class=\"br0\">{</span> sha1 <span class=\"br0\">}</span><br/>let <span class=\"kw2\">hash</span> <span class=\"sy0\">=</span> sha1.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"st0\">'Ars longa, vita brevis'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">hash</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 52, "block": "<pre class=\"autohotkey highlighted_source\">str <span class=\"sy0\">:=</span> <span class=\"st0\">\"Rosetta Code\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"String:`n\"</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"st0\">\"`n`nSHA:`n\"</span> SHA<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">; SHA ===============================================================================</span><br/>SHA<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> CalcStringHash<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> 0x8004<span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; CalcAddrHash ======================================================================</span><br/>CalcAddrHash<span class=\"br0\">(</span>addr<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> byref hash <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> byref hashlength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    static h <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"F\"</span><span class=\"br0\">]</span><br/>    static b <span class=\"sy0\">:=</span> h<span class=\"sy0\">.</span>minIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    o <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptAcquireContext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr*\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> 0xF0000000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptCreateHash\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr*\"</span><span class=\"sy0\">,</span> hHash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptHashData\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> addr<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptGetHashParam\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt*\"</span><span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptGetHashParam\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>hash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt*\"</span><span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% hashlength<br/>                        <span class=\"br0\">{</span><br/>                            v <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumGet</span></a><span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UChar\"</span><span class=\"br0\">)</span><br/>                            o <span class=\"sy0\">.=</span> h<span class=\"br0\">[</span><span class=\"br0\">(</span>v <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"br0\">]</span> h<span class=\"br0\">[</span><span class=\"br0\">(</span>v <span class=\"sy0\">&amp;</span> 0xf<span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"br0\">]</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptDestroyHash\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryPtreleaseContext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> o<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; CalcStringHash ====================================================================</span><br/>CalcStringHash<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-8\"</span><span class=\"sy0\">,</span> byref hash <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> byref hashlength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    chrlength <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"cp1200\"</span> || encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-16\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <span class=\"nu0\">1</span><br/>    length <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>StrPut<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> chrlength<br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>data<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    StrPut<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>data<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span>length <span class=\"sy0\">/</span> chrlength<span class=\"br0\">)</span><span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> CalcAddrHash<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>data<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> hash<span class=\"sy0\">,</span> hashlength<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">      PRINT FNsha1(\"Rosetta Code\")<br/>      END<br/>\u00a0<br/>      DEF FNsha1(message$)<br/>      LOCAL buflen%, buffer%, hprov%, hhash%, hash$, i%<br/>      CALG_SHA1 = &amp;8004<br/>      CRYPT_VERIFYCONTEXT = &amp;F0000000<br/>      HP_HASHVAL = 2<br/>      PROV_RSA_FULL = 1<br/>      buflen% = 64<br/>      DIM buffer% LOCAL buflen%-1<br/>      SYS \"CryptAcquireContext\", ^hprov%, 0, 0, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT<br/>      SYS \"CryptCreateHash\", hprov%, CALG_SHA1, 0, 0, ^hhash%<br/>      SYS \"CryptHashData\", hhash%, message$, LEN(message$), 0<br/>      SYS \"CryptGetHashParam\", hhash%, HP_HASHVAL, buffer%, ^buflen%, 0<br/>      SYS \"CryptDestroyHash\", hhash%<br/>      SYS \"CryptReleaseContext\", hprov%<br/>      FOR i% = 0 TO buflen%-1<br/>        hash$ += RIGHT$(\"0\" + STR$~buffer%?i%, 2)<br/>      NEXT<br/>      = hash$</pre>"}, {"lang": "C", "loc": 18, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;openssl/sha.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> result<span class=\"br0\">[</span>SHA_DIGEST_LENGTH<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>string <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  SHA1<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">,</span> result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> SHA_DIGEST_LENGTH<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%02x%c\"</span><span class=\"sy0\">,</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> i <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>SHA_DIGEST_LENGTH<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 20, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include \"Poco/SHA1Engine.h\"</span><br/><span class=\"co2\">#include \"Poco/DigestStream.h\"</span><br/>\u00a0<br/><span class=\"kw2\">using</span> Poco<span class=\"sy4\">::</span><span class=\"me2\">DigestEngine</span> <span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> Poco<span class=\"sy4\">::</span><span class=\"me2\">SHA1Engine</span> <span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> Poco<span class=\"sy4\">::</span><span class=\"me2\">DigestOutputStream</span> <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> myphrase <span class=\"br0\">(</span> <span class=\"st0\">\"Rosetta Code\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   SHA1Engine sha1 <span class=\"sy4\">;</span><br/>   DigestOutputStream outstr<span class=\"br0\">(</span> sha1 <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   outstr <span class=\"sy1\">&lt;&lt;</span> myphrase <span class=\"sy4\">;</span><br/>   outstr.<span class=\"me1\">flush</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <span class=\"co1\">//to pass everything to the digest engine</span><br/>   <span class=\"kw4\">const</span> DigestEngine<span class=\"sy4\">::</span><span class=\"me2\">Digest</span><span class=\"sy3\">&amp;</span> digest <span class=\"sy1\">=</span> sha1.<span class=\"me1\">digest</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> myphrase <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" as a sha1 digest\u00a0:\"</span> <span class=\"sy1\">&lt;&lt;</span> DigestEngine<span class=\"sy4\">::</span><span class=\"me2\">digestToHex</span><span class=\"br0\">(</span> digest <span class=\"br0\">)</span> <br/>      <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 21, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Security.Cryptography</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">SHA1</span><br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>TestClass<span class=\"br0\">]</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> SHA1CryptoServiceProviderTest<br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>TestMethod<span class=\"br0\">]</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> TestComputeHash<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> input <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> UTF8Encoding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">GetBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> output <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SHA1CryptoServiceProvider<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ComputeHash</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Assert<span class=\"sy0\">.</span><span class=\"me1\">AreEqual</span><span class=\"br0\">(</span><br/>                <span class=\"st0\">\"48-C9-8F-7E-5A-6E-73-6D-79-0A-B7-40-DF-C3-F5-1A-61-AB-E2-B5\"</span>,<br/>                BitConverter<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 1, "block": "<pre>USER&gt;set hash=$System.Encryption.SHA1Hash(\"Rosetta Code\")\nUSER&gt;zzdump hash\n0000: 48 C9 8F 7E 5A 6E 73 6D 79 0A B7 40 DF C3 F5 1A\n0010: 61 AB E2 B5</pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;; in addition to sha1, ironclad provides sha224, sha256, sha384, and sha512.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sha1-<span class=\"kw1\">hash</span> <span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sha1 <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">make-digest</span> 'ironclad<span class=\"sy0\">:</span><span class=\"me1\">sha1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>bin-data <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">ascii-string-to-byte-</span><span class=\"kw1\">array</span> data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">update-digest</span> sha1 bin-data<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">byte-array-to-hex-string</span> <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">produce-digest</span> sha1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;; in addition to sha1, ironclad provides sha224, sha256, sha384, and sha512.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sha1-<span class=\"kw1\">hash</span> <span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sha1 <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">make-digest</span> 'ironclad<span class=\"sy0\">:</span><span class=\"me1\">sha1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>bin-data <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">ascii-string-to-byte-</span><span class=\"kw1\">array</span> data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">update-digest</span> sha1 bin-data<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">byte-array-to-hex-string</span> <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">produce-digest</span> sha1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">digest</span>.<span class=\"me1\">sha</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%02x%)\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ars longa, vita brevis\"</span>.<span class=\"me1\">sha1Of</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DWScript", "loc": 1, "block": "<pre class=\"delphi highlighted_source\">PrintLn<span class=\"br0\">(</span> HashSHA1<span class=\"sy1\">.</span><span class=\"me1\">HashData</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta code'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>12&gt; crypto:hash( sha, \"A string\" ).                                              \n&lt;&lt;110,185,174,8,151,66,9,104,174,225,10,43,9,92,82,190,197,150,224,92&gt;&gt;\n</pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> System.<span class=\"me1\">Security</span>.<span class=\"me1\">Cryptography</span>.<span class=\"me1\">SHA1</span>.<span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"%x \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n.<span class=\"me1\">ComputeHash</span> <span class=\"st0\">\"Rosetta Code\"</span>B<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>IN: scratchpad <b>USING: checksums checksums.sha\u00a0;</b>\nIN: scratchpad <b>\"Rosetta Code\" sha1 checksum-bytes hex-string .</b>\n\"48c98f7e5a6e736d790ab740dfc3f51a61abe2b5\"\n</pre>"}, {"lang": "Fortran", "loc": 96, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> sha1_m<br/>    <span class=\"kw3\">use</span> kernel32<br/>    <span class=\"kw3\">use</span> advapi32<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">SHA1LEN</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/><span class=\"co1\">contains</span><br/>    <span class=\"kw1\">subroutine</span> sha1hash<span class=\"br0\">(</span><span class=\"kw1\">name</span>, hash, dwStatus, filesize<span class=\"br0\">)</span><br/>        <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><br/>        <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">BUFLEN</span> <span class=\"sy0\">=</span> <span class=\"nu0\">32768</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>HANDLE<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">hFile</span>, hProv, hHash<br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>DWORD<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">dwStatus</span>, nRead<br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>BOOL<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">status</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>BYTE<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">buffer</span><span class=\"br0\">(</span>BUFLEN<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>BYTE<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">hash</span><span class=\"br0\">(</span>SHA1LEN<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>UINT64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">filesize</span><br/>\u00a0<br/>        dwStatus <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        filesize <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        hFile <span class=\"sy0\">=</span> CreateFile<span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, GENERIC_READ, FILE_SHARE_READ, NULL, <span class=\"sy0\">&amp;</span><br/>                           OPEN_EXISTING, FILE_FLAG_SEQUENTIAL_SCAN, NULL<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hFile <span class=\"sy0\">==</span> INVALID_HANDLE_VALUE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CreateFile failed.\"</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CryptAcquireContext<span class=\"br0\">(</span>hProv, NULL, NULL, PROV_RSA_FULL, <span class=\"sy0\">&amp;</span><br/>                                CRYPT_VERIFYCONTEXT<span class=\"br0\">)</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\u00a0<br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CryptAcquireContext failed.\"</span><br/>            <span class=\"kw1\">goto</span> <span class=\"nu0\">3</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CryptCreateHash<span class=\"br0\">(</span>hProv, CALG_SHA1, <span class=\"nu0\">0</span>_ULONG_PTR, <span class=\"nu0\">0</span>_DWORD, hHash<span class=\"br0\">)</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\u00a0<br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CryptCreateHash failed.\"</span><br/>            <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">status</span> <span class=\"sy0\">=</span> ReadFile<span class=\"br0\">(</span>hFile, loc<span class=\"br0\">(</span>buffer<span class=\"br0\">)</span>, BUFLEN, loc<span class=\"br0\">(</span>nRead<span class=\"br0\">)</span>, NULL<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">status</span> <span class=\"sy0\">==</span> FALSE <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> nRead <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>            filesize <span class=\"sy0\">=</span> filesize <span class=\"sy0\">+</span> nRead<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CryptHashData<span class=\"br0\">(</span>hHash, buffer, nRead, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CryptHashData failed.\"</span><br/>                <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">status</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"ReadFile failed.\"</span><br/>            <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>        nRead <span class=\"sy0\">=</span> SHA1LEN<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CryptGetHashParam<span class=\"br0\">(</span>hHash, HP_HASHVAL, hash, nRead, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> FALSE<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            dwStatus <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">\"CryptGetHashParam failed.\"</span>, <span class=\"kw1\">status</span>, nRead, dwStatus<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>      <span class=\"nu0\">1</span> <span class=\"kw1\">status</span> <span class=\"sy0\">=</span> CryptDestroyHash<span class=\"br0\">(</span>hHash<span class=\"br0\">)</span><br/>      <span class=\"nu0\">2</span> <span class=\"kw1\">status</span> <span class=\"sy0\">=</span> CryptReleaseContext<span class=\"br0\">(</span>hProv, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"nu0\">3</span> <span class=\"kw1\">status</span> <span class=\"sy0\">=</span> CloseHandle<span class=\"br0\">(</span>hFile<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> sha1<br/>    <span class=\"kw3\">use</span> sha1_m<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, m, i, j<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>DWORD<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">dwStatus</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>BYTE<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">hash</span><span class=\"br0\">(</span>SHA1LEN<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>UINT64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">filesize</span><br/>\u00a0<br/>    n <span class=\"sy0\">=</span> command_argument_count<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>        <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span>i, length<span class=\"sy0\">=</span>m<span class=\"br0\">)</span><br/>        <span class=\"kw1\">allocate</span><span class=\"br0\">(</span><span class=\"kw3\">character</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span>i, <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">call</span> sha1hash<span class=\"br0\">(</span><span class=\"kw1\">name</span>, hash, dwStatus, filesize<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dwStatus <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, SHA1LEN<br/>                write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(Z2.2)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> hash<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>            write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(' ',A,' (',G0,' bytes)')\"</span><span class=\"br0\">)</span> <span class=\"kw1\">name</span>, filesize<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 106, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 18-10-2016</span><br/><span class=\"co1\">' started with SHA-1/FIPS-180-1</span><br/><span class=\"co1\">' but used the BBC BASIC native version to finish. </span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> SHA_1<span class=\"br0\">(</span>test_str <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> message = test_str   <span class=\"co1\">' strings are passed as ByRef's</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, j<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span> ww1 <br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; <span class=\"kw1\">Ptr</span> ww4 <br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>  <span class=\"co1\">' set the first bit after the message to 1</span><br/>  message = message + <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">' add one char to the length</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong padding = <span class=\"nu0\">64</span> - <span class=\"br0\">(</span><span class=\"br0\">(</span>l +<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"br0\">(</span><span class=\"nu0\">512</span> \\ <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">' 512 \\ 8 = 64 char.</span><br/>\u00a0<br/>  <span class=\"co1\">' check if we have enough room for inserting the length</span><br/>  <span class=\"kw1\">If</span> padding &lt; <span class=\"nu0\">8</span> <span class=\"kw1\">Then</span> padding = padding + <span class=\"nu0\">64</span><br/>\u00a0<br/>  message = message + <span class=\"kw1\">String</span><span class=\"br0\">(</span>padding, <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">' adjust length</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong l1 = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span>                <span class=\"co1\">' new length</span><br/>\u00a0<br/>  l = l * <span class=\"nu0\">8</span>    <span class=\"co1\">' orignal length in bits</span><br/>  <span class=\"co1\">' create ubyte ptr to point to l ( = length in bits)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span> ub_ptr = Cast<span class=\"br0\">(</span><span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span>, @l<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span>  <span class=\"co1\">'copy length of message to the last 8 bytes</span><br/>    message<span class=\"br0\">[</span>l1 -<span class=\"nu0\">1</span> - i<span class=\"br0\">]</span> = ub_ptr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; A, B, C, D, E, k, temp, W<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">79</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; H0 = &amp;H67452301<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; H1 = &amp;HEFCDAB89<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; H2 = &amp;H98BADCFE<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; H3 = &amp;H10325476<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; H4 = &amp;HC3D2E1F0<br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>l1 -<span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">64</span> <span class=\"co1\">' split into block of 64 bytes</span><br/>    ww1 = Cast<span class=\"br0\">(</span><span class=\"kw1\">Ubyte</span> <span class=\"kw1\">Ptr</span>, @message<span class=\"br0\">[</span>j * <span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    ww4 = Cast<span class=\"br0\">(</span>UInteger&lt;<span class=\"nu0\">32</span>&gt; <span class=\"kw1\">Ptr</span>, @message<span class=\"br0\">[</span>j * <span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">60</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">4</span>  <span class=\"co1\">'little endian -&gt; big endian </span><br/>      <span class=\"kw1\">Swap</span> ww1<span class=\"br0\">[</span>i   <span class=\"br0\">]</span>, ww1<span class=\"br0\">[</span>i +<span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">Swap</span> ww1<span class=\"br0\">[</span>i +<span class=\"nu0\">1</span><span class=\"br0\">]</span>, ww1<span class=\"br0\">[</span>i +<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">15</span>    <span class=\"co1\">' copy the 16 32bit block into the array</span><br/>      W<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = ww4<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">16</span> <span class=\"kw1\">To</span> <span class=\"nu0\">79</span>   <span class=\"co1\">' fill the rest of the array</span><br/>      temp = W<span class=\"br0\">(</span>i -<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> W<span class=\"br0\">(</span>i -<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> W<span class=\"br0\">(</span>i -<span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> W<span class=\"br0\">(</span>i -<span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>      temp = temp <span class=\"kw1\">Shl</span> <span class=\"nu0\">1</span> + temp <span class=\"kw1\">Shr</span> <span class=\"nu0\">31</span><br/>      W<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = temp<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    A = h0\u00a0: B = h1\u00a0: C = h2\u00a0: D = h3\u00a0: E = h4<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">79</span><br/>      Select <span class=\"kw1\">Case</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> i<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19</span><br/>          temp = <span class=\"br0\">(</span>B And C<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Not</span> B<span class=\"br0\">)</span> And D<span class=\"br0\">)</span><br/>          k = &amp;H5A827999<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">20</span> <span class=\"kw1\">To</span> <span class=\"nu0\">39</span><br/>          temp = B <span class=\"kw1\">Xor</span> C <span class=\"kw1\">Xor</span> D<br/>          k = &amp;H6ED9EBA1<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">40</span> <span class=\"kw1\">To</span> <span class=\"nu0\">59</span><br/>          temp = <span class=\"br0\">(</span>B And C<span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>B And D<span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>C And D<span class=\"br0\">)</span><br/>          k = &amp;H8F1BBCDC<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">60</span> <span class=\"kw1\">To</span> <span class=\"nu0\">79</span><br/>          temp = B <span class=\"kw1\">Xor</span> C <span class=\"kw1\">Xor</span> D<br/>          k = &amp;hCA62C1D6<br/>      <span class=\"kw1\">End</span> Select<br/>\u00a0<br/>      temp = A <span class=\"kw1\">Shl</span> <span class=\"nu0\">5</span> + A <span class=\"kw1\">Shr</span> <span class=\"nu0\">27</span> + temp + E + k + W<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      E = D<br/>      D = C<br/>      C = <span class=\"br0\">(</span>B <span class=\"kw1\">Shl</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>B <span class=\"kw1\">Shr</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      B = A<br/>      A = temp<br/>\u00a0<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    h0 += A\u00a0: h1 += B\u00a0: h2 += C\u00a0: h3 += D\u00a0: h4 += E <br/>\u00a0<br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h0, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h1, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h2, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h3, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h4, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> test = <span class=\"st0\">\"Rosetta Code\"</span><br/><span class=\"kw1\">Print</span> test; <span class=\"st0\">\" =&gt; \"</span>; SHA_1<span class=\"br0\">(</span>test<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 12, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"crypto/sha1\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    h <span class=\"sy2\">:=</span> sha1<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>    h<span class=\"sy3\">.</span>Write<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%x<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>Sum<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Halon", "loc": 2, "block": "<pre class=\"text highlighted_source\">$var = \"Rosetta Code\";<br/>echo sha1($var);</pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Digestor <br/>   <span class=\"kw1\">where</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Digest<span class=\"sy0\">.</span>Pure<span class=\"sy0\">.</span>SHA<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>ByteString<span class=\"sy0\">.</span>Lazy <span class=\"kw1\">as</span> B<br/>\u00a0<br/>convertString <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> B<span class=\"sy0\">.</span>ByteString<br/>convertString phrase <span class=\"sy0\">=</span> B<span class=\"sy0\">.</span>pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a> <span class=\"br0\">)</span> phrase<br/>\u00a0<br/>convertToSHA1 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>convertToSHA1 word <span class=\"sy0\">=</span> showDigest <span class=\"sy0\">$</span> sha1 <span class=\"sy0\">$</span> convertString word <br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"Rosetta Code SHA1-codiert: \"</span><br/>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> convertToSHA1 <span class=\"st0\">\"Rosetta Code\"</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   require <span class=\"st_h\">'~addons/ide/qt/qt.ijs'</span><br/>   getsha1=: <span class=\"st_h\">'sha1'</span>&amp;gethash_jqtide_<br/>   getsha1 <span class=\"st_h\">'Rosetta Code'</span><br/>48c98f7e5a6e736d790ab740dfc3f51a61abe2b5</pre>"}, {"lang": "Java", "loc": 12, "block": "<pre class=\"text highlighted_source\">using Nettle<br/>\u00a0<br/>testdict = Dict(\"abc\" =&gt; \"a9993e364706816aba3e25717850c26c9cd0d89d\",<br/>                \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\" =&gt;<br/>                    \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",<br/>                \"a\" ^ 1_000_000 =&gt; \"34aa973cd4c4daa4f61eeb2bdbad27316534016f\",)<br/>\u00a0<br/>for (text, expect) in testdict<br/>    digest = hexdigest(\"sha1\", text)<br/>    if length(text) &gt; 50 text = text[1:50] * \"...\" end<br/>    println(\"# $text\\n -&gt; digest: $digest\\n -&gt; expect: $expect\")<br/>end</pre>"}, {"lang": "Julia", "loc": 12, "block": "<pre class=\"text highlighted_source\">using Nettle<br/>\u00a0<br/>testdict = Dict(\"abc\" =&gt; \"a9993e364706816aba3e25717850c26c9cd0d89d\",<br/>                \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\" =&gt;<br/>                    \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",<br/>                \"a\" ^ 1_000_000 =&gt; \"34aa973cd4c4daa4f61eeb2bdbad27316534016f\",)<br/>\u00a0<br/>for (text, expect) in testdict<br/>    digest = hexdigest(\"sha1\", text)<br/>    if length(text) &gt; 50 text = text[1:50] * \"...\" end<br/>    println(\"# $text\\n -&gt; digest: $digest\\n -&gt; expect: $expect\")<br/>end</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">security</span>.<span class=\"me1\">MessageDigest</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text  <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta Code\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bytes <span class=\"sy0\">=</span> text.<span class=\"me1\">toByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> md <span class=\"sy0\">=</span> MessageDigest.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA-1\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> digest <span class=\"sy0\">=</span> md.<span class=\"me1\">digest</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"kw2\">byte</span> in digest<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">cipher_digest('Rosetta Code', -digest='SHA1',-hex=true)</pre>"}, {"lang": "Liberty BASIC", "loc": 72, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"co1\">'--------------------------------------------------------------------------------</span><br/><span class=\"co1\">'           FAST SHA1 CALCULATION BASED ON MS ADVAPI32.DLL BY CRYPTOMAN         '</span><br/><span class=\"co1\">'           BASED ON SHA256 EXAMPLE BY RICHARD T. RUSSEL AUTHOR OF LBB          '</span><br/><span class=\"co1\">'                           http://lbb.conforums.com/                           '</span><br/><span class=\"co1\">'           VERIFY CORRECTNESS BY http://www.fileformat.info/tool/hash.htm      '</span><br/><span class=\"co1\">'--------------------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">print</span> sha1$<span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>    X$<span class=\"sy0\">=</span><span class=\"st0\">\"1234567890ABCDEF\"</span><br/>\u00a0<br/>    dat$ <span class=\"sy0\">=</span> pack$<span class=\"br0\">(</span>X$<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"SPEED TEST\"</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">20</span><br/>    t1<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> sha1$<span class=\"br0\">(</span>dat$<span class=\"br0\">)</span><br/>    t2<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"calculated in \"</span>;t2<span class=\"sy0\">-</span>t1;<span class=\"st0\">\" ms\"</span><br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> sha1$<span class=\"br0\">(</span>message$<span class=\"br0\">)</span><br/>\u00a0<br/>    HP.HASHVAL      <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    CRYPT.NEWKEYSET <span class=\"sy0\">=</span> <span class=\"nu0\">48</span><br/>    PROV.RSA.AES    <span class=\"sy0\">=</span> <span class=\"nu0\">24</span><br/>    buffer$         <span class=\"sy0\">=</span> <span class=\"kw2\">space$</span><span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"br0\">)</span><br/>\u00a0<br/>    PROVRSAFULL     <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    ALGCLASSHASH    <span class=\"sy0\">=</span> <span class=\"nu0\">32768</span><br/>    ALGTYPEANY      <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    ALGSIDMD2       <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    ALGSIDMD4       <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    ALGSIDMD5       <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    ALGSIDSHA1      <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>\u00a0<br/>    ALGOSHA1 <span class=\"sy0\">=</span> ALGCLASSHASH <span class=\"kw1\">OR</span> ALGTYPEANY <span class=\"kw1\">OR</span> ALGSIDSHA1<br/>\u00a0<br/>    <span class=\"kw1\">struct</span> temp<span class=\"sy0\">,</span> v <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>    <span class=\"kw1\">open</span> <span class=\"st0\">\"ADVAPI32.DLL\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">dll</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>advapi32<br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>advapi32<span class=\"sy0\">,</span> <span class=\"st0\">\"CryptAcquireContextA\"</span><span class=\"sy0\">,</span> temp <span class=\"kw1\">as</span> <span class=\"kw1\">struct</span><span class=\"sy0\">,</span> _<br/>                       <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> PROV.RSA.AES <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> _<br/>                       <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> re <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>    hprov <span class=\"sy0\">=</span> temp.v.<span class=\"kw1\">struct</span><br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>advapi32<span class=\"sy0\">,</span> <span class=\"st0\">\"CryptCreateHash\"</span><span class=\"sy0\">,</span> hprov <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> _<br/>                       ALGOSHA1 <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> _<br/>                       temp <span class=\"kw1\">as</span> <span class=\"kw1\">struct</span><span class=\"sy0\">,</span> re <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>    hhash <span class=\"sy0\">=</span> temp.v.<span class=\"kw1\">struct</span><br/>    l <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>message$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>advapi32<span class=\"sy0\">,</span> <span class=\"st0\">\"CryptHashData\"</span><span class=\"sy0\">,</span> hhash <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> message$ <span class=\"kw1\">as</span> <span class=\"kw1\">ptr</span><span class=\"sy0\">,</span> _<br/>                       l <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> re <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>    temp.v.<span class=\"kw1\">struct</span> <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>buffer$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>advapi32<span class=\"sy0\">,</span> <span class=\"st0\">\"CryptGetHashParam\"</span><span class=\"sy0\">,</span> hhash <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> _<br/>                       HP.HASHVAL <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> buffer$ <span class=\"kw1\">as</span> <span class=\"kw1\">ptr</span><span class=\"sy0\">,</span> _<br/>                       temp <span class=\"kw1\">as</span> <span class=\"kw1\">struct</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> re <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>advapi32<span class=\"sy0\">,</span> <span class=\"st0\">\"CryptDestroyHash\"</span><span class=\"sy0\">,</span> hhash <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> re <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>advapi32<span class=\"sy0\">,</span> <span class=\"st0\">\"CryptReleaseContext\"</span><span class=\"sy0\">,</span> hprov <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> re <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>advapi32<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> temp.v.<span class=\"kw1\">struct</span><br/>      sha1$ <span class=\"sy0\">=</span> sha1$ <span class=\"sy0\">+</span> <span class=\"kw2\">right$</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">dechex$</span><span class=\"br0\">(</span><span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>buffer$<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> pack$<span class=\"br0\">(</span>x$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>x$<span class=\"br0\">)</span> step <span class=\"nu0\">2</span><br/>      pack$ <span class=\"sy0\">=</span> pack$ <span class=\"sy0\">+</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"kw2\">hexdec</span><span class=\"br0\">(</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>x$<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 2, "block": "<pre class=\"text highlighted_source\">crypto = xtra(\"Crypto\").new()<br/>put crypto.cx_sha1_string(\"Rosetta Code\")</pre>"}, {"lang": "LiveCode", "loc": 6, "block": "<pre class=\"text highlighted_source\">command shaRosettaCode<br/>    local shex, sha1<br/>    put sha1Digest(\"Rosetta Code\") into sha1<br/>    get binaryDecode(\"H*\",sha1,shex)<br/>    put shex  <br/>end shaRosettaCode</pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\"><span class=\"sy0\">#</span>!<span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>lua<br/>\u00a0<br/><span class=\"kw1\">local</span> sha1 <span class=\"sy0\">=</span> <span class=\"kw3\">require</span> <span class=\"st0\">\"sha1\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> str <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">{</span><span class=\"st0\">\"Rosetta code\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA-1(%q) =\u00a0%s\"</span><span class=\"sy0\">,</span> str<span class=\"sy0\">,</span> sha1<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Hash[\"Rosetta code\",\"SHA1\",\"HexString\"]</pre>"}, {"lang": "NetRexx", "loc": 51, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">security</span>.<span class=\"me0\">MessageDigest</span><br/>\u00a0<br/>SHA1<span class=\"br0\">(</span><span class=\"st0\">'Rosetta Code'</span>, <span class=\"st0\">'48c98f7e5a6e736d790ab740dfc3f51a61abe2b5'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method SHA1<span class=\"br0\">(</span>messageText, verifyCheck<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  algorithm   = <span class=\"st0\">'SHA-1'</span><br/>  digestSum = getDigest<span class=\"br0\">(</span>messageText, algorithm<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'&lt;Message&gt;'</span>messageText<span class=\"st0\">'&lt;/Message&gt;'</span><br/>  <span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'&lt;'</span>algorithm<span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> digestSum<span class=\"st0\">'&lt;/'</span>algorithm<span class=\"st0\">'&gt;'</span><br/>  <span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'&lt;Verify&gt;'</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> verifyCheck<span class=\"st0\">'&lt;/Verify&gt;'</span><br/>  <span class=\"kw1\">if</span> digestSum == verifyCheck <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> algorithm <span class=\"st0\">'Confirmed'</span><br/>                              <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> algorithm <span class=\"st0\">'Failed'</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method getDigest<span class=\"br0\">(</span>messageText = Rexx, algorithm = Rexx <span class=\"st0\">'MD5'</span>, encoding = Rexx <span class=\"st0\">'UTF-8'</span>, lowercase = boolean <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  algorithm = algorithm.<span class=\"kw6\">upper</span><br/>  encoding  = encoding.<span class=\"kw6\">upper</span><br/>\u00a0<br/>  message      = String<span class=\"br0\">(</span>messageText<span class=\"br0\">)</span><br/>  messageBytes = byte<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  digestBytes  = byte<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  digestSum    = Rexx <span class=\"st0\">''</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    messageBytes = message.<span class=\"me0\">getBytes</span><span class=\"br0\">(</span>encoding<span class=\"br0\">)</span><br/>    md = MessageDigest.<span class=\"me0\">getInstance</span><span class=\"br0\">(</span>algorithm<span class=\"br0\">)</span><br/>    md.<span class=\"me0\">update</span><span class=\"br0\">(</span>messageBytes<span class=\"br0\">)</span><br/>    digestBytes = md.<span class=\"me0\">digest</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> b_ = <span class=\"nu0\">0</span> to digestBytes.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>      bb = Rexx<span class=\"br0\">(</span>digestBytes<span class=\"br0\">[</span>b_<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"kw6\">d2x</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> lowercase <span class=\"kw3\">then</span> digestSum = digestSum <span class=\"sy0\">||</span> bb.<span class=\"kw6\">lower</span><br/>                   <span class=\"kw3\">else</span> digestSum = digestSum <span class=\"sy0\">||</span> bb.<span class=\"kw6\">upper</span><br/>      <span class=\"kw3\">end</span> b_<br/>  <span class=\"kw3\">catch</span> ex = Exception<br/>    ex.<span class=\"me0\">printStackTrace</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> digestSum<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">;; using the crypto module from http://www.newlisp.org/code/modules/crypto.lsp.html</span><br/><span class=\"co1\">;; (import native functions from the crypto library, provided by OpenSSL)</span><br/><span class=\"br0\">(</span>module <span class=\"st0\">\"crypto.lsp\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>crypto<span class=\"sy1\">:</span><span class=\"me0\">sha1</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 13, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>const SHA1Len = 20<br/>\u00a0<br/>proc SHA1(d: cstring, n: culong, md: cstring = nil): cstring {.cdecl, dynlib: \"libssl.so\", importc.}<br/>\u00a0<br/>proc SHA1(s: string): string =<br/>  result = \"\"<br/>  var s = SHA1(s.cstring, s.len.culong)<br/>  for i in 0 .. &lt; SHA1Len:<br/>    result.add s[i].BiggestInt.toHex(2).toLower<br/>\u00a0<br/>echo SHA1(\"Rosetta Code\")</pre>"}, {"lang": "Oberon-2", "loc": 19, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> SHA1;<br/><span class=\"kw1\">IMPORT</span> <br/>  Crypto<span class=\"sy0\">:</span>SHA1<span class=\"sy0\">,</span><br/>  Crypto<span class=\"sy0\">:</span>Utils<span class=\"sy0\">,</span><br/>  Strings<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">VAR</span><br/>  h<span class=\"sy0\">:</span> SHA1.<span class=\"me1\">Hash</span>;<br/>  str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  h <span class=\"sy0\">:=</span> SHA1.<span class=\"me1\">NewHash</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  h.<span class=\"me1\">Initialize</span>;<br/>  str <span class=\"sy0\">:=</span> <span class=\"st0\">\"Rosetta Code\"</span>;<br/>  h.<span class=\"me1\">Update</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  h.<span class=\"me1\">GetHash</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA1: \"</span><span class=\"br0\">)</span>;Utils.<span class=\"me1\">PrintHex</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>h.<span class=\"me1\">size</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> SHA1.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\">$ ocaml <span class=\"sy0\">-</span>I <span class=\"sy0\">+</span>sha sha1<span class=\"sy0\">.</span>cma<br/>        Objective Caml version 3<span class=\"sy0\">.</span>12<span class=\"sy0\">.</span>1<br/>\u00a0<br/><span class=\"sy0\">#</span> Sha1<span class=\"sy0\">.</span>to_hex <span class=\"br0\">(</span>Sha1<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span> <span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"48c98f7e5a6e736d790ab740dfc3f51a61abe2b5\"</span></pre>"}, {"lang": "Octave", "loc": 1, "block": "<pre class=\"octave highlighted_source\"><a href=\"http://octave.sourceforge.net/octave/function/sprintf.html\"><span class=\"kw5\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%02x\"</span><span class=\"sy5\">,</span> SHA1<span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"co4\">\"Rosetta Code\"</span><span class=\"br0\">(</span><span class=\"sy4\">:</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">sha1<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">extern</span><span class=\"br0\">(</span><span class=\"st0\">\"echo <span class=\"es0\">\\\"</span>Str(`echo -n '\"</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"st0\">\"'|sha1sum|cut -d' ' -f1`)<span class=\"es0\">\\\"</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 9, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> RosettaSha1<span class=\"sy1\">;</span><br/><span class=\"kw1\">uses</span><br/>    sha1<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   d<span class=\"sy1\">:</span> TSHA1Digest<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>     d<span class=\"sy1\">:</span><span class=\"sy3\">=</span>SHA1String<span class=\"br0\">(</span><span class=\"st0\">'Rosetta Code'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>     <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>SHA1Print<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">SHA</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>sha1_hex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> sha1_hex<span class=\"br0\">(</span><span class=\"st_h\">'Rosetta Code'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 44, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> postfix<span class=\"sy0\">:&lt;</span>mod2\u00b3\u00b2<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"re0\">$^x</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">32</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> infix<span class=\"sy0\">:&lt;</span>\u2295<span class=\"sy0\">&gt;</span>        <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$^x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$^y</span><span class=\"br0\">)</span>mod2\u00b3\u00b2 <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> S                <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$^x</span> <span class=\"sy0\">+&lt;</span> <span class=\"re0\">$^n</span><span class=\"br0\">)</span>mod2\u00b3\u00b2 <span class=\"sy0\">+|</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"sy0\">-</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> \\f <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> \\B<span class=\"sy0\">,</span>\\C<span class=\"sy0\">,</span>\\D <span class=\"br0\">{</span> <span class=\"br0\">(</span>B <span class=\"sy0\">+&amp;</span> C<span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">+^</span>B<span class=\"br0\">)</span>mod2\u00b3\u00b2 <span class=\"sy0\">+&amp;</span> D<span class=\"br0\">)</span>   <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"sy0\">-&gt;</span> \\B<span class=\"sy0\">,</span>\\C<span class=\"sy0\">,</span>\\D <span class=\"br0\">{</span> B <span class=\"sy0\">+^</span> C <span class=\"sy0\">+^</span> D                      <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"sy0\">-&gt;</span> \\B<span class=\"sy0\">,</span>\\C<span class=\"sy0\">,</span>\\D <span class=\"br0\">{</span> <span class=\"br0\">(</span>B <span class=\"sy0\">+&amp;</span> C<span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span>B <span class=\"sy0\">+&amp;</span> D<span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span>C <span class=\"sy0\">+&amp;</span> D<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"sy0\">-&gt;</span> \\B<span class=\"sy0\">,</span>\\C<span class=\"sy0\">,</span>\\D <span class=\"br0\">{</span> B <span class=\"sy0\">+^</span> C <span class=\"sy0\">+^</span> D                      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> \\K <span class=\"sy0\">=</span> 0x5A827999<span class=\"sy0\">,</span> 0x6ED9EBA1<span class=\"sy0\">,</span> 0x8F1BBCDC<span class=\"sy0\">,</span> 0xCA62C1D6<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> sha1<span class=\"sy0\">-</span>pad<span class=\"br0\">(</span>Blob <span class=\"re0\">$msg</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span>   <br/>    <span class=\"kw1\">my</span> \\bits <span class=\"sy0\">=</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"re0\">$msg</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@padded</span> <span class=\"sy0\">=</span> flat <span class=\"re0\">$msg</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">,</span> 0x80<span class=\"sy0\">,</span> 0x00 <span class=\"kw1\">xx</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"re0\">$msg</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    flat <span class=\"re0\">@padded</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">:</span><span class=\"nu0\">256</span><span class=\"br0\">[</span><span class=\"re0\">$^a</span><span class=\"sy0\">,</span><span class=\"re0\">$^b</span><span class=\"sy0\">,</span><span class=\"re0\">$^c</span><span class=\"sy0\">,</span><span class=\"re0\">$^d</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>bits <span class=\"sy0\">+&gt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span>mod2\u00b3\u00b2<span class=\"sy0\">,</span> <span class=\"br0\">(</span>bits<span class=\"br0\">)</span>mod2\u00b3\u00b2<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> sha1<span class=\"sy0\">-</span>block<span class=\"br0\">(</span><span class=\"re0\">@H</span><span class=\"sy0\">,</span> <span class=\"re0\">@M</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>   <br/>    <span class=\"re0\">@M</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> S<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">+^</span><span class=\"br0\">]</span> <span class=\"re0\">@M</span><span class=\"br0\">[</span><span class=\"re0\">$_</span> \u00ab<span class=\"sy0\">-</span>\u00ab\u00a0<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span> <span class=\"nu0\">8</span> <span class=\"nu0\">14</span> <span class=\"nu0\">16</span><span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">16</span> <span class=\"sy0\">..</span> <span class=\"nu0\">79</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">,</span><span class=\"re0\">$B</span><span class=\"sy0\">,</span><span class=\"re0\">$C</span><span class=\"sy0\">,</span><span class=\"re0\">$D</span><span class=\"sy0\">,</span><span class=\"re0\">$E</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@H</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">79</span> <span class=\"sy0\">-&gt;</span> \\t <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">,</span> <span class=\"re0\">$B</span><span class=\"sy0\">,</span> <span class=\"re0\">$C</span><span class=\"sy0\">,</span> <span class=\"re0\">$D</span><span class=\"sy0\">,</span> <span class=\"re0\">$E</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        S<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"re0\">$A</span><span class=\"br0\">)</span> \u2295 f<span class=\"br0\">[</span>t <span class=\"kw1\">div</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$B</span><span class=\"sy0\">,</span><span class=\"re0\">$C</span><span class=\"sy0\">,</span><span class=\"re0\">$D</span><span class=\"br0\">)</span> \u2295 <span class=\"re0\">$E</span> \u2295 <span class=\"re0\">@M</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span> \u2295 K<span class=\"br0\">[</span>t <span class=\"kw1\">div</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"re0\">$A</span><span class=\"sy0\">,</span> S<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span><span class=\"re0\">$B</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$C</span><span class=\"sy0\">,</span> <span class=\"re0\">$D</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">@H</span>\u00a0\u00bb\u2295<span class=\"sy0\">=</span>\u00ab\u00a0<span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">,</span><span class=\"re0\">$B</span><span class=\"sy0\">,</span><span class=\"re0\">$C</span><span class=\"sy0\">,</span><span class=\"re0\">$D</span><span class=\"sy0\">,</span><span class=\"re0\">$E</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> sha1<span class=\"br0\">(</span>Blob <span class=\"re0\">$msg</span><span class=\"br0\">)</span> <span class=\"kw1\">returns</span> Blob<br/><span class=\"br0\">{</span>   <br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@M</span> <span class=\"sy0\">=</span> sha1<span class=\"sy0\">-</span>pad<span class=\"br0\">(</span><span class=\"re0\">$msg</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@H</span> <span class=\"sy0\">=</span> 0x67452301<span class=\"sy0\">,</span> 0xEFCDAB89<span class=\"sy0\">,</span> 0x98BADCFE<span class=\"sy0\">,</span> 0x10325476<span class=\"sy0\">,</span> 0xC3D2E1F0<span class=\"sy0\">;</span><br/>    sha1<span class=\"sy0\">-</span>block<span class=\"br0\">(</span><span class=\"re0\">@H</span><span class=\"sy0\">,</span><span class=\"re0\">@M</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">..</span><span class=\"re0\">$_</span><span class=\"sy0\">+</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">...^</span> <span class=\"sy0\">+</span><span class=\"re0\">@M</span><span class=\"sy0\">;</span><br/>    Blob<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> flat <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"kw3\">reverse</span> <span class=\"sy0\">.</span><span class=\"me1\">polymod</span><span class=\"br0\">(</span><span class=\"nu0\">256</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@H</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> sha1<span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"kw3\">encode</span><span class=\"br0\">(</span><span class=\"st_h\">'ascii'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"  $_\"</span><br/>   <span class=\"kw1\">for</span> <span class=\"st_h\">'abc'</span><span class=\"sy0\">,</span><br/>       <span class=\"st_h\">'abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq'</span><span class=\"sy0\">,</span><br/>       <span class=\"st_h\">'Rosetta Code'</span><span class=\"sy0\">,</span><br/>       <span class=\"st_h\">'Ars longa, vita brevis'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 87, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\sha1.exw<br/>-- =====================<br/>--<br/>--  NB no longer considered secure. Non-optimised.<br/>--<br/>constant m4 = allocate(4)   -- scratch area, for uint32<br/>\u00a0<br/>function uint32(atom v)<br/>    poke4(m4,v)<br/>    return peek4u(m4)<br/>end function<br/>\u00a0<br/>function sq_uint32(sequence s)<br/>    for i=1 to length(s) do<br/>        s[i] = uint32(s[i])<br/>    end for<br/>    return s<br/>end function<br/>\u00a0<br/>function dword(string msg, integer i)<br/>-- get dword as big-endian<br/>    return msg[i]*#1000000+msg[i+1]*#10000+msg[i+2]*#100+msg[i+3]<br/>end function<br/>\u00a0<br/>function xor_all(sequence s)<br/>atom result = 0<br/>    for i=1 to length(s) do<br/>        result = xor_bits(result, s[i])<br/>    end for<br/>    result = uint32(result)<br/>    return result<br/>end function <br/>\u00a0<br/>function rol(atom word, integer bits)<br/>-- left rotate the bits of a 32-bit number by the specified number of bits<br/>    return uint32(word*power(2,bits))+floor(word/power(2,32-bits))<br/>end function<br/>\u00a0<br/>function sha1(string msg)<br/>atom a,b,c,d,e,temp,k<br/>sequence w = repeat(0,80)<br/>atom h0 = 0x67452301,<br/>     h1 = 0xefcdab89,<br/>     h2 = 0x98badcfe,<br/>     h3 = 0x10325476,<br/>     h4 = 0xc3d2e1f0<br/>\u00a0<br/>    integer bits = length(msg)*8<br/>    msg &amp;= #80<br/>    while mod(length(msg),64)!=56 do msg &amp;= '\\0' end while<br/>    msg &amp;= reverse(int_to_bytes(bits,8))<br/>\u00a0<br/>    for chunk=1 to length(msg) by 64 do<br/>        for i=1 to 16 do<br/>            w[i] = dword(msg,chunk+(i-1)*4)<br/>        end for<br/>        for i=17 to 80 do<br/>            w[i] = rol(xor_all({w[i-3],w[i-8],w[i-14],w[i-16]}),1)<br/>        end for<br/>        {a,b,c,d,e} = {h0,h1,h2,h3,h4}<br/>        for i=1 to 80 do<br/>            if i&lt;=20 then<br/>                temp = or_bits(and_bits(b,c),and_bits(not_bits(b),d))<br/>                k = #5A827999<br/>            elsif i&lt;=40 then<br/>                temp = xor_bits(xor_bits(b,c),d)<br/>                k = #6ED9EBA1<br/>            elsif i&lt;=60 then<br/>                temp = or_bits(or_bits(and_bits(b,c),and_bits(b,d)),and_bits(c,d))<br/>                k = #8F1BBCDC<br/>            else -- i&lt;=80<br/>                temp = xor_bits(xor_bits(b,c),d)<br/>                k = #CA62C1D6<br/>            end if<br/>            {a,b,c,d,e} = {uint32(rol(a,5)+temp+e+k+w[i]),a,rol(b,30),c,d}<br/>        end for<br/>        {h0,h1,h2,h3,h4} = sq_uint32(sq_add({h0,h1,h2,h3,h4},{a,b,c,d,e}))<br/>    end for<br/>    sequence res = {h0, h1, h2, h3, h4}<br/>    for i=1 to length(res) do<br/>        res[i] = sprintf(\"%08X\",res[i])<br/>    end for<br/>    return join(res)<br/>end function<br/>\u00a0<br/>?sha1(\"Rosetta Code\")</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Rosetta Code'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/sha1\"><span class=\"kw3\">sha1</span></a><span class=\"br0\">(</span> <span class=\"re0\">$string</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 116, "block": "<pre class=\"text highlighted_source\">(de leftRotate (X C)<br/>   (| (mod32 (&gt;&gt; (- C) X)) (&gt;&gt; (- 32 C) X)) )<br/>\u00a0<br/>(de mod32 (N)<br/>   (&amp; N `(hex \"FFFFFFFF\")) )<br/>\u00a0<br/>(de not32 (N)<br/>   (x| N `(hex \"FFFFFFFF\")) )<br/>\u00a0<br/>(de add32 @<br/>   (mod32 (pass +)) )<br/>\u00a0<br/>(de sha1 (Str)<br/>   (let Len (length Str)<br/>      (setq Str<br/>         (conc<br/>            (need<br/>               (- <br/>                  8 <br/>                  (* 64 (/ (+ Len 1 8 63) 64)) )<br/>               (conc <br/>                  (mapcar char (chop Str))<br/>                  (cons `(hex \"80\")) )<br/>               0 ) <br/>            (flip <br/>               (make<br/>                  (setq Len (* 8 Len))<br/>                  (do 8<br/>                     (link (&amp; Len 255))<br/>                     (setq Len (&gt;&gt; 8 Len )) ) ) ) ) ) )<br/>   (let<br/>      (H0 `(hex \"67452301\")<br/>         H1 `(hex \"EFCDAB89\")<br/>         H2 `(hex \"98BADCFE\")<br/>         H3 `(hex \"10325476\")<br/>         H4 `(hex \"C3D2E1F0\") )<br/>      (while Str<br/>         (let<br/>            (A H0  B H1  C H2  D H3  E H4<br/>               W (conc<br/>                    (make<br/>                       (do 16<br/>                          (link<br/>                             (apply <br/>                                |<br/>                                (mapcar &gt;&gt; (-24 -16 -8 0) (cut 4 'Str)) ) ) ) )<br/>                  (need 64 0) ) )<br/>               (for (I 17 (&gt;= 80 I) (inc I))<br/>                  (set (nth W I)<br/>                     (leftRotate<br/>                        (x|<br/>                           (get W (- I 3))<br/>                           (get W (- I 8))<br/>                           (get W (- I 14))<br/>                           (get W (- I 16)) )<br/>                        1 ) ) )<br/>               (use (Tmp F K)<br/>                  (for I 80<br/>                     (cond<br/>                        ((&gt;= 20 I)<br/>                           (setq<br/>                              F (| (&amp; B C) (&amp; (not32 B) D))<br/>                              K `(hex \"5A827999\") ) )<br/>                        ((&gt;= 40 I)<br/>                           (setq<br/>                              F (x| B C D)<br/>                              K `(hex \"6ED9EBA1\") ) )<br/>                        ((&gt;= 60 I)<br/>                           (setq<br/>                              F (| (&amp; B C) (&amp; B D) (&amp; C D))<br/>                              K `(hex \"8F1BBCDC\") ) )<br/>                        (T<br/>                           (setq<br/>                              F (x| B C D)<br/>                              K `(hex \"CA62C1D6\") ) ) )<br/>                     (setq<br/>                        Tmp (add32 (leftRotate A 5) F E K (get W I) )<br/>                        E D<br/>                        D C<br/>                        C (leftRotate B 30)<br/>                        B A<br/>                        A Tmp ) ) )<br/>               (setq<br/>                  H0 (add32 H0 A)<br/>                  H1 (add32 H1 B)<br/>                  H2 (add32 H2 C)<br/>                  H3 (add32 H3 D) <br/>                  H4 (add32 H4 E) ) ) )<br/>      (mapcan<br/>         '((N)<br/>            (flip<br/>               (make<br/>                  (do 4<br/>                     (link (&amp; 255 N))<br/>                     (setq N (&gt;&gt; 8 N)) ) ) ) )<br/>         (list H0 H1 H2 H3 H4) ) ) )<br/>\u00a0<br/>(let Str \"Rosetta Code\"<br/>   (println<br/>      (pack<br/>         (mapcar <br/>            '((B) (pad 2 (hex B))) <br/>            (sha1 Str) ) ) )<br/>   (println<br/>      (pack<br/>         (mapcar <br/>            '((B) (pad 2 (hex B)))<br/>            (native <br/>               \"libcrypto.so\"<br/>               \"SHA1\"<br/>               '(B . 20)<br/>               Str<br/>               (length Str)<br/>               '(NIL (20)) ) ) ) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 13, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">Function</span> Calculate<span class=\"sy0\">-</span>SHA1<span class=\"br0\">(</span> <span class=\"re0\">$String</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$Enc</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>system.Text.Encoding<span class=\"br0\">]</span>::UTF8<br/>    <span class=\"re0\">$Data</span> <span class=\"sy0\">=</span> <span class=\"re0\">$enc</span>.GetBytes<span class=\"br0\">(</span><span class=\"re0\">$String</span><span class=\"br0\">)</span> <br/>\u00a0<br/>    <span class=\"co1\"># Create a New SHA1 Crypto Provider </span><br/>    <span class=\"re0\">$Sha</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> System.Security.Cryptography.SHA1CryptoServiceProvider <br/>\u00a0<br/>    <span class=\"co1\"># Now hash and display results </span><br/>    <span class=\"re0\">$Result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sha</span>.ComputeHash<span class=\"br0\">(</span><span class=\"re0\">$Data</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>System.Convert<span class=\"br0\">]</span>::ToBase64String<span class=\"br0\">(</span><span class=\"re0\">$Result</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 7, "block": "<pre class=\"purebasic highlighted_source\">a$<span class=\"sy0\">=</span><span class=\"st0\">\"Rosetta Code\"</span><br/>\u00a0<br/>UseSHA1Fingerprint<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: b$<span class=\"sy0\">=</span>StringFingerprint<span class=\"br0\">(</span>a$, #PB_Cipher_SHA1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"[SHA1] Text: \"</span><span class=\"sy0\">+</span>a$<span class=\"sy0\">+</span><span class=\"st0\">\" ==&gt; \"</span><span class=\"sy0\">+</span>b$<span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> hashlib<br/>h <span class=\"sy0\">=</span> hashlib.<span class=\"me1\">sha1</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>h.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw3\">bytes</span><span class=\"br0\">(</span><span class=\"st0\">\"Ars longa, vita brevis\"</span><span class=\"sy0\">,</span> encoding<span class=\"sy0\">=</span><span class=\"st0\">\"ASCII\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>h.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># \"e640d285242886eb96ab80cbf858389b3df52f43\"</span></pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require file/sha1)<br/>(sha1 (open-input-string \"Rosetta Code\"))<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: SHA-1<br/>\u00a0<br/>load \"stdlib.ring\"<br/>str = \"Rosetta Code\"<br/>see \"String: \" + str + nl<br/>see \"SHA-1: \"<br/>see sha1(str) + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'digest'</span><br/><span class=\"kw3\">puts</span> <span class=\"re2\">Digest::SHA1</span>.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta Code'</span><span class=\"br0\">)</span></pre>"}, {"lang": "S-lang", "loc": 2, "block": "<pre class=\"text highlighted_source\">require(\"chksum\");<br/>print(sha1sum(\"Rosetta Code\"));</pre>"}, {"lang": "Scala", "loc": 91, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">nio</span>.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Hash<span class=\"br0\">(</span>message<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> defaultHashes <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hash <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> padded <span class=\"sy0\">=</span> generatePadding<span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> chunks<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> messageToChunks<span class=\"br0\">(</span>padded<span class=\"br0\">)</span><br/>    toHashForm<span class=\"br0\">(</span>hashesFromChunks<span class=\"br0\">(</span>chunks<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> generatePadding<span class=\"br0\">(</span>message<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> finalPadding <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span>message.<span class=\"me1\">length</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>.<span class=\"me1\">toByteArray</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">=&gt;</span> List.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">8</span> - x.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>.<span class=\"me1\">toByte</span><span class=\"br0\">)</span> ++ x<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> padding <span class=\"sy0\">=</span> <span class=\"br0\">(</span>message.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">64</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> l <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> l <span class=\"sy0\">&lt;</span> <span class=\"nu0\">56</span> <span class=\"sy0\">=&gt;</span><br/>        message <span class=\"sy0\">:::</span> 0x80.<span class=\"me1\">toByte</span> <span class=\"sy0\">::</span> List.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">56</span> - l<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>.<span class=\"me1\">toByte</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> l <span class=\"sy0\">=&gt;</span><br/>        message <span class=\"sy0\">:::</span> 0x80.<span class=\"me1\">toByte</span> <span class=\"sy0\">::</span> List.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">64</span> - l<span class=\"br0\">)</span> + <span class=\"nu0\">56</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>.<span class=\"me1\">toByte</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    padding <span class=\"sy0\">:::</span> finalPadding<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toBigEndian<span class=\"br0\">(</span>bytes<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    ByteBuffer.<span class=\"me1\">wrap</span><span class=\"br0\">(</span>bytes.<span class=\"me1\">toArray</span><span class=\"br0\">)</span>.<span class=\"me1\">getInt</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> messageToChunks<span class=\"br0\">(</span>message<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    message.<span class=\"me1\">grouped</span><span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> chunkToWords<span class=\"br0\">(</span>chunk<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    chunk.<span class=\"me1\">grouped</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>toBigEndian<span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> extendWords<span class=\"br0\">(</span>words<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> words.<span class=\"me1\">length</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">80</span> <span class=\"sy0\">=&gt;</span> extendWords<span class=\"br0\">(</span>words <span class=\"sy0\">:</span>+ Integer.<span class=\"me1\">rotateLeft</span><span class=\"br0\">(</span><br/>      <span class=\"br0\">(</span>words<span class=\"br0\">(</span>i - <span class=\"nu0\">3</span><span class=\"br0\">)</span> ^ words<span class=\"br0\">(</span>i - <span class=\"nu0\">8</span><span class=\"br0\">)</span> ^ words<span class=\"br0\">(</span>i - <span class=\"nu0\">14</span><span class=\"br0\">)</span> ^ words<span class=\"br0\">(</span>i - <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> words<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> generateFK<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;</span> c | ~b <span class=\"sy0\">&amp;</span> d, 0x5A827999<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">40</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>b ^ c ^ d, 0x6ED9EBA1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">60</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;</span> c | b <span class=\"sy0\">&amp;</span> d | c <span class=\"sy0\">&amp;</span> d, 0x8F1BBCDC<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">80</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>b ^ c ^ d, 0xCA62C1D6<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> generateHash<span class=\"br0\">(</span>words<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, prevHash<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> generateHash<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, currentHashes<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">80</span> <span class=\"sy0\">=&gt;</span> currentHashes <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> a <span class=\"sy0\">::</span> b <span class=\"sy0\">::</span> c <span class=\"sy0\">::</span> d <span class=\"sy0\">::</span> e <span class=\"sy0\">::</span> Nil <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>f, k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> generateFK<span class=\"br0\">(</span>i, b, c, d<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> Integer.<span class=\"me1\">rotateLeft</span><span class=\"br0\">(</span>a, <span class=\"nu0\">5</span><span class=\"br0\">)</span> + f + e + k + words<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> Integer.<span class=\"me1\">rotateLeft</span><span class=\"br0\">(</span>b, <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>          generateHash<span class=\"br0\">(</span>i + <span class=\"nu0\">1</span>, x <span class=\"sy0\">::</span> a <span class=\"sy0\">::</span> t <span class=\"sy0\">::</span> c <span class=\"sy0\">::</span> d <span class=\"sy0\">::</span> Nil<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> currentHashes<br/>    <span class=\"br0\">}</span><br/>    addHashes<span class=\"br0\">(</span>prevHash, generateHash<span class=\"br0\">(</span><span class=\"nu0\">0</span>, prevHash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> addHashes<span class=\"br0\">(</span>xs<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, ys<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span>.<span class=\"me1\">zipped</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hashesFromChunks<span class=\"br0\">(</span>chunks<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>                        remainingHash<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> defaultHashes<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    chunks <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> remainingHash<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> words <span class=\"sy0\">=</span> extendWords<span class=\"br0\">(</span>chunkToWords<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newHash <span class=\"sy0\">=</span> generateHash<span class=\"br0\">(</span>words, remainingHash<span class=\"br0\">)</span><br/>        hashesFromChunks<span class=\"br0\">(</span>xs, newHash<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toHashForm<span class=\"br0\">(</span>hashes<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    hashes.<span class=\"me1\">map</span><span class=\"br0\">(</span>b <span class=\"sy0\">=&gt;</span> ByteBuffer.<span class=\"me1\">allocate</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>      .<span class=\"me1\">order</span><span class=\"br0\">(</span>ByteOrder.<span class=\"me1\">BIG_ENDIAN</span><span class=\"br0\">)</span>.<span class=\"me1\">putInt</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>.<span class=\"me1\">array</span>.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/>      .<span class=\"me1\">map</span><span class=\"br0\">(</span>bytesToHex<span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> bytesToHex<span class=\"br0\">(</span>bytes<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"kw2\">byte</span> <span class=\"sy0\">&lt;</span>- bytes<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">(</span>Character.<span class=\"me1\">forDigit</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xF, <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span><br/>      Character.<span class=\"me1\">forDigit</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span> <span class=\"sy0\">&amp;</span> 0xF<span class=\"br0\">)</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> Nil<span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Hash <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hash<span class=\"br0\">(</span>message<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Hash<span class=\"br0\">(</span>message.<span class=\"me1\">getBytes</span>.<span class=\"me1\">toList</span><span class=\"br0\">)</span>.<span class=\"me1\">hash</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>hash<span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 162, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">; band - binary AND operation</span><br/><span class=\"co1\">; bor - binary OR operation</span><br/><span class=\"co1\">; bxor - binary XOR operation</span><br/><span class=\"co1\">; &gt;&gt;, &lt;&lt; - binary shift operations</span><br/><span class=\"co1\">; runes-&gt;string - convert byte list to string /(runes-&gt;string '(65 66 67 65)) =&gt; \"ABCA\"/</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sha1<span class=\"sy0\">-</span>padding<span class=\"sy0\">-</span>size n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">56</span> <span class=\"br0\">(</span>rem n <span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">64</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sha1<span class=\"sy0\">-</span>pad<span class=\"sy0\">-</span>message message<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>message<span class=\"sy0\">-</span>len <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> message<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>message<span class=\"sy0\">-</span>len<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>bits <span class=\"br0\">(</span><span class=\"sy0\">*</span> message<span class=\"sy0\">-</span>len <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>buffer<span class=\"sy0\">-</span>len <span class=\"br0\">(</span><span class=\"sy0\">+</span> message<span class=\"sy0\">-</span>len <span class=\"nu0\">8</span> <span class=\"br0\">(</span>sha1<span class=\"sy0\">-</span>padding<span class=\"sy0\">-</span>size message<span class=\"sy0\">-</span>len<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>message <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> message <span class=\"br0\">(</span>runes<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> '<span class=\"br0\">(</span>#b10000000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>zeroes<span class=\"sy0\">-</span>len <span class=\"br0\">(</span><span class=\"sy0\">-</span> buffer<span class=\"sy0\">-</span>len message<span class=\"sy0\">-</span>len <span class=\"nu0\">1</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; for ending length encoded value</span><br/>         <span class=\"br0\">(</span>message <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> message <span class=\"br0\">(</span><span class=\"kw1\">make-string</span> zeroes<span class=\"sy0\">-</span>len <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>message <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> message <span class=\"br0\">(</span>runes<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span><br/>            <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> message<span class=\"sy0\">-</span>len<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>bits <span class=\"nu0\">24</span><span class=\"br0\">)</span> #xFF<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> message<span class=\"sy0\">-</span>len<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>bits <span class=\"nu0\">16</span><span class=\"br0\">)</span> #xFF<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> message<span class=\"sy0\">-</span>len<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>bits  <span class=\"nu0\">8</span><span class=\"br0\">)</span> #xFF<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> message<span class=\"sy0\">-</span>len<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>bits  <span class=\"nu0\">0</span><span class=\"br0\">)</span> #xFF<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;      (print \"message-len: \" message-len)</span><br/><span class=\"co1\">;      (print \"message-len-in-bits: \" message-len-in-bits)</span><br/><span class=\"co1\">;      (print \"buffer-len: \" buffer-len)</span><br/><span class=\"co1\">;      (print \"zeroes-len: \" zeroes-len)</span><br/><span class=\"co1\">;      (print \"message: \" message)</span><br/><span class=\"co1\">;      (print \"length(message): \" (string-length message))</span><br/>      message<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> XOR <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> args <span class=\"br0\">(</span>fold bxor <span class=\"nu0\">0</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; bxor more than 2 arguments</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> args <span class=\"br0\">(</span>fold bor <span class=\"nu0\">0</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; bor more than 2 arguments</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">NOT</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"br0\">(</span>bxor arg #xFFFFFFFF<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; binary not operation</span><br/>\u00a0<br/><span class=\"co1\">; to 32-bit number</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span> i<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>band i #xFFFFFFFF<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; binary cycle rotate left</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>rol bits x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span><br/>      <span class=\"br0\">(</span>bor<br/>         <span class=\"br0\">(</span><span class=\"sy0\">&lt;&lt;</span> x bits<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> x <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">32</span> bits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>word<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">list</span><br/>      <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> x <span class=\"nu0\">24</span><span class=\"br0\">)</span> #xFF<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> x <span class=\"nu0\">16</span><span class=\"br0\">)</span> #xFF<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> x  <span class=\"nu0\">8</span><span class=\"br0\">)</span> #xFF<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;</span> x  <span class=\"nu0\">0</span><span class=\"br0\">)</span> #xFF<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>message<span class=\"sy0\">-&gt;</span>words message<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> cycle <span class=\"br0\">(</span><span class=\"br0\">(</span>W<br/>               <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">t</span> <span class=\"br0\">(</span>iota <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span><br/>                     null<br/>                  <span class=\"br0\">(</span><span class=\"kw1\">let*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">OR</span><br/>                              <span class=\"br0\">(</span><span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> message <span class=\"br0\">(</span><span class=\"sy0\">+</span> p <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span><span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> message <span class=\"br0\">(</span><span class=\"sy0\">+</span> p <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span><span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> message <span class=\"br0\">(</span><span class=\"sy0\">+</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span><span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> message <span class=\"br0\">(</span><span class=\"sy0\">+</span> p <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">t</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"kw1\">t</span> <span class=\"nu0\">80</span><span class=\"br0\">)</span><br/>         W<br/>         <span class=\"br0\">(</span>cycle <span class=\"br0\">(</span><span class=\"kw1\">append</span> W <span class=\"br0\">(</span><span class=\"kw1\">list</span><br/>            <span class=\"br0\">(</span>XOR<br/>               <span class=\"br0\">(</span>rol <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> W <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"kw1\">t</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>rol <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> W <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"kw1\">t</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>rol <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> W <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"kw1\">t</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>rol <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> W <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"kw1\">t</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">t</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sha1:digest message<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>h0 #x67452301<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>h1 #xEFCDAB89<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>h2 #x98BADCFE<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>h3 #x10325476<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>h4 #xC3D2E1F0<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>K '<span class=\"br0\">(</span>#x5A827999 #x6ED9EBA1 #x8F1BBCDC #xCA62C1D6<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>padded<span class=\"sy0\">-</span>message <span class=\"br0\">(</span>sha1<span class=\"sy0\">-</span>pad<span class=\"sy0\">-</span>message message<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>n <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> padded<span class=\"sy0\">-</span>message<span class=\"br0\">)</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> main <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>A h0<span class=\"br0\">)</span> <span class=\"br0\">(</span>B h1<span class=\"br0\">)</span> <span class=\"br0\">(</span>C h2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">D</span> h3<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">E</span> h4<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i n<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>fold <span class=\"kw1\">append</span> null<br/>               <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>word<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> A<span class=\"br0\">)</span> <span class=\"br0\">(</span>word<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> B<span class=\"br0\">)</span> <span class=\"br0\">(</span>word<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> C<span class=\"br0\">)</span> <span class=\"br0\">(</span>word<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">D</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>word<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">E</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">let*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>message <span class=\"br0\">(</span><span class=\"kw1\">substring</span> padded<span class=\"sy0\">-</span>message <span class=\"br0\">(</span><span class=\"sy0\">*</span> i <span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> i <span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>W <span class=\"br0\">(</span>message<span class=\"sy0\">-&gt;</span>words message<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">let*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span> <span class=\"co1\">; round 1</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>a A<span class=\"br0\">)</span> <span class=\"br0\">(</span>b B<span class=\"br0\">)</span> <span class=\"br0\">(</span>c C<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"kw1\">D</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">e</span> <span class=\"kw1\">E</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">t</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"kw1\">t</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span><br/>                                          <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>rol <span class=\"nu0\">5</span> a<span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">OR</span> <span class=\"br0\">(</span>band b c<span class=\"br0\">)</span> <span class=\"br0\">(</span>band <span class=\"br0\">(</span><span class=\"kw1\">NOT</span> b<span class=\"br0\">)</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                             <span class=\"kw1\">e</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> W <span class=\"kw1\">t</span><span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> K <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    a<br/>                                    <span class=\"br0\">(</span>rol <span class=\"nu0\">30</span> b<span class=\"br0\">)</span><br/>                                    c<br/>                                    <span class=\"kw1\">d</span><br/>                                    <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">t</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>values a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span> <span class=\"co1\">; round 2</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>a a<span class=\"br0\">)</span> <span class=\"br0\">(</span>b b<span class=\"br0\">)</span> <span class=\"br0\">(</span>c c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">e</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">t</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"kw1\">t</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span><br/>                                          <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>rol <span class=\"nu0\">5</span> a<span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span>XOR b c <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>                                             <span class=\"kw1\">e</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> W <span class=\"kw1\">t</span><span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> K <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    a<br/>                                    <span class=\"br0\">(</span>rol <span class=\"nu0\">30</span> b<span class=\"br0\">)</span><br/>                                    c<br/>                                    <span class=\"kw1\">d</span><br/>                                    <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">t</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>values a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span> <span class=\"co1\">; round 3</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>a a<span class=\"br0\">)</span> <span class=\"br0\">(</span>b b<span class=\"br0\">)</span> <span class=\"br0\">(</span>c c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">e</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">t</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"kw1\">t</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span><br/>                                          <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>rol <span class=\"nu0\">5</span> a<span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">OR</span> <span class=\"br0\">(</span>band b c<span class=\"br0\">)</span> <span class=\"br0\">(</span>band b <span class=\"kw1\">d</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>band c <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                             <span class=\"kw1\">e</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> W <span class=\"kw1\">t</span><span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> K <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    a<br/>                                    <span class=\"br0\">(</span>rol <span class=\"nu0\">30</span> b<span class=\"br0\">)</span><br/>                                    c<br/>                                    <span class=\"kw1\">d</span><br/>                                    <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">t</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>values a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span> <span class=\"co1\">; round 4</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>a a<span class=\"br0\">)</span> <span class=\"br0\">(</span>b b<span class=\"br0\">)</span> <span class=\"br0\">(</span>c c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">e</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">t</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"kw1\">t</span> <span class=\"nu0\">80</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span><br/>                                          <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>rol <span class=\"nu0\">5</span> a<span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span>XOR b c <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>                                             <span class=\"kw1\">e</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> W <span class=\"kw1\">t</span><span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> K <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    a<br/>                                    <span class=\"br0\">(</span>rol <span class=\"nu0\">30</span> b<span class=\"br0\">)</span><br/>                                    c<br/>                                    <span class=\"kw1\">d</span><br/>                                    <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">t</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>values a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>                  <span class=\"br0\">(</span>main <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> A a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> B b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> C c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">D</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"nu0\">32</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">E</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"msgdigest.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(hex(sha1(\"Rosetta Code\")));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var sha = frequire<span class=\"br0\">(</span><span class=\"st0\">'Digest::SHA'</span><span class=\"br0\">)</span>;<br/>say sha.<span class=\"me1\">sha1_hex</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta Code'</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">PackageLoader</span> fileInPackage: <span class=\"st0\">'Digest'</span>.<br/><span class=\"br0\">(</span><span class=\"re0\">SHA1</span> hexDigestOf: <span class=\"st0\">'Rosetta Code'</span><span class=\"br0\">)</span> displayNl.</pre>"}, {"lang": "Tcl", "loc": 2, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require sha1<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>sha1::<span class=\"me1\">sha1</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "UNIX Shell", "loc": 2, "block": "<pre class=\"bash highlighted_source\">$ <span class=\"kw3\">echo</span> <span class=\"re5\">-n</span> <span class=\"st_h\">'ASCII string'</span> <span class=\"sy0\">|</span> sha1<br/>9e9aeefe5563845ec5c42c5630842048c0fc261b</pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">$ zkl // run the REPL<br/>zkl: var MsgHash=Import(\"zklMsgHash\")<br/>MsgHash<br/>zkl: MsgHash.SHA1(\"Rosetta Code\")<br/>48c98f7e5a6e736d790ab740dfc3f51a61abe2b5<br/>\u00a0<br/>zkl: var hash=MsgHash.SHA1(\"Rosetta Code\",1,False)  // hash once, return hash as bytes<br/>Data(20)<br/>zkl:  hash.bytes()<br/>L(72,201,143,126,90,110,115,109,121,10,183,64,223,195,245,26,97,171,226,181)<br/>zkl: hash.bytes().apply(\"toString\",16).concat()<br/>48c98f7e5a6e736d79ab740dfc3f51a61abe2b5<br/>\u00a0<br/>zkl: MsgHash.SHA1(\"a\"*1000,1000); // hash 1000 a's 1000 times<br/>34aa973cd4c4daa4f61eeb2bdbad27316534016f</pre>"}]}