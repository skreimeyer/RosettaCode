{"task": "Program_name", "blocks": [{"lang": "Ada", "loc": 6, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_Line</span>, Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Command_Name <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Command_Name</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Command_Name;</pre>"}, {"lang": "Aime", "loc": 2, "block": "<pre class=\"text highlighted_source\">o_text(argv(0));<br/>o_byte('\\n');</pre>"}, {"lang": "ALGOL 68", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>BEGIN<br/>   print ((program idf, newline))<br/>END<br/>\u00a0</pre>"}, {"lang": "Applesoft BASIC", "loc": 63, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>10 GOSUB 40\"GET PROGRAM NAME<br/>20 PRINT N$<br/>30 END<br/>\u00a0<br/>40 REMGET PROGRAM NAME<br/>50 GOSUB 100\"GET INPUT BUFFER<br/>60 GOSUB 200\"REMOVE RUN PREFIX<br/>70 GOSUB 300\"REMOVE , SUFFIXES<br/>80 GOSUB 400\"TRIM SPACES<br/>90 RETURN<br/>\u00a0<br/>100 REMGET INPUT BUFFER<br/>110 N$ = \"\"<br/>120 FOR I = 512 TO 767<br/>130     B =  PEEK (I) - 128<br/>140     IF B &lt; 32 THEN  RETURN<br/>150     N$ = N$ +  CHR$ (B)<br/>160 NEXT I<br/>170 RETURN<br/>\u00a0<br/>200 REMREMOVE RUN PREFIX<br/>210 P = 1<br/>220 FOR I = 1 TO 3<br/>230     FOR J = P TO LEN(N$)<br/>240         C$ =  MID$ (N$,J,1)<br/>250         P = P + 1<br/>260         IF C$ = \" \" THEN  NEXT J<br/>270         IF C$ = MID$(\"RUN\",I,1) THEN NEXT I:N$ =  MID$(N$,P,LEN(N$)-P+1):RETURN<br/>280 PRINT \"YOU NEED TO RUN THIS PROGRAM USING THE  RUN COMMAND FROM DOS.\"<br/>290 END<br/>\u00a0<br/>300 REMREMOVE , SUFFIXES<br/>310 L =  LEN (N$)<br/>320 FOR I = 1 TO L<br/>330     C$ =  MID$ (N$,I,1)<br/>340     IF C$ = \",\" THEN N$ =  LEFT$(N$,I - 1): RETURN<br/>350 NEXT I<br/>360 RETURN<br/>\u00a0<br/>400 REMTRIM SPACES<br/>410 GOSUB 600<br/>\u00a0<br/>500 REMLEFT TRIM SPACES<br/>510 L = LEN(N$) - 1<br/>520 FOR I = L TO 0 STEP -1<br/>530     IF I &lt; 0 THEN RETURN<br/>540     IF LEFT$ (N$,1) &lt;&gt; \" \" THEN RETURN<br/>550     IF I THEN N$ = RIGHT$ (N$, I)<br/>560 NEXT I<br/>570 N$ = \"<br/>580 RETURN<br/>\u00a0<br/>600 REMRIGHT TRIM SPACES<br/>610 L = LEN(N$) - 1<br/>620 FOR I = L TO 0 STEP -1<br/>630     IF I &lt; 0 THEN RETURN<br/>640     IF RIGHT$ (N$,1) &lt;&gt; \" \" THEN RETURN<br/>650     IF I THEN N$ = LEFT$ (N$, I)<br/>660 NEXT I<br/>670 N$ = \"<br/>680 RETURN<br/>\u00a0</pre>"}, {"lang": "ARM Assembly", "loc": 57, "block": "<pre class=\"arm highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"sy0\">/*</span> ARM assembly Raspberry PI  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span>  program namepgm<span class=\"sy0\">.</span>s   <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> Constantes    <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>equ STDOUT<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/><span class=\"sy0\">.</span>equ WRITE<span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><br/><span class=\"sy0\">.</span>equ EXIT<span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><br/><span class=\"sy0\">/*</span> Initialized data <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>data<br/>szMessage<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"Program\u00a0: \"</span>       @ <br/>szRetourLigne<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"\\n\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">.</span>text<br/><span class=\"sy0\">.</span>global main <br/>main<span class=\"sy0\">:</span>\t<br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> save des  <span class=\"nu0\">2</span> registres <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">sp</span><span class=\"sy0\">,</span>#<span class=\"nu0\">8</span>    <span class=\"sy0\">/*</span> <span class=\"kw35\">fp</span> &lt;<span class=\"sy0\">-</span> adresse d\u00e9but <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> iAdrszMessage         @ adresse of message<br/>    <span class=\"kw7\">bl</span> affichageMess            @ call function<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span>#<span class=\"nu0\">4</span><span class=\"br0\">]</span>                 @ recup name of program in command line<br/>    <span class=\"kw7\">bl</span> affichageMess            @ call function<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> iAdrszRetourLigne         @ adresse of message<br/>    <span class=\"kw7\">bl</span> affichageMess            @ call function<br/>\u00a0<br/> <span class=\"sy0\">/*</span> fin standard du programme <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> #<span class=\"nu0\">0</span>                  @ return code<br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>                 @restaur des  <span class=\"nu0\">2</span> registres <br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r7</span><span class=\"sy0\">,</span> #EXIT              @ request to exit program<br/>    swi <span class=\"nu0\">0</span>                       @ perform the system call<br/>iAdrszMessage<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szMessage<br/>iAdrszRetourLigne<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szRetourLigne\t<br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span>     affichage des messages   avec calcul longueur              <span class=\"sy0\">*/</span> <br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contient l adresse du message <span class=\"sy0\">*/</span><br/>affichageMess<span class=\"sy0\">:</span><br/>\t<span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> save des  <span class=\"nu0\">2</span> registres <span class=\"sy0\">*/</span> <br/>\t<span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r7</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> save des autres registres <span class=\"sy0\">*/</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>   <span class=\"sy0\">/*</span> compteur longueur <span class=\"sy0\">*/</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span>\t      <span class=\"sy0\">/*</span>calcul de la longueur <span class=\"sy0\">*/</span><br/>        <span class=\"kw3\">ldrb</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"br0\">]</span>  <span class=\"sy0\">/*</span> recup octet position debut <span class=\"sy0\">+</span> indice <span class=\"sy0\">*/</span><br/>\t<span class=\"kw5\">cmp</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>       <span class=\"sy0\">/*</span> si <span class=\"nu0\">0</span> c est fini <span class=\"sy0\">*/</span><br/>\t<span class=\"kw8\">beq</span> <span class=\"nu0\">1f</span><br/>\t<span class=\"kw1\">add</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>   <span class=\"sy0\">/*</span> sinon on ajoute <span class=\"nu0\">1</span> <span class=\"sy0\">*/</span><br/>\t<span class=\"kw7\">b</span> <span class=\"nu0\">1b</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span>\t<span class=\"sy0\">/*</span> donc ici <span class=\"kw35\">r2</span> contient la longueur du message <span class=\"sy0\">*/</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span>        <span class=\"sy0\">/*</span> adresse du message en <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#STDOUT      <span class=\"sy0\">/*</span> code pour \u00e9crire sur la sortie standard Linux <span class=\"sy0\">*/</span><br/>        <span class=\"kw1\">mov</span> <span class=\"kw35\">r7</span><span class=\"sy0\">,</span> #WRITE                  <span class=\"sy0\">/*</span> code de l appel systeme <span class=\"st0\">\"write\"</span> <span class=\"sy0\">*/</span><br/>        swi #<span class=\"nu0\">0</span>                      <span class=\"sy0\">/*</span> appel systeme <span class=\"sy0\">*/</span><br/>\t<span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r7</span><span class=\"br0\">}</span>     <span class=\"sy0\">/*</span> restaur des autres registres <span class=\"sy0\">*/</span><br/>\t<span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> restaur des  <span class=\"nu0\">2</span> registres <span class=\"sy0\">*/</span> <br/>        <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>\t        <span class=\"sy0\">/*</span> retour procedure <span class=\"sy0\">*/</span>\t<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScriptName\"><span class=\"kw2\">A_ScriptName</span></a><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 20, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: TAWK -f PROGRAM_NAME.AWK</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># GAWK can provide the invoking program name from ARGV[0] but is unable to</span><br/><span class=\"co1\"># provide the AWK script name that follows -f.  Thompson Automation's TAWK</span><br/><span class=\"co1\"># version 5.0c, last released in 1998 and no longer commercially available, can</span><br/><span class=\"co1\"># provide the AWK script name that follows -f from the PROGFN built-in</span><br/><span class=\"co1\"># variable.  It should also provide the invoking program name, E.G. TAWK, from</span><br/><span class=\"co1\"># ARGV[0] but due to a bug it holds the fully qualified -f name instead.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># This example is posted here with hopes the TAWK built-in variables PROGFN</span><br/><span class=\"co1\"># (PROGram File Name) and PROGLN (PROGram Line Number) be added to GAWK by its</span><br/><span class=\"co1\"># developers.</span><br/><span class=\"co1\">#</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s -f\u00a0%s<span class=\"es0\">\\n</span>\"</span>,<span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,PROGFN<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"line number\u00a0%d<span class=\"es0\">\\n</span>\"</span>,PROGLN<span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre class=\"qbasic highlighted_source\">appname <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckcommand%24.shtml\"><span class=\"kw3\">COMMAND$</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">      SYS \"GetCommandLine\" TO cl%<br/>      PRINT $$cl%</pre>"}, {"lang": "C", "loc": 7, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Executable:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 10, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">**</span>argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy2\">*</span>program <span class=\"sy1\">=</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Program: \"</span> <span class=\"sy1\">&lt;&lt;</span> program <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 11, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">namespace</span> ProgramName<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> Program<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>Environment<span class=\"sy0\">.</span><span class=\"me1\">CommandLine</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"clojure highlighted_source\"><span class=\"st0\">\":\"</span><span class=\"co1\">;exec lein exec $0 ${1+\"<a class=\"__cf_email__\" data-cfemail=\"0d294d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"}</span><br/><span class=\"st0\">\":\"</span><span class=\"co1\">;exit</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">ns</span> scriptname<br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">-</span>main <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>program <span class=\"br0\">(</span><span class=\"kw1\">first</span> <span class=\"sy0\">*</span>command<span class=\"sy0\">-</span>line<span class=\"sy0\">-</span>args<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println <span class=\"st0\">\"Program:\"</span> program<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>contains <span class=\"br0\">(</span><span class=\"kw1\">first</span> <span class=\"sy0\">*</span>command<span class=\"sy0\">-</span>line<span class=\"sy0\">-</span>args<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>source<span class=\"sy0\">-</span>path<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">-</span>main <span class=\"br0\">(</span><span class=\"kw1\">rest</span> <span class=\"sy0\">*</span>command<span class=\"sy0\">-</span>line<span class=\"sy0\">-</span>args<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 7, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\">#!/usr/bin/env coffee</span><br/>\u00a0<br/>main = <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  program = __filename<br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"Program: \"</span> <span class=\"sy0\">+</span> program<br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw2\">not</span> module.<span class=\"me1\">parent</span> <span class=\"kw1\">then</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;; Play nice with shebangs</span><br/><span class=\"br0\">(</span>set-dispatch-macro-character #\\# #\\<span class=\"sy0\">!</span><br/> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>stream character n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>ignore character n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>read-line stream <span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span> t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"co5\">#!/usr/bin/env rdmd</span><br/>\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Program: \"</span><span class=\"sy0\">,</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 6, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/env dart<br/>\u00a0<br/>main() {<br/>\tvar program = new Options().script;<br/>\tprint(\"Program: ${program}\");<br/>}</pre>"}, {"lang": "Delphi", "loc": 8, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> ProgramName<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Program name: '</span> <span class=\"sy3\">+</span> <span class=\"kw3\">ParamStr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Command line: '</span> <span class=\"sy3\">+</span> CmdLine<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">!print( \"Name of this file: \" get-from\u00a0!args 0 )</pre>"}, {"lang": "EchoLisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>js-<span class=\"kw1\">eval</span> <span class=\"st0\">\"window.location.href\"</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"http://www.echolalie.org/echolisp/\"</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 6, "block": "<pre class=\"text highlighted_source\">program =<br/>[<br/>    console writeLine:system'commandLine.  // the whole command line<br/>\u00a0<br/>    console writeLine('program'arguments[0]). // the program name<br/>].</pre>"}, {"lang": "Emacs Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"sy0\">:</span><span class=\"co1\">;exec emacs -batch -l $0 -f main $*</span><br/>\u00a0<br/><span class=\"co1\">;;; Shebang from John Swaby</span><br/><span class=\"co1\">;;; http://www.emacswiki.org/emacs/EmacsScripts</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>program <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"nu0\">2</span> command-line-args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>message <span class=\"st0\">\"Program:\u00a0%s\"</span> program<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 15, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">%% Compile</span><br/><span class=\"co1\">%%</span><br/><span class=\"co1\">%% erlc scriptname.erl</span><br/><span class=\"co1\">%%</span><br/><span class=\"co1\">%% Run</span><br/><span class=\"co1\">%%</span><br/><span class=\"co1\">%% erl -noshell -s scriptname</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>scriptname<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Program</span> <span class=\"sy3\">=</span>\u00a0?<span class=\"re4\">FILE</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Program: ~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Program</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <a href=\"http://erlang.org/doc/man/init.html\"><span class=\"kw5\">init</span></a>:<span class=\"re3\">stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 2, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> cmd <span class=\"sy1\">=</span> <span class=\"kw2\">command_line</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>cmd<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 20, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co2\">#light (*</span><br/>\texec fsharpi <span class=\"sy0\">--</span>exec $0 <span class=\"sy0\">--</span>quiet<br/><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> scriptname <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> args <span class=\"sy0\">=</span> System.<span class=\"me1\">Environment</span>.<span class=\"me1\">GetCommandLineArgs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> arg0 <span class=\"sy0\">=</span> args.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> arg0.<span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"st0\">\"fsi\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">let</span> arg1 <span class=\"sy0\">=</span> args.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> arg1 <span class=\"sy0\">=</span> <span class=\"st0\">\"--exec\"</span> <span class=\"kw1\">then</span><br/>            args.<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span><br/>            arg1<br/>    <span class=\"kw1\">else</span><br/>        arg0<br/>\u00a0<br/><span class=\"kw1\">let</span> main <span class=\"sy0\">=</span><br/>    printfn <span class=\"st0\">\"%s\"</span> scriptname</pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">#! /usr/bin/env factor<br/>\u00a0<br/>USING: namespaces io command-line\u00a0;<br/>IN: scriptname<br/>\u00a0<br/>: main ( -- ) script get print\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">0 arg type cr    \\ gforth or gforth-fast, for example<br/>1 arg type cr     \\ name of script</pre>"}, {"lang": "Fortran", "loc": 49, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">! program run with invalid name path/f</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Sun Jun  2 00:18:31</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make $a &amp;&amp; OMP_NUM_THREADS=2 $a &lt; unixdict.txt</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none f.f08 -o f</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Sun Jun  2 00:18:31</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">! program run with valid name path/rcname</span><br/><span class=\"co1\">! </span><br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Sun Jun  2 00:19:01</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none f.f08 -o rcname &amp;&amp; ./rcname</span><br/><span class=\"co1\">! ./rcname approved.</span><br/><span class=\"co1\">! program continues...</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Sun Jun  2 00:19:02</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">module</span> sundry<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> verify_name<span class=\"br0\">(</span>required<span class=\"br0\">)</span><br/>    <span class=\"co1\">! name verification reduces the ways an attacker can rename rm as cp.</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">required</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1024</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">length</span>, <span class=\"kw1\">status</span><br/>    <span class=\"co1\">! I believe get_command_argument is part of the 2003 FORTRAN standard intrinsics.</span><br/>    <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw1\">name</span>, length, <span class=\"kw1\">status</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">/=</span> <span class=\"kw1\">status</span><span class=\"br0\">)</span> <span class=\"kw1\">stop</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">len_trim</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> <span class=\"br0\">(</span><span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"kw1\">name</span>, required, back<span class=\"sy0\">=</span><span class=\"kw2\">.<span class=\"me1\">true</span>.</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw4\">len</span><span class=\"br0\">(</span>required<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">stop</span><br/>    write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">' approved.'</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> verify_name<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> sundry<br/>\u00a0<br/><span class=\"kw1\">program</span> <span class=\"kw1\">name</span><br/>  <span class=\"kw3\">use</span> sundry<br/>  <span class=\"kw1\">call</span> verify_name<span class=\"br0\">(</span><span class=\"st0\">'rcname'</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">'program continues...'</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> <span class=\"kw1\">name</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 5, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The program was invoked like this =&gt; \"</span>; <span class=\"kw1\">Command</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span> + <span class=\"kw1\">Command</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 10, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Command to start the program was \"</span>;;<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> Args.<span class=\"me1\">All</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sTemp;;<br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 10, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Program:\"</span><span class=\"sy1\">,</span> os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><span class=\"co3\">#!/usr/bin/env groovy</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> program <span class=\"sy0\">=</span> getClass<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">protectionDomain</span>.<span class=\"me1\">codeSource</span>.<span class=\"me1\">location</span>.<span class=\"me1\">path</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Program: \"</span> <span class=\"sy0\">+</span> program</pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System <span class=\"br0\">(</span>getProgName<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> getProgName <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"st0\">\"Program: \"</span> <span class=\"sy0\">++</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">progname</span><span class=\"br0\">)</span>    <span class=\"co1\"># obtain and write out the program name from the keyword &amp;progname</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 9, "block": "<pre class=\"io highlighted_source\"><span class=\"co2\">#!/usr/bin/env io</span><br/>\u00a0<br/>main\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span><br/>\tprogram\u00a0:= <span class=\"kw2\">System</span> args at<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"br0\">(</span><span class=\"st0\">\"Program: \"</span> .. program<span class=\"br0\">)</span> println<br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">System</span> args size <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"kw2\">System</span> args at<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> containsSeq<span class=\"br0\">(</span><span class=\"st0\">\"scriptname\"</span><span class=\"br0\">)</span>, main<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 13, "block": "<pre class=\"j highlighted_source\">#!/usr/bin/env jconsole<br/>\u00a0<br/>program =: monad\u00a0: <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">if.</span> <span class=\"sy0\">(</span>#ARGV<span class=\"sy0\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">do.</span><br/>\t\t&gt; <span class=\"nu0\">1</span> { ARGV<br/>\t<span class=\"kw1\">else.</span><br/>\t\t<span class=\"st_h\">'Interpreted'</span><br/>\t<span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>echo <span class=\"st_h\">'Program: '</span>, program <span class=\"nu0\">0</span><br/>\u00a0<br/>exit <span class=\"st_h\">''</span></pre>"}, {"lang": "Java", "loc": 6, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ScriptName <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> program <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">getProperty</span><span class=\"br0\">(</span><span class=\"st0\">\"sun.java.command\"</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Program: \"</span> <span class=\"sy0\">+</span> program<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> arguments.<span class=\"me1\">callee</span>.<span class=\"me1\">name</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>prog = basename(Base.source_path())<br/>println(\"This program file is \\\"\", prog, \"\\\".\")<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><span class=\"co1\">// 'progname.kt' packaged as 'progname.jar'</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>System.<span class=\"me1\">getProperty</span><span class=\"br0\">(</span><span class=\"st0\">\"sun.java.command\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">// may not exist on all JVMs</span><br/>    println<span class=\"br0\">(</span>System.<span class=\"me1\">getProperty</span><span class=\"br0\">(</span><span class=\"st0\">\"java.vm.name\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 3, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>stdoutnl(\"Program: \" + $argv-&gt;first)</pre>"}, {"lang": "Liberty BASIC", "loc": 44, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>nSize <span class=\"sy0\">=</span> _MAX_PATH <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>lpFilename$ <span class=\"sy0\">=</span> <span class=\"kw2\">space$</span><span class=\"br0\">(</span>nSize<span class=\"br0\">)</span>; <span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>kernel32<span class=\"sy0\">,</span> <span class=\"st0\">\"GetModuleFileNameA\"</span><span class=\"sy0\">,</span> _<br/>        hModule     <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><span class=\"sy0\">,</span> _<br/>        lpFilename$ <span class=\"kw1\">as</span> <span class=\"kw1\">ptr</span><span class=\"sy0\">,</span> _<br/>        nSize       <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><span class=\"sy0\">,</span> _<br/>        result      <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><br/>lpFilename$ <span class=\"sy0\">=</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span>lpFilename$<span class=\"sy0\">,</span>result<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Path to LB exe\"</span><br/><span class=\"kw1\">print</span> lpFilename$<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"current program file (:last one on LRU list)\"</span><br/><span class=\"kw1\">print</span> getLastLRU$<span class=\"br0\">(</span>lbPath$<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> getLastLRU$<span class=\"br0\">(</span>lbPath$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">open</span> lbPath$<span class=\"sy0\">+</span><span class=\"st0\">\"lbasic404.ini\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span><span class=\"kw2\">eof</span><span class=\"br0\">(</span><span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">line</span> <span class=\"kw1\">input</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> a$<br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>a$<span class=\"sy0\">,</span> <span class=\"st0\">\"recent files\"</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span>readRecentFiles<span class=\"br0\">]</span><br/>        <span class=\"kw1\">wend</span><br/>        getLastLRU$ <span class=\"sy0\">=</span> <span class=\"st0\">\"* Failed: Recent files section not found *\"</span><br/>        <span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"br0\">[</span>readRecentFiles<span class=\"br0\">]</span><br/>        nRecent <span class=\"sy0\">=</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span>a$<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">'print \"nRecentFiles\", nRecent</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nRecent<br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">eof</span><span class=\"br0\">(</span><span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                getLastLRU$ <span class=\"sy0\">=</span> <span class=\"st0\">\"* Failed: File ended while in recent files section *\"</span><br/>                <span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>                <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>            <span class=\"kw1\">line</span> <span class=\"kw1\">input</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> a$<br/>            <span class=\"co1\">'print i, a$</span><br/>        <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>    getLastLRU$ <span class=\"sy0\">=</span> a$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 4, "block": "<pre class=\"text highlighted_source\">put _player.applicationName<br/>-- \"lsw.exe\"<br/>put _movie.name<br/>-- \"lsw_win_d11.dir\"</pre>"}, {"lang": "LLVM", "loc": 6, "block": "<pre class=\"text highlighted_source\">$ make<br/>llvm-as scriptname.ll<br/>llc -disable-cfi scriptname.bc<br/>gcc -o scriptname scriptname.s<br/>./scriptname<br/>Program: ./scriptname</pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\"><span class=\"sy0\">#</span>!<span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env lua<br/>\u00a0<br/><span class=\"kw1\">function</span> main<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> program <span class=\"sy0\">=</span> arg<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Program: \"</span> <span class=\"sy0\">..</span> program<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>package<span class=\"sy0\">.</span>loaded<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\"userdata\"</span> <span class=\"kw1\">then</span><br/>\tmain<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">else</span><br/>\tmodule<span class=\"br0\">(</span><span class=\"sy0\">...,</span> package<span class=\"sy0\">.</span>seeall<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Make", "loc": 5, "block": "<pre class=\"make highlighted_source\">NAME<span class=\"sy0\">=$</span><span class=\"br0\">(</span><span class=\"re2\">CURDIR</span><span class=\"br0\">)</span><span class=\"sy0\">/$</span><span class=\"br0\">(</span><span class=\"re1\">word</span> <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re1\">words</span> <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">MAKEFILE_LIST</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,$</span><span class=\"br0\">(</span><span class=\"re2\">MAKEFILE_LIST</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>all<span class=\"sy0\">:</span><br/>\t<span class=\"sy0\">@</span>echo <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">NAME</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 12, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/env MathKernel -script<br/>\u00a0<br/>ScriptName[] = Piecewise[<br/>\t{<br/>\t\t{\"Interpreted\", Position[$CommandLine, \"-script\", 1] == {}}<br/>\t},<br/>\t$CommandLine[[Position[$CommandLine, \"-script\", 1][[1,1]] + 1]]<br/>]<br/>\u00a0<br/>Program = ScriptName[];<br/>\u00a0<br/>Print[\"Program: \" &lt;&gt; Program]</pre>"}, {"lang": "Mercury", "loc": 16, "block": "<pre class=\"text highlighted_source\">:- module program_name.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>   \u00a0% The first argument is used as the program name if it is not otherwise<br/>   \u00a0% available.  (We could also have used the predicate io.progname_base/4<br/>   \u00a0% if we did not want path preceding the program name.)<br/>    io.progname(\"\", ProgName,\u00a0!IO),<br/>    io.print_line(ProgName,\u00a0!IO).<br/>\u00a0<br/>:- end_module program_name.</pre>"}, {"lang": "Mozart/Oz", "loc": 11, "block": "<pre class=\"make highlighted_source\">all<span class=\"sy0\">:</span> test<br/>\u00a0<br/>test<span class=\"sy0\">:</span> scriptname<br/>\t<span class=\"sy0\">./</span>scriptname<br/>\u00a0<br/>scriptname<span class=\"sy0\">:</span> scriptname<span class=\"sy0\">.</span>oz<br/>\tozc <span class=\"sy0\">-</span>x scriptname<span class=\"sy0\">.</span>oz<br/>\u00a0<br/>clean<span class=\"sy0\">:</span><br/>\t<span class=\"sy0\">-</span>rm scriptname<br/>\t<span class=\"sy0\">-</span>rm <span class=\"sy0\">*.</span>exe</pre>"}, {"lang": "Nemerle", "loc": 4, "block": "<pre class=\"text highlighted_source\">using System.Environment;<br/>...<br/>def program_name = GetCommandLineArgs()[0];<br/>...</pre>"}, {"lang": "NetRexx", "loc": 9, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">package</span> org.<span class=\"me0\">rosettacode</span>.<span class=\"me0\">samples</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Source: '</span> <span class=\"kw2\">source</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Program:'</span> System.<span class=\"me0\">getProperty</span><span class=\"br0\">(</span><span class=\"st0\">'sun.java.command'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "newLISP", "loc": 5, "block": "<pre class=\"lisp highlighted_source\">#<span class=\"sy0\">!</span>/usr/bin/env newlisp<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>program <span class=\"br0\">(</span>main-args <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"Program:\u00a0%s\"</span> program<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>exit<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import os<br/>echo getAppFilename() # Prints the full path of the executed file<br/>echo paramStr(0) # Prints argv[0]</pre>"}, {"lang": "Oberon-2", "loc": 9, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> ProgramName;<br/><span class=\"kw1\">IMPORT</span> <br/>  NPCT<span class=\"sy0\">:</span>Args<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">BEGIN</span><br/>  Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span><span class=\"st0\">\"Program name: \"</span> <span class=\"sy0\">+</span> Args.<span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> ProgramName.<br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 16, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t@autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>\t\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>program <span class=\"sy0\">=</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Program:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, program<span class=\"br0\">)</span>;<br/>\u00a0<br/>\t\t<span class=\"co2\">// Alternatively:</span><br/>\t\t<a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>program2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSProcessInfo_Class/\"><span class=\"kw5\">NSProcessInfo</span></a> processInfo<span class=\"br0\">]</span> processName<span class=\"br0\">]</span>;<br/>\t\tNSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"Program:\u00a0%@<span class=\"es0\">\\n</span>\"</span>, program2<span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 3, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>executable_name<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 6, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tprogram <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/program_name.html\"><span class=\"kw5\">program_name</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>\t<a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"Program:\u00a0%s\"</span><span class=\"sy5\">,</span> program<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Order", "loc": 1, "block": "<pre class=\"c highlighted_source\">__FILE__</pre>"}, {"lang": "PARI/GP", "loc": 8, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> ScriptName<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>\tprog <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>\tprog <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ParamStr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Program: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">writeln</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Pascal", "loc": 8, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> ScriptName<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>\tprog <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>\tprog <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ParamStr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Program: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">writeln</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/env perl</span><br/>\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> main <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$program</span> <span class=\"sy0\">=</span> <span class=\"co3\">$0</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Program: $program<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">unless</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/caller.html\"><span class=\"kw3\">caller</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span> main<span class=\"sy0\">;</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"re0\">$*PROGRAM</span><span class=\"sy0\">-</span>NAME<span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">puts(1,command_line()[2])</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$program</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_SERVER</span><span class=\"br0\">[</span><span class=\"st0\">\"SCRIPT_NAME\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Program: <span class=\"es4\">$program</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">: (cmd)<br/>-&gt; \"/usr/bin/picolisp\"</pre>"}, {"lang": "PowerBASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">#INCLUDE \"Win32API.inc\"<br/>'[...]<br/>DIM fullpath AS ASCIIZ * 260, appname AS STRING<br/>GetModuleFileNameA 0, fullpath, 260<br/>IF INSTR(fullpath, \"\\\") THEN<br/>    appname = MID$(fullpath, INSTR(-1, fullpath, \"\\\") + 1)<br/>ELSE<br/>    appname = fullpath<br/>END IF</pre>"}, {"lang": "PowerShell", "loc": 5, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"co1\"># write this in file &lt;program.ps1&gt;</span><br/><span class=\"re0\">$MyInvocation</span>.MyCommand.Name <br/><span class=\"co1\"># launch with &lt;.\\program&gt;</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 6, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">ProgramFilename</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    program <span class=\"sy0\">=</span> <span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Program:\u00a0%s\"</span>\u00a0% program<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 12, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/env Rscript<br/>\u00a0<br/>getProgram &lt;- function(args) {<br/>\tsub(\"--file=\", \"\", args[grep(\"--file=\", args)])<br/>}<br/>\u00a0<br/>args &lt;- commandArgs(trailingOnly = FALSE)<br/>program &lt;- getProgram(args)<br/>\u00a0<br/>cat(\"Program: \", program, \"\\n\")<br/>\u00a0<br/>q(\"no\")</pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/env racket<br/>#lang racket<br/>\u00a0<br/>(define (program) (find-system-path 'run-file))<br/>\u00a0<br/>(module+ main (printf \"Program: ~a\\n\" (program)))</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\">ARGS list \" \" join \"%s\\n\" print</pre>"}, {"lang": "REXX", "loc": 5, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* Rexx */</span><br/>\u00a0<br/><span class=\"kw1\">Parse</span> <span class=\"kw2\">source</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> pgmPath<br/><span class=\"kw1\">Say</span> pgmPath<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see \"Active Source File Name\u00a0: \" + filename() + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\">#!/usr/bin/env ruby</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Path: #{$PROGRAM_NAME}\"</span>  <span class=\"co1\"># or puts \"Path: #{$0}\"</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Name: #{File.basename $0}\"</span></pre>"}, {"lang": "Rust", "loc": 3, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    println!(\"Program: {}\", std::env::args().next().unwrap());<br/>}</pre>"}, {"lang": "SAC", "loc": 10, "block": "<pre class=\"c highlighted_source\">use StdIO<span class=\"sy0\">:</span> all<span class=\"sy0\">;</span><br/>use Array<span class=\"sy0\">:</span> all<span class=\"sy0\">;</span><br/>use String<span class=\"sy0\">:</span> <span class=\"br0\">{</span> string <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>use CommandLine<span class=\"sy0\">:</span> all<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tprogram <span class=\"sy0\">=</span> argv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Program:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> program<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ScriptName <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Program of instantiated object: ${this.getClass.getName}\"</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">// Not recommended, due various implementations</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Program via enviroment:         ${System.getProperty(\"</span>sun.<span class=\"me1\">java</span>.<span class=\"me1\">command</span><span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 25, "block": "<pre class=\"scheme highlighted_source\">#<span class=\"sy0\">!/</span>bin<span class=\"sy0\">/</span>sh<br/><span class=\"coMULTI\">#|<br/>exec csi -ss $0 ${1+\"<a class=\"__cf_email__\" data-cfemail=\"a682e6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"}<br/>exit<br/>|#</span><br/>\u00a0<br/><span class=\"br0\">(</span>use posix<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>require<span class=\"sy0\">-</span>extension srfi<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">; lists</span><br/><span class=\"br0\">(</span>require<span class=\"sy0\">-</span>extension srfi<span class=\"sy0\">-</span><span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"co1\">; strings</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>main args<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>prog <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>program<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"Program: ~a<span class=\"es0\">\\n</span>\"</span> prog<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>exit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>program<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>argv<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"csi\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"sy0\">-</span>index <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>index <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>contains x <span class=\"st0\">\"-s\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>argv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">number?</span> s<span class=\"sy0\">-</span>index<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> 'interpreted <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> <span class=\"br0\">(</span>argv<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> s<span class=\"sy0\">-</span>index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> 'unknown <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> 'compiled <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>argv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">equal?</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>program<span class=\"br0\">)</span><span class=\"br0\">)</span> 'compiled<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>main <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>argv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 10, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    writeln(\"Program path:      \" &lt;&amp; path(PROGRAM));<br/>    writeln(\"Program directory: \" &lt;&amp; dir(PROGRAM));<br/>    writeln(\"Program file:      \" &lt;&amp; file(PROGRAM));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">say __MAIN__;<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>__MAIN__\u00a0!= <span class=\"kw2\">__FILE__</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"This file has been included!\"</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 8, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"coMULTI\">\"exec\"</span> <span class=\"coMULTI\">\"gst\"</span> <span class=\"coMULTI\">\"-f\"</span> <span class=\"coMULTI\">\"$0\"</span> <span class=\"coMULTI\">\"$0\"</span> <span class=\"coMULTI\">\"<a class=\"__cf_email__\" data-cfemail=\"163256\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><br/><span class=\"coMULTI\">\"exit\"</span><br/>\u00a0<br/>|<span class=\"re3\"> program </span>|<br/>\u00a0<br/><span class=\"re6\">program</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Smalltalk</span> getArgv: <span class=\"re5\">1</span>.<br/>\u00a0<br/><span class=\"re0\">Transcript</span> show: <span class=\"st0\">'Program: '</span>, <span class=\"re5\">program</span>; cr.</pre>"}, {"lang": "Standard ML", "loc": 7, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/env sml<br/>\u00a0<br/>let<br/>\tval program = CommandLine.name ()<br/>in<br/>\tprint (\"Program: \" ^ program ^ \"\\n\")<br/>end;</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\">#!/usr/bin/env tclsh</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> main <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> program <span class=\"sy0\">$</span>::<span class=\"me1\">argv0</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Program: $program\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">$</span>::<span class=\"me1\">argv0</span> eq <span class=\"br0\">[</span><span class=\"kw2\">info</span> script<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    main <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"sy0\">$</span>::<span class=\"me1\">argv</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"text highlighted_source\">#!/usr/local/bin/txr -B<br/>@(bind my-name @self-path)</pre>"}, {"lang": "UNIX Shell", "loc": 3, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/sh</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Program: $0\"</span></pre>"}, {"lang": "Vala", "loc": 7, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">void</span> main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">string</span> command_name <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tstdout.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>, command_name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 1, "block": "<pre class=\"vb highlighted_source\">Debug.<span class=\"kw4\">Print</span> Application.Name</pre>"}, {"lang": "vbscript", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Wscript.Echo \"FullName:\",Wscript.FullName<br/>Wscript.Echo \"Name:\",Wscript.Name<br/>Wscript.Echo \"Path:\",Wscript.Path<br/>Wscript.Echo \"ScriptFullName:\",Wscript.ScriptFullName<br/>Wscript.Echo \"ScriptName:\",Wscript.ScriptName<br/>\u00a0</pre>"}, {"lang": "Visual Basic", "loc": 1, "block": "<pre class=\"vb highlighted_source\">appname = App.EXEName 'appname = <span class=\"st0\">\"MyVBapp\"</span></pre>"}, {"lang": "x86 Assembly", "loc": 19, "block": "<pre class=\"make highlighted_source\">FORMAT<span class=\"sy0\">=-</span>f elf<br/>RUN<span class=\"sy0\">=./</span><br/>BIN<span class=\"sy0\">=</span>scriptname<br/>OBJ<span class=\"sy0\">=</span>scriptname<span class=\"sy0\">.</span>o<br/>\u00a0<br/>all<span class=\"sy0\">:</span> test<br/>\u00a0<br/>test<span class=\"sy0\">:</span> <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">BIN</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">RUN</span><span class=\"br0\">)</span><span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">BIN</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">BIN</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">OBJ</span><span class=\"br0\">)</span><br/>\tld <span class=\"sy0\">-</span>o <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">BIN</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">OBJ</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">OBJ</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> scriptname<span class=\"sy0\">.</span>asm<br/>\tnasm <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">FORMAT</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span>o <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">OBJ</span><span class=\"br0\">)</span> scriptname<span class=\"sy0\">.</span>asm<br/>\u00a0<br/>clean<span class=\"sy0\">:</span><br/>\t<span class=\"sy0\">-</span>rm <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">BIN</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">-</span>rm <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">OBJ</span><span class=\"br0\">)</span></pre>"}, {"lang": "Yabasic", "loc": 5, "block": "<pre class=\"text highlighted_source\">print peek$(\"program_name\")<br/>\u00a0<br/>s$ = system$(\"cd\")<br/>n = len(s$)<br/>print left$(s$, n - 2), \"\\\\\", peek$(\"program_name\")</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">#!/Homer/craigd/Bin/zkl<br/>println(System.argv);</pre>"}]}