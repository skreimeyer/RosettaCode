{"task": "Trabb_Pardo%E2%80%93Knuth_algorithm", "blocks": [{"lang": "Ada", "loc": 36, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Trabb_Pardo_Knuth <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Real <span class=\"kw1\">is</span> <span class=\"kw3\">digits</span> <span class=\"nu0\">6</span> <span class=\"kw3\">range</span> -<span class=\"nu0\">400.0</span> .. <span class=\"nu0\">400.0</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> TIO <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>   <span class=\"kw3\">package</span> FIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> TIO.<span class=\"me1\">Float_IO</span><span class=\"br0\">(</span>Real<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">package</span> Math <span class=\"kw1\">is</span> <span class=\"kw3\">new</span>  Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span><span class=\"br0\">(</span>Real<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> F<span class=\"br0\">(</span>X: Real<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Real <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">5.0</span> * X**<span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> F;<br/>\u00a0<br/>   Values: <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Real;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   TIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Please enter 11 Numbers:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Values'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      FIO.<span class=\"me1\">Get</span><span class=\"br0\">(</span>Values<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> Values'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      TIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"f(\"</span><span class=\"br0\">)</span>;<br/>      FIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Values<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Fore =&gt; <span class=\"nu0\">2</span>, Aft =&gt; <span class=\"nu0\">3</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      TIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\")=\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         FIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span>Values<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>, Fore=&gt; <span class=\"nu0\">4</span>, Aft =&gt; <span class=\"nu0\">3</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">exception</span><br/>         <span class=\"kw3\">when</span> Constraint_Error =&gt; TIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"--&gt;too large&lt;--\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span>;<br/>      TIO.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Trabb_Pardo_Knuth;</pre>"}, {"lang": "Agena", "loc": 13, "block": "<pre class=\"text highlighted_source\">scope   # TPK algorithm in Agena<br/>  local y;<br/>  local a\u00a0:= [];<br/>  local f\u00a0:= proc( t\u00a0:: number ) is return sqrt(abs(t))+5*t*t*t end;<br/>  for i from 0 to 10 do a[i]\u00a0:= tonumber( io.read() ) od;<br/>  for i from 10 to 0 by - 1 do<br/>      y:=f(a[i]);<br/>      if y &gt; 400<br/>      then print( \"TOO LARGE\" )<br/>      else printf( \"%10.4f\\n\", y )<br/>      fi<br/>  od<br/>epocs</pre>"}, {"lang": "ALGOL 60", "loc": 13, "block": "<pre class=\"text highlighted_source\">begin <br/>  integer i; real y; real array a[0:10];<br/>  real procedure f(t); value t; real t;<br/>    f:=sqrt(abs(t))+5*t^3;<br/>  for i:=0 step 1 until 10 do inreal(0, a[i]);<br/>  for i:=10 step -1 until 0 do<br/>    begin<br/>       y:=f(a[i]);<br/>       if y &gt; 400 then outstring(1, \"TOO LARGE\")<br/>                  else outreal(1,y);<br/>       outchar(1, \"\\n\", 1)<br/>    end<br/>end</pre>"}, {"lang": "ALGOL 68", "loc": 10, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"br0\">[</span> 0 <span class=\"sy1\">:</span> 10 <span class=\"br0\">]</span><span class=\"kw3\">REAL</span> a<span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> f <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> t <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/>    <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span> t<span class=\"br0\">)</span><span class=\"sy1\">+</span>5<span class=\"sy1\">*</span>t<span class=\"sy1\">*</span>t<span class=\"sy1\">*</span>t<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span> read<span class=\"br0\">(</span> <span class=\"br0\">(</span> a<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">DO</span><br/>       <span class=\"kw3\">REAL</span> y<span class=\"sy1\">=</span>f<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>       <span class=\"kw2\">IF</span> y <span class=\"sy1\">&gt;</span> 400 <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"TOO LARGE\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                  <span class=\"kw2\">ELSE</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> y<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>9<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>       <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "ALGOL W", "loc": 13, "block": "<pre class=\"text highlighted_source\">begin <br/>  real y; real array a( 0\u00a0:: 10 );<br/>  real procedure f( real value t ); <br/>    sqrt(abs(t))+5*t*t*t;<br/>  for i:=0 until 10 do read( a(i) );<br/>  r_format\u00a0:= \"A\"; r_w\u00a0:= 9; r_d\u00a0:= 4;<br/>  for i:=10 step -1 until 0 do<br/>    begin<br/>       y:=f(a(i));<br/>       if y &gt; 400 then write( \"TOO LARGE\" )<br/>                  else write( y );<br/>    end<br/>end.</pre>"}, {"lang": "AutoIt", "loc": 24, "block": "<pre class=\"autoit highlighted_source\"><span class=\"co0\">; Trabb Pardo\u2013Knuth algorithm</span><br/><span class=\"co0\">; by James1337 (autoit.de)</span><br/><span class=\"co0\">; AutoIt Version: 3.3.8.1</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$S</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Do</span></a><br/>\t<span class=\"re0\">$S</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Trabb Pardo\u2013Knuth algorithm\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Please enter 11 numbers:\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1 2 3 4 5 6 7 8 9 10 11\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Exit</span></a><br/>\t<span class=\"re0\">$S</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"br0\">(</span><span class=\"re0\">$S</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Until</span></a> <span class=\"br0\">(</span><span class=\"re0\">$S</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">11</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Step</span></a> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"re0\">$y</span> <span class=\"sy0\">=</span> f<span class=\"br0\">(</span><span class=\"re0\">$S</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"f(\"</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$S</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\") = Overflow!\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"f(\"</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$S</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\") = \"</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> f<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Sqrt.htm\"><span class=\"kw3\">Sqrt</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Abs.htm\"><span class=\"kw3\">Abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"sy0\">^</span><span class=\"nu0\">3</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a></pre>"}, {"lang": "AWK", "loc": 19, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f TRABB_PARDO-KNUTH_ALGORITHM.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"enter 11 numbers: \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">getline</span> S<br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span>S,arr,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">!=</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d numbers entered; S/B 11<span class=\"es0\">\\n</span>\"</span>,n<span class=\"br0\">)</span><br/>      exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=n; i<span class=\"sy2\">&gt;</span><span class=\"nu0\">0</span>; i<span class=\"sy3\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      x = f<span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"f(%s) =\u00a0%s<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,<span class=\"br0\">(</span>x<span class=\"sy2\">&gt;</span><span class=\"nu0\">400</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"too large\"</span> <span class=\"sy5\">:</span> x<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> x <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> <span class=\"sy3\">-</span>x <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">5</span> <span class=\"sy3\">*</span> x <span class=\"sy3\">^</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC256", "loc": 20, "block": "<pre class=\"text highlighted_source\">dim s(11)<br/>print 'enter 11 numbers'<br/>for i = 0 to 10<br/>   input i + \"&gt;\" , s[i]<br/>next i<br/>\u00a0<br/>for i = 10 to 0 step -1<br/>   print \"f(\" + s[i] + \")=\";<br/>   x = f(s[i])<br/>   if x &gt; 400 then<br/>      print \"--- too large ---\"<br/>   else<br/>      print x<br/>   endif<br/>next i<br/>end<br/>\u00a0<br/>function f(n)<br/>   return sqrt(abs(n))+5*n^3<br/>end function</pre>"}, {"lang": "C", "loc": 39, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> inputs<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> check <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><span class=\"sy0\">,</span> result<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Please enter 11 numbers\u00a0:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>inputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Evaluating f(x) = |x|^0.5 + 5x^3 for the given inputs\u00a0:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      result <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fabs.html\"><span class=\"kw3\">fabs</span></a> <span class=\"br0\">(</span>inputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a> <span class=\"br0\">(</span>inputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>f(%lf) = \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy0\">&gt;</span> check<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"Overflow!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span><br/>          <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span><span class=\"sy0\">,</span> result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 25, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> input<span class=\"br0\">(</span> <span class=\"nu0\">11</span> <span class=\"br0\">)</span> , results<span class=\"br0\">(</span> <span class=\"nu0\">11</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Please enter 11 numbers!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> input.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span> input.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , input.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , results.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t <span class=\"br0\">[</span> <span class=\"br0\">]</span><span class=\"br0\">(</span> <span class=\"kw4\">double</span> n <span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> <span class=\"kw4\">double</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">5</span> <span class=\"sy2\">*</span> <span class=\"kw3\">pow</span><span class=\"br0\">(</span> n , <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">10</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">--</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"f( \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> input<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" )\u00a0: \"</span> <span class=\"sy4\">;</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> results<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">400</span> <span class=\"br0\">)</span> <br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"too large!\"</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span> <br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> results<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!\"</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> read-numbers <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"Enter 11 numbers (space-separated): \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>numbers '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">11</span> numbers<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>push <span class=\"br0\">(</span>read<span class=\"br0\">)</span> numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> trabb-pardo-knuth <span class=\"br0\">(</span>func overflowp<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>S <span class=\"br0\">(</span>read-numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format T <span class=\"st0\">\"~{~a~%~}\"</span><br/>            <span class=\"br0\">(</span>substitute-<span class=\"kw1\">if</span> <span class=\"st0\">\"Overflow!\"</span> overflowp <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> func S<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>trabb-pardo-knuth <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> x<span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"nu0\">5</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> x <span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> f<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> x.<span class=\"me1\">abs</span>.<span class=\"me1\">sqrt</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">^^</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"Please enter eleven numbers on a line: \"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>        data <span class=\"sy0\">=</span> readln.<span class=\"me1\">split</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>to<span class=\"sy0\">!</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Those aren't eleven numbers.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> y <span class=\"sy0\">=</span> x.<span class=\"me1\">f</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"f(%0.3f) =\u00a0%s\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Too large\"</span> <span class=\"sy0\">:</span> y.<span class=\"me1\">text</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 20, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>trabb<span class=\"sy0\">-</span>fun n<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"sy0\">+</span>  <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">5</span> n n n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw1\">abs</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>check<span class=\"sy0\">-</span>trabb n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">number?</span> n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span>  <span class=\"br0\">(</span>trabb<span class=\"sy0\">-</span>fun n<span class=\"br0\">)</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>printf <span class=\"st0\">\"\ud83c\udf31 f(%d) =\u00a0%d\"</span> n <span class=\"br0\">(</span>trabb<span class=\"sy0\">-</span>fun n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>printf <span class=\"st0\">\"\u274c  f(%d) =\u00a0%d\"</span> n <span class=\"br0\">(</span>trabb<span class=\"sy0\">-</span>fun n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>error <span class=\"st0\">\"not a number\"</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>trabb <span class=\"br0\">(</span>numlist null<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> numlist<span class=\"br0\">)</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> numlist <span class=\"br0\">(</span><span class=\"kw1\">append</span> numlist <br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">or</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">read</span> default: <span class=\"br0\">(</span>shuffle <span class=\"br0\">(</span>iota <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t      prompt: <span class=\"br0\">(</span>format <span class=\"st0\">\"Please enter\u00a0%d more numbers\"</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">11</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> numlist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>error 'incomplete<span class=\"sy0\">-</span><span class=\"kw1\">list</span> numlist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; users cancel</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">for-each</span> check<span class=\"sy0\">-</span>trabb <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>take numlist <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 24, "block": "<pre class=\"text highlighted_source\">open monad io number string<br/>\u00a0<br/>:::IO<br/>\u00a0<br/>take_numbers 0 xs = do<br/>  return $ iter xs<br/>  where f x = sqrt (toSingle x) + 5.0 * (x ** 3.0)<br/>        p x = x &lt; 400.0<br/>        iter [] = return ()<br/>        iter (x::xs) <br/>          | p res = do<br/>              putStrLn (format \"f({0}) = {1}\" x res)<br/>              iter xs<br/>          | else = do<br/>              putStrLn (format \"f({0})\u00a0:: Overflow\" x)<br/>              iter xs<br/>          where res = f x<br/>take_numbers n xs = do<br/>  x &lt;- readAny<br/>  take_numbers (n - 1) (x::xs)<br/>\u00a0<br/>do<br/>  putStrLn \"Please enter 11 numbers:\"<br/>  take_numbers 11 []</pre>"}, {"lang": "Elena", "loc": 32, "block": "<pre class=\"text highlighted_source\">import system'math<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    array&lt;real&gt; inputs\u00a0:= real&lt;&gt;(11).<br/>    console printLine(\"Please enter 11 numbers\u00a0:\").<br/>    0 till:11 do(:i)<br/>    [<br/>        inputs[i]\u00a0:= console readLine; toReal.<br/>    ].<br/>\u00a0<br/>    console printLine(\"Evaluating f(x) = |x|^0.5 + 5x^3 for the given inputs\u00a0:\").<br/>    10 to:0 do(:i)<br/>    [<br/>        var r1\u00a0:= inputs[i] absolute; sqrt.<br/>        var r2\u00a0:= inputs[i] power(3).<br/>        var r\u00a0:=inputs[i] /*absolute;*/ sqrt + 5*r2.<br/>\u00a0<br/>        real result\u00a0:= (inputs[i] absolute; sqrt) + 5 * (inputs[i] power(3)).<br/>\u00a0<br/>        console print(\"f(\", inputs[i], \")=\").<br/>\u00a0<br/>        if (result &gt; 400)<br/>        [<br/>            console printLine(\"Overflow!\")<br/>        ];<br/>        [<br/>            console printLine(result).<br/>        ]<br/>    ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 24, "block": "<pre class=\"text highlighted_source\">defmodule Trabb_Pardo_Knuth do<br/>  def task do<br/>    Enum.reverse( get_11_numbers )<br/>    |&gt; Enum.each( fn x -&gt; perform_operation( &amp;function(&amp;1), 400, x ) end )<br/>  end<br/>\u00a0<br/>  defp alert( n ), do: IO.puts \"Operation on #{n} overflowed\"<br/>\u00a0<br/>  defp get_11_numbers do<br/>    ns = IO.gets( \"Input 11 integers.  Space delimited, please: \" )<br/>         |&gt; String.split<br/>         |&gt; Enum.map( &amp;String.to_integer &amp;1 )<br/>    if 11 == length( ns ), do: ns, else: get_11_numbers<br/>  end<br/>\u00a0<br/>  defp function( x ), do:\u00a0:math.sqrt( abs(x) ) + 5 *\u00a0:math.pow( x, 3 )<br/>\u00a0<br/>  defp perform_operation( fun, overflow, n ), do: perform_operation_check_overflow( n, fun.(n), overflow )<br/>\u00a0<br/>  defp perform_operation_check_overflow( n, result, overflow ) when result &gt; overflow, do: alert( n )<br/>  defp perform_operation_check_overflow( n, result, _overflow ), do: IO.puts \"f(#{n}) =&gt; #{result}\"<br/>end<br/>\u00a0<br/>Trabb_Pardo_Knuth.task</pre>"}, {"lang": "Erlang", "loc": 25, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> trabb_pardo_knuth <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Sequence</span> <span class=\"sy3\">=</span> <span class=\"kw3\">get</span>_11_<span class=\"re3\">numbers</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">S</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re5\">Sequence</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re3\">perform_operation</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span>  <span class=\"kw4\">function</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">400</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">S</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">alert</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Operation on ~p overflowed~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">get</span>_11_<span class=\"re3\">numbers</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fread</span><span class=\"br0\">(</span> <span class=\"st0\">\"Input 11 integers.  Space delimited, please:  \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"~d ~d ~d ~d ~d ~d ~d  ~d ~d ~d ~d\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"nu0\">11</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Ns</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw4\">function</span><span class=\"br0\">(</span> <span class=\"re5\">X</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">5</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">perform_operation</span><span class=\"br0\">(</span> <span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <span class=\"re5\">Overflow</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">perform_operation_check_overflow</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"re3\">un</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Overflow</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">perform_operation_check_overflow</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"sy1\">,</span> <span class=\"re5\">Overflow</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Result</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">Overflow</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">alert</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">perform_operation_check_overflow</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"sy1\">,</span> <span class=\"re5\">_Overflow</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"f(~p) =&gt; ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>!Trabb Pardo-Knuth algorithm<br/>PROGRAM TPK<br/>!VAR I%,Y<br/>DIM A[10]<br/>\u00a0<br/>FUNCTION F(T)<br/>    F=SQR(ABS(T))+5*T^3<br/>END FUNCTION<br/>\u00a0<br/>BEGIN<br/>  DATA(10,-1,1,2,3,4,4.3,4.305,4.303,4.302,4.301)<br/>  FOR I%=0 TO 10 DO<br/>      READ(A[I%])<br/>  END FOR<br/>  FOR I%=10 TO 0 STEP -1 DO<br/>       Y=F(A[I%])<br/>       PRINT(\"F(\";A[I%];\")=\";)<br/>       IF Y&gt;400 THEN PRINT(\"---&gt;too large&lt;---\")<br/>                ELSE PRINT(Y)<br/>       END IF<br/>  END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 11, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">module</span> ``Trabb Pardo <span class=\"sy0\">-</span> Knuth``<br/><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">let</span> f <span class=\"br0\">(</span>x: <span class=\"kw4\">float</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">abs</span> x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">5.0</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>x <span class=\"sy0\">**</span> <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>Console.<span class=\"me1\">WriteLine</span> <span class=\"st0\">\"Enter 11 numbers:\"</span><br/><span class=\"br0\">[</span><span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">11</span> <span class=\"sy0\">-&gt;</span> Convert.<span class=\"me1\">ToDouble</span><span class=\"br0\">(</span>Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> f <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span><br/>| n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">400.0</span> <span class=\"sy0\">-&gt;</span> Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <br/>| _                 <span class=\"sy0\">-&gt;</span> Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Overflow\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 24, "block": "<pre class=\"text highlighted_source\">USING: formatting io kernel math math.functions math.parser<br/>prettyprint sequences splitting\u00a0;<br/>IN: rosetta-code.trabb-pardo-knuth<br/>\u00a0<br/>CONSTANT: threshold 400<br/>CONSTANT: prompt \"Please enter 11 numbers: \"<br/>\u00a0<br/>: fn ( x -- y ) [ abs 0.5 ^ ] [ 3 ^ 5 * ] bi +\u00a0;<br/>\u00a0<br/>: overflow? ( x --\u00a0? ) threshold &gt;\u00a0;<br/>\u00a0<br/>: get-input ( -- seq )<br/>    prompt write flush readln \" \" split dup length 11 =<br/>    [ drop get-input ] unless\u00a0;<br/>\u00a0<br/>:\u00a0?result ( ..a quot: ( ..a -- ..b ) -- ..b )<br/>    [ \"f(%u) = \" sprintf ] swap bi dup overflow?<br/>    [ drop \"overflow\" ] [ \"%.3f\" sprintf ] if append\u00a0; inline<br/>\u00a0<br/>: main ( -- )<br/>    get-input reverse<br/>    [ string&gt;number [ fn ]\u00a0?result print ] each\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Forth", "loc": 40, "block": "<pre class=\"text highlighted_source\">: f(x)  fdup fsqrt fswap 3e f** 5e f* f+\u00a0;<br/>\u00a0<br/>4e2 fconstant f-too-big<br/>\u00a0<br/>11 Constant #Elements<br/>\u00a0<br/>: float-array ( compile: n -- / run: n -- addr )<br/>    create <br/>        floats allot<br/>    does&gt;<br/>        swap floats +\u00a0;<br/>\u00a0<br/>#Elements float-array vec<br/>\u00a0<br/>: get-it  ( -- )<br/>    .\" Enter \" #Elements . .\" numbers:\" cr<br/>    #Elements 0 DO<br/>        .\" &gt; \" pad 25 accept cr<br/>        pad swap &gt;float 0= abort\" Invalid Number\"<br/>        i vec F!<br/>    LOOP\u00a0;<br/>\u00a0<br/>: reverse-it ( -- )<br/>    #Elements 2/  0 DO<br/>        i vec <a class=\"__cf_email__\" data-cfemail=\"e4a2a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  #Elements i - 1- vec <a class=\"__cf_email__\" data-cfemail=\"b4f2f4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>        i vec F!  #Elements i - 1- vec F!<br/>    LOOP\u00a0;<br/>\u00a0<br/>: do-it ( -- )<br/>    #Elements 0 DO<br/>        i vec <a class=\"__cf_email__\" data-cfemail=\"632523\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> fdup f. [char]\u00a0: emit space<br/>\tf(x) fdup f-too-big f&gt; IF<br/>            fdrop .\" too large\"<br/>        ELSE<br/>            f.<br/>        THEN cr<br/>    LOOP\u00a0;<br/>\u00a0<br/>: tpk  ( -- )<br/>    get-it reverse-it do-it\u00a0;</pre>"}, {"lang": "Fortran", "loc": 30, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> tpk<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">real</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">overflow</span> <span class=\"sy0\">=</span> <span class=\"nu0\">400.0</span><br/>  <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>, res<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Input eleven numbers:\"</span><br/>  read<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> a<br/>\u00a0<br/>  a <span class=\"sy0\">=</span> a<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">11</span><br/>    res <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a, f0.3, a)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"f(\"</span>, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\") = \"</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>res &gt; overflow<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"overflow!\"</span><br/>    <span class=\"kw1\">else</span><br/>       write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(f0.3)\"</span><span class=\"br0\">)</span> res<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span>  <br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw3\">real</span> <span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>\u00a0<br/>  f <span class=\"sy0\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"kw4\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">*</span>x<span class=\"sy0\">**</span><span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span>  <br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 37, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 22-07-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> f<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>Abs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">5</span> * n ^ <span class=\"nu0\">3</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x, s<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i<br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">11</span> <br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">Input</span> <span class=\"st0\">\" =&gt; \"</span>, s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">String</span><span class=\"br0\">(</span><span class=\"nu0\">20</span>,<span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>i -= <span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"f(\"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"st0\">\") = \"</span>;<br/>   x = f<span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">If</span> x &gt; <span class=\"nu0\">400</span> <span class=\"kw1\">Then</span> <br/>       <span class=\"kw1\">Print</span> <span class=\"st0\">\"-=&lt; overflow &gt;=-\"</span><br/>   <span class=\"kw1\">Else</span> <br/>       <span class=\"kw1\">Print</span> x<br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>   i -= <span class=\"nu0\">1</span><br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> i &lt; <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer </span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 38, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// prompt</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"Enter 11 numbers: \"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// accept sequence</span><br/>    <span class=\"kw1\">var</span> s <span class=\"sy1\">[</span><span class=\"nu0\">11</span><span class=\"sy1\">]</span><span class=\"kw4\">float64</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">11</span><span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Scan<span class=\"sy1\">(</span>&amp;s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]);</span> n &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// reverse sequence</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> item <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s<span class=\"sy1\">[:</span><span class=\"nu0\">5</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu0\">10</span><span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span><span class=\"nu0\">10</span><span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> item<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// iterate</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> item <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> result<span class=\"sy1\">,</span> overflow <span class=\"sy2\">:=</span> f<span class=\"sy1\">(</span>item<span class=\"sy1\">);</span> overflow <span class=\"sy1\">{</span><br/>            <span class=\"co1\">// send alerts to stderr</span><br/>            log<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"f(%g) overflow\"</span><span class=\"sy1\">,</span> item<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            <span class=\"co1\">// send normal results to stdout</span><br/>            fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"f(%g) =\u00a0%g<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> item<span class=\"sy1\">,</span> result<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> f<span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    result <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span>x<span class=\"sy1\">))</span> <span class=\"sy3\">+</span> <span class=\"nu0\">5</span><span class=\"sy3\">*</span>x<span class=\"sy3\">*</span>x<span class=\"sy3\">*</span>x<br/>    <span class=\"kw1\">return</span> result<span class=\"sy1\">,</span> result &gt; <span class=\"nu0\">400</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 16, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>replicateM<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>f <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>f x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">3</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Enter 11 numbers for evaluation\"</span><br/>  x <span class=\"sy0\">&lt;-</span> replicateM <span class=\"nu0\">11</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readLn\"><span class=\"kw3\">readLn</span></a><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span><br/>         <span class=\"kw1\">if</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span><br/>           <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"OVERFLOW\"</span><br/>           <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> x<span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>     f<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> x</pre>"}, {"lang": "Icon and Unicon", "loc": 11, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    S <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter 11 numbers: \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"kw1\">every</span> <span class=\"sy0\">!</span><span class=\"nu0\">11</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"kw4\">put</span><span class=\"br0\">(</span>S<span class=\"sy0\">,</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> item <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span><span class=\"kw4\">reverse</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span>item<span class=\"sy0\">,</span> <span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">400</span> <span class=\"sy0\">&gt;=</span> f<span class=\"br0\">(</span>item<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"overflows\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"sy0\">*</span>x<span class=\"sy0\">^</span><span class=\"nu0\">3</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 25, "block": "<pre class=\"io highlighted_source\">\u00a0<br/><span class=\"co1\">// Initialize objects to be used</span><br/>in_num\u00a0:= <span class=\"kw3\">File</span> standardInput<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>nums\u00a0:= <span class=\"kw2\">List</span> <span class=\"kw2\">clone</span><br/>result\u00a0:= <span class=\"kw3\">Number</span><br/>\u00a0<br/><span class=\"co1\">// Prompt the user and get numbers from standard input</span><br/><span class=\"st0\">\"Please enter 11 numbers:\"</span> println<br/><span class=\"nu0\">11</span> repeat<span class=\"br0\">(</span>nums append<span class=\"br0\">(</span>in_num readLine<span class=\"br0\">(</span><span class=\"br0\">)</span> asNumber<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// Reverse the numbers received</span><br/>nums reverseInPlace<br/>\u00a0<br/><span class=\"co1\">// Apply the function and tell the user if the result is above</span><br/><span class=\"co1\">// our limit. Otherwise, tell them the result.</span><br/>nums <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>v,<br/>  <span class=\"co1\">// v needs parentheses around it for abs to properly convert v to its absolute value</span><br/>  result = <span class=\"br0\">(</span>v<span class=\"br0\">)</span> abs <span class=\"sy0\">**</span> <span class=\"nu0\">0.5</span> + <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> v <span class=\"sy0\">**</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span>,<br/>    <span class=\"st0\">\"Overflow!\"</span> println<br/>  ,<br/>     result println<br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">tpk=: <span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  smoutput <span class=\"st_h\">'Enter 11 numbers: '</span><br/>  t1=: <span class=\"sy0\">((</span><span class=\"nu0\">5</span> * ^&amp;<span class=\"nu0\">3</span><span class=\"sy0\">)</span> + <span class=\"sy0\">(</span>^&amp;<span class=\"nu0\">0.5</span>@* *<span class=\"sy0\">))</span>\"<span class=\"nu0\">0</span> |. <span class=\"nu0\">_999</span>&amp;\".;.<span class=\"nu0\">_1</span> <span class=\"st_h\">' '</span> , <span class=\"nu0\">1</span>!:<span class=\"nu0\">1</span> [ <span class=\"nu0\">1</span><br/>  smoutput <span class=\"st_h\">'Values of functions of reversed input: '</span> , \": t1<br/> \u00a0; &lt;@<span class=\"sy0\">(</span>,&amp;<span class=\"st_h\">' '</span><span class=\"sy0\">)</span>@\": ` <span class=\"sy0\">((</span>&lt;<span class=\"st_h\">'user alert '</span><span class=\"sy0\">)</span>&amp;[<span class=\"sy0\">)</span> @. <span class=\"sy0\">(</span>&gt;&amp;<span class=\"nu0\">400</span><span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span> t1<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 37, "block": "<pre class=\"java highlighted_source\"><span class=\"co3\">/**<br/> * Alexander Alvonellos <br/> */</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span> <br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TPKA <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>... <span class=\"me1\">args</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> input <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">double</span> userInput <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\t\tScanner in <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Please enter a number: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> in.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\tuserInput <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">parseDouble</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumberformatexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NumberFormatException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"You entered invalid input, exiting\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tinput<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> userInput<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> input<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">400.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"f(\u00a0%.2f ) =\u00a0%.2f<span class=\"es0\">\\n</span>\"</span>, x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"f(\u00a0%.2f ) =\u00a0%s<span class=\"es0\">\\n</span>\"</span>, x, <span class=\"st0\">\"TOO LARGE\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> f<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 37, "block": "<pre class=\"javascript highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env js<br/>\u00a0<br/><span class=\"kw1\">function</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> nums <span class=\"sy0\">=</span> getNumbers<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    nums.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"kw1\">in</span>  nums<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        pardoKnuth<span class=\"br0\">(</span>nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> fn<span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> pardoKnuth<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> res <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    putstr<span class=\"br0\">(</span><span class=\"st0\">'f('</span> <span class=\"sy0\">+</span> <span class=\"kw4\">String</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>res <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">' is too large'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">' = '</span> <span class=\"sy0\">+</span> <span class=\"kw4\">String</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> fn<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> getNumbers<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">'Enter'</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"st0\">'numbers.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        putstr<span class=\"br0\">(</span><span class=\"st0\">'   '</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">': '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> num <span class=\"sy0\">=</span> readline<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        nums.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw4\">Number</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> nums<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\">def f:<br/>  def abs: if . &lt; 0 then -. else . end; <br/>  def power(x): (x * log) | exp;<br/>  . as $x | abs | power(0.5) + (5 * (.*.*. ));<br/>\u00a0<br/>. as $in | split(\" \") | map(tonumber)<br/>| if length == 11 then <br/>    reverse | map(f | if . &gt; 400 then \"TOO LARGE\" else . end)<br/>  else error(\"The number of numbers was not 11.\")<br/>  end<br/>| .[]  # print one result per line</pre>"}, {"lang": "Kotlin", "loc": 29, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun f<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">5.0</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> da <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Please enter 11 numbers:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"  ${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(i + 1)}: \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toDoubleOrNull</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Not a valid number, try again\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            da<span class=\"br0\">[</span>i++<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The sequence you just entered in reverse is:\"</span><span class=\"br0\">)</span><br/>    da.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>da.<span class=\"me1\">contentToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Processing this sequence...\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>da<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"  ${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(j + 1)}: \"</span><span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400.0</span><span class=\"br0\">)</span> <br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Overflow!\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            println<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">f(x) = abs(x)^.5 + 5x^3<br/>for i in map(parseint,reverse(split(readline())))<br/>    v = f(i)<br/>    println(\"$i: \", v &gt; 400\u00a0? \"TOO LARGE\"\u00a0: v)<br/>end</pre>"}, {"lang": "Lua", "loc": 18, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> f <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">math.abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"sy0\">*</span>x<span class=\"sy0\">^</span><span class=\"nu0\">3</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> reverse <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> rev <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span> rev<span class=\"br0\">[</span><span class=\"sy0\">#</span>t <span class=\"sy0\">-</span> <span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> rev<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> sequence<span class=\"sy0\">,</span> result <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter 11 numbers...\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>n <span class=\"sy0\">..</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>    sequence<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> x <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>reverse<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    result <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> result <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span> <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Overflow!\"</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Input11 {<br/>      Flush ' empty stack<br/>      For I=1 to 11 {<br/>            Input \"Give me a number \", a<br/>            Data a   ' add to bottom of stack, use: Push a to add to top, to get reverse order here<br/>      }<br/>}<br/>Module Run {<br/>      Print \"Trabb Pardo\u2013Knuth algorithm\"<br/>      Print \"f(x)=Sqrt(Abs(x))+5*x^3\"<br/>      if not match(\"NNNNNNNNN\") then Error \"Need 11 numbers\" <br/>      Shiftback 1, -11 ' reverse  order 11 elements of stack of values<br/>      Def f(x)=Sqrt(Abs(x))+5*x^3<br/>      For i=1 to 11 {<br/>            Read pop<br/>            y=f(pop)<br/>            if y&gt;400 Then {<br/>                  Print format$(\"f({0}) = Overflow!\", pop)<br/>            }  Else {<br/>                  Print format$(\"f({0}) = {1}\", pop, y)<br/>            }<br/>      }<br/>}<br/>Run 10, -1, 1, 2, 3, 4, 4.3, 4.305, 4.303, 4.302, 4.301<br/>Run 1, 2, 3, -4.55,5.1111, 6, -7, 8, 9, 10, 11<br/>Input11<br/>Run<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">seqn\u00a0:= ListTools:-Reverse([parse(Maplets[Display](Maplets:-Elements:-Maplet(Maplets:-Elements:-InputDialog['ID1'](\"Enter a sequence of numbers separated by comma\", 'onapprove' = Maplets:-Elements:-Shutdown(['ID1']), 'oncancel' = Maplets:-Elements:-Shutdown())))[1])]):<br/>f:= x -&gt; abs(x)^0.5 + 5*x^3:<br/>for item in seqn do<br/>\tresult\u00a0:= f(item):<br/>\tif (result &gt; 400) then<br/>\t\tprint(\"Alert: Overflow.\"):<br/>\telse<br/>\t\tprint(result):<br/>\tend if:<br/>end do:</pre>"}, {"lang": "Mathematica", "loc": 15, "block": "<pre class=\"text highlighted_source\">numbers=RandomReal[{-2,6},11]<br/>tpk[numbers_,overflowVal_]:=Module[{revNumbers},<br/> revNumbers=Reverse[numbers];<br/> f[x_]:=Abs[x]^0.5+5 x^3;<br/> Do[<br/>  If[f[i]&gt;overflowVal,<br/>   Print[\"f[\",i,\"]= Overflow\"]<br/>  ,<br/>   Print[\"f[\",i,\"]= \",f[i]]<br/>  ]<br/>  ,<br/>  {i,revNumbers}<br/> ]<br/>]<br/>tpk[numbers,400]</pre>"}, {"lang": "Nim", "loc": 13, "block": "<pre class=\"text highlighted_source\">import math, rdstdin, strutils, algorithm<br/>\u00a0<br/>proc f(x): float = x.abs.pow(0.5) + 5 * x.pow(3)<br/>\u00a0<br/>proc ask: seq[float] =<br/>  readLineFromStdin(\"\\n11 numbers: \").strip.split[0..10].map(parseFloat)<br/>\u00a0<br/>var s = ask()<br/>reverse s<br/>for x in s:<br/>  let result = f x<br/>  stdout.write \" \",x,\":\", if result &gt; 400: \"TOO LARGE!\" else: $result<br/>echo \"\"</pre>"}, {"lang": "Objective-C", "loc": 42, "block": "<pre class=\"objc highlighted_source\"><span class=\"co2\">//</span><br/><span class=\"co2\">//  TPKA.m</span><br/><span class=\"co2\">//  RosettaCode</span><br/><span class=\"co2\">//</span><br/><span class=\"co2\">//  Created by Alexander Alvonellos on 5/26/12.</span><br/><span class=\"co2\">//  Trabb Pardo-Knuth algorithm</span><br/><span class=\"co2\">//</span><br/>\u00a0<br/><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/><span class=\"kw4\">double</span> f<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw4\">double</span> f<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>x, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    @autoreleasepool <span class=\"br0\">{</span><br/>        <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>input <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> alloc<span class=\"br0\">]</span> initWithCapacity<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span>, <span class=\"st0\">\"Instructions: please enter 11 numbers.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; <span class=\"nu0\">11</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> userInput <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;<br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span>, <span class=\"st0\">\"Please enter a number: \"</span><span class=\"br0\">)</span>;<br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span>, <span class=\"sy0\">&amp;</span>userInput<span class=\"br0\">)</span>;<br/>            <span class=\"br0\">[</span>input addObject<span class=\"sy0\">:</span> @<span class=\"br0\">(</span>userInput<span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>; i &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> <span class=\"br0\">[</span>input<span class=\"br0\">[</span>i<span class=\"br0\">]</span> doubleValue<span class=\"br0\">]</span>;<br/>            <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"f(%.2f) <span class=\"es0\">\\t</span>=<span class=\"es0\">\\t</span>\"</span>, x<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>y &lt; <span class=\"nu0\">400.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%.2f<span class=\"es0\">\\n</span>\"</span>, y<span class=\"br0\">)</span>;<br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>, <span class=\"st0\">\"TOO LARGE\"</span><span class=\"br0\">)</span>;<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 12, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> f x <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> x <span class=\"sy0\">+.</span> <span class=\"nu0\">5.0</span> <span class=\"sy0\">*.</span> <span class=\"br0\">(</span>x <span class=\"sy0\">**</span> <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> p x <span class=\"sy0\">=</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">400.0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"Please enter 11 Numbers:\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> lst <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>to_list <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"nu0\">11</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALread_float\"><span class=\"kw3\">read_float</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> f x <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">if</span> p res<br/>    <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"f(%g) =\u00a0%g\\n%!\"</span> x res<br/>    <span class=\"kw1\">else</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>eprintf <span class=\"st0\">\"f(%g)\u00a0:: Overflow\\n%!\"</span> x<br/>  <span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev lst<span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 6, "block": "<pre class=\"parigp highlighted_source\"><span class=\"br0\">{</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"11 numbers: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">11</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"kw1\">eval</span><span class=\"br0\">(</span><span class=\"kw1\">input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  v<span class=\"sy0\">=</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">=</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">5</span><span class=\"sy0\">*</span>x<span class=\"sy0\">^</span><span class=\"nu1\">3</span><span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>x<span class=\"sy0\">&gt;</span><span class=\"nu1\">400</span><span class=\"sy0\">,</span><span class=\"st0\">\"overflow\"</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">11</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> v<span class=\"br0\">[</span><span class=\"nu1\">12</span><span class=\"sy0\">-</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Enter 11 numbers:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">11</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re0\">$number</span> <span class=\"sy0\">=</span> <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a> <span class=\"re0\">$number</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@sequence</span><span class=\"sy0\">,</span> <span class=\"re0\">$number</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">@sequence</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"f(\u00a0%6.2f )\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$result</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"  too large!\"</span> <span class=\"sy0\">:</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"=\u00a0%6.2f\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@nums</span> <span class=\"sy0\">=</span> prompt<span class=\"br0\">(</span><span class=\"st0\">\"Please type 11 space-separated numbers: \"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><br/>    <span class=\"kw1\">until</span> <span class=\"re0\">@nums</span> <span class=\"sy0\">==</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"re0\">@nums</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">abs</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span> <span class=\"sy0\">**</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$n<span class=\"es0\">\\t</span>{ $r &gt; 400\u00a0?? 'Urk!'\u00a0!! $r }\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">function f(atom x)<br/>    return sqrt(abs(x))+5*power(x,3)<br/>end function<br/>\u00a0<br/>string s = substitute(prompt_string(\"Enter 11 numbers:\"),\",\",\" \")<br/>sequence S = scanf(s,\"%f\u00a0%f\u00a0%f\u00a0%f\u00a0%f\u00a0%f\u00a0%f\u00a0%f\u00a0%f\u00a0%f\u00a0%f\")<br/>if length(S)!=1 then puts(1,\"not 11 numbers\") abort(0) end if<br/>S = reverse(S[1])<br/>for i=1 to length(S) do<br/>    atom result = f(S[i])<br/>    if result&gt;400 then<br/>        printf(1,\"f(%g):overflow\\n\",{S[i]})<br/>    else<br/>        printf(1,\"f(%g):%g\\n\",{S[i],result})<br/>    end if<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de f (X)<br/>   (+ (sqrt (abs X)) (* 5 X X X)) )<br/>\u00a0<br/>(trace 'f)<br/>\u00a0<br/>(in NIL<br/>   (prin \"Input 11 numbers: \")<br/>   (for X (reverse (make (do 11 (link (read)))))<br/>      (when (&gt; (f X) 400)<br/>         (prinl \"TOO LARGE\") ) ) )</pre>"}, {"lang": "PL/I", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Trabb: Procedure options (main); /* 11 November 2013 */<br/>\u00a0<br/>   declare (i, n) fixed binary;<br/>   declare s fixed (5,1) controlled;<br/>   declare g fixed (15,5);<br/>\u00a0<br/>   put ('Please type 11 values:');<br/>   do i = 1 to 11;<br/>      allocate s;<br/>      get (s);<br/>      put (s);<br/>   end;<br/>   put skip(2) ('Results:');<br/>   do i = 1 to 11;<br/>      g = f(s); put skip list (s);<br/>      if g &gt; 400 then put ('Too large'); else put (g);<br/>      free s;<br/>   end;<br/>\u00a0<br/>f: procedure (x) returns (fixed(15,5));<br/>   declare x fixed (5,1);<br/>   return (sqrt(abs(x)) + 5*x**3);<br/>end f;<br/>\u00a0<br/>end Trabb;<br/>\u00a0</pre>"}, {"lang": "PL/M", "loc": 28, "block": "<pre class=\"text highlighted_source\">TPK: DO;<br/>    /* external I/O and real mathematical routines */<br/>    WRITE$STRING: PROCEDURE( S )      EXTERNAL; DECLARE S POINTER; END;<br/>    WRITE$REAL:   PROCEDURE( R )      EXTERNAL; DECLARE R REAL;    END;<br/>    WRITE$NL:     PROCEDURE           EXTERNAL;                    END;<br/>    READ$REAL:    PROCEDURE( R ) REAL EXTERNAL; DECLARE R POINTER; END;<br/>    REAL$ABS:     PROCEDURE( R ) REAL EXTERNAL; DECLARE R REAL;    END;<br/>    REAL$SQRT:    PROCEDURE( R ) REAL EXTERNAL; DECLARE R REAL;    END;<br/>    /* end external routines */<br/>\u00a0<br/>    F: PROCEDURE( T ) REAL;<br/>        DECLARE T REAL;<br/>        RETURN REAL$SQRT(REAL$ABS(T))+5*T*T*T;<br/>    END F;<br/>    MAIN: PROCEDURE;<br/>        DECLARE Y REAL, A( 11 ) REAL, I INTEGER;<br/>        DO I = 0 TO 10;<br/>           CALL READ$REAL( @A( I ) );<br/>        END;<br/>        DO I = 10 TO 0 BY -1;<br/>           Y = F( A( I ) );<br/>           IF Y &gt; 400.0 THEN CALL WRITE$STRING( @( 'TOO LARGE', 0 ) );<br/>                        ELSE CALL WRITE$REAL( Y );<br/>           CALL WRITE$NL();<br/>        END;<br/>    END MAIN;<br/>\u00a0<br/>END TPK;</pre>"}, {"lang": "PowerShell", "loc": 51, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Tpk<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipeline<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipelineByPropertyName<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">double</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Number</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    Begin<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>TpkFunction <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">double</span><span class=\"br0\">]</span><span class=\"re0\">$Number</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"re0\">$Number</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span><span class=\"re0\">$Number</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">[</span><span class=\"re3\">object</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    Process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Number</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>TpkFunction <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-le</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Overflow\"</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>            Number <span class=\"sy0\">=</span> <span class=\"re0\">$Number</span><br/>            Result <span class=\"sy0\">=</span> <span class=\"re0\">$result</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    End<br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">Array</span><span class=\"br0\">]</span>::Reverse<span class=\"br0\">(</span><span class=\"re0\">$output</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$output</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 52, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.d f<span class=\"br0\">(</span>x.d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"kw2\">Abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> split<span class=\"br0\">(</span>i.s, delimeter.s, List o.d<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> index <span class=\"sy0\">=</span> <span class=\"kw2\">CountString</span><span class=\"br0\">(</span>i, delimeter<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"co1\">;add 1 because last entry will not have a delimeter</span><br/>\u00a0<br/>  <span class=\"kw1\">While</span> index <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    o<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">ValD</span><span class=\"br0\">(</span><span class=\"kw2\">Trim</span><span class=\"br0\">(</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>i, index, delimeter<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    index <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> ListSize<span class=\"br0\">(</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> i$, entriesAreValid <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, result.d, output$<br/><span class=\"kw1\">NewList</span> numbers.d<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span> <br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#crlf$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Enter eleven numbers that are each separated by spaces or commas:\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    i$ <span class=\"sy0\">=</span> <span class=\"kw2\">Input</span><span class=\"br0\">(</span><br/>    i$ <span class=\"sy0\">=</span> <span class=\"kw2\">Trim</span><span class=\"br0\">(</span>i$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> split<span class=\"br0\">(</span>i$, <span class=\"st0\">\",\"</span>, numbers.d<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><br/>      <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>numbers<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> split<span class=\"br0\">(</span>i$, <span class=\"st0\">\" \"</span>, numbers.d<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Not enough numbers were supplied.\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>numbers<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Else</span> <br/>        entriesAreValid <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Else</span><br/>      entriesAreValid <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Until</span> entriesAreValid <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">ForEach</span> numbers<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    output$  <span class=\"sy0\">=</span> <span class=\"st0\">\"f(\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">RTrim</span><span class=\"br0\">(</span><span class=\"kw2\">RTrim</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>numbers<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\") = \"</span><br/>    result.d <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>numbers<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> result <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span><br/>      output$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Too Large\"</span><br/>    <span class=\"kw1\">Else</span><br/>      output$ <span class=\"sy0\">+</span> <span class=\"kw2\">RTrim</span><span class=\"br0\">(</span><span class=\"kw2\">RTrim</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>result, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>output$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#crlf$ <span class=\"sy0\">+</span> #crlf$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"python highlighted_source\">Python 3.2.2 <span class=\"br0\">(</span>default<span class=\"sy0\">,</span> Sep  <span class=\"nu0\">4</span> <span class=\"nu0\">2011</span><span class=\"sy0\">,</span> <span class=\"nu0\">09</span>:<span class=\"nu0\">51</span>:<span class=\"nu0\">08</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>MSC v.1500 <span class=\"nu0\">32</span> bit <span class=\"br0\">(</span>Intel<span class=\"br0\">)</span><span class=\"br0\">]</span> on win32<br/>Type <span class=\"st0\">\"copyright\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"credits\"</span> <span class=\"kw1\">or</span> <span class=\"st0\">\"license()\"</span> <span class=\"kw1\">for</span> more information.<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> ** <span class=\"nu0\">0.5</span> + <span class=\"nu0\">5</span> * x**<span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%s:%s'</span>\u00a0% <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> v <span class=\"kw1\">if</span> v<span class=\"sy0\">&lt;=</span><span class=\"nu0\">400</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"TOO LARGE!\"</span><span class=\"br0\">)</span><br/>\t           <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span>v <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>y<span class=\"sy0\">,</span> f<span class=\"br0\">(</span><span class=\"kw2\">float</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>numbers: '</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>:<span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">11</span> numbers: <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span><br/><span class=\"nu0\">11</span>:TOO LARGE<span class=\"sy0\">!,</span> <span class=\"nu0\">10</span>:TOO LARGE<span class=\"sy0\">!,</span> <span class=\"nu0\">9</span>:TOO LARGE<span class=\"sy0\">!,</span> <span class=\"nu0\">8</span>:TOO LARGE<span class=\"sy0\">!,</span> <span class=\"nu0\">7</span>:TOO LARGE<span class=\"sy0\">!,</span> <span class=\"nu0\">6</span>:TOO LARGE<span class=\"sy0\">!,</span> <span class=\"nu0\">5</span>:TOO LARGE<span class=\"sy0\">!,</span> <span class=\"nu0\">4</span>:<span class=\"nu0\">322.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span>:<span class=\"nu0\">136.73205080756887</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>:<span class=\"nu0\">41.41421356237309</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>:<span class=\"nu0\">6.0</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"text highlighted_source\">S &lt;- scan(n=11)<br/>\u00a0<br/>f &lt;- function(x) sqrt(abs(x)) + 5*x^3<br/>\u00a0<br/>for (i in rev(S)) {<br/>  res &lt;- f(i)<br/>  if (res &gt; 400)<br/>    print(\"Too large!\")<br/>  else<br/>    print(res)<br/>}</pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define input <br/>  (for/list ([i 11])<br/>    (printf \"Enter a number (~a of 11): \" (+ 1 i))<br/>    (read)))<br/>\u00a0<br/>(for ([x (reverse input)])<br/>  (define res (+ (sqrt (abs x)) (* 5 (expt x 3))))<br/>  (if (&gt; res 400)<br/>      (displayln \"Overflow!\")<br/>      (printf \"f(~a) = ~a\\n\" x res)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 48, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program implements the Trabb\u2500Pardo-Knuth algorithm for N numbers (default is 11).*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">200</span>                               <span class=\"coMULTI\">/*the number of digits precision to use*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>;   <span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">11</span>    <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>maxValue= <span class=\"nu0\">400</span>                                    <span class=\"coMULTI\">/*the maximum value   f(x)   can have. */</span><br/>     wid=  <span class=\"nu0\">20</span>                                    <span class=\"coMULTI\">/*  \u00b7\u00b7\u00b7 but only show this many digits.*/</span><br/>    frac=   <span class=\"nu0\">5</span>                                    <span class=\"coMULTI\">/*  \u00b7\u00b7\u00b7 show this # of fractional digs.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'                           _____'</span>           <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 this  SAY  displays a vinculum.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'function:        \u0192(x)  \u2261  \u221a \u2502x\u2502   +   (5 * x^3)'</span><br/>prompt= <span class=\"st0\">'enter '</span>      N      <span class=\"st0\">\" numbers for the Trabb\u2500Pardo\u2500Knuth algorithm:     (or Quit)\"</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> ask=<span class=\"nu0\">0</span>;    <span class=\"kw1\">say</span>;  <span class=\"coMULTI\">/*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/</span><br/>  <span class=\"kw1\">say</span> prompt;  <span class=\"kw1\">say</span>;      <span class=\"kw1\">pull</span> $;     <span class=\"kw1\">say</span>                                             <span class=\"coMULTI\">/*\u2591*/</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'QUIT'</span>,$,<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;    <span class=\"kw1\">say</span> <span class=\"st0\">'quitting.'</span>;    <span class=\"kw1\">exit</span> <span class=\"nu0\">1</span>;   <span class=\"kw3\">end</span>               <span class=\"coMULTI\">/*\u2591*/</span><br/>  ok=<span class=\"nu0\">0</span>                                                                               <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw1\">select</span>                  <span class=\"coMULTI\">/*validate there're N numbers.*/</span>    <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw3\">when</span> $=<span class=\"st0\">''</span>        <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">\"no numbers entered\"</span>             <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw3\">when</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>N  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">\"not enough numbers entered\"</span>     <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw3\">when</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>N  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"st0\">\"too many numbers entered\"</span>       <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw3\">otherwise</span>        ok=<span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span>                                            <span class=\"coMULTI\">/*\u2591*/</span><br/>  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>ok  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                                    <span class=\"coMULTI\">/* [\u2193]  W=max width. */</span>    <span class=\"coMULTI\">/*\u2591*/</span><br/>  w=<span class=\"nu0\">0</span>;                   <span class=\"kw1\">do</span> v=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;       _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>$, v<span class=\"br0\">)</span>;   w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w, <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>_, <span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>          <span class=\"coMULTI\">/*numeric\u00a0?*/</span>    <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw1\">say</span> _  <span class=\"st0\">\"isn't numeric\"</span>;   <span class=\"kw1\">iterate</span> ask                       <span class=\"coMULTI\">/*\u2591*/</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*v*/</span>                                                 <span class=\"coMULTI\">/*\u2591*/</span><br/>  <span class=\"kw1\">leave</span>                                                                              <span class=\"coMULTI\">/*\u2591*/</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*ask*/</span>      <span class=\"coMULTI\">/*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'numbers entered: '</span>    $<br/><span class=\"kw1\">say</span><br/>        <span class=\"kw1\">do</span> i=N  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  #=<span class=\"kw6\">word</span><span class=\"br0\">(</span>$, i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*process the numbers in reverse.      */</span><br/>        g =  fmt<span class=\"br0\">(</span>   f<span class=\"br0\">(</span> # <span class=\"br0\">)</span>        <span class=\"br0\">)</span>              <span class=\"coMULTI\">/*invoke  function  \u0192  with arg number.*/</span><br/>        gw=<span class=\"kw6\">right</span><span class=\"br0\">(</span>  <span class=\"st0\">'\u0192('</span>#<span class=\"st0\">\") \"</span>,  w+<span class=\"nu0\">7</span><span class=\"br0\">)</span>              <span class=\"coMULTI\">/*nicely formatted  \u0192(number).         */</span><br/>        <span class=\"kw1\">if</span> g<span class=\"sy0\">&gt;</span>maxValue  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> gw    <span class=\"st0\">\"is &gt;  \"</span>     maxValue      <span class=\"st0\">' ['</span><span class=\"kw6\">space</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/>                       <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> gw     <span class=\"st0\">\"   = \"</span>     g<br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span>                              <span class=\"coMULTI\">/* [\u2191]  display the result to terminal.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>f:    <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;           <span class=\"kw1\">return</span>  sqrt<span class=\"br0\">(</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span>    +    <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> x<span class=\"sy0\">**</span><span class=\"nu0\">3</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fmt:  z=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, wid, frac<span class=\"br0\">)</span>, <span class=\"st0\">'e'</span>, <span class=\"st0\">\"E\"</span><span class=\"br0\">)</span>, wid<span class=\"br0\">)</span> <span class=\"coMULTI\">/*right adjust; use e*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>,z<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> z=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span>z,<span class=\"st0\">'T'</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>,<span class=\"st0\">\"T\"</span>,<span class=\"sy0\">.</span><span class=\"br0\">)</span>,wid<span class=\"br0\">)</span> <span class=\"coMULTI\">/*strip trailing 0 &amp;.*/</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>z, wid - <span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'e'</span>, z<span class=\"br0\">)</span>==<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*adjust: no exponent*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>; d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>; h=d+<span class=\"nu0\">6</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;  g=g <span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h\u00a0% <span class=\"nu0\">2</span>  + <span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span>;   <span class=\"kw1\">return</span> g</pre>"}, {"lang": "Ring", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Trabb Pardo\u2013Knuth algorithm<br/>\u00a0<br/>decimals(3)<br/>x = list(11)<br/>for n=1 to 11<br/>    x[n] = n<br/>next<br/>\u00a0<br/>s = [-5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6] <br/>for i = 1 to 11 <br/>    see string(i) + \" =&gt; \" + s[i] + nl<br/>next <br/>see copy(\"-\", 20) + nl <br/>i = i - 1 <br/>\u00a0<br/>while i &gt; 0<br/>      see \"f(\" + string(s[i]) + \") = \" <br/>      x = f(s[i])<br/>      if x &gt; 400 <br/>         see \"-=&lt; overflow &gt;=-\" + nl<br/>      else <br/>         see x + nl<br/>      ok<br/>      i = i - 1<br/>end<br/>\u00a0<br/>func f(n)<br/>     return sqrt(fabs(n)) + 5 * pow(n, 3)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> x.<span class=\"me1\">abs</span> <span class=\"sy0\">**</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">3</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Please enter 11 numbers:\"</span><br/>nums = <span class=\"nu0\">11</span>.<span class=\"me1\">times</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"kw3\">gets</span>.<span class=\"me1\">to_f</span> <span class=\"br0\">}</span><br/>\u00a0<br/>nums.<span class=\"me1\">reverse_each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"f(#{n}) = \"</span><br/>  res = f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> res <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span>\u00a0? <span class=\"st0\">\"Overflow!\"</span>\u00a0: res<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TPKa <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">final</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numbers <span class=\"sy0\">=</span> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span>.<span class=\"me1\">MutableList</span><span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">final</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> in <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Scanner</span><span class=\"br0\">(</span>System.<span class=\"me1\">in</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>numbers.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> CAPACITY<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"enter a number: \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>            numbers +<span class=\"sy0\">=</span> in.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_:</span> Exception <span class=\"sy0\">=&gt;</span><br/>                in.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"invalid input, try again\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    numbers reverseMap <span class=\"br0\">{</span> x <span class=\"sy0\">=&gt;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fx <span class=\"sy0\">=</span> Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>, .5D<span class=\"br0\">)</span> + 5D <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>fx <span class=\"sy0\">&lt;</span> THRESHOLD<span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"%8.3f -&gt;\u00a0%8.3f<span class=\"es1\">\\n</span>\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>x, fx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"%8.3f -&gt;\u00a0%s<span class=\"es1\">\\n</span>\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>x, Double.<span class=\"me1\">PositiveInfinity</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">final</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> THRESHOLD <span class=\"sy0\">=</span> 400D<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">final</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> CAPACITY <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">var nums; <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    nums = Sys.<span class=\"me1\">readln</span><span class=\"br0\">(</span><span class=\"st0\">\"Please type 11 space-separated numbers: \"</span><span class=\"br0\">)</span>.<span class=\"me1\">nums</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>nums.<span class=\"me1\">len</span>\u00a0!= <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>\u00a0<br/>nums.<span class=\"me1\">reverse</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    var r = <span class=\"br0\">(</span>n.<span class=\"me1\">abs</span>.<span class=\"me1\">sqrt</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    say <span class=\"st0\">\"#{n}<span class=\"es0\">\\t</span>#{ r &gt; 400\u00a0? 'Urk!'\u00a0: r }\"</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\"> 10 DIM A(11)<br/> 20 PRINT \"ENTER ELEVEN NUMBERS:\"<br/> 30 FOR I=1 TO 11<br/> 40 INPUT A(I)<br/> 50 NEXT I<br/> 60 FOR I=11 TO 1 STEP -1<br/> 70 LET Y=SQR ABS A(I)+5*A(I)**3<br/> 80 IF Y&lt;=400 THEN GOTO 110<br/> 90 PRINT A(I),\"TOO LARGE\"<br/>100 GOTO 120<br/>110 PRINT A(I),Y<br/>120 NEXT I</pre>"}, {"lang": "Swift", "loc": 19, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>print(\"Enter 11 numbers for the Trabb\u2500Pardo\u2500Knuth algorithm:\")<br/>\u00a0<br/>let f: (Double) -&gt; Double = { sqrt(fabs($0)) + 5 * pow($0, 3) }<br/>\u00a0<br/>(1...11)<br/>    .generate()<br/>    .map { i -&gt; Double in<br/>        print(\"\\(i): \", terminator: \"\")<br/>        guard let s = readLine(), let n = Double(s) else { return 0 }<br/>        return n<br/>    }<br/>    .reverse()<br/>    .forEach {<br/>        let result = f($0)<br/>        print(\"f(\\($0))\", result &gt; 400.0\u00a0? \"OVERFLOW\"\u00a0: result, separator: \"\\t\")<br/>    }<br/>\u00a0</pre>"}, {"lang": "Symsyn", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>|Trabb Pardo\u2013Knuth algorithm<br/>\u00a0<br/>a\u00a0: 11 0<br/>\u00a0<br/> i<br/> if i LE 10<br/>    [] $s<br/>    ~ $s w<br/>    w a.i<br/>   + i<br/>    goif<br/> endif<br/> 10 i<br/> if i GE 0<br/>    call f<br/>    if x GT 400<br/>       'too large' $s<br/>    else<br/>       ~ x $s<br/>    endif<br/>    ~ i $r<br/>    + ' ' $r<br/>    + $r $s.1<br/>    $s []<br/>    - i<br/>    goif<br/> endif<br/> stop<br/>\u00a0<br/>f a.i t<br/>  * t t x<br/>  * x t x<br/>  * 5 x<br/>  abs t<br/>  sqrt t y<br/>  + y x<br/>  return<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 20, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Helper procedures</span><br/><span class=\"kw1\">proc</span> f <span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">0.5</span> + <span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> overflow <span class=\"br0\">{</span>y<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">400</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Read in 11 numbers, with nice prompting</span><br/><span class=\"kw2\">fconfigure</span> stdout -buffering none<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">11</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"number ${n}: \"</span><br/>    <span class=\"kw2\">lappend</span> S <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin<span class=\"br0\">]</span> <span class=\"st0\">\"%f\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Process and print results in reverse order</span><br/><span class=\"kw1\">foreach</span> x <span class=\"br0\">[</span>lreverse <span class=\"re0\">$S</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">[</span>f <span class=\"re0\">$x</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>overflow <span class=\"re0\">$result</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"${x}: TOO LARGE!\"</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"${x}: $result\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 22, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> tpk(s)<br/>\tarr = Split(s,<span class=\"st0\">\" \"</span>)<br/>\t<span class=\"kw3\">For</span> i = <span class=\"kw4\">UBound</span>(arr) <span class=\"kw3\">To</span> 0 <span class=\"kw3\">Step</span> -1<br/>\t\tn = fx(CDbl(arr(i)))<br/>\t\t<span class=\"kw3\">If</span>  n &gt; 400 <span class=\"kw3\">Then</span><br/>\t\t\tWScript.StdOut.WriteLine arr(i) &amp; <span class=\"st0\">\" = OVERFLOW\"</span><br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tWScript.StdOut.WriteLine arr(i) &amp; <span class=\"st0\">\" = \"</span> &amp; n<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> fx(x)<br/>\tfx = Sqr(Abs(x))+5*x^3<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'testing the function<br/></span>WScript.StdOut.Write <span class=\"st0\">\"Please enter a series of numbers:\"</span><br/>list = WScript.StdIn.ReadLine<br/>tpk(list)<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 18, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>func real F(X);<br/>real X;<br/>return sqrt(abs(X)) + 5.0*X*X*X;<br/>\u00a0<br/>real Result, S(11);  int I;<br/>[Text(0, \"Please enter 11 numbers: \");<br/>for I:= 0 to 11-1 do S(I):= RlIn(0);<br/>\u00a0<br/>for I:= 11-1 downto 0 do<br/>        [RlOut(0, S(I));<br/>        Result:= F(S(I));<br/>        if Result &gt; 400.0 then<br/>                Text(0, \"  overflows\")<br/>        else    RlOut(0, Result);<br/>        CrLf(0)];<br/>]</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn f(x) { x.abs().pow(0.5) + x.pow(3)*5 }<br/>reg ns; do{<br/>   ns=ask(\"11 numbers seperated by spaces: \");<br/>   try{ ns=ns.split(\" \").filter().apply(\"toFloat\") } catch{}<br/>}while(not ns.isType(List) or ns.len()!=11);<br/>ns.reverse().apply(fcn(x){<br/>   fx:=f(x); \"f(%7.3f)--&gt;%s\".fmt(x, if(fx&gt;400)\"Overflow\" else fx) })<br/>.pump(Console.println);</pre>"}]}